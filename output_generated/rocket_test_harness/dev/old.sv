// Generated by CIRCT firtool-1.43.0
// Standard header to adapt well known macros to our needs.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// VCS coverage exclude_file
module rockettile_icache_tag_array_combMem(
  input  [5:0]  RW0_addr,
  input         RW0_en,
                RW0_clk,
                RW0_wmode,
  input  [83:0] RW0_wdata,
  input  [3:0]  RW0_wmask,
  output [83:0] RW0_rdata
);

  reg [83:0] Memory[0:63];
  reg [5:0]  _GEN;
  reg        _GEN_0;
  reg        _GEN_1;
  always @(posedge RW0_clk) begin
    _GEN <= RW0_addr;
    _GEN_0 <= RW0_en;
    _GEN_1 <= RW0_wmode;
    if (RW0_en & RW0_wmask[0] & RW0_wmode)
      Memory[RW0_addr][32'h0 +: 21] <= RW0_wdata[20:0];
    if (RW0_en & RW0_wmask[1] & RW0_wmode)
      Memory[RW0_addr][32'h15 +: 21] <= RW0_wdata[41:21];
    if (RW0_en & RW0_wmask[2] & RW0_wmode)
      Memory[RW0_addr][32'h2A +: 21] <= RW0_wdata[62:42];
    if (RW0_en & RW0_wmask[3] & RW0_wmode)
      Memory[RW0_addr][32'h3F +: 21] <= RW0_wdata[83:63];
  end // always @(posedge)
  assign RW0_rdata = _GEN_0 & ~_GEN_1 ? Memory[_GEN] : 84'bx;
endmodule

// VCS coverage exclude_file
module rockettile_dcache_tag_array_combMem(
  input  [5:0]  RW0_addr,
  input         RW0_en,
                RW0_clk,
                RW0_wmode,
  input  [87:0] RW0_wdata,
  input  [3:0]  RW0_wmask,
  output [87:0] RW0_rdata
);

  reg [87:0] Memory[0:63];
  reg [5:0]  _GEN;
  reg        _GEN_0;
  reg        _GEN_1;
  always @(posedge RW0_clk) begin
    _GEN <= RW0_addr;
    _GEN_0 <= RW0_en;
    _GEN_1 <= RW0_wmode;
    if (RW0_en & RW0_wmask[0] & RW0_wmode)
      Memory[RW0_addr][32'h0 +: 22] <= RW0_wdata[21:0];
    if (RW0_en & RW0_wmask[1] & RW0_wmode)
      Memory[RW0_addr][32'h16 +: 22] <= RW0_wdata[43:22];
    if (RW0_en & RW0_wmask[2] & RW0_wmode)
      Memory[RW0_addr][32'h2C +: 22] <= RW0_wdata[65:44];
    if (RW0_en & RW0_wmask[3] & RW0_wmode)
      Memory[RW0_addr][32'h42 +: 22] <= RW0_wdata[87:66];
  end // always @(posedge)
  assign RW0_rdata = _GEN_0 & ~_GEN_1 ? Memory[_GEN] : 88'bx;
endmodule

// VCS coverage exclude_file
module rockettile_icache_data_arrays_0_combMem(
  input  [8:0]   RW0_addr,
  input          RW0_en,
                 RW0_clk,
                 RW0_wmode,
  input  [127:0] RW0_wdata,
  input  [3:0]   RW0_wmask,
  output [127:0] RW0_rdata
);

  reg [127:0] Memory[0:511];
  reg [8:0]   _GEN;
  reg         _GEN_0;
  reg         _GEN_1;
  always @(posedge RW0_clk) begin
    _GEN <= RW0_addr;
    _GEN_0 <= RW0_en;
    _GEN_1 <= RW0_wmode;
    if (RW0_en & RW0_wmask[0] & RW0_wmode)
      Memory[RW0_addr][32'h0 +: 32] <= RW0_wdata[31:0];
    if (RW0_en & RW0_wmask[1] & RW0_wmode)
      Memory[RW0_addr][32'h20 +: 32] <= RW0_wdata[63:32];
    if (RW0_en & RW0_wmask[2] & RW0_wmode)
      Memory[RW0_addr][32'h40 +: 32] <= RW0_wdata[95:64];
    if (RW0_en & RW0_wmask[3] & RW0_wmode)
      Memory[RW0_addr][32'h60 +: 32] <= RW0_wdata[127:96];
  end // always @(posedge)
  assign RW0_rdata = _GEN_0 & ~_GEN_1 ? Memory[_GEN] : 128'bx;
endmodule

// VCS coverage exclude_file
module rockettile_dcache_data_arrays_0_combMem(
  input  [8:0]   RW0_addr,
  input          RW0_en,
                 RW0_clk,
                 RW0_wmode,
  input  [255:0] RW0_wdata,
  input  [31:0]  RW0_wmask,
  output [255:0] RW0_rdata
);

  reg [255:0] Memory[0:511];
  reg [8:0]   _GEN;
  reg         _GEN_0;
  reg         _GEN_1;
  always @(posedge RW0_clk) begin
    _GEN <= RW0_addr;
    _GEN_0 <= RW0_en;
    _GEN_1 <= RW0_wmode;
    if (RW0_en & RW0_wmask[0] & RW0_wmode)
      Memory[RW0_addr][32'h0 +: 8] <= RW0_wdata[7:0];
    if (RW0_en & RW0_wmask[1] & RW0_wmode)
      Memory[RW0_addr][32'h8 +: 8] <= RW0_wdata[15:8];
    if (RW0_en & RW0_wmask[2] & RW0_wmode)
      Memory[RW0_addr][32'h10 +: 8] <= RW0_wdata[23:16];
    if (RW0_en & RW0_wmask[3] & RW0_wmode)
      Memory[RW0_addr][32'h18 +: 8] <= RW0_wdata[31:24];
    if (RW0_en & RW0_wmask[4] & RW0_wmode)
      Memory[RW0_addr][32'h20 +: 8] <= RW0_wdata[39:32];
    if (RW0_en & RW0_wmask[5] & RW0_wmode)
      Memory[RW0_addr][32'h28 +: 8] <= RW0_wdata[47:40];
    if (RW0_en & RW0_wmask[6] & RW0_wmode)
      Memory[RW0_addr][32'h30 +: 8] <= RW0_wdata[55:48];
    if (RW0_en & RW0_wmask[7] & RW0_wmode)
      Memory[RW0_addr][32'h38 +: 8] <= RW0_wdata[63:56];
    if (RW0_en & RW0_wmask[8] & RW0_wmode)
      Memory[RW0_addr][32'h40 +: 8] <= RW0_wdata[71:64];
    if (RW0_en & RW0_wmask[9] & RW0_wmode)
      Memory[RW0_addr][32'h48 +: 8] <= RW0_wdata[79:72];
    if (RW0_en & RW0_wmask[10] & RW0_wmode)
      Memory[RW0_addr][32'h50 +: 8] <= RW0_wdata[87:80];
    if (RW0_en & RW0_wmask[11] & RW0_wmode)
      Memory[RW0_addr][32'h58 +: 8] <= RW0_wdata[95:88];
    if (RW0_en & RW0_wmask[12] & RW0_wmode)
      Memory[RW0_addr][32'h60 +: 8] <= RW0_wdata[103:96];
    if (RW0_en & RW0_wmask[13] & RW0_wmode)
      Memory[RW0_addr][32'h68 +: 8] <= RW0_wdata[111:104];
    if (RW0_en & RW0_wmask[14] & RW0_wmode)
      Memory[RW0_addr][32'h70 +: 8] <= RW0_wdata[119:112];
    if (RW0_en & RW0_wmask[15] & RW0_wmode)
      Memory[RW0_addr][32'h78 +: 8] <= RW0_wdata[127:120];
    if (RW0_en & RW0_wmask[16] & RW0_wmode)
      Memory[RW0_addr][32'h80 +: 8] <= RW0_wdata[135:128];
    if (RW0_en & RW0_wmask[17] & RW0_wmode)
      Memory[RW0_addr][32'h88 +: 8] <= RW0_wdata[143:136];
    if (RW0_en & RW0_wmask[18] & RW0_wmode)
      Memory[RW0_addr][32'h90 +: 8] <= RW0_wdata[151:144];
    if (RW0_en & RW0_wmask[19] & RW0_wmode)
      Memory[RW0_addr][32'h98 +: 8] <= RW0_wdata[159:152];
    if (RW0_en & RW0_wmask[20] & RW0_wmode)
      Memory[RW0_addr][32'hA0 +: 8] <= RW0_wdata[167:160];
    if (RW0_en & RW0_wmask[21] & RW0_wmode)
      Memory[RW0_addr][32'hA8 +: 8] <= RW0_wdata[175:168];
    if (RW0_en & RW0_wmask[22] & RW0_wmode)
      Memory[RW0_addr][32'hB0 +: 8] <= RW0_wdata[183:176];
    if (RW0_en & RW0_wmask[23] & RW0_wmode)
      Memory[RW0_addr][32'hB8 +: 8] <= RW0_wdata[191:184];
    if (RW0_en & RW0_wmask[24] & RW0_wmode)
      Memory[RW0_addr][32'hC0 +: 8] <= RW0_wdata[199:192];
    if (RW0_en & RW0_wmask[25] & RW0_wmode)
      Memory[RW0_addr][32'hC8 +: 8] <= RW0_wdata[207:200];
    if (RW0_en & RW0_wmask[26] & RW0_wmode)
      Memory[RW0_addr][32'hD0 +: 8] <= RW0_wdata[215:208];
    if (RW0_en & RW0_wmask[27] & RW0_wmode)
      Memory[RW0_addr][32'hD8 +: 8] <= RW0_wdata[223:216];
    if (RW0_en & RW0_wmask[28] & RW0_wmode)
      Memory[RW0_addr][32'hE0 +: 8] <= RW0_wdata[231:224];
    if (RW0_en & RW0_wmask[29] & RW0_wmode)
      Memory[RW0_addr][32'hE8 +: 8] <= RW0_wdata[239:232];
    if (RW0_en & RW0_wmask[30] & RW0_wmode)
      Memory[RW0_addr][32'hF0 +: 8] <= RW0_wdata[247:240];
    if (RW0_en & RW0_wmask[31] & RW0_wmode)
      Memory[RW0_addr][32'hF8 +: 8] <= RW0_wdata[255:248];
  end // always @(posedge)
  assign RW0_rdata = _GEN_0 & ~_GEN_1 ? Memory[_GEN] : 256'bx;
endmodule

// VCS coverage exclude_file
module table_combMem(
  input  [8:0] R0_addr,
  input        R0_en,
               R0_clk,
  input  [8:0] W0_addr,
  input        W0_en,
               W0_clk,
               W0_data,
  output       R0_data
);

  reg Memory[0:511];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 1'bx;
endmodule

// VCS coverage exclude_file
module ram_sink_combMem(
  input        R0_addr,
               R0_en,
               R0_clk,
               W0_addr,
               W0_en,
               W0_clk,
  input  [1:0] W0_data,
  output [1:0] R0_data
);

  reg [1:0] Memory[0:1];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 2'bx;
endmodule

// VCS coverage exclude_file
module ram_combMem(
  input        R0_addr,
               R0_en,
               R0_clk,
               W0_addr,
               W0_en,
               W0_clk,
  input  [5:0] W0_data,
  output [5:0] R0_data
);

  reg [5:0] Memory[0:1];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 6'bx;
endmodule

// VCS coverage exclude_file
module ram_combMem_0(
  input        R0_addr,
               R0_en,
               R0_clk,
               W0_addr,
               W0_en,
               W0_clk,
  input  [6:0] W0_data,
  output [6:0] R0_data
);

  reg [6:0] Memory[0:1];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 7'bx;
endmodule

// VCS coverage exclude_file
module ram_combMem_1(
  input  [1:0] R0_addr,
  input        R0_en,
               R0_clk,
  input  [1:0] W0_addr,
  input        W0_en,
               W0_clk,
  input  [7:0] W0_data,
  output [7:0] R0_data
);

  reg [7:0] Memory[0:3];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 8'bx;
endmodule

// VCS coverage exclude_file
module ram_combMem_2(
  input  [2:0] R0_addr,
  input        R0_en,
               R0_clk,
  input  [2:0] W0_addr,
  input        W0_en,
               W0_clk,
  input  [8:0] W0_data,
  output [8:0] R0_data
);

  reg [8:0] Memory[0:7];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 9'bx;
endmodule

// VCS coverage exclude_file
module ram_combMem_3(
  input  [2:0]  R0_addr,
  input         R0_en,
                R0_clk,
  input  [2:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [13:0] W0_data,
  output [13:0] R0_data
);

  reg [13:0] Memory[0:7];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 14'bx;
endmodule

// VCS coverage exclude_file
module ram_combMem_4(
  input         R0_addr,
                R0_en,
                R0_clk,
                W0_addr,
                W0_en,
                W0_clk,
  input  [59:0] W0_data,
  output [59:0] R0_data
);

  reg [59:0] Memory[0:1];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 60'bx;
endmodule

// VCS coverage exclude_file
module ram_combMem_5(
  input         R0_addr,
                R0_en,
                R0_clk,
                W0_addr,
                W0_en,
                W0_clk,
  input  [60:0] W0_data,
  output [60:0] R0_data
);

  reg [60:0] Memory[0:1];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 61'bx;
endmodule

// VCS coverage exclude_file
module ram_combMem_6(
  input         R0_addr,
                R0_en,
                R0_clk,
                W0_addr,
                W0_en,
                W0_clk,
  input  [61:0] W0_data,
  output [61:0] R0_data
);

  reg [61:0] Memory[0:1];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 62'bx;
endmodule

// VCS coverage exclude_file
module mem_combMem(
  input  [8:0]  R0_addr,
  input         R0_en,
                R0_clk,
  input  [8:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [63:0] W0_data,
  input  [7:0]  W0_mask,
  output [63:0] R0_data
);

  reg [63:0] Memory[0:511];
  reg        _GEN;
  reg [8:0]  _GEN_0;
  always @(posedge R0_clk) begin
    _GEN <= R0_en;
    _GEN_0 <= R0_addr;
  end // always @(posedge)
  always @(posedge W0_clk) begin
    if (W0_en & W0_mask[0])
      Memory[W0_addr][32'h0 +: 8] <= W0_data[7:0];
    if (W0_en & W0_mask[1])
      Memory[W0_addr][32'h8 +: 8] <= W0_data[15:8];
    if (W0_en & W0_mask[2])
      Memory[W0_addr][32'h10 +: 8] <= W0_data[23:16];
    if (W0_en & W0_mask[3])
      Memory[W0_addr][32'h18 +: 8] <= W0_data[31:24];
    if (W0_en & W0_mask[4])
      Memory[W0_addr][32'h20 +: 8] <= W0_data[39:32];
    if (W0_en & W0_mask[5])
      Memory[W0_addr][32'h28 +: 8] <= W0_data[47:40];
    if (W0_en & W0_mask[6])
      Memory[W0_addr][32'h30 +: 8] <= W0_data[55:48];
    if (W0_en & W0_mask[7])
      Memory[W0_addr][32'h38 +: 8] <= W0_data[63:56];
  end // always @(posedge)
  assign R0_data = _GEN ? Memory[_GEN_0] : 64'bx;
endmodule

// VCS coverage exclude_file
module mem_combMem_0(
  input  [24:0] R0_addr,
  input         R0_en,
                R0_clk,
  input  [24:0] W0_addr,
  input         W0_en,
                W0_clk,
  input  [63:0] W0_data,
  input  [7:0]  W0_mask,
  output [63:0] R0_data
);

  reg [63:0] Memory[0:33554431];
  reg        _GEN;
  reg [24:0] _GEN_0;
  always @(posedge R0_clk) begin
    _GEN <= R0_en;
    _GEN_0 <= R0_addr;
  end // always @(posedge)
  always @(posedge W0_clk) begin
    if (W0_en & W0_mask[0])
      Memory[W0_addr][32'h0 +: 8] <= W0_data[7:0];
    if (W0_en & W0_mask[1])
      Memory[W0_addr][32'h8 +: 8] <= W0_data[15:8];
    if (W0_en & W0_mask[2])
      Memory[W0_addr][32'h10 +: 8] <= W0_data[23:16];
    if (W0_en & W0_mask[3])
      Memory[W0_addr][32'h18 +: 8] <= W0_data[31:24];
    if (W0_en & W0_mask[4])
      Memory[W0_addr][32'h20 +: 8] <= W0_data[39:32];
    if (W0_en & W0_mask[5])
      Memory[W0_addr][32'h28 +: 8] <= W0_data[47:40];
    if (W0_en & W0_mask[6])
      Memory[W0_addr][32'h30 +: 8] <= W0_data[55:48];
    if (W0_en & W0_mask[7])
      Memory[W0_addr][32'h38 +: 8] <= W0_data[63:56];
  end // always @(posedge)
  assign R0_data = _GEN ? Memory[_GEN_0] : 64'bx;
endmodule

// VCS coverage exclude_file
module ram_combMem_7(
  input         R0_addr,
                R0_en,
                R0_clk,
                W0_addr,
                W0_en,
                W0_clk,
  input  [70:0] W0_data,
  output [70:0] R0_data
);

  reg [70:0] Memory[0:1];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 71'bx;
endmodule

// VCS coverage exclude_file
module ram_combMem_8(
  input         R0_addr,
                R0_en,
                R0_clk,
                W0_addr,
                W0_en,
                W0_clk,
  input  [71:0] W0_data,
  output [71:0] R0_data
);

  reg [71:0] Memory[0:1];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 72'bx;
endmodule

// VCS coverage exclude_file
module ram_combMem_9(
  input  [2:0]  R0_addr,
  input         R0_en,
                R0_clk,
  input  [2:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [71:0] W0_data,
  output [71:0] R0_data
);

  reg [71:0] Memory[0:7];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 72'bx;
endmodule

// VCS coverage exclude_file
module ram_combMem_10(
  input         R0_addr,
                R0_en,
                R0_clk,
                W0_addr,
                W0_en,
                W0_clk,
  input  [72:0] W0_data,
  output [72:0] R0_data
);

  reg [72:0] Memory[0:1];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 73'bx;
endmodule

// VCS coverage exclude_file
module ram_combMem_11(
  input         R0_addr,
                R0_en,
                R0_clk,
                W0_addr,
                W0_en,
                W0_clk,
  input  [78:0] W0_data,
  output [78:0] R0_data
);

  reg [78:0] Memory[0:1];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 79'bx;
endmodule

// VCS coverage exclude_file
module ram_combMem_12(
  input  [2:0]  R0_addr,
  input         R0_en,
                R0_clk,
  input  [2:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [79:0] W0_data,
  output [79:0] R0_data
);

  reg [79:0] Memory[0:7];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 80'bx;
endmodule

// VCS coverage exclude_file
module ram_combMem_13(
  input         R0_addr,
                R0_en,
                R0_clk,
                W0_addr,
                W0_en,
                W0_clk,
  input  [80:0] W0_data,
  output [80:0] R0_data
);

  reg [80:0] Memory[0:1];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 81'bx;
endmodule

// VCS coverage exclude_file
module ram_combMem_14(
  input          R0_addr,
                 R0_en,
                 R0_clk,
                 W0_addr,
                 W0_en,
                 W0_clk,
  input  [101:0] W0_data,
  output [101:0] R0_data
);

  reg [101:0] Memory[0:1];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 102'bx;
endmodule

// VCS coverage exclude_file
module ram_combMem_15(
  input          R0_addr,
                 R0_en,
                 R0_clk,
                 W0_addr,
                 W0_en,
                 W0_clk,
  input  [108:0] W0_data,
  output [108:0] R0_data
);

  reg [108:0] Memory[0:1];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 109'bx;
endmodule

// VCS coverage exclude_file
module ram_combMem_16(
  input          R0_addr,
                 R0_en,
                 R0_clk,
                 W0_addr,
                 W0_en,
                 W0_clk,
  input  [115:0] W0_data,
  output [115:0] R0_data
);

  reg [115:0] Memory[0:1];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 116'bx;
endmodule

// VCS coverage exclude_file
module ram_combMem_17(
  input          R0_addr,
                 R0_en,
                 R0_clk,
                 W0_addr,
                 W0_en,
                 W0_clk,
  input  [116:0] W0_data,
  output [116:0] R0_data
);

  reg [116:0] Memory[0:1];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 117'bx;
endmodule

// VCS coverage exclude_file
module ram_combMem_18(
  input          R0_addr,
                 R0_en,
                 R0_clk,
                 W0_addr,
                 W0_en,
                 W0_clk,
  input  [125:0] W0_data,
  output [125:0] R0_data
);

  reg [125:0] Memory[0:1];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 126'bx;
endmodule

// VCS coverage exclude_file
module rf_combMem(
  input  [4:0]  R0_addr,
  input         R0_en,
                R0_clk,
  input  [4:0]  R1_addr,
  input         R1_en,
                R1_clk,
  input  [4:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [63:0] W0_data,
  output [63:0] R0_data,
                R1_data
);

  reg [63:0] Memory[0:30];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 64'bx;
  assign R1_data = R1_en ? Memory[R1_addr] : 64'bx;
endmodule

// VCS coverage exclude_file
module regfile_combMem(
  input  [4:0]  R0_addr,
  input         R0_en,
                R0_clk,
  input  [4:0]  R1_addr,
  input         R1_en,
                R1_clk,
  input  [4:0]  R2_addr,
  input         R2_en,
                R2_clk,
  input  [4:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [64:0] W0_data,
  input  [4:0]  W1_addr,
  input         W1_en,
                W1_clk,
  input  [64:0] W1_data,
  output [64:0] R0_data,
                R1_data,
                R2_data
);

  reg [64:0] Memory[0:31];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
    if (W1_en)
      Memory[W1_addr] <= W1_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 65'bx;
  assign R1_data = R1_en ? Memory[R1_addr] : 65'bx;
  assign R2_data = R2_en ? Memory[R2_addr] : 65'bx;
endmodule

module IntXbar_i1_o1(
  input  auto_anon_in_0,
         auto_anon_in_1,
  output auto_anon_out_0,
         auto_anon_out_1
);

  assign auto_anon_out_0 = auto_anon_in_0;
  assign auto_anon_out_1 = auto_anon_in_1;
endmodule

module NonSyncResetSynchronizerPrimitiveShiftReg_d3(
  input  clock,
         io_d,
  output io_q
);

  reg sync_0;
  reg sync_1;
  reg sync_2;
  always @(posedge clock) begin
    sync_0 <= sync_1;
    sync_1 <= sync_2;
    sync_2 <= io_d;
  end // always @(posedge)
  assign io_q = sync_0;
endmodule

module SynchronizerShiftReg_w2_d3(
  input        clock,
  input  [1:0] io_d,
  output [1:0] io_q
);

  wire _output_chain_1_io_q;
  wire _output_chain_io_q;
  NonSyncResetSynchronizerPrimitiveShiftReg_d3 output_chain (
    .clock (clock),
    .io_d  (io_d[0]),
    .io_q  (_output_chain_io_q)
  );
  NonSyncResetSynchronizerPrimitiveShiftReg_d3 output_chain_1 (
    .clock (clock),
    .io_d  (io_d[1]),
    .io_q  (_output_chain_1_io_q)
  );
  assign io_q = {_output_chain_1_io_q, _output_chain_io_q};
endmodule

module IntSyncAsyncCrossingSink_n1x2(
  input  clock,
         auto_in_sync_0,
         auto_in_sync_1,
  output auto_out_0,
         auto_out_1
);

  wire [1:0] _chain_io_q;
  SynchronizerShiftReg_w2_d3 chain (
    .clock (clock),
    .io_d  ({auto_in_sync_1, auto_in_sync_0}),
    .io_q  (_chain_io_q)
  );
  assign auto_out_0 = _chain_io_q[0];
  assign auto_out_1 = _chain_io_q[1];
endmodule

module AsyncResetRegVec_w2_i0(
  input        clock,
               reset,
  input  [1:0] io_d,
  output [1:0] io_q
);

  reg [1:0] reg_0;
  always @(posedge clock or posedge reset) begin
    if (reset)
      reg_0 <= 2'h0;
    else
      reg_0 <= io_d;
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin
      if (reset)
        reg_0 = 2'h0;
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_q = reg_0;
endmodule

module IntSyncCrossingSource_n1x2(
  input  clock,
         reset,
         auto_in_0,
         auto_in_1,
  output auto_out_sync_0,
         auto_out_sync_1
);

  wire [1:0] _reg_io_q;
  AsyncResetRegVec_w2_i0 reg_0 (
    .clock (clock),
    .reset (reset),
    .io_d  ({auto_in_1, auto_in_0}),
    .io_q  (_reg_io_q)
  );
  assign auto_out_sync_0 = _reg_io_q[0];
  assign auto_out_sync_1 = _reg_io_q[1];
endmodule

module FixedClockBroadcast_3(
  input  auto_anon_in_clock,
         auto_anon_in_reset,
  output auto_anon_out_2_clock,
         auto_anon_out_2_reset,
         auto_anon_out_1_clock,
         auto_anon_out_1_reset,
         auto_anon_out_0_clock,
         auto_anon_out_0_reset
);

  assign auto_anon_out_2_clock = auto_anon_in_clock;
  assign auto_anon_out_2_reset = auto_anon_in_reset;
  assign auto_anon_out_1_clock = auto_anon_in_clock;
  assign auto_anon_out_1_reset = auto_anon_in_reset;
  assign auto_anon_out_0_clock = auto_anon_in_clock;
  assign auto_anon_out_0_reset = auto_anon_in_reset;
endmodule

// external module plusarg_reader

module TLMonitor(
  input        clock,
               reset,
               io_in_a_ready,
               io_in_a_valid,
  input [2:0]  io_in_a_bits_opcode,
               io_in_a_bits_param,
  input [3:0]  io_in_a_bits_size,
               io_in_a_bits_source,
  input [31:0] io_in_a_bits_address,
  input [7:0]  io_in_a_bits_mask,
  input        io_in_a_bits_corrupt,
               io_in_d_ready,
               io_in_d_valid,
  input [2:0]  io_in_d_bits_opcode,
  input [1:0]  io_in_d_bits_param,
  input [3:0]  io_in_d_bits_size,
               io_in_d_bits_source,
  input [1:0]  io_in_d_bits_sink,
  input        io_in_d_bits_denied,
               io_in_d_bits_corrupt
);

  wire [31:0]  _plusarg_reader_1_out;
  wire [31:0]  _plusarg_reader_out;
  wire [26:0]  _GEN = 27'hFFF << io_in_a_bits_size;
  wire         _GEN_0 = io_in_a_ready & io_in_a_valid;
  reg  [8:0]   a_first_counter;
  reg  [2:0]   opcode;
  reg  [2:0]   param;
  reg  [3:0]   size;
  reg  [3:0]   source;
  reg  [31:0]  address;
  reg  [8:0]   d_first_counter;
  reg  [2:0]   opcode_1;
  reg  [1:0]   param_1;
  reg  [3:0]   size_1;
  reg  [3:0]   source_1;
  reg  [1:0]   sink;
  reg          denied;
  reg  [15:0]  inflight;
  reg  [63:0]  inflight_opcodes;
  reg  [127:0] inflight_sizes;
  reg  [8:0]   a_first_counter_1;
  wire         a_first_1 = a_first_counter_1 == 9'h0;
  reg  [8:0]   d_first_counter_1;
  wire         d_first_1 = d_first_counter_1 == 9'h0;
  wire [15:0]  _GEN_1 = {12'h0, io_in_a_bits_source};
  wire [15:0]  _GEN_2 = 16'h1 << _GEN_1;
  wire         _GEN_3 = _GEN_0 & a_first_1;
  wire         d_release_ack = io_in_d_bits_opcode == 3'h6;
  wire [15:0]  _GEN_4 = {12'h0, io_in_d_bits_source};
  wire [15:0]  _GEN_5 = 16'h1 << _GEN_4;
  reg  [31:0]  watchdog;
  reg  [15:0]  inflight_1;
  reg  [127:0] inflight_sizes_1;
  reg  [8:0]   d_first_counter_2;
  wire         d_first_2 = d_first_counter_2 == 9'h0;
  reg  [31:0]  watchdog_1;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      automatic logic [7:0][2:0] _GEN_6 =
        '{3'h4, 3'h5, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic [7:0][2:0] _GEN_7 =
        '{3'h4, 3'h4, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic [11:0]     _GEN_8 = io_in_a_bits_address[11:0] & ~(_GEN[11:0]);
      automatic logic            _GEN_9 = io_in_a_bits_size > 4'h2;
      automatic logic            mask_size = io_in_a_bits_size[1:0] == 2'h2;
      automatic logic            mask_acc =
        _GEN_9 | mask_size & ~(io_in_a_bits_address[2]);
      automatic logic            mask_acc_1 =
        _GEN_9 | mask_size & io_in_a_bits_address[2];
      automatic logic            mask_size_1 = io_in_a_bits_size[1:0] == 2'h1;
      automatic logic            mask_eq_2 =
        ~(io_in_a_bits_address[2]) & ~(io_in_a_bits_address[1]);
      automatic logic            mask_acc_2 = mask_acc | mask_size_1 & mask_eq_2;
      automatic logic            mask_eq_3 =
        ~(io_in_a_bits_address[2]) & io_in_a_bits_address[1];
      automatic logic            mask_acc_3 = mask_acc | mask_size_1 & mask_eq_3;
      automatic logic            mask_eq_4 =
        io_in_a_bits_address[2] & ~(io_in_a_bits_address[1]);
      automatic logic            mask_acc_4 = mask_acc_1 | mask_size_1 & mask_eq_4;
      automatic logic            mask_eq_5 =
        io_in_a_bits_address[2] & io_in_a_bits_address[1];
      automatic logic            mask_acc_5 = mask_acc_1 | mask_size_1 & mask_eq_5;
      automatic logic [7:0]      mask =
        {mask_acc_5 | mask_eq_5 & io_in_a_bits_address[0],
         mask_acc_5 | mask_eq_5 & ~(io_in_a_bits_address[0]),
         mask_acc_4 | mask_eq_4 & io_in_a_bits_address[0],
         mask_acc_4 | mask_eq_4 & ~(io_in_a_bits_address[0]),
         mask_acc_3 | mask_eq_3 & io_in_a_bits_address[0],
         mask_acc_3 | mask_eq_3 & ~(io_in_a_bits_address[0]),
         mask_acc_2 | mask_eq_2 & io_in_a_bits_address[0],
         mask_acc_2 | mask_eq_2 & ~(io_in_a_bits_address[0])};
      automatic logic            _GEN_10 = io_in_a_bits_size < 4'hD;
      automatic logic            _GEN_11 = io_in_a_bits_size < 4'h7;
      automatic logic            _GEN_12 = io_in_a_bits_address[31:28] == 4'h8;
      automatic logic            _GEN_13 = _GEN_10 & _GEN_11 & _GEN_12;
      automatic logic            _GEN_14 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_15 = io_in_a_bits_param > 3'h2;
      automatic logic            _GEN_16 = io_in_a_bits_mask != 8'hFF;
      automatic logic            _GEN_17 =
        io_in_a_valid & (&io_in_a_bits_opcode) & ~reset;
      automatic logic            _GEN_18 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_19 =
        {io_in_a_bits_address[31:14], ~(io_in_a_bits_address[13:12])} == 20'h0;
      automatic logic            _GEN_20 = _GEN_10 & _GEN_19;
      automatic logic            _GEN_21 = io_in_a_bits_address[31:12] == 20'h0;
      automatic logic            _GEN_22 =
        {io_in_a_bits_address[31:26], io_in_a_bits_address[25:16] ^ 10'h200} == 16'h0;
      automatic logic            _GEN_23 =
        {io_in_a_bits_address[31:28], ~(io_in_a_bits_address[27:26])} == 6'h0;
      automatic logic            _GEN_24 =
        {io_in_a_bits_address[31], ~(io_in_a_bits_address[30:29])} == 3'h0;
      automatic logic            _GEN_25 = io_in_a_bits_mask != mask;
      automatic logic            _GEN_26 =
        _GEN_10
        & (_GEN_20 | _GEN_11 & (_GEN_21 | _GEN_22 | _GEN_23 | _GEN_12)
           | io_in_a_bits_size < 4'h9 & _GEN_24);
      automatic logic            _GEN_27 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_28 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_29 =
        _GEN_10 & io_in_a_bits_size < 4'h4 & (_GEN_21 | _GEN_19 | _GEN_22 | _GEN_23);
      automatic logic            _GEN_30 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_31 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h3 & ~reset;
      automatic logic            _GEN_32 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h5 & ~reset;
      automatic logic            _GEN_33 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_34 = io_in_d_bits_size < 4'h3;
      automatic logic            _GEN_35 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_36 = io_in_d_bits_param == 2'h2;
      automatic logic            _GEN_37 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h5 & ~reset;
      automatic logic            _GEN_38 = ~io_in_d_bits_denied | io_in_d_bits_corrupt;
      automatic logic            _GEN_39 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_40 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_41 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_42 = io_in_a_valid & (|a_first_counter) & ~reset;
      automatic logic            _GEN_43 = io_in_d_valid & (|d_first_counter) & ~reset;
      automatic logic [63:0]     _GEN_44 =
        inflight_opcodes >> {58'h0, io_in_d_bits_source, 2'h0};
      automatic logic [127:0]    _GEN_45 = {121'h0, io_in_d_bits_source, 3'h0};
      automatic logic            _GEN_46 = io_in_a_valid & a_first_1;
      automatic logic [15:0]     a_set_wo_ready = _GEN_46 ? _GEN_2 : 16'h0;
      automatic logic            _GEN_47 = io_in_d_valid & d_first_1;
      automatic logic            _GEN_48 = _GEN_47 & ~d_release_ack;
      automatic logic            _GEN_49 = io_in_a_bits_source == io_in_d_bits_source;
      automatic logic            same_cycle_resp = _GEN_46 & _GEN_49;
      automatic logic            _GEN_50 = _GEN_48 & same_cycle_resp & ~reset;
      automatic logic            _GEN_51 = _GEN_48 & ~same_cycle_resp & ~reset;
      automatic logic [7:0]      _GEN_52 = {4'h0, io_in_d_bits_size};
      automatic logic            _GEN_53 =
        io_in_d_valid & d_first_2 & d_release_ack & ~reset;
      automatic logic [15:0]     _GEN_54 = inflight >> _GEN_1;
      automatic logic [15:0]     _GEN_55 = inflight >> _GEN_4;
      automatic logic [127:0]    _GEN_56 = inflight_sizes >> _GEN_45;
      automatic logic [15:0]     _GEN_57 = inflight_1 >> _GEN_4;
      automatic logic [127:0]    _GEN_58 = inflight_sizes_1 >> _GEN_45;
      if (_GEN_14 & ~_GEN_13) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & ~_GEN_9) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & _GEN_15) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock carries invalid grow param (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & _GEN_16) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock is corrupt (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & ~_GEN_13) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & ~_GEN_9) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & _GEN_15) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm carries invalid grow param (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & ~(|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & _GEN_16) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm is corrupt (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & ~_GEN_10) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18
          & ~(_GEN_20 | _GEN_11
              & (_GEN_21
                 | {io_in_a_bits_address[31:17], ~(io_in_a_bits_address[16])} == 16'h0
                 | _GEN_22 | _GEN_23 | _GEN_24 | _GEN_12))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get address not aligned to size (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get carries invalid param (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & _GEN_25) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get contains invalid mask (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get is corrupt (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & ~_GEN_26) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull address not aligned to size (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull carries invalid param (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & _GEN_25) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull contains invalid mask (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & ~_GEN_26) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial address not aligned to size (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial carries invalid param (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & (|(io_in_a_bits_mask & ~mask))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial contains invalid mask (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & ~_GEN_29) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & io_in_a_bits_param > 3'h4) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & _GEN_25) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & ~_GEN_29) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical address not aligned to size (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & io_in_a_bits_param[2]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical carries invalid opcode param (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & _GEN_25) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical contains invalid mask (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & ~(_GEN_10 & _GEN_20)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint address not aligned to size (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & (|(io_in_a_bits_param[2:1]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint carries invalid opcode param (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & _GEN_25) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint contains invalid mask (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint is corrupt (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & ~reset & (&io_in_d_bits_opcode)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel has invalid opcode (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_33 & _GEN_34) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_33 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_33 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck is corrupt (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_33 & io_in_d_bits_denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck is denied (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_35 & _GEN_34) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant smaller than a beat (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_35 & (&io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid cap param (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_35 & _GEN_36) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries toN param (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_35 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant is corrupt (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & _GEN_34) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData smaller than a beat (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & (&io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid cap param (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & _GEN_36) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries toN param (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & ~_GEN_38) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData is denied but not corrupt (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_39 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck carries invalid param (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_39 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck is corrupt (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_40 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData carries invalid param (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_40 & ~_GEN_38) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData is denied but not corrupt (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_41 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck carries invalid param (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_41 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck is corrupt (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & io_in_a_bits_opcode != opcode) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel opcode changed within multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & io_in_a_bits_param != param) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel param changed within multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & io_in_a_bits_size != size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel size changed within multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & io_in_a_bits_source != source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel source changed within multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & io_in_a_bits_address != address) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel address changed with multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & io_in_d_bits_opcode != opcode_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel opcode changed within multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & io_in_d_bits_param != param_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel param changed within multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & io_in_d_bits_size != size_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel size changed within multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & io_in_d_bits_source != source_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel source changed within multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & io_in_d_bits_sink != sink) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel sink changed with multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & io_in_d_bits_denied != denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel denied changed with multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_3 & ~reset & _GEN_54[0]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel re-used a source ID (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_48 & ~reset & ~(_GEN_55[0] | same_cycle_resp)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_50
          & ~(io_in_d_bits_opcode == _GEN_7[io_in_a_bits_opcode]
              | io_in_d_bits_opcode == _GEN_6[io_in_a_bits_opcode])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_50 & io_in_a_bits_size != io_in_d_bits_size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_51
          & ~(io_in_d_bits_opcode == _GEN_7[_GEN_44[3:1]]
              | io_in_d_bits_opcode == _GEN_6[_GEN_44[3:1]])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_51 & _GEN_52 != {1'h0, _GEN_56[7:1]}) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_47 & a_first_1 & io_in_a_valid & _GEN_49 & ~d_release_ack & ~reset
          & ~(~io_in_d_ready | io_in_a_ready)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ready check\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(a_set_wo_ready != (_GEN_48 ? _GEN_5 : 16'h0)
              | a_set_wo_ready == 16'h0)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' and 'D' concurrent, despite minlatency > 0 (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight == 16'h0 | _plusarg_reader_out == 32'h0
              | watchdog < _plusarg_reader_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_53 & ~(_GEN_57[0])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_53 & _GEN_52 != {1'h0, _GEN_58[7:1]}) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight_1 == 16'h0 | _plusarg_reader_1_out == 32'h0
              | watchdog_1 < _plusarg_reader_1_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    automatic logic _GEN_59;
    _GEN_59 = io_in_d_ready & io_in_d_valid;
    if (reset) begin
      a_first_counter <= 9'h0;
      d_first_counter <= 9'h0;
      inflight <= 16'h0;
      inflight_opcodes <= 64'h0;
      inflight_sizes <= 128'h0;
      a_first_counter_1 <= 9'h0;
      d_first_counter_1 <= 9'h0;
      watchdog <= 32'h0;
      inflight_1 <= 16'h0;
      inflight_sizes_1 <= 128'h0;
      d_first_counter_2 <= 9'h0;
      watchdog_1 <= 32'h0;
    end
    else begin
      automatic logic         _GEN_60;
      automatic logic [142:0] _GEN_61 = 143'hFF << {136'h0, io_in_d_bits_source, 3'h0};
      automatic logic         _GEN_62;
      automatic logic [142:0] _GEN_63 = 143'hF << {137'h0, io_in_d_bits_source, 2'h0};
      automatic logic [130:0] _GEN_64 =
        {127'h0, _GEN_3 ? {io_in_a_bits_opcode, 1'h1} : 4'h0}
        << {125'h0, io_in_a_bits_source, 2'h0};
      automatic logic [131:0] _GEN_65 =
        {127'h0, _GEN_3 ? {io_in_a_bits_size, 1'h1} : 5'h0}
        << {125'h0, io_in_a_bits_source, 3'h0};
      _GEN_60 = _GEN_59 & d_first_1 & ~d_release_ack;
      _GEN_62 = _GEN_59 & d_first_2 & d_release_ack;
      if (_GEN_0) begin
        if (|a_first_counter)
          a_first_counter <= a_first_counter - 9'h1;
        else if (io_in_a_bits_opcode[2])
          a_first_counter <= 9'h0;
        else
          a_first_counter <= ~(_GEN[11:3]);
        if (a_first_1) begin
          if (io_in_a_bits_opcode[2])
            a_first_counter_1 <= 9'h0;
          else
            a_first_counter_1 <= ~(_GEN[11:3]);
        end
        else
          a_first_counter_1 <= a_first_counter_1 - 9'h1;
      end
      if (_GEN_59) begin
        automatic logic [26:0] _GEN_66 = 27'hFFF << io_in_d_bits_size;
        if (|d_first_counter)
          d_first_counter <= d_first_counter - 9'h1;
        else if (io_in_d_bits_opcode[0])
          d_first_counter <= ~(_GEN_66[11:3]);
        else
          d_first_counter <= 9'h0;
        if (d_first_1) begin
          if (io_in_d_bits_opcode[0])
            d_first_counter_1 <= ~(_GEN_66[11:3]);
          else
            d_first_counter_1 <= 9'h0;
        end
        else
          d_first_counter_1 <= d_first_counter_1 - 9'h1;
        if (d_first_2) begin
          if (io_in_d_bits_opcode[0])
            d_first_counter_2 <= ~(_GEN_66[11:3]);
          else
            d_first_counter_2 <= 9'h0;
        end
        else
          d_first_counter_2 <= d_first_counter_2 - 9'h1;
        watchdog_1 <= 32'h0;
      end
      else
        watchdog_1 <= watchdog_1 + 32'h1;
      inflight <= (inflight | (_GEN_3 ? _GEN_2 : 16'h0)) & ~(_GEN_60 ? _GEN_5 : 16'h0);
      inflight_opcodes <=
        (inflight_opcodes | (_GEN_3 ? _GEN_64[63:0] : 64'h0))
        & ~(_GEN_60 ? _GEN_63[63:0] : 64'h0);
      inflight_sizes <=
        (inflight_sizes | (_GEN_3 ? _GEN_65[127:0] : 128'h0))
        & ~(_GEN_60 ? _GEN_61[127:0] : 128'h0);
      if (_GEN_0 | _GEN_59)
        watchdog <= 32'h0;
      else
        watchdog <= watchdog + 32'h1;
      inflight_1 <= inflight_1 & ~(_GEN_62 ? _GEN_5 : 16'h0);
      inflight_sizes_1 <= inflight_sizes_1 & ~(_GEN_62 ? _GEN_61[127:0] : 128'h0);
    end
    if (_GEN_0 & ~(|a_first_counter)) begin
      opcode <= io_in_a_bits_opcode;
      param <= io_in_a_bits_param;
      size <= io_in_a_bits_size;
      source <= io_in_a_bits_source;
      address <= io_in_a_bits_address;
    end
    if (_GEN_59 & ~(|d_first_counter)) begin
      opcode_1 <= io_in_d_bits_opcode;
      param_1 <= io_in_d_bits_param;
      size_1 <= io_in_d_bits_size;
      source_1 <= io_in_d_bits_source;
      sink <= io_in_d_bits_sink;
      denied <= io_in_d_bits_denied;
    end
  end // always @(posedge)
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader (
    .out (_plusarg_reader_out)
  );
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader_1 (
    .out (_plusarg_reader_1_out)
  );
endmodule

module TLMonitor_1(
  input        clock,
               reset,
               io_in_a_ready,
               io_in_a_valid,
  input [2:0]  io_in_a_bits_opcode,
               io_in_a_bits_param,
  input [3:0]  io_in_a_bits_size,
  input [1:0]  io_in_a_bits_source,
  input [31:0] io_in_a_bits_address,
  input [7:0]  io_in_a_bits_mask,
  input        io_in_a_bits_corrupt,
               io_in_b_ready,
               io_in_b_valid,
  input [1:0]  io_in_b_bits_param,
  input [31:0] io_in_b_bits_address,
  input        io_in_c_ready,
               io_in_c_valid,
  input [2:0]  io_in_c_bits_opcode,
               io_in_c_bits_param,
  input [3:0]  io_in_c_bits_size,
  input [1:0]  io_in_c_bits_source,
  input [31:0] io_in_c_bits_address,
  input        io_in_c_bits_corrupt,
               io_in_d_ready,
               io_in_d_valid,
  input [2:0]  io_in_d_bits_opcode,
  input [1:0]  io_in_d_bits_param,
  input [3:0]  io_in_d_bits_size,
  input [1:0]  io_in_d_bits_source,
               io_in_d_bits_sink,
  input        io_in_d_bits_denied,
               io_in_d_bits_corrupt,
               io_in_e_valid,
  input [1:0]  io_in_e_bits_sink
);

  wire [31:0] _plusarg_reader_1_out;
  wire [31:0] _plusarg_reader_out;
  wire [26:0] _GEN = 27'hFFF << io_in_a_bits_size;
  wire [26:0] _GEN_0 = 27'hFFF << io_in_c_bits_size;
  wire        _GEN_1 = io_in_a_ready & io_in_a_valid;
  reg  [8:0]  a_first_counter;
  reg  [2:0]  opcode;
  reg  [2:0]  param;
  reg  [3:0]  size;
  reg  [1:0]  source;
  reg  [31:0] address;
  wire        _GEN_2 = io_in_d_ready & io_in_d_valid;
  reg  [8:0]  d_first_counter;
  reg  [2:0]  opcode_1;
  reg  [1:0]  param_1;
  reg  [3:0]  size_1;
  reg  [1:0]  source_1;
  reg  [1:0]  sink;
  reg         denied;
  reg  [8:0]  b_first_counter;
  reg  [2:0]  opcode_2;
  reg  [1:0]  param_2;
  reg  [3:0]  size_2;
  reg  [1:0]  source_2;
  reg  [31:0] address_1;
  wire        _GEN_3 = io_in_c_ready & io_in_c_valid;
  reg  [8:0]  c_first_counter;
  reg  [2:0]  opcode_3;
  reg  [2:0]  param_3;
  reg  [3:0]  size_3;
  reg  [1:0]  source_3;
  reg  [31:0] address_2;
  reg  [2:0]  inflight;
  reg  [11:0] inflight_opcodes;
  reg  [23:0] inflight_sizes;
  reg  [8:0]  a_first_counter_1;
  wire        a_first_1 = a_first_counter_1 == 9'h0;
  reg  [8:0]  d_first_counter_1;
  wire        d_first_1 = d_first_counter_1 == 9'h0;
  wire [3:0]  _GEN_4 = 4'h1 << io_in_a_bits_source;
  wire        _GEN_5 = _GEN_1 & a_first_1;
  wire        d_release_ack = io_in_d_bits_opcode == 3'h6;
  wire [3:0]  _GEN_6 = 4'h1 << io_in_d_bits_source;
  reg  [31:0] watchdog;
  reg  [2:0]  inflight_1;
  reg  [23:0] inflight_sizes_1;
  reg  [8:0]  c_first_counter_1;
  wire        c_first_1 = c_first_counter_1 == 9'h0;
  reg  [8:0]  d_first_counter_2;
  wire        d_first_2 = d_first_counter_2 == 9'h0;
  wire        _GEN_7 = io_in_c_bits_opcode[2] & io_in_c_bits_opcode[1];
  wire [3:0]  _GEN_8 = 4'h1 << io_in_c_bits_source;
  wire        _GEN_9 = _GEN_3 & c_first_1 & _GEN_7;
  reg  [31:0] watchdog_1;
  reg  [3:0]  inflight_2;
  reg  [8:0]  d_first_counter_3;
  wire        d_first_3 = d_first_counter_3 == 9'h0;
  wire        _GEN_10 =
    _GEN_2 & d_first_3 & io_in_d_bits_opcode[2] & ~(io_in_d_bits_opcode[1]);
  wire [3:0]  _GEN_11 = {2'h0, io_in_d_bits_sink};
  wire [3:0]  _GEN_12 = {2'h0, io_in_e_bits_sink};
  wire [3:0]  _GEN_13 = (_GEN_10 ? 4'h1 << _GEN_11 : 4'h0) | inflight_2;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      automatic logic [7:0][2:0] _GEN_14 =
        '{3'h4, 3'h5, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic [7:0][2:0] _GEN_15 =
        '{3'h4, 3'h4, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic            _GEN_16 = io_in_a_bits_source == 2'h0;
      automatic logic            _GEN_17 = io_in_a_bits_source == 2'h1;
      automatic logic            _GEN_18 = io_in_a_bits_source == 2'h2;
      automatic logic            source_ok = _GEN_16 | _GEN_17 | _GEN_18;
      automatic logic [11:0]     _GEN_19 = io_in_a_bits_address[11:0] & ~(_GEN[11:0]);
      automatic logic            _GEN_20 = io_in_a_bits_size > 4'h2;
      automatic logic            mask_size = io_in_a_bits_size[1:0] == 2'h2;
      automatic logic            mask_acc =
        _GEN_20 | mask_size & ~(io_in_a_bits_address[2]);
      automatic logic            mask_acc_1 =
        _GEN_20 | mask_size & io_in_a_bits_address[2];
      automatic logic            mask_size_1 = io_in_a_bits_size[1:0] == 2'h1;
      automatic logic            mask_eq_2 =
        ~(io_in_a_bits_address[2]) & ~(io_in_a_bits_address[1]);
      automatic logic            mask_acc_2 = mask_acc | mask_size_1 & mask_eq_2;
      automatic logic            mask_eq_3 =
        ~(io_in_a_bits_address[2]) & io_in_a_bits_address[1];
      automatic logic            mask_acc_3 = mask_acc | mask_size_1 & mask_eq_3;
      automatic logic            mask_eq_4 =
        io_in_a_bits_address[2] & ~(io_in_a_bits_address[1]);
      automatic logic            mask_acc_4 = mask_acc_1 | mask_size_1 & mask_eq_4;
      automatic logic            mask_eq_5 =
        io_in_a_bits_address[2] & io_in_a_bits_address[1];
      automatic logic            mask_acc_5 = mask_acc_1 | mask_size_1 & mask_eq_5;
      automatic logic [7:0]      mask =
        {mask_acc_5 | mask_eq_5 & io_in_a_bits_address[0],
         mask_acc_5 | mask_eq_5 & ~(io_in_a_bits_address[0]),
         mask_acc_4 | mask_eq_4 & io_in_a_bits_address[0],
         mask_acc_4 | mask_eq_4 & ~(io_in_a_bits_address[0]),
         mask_acc_3 | mask_eq_3 & io_in_a_bits_address[0],
         mask_acc_3 | mask_eq_3 & ~(io_in_a_bits_address[0]),
         mask_acc_2 | mask_eq_2 & io_in_a_bits_address[0],
         mask_acc_2 | mask_eq_2 & ~(io_in_a_bits_address[0])};
      automatic logic            _GEN_21 = io_in_a_bits_size < 4'hD;
      automatic logic            _GEN_22 = _GEN_21 & (_GEN_16 | _GEN_17 | _GEN_18);
      automatic logic            _GEN_23 = io_in_a_bits_size < 4'h7;
      automatic logic            _GEN_24 = io_in_a_bits_address[31:28] == 4'h8;
      automatic logic            _GEN_25 = _GEN_22 & _GEN_23 & _GEN_24;
      automatic logic            _GEN_26 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_27 = io_in_a_bits_address[31:12] == 20'h0;
      automatic logic            _GEN_28 =
        {io_in_a_bits_address[31:14], ~(io_in_a_bits_address[13:12])} == 20'h0;
      automatic logic            _GEN_29 =
        {io_in_a_bits_address[31:17], ~(io_in_a_bits_address[16])} == 16'h0;
      automatic logic            _GEN_30 =
        {io_in_a_bits_address[31:26], io_in_a_bits_address[25:16] ^ 10'h200} == 16'h0;
      automatic logic            _GEN_31 =
        {io_in_a_bits_address[31:28], ~(io_in_a_bits_address[27:26])} == 6'h0;
      automatic logic            _GEN_32 =
        {io_in_a_bits_address[31], ~(io_in_a_bits_address[30:29])} == 3'h0;
      automatic logic            _GEN_33 = _GEN_27 | _GEN_28;
      automatic logic            _GEN_34 =
        _GEN_16 & io_in_a_bits_size == 4'h6 & _GEN_21
        & (_GEN_33 | _GEN_29 | _GEN_30 | _GEN_31 | _GEN_32 | _GEN_24);
      automatic logic            _GEN_35 = io_in_a_bits_param > 3'h2;
      automatic logic            _GEN_36 = io_in_a_bits_mask != 8'hFF;
      automatic logic            _GEN_37 =
        io_in_a_valid & (&io_in_a_bits_opcode) & ~reset;
      automatic logic            _GEN_38 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_39 = _GEN_21 & _GEN_28;
      automatic logic            _GEN_40 = io_in_a_bits_mask != mask;
      automatic logic            _GEN_41 =
        _GEN_22
        & (_GEN_39 | _GEN_23 & (_GEN_27 | _GEN_30 | _GEN_31 | _GEN_24)
           | io_in_a_bits_size < 4'h9 & _GEN_32);
      automatic logic            _GEN_42 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_43 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_44 =
        _GEN_22 & io_in_a_bits_size < 4'h4 & (_GEN_33 | _GEN_30 | _GEN_31);
      automatic logic            _GEN_45 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_46 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h3 & ~reset;
      automatic logic            _GEN_47 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h5 & ~reset;
      automatic logic            source_ok_1 =
        io_in_d_bits_source == 2'h0 | io_in_d_bits_source == 2'h1
        | io_in_d_bits_source == 2'h2;
      automatic logic            _GEN_48 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_49 = io_in_d_bits_size < 4'h3;
      automatic logic            _GEN_50 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_51 = io_in_d_bits_param == 2'h2;
      automatic logic            _GEN_52 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h5 & ~reset;
      automatic logic            _GEN_53 = ~io_in_d_bits_denied | io_in_d_bits_corrupt;
      automatic logic            _GEN_54 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_55 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_56 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_57 = io_in_b_bits_address[31:12] == 20'h0;
      automatic logic            _GEN_58 =
        {io_in_b_bits_address[31:14], ~(io_in_b_bits_address[13:12])} == 20'h0;
      automatic logic            _GEN_59 =
        {io_in_b_bits_address[31:17], ~(io_in_b_bits_address[16])} == 16'h0;
      automatic logic            _GEN_60 =
        {io_in_b_bits_address[31:26], io_in_b_bits_address[25:16] ^ 10'h200} == 16'h0;
      automatic logic            _GEN_61 =
        {io_in_b_bits_address[31:28], ~(io_in_b_bits_address[27:26])} == 6'h0;
      automatic logic            _GEN_62 =
        {io_in_b_bits_address[31], ~(io_in_b_bits_address[30:29])} == 3'h0;
      automatic logic            _GEN_63 = io_in_b_bits_address[31:28] == 4'h8;
      automatic logic            _GEN_64 = io_in_b_valid & ~reset;
      automatic logic            _GEN_65 = io_in_c_bits_source == 2'h0;
      automatic logic            _GEN_66 = io_in_c_bits_source == 2'h1;
      automatic logic            _GEN_67 = io_in_c_bits_source == 2'h2;
      automatic logic            source_ok_2 = _GEN_65 | _GEN_66 | _GEN_67;
      automatic logic [11:0]     _GEN_68 = io_in_c_bits_address[11:0] & ~(_GEN_0[11:0]);
      automatic logic            _GEN_69 = io_in_c_bits_address[31:12] == 20'h0;
      automatic logic            _GEN_70 =
        {io_in_c_bits_address[31:14], ~(io_in_c_bits_address[13:12])} == 20'h0;
      automatic logic            _GEN_71 =
        {io_in_c_bits_address[31:17], ~(io_in_c_bits_address[16])} == 16'h0;
      automatic logic            _GEN_72 =
        {io_in_c_bits_address[31:26], io_in_c_bits_address[25:16] ^ 10'h200} == 16'h0;
      automatic logic            _GEN_73 =
        {io_in_c_bits_address[31:28], ~(io_in_c_bits_address[27:26])} == 6'h0;
      automatic logic            _GEN_74 =
        {io_in_c_bits_address[31], ~(io_in_c_bits_address[30:29])} == 3'h0;
      automatic logic            _GEN_75 = io_in_c_bits_address[31:28] == 4'h8;
      automatic logic            address_ok_1 =
        _GEN_69 | _GEN_70 | _GEN_71 | _GEN_72 | _GEN_73 | _GEN_74 | _GEN_75;
      automatic logic            _GEN_76 = io_in_c_bits_opcode == 3'h4;
      automatic logic            _GEN_77 = io_in_c_valid & _GEN_76 & ~reset;
      automatic logic            _GEN_78 = io_in_c_bits_size < 4'h3;
      automatic logic            _GEN_79 = io_in_c_bits_opcode == 3'h5;
      automatic logic            _GEN_80 = io_in_c_valid & _GEN_79 & ~reset;
      automatic logic            _GEN_81 = io_in_c_bits_size < 4'hD;
      automatic logic            _GEN_82 =
        _GEN_81 & (_GEN_65 | _GEN_66 | _GEN_67) & io_in_c_bits_size < 4'h7 & _GEN_75;
      automatic logic            _GEN_83 =
        io_in_c_valid & io_in_c_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_84 =
        _GEN_65 & io_in_c_bits_size == 4'h6 & _GEN_81
        & (_GEN_69 | _GEN_70 | _GEN_71 | _GEN_72 | _GEN_73 | _GEN_74 | _GEN_75);
      automatic logic            _GEN_85 =
        io_in_c_valid & (&io_in_c_bits_opcode) & ~reset;
      automatic logic            _GEN_86 =
        io_in_c_valid & io_in_c_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_87 =
        io_in_c_valid & io_in_c_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_88 =
        io_in_c_valid & io_in_c_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_89 = io_in_a_valid & (|a_first_counter) & ~reset;
      automatic logic            _GEN_90 = io_in_d_valid & (|d_first_counter) & ~reset;
      automatic logic            _GEN_91 = io_in_b_valid & (|b_first_counter) & ~reset;
      automatic logic            _GEN_92 = io_in_c_valid & (|c_first_counter) & ~reset;
      automatic logic [11:0]     _GEN_93 =
        inflight_opcodes >> {8'h0, io_in_d_bits_source, 2'h0};
      automatic logic [23:0]     _GEN_94 = {19'h0, io_in_d_bits_source, 3'h0};
      automatic logic            _GEN_95 = io_in_a_valid & a_first_1;
      automatic logic [2:0]      a_set_wo_ready = _GEN_95 ? _GEN_4[2:0] : 3'h0;
      automatic logic            _GEN_96 = io_in_d_valid & d_first_1;
      automatic logic            _GEN_97 = _GEN_96 & ~d_release_ack;
      automatic logic            _GEN_98 = io_in_a_bits_source == io_in_d_bits_source;
      automatic logic            same_cycle_resp = _GEN_95 & _GEN_98;
      automatic logic [2:0]      _GEN_99 = {1'h0, io_in_d_bits_source};
      automatic logic            _GEN_100 = _GEN_97 & same_cycle_resp & ~reset;
      automatic logic            _GEN_101 = _GEN_97 & ~same_cycle_resp & ~reset;
      automatic logic [7:0]      _GEN_102 = {4'h0, io_in_d_bits_size};
      automatic logic            _GEN_103 = io_in_c_valid & c_first_1 & _GEN_7;
      automatic logic [2:0]      c_set_wo_ready = _GEN_103 ? _GEN_8[2:0] : 3'h0;
      automatic logic            _GEN_104 = io_in_d_valid & d_first_2;
      automatic logic            _GEN_105 = _GEN_104 & d_release_ack;
      automatic logic            _GEN_106 = io_in_c_bits_source == io_in_d_bits_source;
      automatic logic            same_cycle_resp_1 = _GEN_103 & _GEN_106;
      automatic logic [2:0]      _GEN_107 = inflight >> io_in_a_bits_source;
      automatic logic [2:0]      _GEN_108 = inflight >> _GEN_99;
      automatic logic [23:0]     _GEN_109 = inflight_sizes >> _GEN_94;
      automatic logic [2:0]      _GEN_110 = inflight_1 >> io_in_c_bits_source;
      automatic logic [2:0]      _GEN_111 = inflight_1 >> _GEN_99;
      automatic logic [23:0]     _GEN_112 = inflight_sizes_1 >> _GEN_94;
      automatic logic [3:0]      _GEN_113 = inflight_2 >> _GEN_11;
      automatic logic [3:0]      _GEN_114 = _GEN_13 >> _GEN_12;
      if (_GEN_26 & ~_GEN_25) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_26 & ~_GEN_34) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_26 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock carries invalid source ID (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_26 & ~_GEN_20) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_26 & (|_GEN_19)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_26 & _GEN_35) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock carries invalid grow param (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_26 & _GEN_36) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_26 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock is corrupt (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & ~_GEN_25) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & ~_GEN_34) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm carries invalid source ID (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & ~_GEN_20) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & (|_GEN_19)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & _GEN_35) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm carries invalid grow param (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & ~(|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & _GEN_36) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm is corrupt (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_38 & ~_GEN_22) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_38
          & ~(_GEN_39 | _GEN_23
              & (_GEN_27 | _GEN_29 | _GEN_30 | _GEN_31 | _GEN_32 | _GEN_24))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_38 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get carries invalid source ID (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_38 & (|_GEN_19)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get address not aligned to size (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_38 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get carries invalid param (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_38 & _GEN_40) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get contains invalid mask (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_38 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get is corrupt (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & ~_GEN_41) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull carries invalid source ID (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & (|_GEN_19)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull address not aligned to size (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull carries invalid param (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & _GEN_40) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull contains invalid mask (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & ~_GEN_41) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & (|_GEN_19)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial address not aligned to size (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial carries invalid param (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & (|(io_in_a_bits_mask & ~mask))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial contains invalid mask (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_45 & ~_GEN_44) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_45 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_45 & (|_GEN_19)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_45 & io_in_a_bits_param > 3'h4) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_45 & _GEN_40) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_46 & ~_GEN_44) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_46 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical carries invalid source ID (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_46 & (|_GEN_19)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical address not aligned to size (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_46 & io_in_a_bits_param[2]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical carries invalid opcode param (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_46 & _GEN_40) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical contains invalid mask (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_47 & ~(_GEN_22 & _GEN_39)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_47 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint carries invalid source ID (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_47 & (|_GEN_19)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint address not aligned to size (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_47 & (|(io_in_a_bits_param[2:1]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint carries invalid opcode param (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_47 & _GEN_40) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint contains invalid mask (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_47 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint is corrupt (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & ~reset & (&io_in_d_bits_opcode)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel has invalid opcode (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_48 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_48 & _GEN_49) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_48 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_48 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck is corrupt (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_48 & io_in_d_bits_denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck is denied (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_50 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid source ID (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_50 & _GEN_49) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant smaller than a beat (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_50 & (&io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid cap param (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_50 & _GEN_51) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries toN param (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_50 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant is corrupt (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_52 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid source ID (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_52 & _GEN_49) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData smaller than a beat (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_52 & (&io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid cap param (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_52 & _GEN_51) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries toN param (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_52 & ~_GEN_53) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData is denied but not corrupt (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_54 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_54 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck carries invalid param (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_54 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck is corrupt (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_55 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_55 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData carries invalid param (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_55 & ~_GEN_53) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData is denied but not corrupt (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_56 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck carries invalid source ID (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_56 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck carries invalid param (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_56 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck is corrupt (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_64
          & ~(_GEN_57 | _GEN_58 | _GEN_59 | _GEN_60 | _GEN_61 | _GEN_62 | _GEN_63)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel carries Probe type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_64
          & ~(_GEN_57 | _GEN_58 | _GEN_59 | _GEN_60 | _GEN_61 | _GEN_62 | _GEN_63)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel Probe carries unmanaged address (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_64 & (|(io_in_b_bits_address[5:0]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel Probe address not aligned to size (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_64 & (&io_in_b_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel Probe carries invalid cap param (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_77 & ~address_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ProbeAck carries unmanaged address (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_77 & ~source_ok_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ProbeAck carries invalid source ID (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_77 & _GEN_78) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ProbeAck smaller than a beat (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_77 & (|_GEN_68)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ProbeAck address not aligned to size (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_77 & (&(io_in_c_bits_param[2:1]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ProbeAck carries invalid report param (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_77 & io_in_c_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ProbeAck is corrupt (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_80 & ~address_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ProbeAckData carries unmanaged address (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_80 & ~source_ok_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ProbeAckData carries invalid source ID (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_80 & _GEN_78) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ProbeAckData smaller than a beat (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_80 & (|_GEN_68)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ProbeAckData address not aligned to size (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_80 & (&(io_in_c_bits_param[2:1]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ProbeAckData carries invalid report param (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_83 & ~_GEN_82) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel carries Release type unsupported by manager (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_83 & ~_GEN_84) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel carries Release from a client which does not support Probe (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_83 & ~source_ok_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel Release carries invalid source ID (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_83 & _GEN_78) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel Release smaller than a beat (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_83 & (|_GEN_68)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel Release address not aligned to size (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_83 & (&(io_in_c_bits_param[2:1]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel Release carries invalid report param (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_83 & io_in_c_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel Release is corrupt (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_85 & ~_GEN_82) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel carries ReleaseData type unsupported by manager (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_85 & ~_GEN_84) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel carries Release from a client which does not support Probe (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_85 & ~source_ok_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ReleaseData carries invalid source ID (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_85 & _GEN_78) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ReleaseData smaller than a beat (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_85 & (|_GEN_68)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ReleaseData address not aligned to size (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_85 & (&(io_in_c_bits_param[2:1]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ReleaseData carries invalid report param (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_86 & ~address_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel AccessAck carries unmanaged address (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_86 & ~source_ok_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel AccessAck carries invalid source ID (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_86 & (|_GEN_68)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel AccessAck address not aligned to size (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_86 & (|io_in_c_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel AccessAck carries invalid param (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_86 & io_in_c_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel AccessAck is corrupt (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_87 & ~address_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel AccessAckData carries unmanaged address (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_87 & ~source_ok_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel AccessAckData carries invalid source ID (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_87 & (|_GEN_68)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel AccessAckData address not aligned to size (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_87 & (|io_in_c_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel AccessAckData carries invalid param (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_88 & ~address_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel HintAck carries unmanaged address (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_88 & ~source_ok_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel HintAck carries invalid source ID (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_88 & (|_GEN_68)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel HintAck address not aligned to size (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_88 & (|io_in_c_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel HintAck carries invalid param (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_88 & io_in_c_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel HintAck is corrupt (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_89 & io_in_a_bits_opcode != opcode) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel opcode changed within multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_89 & io_in_a_bits_param != param) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel param changed within multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_89 & io_in_a_bits_size != size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel size changed within multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_89 & io_in_a_bits_source != source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel source changed within multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_89 & io_in_a_bits_address != address) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel address changed with multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_90 & io_in_d_bits_opcode != opcode_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel opcode changed within multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_90 & io_in_d_bits_param != param_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel param changed within multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_90 & io_in_d_bits_size != size_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel size changed within multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_90 & io_in_d_bits_source != source_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel source changed within multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_90 & io_in_d_bits_sink != sink) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel sink changed with multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_90 & io_in_d_bits_denied != denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel denied changed with multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_91 & opcode_2 != 3'h6) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel opcode changed within multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_91 & io_in_b_bits_param != param_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel param changed within multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_91 & size_2 != 4'h6) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel size changed within multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_91 & (|source_2)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel source changed within multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_91 & io_in_b_bits_address != address_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel addresss changed with multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_92 & io_in_c_bits_opcode != opcode_3) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel opcode changed within multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_92 & io_in_c_bits_param != param_3) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel param changed within multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_92 & io_in_c_bits_size != size_3) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel size changed within multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_92 & io_in_c_bits_source != source_3) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel source changed within multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_92 & io_in_c_bits_address != address_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel address changed with multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_5 & ~reset & _GEN_107[0]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel re-used a source ID (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_97 & ~reset & ~(_GEN_108[0] | same_cycle_resp)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_100
          & ~(io_in_d_bits_opcode == _GEN_15[io_in_a_bits_opcode]
              | io_in_d_bits_opcode == _GEN_14[io_in_a_bits_opcode])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_100 & io_in_a_bits_size != io_in_d_bits_size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_101
          & ~(io_in_d_bits_opcode == _GEN_15[_GEN_93[3:1]]
              | io_in_d_bits_opcode == _GEN_14[_GEN_93[3:1]])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_101 & _GEN_102 != {1'h0, _GEN_109[7:1]}) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_96 & a_first_1 & io_in_a_valid & _GEN_98 & ~d_release_ack & ~reset
          & ~(~io_in_d_ready | io_in_a_ready)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ready check\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(a_set_wo_ready != (_GEN_97 ? _GEN_6[2:0] : 3'h0)
              | a_set_wo_ready == 3'h0)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' and 'D' concurrent, despite minlatency > 0 (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight == 3'h0 | _plusarg_reader_out == 32'h0
              | watchdog < _plusarg_reader_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_9 & ~reset & _GEN_110[0]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel re-used a source ID (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_105 & ~reset & ~(_GEN_111[0] | same_cycle_resp_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_105 & same_cycle_resp_1 & ~reset
          & io_in_d_bits_size != io_in_c_bits_size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_105 & ~same_cycle_resp_1 & ~reset
          & _GEN_102 != {1'h0, _GEN_112[7:1]}) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_104 & c_first_1 & io_in_c_valid & _GEN_106 & d_release_ack
          & ~(_GEN_76 | _GEN_79) & ~reset & ~(~io_in_d_ready | io_in_c_ready)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ready check\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if ((|c_set_wo_ready) & ~reset
          & c_set_wo_ready == (_GEN_105 ? _GEN_6[2:0] : 3'h0)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' and 'D' concurrent, despite minlatency > 0 (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight_1 == 3'h0 | _plusarg_reader_1_out == 32'h0
              | watchdog_1 < _plusarg_reader_1_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_10 & ~reset & _GEN_113[0]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel re-used a sink ID (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_e_valid & ~reset & ~(_GEN_114[0])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'E' channel acknowledged for nothing inflight (connected at src/main/scala/subsystem/SystemBus.scala:48:55)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    automatic logic b_first_done;
    b_first_done = io_in_b_ready & io_in_b_valid;
    if (reset) begin
      a_first_counter <= 9'h0;
      d_first_counter <= 9'h0;
      b_first_counter <= 9'h0;
      c_first_counter <= 9'h0;
      inflight <= 3'h0;
      inflight_opcodes <= 12'h0;
      inflight_sizes <= 24'h0;
      a_first_counter_1 <= 9'h0;
      d_first_counter_1 <= 9'h0;
      watchdog <= 32'h0;
      inflight_1 <= 3'h0;
      inflight_sizes_1 <= 24'h0;
      c_first_counter_1 <= 9'h0;
      d_first_counter_2 <= 9'h0;
      watchdog_1 <= 32'h0;
      inflight_2 <= 4'h0;
      d_first_counter_3 <= 9'h0;
    end
    else begin
      automatic logic        _GEN_115 = _GEN_2 & d_first_1 & ~d_release_ack;
      automatic logic [46:0] _GEN_116 = 47'hFF << {42'h0, io_in_d_bits_source, 3'h0};
      automatic logic        _GEN_117 = _GEN_2 & d_first_2 & d_release_ack;
      automatic logic [46:0] _GEN_118 = 47'hF << {43'h0, io_in_d_bits_source, 2'h0};
      automatic logic [34:0] _GEN_119 =
        {31'h0, _GEN_5 ? {io_in_a_bits_opcode, 1'h1} : 4'h0}
        << {31'h0, io_in_a_bits_source, 2'h0};
      automatic logic [35:0] _GEN_120 =
        {31'h0, _GEN_5 ? {io_in_a_bits_size, 1'h1} : 5'h0}
        << {31'h0, io_in_a_bits_source, 3'h0};
      automatic logic [35:0] _GEN_121 =
        {31'h0, _GEN_9 ? {io_in_c_bits_size, 1'h1} : 5'h0}
        << {31'h0, io_in_c_bits_source, 3'h0};
      if (_GEN_1) begin
        if (|a_first_counter)
          a_first_counter <= a_first_counter - 9'h1;
        else if (io_in_a_bits_opcode[2])
          a_first_counter <= 9'h0;
        else
          a_first_counter <= ~(_GEN[11:3]);
        if (a_first_1) begin
          if (io_in_a_bits_opcode[2])
            a_first_counter_1 <= 9'h0;
          else
            a_first_counter_1 <= ~(_GEN[11:3]);
        end
        else
          a_first_counter_1 <= a_first_counter_1 - 9'h1;
      end
      if (_GEN_2) begin
        automatic logic [26:0] _GEN_122 = 27'hFFF << io_in_d_bits_size;
        if (|d_first_counter)
          d_first_counter <= d_first_counter - 9'h1;
        else if (io_in_d_bits_opcode[0])
          d_first_counter <= ~(_GEN_122[11:3]);
        else
          d_first_counter <= 9'h0;
        if (d_first_1) begin
          if (io_in_d_bits_opcode[0])
            d_first_counter_1 <= ~(_GEN_122[11:3]);
          else
            d_first_counter_1 <= 9'h0;
        end
        else
          d_first_counter_1 <= d_first_counter_1 - 9'h1;
        if (d_first_2) begin
          if (io_in_d_bits_opcode[0])
            d_first_counter_2 <= ~(_GEN_122[11:3]);
          else
            d_first_counter_2 <= 9'h0;
        end
        else
          d_first_counter_2 <= d_first_counter_2 - 9'h1;
        if (d_first_3) begin
          if (io_in_d_bits_opcode[0])
            d_first_counter_3 <= ~(_GEN_122[11:3]);
          else
            d_first_counter_3 <= 9'h0;
        end
        else
          d_first_counter_3 <= d_first_counter_3 - 9'h1;
      end
      if (b_first_done) begin
        if (|b_first_counter)
          b_first_counter <= b_first_counter - 9'h1;
        else
          b_first_counter <= 9'h0;
      end
      if (_GEN_3) begin
        if (|c_first_counter)
          c_first_counter <= c_first_counter - 9'h1;
        else if (io_in_c_bits_opcode[0])
          c_first_counter <= ~(_GEN_0[11:3]);
        else
          c_first_counter <= 9'h0;
        if (c_first_1) begin
          if (io_in_c_bits_opcode[0])
            c_first_counter_1 <= ~(_GEN_0[11:3]);
          else
            c_first_counter_1 <= 9'h0;
        end
        else
          c_first_counter_1 <= c_first_counter_1 - 9'h1;
      end
      inflight <=
        (inflight | (_GEN_5 ? _GEN_4[2:0] : 3'h0)) & ~(_GEN_115 ? _GEN_6[2:0] : 3'h0);
      inflight_opcodes <=
        (inflight_opcodes | (_GEN_5 ? _GEN_119[11:0] : 12'h0))
        & ~(_GEN_115 ? _GEN_118[11:0] : 12'h0);
      inflight_sizes <=
        (inflight_sizes | (_GEN_5 ? _GEN_120[23:0] : 24'h0))
        & ~(_GEN_115 ? _GEN_116[23:0] : 24'h0);
      if (_GEN_1 | _GEN_2)
        watchdog <= 32'h0;
      else
        watchdog <= watchdog + 32'h1;
      inflight_1 <=
        (inflight_1 | (_GEN_9 ? _GEN_8[2:0] : 3'h0)) & ~(_GEN_117 ? _GEN_6[2:0] : 3'h0);
      inflight_sizes_1 <=
        (inflight_sizes_1 | (_GEN_9 ? _GEN_121[23:0] : 24'h0))
        & ~(_GEN_117 ? _GEN_116[23:0] : 24'h0);
      if (_GEN_3 | _GEN_2)
        watchdog_1 <= 32'h0;
      else
        watchdog_1 <= watchdog_1 + 32'h1;
      inflight_2 <= _GEN_13 & ~(io_in_e_valid ? 4'h1 << _GEN_12 : 4'h0);
    end
    if (_GEN_1 & ~(|a_first_counter)) begin
      opcode <= io_in_a_bits_opcode;
      param <= io_in_a_bits_param;
      size <= io_in_a_bits_size;
      source <= io_in_a_bits_source;
      address <= io_in_a_bits_address;
    end
    if (_GEN_2 & ~(|d_first_counter)) begin
      opcode_1 <= io_in_d_bits_opcode;
      param_1 <= io_in_d_bits_param;
      size_1 <= io_in_d_bits_size;
      source_1 <= io_in_d_bits_source;
      sink <= io_in_d_bits_sink;
      denied <= io_in_d_bits_denied;
    end
    if (b_first_done & ~(|b_first_counter)) begin
      opcode_2 <= 3'h6;
      param_2 <= io_in_b_bits_param;
      size_2 <= 4'h6;
      source_2 <= 2'h0;
      address_1 <= io_in_b_bits_address;
    end
    if (_GEN_3 & ~(|c_first_counter)) begin
      opcode_3 <= io_in_c_bits_opcode;
      param_3 <= io_in_c_bits_param;
      size_3 <= io_in_c_bits_size;
      source_3 <= io_in_c_bits_source;
      address_2 <= io_in_c_bits_address;
    end
  end // always @(posedge)
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader (
    .out (_plusarg_reader_out)
  );
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader_1 (
    .out (_plusarg_reader_1_out)
  );
endmodule

module TLXbar_sbus_i2_o3_a32d64s5k2z4c(
  input         clock,
                reset,
                auto_anon_in_1_a_valid,
  input  [2:0]  auto_anon_in_1_a_bits_opcode,
                auto_anon_in_1_a_bits_param,
  input  [3:0]  auto_anon_in_1_a_bits_size,
  input  [1:0]  auto_anon_in_1_a_bits_source,
  input  [31:0] auto_anon_in_1_a_bits_address,
  input  [7:0]  auto_anon_in_1_a_bits_mask,
  input  [63:0] auto_anon_in_1_a_bits_data,
  input         auto_anon_in_1_a_bits_corrupt,
                auto_anon_in_1_b_ready,
                auto_anon_in_1_c_valid,
  input  [2:0]  auto_anon_in_1_c_bits_opcode,
                auto_anon_in_1_c_bits_param,
  input  [3:0]  auto_anon_in_1_c_bits_size,
  input  [1:0]  auto_anon_in_1_c_bits_source,
  input  [31:0] auto_anon_in_1_c_bits_address,
  input  [63:0] auto_anon_in_1_c_bits_data,
  input         auto_anon_in_1_c_bits_corrupt,
                auto_anon_in_1_d_ready,
                auto_anon_in_1_e_valid,
  input  [1:0]  auto_anon_in_1_e_bits_sink,
  input         auto_anon_in_0_a_valid,
  input  [2:0]  auto_anon_in_0_a_bits_opcode,
                auto_anon_in_0_a_bits_param,
  input  [3:0]  auto_anon_in_0_a_bits_size,
                auto_anon_in_0_a_bits_source,
  input  [31:0] auto_anon_in_0_a_bits_address,
  input         auto_anon_in_0_a_bits_user_amba_prot_bufferable,
                auto_anon_in_0_a_bits_user_amba_prot_modifiable,
                auto_anon_in_0_a_bits_user_amba_prot_readalloc,
                auto_anon_in_0_a_bits_user_amba_prot_writealloc,
                auto_anon_in_0_a_bits_user_amba_prot_privileged,
                auto_anon_in_0_a_bits_user_amba_prot_secure,
                auto_anon_in_0_a_bits_user_amba_prot_fetch,
  input  [7:0]  auto_anon_in_0_a_bits_mask,
  input  [63:0] auto_anon_in_0_a_bits_data,
  input         auto_anon_in_0_a_bits_corrupt,
                auto_anon_in_0_d_ready,
                auto_anon_out_2_a_ready,
                auto_anon_out_2_d_valid,
  input  [2:0]  auto_anon_out_2_d_bits_opcode,
  input  [3:0]  auto_anon_out_2_d_bits_size,
  input  [4:0]  auto_anon_out_2_d_bits_source,
  input         auto_anon_out_2_d_bits_denied,
  input  [63:0] auto_anon_out_2_d_bits_data,
  input         auto_anon_out_2_d_bits_corrupt,
                auto_anon_out_1_a_ready,
                auto_anon_out_1_b_valid,
  input  [1:0]  auto_anon_out_1_b_bits_param,
  input  [31:0] auto_anon_out_1_b_bits_address,
  input         auto_anon_out_1_c_ready,
                auto_anon_out_1_d_valid,
  input  [2:0]  auto_anon_out_1_d_bits_opcode,
  input  [1:0]  auto_anon_out_1_d_bits_param,
  input  [2:0]  auto_anon_out_1_d_bits_size,
  input  [4:0]  auto_anon_out_1_d_bits_source,
  input  [1:0]  auto_anon_out_1_d_bits_sink,
  input         auto_anon_out_1_d_bits_denied,
  input  [63:0] auto_anon_out_1_d_bits_data,
  input         auto_anon_out_1_d_bits_corrupt,
                auto_anon_out_0_a_ready,
                auto_anon_out_0_d_valid,
  input  [2:0]  auto_anon_out_0_d_bits_opcode,
  input  [1:0]  auto_anon_out_0_d_bits_param,
  input  [3:0]  auto_anon_out_0_d_bits_size,
  input  [4:0]  auto_anon_out_0_d_bits_source,
  input         auto_anon_out_0_d_bits_sink,
                auto_anon_out_0_d_bits_denied,
  input  [63:0] auto_anon_out_0_d_bits_data,
  input         auto_anon_out_0_d_bits_corrupt,
  output        auto_anon_in_1_a_ready,
                auto_anon_in_1_b_valid,
  output [1:0]  auto_anon_in_1_b_bits_param,
  output [31:0] auto_anon_in_1_b_bits_address,
  output        auto_anon_in_1_c_ready,
                auto_anon_in_1_d_valid,
  output [2:0]  auto_anon_in_1_d_bits_opcode,
  output [1:0]  auto_anon_in_1_d_bits_param,
  output [3:0]  auto_anon_in_1_d_bits_size,
  output [1:0]  auto_anon_in_1_d_bits_source,
                auto_anon_in_1_d_bits_sink,
  output        auto_anon_in_1_d_bits_denied,
  output [63:0] auto_anon_in_1_d_bits_data,
  output        auto_anon_in_1_d_bits_corrupt,
                auto_anon_in_0_a_ready,
                auto_anon_in_0_d_valid,
  output [2:0]  auto_anon_in_0_d_bits_opcode,
  output [1:0]  auto_anon_in_0_d_bits_param,
  output [3:0]  auto_anon_in_0_d_bits_size,
                auto_anon_in_0_d_bits_source,
  output [1:0]  auto_anon_in_0_d_bits_sink,
  output        auto_anon_in_0_d_bits_denied,
  output [63:0] auto_anon_in_0_d_bits_data,
  output        auto_anon_in_0_d_bits_corrupt,
                auto_anon_out_2_a_valid,
  output [2:0]  auto_anon_out_2_a_bits_opcode,
                auto_anon_out_2_a_bits_param,
  output [3:0]  auto_anon_out_2_a_bits_size,
  output [4:0]  auto_anon_out_2_a_bits_source,
  output [30:0] auto_anon_out_2_a_bits_address,
  output        auto_anon_out_2_a_bits_user_amba_prot_bufferable,
                auto_anon_out_2_a_bits_user_amba_prot_modifiable,
                auto_anon_out_2_a_bits_user_amba_prot_readalloc,
                auto_anon_out_2_a_bits_user_amba_prot_writealloc,
                auto_anon_out_2_a_bits_user_amba_prot_privileged,
                auto_anon_out_2_a_bits_user_amba_prot_secure,
                auto_anon_out_2_a_bits_user_amba_prot_fetch,
  output [7:0]  auto_anon_out_2_a_bits_mask,
  output [63:0] auto_anon_out_2_a_bits_data,
  output        auto_anon_out_2_a_bits_corrupt,
                auto_anon_out_2_d_ready,
                auto_anon_out_1_a_valid,
  output [2:0]  auto_anon_out_1_a_bits_opcode,
                auto_anon_out_1_a_bits_param,
                auto_anon_out_1_a_bits_size,
  output [4:0]  auto_anon_out_1_a_bits_source,
  output [31:0] auto_anon_out_1_a_bits_address,
  output        auto_anon_out_1_a_bits_user_amba_prot_bufferable,
                auto_anon_out_1_a_bits_user_amba_prot_modifiable,
                auto_anon_out_1_a_bits_user_amba_prot_readalloc,
                auto_anon_out_1_a_bits_user_amba_prot_writealloc,
                auto_anon_out_1_a_bits_user_amba_prot_privileged,
                auto_anon_out_1_a_bits_user_amba_prot_secure,
                auto_anon_out_1_a_bits_user_amba_prot_fetch,
  output [7:0]  auto_anon_out_1_a_bits_mask,
  output [63:0] auto_anon_out_1_a_bits_data,
  output        auto_anon_out_1_a_bits_corrupt,
                auto_anon_out_1_b_ready,
                auto_anon_out_1_c_valid,
  output [2:0]  auto_anon_out_1_c_bits_opcode,
                auto_anon_out_1_c_bits_param,
                auto_anon_out_1_c_bits_size,
  output [4:0]  auto_anon_out_1_c_bits_source,
  output [31:0] auto_anon_out_1_c_bits_address,
  output [63:0] auto_anon_out_1_c_bits_data,
  output        auto_anon_out_1_c_bits_corrupt,
                auto_anon_out_1_d_ready,
                auto_anon_out_1_e_valid,
  output [1:0]  auto_anon_out_1_e_bits_sink,
  output        auto_anon_out_0_a_valid,
  output [2:0]  auto_anon_out_0_a_bits_opcode,
                auto_anon_out_0_a_bits_param,
  output [3:0]  auto_anon_out_0_a_bits_size,
  output [4:0]  auto_anon_out_0_a_bits_source,
  output [27:0] auto_anon_out_0_a_bits_address,
  output [7:0]  auto_anon_out_0_a_bits_mask,
  output [63:0] auto_anon_out_0_a_bits_data,
  output        auto_anon_out_0_a_bits_corrupt,
                auto_anon_out_0_d_ready
);

  wire       allowed_4_2;
  wire       allowed_4_1;
  wire       allowed_4_0;
  wire       allowed_3_2;
  wire       allowed_3_1;
  wire       allowed_3_0;
  wire       allowed_2_1;
  wire       allowed_2_0;
  wire       allowed_1_1;
  wire       allowed_1_0;
  wire       allowed_1;
  wire       allowed_0;
  wire [4:0] portsAOI_filtered_2_bits_source = {1'h0, auto_anon_in_0_a_bits_source};
  wire [4:0] portsAOI_filtered_1_2_bits_source = {3'h4, auto_anon_in_1_a_bits_source};
  wire [1:0] portsDIO_filtered_1_bits_sink = {1'h0, auto_anon_out_0_d_bits_sink};
  wire [3:0] portsDIO_filtered_1_1_bits_size = {1'h0, auto_anon_out_1_d_bits_size};
  wire       requestAIO_0_0 = auto_anon_in_0_a_bits_address[31:30] == 2'h0;
  wire       requestAIO_0_1 = auto_anon_in_0_a_bits_address[31:30] == 2'h2;
  wire       requestAIO_0_2 =
    {auto_anon_in_0_a_bits_address[31], ~(auto_anon_in_0_a_bits_address[30])} == 2'h0;
  wire       requestAIO_1_0 = auto_anon_in_1_a_bits_address[31:30] == 2'h0;
  wire       requestAIO_1_1 = auto_anon_in_1_a_bits_address[31:30] == 2'h2;
  wire       requestAIO_1_2 =
    {auto_anon_in_1_a_bits_address[31], ~(auto_anon_in_1_a_bits_address[30])} == 2'h0;
  wire       requestDOI_0_1 = auto_anon_out_0_d_bits_source[4:2] == 3'h4;
  wire       requestDOI_1_1 = auto_anon_out_1_d_bits_source[4:2] == 3'h4;
  wire       requestDOI_2_1 = auto_anon_out_2_d_bits_source[4:2] == 3'h4;
  wire       portsAOI_filtered_0_valid = auto_anon_in_0_a_valid & requestAIO_0_0;
  wire       portsAOI_filtered_1_valid = auto_anon_in_0_a_valid & requestAIO_0_1;
  wire       portsAOI_filtered_2_valid = auto_anon_in_0_a_valid & requestAIO_0_2;
  wire       in_0_a_ready =
    requestAIO_0_0 & auto_anon_out_0_a_ready & allowed_0 | requestAIO_0_1
    & auto_anon_out_1_a_ready & allowed_1_0 | requestAIO_0_2 & auto_anon_out_2_a_ready
    & allowed_2_0;
  wire       portsAOI_filtered_1_0_valid = auto_anon_in_1_a_valid & requestAIO_1_0;
  wire       portsAOI_filtered_1_1_valid = auto_anon_in_1_a_valid & requestAIO_1_1;
  wire       portsAOI_filtered_1_2_valid = auto_anon_in_1_a_valid & requestAIO_1_2;
  wire       in_1_a_ready =
    requestAIO_1_0 & auto_anon_out_0_a_ready & allowed_1 | requestAIO_1_1
    & auto_anon_out_1_a_ready & allowed_1_1 | requestAIO_1_2 & auto_anon_out_2_a_ready
    & allowed_2_1;
  wire       portsDIO_filtered_0_valid =
    auto_anon_out_0_d_valid & ~(auto_anon_out_0_d_bits_source[4]);
  wire       portsDIO_filtered_1_valid = auto_anon_out_0_d_valid & requestDOI_0_1;
  wire       portsDIO_filtered_1_0_valid =
    auto_anon_out_1_d_valid & ~(auto_anon_out_1_d_bits_source[4]);
  wire       portsDIO_filtered_1_1_valid = auto_anon_out_1_d_valid & requestDOI_1_1;
  wire       portsDIO_filtered_2_0_valid =
    auto_anon_out_2_d_valid & ~(auto_anon_out_2_d_bits_source[4]);
  wire       portsDIO_filtered_2_1_valid = auto_anon_out_2_d_valid & requestDOI_2_1;
  reg  [8:0] beatsLeft;
  wire       idle = beatsLeft == 9'h0;
  wire [1:0] readys_valid = {portsAOI_filtered_1_0_valid, portsAOI_filtered_0_valid};
  reg  [1:0] readys_mask;
  wire [1:0] _GEN = readys_valid & ~readys_mask;
  wire [1:0] readys_readys =
    ~({readys_mask[1], _GEN[1] | readys_mask[0]}
      & ({_GEN[0], portsAOI_filtered_1_0_valid} | _GEN));
  wire       winner_0 = readys_readys[0] & portsAOI_filtered_0_valid;
  wire       winner_1 = readys_readys[1] & portsAOI_filtered_1_0_valid;
  wire       _GEN_0 = portsAOI_filtered_0_valid | portsAOI_filtered_1_0_valid;
  reg        state_0;
  reg        state_1;
  wire       muxState_0 = idle ? winner_0 : state_0;
  wire       muxState_1 = idle ? winner_1 : state_1;
  assign allowed_0 = idle ? readys_readys[0] : state_0;
  assign allowed_1 = idle ? readys_readys[1] : state_1;
  wire       out_0_a_valid =
    idle
      ? _GEN_0
      : state_0 & portsAOI_filtered_0_valid | state_1 & portsAOI_filtered_1_0_valid;
  reg  [8:0] beatsLeft_1;
  wire       idle_1 = beatsLeft_1 == 9'h0;
  wire [1:0] readys_valid_1 = {portsAOI_filtered_1_1_valid, portsAOI_filtered_1_valid};
  reg  [1:0] readys_mask_1;
  wire [1:0] _GEN_1 = readys_valid_1 & ~readys_mask_1;
  wire [1:0] readys_readys_1 =
    ~({readys_mask_1[1], _GEN_1[1] | readys_mask_1[0]}
      & ({_GEN_1[0], portsAOI_filtered_1_1_valid} | _GEN_1));
  wire       winner_1_0 = readys_readys_1[0] & portsAOI_filtered_1_valid;
  wire       winner_1_1 = readys_readys_1[1] & portsAOI_filtered_1_1_valid;
  wire       _GEN_2 = portsAOI_filtered_1_valid | portsAOI_filtered_1_1_valid;
  reg        state_1_0;
  reg        state_1_1;
  wire       muxState_1_0 = idle_1 ? winner_1_0 : state_1_0;
  wire       muxState_1_1 = idle_1 ? winner_1_1 : state_1_1;
  assign allowed_1_0 = idle_1 ? readys_readys_1[0] : state_1_0;
  assign allowed_1_1 = idle_1 ? readys_readys_1[1] : state_1_1;
  wire       out_1_a_valid =
    idle_1
      ? _GEN_2
      : state_1_0 & portsAOI_filtered_1_valid | state_1_1 & portsAOI_filtered_1_1_valid;
  reg  [8:0] beatsLeft_2;
  wire       idle_2 = beatsLeft_2 == 9'h0;
  wire [1:0] readys_valid_2 = {portsAOI_filtered_1_2_valid, portsAOI_filtered_2_valid};
  reg  [1:0] readys_mask_2;
  wire [1:0] _GEN_3 = readys_valid_2 & ~readys_mask_2;
  wire [1:0] readys_readys_2 =
    ~({readys_mask_2[1], _GEN_3[1] | readys_mask_2[0]}
      & ({_GEN_3[0], portsAOI_filtered_1_2_valid} | _GEN_3));
  wire       winner_2_0 = readys_readys_2[0] & portsAOI_filtered_2_valid;
  wire       winner_2_1 = readys_readys_2[1] & portsAOI_filtered_1_2_valid;
  wire       _GEN_4 = portsAOI_filtered_2_valid | portsAOI_filtered_1_2_valid;
  reg        state_2_0;
  reg        state_2_1;
  wire       muxState_2_0 = idle_2 ? winner_2_0 : state_2_0;
  wire       muxState_2_1 = idle_2 ? winner_2_1 : state_2_1;
  assign allowed_2_0 = idle_2 ? readys_readys_2[0] : state_2_0;
  assign allowed_2_1 = idle_2 ? readys_readys_2[1] : state_2_1;
  wire       out_2_a_valid =
    idle_2
      ? _GEN_4
      : state_2_0 & portsAOI_filtered_2_valid | state_2_1 & portsAOI_filtered_1_2_valid;
  reg  [8:0] beatsLeft_3;
  wire       idle_3 = beatsLeft_3 == 9'h0;
  wire [2:0] readys_valid_3 =
    {portsDIO_filtered_2_0_valid, portsDIO_filtered_1_0_valid, portsDIO_filtered_0_valid};
  reg  [2:0] readys_mask_3;
  wire [2:0] _GEN_5 = readys_valid_3 & ~readys_mask_3;
  wire [3:0] _GEN_6 =
    {_GEN_5[1:0], portsDIO_filtered_2_0_valid, portsDIO_filtered_1_0_valid}
    | {_GEN_5, portsDIO_filtered_2_0_valid};
  wire [2:0] readys_readys_3 =
    ~({readys_mask_3[2], _GEN_5[2] | readys_mask_3[1], _GEN_6[3] | readys_mask_3[0]}
      & (_GEN_6[2:0] | {_GEN_5[2], _GEN_6[3:2]}));
  wire       winner_3_0 = readys_readys_3[0] & portsDIO_filtered_0_valid;
  wire       winner_3_1 = readys_readys_3[1] & portsDIO_filtered_1_0_valid;
  wire       winner_3_2 = readys_readys_3[2] & portsDIO_filtered_2_0_valid;
  wire       _GEN_7 =
    portsDIO_filtered_0_valid | portsDIO_filtered_1_0_valid | portsDIO_filtered_2_0_valid;
  reg        state_3_0;
  reg        state_3_1;
  reg        state_3_2;
  wire       muxState_3_0 = idle_3 ? winner_3_0 : state_3_0;
  wire       muxState_3_1 = idle_3 ? winner_3_1 : state_3_1;
  wire       muxState_3_2 = idle_3 ? winner_3_2 : state_3_2;
  assign allowed_3_0 = idle_3 ? readys_readys_3[0] : state_3_0;
  assign allowed_3_1 = idle_3 ? readys_readys_3[1] : state_3_1;
  assign allowed_3_2 = idle_3 ? readys_readys_3[2] : state_3_2;
  wire       in_0_d_valid =
    idle_3
      ? _GEN_7
      : state_3_0 & portsDIO_filtered_0_valid | state_3_1 & portsDIO_filtered_1_0_valid
        | state_3_2 & portsDIO_filtered_2_0_valid;
  wire       in_0_d_bits_corrupt =
    muxState_3_0 & auto_anon_out_0_d_bits_corrupt | muxState_3_1
    & auto_anon_out_1_d_bits_corrupt | muxState_3_2 & auto_anon_out_2_d_bits_corrupt;
  wire       in_0_d_bits_denied =
    muxState_3_0 & auto_anon_out_0_d_bits_denied | muxState_3_1
    & auto_anon_out_1_d_bits_denied | muxState_3_2 & auto_anon_out_2_d_bits_denied;
  wire [1:0] in_0_d_bits_sink =
    (muxState_3_0 ? portsDIO_filtered_1_bits_sink : 2'h0)
    | (muxState_3_1 ? auto_anon_out_1_d_bits_sink : 2'h0);
  wire [3:0] anonIn_d_bits_source =
    (muxState_3_0 ? auto_anon_out_0_d_bits_source[3:0] : 4'h0)
    | (muxState_3_1 ? auto_anon_out_1_d_bits_source[3:0] : 4'h0)
    | (muxState_3_2 ? auto_anon_out_2_d_bits_source[3:0] : 4'h0);
  wire [3:0] in_0_d_bits_size =
    (muxState_3_0 ? auto_anon_out_0_d_bits_size : 4'h0)
    | (muxState_3_1 ? portsDIO_filtered_1_1_bits_size : 4'h0)
    | (muxState_3_2 ? auto_anon_out_2_d_bits_size : 4'h0);
  wire [1:0] in_0_d_bits_param =
    (muxState_3_0 ? auto_anon_out_0_d_bits_param : 2'h0)
    | (muxState_3_1 ? auto_anon_out_1_d_bits_param : 2'h0);
  wire [2:0] in_0_d_bits_opcode =
    (muxState_3_0 ? auto_anon_out_0_d_bits_opcode : 3'h0)
    | (muxState_3_1 ? auto_anon_out_1_d_bits_opcode : 3'h0)
    | (muxState_3_2 ? auto_anon_out_2_d_bits_opcode : 3'h0);
  reg  [8:0] beatsLeft_4;
  wire       idle_4 = beatsLeft_4 == 9'h0;
  wire [2:0] readys_valid_4 =
    {portsDIO_filtered_2_1_valid, portsDIO_filtered_1_1_valid, portsDIO_filtered_1_valid};
  reg  [2:0] readys_mask_4;
  wire [2:0] _GEN_8 = readys_valid_4 & ~readys_mask_4;
  wire [3:0] _GEN_9 =
    {_GEN_8[1:0], portsDIO_filtered_2_1_valid, portsDIO_filtered_1_1_valid}
    | {_GEN_8, portsDIO_filtered_2_1_valid};
  wire [2:0] readys_readys_4 =
    ~({readys_mask_4[2], _GEN_8[2] | readys_mask_4[1], _GEN_9[3] | readys_mask_4[0]}
      & (_GEN_9[2:0] | {_GEN_8[2], _GEN_9[3:2]}));
  wire       winner_4_0 = readys_readys_4[0] & portsDIO_filtered_1_valid;
  wire       winner_4_1 = readys_readys_4[1] & portsDIO_filtered_1_1_valid;
  wire       winner_4_2 = readys_readys_4[2] & portsDIO_filtered_2_1_valid;
  wire       _GEN_10 =
    portsDIO_filtered_1_valid | portsDIO_filtered_1_1_valid | portsDIO_filtered_2_1_valid;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (~reset & ~(~winner_0 | ~winner_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Arbiter.scala:77 assert((prefixOR zip winner) map { case (p,w) => !p || !w } reduce {_ && _})\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_GEN_0 | winner_0 | winner_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Arbiter.scala:79 assert (!valids.reduce(_||_) || winner.reduce(_||_))\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~winner_1_0 | ~winner_1_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Arbiter.scala:77 assert((prefixOR zip winner) map { case (p,w) => !p || !w } reduce {_ && _})\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_GEN_2 | winner_1_0 | winner_1_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Arbiter.scala:79 assert (!valids.reduce(_||_) || winner.reduce(_||_))\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~winner_2_0 | ~winner_2_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Arbiter.scala:77 assert((prefixOR zip winner) map { case (p,w) => !p || !w } reduce {_ && _})\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_GEN_4 | winner_2_0 | winner_2_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Arbiter.scala:79 assert (!valids.reduce(_||_) || winner.reduce(_||_))\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~((~winner_3_0 | ~winner_3_1)
              & (~(winner_3_0 | winner_3_1) | ~winner_3_2))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Arbiter.scala:77 assert((prefixOR zip winner) map { case (p,w) => !p || !w } reduce {_ && _})\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_GEN_7 | winner_3_0 | winner_3_1 | winner_3_2)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Arbiter.scala:79 assert (!valids.reduce(_||_) || winner.reduce(_||_))\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~((~winner_4_0 | ~winner_4_1)
              & (~(winner_4_0 | winner_4_1) | ~winner_4_2))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Arbiter.scala:77 assert((prefixOR zip winner) map { case (p,w) => !p || !w } reduce {_ && _})\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_GEN_10 | winner_4_0 | winner_4_1 | winner_4_2)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Arbiter.scala:79 assert (!valids.reduce(_||_) || winner.reduce(_||_))\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  reg        state_4_0;
  reg        state_4_1;
  reg        state_4_2;
  wire       muxState_4_0 = idle_4 ? winner_4_0 : state_4_0;
  wire       muxState_4_1 = idle_4 ? winner_4_1 : state_4_1;
  wire       muxState_4_2 = idle_4 ? winner_4_2 : state_4_2;
  assign allowed_4_0 = idle_4 ? readys_readys_4[0] : state_4_0;
  assign allowed_4_1 = idle_4 ? readys_readys_4[1] : state_4_1;
  assign allowed_4_2 = idle_4 ? readys_readys_4[2] : state_4_2;
  wire       in_1_d_valid =
    idle_4
      ? _GEN_10
      : state_4_0 & portsDIO_filtered_1_valid | state_4_1 & portsDIO_filtered_1_1_valid
        | state_4_2 & portsDIO_filtered_2_1_valid;
  wire       in_1_d_bits_corrupt =
    muxState_4_0 & auto_anon_out_0_d_bits_corrupt | muxState_4_1
    & auto_anon_out_1_d_bits_corrupt | muxState_4_2 & auto_anon_out_2_d_bits_corrupt;
  wire       in_1_d_bits_denied =
    muxState_4_0 & auto_anon_out_0_d_bits_denied | muxState_4_1
    & auto_anon_out_1_d_bits_denied | muxState_4_2 & auto_anon_out_2_d_bits_denied;
  wire [1:0] in_1_d_bits_sink =
    (muxState_4_0 ? portsDIO_filtered_1_bits_sink : 2'h0)
    | (muxState_4_1 ? auto_anon_out_1_d_bits_sink : 2'h0);
  wire [1:0] anonIn_1_d_bits_source =
    (muxState_4_0 ? auto_anon_out_0_d_bits_source[1:0] : 2'h0)
    | (muxState_4_1 ? auto_anon_out_1_d_bits_source[1:0] : 2'h0)
    | (muxState_4_2 ? auto_anon_out_2_d_bits_source[1:0] : 2'h0);
  wire [3:0] in_1_d_bits_size =
    (muxState_4_0 ? auto_anon_out_0_d_bits_size : 4'h0)
    | (muxState_4_1 ? portsDIO_filtered_1_1_bits_size : 4'h0)
    | (muxState_4_2 ? auto_anon_out_2_d_bits_size : 4'h0);
  wire [1:0] in_1_d_bits_param =
    (muxState_4_0 ? auto_anon_out_0_d_bits_param : 2'h0)
    | (muxState_4_1 ? auto_anon_out_1_d_bits_param : 2'h0);
  wire [2:0] in_1_d_bits_opcode =
    (muxState_4_0 ? auto_anon_out_0_d_bits_opcode : 3'h0)
    | (muxState_4_1 ? auto_anon_out_1_d_bits_opcode : 3'h0)
    | (muxState_4_2 ? auto_anon_out_2_d_bits_opcode : 3'h0);
  always @(posedge clock) begin
    if (reset) begin
      beatsLeft <= 9'h0;
      readys_mask <= 2'h3;
      state_0 <= 1'h0;
      state_1 <= 1'h0;
      beatsLeft_1 <= 9'h0;
      readys_mask_1 <= 2'h3;
      state_1_0 <= 1'h0;
      state_1_1 <= 1'h0;
      beatsLeft_2 <= 9'h0;
      readys_mask_2 <= 2'h3;
      state_2_0 <= 1'h0;
      state_2_1 <= 1'h0;
      beatsLeft_3 <= 9'h0;
      readys_mask_3 <= 3'h7;
      state_3_0 <= 1'h0;
      state_3_1 <= 1'h0;
      state_3_2 <= 1'h0;
      beatsLeft_4 <= 9'h0;
      readys_mask_4 <= 3'h7;
      state_4_0 <= 1'h0;
      state_4_1 <= 1'h0;
      state_4_2 <= 1'h0;
    end
    else begin
      automatic logic [26:0] _GEN_11 = 27'hFFF << auto_anon_in_0_a_bits_size;
      automatic logic [26:0] _GEN_12 = 27'hFFF << auto_anon_in_1_a_bits_size;
      automatic logic [26:0] _GEN_13 = 27'hFFF << auto_anon_out_0_d_bits_size;
      automatic logic [20:0] _GEN_14 = 21'h3F << auto_anon_out_1_d_bits_size;
      automatic logic [22:0] _GEN_15 = 23'hFF << auto_anon_out_2_d_bits_size;
      automatic logic        latch = idle & auto_anon_out_0_a_ready;
      automatic logic        latch_1 = idle_1 & auto_anon_out_1_a_ready;
      automatic logic        latch_2 = idle_2 & auto_anon_out_2_a_ready;
      automatic logic        latch_3 = idle_3 & auto_anon_in_0_d_ready;
      automatic logic        latch_4 = idle_4 & auto_anon_in_1_d_ready;
      if (latch)
        beatsLeft <=
          (winner_0 & ~(auto_anon_in_0_a_bits_opcode[2]) ? ~(_GEN_11[11:3]) : 9'h0)
          | (winner_1 & ~(auto_anon_in_1_a_bits_opcode[2]) ? ~(_GEN_12[11:3]) : 9'h0);
      else
        beatsLeft <= beatsLeft - {8'h0, auto_anon_out_0_a_ready & out_0_a_valid};
      if (latch & (|readys_valid)) begin
        automatic logic [1:0] _GEN_16 = readys_readys & readys_valid;
        readys_mask <= _GEN_16 | {_GEN_16[0], 1'h0};
      end
      if (idle) begin
        state_0 <= winner_0;
        state_1 <= winner_1;
      end
      if (latch_1)
        beatsLeft_1 <=
          (winner_1_0 & ~(auto_anon_in_0_a_bits_opcode[2]) ? ~(_GEN_11[11:3]) : 9'h0)
          | (winner_1_1 & ~(auto_anon_in_1_a_bits_opcode[2]) ? ~(_GEN_12[11:3]) : 9'h0);
      else
        beatsLeft_1 <= beatsLeft_1 - {8'h0, auto_anon_out_1_a_ready & out_1_a_valid};
      if (latch_1 & (|readys_valid_1)) begin
        automatic logic [1:0] _GEN_17 = readys_readys_1 & readys_valid_1;
        readys_mask_1 <= _GEN_17 | {_GEN_17[0], 1'h0};
      end
      if (idle_1) begin
        state_1_0 <= winner_1_0;
        state_1_1 <= winner_1_1;
      end
      if (latch_2)
        beatsLeft_2 <=
          (winner_2_0 & ~(auto_anon_in_0_a_bits_opcode[2]) ? ~(_GEN_11[11:3]) : 9'h0)
          | (winner_2_1 & ~(auto_anon_in_1_a_bits_opcode[2]) ? ~(_GEN_12[11:3]) : 9'h0);
      else
        beatsLeft_2 <= beatsLeft_2 - {8'h0, auto_anon_out_2_a_ready & out_2_a_valid};
      if (latch_2 & (|readys_valid_2)) begin
        automatic logic [1:0] _GEN_18 = readys_readys_2 & readys_valid_2;
        readys_mask_2 <= _GEN_18 | {_GEN_18[0], 1'h0};
      end
      if (idle_2) begin
        state_2_0 <= winner_2_0;
        state_2_1 <= winner_2_1;
      end
      if (latch_3) begin
        automatic logic [8:0] maskedBeats_0_3 =
          winner_3_0 & auto_anon_out_0_d_bits_opcode[0] ? ~(_GEN_13[11:3]) : 9'h0;
        beatsLeft_3 <=
          {maskedBeats_0_3[8:5],
           {maskedBeats_0_3[4:3],
            maskedBeats_0_3[2:0]
              | (winner_3_1 & auto_anon_out_1_d_bits_opcode[0] ? ~(_GEN_14[5:3]) : 3'h0)}
             | (winner_3_2 & auto_anon_out_2_d_bits_opcode[0] ? ~(_GEN_15[7:3]) : 5'h0)};
      end
      else
        beatsLeft_3 <= beatsLeft_3 - {8'h0, auto_anon_in_0_d_ready & in_0_d_valid};
      if (latch_3 & (|readys_valid_3)) begin
        automatic logic [2:0] _GEN_19 = readys_readys_3 & readys_valid_3;
        automatic logic [2:0] _GEN_20 = _GEN_19 | {_GEN_19[1:0], 1'h0};
        readys_mask_3 <= _GEN_20 | {_GEN_20[0], 2'h0};
      end
      if (idle_3) begin
        state_3_0 <= winner_3_0;
        state_3_1 <= winner_3_1;
        state_3_2 <= winner_3_2;
      end
      if (latch_4) begin
        automatic logic [8:0] maskedBeats_0_4 =
          winner_4_0 & auto_anon_out_0_d_bits_opcode[0] ? ~(_GEN_13[11:3]) : 9'h0;
        beatsLeft_4 <=
          {maskedBeats_0_4[8:5],
           {maskedBeats_0_4[4:3],
            maskedBeats_0_4[2:0]
              | (winner_4_1 & auto_anon_out_1_d_bits_opcode[0] ? ~(_GEN_14[5:3]) : 3'h0)}
             | (winner_4_2 & auto_anon_out_2_d_bits_opcode[0] ? ~(_GEN_15[7:3]) : 5'h0)};
      end
      else
        beatsLeft_4 <= beatsLeft_4 - {8'h0, auto_anon_in_1_d_ready & in_1_d_valid};
      if (latch_4 & (|readys_valid_4)) begin
        automatic logic [2:0] _GEN_21 = readys_readys_4 & readys_valid_4;
        automatic logic [2:0] _GEN_22 = _GEN_21 | {_GEN_21[1:0], 1'h0};
        readys_mask_4 <= _GEN_22 | {_GEN_22[0], 2'h0};
      end
      if (idle_4) begin
        state_4_0 <= winner_4_0;
        state_4_1 <= winner_4_1;
        state_4_2 <= winner_4_2;
      end
    end
  end // always @(posedge)
  TLMonitor monitor (
    .clock                (clock),
    .reset                (reset),
    .io_in_a_ready        (in_0_a_ready),
    .io_in_a_valid        (auto_anon_in_0_a_valid),
    .io_in_a_bits_opcode  (auto_anon_in_0_a_bits_opcode),
    .io_in_a_bits_param   (auto_anon_in_0_a_bits_param),
    .io_in_a_bits_size    (auto_anon_in_0_a_bits_size),
    .io_in_a_bits_source  (auto_anon_in_0_a_bits_source),
    .io_in_a_bits_address (auto_anon_in_0_a_bits_address),
    .io_in_a_bits_mask    (auto_anon_in_0_a_bits_mask),
    .io_in_a_bits_corrupt (auto_anon_in_0_a_bits_corrupt),
    .io_in_d_ready        (auto_anon_in_0_d_ready),
    .io_in_d_valid        (in_0_d_valid),
    .io_in_d_bits_opcode  (in_0_d_bits_opcode),
    .io_in_d_bits_param   (in_0_d_bits_param),
    .io_in_d_bits_size    (in_0_d_bits_size),
    .io_in_d_bits_source  (anonIn_d_bits_source),
    .io_in_d_bits_sink    (in_0_d_bits_sink),
    .io_in_d_bits_denied  (in_0_d_bits_denied),
    .io_in_d_bits_corrupt (in_0_d_bits_corrupt)
  );
  TLMonitor_1 monitor_1 (
    .clock                (clock),
    .reset                (reset),
    .io_in_a_ready        (in_1_a_ready),
    .io_in_a_valid        (auto_anon_in_1_a_valid),
    .io_in_a_bits_opcode  (auto_anon_in_1_a_bits_opcode),
    .io_in_a_bits_param   (auto_anon_in_1_a_bits_param),
    .io_in_a_bits_size    (auto_anon_in_1_a_bits_size),
    .io_in_a_bits_source  (auto_anon_in_1_a_bits_source),
    .io_in_a_bits_address (auto_anon_in_1_a_bits_address),
    .io_in_a_bits_mask    (auto_anon_in_1_a_bits_mask),
    .io_in_a_bits_corrupt (auto_anon_in_1_a_bits_corrupt),
    .io_in_b_ready        (auto_anon_in_1_b_ready),
    .io_in_b_valid        (auto_anon_out_1_b_valid),
    .io_in_b_bits_param   (auto_anon_out_1_b_bits_param),
    .io_in_b_bits_address (auto_anon_out_1_b_bits_address),
    .io_in_c_ready        (auto_anon_out_1_c_ready),
    .io_in_c_valid        (auto_anon_in_1_c_valid),
    .io_in_c_bits_opcode  (auto_anon_in_1_c_bits_opcode),
    .io_in_c_bits_param   (auto_anon_in_1_c_bits_param),
    .io_in_c_bits_size    (auto_anon_in_1_c_bits_size),
    .io_in_c_bits_source  (auto_anon_in_1_c_bits_source),
    .io_in_c_bits_address (auto_anon_in_1_c_bits_address),
    .io_in_c_bits_corrupt (auto_anon_in_1_c_bits_corrupt),
    .io_in_d_ready        (auto_anon_in_1_d_ready),
    .io_in_d_valid        (in_1_d_valid),
    .io_in_d_bits_opcode  (in_1_d_bits_opcode),
    .io_in_d_bits_param   (in_1_d_bits_param),
    .io_in_d_bits_size    (in_1_d_bits_size),
    .io_in_d_bits_source  (anonIn_1_d_bits_source),
    .io_in_d_bits_sink    (in_1_d_bits_sink),
    .io_in_d_bits_denied  (in_1_d_bits_denied),
    .io_in_d_bits_corrupt (in_1_d_bits_corrupt),
    .io_in_e_valid        (auto_anon_in_1_e_valid),
    .io_in_e_bits_sink    (auto_anon_in_1_e_bits_sink)
  );
  assign auto_anon_in_1_a_ready = in_1_a_ready;
  assign auto_anon_in_1_b_valid = auto_anon_out_1_b_valid;
  assign auto_anon_in_1_b_bits_param = auto_anon_out_1_b_bits_param;
  assign auto_anon_in_1_b_bits_address = auto_anon_out_1_b_bits_address;
  assign auto_anon_in_1_c_ready = auto_anon_out_1_c_ready;
  assign auto_anon_in_1_d_valid = in_1_d_valid;
  assign auto_anon_in_1_d_bits_opcode = in_1_d_bits_opcode;
  assign auto_anon_in_1_d_bits_param = in_1_d_bits_param;
  assign auto_anon_in_1_d_bits_size = in_1_d_bits_size;
  assign auto_anon_in_1_d_bits_source = anonIn_1_d_bits_source;
  assign auto_anon_in_1_d_bits_sink = in_1_d_bits_sink;
  assign auto_anon_in_1_d_bits_denied = in_1_d_bits_denied;
  assign auto_anon_in_1_d_bits_data =
    (muxState_4_0 ? auto_anon_out_0_d_bits_data : 64'h0)
    | (muxState_4_1 ? auto_anon_out_1_d_bits_data : 64'h0)
    | (muxState_4_2 ? auto_anon_out_2_d_bits_data : 64'h0);
  assign auto_anon_in_1_d_bits_corrupt = in_1_d_bits_corrupt;
  assign auto_anon_in_0_a_ready = in_0_a_ready;
  assign auto_anon_in_0_d_valid = in_0_d_valid;
  assign auto_anon_in_0_d_bits_opcode = in_0_d_bits_opcode;
  assign auto_anon_in_0_d_bits_param = in_0_d_bits_param;
  assign auto_anon_in_0_d_bits_size = in_0_d_bits_size;
  assign auto_anon_in_0_d_bits_source = anonIn_d_bits_source;
  assign auto_anon_in_0_d_bits_sink = in_0_d_bits_sink;
  assign auto_anon_in_0_d_bits_denied = in_0_d_bits_denied;
  assign auto_anon_in_0_d_bits_data =
    (muxState_3_0 ? auto_anon_out_0_d_bits_data : 64'h0)
    | (muxState_3_1 ? auto_anon_out_1_d_bits_data : 64'h0)
    | (muxState_3_2 ? auto_anon_out_2_d_bits_data : 64'h0);
  assign auto_anon_in_0_d_bits_corrupt = in_0_d_bits_corrupt;
  assign auto_anon_out_2_a_valid = out_2_a_valid;
  assign auto_anon_out_2_a_bits_opcode =
    (muxState_2_0 ? auto_anon_in_0_a_bits_opcode : 3'h0)
    | (muxState_2_1 ? auto_anon_in_1_a_bits_opcode : 3'h0);
  assign auto_anon_out_2_a_bits_param =
    (muxState_2_0 ? auto_anon_in_0_a_bits_param : 3'h0)
    | (muxState_2_1 ? auto_anon_in_1_a_bits_param : 3'h0);
  assign auto_anon_out_2_a_bits_size =
    (muxState_2_0 ? auto_anon_in_0_a_bits_size : 4'h0)
    | (muxState_2_1 ? auto_anon_in_1_a_bits_size : 4'h0);
  assign auto_anon_out_2_a_bits_source =
    (muxState_2_0 ? portsAOI_filtered_2_bits_source : 5'h0)
    | (muxState_2_1 ? portsAOI_filtered_1_2_bits_source : 5'h0);
  assign auto_anon_out_2_a_bits_address =
    (muxState_2_0 ? auto_anon_in_0_a_bits_address[30:0] : 31'h0)
    | (muxState_2_1 ? auto_anon_in_1_a_bits_address[30:0] : 31'h0);
  assign auto_anon_out_2_a_bits_user_amba_prot_bufferable =
    muxState_2_0 & auto_anon_in_0_a_bits_user_amba_prot_bufferable;
  assign auto_anon_out_2_a_bits_user_amba_prot_modifiable =
    muxState_2_0 & auto_anon_in_0_a_bits_user_amba_prot_modifiable;
  assign auto_anon_out_2_a_bits_user_amba_prot_readalloc =
    muxState_2_0 & auto_anon_in_0_a_bits_user_amba_prot_readalloc;
  assign auto_anon_out_2_a_bits_user_amba_prot_writealloc =
    muxState_2_0 & auto_anon_in_0_a_bits_user_amba_prot_writealloc;
  assign auto_anon_out_2_a_bits_user_amba_prot_privileged =
    muxState_2_0 & auto_anon_in_0_a_bits_user_amba_prot_privileged;
  assign auto_anon_out_2_a_bits_user_amba_prot_secure =
    muxState_2_0 & auto_anon_in_0_a_bits_user_amba_prot_secure;
  assign auto_anon_out_2_a_bits_user_amba_prot_fetch =
    muxState_2_0 & auto_anon_in_0_a_bits_user_amba_prot_fetch;
  assign auto_anon_out_2_a_bits_mask =
    (muxState_2_0 ? auto_anon_in_0_a_bits_mask : 8'h0)
    | (muxState_2_1 ? auto_anon_in_1_a_bits_mask : 8'h0);
  assign auto_anon_out_2_a_bits_data =
    (muxState_2_0 ? auto_anon_in_0_a_bits_data : 64'h0)
    | (muxState_2_1 ? auto_anon_in_1_a_bits_data : 64'h0);
  assign auto_anon_out_2_a_bits_corrupt =
    muxState_2_0 & auto_anon_in_0_a_bits_corrupt | muxState_2_1
    & auto_anon_in_1_a_bits_corrupt;
  assign auto_anon_out_2_d_ready =
    ~(auto_anon_out_2_d_bits_source[4]) & auto_anon_in_0_d_ready & allowed_3_2
    | requestDOI_2_1 & auto_anon_in_1_d_ready & allowed_4_2;
  assign auto_anon_out_1_a_valid = out_1_a_valid;
  assign auto_anon_out_1_a_bits_opcode =
    (muxState_1_0 ? auto_anon_in_0_a_bits_opcode : 3'h0)
    | (muxState_1_1 ? auto_anon_in_1_a_bits_opcode : 3'h0);
  assign auto_anon_out_1_a_bits_param =
    (muxState_1_0 ? auto_anon_in_0_a_bits_param : 3'h0)
    | (muxState_1_1 ? auto_anon_in_1_a_bits_param : 3'h0);
  assign auto_anon_out_1_a_bits_size =
    (muxState_1_0 ? auto_anon_in_0_a_bits_size[2:0] : 3'h0)
    | (muxState_1_1 ? auto_anon_in_1_a_bits_size[2:0] : 3'h0);
  assign auto_anon_out_1_a_bits_source =
    (muxState_1_0 ? portsAOI_filtered_2_bits_source : 5'h0)
    | (muxState_1_1 ? portsAOI_filtered_1_2_bits_source : 5'h0);
  assign auto_anon_out_1_a_bits_address =
    (muxState_1_0 ? auto_anon_in_0_a_bits_address : 32'h0)
    | (muxState_1_1 ? auto_anon_in_1_a_bits_address : 32'h0);
  assign auto_anon_out_1_a_bits_user_amba_prot_bufferable =
    muxState_1_0 & auto_anon_in_0_a_bits_user_amba_prot_bufferable;
  assign auto_anon_out_1_a_bits_user_amba_prot_modifiable =
    muxState_1_0 & auto_anon_in_0_a_bits_user_amba_prot_modifiable;
  assign auto_anon_out_1_a_bits_user_amba_prot_readalloc =
    muxState_1_0 & auto_anon_in_0_a_bits_user_amba_prot_readalloc;
  assign auto_anon_out_1_a_bits_user_amba_prot_writealloc =
    muxState_1_0 & auto_anon_in_0_a_bits_user_amba_prot_writealloc;
  assign auto_anon_out_1_a_bits_user_amba_prot_privileged =
    muxState_1_0 & auto_anon_in_0_a_bits_user_amba_prot_privileged;
  assign auto_anon_out_1_a_bits_user_amba_prot_secure =
    muxState_1_0 & auto_anon_in_0_a_bits_user_amba_prot_secure;
  assign auto_anon_out_1_a_bits_user_amba_prot_fetch =
    muxState_1_0 & auto_anon_in_0_a_bits_user_amba_prot_fetch;
  assign auto_anon_out_1_a_bits_mask =
    (muxState_1_0 ? auto_anon_in_0_a_bits_mask : 8'h0)
    | (muxState_1_1 ? auto_anon_in_1_a_bits_mask : 8'h0);
  assign auto_anon_out_1_a_bits_data =
    (muxState_1_0 ? auto_anon_in_0_a_bits_data : 64'h0)
    | (muxState_1_1 ? auto_anon_in_1_a_bits_data : 64'h0);
  assign auto_anon_out_1_a_bits_corrupt =
    muxState_1_0 & auto_anon_in_0_a_bits_corrupt | muxState_1_1
    & auto_anon_in_1_a_bits_corrupt;
  assign auto_anon_out_1_b_ready = auto_anon_in_1_b_ready;
  assign auto_anon_out_1_c_valid = auto_anon_in_1_c_valid;
  assign auto_anon_out_1_c_bits_opcode = auto_anon_in_1_c_bits_opcode;
  assign auto_anon_out_1_c_bits_param = auto_anon_in_1_c_bits_param;
  assign auto_anon_out_1_c_bits_size = auto_anon_in_1_c_bits_size[2:0];
  assign auto_anon_out_1_c_bits_source = {3'h4, auto_anon_in_1_c_bits_source};
  assign auto_anon_out_1_c_bits_address = auto_anon_in_1_c_bits_address;
  assign auto_anon_out_1_c_bits_data = auto_anon_in_1_c_bits_data;
  assign auto_anon_out_1_c_bits_corrupt = auto_anon_in_1_c_bits_corrupt;
  assign auto_anon_out_1_d_ready =
    ~(auto_anon_out_1_d_bits_source[4]) & auto_anon_in_0_d_ready & allowed_3_1
    | requestDOI_1_1 & auto_anon_in_1_d_ready & allowed_4_1;
  assign auto_anon_out_1_e_valid = auto_anon_in_1_e_valid;
  assign auto_anon_out_1_e_bits_sink = auto_anon_in_1_e_bits_sink;
  assign auto_anon_out_0_a_valid = out_0_a_valid;
  assign auto_anon_out_0_a_bits_opcode =
    (muxState_0 ? auto_anon_in_0_a_bits_opcode : 3'h0)
    | (muxState_1 ? auto_anon_in_1_a_bits_opcode : 3'h0);
  assign auto_anon_out_0_a_bits_param =
    (muxState_0 ? auto_anon_in_0_a_bits_param : 3'h0)
    | (muxState_1 ? auto_anon_in_1_a_bits_param : 3'h0);
  assign auto_anon_out_0_a_bits_size =
    (muxState_0 ? auto_anon_in_0_a_bits_size : 4'h0)
    | (muxState_1 ? auto_anon_in_1_a_bits_size : 4'h0);
  assign auto_anon_out_0_a_bits_source =
    (muxState_0 ? portsAOI_filtered_2_bits_source : 5'h0)
    | (muxState_1 ? portsAOI_filtered_1_2_bits_source : 5'h0);
  assign auto_anon_out_0_a_bits_address =
    (muxState_0 ? auto_anon_in_0_a_bits_address[27:0] : 28'h0)
    | (muxState_1 ? auto_anon_in_1_a_bits_address[27:0] : 28'h0);
  assign auto_anon_out_0_a_bits_mask =
    (muxState_0 ? auto_anon_in_0_a_bits_mask : 8'h0)
    | (muxState_1 ? auto_anon_in_1_a_bits_mask : 8'h0);
  assign auto_anon_out_0_a_bits_data =
    (muxState_0 ? auto_anon_in_0_a_bits_data : 64'h0)
    | (muxState_1 ? auto_anon_in_1_a_bits_data : 64'h0);
  assign auto_anon_out_0_a_bits_corrupt =
    muxState_0 & auto_anon_in_0_a_bits_corrupt | muxState_1
    & auto_anon_in_1_a_bits_corrupt;
  assign auto_anon_out_0_d_ready =
    ~(auto_anon_out_0_d_bits_source[4]) & auto_anon_in_0_d_ready & allowed_3_0
    | requestDOI_0_1 & auto_anon_in_1_d_ready & allowed_4_0;
endmodule

module TLMonitor_2(
  input        clock,
               reset,
               io_in_a_ready,
               io_in_a_valid,
  input [2:0]  io_in_a_bits_opcode,
               io_in_a_bits_param,
  input [3:0]  io_in_a_bits_size,
               io_in_a_bits_source,
  input [31:0] io_in_a_bits_address,
  input [7:0]  io_in_a_bits_mask,
  input        io_in_a_bits_corrupt,
               io_in_d_ready,
               io_in_d_valid,
  input [2:0]  io_in_d_bits_opcode,
  input [1:0]  io_in_d_bits_param,
  input [3:0]  io_in_d_bits_size,
               io_in_d_bits_source,
  input [1:0]  io_in_d_bits_sink,
  input        io_in_d_bits_denied,
               io_in_d_bits_corrupt
);

  wire [31:0]  _plusarg_reader_1_out;
  wire [31:0]  _plusarg_reader_out;
  wire [26:0]  _GEN = 27'hFFF << io_in_a_bits_size;
  wire         _GEN_0 = io_in_a_ready & io_in_a_valid;
  reg  [8:0]   a_first_counter;
  reg  [2:0]   opcode;
  reg  [2:0]   param;
  reg  [3:0]   size;
  reg  [3:0]   source;
  reg  [31:0]  address;
  reg  [8:0]   d_first_counter;
  reg  [2:0]   opcode_1;
  reg  [1:0]   param_1;
  reg  [3:0]   size_1;
  reg  [3:0]   source_1;
  reg  [1:0]   sink;
  reg          denied;
  reg  [15:0]  inflight;
  reg  [63:0]  inflight_opcodes;
  reg  [127:0] inflight_sizes;
  reg  [8:0]   a_first_counter_1;
  wire         a_first_1 = a_first_counter_1 == 9'h0;
  reg  [8:0]   d_first_counter_1;
  wire         d_first_1 = d_first_counter_1 == 9'h0;
  wire [15:0]  _GEN_1 = {12'h0, io_in_a_bits_source};
  wire [15:0]  _GEN_2 = 16'h1 << _GEN_1;
  wire         _GEN_3 = _GEN_0 & a_first_1;
  wire         d_release_ack = io_in_d_bits_opcode == 3'h6;
  wire [15:0]  _GEN_4 = {12'h0, io_in_d_bits_source};
  wire [15:0]  _GEN_5 = 16'h1 << _GEN_4;
  reg  [31:0]  watchdog;
  reg  [15:0]  inflight_1;
  reg  [127:0] inflight_sizes_1;
  reg  [8:0]   d_first_counter_2;
  wire         d_first_2 = d_first_counter_2 == 9'h0;
  reg  [31:0]  watchdog_1;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      automatic logic [7:0][2:0] _GEN_6 =
        '{3'h4, 3'h5, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic [7:0][2:0] _GEN_7 =
        '{3'h4, 3'h4, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic [11:0]     _GEN_8 = io_in_a_bits_address[11:0] & ~(_GEN[11:0]);
      automatic logic            _GEN_9 = io_in_a_bits_size > 4'h2;
      automatic logic            mask_size = io_in_a_bits_size[1:0] == 2'h2;
      automatic logic            mask_acc =
        _GEN_9 | mask_size & ~(io_in_a_bits_address[2]);
      automatic logic            mask_acc_1 =
        _GEN_9 | mask_size & io_in_a_bits_address[2];
      automatic logic            mask_size_1 = io_in_a_bits_size[1:0] == 2'h1;
      automatic logic            mask_eq_2 =
        ~(io_in_a_bits_address[2]) & ~(io_in_a_bits_address[1]);
      automatic logic            mask_acc_2 = mask_acc | mask_size_1 & mask_eq_2;
      automatic logic            mask_eq_3 =
        ~(io_in_a_bits_address[2]) & io_in_a_bits_address[1];
      automatic logic            mask_acc_3 = mask_acc | mask_size_1 & mask_eq_3;
      automatic logic            mask_eq_4 =
        io_in_a_bits_address[2] & ~(io_in_a_bits_address[1]);
      automatic logic            mask_acc_4 = mask_acc_1 | mask_size_1 & mask_eq_4;
      automatic logic            mask_eq_5 =
        io_in_a_bits_address[2] & io_in_a_bits_address[1];
      automatic logic            mask_acc_5 = mask_acc_1 | mask_size_1 & mask_eq_5;
      automatic logic [7:0]      mask =
        {mask_acc_5 | mask_eq_5 & io_in_a_bits_address[0],
         mask_acc_5 | mask_eq_5 & ~(io_in_a_bits_address[0]),
         mask_acc_4 | mask_eq_4 & io_in_a_bits_address[0],
         mask_acc_4 | mask_eq_4 & ~(io_in_a_bits_address[0]),
         mask_acc_3 | mask_eq_3 & io_in_a_bits_address[0],
         mask_acc_3 | mask_eq_3 & ~(io_in_a_bits_address[0]),
         mask_acc_2 | mask_eq_2 & io_in_a_bits_address[0],
         mask_acc_2 | mask_eq_2 & ~(io_in_a_bits_address[0])};
      automatic logic            _GEN_10 = io_in_a_bits_size < 4'hD;
      automatic logic            _GEN_11 = io_in_a_bits_size < 4'h7;
      automatic logic            _GEN_12 = io_in_a_bits_address[31:28] == 4'h8;
      automatic logic            _GEN_13 = _GEN_10 & _GEN_11 & _GEN_12;
      automatic logic            _GEN_14 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_15 = io_in_a_bits_param > 3'h2;
      automatic logic            _GEN_16 = io_in_a_bits_mask != 8'hFF;
      automatic logic            _GEN_17 =
        io_in_a_valid & (&io_in_a_bits_opcode) & ~reset;
      automatic logic            _GEN_18 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_19 =
        {io_in_a_bits_address[31:14], ~(io_in_a_bits_address[13:12])} == 20'h0;
      automatic logic            _GEN_20 = _GEN_10 & _GEN_19;
      automatic logic            _GEN_21 = io_in_a_bits_address[31:12] == 20'h0;
      automatic logic            _GEN_22 =
        {io_in_a_bits_address[31:26], io_in_a_bits_address[25:16] ^ 10'h200} == 16'h0;
      automatic logic            _GEN_23 =
        {io_in_a_bits_address[31:28], ~(io_in_a_bits_address[27:26])} == 6'h0;
      automatic logic            _GEN_24 =
        {io_in_a_bits_address[31], ~(io_in_a_bits_address[30:29])} == 3'h0;
      automatic logic            _GEN_25 = io_in_a_bits_mask != mask;
      automatic logic            _GEN_26 =
        _GEN_10
        & (_GEN_20 | _GEN_11 & (_GEN_21 | _GEN_22 | _GEN_23 | _GEN_12)
           | io_in_a_bits_size < 4'h9 & _GEN_24);
      automatic logic            _GEN_27 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_28 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_29 =
        _GEN_10 & io_in_a_bits_size < 4'h4 & (_GEN_21 | _GEN_19 | _GEN_22 | _GEN_23);
      automatic logic            _GEN_30 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_31 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h3 & ~reset;
      automatic logic            _GEN_32 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h5 & ~reset;
      automatic logic            _GEN_33 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_34 = io_in_d_bits_size < 4'h3;
      automatic logic            _GEN_35 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_36 = io_in_d_bits_param == 2'h2;
      automatic logic            _GEN_37 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h5 & ~reset;
      automatic logic            _GEN_38 = ~io_in_d_bits_denied | io_in_d_bits_corrupt;
      automatic logic            _GEN_39 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_40 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_41 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_42 = io_in_a_valid & (|a_first_counter) & ~reset;
      automatic logic            _GEN_43 = io_in_d_valid & (|d_first_counter) & ~reset;
      automatic logic [63:0]     _GEN_44 =
        inflight_opcodes >> {58'h0, io_in_d_bits_source, 2'h0};
      automatic logic [127:0]    _GEN_45 = {121'h0, io_in_d_bits_source, 3'h0};
      automatic logic            _GEN_46 = io_in_a_valid & a_first_1;
      automatic logic [15:0]     a_set_wo_ready = _GEN_46 ? _GEN_2 : 16'h0;
      automatic logic            _GEN_47 = io_in_d_valid & d_first_1;
      automatic logic            _GEN_48 = _GEN_47 & ~d_release_ack;
      automatic logic            _GEN_49 = io_in_a_bits_source == io_in_d_bits_source;
      automatic logic            same_cycle_resp = _GEN_46 & _GEN_49;
      automatic logic            _GEN_50 = _GEN_48 & same_cycle_resp & ~reset;
      automatic logic            _GEN_51 = _GEN_48 & ~same_cycle_resp & ~reset;
      automatic logic [7:0]      _GEN_52 = {4'h0, io_in_d_bits_size};
      automatic logic            _GEN_53 =
        io_in_d_valid & d_first_2 & d_release_ack & ~reset;
      automatic logic [15:0]     _GEN_54 = inflight >> _GEN_1;
      automatic logic [15:0]     _GEN_55 = inflight >> _GEN_4;
      automatic logic [127:0]    _GEN_56 = inflight_sizes >> _GEN_45;
      automatic logic [15:0]     _GEN_57 = inflight_1 >> _GEN_4;
      automatic logic [127:0]    _GEN_58 = inflight_sizes_1 >> _GEN_45;
      if (_GEN_14 & ~_GEN_13) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & ~_GEN_9) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & _GEN_15) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock carries invalid grow param (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & _GEN_16) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock is corrupt (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & ~_GEN_13) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & ~_GEN_9) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & _GEN_15) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm carries invalid grow param (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & ~(|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & _GEN_16) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm is corrupt (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & ~_GEN_10) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18
          & ~(_GEN_20 | _GEN_11
              & (_GEN_21
                 | {io_in_a_bits_address[31:17], ~(io_in_a_bits_address[16])} == 16'h0
                 | _GEN_22 | _GEN_23 | _GEN_24 | _GEN_12))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get address not aligned to size (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get carries invalid param (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & _GEN_25) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get contains invalid mask (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get is corrupt (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & ~_GEN_26) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull address not aligned to size (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull carries invalid param (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & _GEN_25) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull contains invalid mask (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & ~_GEN_26) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial address not aligned to size (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial carries invalid param (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & (|(io_in_a_bits_mask & ~mask))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial contains invalid mask (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & ~_GEN_29) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & io_in_a_bits_param > 3'h4) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & _GEN_25) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & ~_GEN_29) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical address not aligned to size (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & io_in_a_bits_param[2]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical carries invalid opcode param (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & _GEN_25) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical contains invalid mask (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & ~(_GEN_10 & _GEN_20)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint address not aligned to size (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & (|(io_in_a_bits_param[2:1]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint carries invalid opcode param (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & _GEN_25) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint contains invalid mask (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint is corrupt (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & ~reset & (&io_in_d_bits_opcode)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel has invalid opcode (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_33 & _GEN_34) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_33 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_33 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck is corrupt (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_33 & io_in_d_bits_denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck is denied (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_35 & _GEN_34) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant smaller than a beat (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_35 & (&io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid cap param (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_35 & _GEN_36) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries toN param (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_35 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant is corrupt (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & _GEN_34) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData smaller than a beat (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & (&io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid cap param (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & _GEN_36) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries toN param (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & ~_GEN_38) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData is denied but not corrupt (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_39 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck carries invalid param (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_39 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck is corrupt (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_40 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData carries invalid param (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_40 & ~_GEN_38) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData is denied but not corrupt (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_41 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck carries invalid param (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_41 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck is corrupt (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & io_in_a_bits_opcode != opcode) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel opcode changed within multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & io_in_a_bits_param != param) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel param changed within multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & io_in_a_bits_size != size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel size changed within multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & io_in_a_bits_source != source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel source changed within multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & io_in_a_bits_address != address) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel address changed with multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & io_in_d_bits_opcode != opcode_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel opcode changed within multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & io_in_d_bits_param != param_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel param changed within multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & io_in_d_bits_size != size_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel size changed within multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & io_in_d_bits_source != source_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel source changed within multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & io_in_d_bits_sink != sink) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel sink changed with multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & io_in_d_bits_denied != denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel denied changed with multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_3 & ~reset & _GEN_54[0]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel re-used a source ID (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_48 & ~reset & ~(_GEN_55[0] | same_cycle_resp)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_50
          & ~(io_in_d_bits_opcode == _GEN_7[io_in_a_bits_opcode]
              | io_in_d_bits_opcode == _GEN_6[io_in_a_bits_opcode])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_50 & io_in_a_bits_size != io_in_d_bits_size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_51
          & ~(io_in_d_bits_opcode == _GEN_7[_GEN_44[3:1]]
              | io_in_d_bits_opcode == _GEN_6[_GEN_44[3:1]])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_51 & _GEN_52 != {1'h0, _GEN_56[7:1]}) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_47 & a_first_1 & io_in_a_valid & _GEN_49 & ~d_release_ack & ~reset
          & ~(~io_in_d_ready | io_in_a_ready)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ready check\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(a_set_wo_ready != (_GEN_48 ? _GEN_5 : 16'h0)
              | a_set_wo_ready == 16'h0)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' and 'D' concurrent, despite minlatency > 0 (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight == 16'h0 | _plusarg_reader_out == 32'h0
              | watchdog < _plusarg_reader_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_53 & ~(_GEN_57[0])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_53 & _GEN_52 != {1'h0, _GEN_58[7:1]}) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight_1 == 16'h0 | _plusarg_reader_1_out == 32'h0
              | watchdog_1 < _plusarg_reader_1_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    automatic logic _GEN_59;
    _GEN_59 = io_in_d_ready & io_in_d_valid;
    if (reset) begin
      a_first_counter <= 9'h0;
      d_first_counter <= 9'h0;
      inflight <= 16'h0;
      inflight_opcodes <= 64'h0;
      inflight_sizes <= 128'h0;
      a_first_counter_1 <= 9'h0;
      d_first_counter_1 <= 9'h0;
      watchdog <= 32'h0;
      inflight_1 <= 16'h0;
      inflight_sizes_1 <= 128'h0;
      d_first_counter_2 <= 9'h0;
      watchdog_1 <= 32'h0;
    end
    else begin
      automatic logic         _GEN_60;
      automatic logic [142:0] _GEN_61 = 143'hFF << {136'h0, io_in_d_bits_source, 3'h0};
      automatic logic         _GEN_62;
      automatic logic [142:0] _GEN_63 = 143'hF << {137'h0, io_in_d_bits_source, 2'h0};
      automatic logic [130:0] _GEN_64 =
        {127'h0, _GEN_3 ? {io_in_a_bits_opcode, 1'h1} : 4'h0}
        << {125'h0, io_in_a_bits_source, 2'h0};
      automatic logic [131:0] _GEN_65 =
        {127'h0, _GEN_3 ? {io_in_a_bits_size, 1'h1} : 5'h0}
        << {125'h0, io_in_a_bits_source, 3'h0};
      _GEN_60 = _GEN_59 & d_first_1 & ~d_release_ack;
      _GEN_62 = _GEN_59 & d_first_2 & d_release_ack;
      if (_GEN_0) begin
        if (|a_first_counter)
          a_first_counter <= a_first_counter - 9'h1;
        else if (io_in_a_bits_opcode[2])
          a_first_counter <= 9'h0;
        else
          a_first_counter <= ~(_GEN[11:3]);
        if (a_first_1) begin
          if (io_in_a_bits_opcode[2])
            a_first_counter_1 <= 9'h0;
          else
            a_first_counter_1 <= ~(_GEN[11:3]);
        end
        else
          a_first_counter_1 <= a_first_counter_1 - 9'h1;
      end
      if (_GEN_59) begin
        automatic logic [26:0] _GEN_66 = 27'hFFF << io_in_d_bits_size;
        if (|d_first_counter)
          d_first_counter <= d_first_counter - 9'h1;
        else if (io_in_d_bits_opcode[0])
          d_first_counter <= ~(_GEN_66[11:3]);
        else
          d_first_counter <= 9'h0;
        if (d_first_1) begin
          if (io_in_d_bits_opcode[0])
            d_first_counter_1 <= ~(_GEN_66[11:3]);
          else
            d_first_counter_1 <= 9'h0;
        end
        else
          d_first_counter_1 <= d_first_counter_1 - 9'h1;
        if (d_first_2) begin
          if (io_in_d_bits_opcode[0])
            d_first_counter_2 <= ~(_GEN_66[11:3]);
          else
            d_first_counter_2 <= 9'h0;
        end
        else
          d_first_counter_2 <= d_first_counter_2 - 9'h1;
        watchdog_1 <= 32'h0;
      end
      else
        watchdog_1 <= watchdog_1 + 32'h1;
      inflight <= (inflight | (_GEN_3 ? _GEN_2 : 16'h0)) & ~(_GEN_60 ? _GEN_5 : 16'h0);
      inflight_opcodes <=
        (inflight_opcodes | (_GEN_3 ? _GEN_64[63:0] : 64'h0))
        & ~(_GEN_60 ? _GEN_63[63:0] : 64'h0);
      inflight_sizes <=
        (inflight_sizes | (_GEN_3 ? _GEN_65[127:0] : 128'h0))
        & ~(_GEN_60 ? _GEN_61[127:0] : 128'h0);
      if (_GEN_0 | _GEN_59)
        watchdog <= 32'h0;
      else
        watchdog <= watchdog + 32'h1;
      inflight_1 <= inflight_1 & ~(_GEN_62 ? _GEN_5 : 16'h0);
      inflight_sizes_1 <= inflight_sizes_1 & ~(_GEN_62 ? _GEN_61[127:0] : 128'h0);
    end
    if (_GEN_0 & ~(|a_first_counter)) begin
      opcode <= io_in_a_bits_opcode;
      param <= io_in_a_bits_param;
      size <= io_in_a_bits_size;
      source <= io_in_a_bits_source;
      address <= io_in_a_bits_address;
    end
    if (_GEN_59 & ~(|d_first_counter)) begin
      opcode_1 <= io_in_d_bits_opcode;
      param_1 <= io_in_d_bits_param;
      size_1 <= io_in_d_bits_size;
      source_1 <= io_in_d_bits_source;
      sink <= io_in_d_bits_sink;
      denied <= io_in_d_bits_denied;
    end
  end // always @(posedge)
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader (
    .out (_plusarg_reader_out)
  );
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader_1 (
    .out (_plusarg_reader_1_out)
  );
endmodule

module TLMonitor_3(
  input        clock,
               reset,
               io_in_a_ready,
               io_in_a_valid,
  input [2:0]  io_in_a_bits_opcode,
               io_in_a_bits_param,
  input [3:0]  io_in_a_bits_size,
  input [1:0]  io_in_a_bits_source,
  input [31:0] io_in_a_bits_address,
  input [7:0]  io_in_a_bits_mask,
  input        io_in_a_bits_corrupt,
               io_in_b_ready,
               io_in_b_valid,
  input [1:0]  io_in_b_bits_param,
  input [31:0] io_in_b_bits_address,
  input        io_in_c_ready,
               io_in_c_valid,
  input [2:0]  io_in_c_bits_opcode,
               io_in_c_bits_param,
  input [3:0]  io_in_c_bits_size,
  input [1:0]  io_in_c_bits_source,
  input [31:0] io_in_c_bits_address,
  input        io_in_c_bits_corrupt,
               io_in_d_ready,
               io_in_d_valid,
  input [2:0]  io_in_d_bits_opcode,
  input [1:0]  io_in_d_bits_param,
  input [3:0]  io_in_d_bits_size,
  input [1:0]  io_in_d_bits_source,
               io_in_d_bits_sink,
  input        io_in_d_bits_denied,
               io_in_d_bits_corrupt,
               io_in_e_valid,
  input [1:0]  io_in_e_bits_sink
);

  wire [31:0] _plusarg_reader_1_out;
  wire [31:0] _plusarg_reader_out;
  wire [26:0] _GEN = 27'hFFF << io_in_a_bits_size;
  wire [26:0] _GEN_0 = 27'hFFF << io_in_c_bits_size;
  wire        _GEN_1 = io_in_a_ready & io_in_a_valid;
  reg  [8:0]  a_first_counter;
  reg  [2:0]  opcode;
  reg  [2:0]  param;
  reg  [3:0]  size;
  reg  [1:0]  source;
  reg  [31:0] address;
  wire        _GEN_2 = io_in_d_ready & io_in_d_valid;
  reg  [8:0]  d_first_counter;
  reg  [2:0]  opcode_1;
  reg  [1:0]  param_1;
  reg  [3:0]  size_1;
  reg  [1:0]  source_1;
  reg  [1:0]  sink;
  reg         denied;
  reg  [8:0]  b_first_counter;
  reg  [2:0]  opcode_2;
  reg  [1:0]  param_2;
  reg  [3:0]  size_2;
  reg  [1:0]  source_2;
  reg  [31:0] address_1;
  wire        _GEN_3 = io_in_c_ready & io_in_c_valid;
  reg  [8:0]  c_first_counter;
  reg  [2:0]  opcode_3;
  reg  [2:0]  param_3;
  reg  [3:0]  size_3;
  reg  [1:0]  source_3;
  reg  [31:0] address_2;
  reg  [2:0]  inflight;
  reg  [11:0] inflight_opcodes;
  reg  [23:0] inflight_sizes;
  reg  [8:0]  a_first_counter_1;
  wire        a_first_1 = a_first_counter_1 == 9'h0;
  reg  [8:0]  d_first_counter_1;
  wire        d_first_1 = d_first_counter_1 == 9'h0;
  wire [3:0]  _GEN_4 = 4'h1 << io_in_a_bits_source;
  wire        _GEN_5 = _GEN_1 & a_first_1;
  wire        d_release_ack = io_in_d_bits_opcode == 3'h6;
  wire [3:0]  _GEN_6 = 4'h1 << io_in_d_bits_source;
  reg  [31:0] watchdog;
  reg  [2:0]  inflight_1;
  reg  [23:0] inflight_sizes_1;
  reg  [8:0]  c_first_counter_1;
  wire        c_first_1 = c_first_counter_1 == 9'h0;
  reg  [8:0]  d_first_counter_2;
  wire        d_first_2 = d_first_counter_2 == 9'h0;
  wire        _GEN_7 = io_in_c_bits_opcode[2] & io_in_c_bits_opcode[1];
  wire [3:0]  _GEN_8 = 4'h1 << io_in_c_bits_source;
  wire        _GEN_9 = _GEN_3 & c_first_1 & _GEN_7;
  reg  [31:0] watchdog_1;
  reg  [3:0]  inflight_2;
  reg  [8:0]  d_first_counter_3;
  wire        d_first_3 = d_first_counter_3 == 9'h0;
  wire        _GEN_10 =
    _GEN_2 & d_first_3 & io_in_d_bits_opcode[2] & ~(io_in_d_bits_opcode[1]);
  wire [3:0]  _GEN_11 = {2'h0, io_in_d_bits_sink};
  wire [3:0]  _GEN_12 = {2'h0, io_in_e_bits_sink};
  wire [3:0]  _GEN_13 = (_GEN_10 ? 4'h1 << _GEN_11 : 4'h0) | inflight_2;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      automatic logic [7:0][2:0] _GEN_14 =
        '{3'h4, 3'h5, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic [7:0][2:0] _GEN_15 =
        '{3'h4, 3'h4, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic            _GEN_16 = io_in_a_bits_source == 2'h0;
      automatic logic            _GEN_17 = io_in_a_bits_source == 2'h1;
      automatic logic            _GEN_18 = io_in_a_bits_source == 2'h2;
      automatic logic            source_ok = _GEN_16 | _GEN_17 | _GEN_18;
      automatic logic [11:0]     _GEN_19 = io_in_a_bits_address[11:0] & ~(_GEN[11:0]);
      automatic logic            _GEN_20 = io_in_a_bits_size > 4'h2;
      automatic logic            mask_size = io_in_a_bits_size[1:0] == 2'h2;
      automatic logic            mask_acc =
        _GEN_20 | mask_size & ~(io_in_a_bits_address[2]);
      automatic logic            mask_acc_1 =
        _GEN_20 | mask_size & io_in_a_bits_address[2];
      automatic logic            mask_size_1 = io_in_a_bits_size[1:0] == 2'h1;
      automatic logic            mask_eq_2 =
        ~(io_in_a_bits_address[2]) & ~(io_in_a_bits_address[1]);
      automatic logic            mask_acc_2 = mask_acc | mask_size_1 & mask_eq_2;
      automatic logic            mask_eq_3 =
        ~(io_in_a_bits_address[2]) & io_in_a_bits_address[1];
      automatic logic            mask_acc_3 = mask_acc | mask_size_1 & mask_eq_3;
      automatic logic            mask_eq_4 =
        io_in_a_bits_address[2] & ~(io_in_a_bits_address[1]);
      automatic logic            mask_acc_4 = mask_acc_1 | mask_size_1 & mask_eq_4;
      automatic logic            mask_eq_5 =
        io_in_a_bits_address[2] & io_in_a_bits_address[1];
      automatic logic            mask_acc_5 = mask_acc_1 | mask_size_1 & mask_eq_5;
      automatic logic [7:0]      mask =
        {mask_acc_5 | mask_eq_5 & io_in_a_bits_address[0],
         mask_acc_5 | mask_eq_5 & ~(io_in_a_bits_address[0]),
         mask_acc_4 | mask_eq_4 & io_in_a_bits_address[0],
         mask_acc_4 | mask_eq_4 & ~(io_in_a_bits_address[0]),
         mask_acc_3 | mask_eq_3 & io_in_a_bits_address[0],
         mask_acc_3 | mask_eq_3 & ~(io_in_a_bits_address[0]),
         mask_acc_2 | mask_eq_2 & io_in_a_bits_address[0],
         mask_acc_2 | mask_eq_2 & ~(io_in_a_bits_address[0])};
      automatic logic            _GEN_21 = io_in_a_bits_size < 4'hD;
      automatic logic            _GEN_22 = _GEN_21 & (_GEN_16 | _GEN_17 | _GEN_18);
      automatic logic            _GEN_23 = io_in_a_bits_size < 4'h7;
      automatic logic            _GEN_24 = io_in_a_bits_address[31:28] == 4'h8;
      automatic logic            _GEN_25 = _GEN_22 & _GEN_23 & _GEN_24;
      automatic logic            _GEN_26 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_27 = io_in_a_bits_address[31:12] == 20'h0;
      automatic logic            _GEN_28 =
        {io_in_a_bits_address[31:14], ~(io_in_a_bits_address[13:12])} == 20'h0;
      automatic logic            _GEN_29 =
        {io_in_a_bits_address[31:17], ~(io_in_a_bits_address[16])} == 16'h0;
      automatic logic            _GEN_30 =
        {io_in_a_bits_address[31:26], io_in_a_bits_address[25:16] ^ 10'h200} == 16'h0;
      automatic logic            _GEN_31 =
        {io_in_a_bits_address[31:28], ~(io_in_a_bits_address[27:26])} == 6'h0;
      automatic logic            _GEN_32 =
        {io_in_a_bits_address[31], ~(io_in_a_bits_address[30:29])} == 3'h0;
      automatic logic            _GEN_33 = _GEN_27 | _GEN_28;
      automatic logic            _GEN_34 =
        _GEN_16 & io_in_a_bits_size == 4'h6 & _GEN_21
        & (_GEN_33 | _GEN_29 | _GEN_30 | _GEN_31 | _GEN_32 | _GEN_24);
      automatic logic            _GEN_35 = io_in_a_bits_param > 3'h2;
      automatic logic            _GEN_36 = io_in_a_bits_mask != 8'hFF;
      automatic logic            _GEN_37 =
        io_in_a_valid & (&io_in_a_bits_opcode) & ~reset;
      automatic logic            _GEN_38 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_39 = _GEN_21 & _GEN_28;
      automatic logic            _GEN_40 = io_in_a_bits_mask != mask;
      automatic logic            _GEN_41 =
        _GEN_22
        & (_GEN_39 | _GEN_23 & (_GEN_27 | _GEN_30 | _GEN_31 | _GEN_24)
           | io_in_a_bits_size < 4'h9 & _GEN_32);
      automatic logic            _GEN_42 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_43 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_44 =
        _GEN_22 & io_in_a_bits_size < 4'h4 & (_GEN_33 | _GEN_30 | _GEN_31);
      automatic logic            _GEN_45 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_46 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h3 & ~reset;
      automatic logic            _GEN_47 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h5 & ~reset;
      automatic logic            source_ok_1 =
        io_in_d_bits_source == 2'h0 | io_in_d_bits_source == 2'h1
        | io_in_d_bits_source == 2'h2;
      automatic logic            _GEN_48 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_49 = io_in_d_bits_size < 4'h3;
      automatic logic            _GEN_50 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_51 = io_in_d_bits_param == 2'h2;
      automatic logic            _GEN_52 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h5 & ~reset;
      automatic logic            _GEN_53 = ~io_in_d_bits_denied | io_in_d_bits_corrupt;
      automatic logic            _GEN_54 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_55 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_56 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_57 = io_in_b_bits_address[31:12] == 20'h0;
      automatic logic            _GEN_58 =
        {io_in_b_bits_address[31:14], ~(io_in_b_bits_address[13:12])} == 20'h0;
      automatic logic            _GEN_59 =
        {io_in_b_bits_address[31:17], ~(io_in_b_bits_address[16])} == 16'h0;
      automatic logic            _GEN_60 =
        {io_in_b_bits_address[31:26], io_in_b_bits_address[25:16] ^ 10'h200} == 16'h0;
      automatic logic            _GEN_61 =
        {io_in_b_bits_address[31:28], ~(io_in_b_bits_address[27:26])} == 6'h0;
      automatic logic            _GEN_62 =
        {io_in_b_bits_address[31], ~(io_in_b_bits_address[30:29])} == 3'h0;
      automatic logic            _GEN_63 = io_in_b_bits_address[31:28] == 4'h8;
      automatic logic            _GEN_64 = io_in_b_valid & ~reset;
      automatic logic            _GEN_65 = io_in_c_bits_source == 2'h0;
      automatic logic            _GEN_66 = io_in_c_bits_source == 2'h1;
      automatic logic            _GEN_67 = io_in_c_bits_source == 2'h2;
      automatic logic            source_ok_2 = _GEN_65 | _GEN_66 | _GEN_67;
      automatic logic [11:0]     _GEN_68 = io_in_c_bits_address[11:0] & ~(_GEN_0[11:0]);
      automatic logic            _GEN_69 = io_in_c_bits_address[31:12] == 20'h0;
      automatic logic            _GEN_70 =
        {io_in_c_bits_address[31:14], ~(io_in_c_bits_address[13:12])} == 20'h0;
      automatic logic            _GEN_71 =
        {io_in_c_bits_address[31:17], ~(io_in_c_bits_address[16])} == 16'h0;
      automatic logic            _GEN_72 =
        {io_in_c_bits_address[31:26], io_in_c_bits_address[25:16] ^ 10'h200} == 16'h0;
      automatic logic            _GEN_73 =
        {io_in_c_bits_address[31:28], ~(io_in_c_bits_address[27:26])} == 6'h0;
      automatic logic            _GEN_74 =
        {io_in_c_bits_address[31], ~(io_in_c_bits_address[30:29])} == 3'h0;
      automatic logic            _GEN_75 = io_in_c_bits_address[31:28] == 4'h8;
      automatic logic            address_ok_1 =
        _GEN_69 | _GEN_70 | _GEN_71 | _GEN_72 | _GEN_73 | _GEN_74 | _GEN_75;
      automatic logic            _GEN_76 = io_in_c_bits_opcode == 3'h4;
      automatic logic            _GEN_77 = io_in_c_valid & _GEN_76 & ~reset;
      automatic logic            _GEN_78 = io_in_c_bits_size < 4'h3;
      automatic logic            _GEN_79 = io_in_c_bits_opcode == 3'h5;
      automatic logic            _GEN_80 = io_in_c_valid & _GEN_79 & ~reset;
      automatic logic            _GEN_81 = io_in_c_bits_size < 4'hD;
      automatic logic            _GEN_82 =
        _GEN_81 & (_GEN_65 | _GEN_66 | _GEN_67) & io_in_c_bits_size < 4'h7 & _GEN_75;
      automatic logic            _GEN_83 =
        io_in_c_valid & io_in_c_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_84 =
        _GEN_65 & io_in_c_bits_size == 4'h6 & _GEN_81
        & (_GEN_69 | _GEN_70 | _GEN_71 | _GEN_72 | _GEN_73 | _GEN_74 | _GEN_75);
      automatic logic            _GEN_85 =
        io_in_c_valid & (&io_in_c_bits_opcode) & ~reset;
      automatic logic            _GEN_86 =
        io_in_c_valid & io_in_c_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_87 =
        io_in_c_valid & io_in_c_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_88 =
        io_in_c_valid & io_in_c_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_89 = io_in_a_valid & (|a_first_counter) & ~reset;
      automatic logic            _GEN_90 = io_in_d_valid & (|d_first_counter) & ~reset;
      automatic logic            _GEN_91 = io_in_b_valid & (|b_first_counter) & ~reset;
      automatic logic            _GEN_92 = io_in_c_valid & (|c_first_counter) & ~reset;
      automatic logic [11:0]     _GEN_93 =
        inflight_opcodes >> {8'h0, io_in_d_bits_source, 2'h0};
      automatic logic [23:0]     _GEN_94 = {19'h0, io_in_d_bits_source, 3'h0};
      automatic logic            _GEN_95 = io_in_a_valid & a_first_1;
      automatic logic [2:0]      a_set_wo_ready = _GEN_95 ? _GEN_4[2:0] : 3'h0;
      automatic logic            _GEN_96 = io_in_d_valid & d_first_1;
      automatic logic            _GEN_97 = _GEN_96 & ~d_release_ack;
      automatic logic            _GEN_98 = io_in_a_bits_source == io_in_d_bits_source;
      automatic logic            same_cycle_resp = _GEN_95 & _GEN_98;
      automatic logic [2:0]      _GEN_99 = {1'h0, io_in_d_bits_source};
      automatic logic            _GEN_100 = _GEN_97 & same_cycle_resp & ~reset;
      automatic logic            _GEN_101 = _GEN_97 & ~same_cycle_resp & ~reset;
      automatic logic [7:0]      _GEN_102 = {4'h0, io_in_d_bits_size};
      automatic logic            _GEN_103 = io_in_c_valid & c_first_1 & _GEN_7;
      automatic logic [2:0]      c_set_wo_ready = _GEN_103 ? _GEN_8[2:0] : 3'h0;
      automatic logic            _GEN_104 = io_in_d_valid & d_first_2;
      automatic logic            _GEN_105 = _GEN_104 & d_release_ack;
      automatic logic            _GEN_106 = io_in_c_bits_source == io_in_d_bits_source;
      automatic logic            same_cycle_resp_1 = _GEN_103 & _GEN_106;
      automatic logic [2:0]      _GEN_107 = inflight >> io_in_a_bits_source;
      automatic logic [2:0]      _GEN_108 = inflight >> _GEN_99;
      automatic logic [23:0]     _GEN_109 = inflight_sizes >> _GEN_94;
      automatic logic [2:0]      _GEN_110 = inflight_1 >> io_in_c_bits_source;
      automatic logic [2:0]      _GEN_111 = inflight_1 >> _GEN_99;
      automatic logic [23:0]     _GEN_112 = inflight_sizes_1 >> _GEN_94;
      automatic logic [3:0]      _GEN_113 = inflight_2 >> _GEN_11;
      automatic logic [3:0]      _GEN_114 = _GEN_13 >> _GEN_12;
      if (_GEN_26 & ~_GEN_25) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_26 & ~_GEN_34) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_26 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock carries invalid source ID (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_26 & ~_GEN_20) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_26 & (|_GEN_19)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_26 & _GEN_35) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock carries invalid grow param (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_26 & _GEN_36) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_26 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock is corrupt (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & ~_GEN_25) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & ~_GEN_34) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm carries invalid source ID (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & ~_GEN_20) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & (|_GEN_19)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & _GEN_35) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm carries invalid grow param (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & ~(|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & _GEN_36) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm is corrupt (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_38 & ~_GEN_22) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_38
          & ~(_GEN_39 | _GEN_23
              & (_GEN_27 | _GEN_29 | _GEN_30 | _GEN_31 | _GEN_32 | _GEN_24))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_38 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get carries invalid source ID (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_38 & (|_GEN_19)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get address not aligned to size (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_38 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get carries invalid param (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_38 & _GEN_40) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get contains invalid mask (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_38 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get is corrupt (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & ~_GEN_41) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull carries invalid source ID (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & (|_GEN_19)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull address not aligned to size (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull carries invalid param (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & _GEN_40) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull contains invalid mask (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & ~_GEN_41) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & (|_GEN_19)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial address not aligned to size (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial carries invalid param (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & (|(io_in_a_bits_mask & ~mask))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial contains invalid mask (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_45 & ~_GEN_44) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_45 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_45 & (|_GEN_19)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_45 & io_in_a_bits_param > 3'h4) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_45 & _GEN_40) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_46 & ~_GEN_44) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_46 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical carries invalid source ID (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_46 & (|_GEN_19)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical address not aligned to size (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_46 & io_in_a_bits_param[2]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical carries invalid opcode param (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_46 & _GEN_40) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical contains invalid mask (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_47 & ~(_GEN_22 & _GEN_39)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_47 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint carries invalid source ID (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_47 & (|_GEN_19)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint address not aligned to size (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_47 & (|(io_in_a_bits_param[2:1]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint carries invalid opcode param (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_47 & _GEN_40) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint contains invalid mask (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_47 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint is corrupt (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & ~reset & (&io_in_d_bits_opcode)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel has invalid opcode (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_48 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_48 & _GEN_49) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_48 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_48 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck is corrupt (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_48 & io_in_d_bits_denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck is denied (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_50 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid source ID (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_50 & _GEN_49) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant smaller than a beat (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_50 & (&io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid cap param (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_50 & _GEN_51) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries toN param (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_50 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant is corrupt (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_52 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid source ID (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_52 & _GEN_49) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData smaller than a beat (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_52 & (&io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid cap param (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_52 & _GEN_51) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries toN param (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_52 & ~_GEN_53) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData is denied but not corrupt (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_54 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_54 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck carries invalid param (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_54 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck is corrupt (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_55 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_55 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData carries invalid param (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_55 & ~_GEN_53) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData is denied but not corrupt (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_56 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck carries invalid source ID (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_56 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck carries invalid param (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_56 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck is corrupt (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_64
          & ~(_GEN_57 | _GEN_58 | _GEN_59 | _GEN_60 | _GEN_61 | _GEN_62 | _GEN_63)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel carries Probe type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_64
          & ~(_GEN_57 | _GEN_58 | _GEN_59 | _GEN_60 | _GEN_61 | _GEN_62 | _GEN_63)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel Probe carries unmanaged address (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_64 & (|(io_in_b_bits_address[5:0]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel Probe address not aligned to size (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_64 & (&io_in_b_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel Probe carries invalid cap param (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_77 & ~address_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ProbeAck carries unmanaged address (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_77 & ~source_ok_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ProbeAck carries invalid source ID (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_77 & _GEN_78) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ProbeAck smaller than a beat (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_77 & (|_GEN_68)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ProbeAck address not aligned to size (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_77 & (&(io_in_c_bits_param[2:1]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ProbeAck carries invalid report param (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_77 & io_in_c_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ProbeAck is corrupt (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_80 & ~address_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ProbeAckData carries unmanaged address (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_80 & ~source_ok_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ProbeAckData carries invalid source ID (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_80 & _GEN_78) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ProbeAckData smaller than a beat (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_80 & (|_GEN_68)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ProbeAckData address not aligned to size (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_80 & (&(io_in_c_bits_param[2:1]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ProbeAckData carries invalid report param (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_83 & ~_GEN_82) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel carries Release type unsupported by manager (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_83 & ~_GEN_84) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel carries Release from a client which does not support Probe (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_83 & ~source_ok_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel Release carries invalid source ID (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_83 & _GEN_78) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel Release smaller than a beat (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_83 & (|_GEN_68)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel Release address not aligned to size (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_83 & (&(io_in_c_bits_param[2:1]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel Release carries invalid report param (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_83 & io_in_c_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel Release is corrupt (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_85 & ~_GEN_82) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel carries ReleaseData type unsupported by manager (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_85 & ~_GEN_84) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel carries Release from a client which does not support Probe (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_85 & ~source_ok_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ReleaseData carries invalid source ID (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_85 & _GEN_78) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ReleaseData smaller than a beat (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_85 & (|_GEN_68)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ReleaseData address not aligned to size (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_85 & (&(io_in_c_bits_param[2:1]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ReleaseData carries invalid report param (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_86 & ~address_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel AccessAck carries unmanaged address (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_86 & ~source_ok_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel AccessAck carries invalid source ID (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_86 & (|_GEN_68)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel AccessAck address not aligned to size (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_86 & (|io_in_c_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel AccessAck carries invalid param (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_86 & io_in_c_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel AccessAck is corrupt (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_87 & ~address_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel AccessAckData carries unmanaged address (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_87 & ~source_ok_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel AccessAckData carries invalid source ID (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_87 & (|_GEN_68)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel AccessAckData address not aligned to size (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_87 & (|io_in_c_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel AccessAckData carries invalid param (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_88 & ~address_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel HintAck carries unmanaged address (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_88 & ~source_ok_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel HintAck carries invalid source ID (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_88 & (|_GEN_68)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel HintAck address not aligned to size (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_88 & (|io_in_c_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel HintAck carries invalid param (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_88 & io_in_c_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel HintAck is corrupt (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_89 & io_in_a_bits_opcode != opcode) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel opcode changed within multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_89 & io_in_a_bits_param != param) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel param changed within multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_89 & io_in_a_bits_size != size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel size changed within multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_89 & io_in_a_bits_source != source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel source changed within multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_89 & io_in_a_bits_address != address) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel address changed with multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_90 & io_in_d_bits_opcode != opcode_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel opcode changed within multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_90 & io_in_d_bits_param != param_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel param changed within multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_90 & io_in_d_bits_size != size_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel size changed within multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_90 & io_in_d_bits_source != source_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel source changed within multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_90 & io_in_d_bits_sink != sink) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel sink changed with multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_90 & io_in_d_bits_denied != denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel denied changed with multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_91 & opcode_2 != 3'h6) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel opcode changed within multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_91 & io_in_b_bits_param != param_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel param changed within multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_91 & size_2 != 4'h6) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel size changed within multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_91 & (|source_2)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel source changed within multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_91 & io_in_b_bits_address != address_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel addresss changed with multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_92 & io_in_c_bits_opcode != opcode_3) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel opcode changed within multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_92 & io_in_c_bits_param != param_3) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel param changed within multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_92 & io_in_c_bits_size != size_3) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel size changed within multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_92 & io_in_c_bits_source != source_3) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel source changed within multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_92 & io_in_c_bits_address != address_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel address changed with multibeat operation (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_5 & ~reset & _GEN_107[0]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel re-used a source ID (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_97 & ~reset & ~(_GEN_108[0] | same_cycle_resp)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_100
          & ~(io_in_d_bits_opcode == _GEN_15[io_in_a_bits_opcode]
              | io_in_d_bits_opcode == _GEN_14[io_in_a_bits_opcode])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_100 & io_in_a_bits_size != io_in_d_bits_size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_101
          & ~(io_in_d_bits_opcode == _GEN_15[_GEN_93[3:1]]
              | io_in_d_bits_opcode == _GEN_14[_GEN_93[3:1]])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_101 & _GEN_102 != {1'h0, _GEN_109[7:1]}) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_96 & a_first_1 & io_in_a_valid & _GEN_98 & ~d_release_ack & ~reset
          & ~(~io_in_d_ready | io_in_a_ready)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ready check\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(a_set_wo_ready != (_GEN_97 ? _GEN_6[2:0] : 3'h0)
              | a_set_wo_ready == 3'h0)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' and 'D' concurrent, despite minlatency > 0 (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight == 3'h0 | _plusarg_reader_out == 32'h0
              | watchdog < _plusarg_reader_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_9 & ~reset & _GEN_110[0]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel re-used a source ID (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_105 & ~reset & ~(_GEN_111[0] | same_cycle_resp_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_105 & same_cycle_resp_1 & ~reset
          & io_in_d_bits_size != io_in_c_bits_size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_105 & ~same_cycle_resp_1 & ~reset
          & _GEN_102 != {1'h0, _GEN_112[7:1]}) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_104 & c_first_1 & io_in_c_valid & _GEN_106 & d_release_ack
          & ~(_GEN_76 | _GEN_79) & ~reset & ~(~io_in_d_ready | io_in_c_ready)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ready check\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if ((|c_set_wo_ready) & ~reset
          & c_set_wo_ready == (_GEN_105 ? _GEN_6[2:0] : 3'h0)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' and 'D' concurrent, despite minlatency > 0 (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight_1 == 3'h0 | _plusarg_reader_1_out == 32'h0
              | watchdog_1 < _plusarg_reader_1_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_10 & ~reset & _GEN_113[0]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel re-used a sink ID (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_e_valid & ~reset & ~(_GEN_114[0])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'E' channel acknowledged for nothing inflight (connected at src/main/scala/subsystem/SystemBus.scala:48:96)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    automatic logic b_first_done;
    b_first_done = io_in_b_ready & io_in_b_valid;
    if (reset) begin
      a_first_counter <= 9'h0;
      d_first_counter <= 9'h0;
      b_first_counter <= 9'h0;
      c_first_counter <= 9'h0;
      inflight <= 3'h0;
      inflight_opcodes <= 12'h0;
      inflight_sizes <= 24'h0;
      a_first_counter_1 <= 9'h0;
      d_first_counter_1 <= 9'h0;
      watchdog <= 32'h0;
      inflight_1 <= 3'h0;
      inflight_sizes_1 <= 24'h0;
      c_first_counter_1 <= 9'h0;
      d_first_counter_2 <= 9'h0;
      watchdog_1 <= 32'h0;
      inflight_2 <= 4'h0;
      d_first_counter_3 <= 9'h0;
    end
    else begin
      automatic logic        _GEN_115 = _GEN_2 & d_first_1 & ~d_release_ack;
      automatic logic [46:0] _GEN_116 = 47'hFF << {42'h0, io_in_d_bits_source, 3'h0};
      automatic logic        _GEN_117 = _GEN_2 & d_first_2 & d_release_ack;
      automatic logic [46:0] _GEN_118 = 47'hF << {43'h0, io_in_d_bits_source, 2'h0};
      automatic logic [34:0] _GEN_119 =
        {31'h0, _GEN_5 ? {io_in_a_bits_opcode, 1'h1} : 4'h0}
        << {31'h0, io_in_a_bits_source, 2'h0};
      automatic logic [35:0] _GEN_120 =
        {31'h0, _GEN_5 ? {io_in_a_bits_size, 1'h1} : 5'h0}
        << {31'h0, io_in_a_bits_source, 3'h0};
      automatic logic [35:0] _GEN_121 =
        {31'h0, _GEN_9 ? {io_in_c_bits_size, 1'h1} : 5'h0}
        << {31'h0, io_in_c_bits_source, 3'h0};
      if (_GEN_1) begin
        if (|a_first_counter)
          a_first_counter <= a_first_counter - 9'h1;
        else if (io_in_a_bits_opcode[2])
          a_first_counter <= 9'h0;
        else
          a_first_counter <= ~(_GEN[11:3]);
        if (a_first_1) begin
          if (io_in_a_bits_opcode[2])
            a_first_counter_1 <= 9'h0;
          else
            a_first_counter_1 <= ~(_GEN[11:3]);
        end
        else
          a_first_counter_1 <= a_first_counter_1 - 9'h1;
      end
      if (_GEN_2) begin
        automatic logic [26:0] _GEN_122 = 27'hFFF << io_in_d_bits_size;
        if (|d_first_counter)
          d_first_counter <= d_first_counter - 9'h1;
        else if (io_in_d_bits_opcode[0])
          d_first_counter <= ~(_GEN_122[11:3]);
        else
          d_first_counter <= 9'h0;
        if (d_first_1) begin
          if (io_in_d_bits_opcode[0])
            d_first_counter_1 <= ~(_GEN_122[11:3]);
          else
            d_first_counter_1 <= 9'h0;
        end
        else
          d_first_counter_1 <= d_first_counter_1 - 9'h1;
        if (d_first_2) begin
          if (io_in_d_bits_opcode[0])
            d_first_counter_2 <= ~(_GEN_122[11:3]);
          else
            d_first_counter_2 <= 9'h0;
        end
        else
          d_first_counter_2 <= d_first_counter_2 - 9'h1;
        if (d_first_3) begin
          if (io_in_d_bits_opcode[0])
            d_first_counter_3 <= ~(_GEN_122[11:3]);
          else
            d_first_counter_3 <= 9'h0;
        end
        else
          d_first_counter_3 <= d_first_counter_3 - 9'h1;
      end
      if (b_first_done) begin
        if (|b_first_counter)
          b_first_counter <= b_first_counter - 9'h1;
        else
          b_first_counter <= 9'h0;
      end
      if (_GEN_3) begin
        if (|c_first_counter)
          c_first_counter <= c_first_counter - 9'h1;
        else if (io_in_c_bits_opcode[0])
          c_first_counter <= ~(_GEN_0[11:3]);
        else
          c_first_counter <= 9'h0;
        if (c_first_1) begin
          if (io_in_c_bits_opcode[0])
            c_first_counter_1 <= ~(_GEN_0[11:3]);
          else
            c_first_counter_1 <= 9'h0;
        end
        else
          c_first_counter_1 <= c_first_counter_1 - 9'h1;
      end
      inflight <=
        (inflight | (_GEN_5 ? _GEN_4[2:0] : 3'h0)) & ~(_GEN_115 ? _GEN_6[2:0] : 3'h0);
      inflight_opcodes <=
        (inflight_opcodes | (_GEN_5 ? _GEN_119[11:0] : 12'h0))
        & ~(_GEN_115 ? _GEN_118[11:0] : 12'h0);
      inflight_sizes <=
        (inflight_sizes | (_GEN_5 ? _GEN_120[23:0] : 24'h0))
        & ~(_GEN_115 ? _GEN_116[23:0] : 24'h0);
      if (_GEN_1 | _GEN_2)
        watchdog <= 32'h0;
      else
        watchdog <= watchdog + 32'h1;
      inflight_1 <=
        (inflight_1 | (_GEN_9 ? _GEN_8[2:0] : 3'h0)) & ~(_GEN_117 ? _GEN_6[2:0] : 3'h0);
      inflight_sizes_1 <=
        (inflight_sizes_1 | (_GEN_9 ? _GEN_121[23:0] : 24'h0))
        & ~(_GEN_117 ? _GEN_116[23:0] : 24'h0);
      if (_GEN_3 | _GEN_2)
        watchdog_1 <= 32'h0;
      else
        watchdog_1 <= watchdog_1 + 32'h1;
      inflight_2 <= _GEN_13 & ~(io_in_e_valid ? 4'h1 << _GEN_12 : 4'h0);
    end
    if (_GEN_1 & ~(|a_first_counter)) begin
      opcode <= io_in_a_bits_opcode;
      param <= io_in_a_bits_param;
      size <= io_in_a_bits_size;
      source <= io_in_a_bits_source;
      address <= io_in_a_bits_address;
    end
    if (_GEN_2 & ~(|d_first_counter)) begin
      opcode_1 <= io_in_d_bits_opcode;
      param_1 <= io_in_d_bits_param;
      size_1 <= io_in_d_bits_size;
      source_1 <= io_in_d_bits_source;
      sink <= io_in_d_bits_sink;
      denied <= io_in_d_bits_denied;
    end
    if (b_first_done & ~(|b_first_counter)) begin
      opcode_2 <= 3'h6;
      param_2 <= io_in_b_bits_param;
      size_2 <= 4'h6;
      source_2 <= 2'h0;
      address_1 <= io_in_b_bits_address;
    end
    if (_GEN_3 & ~(|c_first_counter)) begin
      opcode_3 <= io_in_c_bits_opcode;
      param_3 <= io_in_c_bits_param;
      size_3 <= io_in_c_bits_size;
      source_3 <= io_in_c_bits_source;
      address_2 <= io_in_c_bits_address;
    end
  end // always @(posedge)
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader (
    .out (_plusarg_reader_out)
  );
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader_1 (
    .out (_plusarg_reader_1_out)
  );
endmodule

module TLFIFOFixer(
  input         clock,
                reset,
                auto_anon_in_1_a_valid,
  input  [2:0]  auto_anon_in_1_a_bits_opcode,
                auto_anon_in_1_a_bits_param,
  input  [3:0]  auto_anon_in_1_a_bits_size,
  input  [1:0]  auto_anon_in_1_a_bits_source,
  input  [31:0] auto_anon_in_1_a_bits_address,
  input  [7:0]  auto_anon_in_1_a_bits_mask,
  input  [63:0] auto_anon_in_1_a_bits_data,
  input         auto_anon_in_1_a_bits_corrupt,
                auto_anon_in_1_b_ready,
                auto_anon_in_1_c_valid,
  input  [2:0]  auto_anon_in_1_c_bits_opcode,
                auto_anon_in_1_c_bits_param,
  input  [3:0]  auto_anon_in_1_c_bits_size,
  input  [1:0]  auto_anon_in_1_c_bits_source,
  input  [31:0] auto_anon_in_1_c_bits_address,
  input  [63:0] auto_anon_in_1_c_bits_data,
  input         auto_anon_in_1_c_bits_corrupt,
                auto_anon_in_1_d_ready,
                auto_anon_in_1_e_valid,
  input  [1:0]  auto_anon_in_1_e_bits_sink,
  input         auto_anon_in_0_a_valid,
  input  [2:0]  auto_anon_in_0_a_bits_opcode,
                auto_anon_in_0_a_bits_param,
  input  [3:0]  auto_anon_in_0_a_bits_size,
                auto_anon_in_0_a_bits_source,
  input  [31:0] auto_anon_in_0_a_bits_address,
  input         auto_anon_in_0_a_bits_user_amba_prot_bufferable,
                auto_anon_in_0_a_bits_user_amba_prot_modifiable,
                auto_anon_in_0_a_bits_user_amba_prot_readalloc,
                auto_anon_in_0_a_bits_user_amba_prot_writealloc,
                auto_anon_in_0_a_bits_user_amba_prot_privileged,
                auto_anon_in_0_a_bits_user_amba_prot_secure,
                auto_anon_in_0_a_bits_user_amba_prot_fetch,
  input  [7:0]  auto_anon_in_0_a_bits_mask,
  input  [63:0] auto_anon_in_0_a_bits_data,
  input         auto_anon_in_0_a_bits_corrupt,
                auto_anon_in_0_d_ready,
                auto_anon_out_1_a_ready,
                auto_anon_out_1_b_valid,
  input  [1:0]  auto_anon_out_1_b_bits_param,
  input  [31:0] auto_anon_out_1_b_bits_address,
  input         auto_anon_out_1_c_ready,
                auto_anon_out_1_d_valid,
  input  [2:0]  auto_anon_out_1_d_bits_opcode,
  input  [1:0]  auto_anon_out_1_d_bits_param,
  input  [3:0]  auto_anon_out_1_d_bits_size,
  input  [1:0]  auto_anon_out_1_d_bits_source,
                auto_anon_out_1_d_bits_sink,
  input         auto_anon_out_1_d_bits_denied,
  input  [63:0] auto_anon_out_1_d_bits_data,
  input         auto_anon_out_1_d_bits_corrupt,
                auto_anon_out_0_a_ready,
                auto_anon_out_0_d_valid,
  input  [2:0]  auto_anon_out_0_d_bits_opcode,
  input  [1:0]  auto_anon_out_0_d_bits_param,
  input  [3:0]  auto_anon_out_0_d_bits_size,
                auto_anon_out_0_d_bits_source,
  input  [1:0]  auto_anon_out_0_d_bits_sink,
  input         auto_anon_out_0_d_bits_denied,
  input  [63:0] auto_anon_out_0_d_bits_data,
  input         auto_anon_out_0_d_bits_corrupt,
  output        auto_anon_in_1_a_ready,
                auto_anon_in_1_b_valid,
  output [1:0]  auto_anon_in_1_b_bits_param,
  output [31:0] auto_anon_in_1_b_bits_address,
  output        auto_anon_in_1_c_ready,
                auto_anon_in_1_d_valid,
  output [2:0]  auto_anon_in_1_d_bits_opcode,
  output [1:0]  auto_anon_in_1_d_bits_param,
  output [3:0]  auto_anon_in_1_d_bits_size,
  output [1:0]  auto_anon_in_1_d_bits_source,
                auto_anon_in_1_d_bits_sink,
  output        auto_anon_in_1_d_bits_denied,
  output [63:0] auto_anon_in_1_d_bits_data,
  output        auto_anon_in_1_d_bits_corrupt,
                auto_anon_in_0_a_ready,
                auto_anon_in_0_d_valid,
  output [2:0]  auto_anon_in_0_d_bits_opcode,
  output [1:0]  auto_anon_in_0_d_bits_param,
  output [3:0]  auto_anon_in_0_d_bits_size,
                auto_anon_in_0_d_bits_source,
  output [1:0]  auto_anon_in_0_d_bits_sink,
  output        auto_anon_in_0_d_bits_denied,
  output [63:0] auto_anon_in_0_d_bits_data,
  output        auto_anon_in_0_d_bits_corrupt,
                auto_anon_out_1_a_valid,
  output [2:0]  auto_anon_out_1_a_bits_opcode,
                auto_anon_out_1_a_bits_param,
  output [3:0]  auto_anon_out_1_a_bits_size,
  output [1:0]  auto_anon_out_1_a_bits_source,
  output [31:0] auto_anon_out_1_a_bits_address,
  output [7:0]  auto_anon_out_1_a_bits_mask,
  output [63:0] auto_anon_out_1_a_bits_data,
  output        auto_anon_out_1_a_bits_corrupt,
                auto_anon_out_1_b_ready,
                auto_anon_out_1_c_valid,
  output [2:0]  auto_anon_out_1_c_bits_opcode,
                auto_anon_out_1_c_bits_param,
  output [3:0]  auto_anon_out_1_c_bits_size,
  output [1:0]  auto_anon_out_1_c_bits_source,
  output [31:0] auto_anon_out_1_c_bits_address,
  output [63:0] auto_anon_out_1_c_bits_data,
  output        auto_anon_out_1_c_bits_corrupt,
                auto_anon_out_1_d_ready,
                auto_anon_out_1_e_valid,
  output [1:0]  auto_anon_out_1_e_bits_sink,
  output        auto_anon_out_0_a_valid,
  output [2:0]  auto_anon_out_0_a_bits_opcode,
                auto_anon_out_0_a_bits_param,
  output [3:0]  auto_anon_out_0_a_bits_size,
                auto_anon_out_0_a_bits_source,
  output [31:0] auto_anon_out_0_a_bits_address,
  output        auto_anon_out_0_a_bits_user_amba_prot_bufferable,
                auto_anon_out_0_a_bits_user_amba_prot_modifiable,
                auto_anon_out_0_a_bits_user_amba_prot_readalloc,
                auto_anon_out_0_a_bits_user_amba_prot_writealloc,
                auto_anon_out_0_a_bits_user_amba_prot_privileged,
                auto_anon_out_0_a_bits_user_amba_prot_secure,
                auto_anon_out_0_a_bits_user_amba_prot_fetch,
  output [7:0]  auto_anon_out_0_a_bits_mask,
  output [63:0] auto_anon_out_0_a_bits_data,
  output        auto_anon_out_0_a_bits_corrupt,
                auto_anon_out_0_d_ready
);

  wire [1:0] a_id =
    {auto_anon_in_0_a_bits_address[30], ~(auto_anon_in_0_a_bits_address[30])};
  wire       a_noDomain = a_id == 2'h0;
  reg  [8:0] a_first_counter;
  wire       a_first = a_first_counter == 9'h0;
  reg  [8:0] d_first_counter;
  reg        flight_0;
  reg        flight_1;
  reg        flight_2;
  reg        flight_3;
  reg        flight_4;
  reg        flight_5;
  reg        flight_6;
  reg        flight_7;
  reg        flight_8;
  reg        flight_9;
  reg        flight_10;
  reg        flight_11;
  reg        flight_12;
  reg        flight_13;
  reg        flight_14;
  reg        flight_15;
  reg  [1:0] stalls_id;
  reg  [1:0] stalls_id_1;
  wire       _GEN =
    auto_anon_in_0_a_bits_address[31]
    | ~(~(auto_anon_in_0_a_bits_source[3]) & a_first
        & (flight_0 | flight_1 | flight_2 | flight_3 | flight_4 | flight_5 | flight_6
           | flight_7) & (a_noDomain | stalls_id != a_id)
        | auto_anon_in_0_a_bits_source[3] & a_first
        & (flight_8 | flight_9 | flight_10 | flight_11 | flight_12 | flight_13 | flight_14
           | flight_15) & (a_noDomain | stalls_id_1 != a_id));
  wire       anonIn_a_ready = auto_anon_out_0_a_ready & _GEN;
  always @(posedge clock) begin
    automatic logic _GEN_0;
    _GEN_0 = anonIn_a_ready & auto_anon_in_0_a_valid;
    if (reset) begin
      a_first_counter <= 9'h0;
      d_first_counter <= 9'h0;
      flight_0 <= 1'h0;
      flight_1 <= 1'h0;
      flight_2 <= 1'h0;
      flight_3 <= 1'h0;
      flight_4 <= 1'h0;
      flight_5 <= 1'h0;
      flight_6 <= 1'h0;
      flight_7 <= 1'h0;
      flight_8 <= 1'h0;
      flight_9 <= 1'h0;
      flight_10 <= 1'h0;
      flight_11 <= 1'h0;
      flight_12 <= 1'h0;
      flight_13 <= 1'h0;
      flight_14 <= 1'h0;
      flight_15 <= 1'h0;
    end
    else begin
      automatic logic _GEN_1 = auto_anon_in_0_d_ready & auto_anon_out_0_d_valid;
      automatic logic d_first_first;
      automatic logic _GEN_2;
      automatic logic _GEN_3;
      d_first_first = d_first_counter == 9'h0;
      _GEN_2 = a_first & _GEN_0;
      _GEN_3 = d_first_first & auto_anon_out_0_d_bits_opcode != 3'h6 & _GEN_1;
      if (_GEN_0) begin
        if (a_first) begin
          if (auto_anon_in_0_a_bits_opcode[2])
            a_first_counter <= 9'h0;
          else begin
            automatic logic [26:0] _GEN_4 = 27'hFFF << auto_anon_in_0_a_bits_size;
            a_first_counter <= ~(_GEN_4[11:3]);
          end
        end
        else
          a_first_counter <= a_first_counter - 9'h1;
      end
      if (_GEN_1) begin
        if (d_first_first) begin
          if (auto_anon_out_0_d_bits_opcode[0]) begin
            automatic logic [26:0] _GEN_5 = 27'hFFF << auto_anon_out_0_d_bits_size;
            d_first_counter <= ~(_GEN_5[11:3]);
          end
          else
            d_first_counter <= 9'h0;
        end
        else
          d_first_counter <= d_first_counter - 9'h1;
      end
      flight_0 <=
        ~(_GEN_3 & auto_anon_out_0_d_bits_source == 4'h0)
        & (_GEN_2 & auto_anon_in_0_a_bits_source == 4'h0
             ? ~(auto_anon_in_0_a_bits_address[31])
             : flight_0);
      flight_1 <=
        ~(_GEN_3 & auto_anon_out_0_d_bits_source == 4'h1)
        & (_GEN_2 & auto_anon_in_0_a_bits_source == 4'h1
             ? ~(auto_anon_in_0_a_bits_address[31])
             : flight_1);
      flight_2 <=
        ~(_GEN_3 & auto_anon_out_0_d_bits_source == 4'h2)
        & (_GEN_2 & auto_anon_in_0_a_bits_source == 4'h2
             ? ~(auto_anon_in_0_a_bits_address[31])
             : flight_2);
      flight_3 <=
        ~(_GEN_3 & auto_anon_out_0_d_bits_source == 4'h3)
        & (_GEN_2 & auto_anon_in_0_a_bits_source == 4'h3
             ? ~(auto_anon_in_0_a_bits_address[31])
             : flight_3);
      flight_4 <=
        ~(_GEN_3 & auto_anon_out_0_d_bits_source == 4'h4)
        & (_GEN_2 & auto_anon_in_0_a_bits_source == 4'h4
             ? ~(auto_anon_in_0_a_bits_address[31])
             : flight_4);
      flight_5 <=
        ~(_GEN_3 & auto_anon_out_0_d_bits_source == 4'h5)
        & (_GEN_2 & auto_anon_in_0_a_bits_source == 4'h5
             ? ~(auto_anon_in_0_a_bits_address[31])
             : flight_5);
      flight_6 <=
        ~(_GEN_3 & auto_anon_out_0_d_bits_source == 4'h6)
        & (_GEN_2 & auto_anon_in_0_a_bits_source == 4'h6
             ? ~(auto_anon_in_0_a_bits_address[31])
             : flight_6);
      flight_7 <=
        ~(_GEN_3 & auto_anon_out_0_d_bits_source == 4'h7)
        & (_GEN_2 & auto_anon_in_0_a_bits_source == 4'h7
             ? ~(auto_anon_in_0_a_bits_address[31])
             : flight_7);
      flight_8 <=
        ~(_GEN_3 & auto_anon_out_0_d_bits_source == 4'h8)
        & (_GEN_2 & auto_anon_in_0_a_bits_source == 4'h8
             ? ~(auto_anon_in_0_a_bits_address[31])
             : flight_8);
      flight_9 <=
        ~(_GEN_3 & auto_anon_out_0_d_bits_source == 4'h9)
        & (_GEN_2 & auto_anon_in_0_a_bits_source == 4'h9
             ? ~(auto_anon_in_0_a_bits_address[31])
             : flight_9);
      flight_10 <=
        ~(_GEN_3 & auto_anon_out_0_d_bits_source == 4'hA)
        & (_GEN_2 & auto_anon_in_0_a_bits_source == 4'hA
             ? ~(auto_anon_in_0_a_bits_address[31])
             : flight_10);
      flight_11 <=
        ~(_GEN_3 & auto_anon_out_0_d_bits_source == 4'hB)
        & (_GEN_2 & auto_anon_in_0_a_bits_source == 4'hB
             ? ~(auto_anon_in_0_a_bits_address[31])
             : flight_11);
      flight_12 <=
        ~(_GEN_3 & auto_anon_out_0_d_bits_source == 4'hC)
        & (_GEN_2 & auto_anon_in_0_a_bits_source == 4'hC
             ? ~(auto_anon_in_0_a_bits_address[31])
             : flight_12);
      flight_13 <=
        ~(_GEN_3 & auto_anon_out_0_d_bits_source == 4'hD)
        & (_GEN_2 & auto_anon_in_0_a_bits_source == 4'hD
             ? ~(auto_anon_in_0_a_bits_address[31])
             : flight_13);
      flight_14 <=
        ~(_GEN_3 & auto_anon_out_0_d_bits_source == 4'hE)
        & (_GEN_2 & auto_anon_in_0_a_bits_source == 4'hE
             ? ~(auto_anon_in_0_a_bits_address[31])
             : flight_14);
      flight_15 <=
        ~(_GEN_3 & (&auto_anon_out_0_d_bits_source))
        & (_GEN_2 & (&auto_anon_in_0_a_bits_source)
             ? ~(auto_anon_in_0_a_bits_address[31])
             : flight_15);
    end
    if (_GEN_0 & ~(auto_anon_in_0_a_bits_source[3])
        & ~(auto_anon_in_0_a_bits_address[31]))
      stalls_id <= a_id;
    if (_GEN_0 & auto_anon_in_0_a_bits_source[3] & ~(auto_anon_in_0_a_bits_address[31]))
      stalls_id_1 <= a_id;
  end // always @(posedge)
  TLMonitor_2 monitor (
    .clock                (clock),
    .reset                (reset),
    .io_in_a_ready        (anonIn_a_ready),
    .io_in_a_valid        (auto_anon_in_0_a_valid),
    .io_in_a_bits_opcode  (auto_anon_in_0_a_bits_opcode),
    .io_in_a_bits_param   (auto_anon_in_0_a_bits_param),
    .io_in_a_bits_size    (auto_anon_in_0_a_bits_size),
    .io_in_a_bits_source  (auto_anon_in_0_a_bits_source),
    .io_in_a_bits_address (auto_anon_in_0_a_bits_address),
    .io_in_a_bits_mask    (auto_anon_in_0_a_bits_mask),
    .io_in_a_bits_corrupt (auto_anon_in_0_a_bits_corrupt),
    .io_in_d_ready        (auto_anon_in_0_d_ready),
    .io_in_d_valid        (auto_anon_out_0_d_valid),
    .io_in_d_bits_opcode  (auto_anon_out_0_d_bits_opcode),
    .io_in_d_bits_param   (auto_anon_out_0_d_bits_param),
    .io_in_d_bits_size    (auto_anon_out_0_d_bits_size),
    .io_in_d_bits_source  (auto_anon_out_0_d_bits_source),
    .io_in_d_bits_sink    (auto_anon_out_0_d_bits_sink),
    .io_in_d_bits_denied  (auto_anon_out_0_d_bits_denied),
    .io_in_d_bits_corrupt (auto_anon_out_0_d_bits_corrupt)
  );
  TLMonitor_3 monitor_1 (
    .clock                (clock),
    .reset                (reset),
    .io_in_a_ready        (auto_anon_out_1_a_ready),
    .io_in_a_valid        (auto_anon_in_1_a_valid),
    .io_in_a_bits_opcode  (auto_anon_in_1_a_bits_opcode),
    .io_in_a_bits_param   (auto_anon_in_1_a_bits_param),
    .io_in_a_bits_size    (auto_anon_in_1_a_bits_size),
    .io_in_a_bits_source  (auto_anon_in_1_a_bits_source),
    .io_in_a_bits_address (auto_anon_in_1_a_bits_address),
    .io_in_a_bits_mask    (auto_anon_in_1_a_bits_mask),
    .io_in_a_bits_corrupt (auto_anon_in_1_a_bits_corrupt),
    .io_in_b_ready        (auto_anon_in_1_b_ready),
    .io_in_b_valid        (auto_anon_out_1_b_valid),
    .io_in_b_bits_param   (auto_anon_out_1_b_bits_param),
    .io_in_b_bits_address (auto_anon_out_1_b_bits_address),
    .io_in_c_ready        (auto_anon_out_1_c_ready),
    .io_in_c_valid        (auto_anon_in_1_c_valid),
    .io_in_c_bits_opcode  (auto_anon_in_1_c_bits_opcode),
    .io_in_c_bits_param   (auto_anon_in_1_c_bits_param),
    .io_in_c_bits_size    (auto_anon_in_1_c_bits_size),
    .io_in_c_bits_source  (auto_anon_in_1_c_bits_source),
    .io_in_c_bits_address (auto_anon_in_1_c_bits_address),
    .io_in_c_bits_corrupt (auto_anon_in_1_c_bits_corrupt),
    .io_in_d_ready        (auto_anon_in_1_d_ready),
    .io_in_d_valid        (auto_anon_out_1_d_valid),
    .io_in_d_bits_opcode  (auto_anon_out_1_d_bits_opcode),
    .io_in_d_bits_param   (auto_anon_out_1_d_bits_param),
    .io_in_d_bits_size    (auto_anon_out_1_d_bits_size),
    .io_in_d_bits_source  (auto_anon_out_1_d_bits_source),
    .io_in_d_bits_sink    (auto_anon_out_1_d_bits_sink),
    .io_in_d_bits_denied  (auto_anon_out_1_d_bits_denied),
    .io_in_d_bits_corrupt (auto_anon_out_1_d_bits_corrupt),
    .io_in_e_valid        (auto_anon_in_1_e_valid),
    .io_in_e_bits_sink    (auto_anon_in_1_e_bits_sink)
  );
  assign auto_anon_in_1_a_ready = auto_anon_out_1_a_ready;
  assign auto_anon_in_1_b_valid = auto_anon_out_1_b_valid;
  assign auto_anon_in_1_b_bits_param = auto_anon_out_1_b_bits_param;
  assign auto_anon_in_1_b_bits_address = auto_anon_out_1_b_bits_address;
  assign auto_anon_in_1_c_ready = auto_anon_out_1_c_ready;
  assign auto_anon_in_1_d_valid = auto_anon_out_1_d_valid;
  assign auto_anon_in_1_d_bits_opcode = auto_anon_out_1_d_bits_opcode;
  assign auto_anon_in_1_d_bits_param = auto_anon_out_1_d_bits_param;
  assign auto_anon_in_1_d_bits_size = auto_anon_out_1_d_bits_size;
  assign auto_anon_in_1_d_bits_source = auto_anon_out_1_d_bits_source;
  assign auto_anon_in_1_d_bits_sink = auto_anon_out_1_d_bits_sink;
  assign auto_anon_in_1_d_bits_denied = auto_anon_out_1_d_bits_denied;
  assign auto_anon_in_1_d_bits_data = auto_anon_out_1_d_bits_data;
  assign auto_anon_in_1_d_bits_corrupt = auto_anon_out_1_d_bits_corrupt;
  assign auto_anon_in_0_a_ready = anonIn_a_ready;
  assign auto_anon_in_0_d_valid = auto_anon_out_0_d_valid;
  assign auto_anon_in_0_d_bits_opcode = auto_anon_out_0_d_bits_opcode;
  assign auto_anon_in_0_d_bits_param = auto_anon_out_0_d_bits_param;
  assign auto_anon_in_0_d_bits_size = auto_anon_out_0_d_bits_size;
  assign auto_anon_in_0_d_bits_source = auto_anon_out_0_d_bits_source;
  assign auto_anon_in_0_d_bits_sink = auto_anon_out_0_d_bits_sink;
  assign auto_anon_in_0_d_bits_denied = auto_anon_out_0_d_bits_denied;
  assign auto_anon_in_0_d_bits_data = auto_anon_out_0_d_bits_data;
  assign auto_anon_in_0_d_bits_corrupt = auto_anon_out_0_d_bits_corrupt;
  assign auto_anon_out_1_a_valid = auto_anon_in_1_a_valid;
  assign auto_anon_out_1_a_bits_opcode = auto_anon_in_1_a_bits_opcode;
  assign auto_anon_out_1_a_bits_param = auto_anon_in_1_a_bits_param;
  assign auto_anon_out_1_a_bits_size = auto_anon_in_1_a_bits_size;
  assign auto_anon_out_1_a_bits_source = auto_anon_in_1_a_bits_source;
  assign auto_anon_out_1_a_bits_address = auto_anon_in_1_a_bits_address;
  assign auto_anon_out_1_a_bits_mask = auto_anon_in_1_a_bits_mask;
  assign auto_anon_out_1_a_bits_data = auto_anon_in_1_a_bits_data;
  assign auto_anon_out_1_a_bits_corrupt = auto_anon_in_1_a_bits_corrupt;
  assign auto_anon_out_1_b_ready = auto_anon_in_1_b_ready;
  assign auto_anon_out_1_c_valid = auto_anon_in_1_c_valid;
  assign auto_anon_out_1_c_bits_opcode = auto_anon_in_1_c_bits_opcode;
  assign auto_anon_out_1_c_bits_param = auto_anon_in_1_c_bits_param;
  assign auto_anon_out_1_c_bits_size = auto_anon_in_1_c_bits_size;
  assign auto_anon_out_1_c_bits_source = auto_anon_in_1_c_bits_source;
  assign auto_anon_out_1_c_bits_address = auto_anon_in_1_c_bits_address;
  assign auto_anon_out_1_c_bits_data = auto_anon_in_1_c_bits_data;
  assign auto_anon_out_1_c_bits_corrupt = auto_anon_in_1_c_bits_corrupt;
  assign auto_anon_out_1_d_ready = auto_anon_in_1_d_ready;
  assign auto_anon_out_1_e_valid = auto_anon_in_1_e_valid;
  assign auto_anon_out_1_e_bits_sink = auto_anon_in_1_e_bits_sink;
  assign auto_anon_out_0_a_valid = auto_anon_in_0_a_valid & _GEN;
  assign auto_anon_out_0_a_bits_opcode = auto_anon_in_0_a_bits_opcode;
  assign auto_anon_out_0_a_bits_param = auto_anon_in_0_a_bits_param;
  assign auto_anon_out_0_a_bits_size = auto_anon_in_0_a_bits_size;
  assign auto_anon_out_0_a_bits_source = auto_anon_in_0_a_bits_source;
  assign auto_anon_out_0_a_bits_address = auto_anon_in_0_a_bits_address;
  assign auto_anon_out_0_a_bits_user_amba_prot_bufferable =
    auto_anon_in_0_a_bits_user_amba_prot_bufferable;
  assign auto_anon_out_0_a_bits_user_amba_prot_modifiable =
    auto_anon_in_0_a_bits_user_amba_prot_modifiable;
  assign auto_anon_out_0_a_bits_user_amba_prot_readalloc =
    auto_anon_in_0_a_bits_user_amba_prot_readalloc;
  assign auto_anon_out_0_a_bits_user_amba_prot_writealloc =
    auto_anon_in_0_a_bits_user_amba_prot_writealloc;
  assign auto_anon_out_0_a_bits_user_amba_prot_privileged =
    auto_anon_in_0_a_bits_user_amba_prot_privileged;
  assign auto_anon_out_0_a_bits_user_amba_prot_secure =
    auto_anon_in_0_a_bits_user_amba_prot_secure;
  assign auto_anon_out_0_a_bits_user_amba_prot_fetch =
    auto_anon_in_0_a_bits_user_amba_prot_fetch;
  assign auto_anon_out_0_a_bits_mask = auto_anon_in_0_a_bits_mask;
  assign auto_anon_out_0_a_bits_data = auto_anon_in_0_a_bits_data;
  assign auto_anon_out_0_a_bits_corrupt = auto_anon_in_0_a_bits_corrupt;
  assign auto_anon_out_0_d_ready = auto_anon_in_0_d_ready;
endmodule

module Queue2_AXI4BundleAW(
  input         clock,
                reset,
                io_enq_valid,
  input  [3:0]  io_enq_bits_id,
  input  [30:0] io_enq_bits_addr,
  input  [7:0]  io_enq_bits_len,
  input  [2:0]  io_enq_bits_size,
  input  [1:0]  io_enq_bits_burst,
  input         io_enq_bits_lock,
  input  [3:0]  io_enq_bits_cache,
  input  [2:0]  io_enq_bits_prot,
  input  [3:0]  io_enq_bits_qos,
  input         io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
  output [3:0]  io_deq_bits_id,
  output [30:0] io_deq_bits_addr,
  output [7:0]  io_deq_bits_len,
  output [2:0]  io_deq_bits_size,
  output [1:0]  io_deq_bits_burst,
  output        io_deq_bits_lock,
  output [3:0]  io_deq_bits_cache,
  output [2:0]  io_deq_bits_prot,
  output [3:0]  io_deq_bits_qos
);

  wire [59:0] _ram_ext_R0_data;
  reg         wrap;
  reg         wrap_1;
  reg         maybe_full;
  wire        ptr_match = wrap == wrap_1;
  wire        empty = ptr_match & ~maybe_full;
  wire        full = ptr_match & maybe_full;
  wire        do_enq = ~full & io_enq_valid;
  always @(posedge clock) begin
    if (reset) begin
      wrap <= 1'h0;
      wrap_1 <= 1'h0;
      maybe_full <= 1'h0;
    end
    else begin
      automatic logic do_deq = io_deq_ready & ~empty;
      if (do_enq)
        wrap <= wrap - 1'h1;
      if (do_deq)
        wrap_1 <= wrap_1 - 1'h1;
      if (do_enq != do_deq)
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_combMem_4 ram_ext (
    .R0_addr (wrap_1),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (wrap),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data
      ({io_enq_bits_qos,
        io_enq_bits_prot,
        io_enq_bits_cache,
        io_enq_bits_lock,
        io_enq_bits_burst,
        io_enq_bits_size,
        io_enq_bits_len,
        io_enq_bits_addr,
        io_enq_bits_id}),
    .R0_data (_ram_ext_R0_data)
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
  assign io_deq_bits_id = _ram_ext_R0_data[3:0];
  assign io_deq_bits_addr = _ram_ext_R0_data[34:4];
  assign io_deq_bits_len = _ram_ext_R0_data[42:35];
  assign io_deq_bits_size = _ram_ext_R0_data[45:43];
  assign io_deq_bits_burst = _ram_ext_R0_data[47:46];
  assign io_deq_bits_lock = _ram_ext_R0_data[48];
  assign io_deq_bits_cache = _ram_ext_R0_data[52:49];
  assign io_deq_bits_prot = _ram_ext_R0_data[55:53];
  assign io_deq_bits_qos = _ram_ext_R0_data[59:56];
endmodule

module Queue2_AXI4BundleW(
  input         clock,
                reset,
                io_enq_valid,
  input  [63:0] io_enq_bits_data,
  input  [7:0]  io_enq_bits_strb,
  input         io_enq_bits_last,
                io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
  output [63:0] io_deq_bits_data,
  output [7:0]  io_deq_bits_strb,
  output        io_deq_bits_last
);

  wire [72:0] _ram_ext_R0_data;
  reg         wrap;
  reg         wrap_1;
  reg         maybe_full;
  wire        ptr_match = wrap == wrap_1;
  wire        empty = ptr_match & ~maybe_full;
  wire        full = ptr_match & maybe_full;
  wire        do_enq = ~full & io_enq_valid;
  always @(posedge clock) begin
    if (reset) begin
      wrap <= 1'h0;
      wrap_1 <= 1'h0;
      maybe_full <= 1'h0;
    end
    else begin
      automatic logic do_deq = io_deq_ready & ~empty;
      if (do_enq)
        wrap <= wrap - 1'h1;
      if (do_deq)
        wrap_1 <= wrap_1 - 1'h1;
      if (do_enq != do_deq)
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_combMem_10 ram_ext (
    .R0_addr (wrap_1),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (wrap),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data ({io_enq_bits_last, io_enq_bits_strb, io_enq_bits_data}),
    .R0_data (_ram_ext_R0_data)
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
  assign io_deq_bits_data = _ram_ext_R0_data[63:0];
  assign io_deq_bits_strb = _ram_ext_R0_data[71:64];
  assign io_deq_bits_last = _ram_ext_R0_data[72];
endmodule

module Queue2_AXI4BundleB(
  input        clock,
               reset,
               io_enq_valid,
  input  [3:0] io_enq_bits_id,
  input  [1:0] io_enq_bits_resp,
  input        io_deq_ready,
  output       io_enq_ready,
               io_deq_valid,
  output [3:0] io_deq_bits_id,
  output [1:0] io_deq_bits_resp
);

  wire [5:0] _ram_ext_R0_data;
  reg        wrap;
  reg        wrap_1;
  reg        maybe_full;
  wire       ptr_match = wrap == wrap_1;
  wire       empty = ptr_match & ~maybe_full;
  wire       full = ptr_match & maybe_full;
  wire       do_enq = ~full & io_enq_valid;
  always @(posedge clock) begin
    if (reset) begin
      wrap <= 1'h0;
      wrap_1 <= 1'h0;
      maybe_full <= 1'h0;
    end
    else begin
      automatic logic do_deq = io_deq_ready & ~empty;
      if (do_enq)
        wrap <= wrap - 1'h1;
      if (do_deq)
        wrap_1 <= wrap_1 - 1'h1;
      if (do_enq != do_deq)
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_combMem ram_ext (
    .R0_addr (wrap_1),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (wrap),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data ({io_enq_bits_resp, io_enq_bits_id}),
    .R0_data (_ram_ext_R0_data)
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
  assign io_deq_bits_id = _ram_ext_R0_data[3:0];
  assign io_deq_bits_resp = _ram_ext_R0_data[5:4];
endmodule

module Queue2_AXI4BundleR(
  input         clock,
                reset,
                io_enq_valid,
  input  [3:0]  io_enq_bits_id,
  input  [63:0] io_enq_bits_data,
  input  [1:0]  io_enq_bits_resp,
  input         io_enq_bits_last,
                io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
  output [3:0]  io_deq_bits_id,
  output [63:0] io_deq_bits_data,
  output [1:0]  io_deq_bits_resp,
  output        io_deq_bits_last
);

  wire [70:0] _ram_ext_R0_data;
  reg         wrap;
  reg         wrap_1;
  reg         maybe_full;
  wire        ptr_match = wrap == wrap_1;
  wire        empty = ptr_match & ~maybe_full;
  wire        full = ptr_match & maybe_full;
  wire        do_enq = ~full & io_enq_valid;
  always @(posedge clock) begin
    if (reset) begin
      wrap <= 1'h0;
      wrap_1 <= 1'h0;
      maybe_full <= 1'h0;
    end
    else begin
      automatic logic do_deq = io_deq_ready & ~empty;
      if (do_enq)
        wrap <= wrap - 1'h1;
      if (do_deq)
        wrap_1 <= wrap_1 - 1'h1;
      if (do_enq != do_deq)
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_combMem_7 ram_ext (
    .R0_addr (wrap_1),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (wrap),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data ({io_enq_bits_last, io_enq_bits_resp, io_enq_bits_data, io_enq_bits_id}),
    .R0_data (_ram_ext_R0_data)
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
  assign io_deq_bits_id = _ram_ext_R0_data[3:0];
  assign io_deq_bits_data = _ram_ext_R0_data[67:4];
  assign io_deq_bits_resp = _ram_ext_R0_data[69:68];
  assign io_deq_bits_last = _ram_ext_R0_data[70];
endmodule

module AXI4Buffer(
  input         clock,
                reset,
                auto_in_aw_valid,
  input  [3:0]  auto_in_aw_bits_id,
  input  [30:0] auto_in_aw_bits_addr,
  input  [7:0]  auto_in_aw_bits_len,
  input  [2:0]  auto_in_aw_bits_size,
  input  [1:0]  auto_in_aw_bits_burst,
  input         auto_in_aw_bits_lock,
  input  [3:0]  auto_in_aw_bits_cache,
  input  [2:0]  auto_in_aw_bits_prot,
  input  [3:0]  auto_in_aw_bits_qos,
  input         auto_in_w_valid,
  input  [63:0] auto_in_w_bits_data,
  input  [7:0]  auto_in_w_bits_strb,
  input         auto_in_w_bits_last,
                auto_in_b_ready,
                auto_in_ar_valid,
  input  [3:0]  auto_in_ar_bits_id,
  input  [30:0] auto_in_ar_bits_addr,
  input  [7:0]  auto_in_ar_bits_len,
  input  [2:0]  auto_in_ar_bits_size,
  input  [1:0]  auto_in_ar_bits_burst,
  input         auto_in_ar_bits_lock,
  input  [3:0]  auto_in_ar_bits_cache,
  input  [2:0]  auto_in_ar_bits_prot,
  input  [3:0]  auto_in_ar_bits_qos,
  input         auto_in_r_ready,
                auto_out_aw_ready,
                auto_out_w_ready,
                auto_out_b_valid,
  input  [3:0]  auto_out_b_bits_id,
  input  [1:0]  auto_out_b_bits_resp,
  input         auto_out_ar_ready,
                auto_out_r_valid,
  input  [3:0]  auto_out_r_bits_id,
  input  [63:0] auto_out_r_bits_data,
  input  [1:0]  auto_out_r_bits_resp,
  input         auto_out_r_bits_last,
  output        auto_in_aw_ready,
                auto_in_w_ready,
                auto_in_b_valid,
  output [3:0]  auto_in_b_bits_id,
  output [1:0]  auto_in_b_bits_resp,
  output        auto_in_ar_ready,
                auto_in_r_valid,
  output [3:0]  auto_in_r_bits_id,
  output [63:0] auto_in_r_bits_data,
  output [1:0]  auto_in_r_bits_resp,
  output        auto_in_r_bits_last,
                auto_out_aw_valid,
  output [3:0]  auto_out_aw_bits_id,
  output [30:0] auto_out_aw_bits_addr,
  output [7:0]  auto_out_aw_bits_len,
  output [2:0]  auto_out_aw_bits_size,
  output [1:0]  auto_out_aw_bits_burst,
  output        auto_out_aw_bits_lock,
  output [3:0]  auto_out_aw_bits_cache,
  output [2:0]  auto_out_aw_bits_prot,
  output [3:0]  auto_out_aw_bits_qos,
  output        auto_out_w_valid,
  output [63:0] auto_out_w_bits_data,
  output [7:0]  auto_out_w_bits_strb,
  output        auto_out_w_bits_last,
                auto_out_b_ready,
                auto_out_ar_valid,
  output [3:0]  auto_out_ar_bits_id,
  output [30:0] auto_out_ar_bits_addr,
  output [7:0]  auto_out_ar_bits_len,
  output [2:0]  auto_out_ar_bits_size,
  output [1:0]  auto_out_ar_bits_burst,
  output        auto_out_ar_bits_lock,
  output [3:0]  auto_out_ar_bits_cache,
  output [2:0]  auto_out_ar_bits_prot,
  output [3:0]  auto_out_ar_bits_qos,
  output        auto_out_r_ready
);

  Queue2_AXI4BundleAW nodeOut_aw_deq_q (
    .clock             (clock),
    .reset             (reset),
    .io_enq_valid      (auto_in_aw_valid),
    .io_enq_bits_id    (auto_in_aw_bits_id),
    .io_enq_bits_addr  (auto_in_aw_bits_addr),
    .io_enq_bits_len   (auto_in_aw_bits_len),
    .io_enq_bits_size  (auto_in_aw_bits_size),
    .io_enq_bits_burst (auto_in_aw_bits_burst),
    .io_enq_bits_lock  (auto_in_aw_bits_lock),
    .io_enq_bits_cache (auto_in_aw_bits_cache),
    .io_enq_bits_prot  (auto_in_aw_bits_prot),
    .io_enq_bits_qos   (auto_in_aw_bits_qos),
    .io_deq_ready      (auto_out_aw_ready),
    .io_enq_ready      (auto_in_aw_ready),
    .io_deq_valid      (auto_out_aw_valid),
    .io_deq_bits_id    (auto_out_aw_bits_id),
    .io_deq_bits_addr  (auto_out_aw_bits_addr),
    .io_deq_bits_len   (auto_out_aw_bits_len),
    .io_deq_bits_size  (auto_out_aw_bits_size),
    .io_deq_bits_burst (auto_out_aw_bits_burst),
    .io_deq_bits_lock  (auto_out_aw_bits_lock),
    .io_deq_bits_cache (auto_out_aw_bits_cache),
    .io_deq_bits_prot  (auto_out_aw_bits_prot),
    .io_deq_bits_qos   (auto_out_aw_bits_qos)
  );
  Queue2_AXI4BundleW nodeOut_w_deq_q (
    .clock            (clock),
    .reset            (reset),
    .io_enq_valid     (auto_in_w_valid),
    .io_enq_bits_data (auto_in_w_bits_data),
    .io_enq_bits_strb (auto_in_w_bits_strb),
    .io_enq_bits_last (auto_in_w_bits_last),
    .io_deq_ready     (auto_out_w_ready),
    .io_enq_ready     (auto_in_w_ready),
    .io_deq_valid     (auto_out_w_valid),
    .io_deq_bits_data (auto_out_w_bits_data),
    .io_deq_bits_strb (auto_out_w_bits_strb),
    .io_deq_bits_last (auto_out_w_bits_last)
  );
  Queue2_AXI4BundleB nodeIn_b_deq_q (
    .clock            (clock),
    .reset            (reset),
    .io_enq_valid     (auto_out_b_valid),
    .io_enq_bits_id   (auto_out_b_bits_id),
    .io_enq_bits_resp (auto_out_b_bits_resp),
    .io_deq_ready     (auto_in_b_ready),
    .io_enq_ready     (auto_out_b_ready),
    .io_deq_valid     (auto_in_b_valid),
    .io_deq_bits_id   (auto_in_b_bits_id),
    .io_deq_bits_resp (auto_in_b_bits_resp)
  );
  Queue2_AXI4BundleAW nodeOut_ar_deq_q (
    .clock             (clock),
    .reset             (reset),
    .io_enq_valid      (auto_in_ar_valid),
    .io_enq_bits_id    (auto_in_ar_bits_id),
    .io_enq_bits_addr  (auto_in_ar_bits_addr),
    .io_enq_bits_len   (auto_in_ar_bits_len),
    .io_enq_bits_size  (auto_in_ar_bits_size),
    .io_enq_bits_burst (auto_in_ar_bits_burst),
    .io_enq_bits_lock  (auto_in_ar_bits_lock),
    .io_enq_bits_cache (auto_in_ar_bits_cache),
    .io_enq_bits_prot  (auto_in_ar_bits_prot),
    .io_enq_bits_qos   (auto_in_ar_bits_qos),
    .io_deq_ready      (auto_out_ar_ready),
    .io_enq_ready      (auto_in_ar_ready),
    .io_deq_valid      (auto_out_ar_valid),
    .io_deq_bits_id    (auto_out_ar_bits_id),
    .io_deq_bits_addr  (auto_out_ar_bits_addr),
    .io_deq_bits_len   (auto_out_ar_bits_len),
    .io_deq_bits_size  (auto_out_ar_bits_size),
    .io_deq_bits_burst (auto_out_ar_bits_burst),
    .io_deq_bits_lock  (auto_out_ar_bits_lock),
    .io_deq_bits_cache (auto_out_ar_bits_cache),
    .io_deq_bits_prot  (auto_out_ar_bits_prot),
    .io_deq_bits_qos   (auto_out_ar_bits_qos)
  );
  Queue2_AXI4BundleR nodeIn_r_deq_q (
    .clock            (clock),
    .reset            (reset),
    .io_enq_valid     (auto_out_r_valid),
    .io_enq_bits_id   (auto_out_r_bits_id),
    .io_enq_bits_data (auto_out_r_bits_data),
    .io_enq_bits_resp (auto_out_r_bits_resp),
    .io_enq_bits_last (auto_out_r_bits_last),
    .io_deq_ready     (auto_in_r_ready),
    .io_enq_ready     (auto_out_r_ready),
    .io_deq_valid     (auto_in_r_valid),
    .io_deq_bits_id   (auto_in_r_bits_id),
    .io_deq_bits_data (auto_in_r_bits_data),
    .io_deq_bits_resp (auto_in_r_bits_resp),
    .io_deq_bits_last (auto_in_r_bits_last)
  );
endmodule

module Queue1_BundleMap(
  input        clock,
               reset,
               io_enq_valid,
  input  [3:0] io_enq_bits_tl_state_size,
  input  [4:0] io_enq_bits_tl_state_source,
  input        io_deq_ready,
  output       io_enq_ready,
               io_deq_valid,
  output [3:0] io_deq_bits_tl_state_size,
  output [4:0] io_deq_bits_tl_state_source
);

  reg [8:0] ram;
  reg       full;
  always @(posedge clock) begin
    automatic logic do_enq;
    do_enq = ~full & io_enq_valid;
    if (do_enq)
      ram <= {io_enq_bits_tl_state_source, io_enq_bits_tl_state_size};
    if (reset)
      full <= 1'h0;
    else if (do_enq != (io_deq_ready & full))
      full <= do_enq;
  end // always @(posedge)
  assign io_enq_ready = ~full;
  assign io_deq_valid = full;
  assign io_deq_bits_tl_state_size = ram[3:0];
  assign io_deq_bits_tl_state_source = ram[8:4];
endmodule

module Queue8_BundleMap(
  input        clock,
               reset,
               io_enq_valid,
  input  [3:0] io_enq_bits_tl_state_size,
  input  [4:0] io_enq_bits_tl_state_source,
  input        io_deq_ready,
  output       io_enq_ready,
               io_deq_valid,
  output [3:0] io_deq_bits_tl_state_size,
  output [4:0] io_deq_bits_tl_state_source
);

  wire [8:0] _ram_ext_R0_data;
  reg  [2:0] enq_ptr_value;
  reg  [2:0] deq_ptr_value;
  reg        maybe_full;
  wire       ptr_match = enq_ptr_value == deq_ptr_value;
  wire       empty = ptr_match & ~maybe_full;
  wire       full = ptr_match & maybe_full;
  wire       do_enq = ~full & io_enq_valid;
  always @(posedge clock) begin
    if (reset) begin
      enq_ptr_value <= 3'h0;
      deq_ptr_value <= 3'h0;
      maybe_full <= 1'h0;
    end
    else begin
      automatic logic do_deq = io_deq_ready & ~empty;
      if (do_enq)
        enq_ptr_value <= enq_ptr_value + 3'h1;
      if (do_deq)
        deq_ptr_value <= deq_ptr_value + 3'h1;
      if (do_enq != do_deq)
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_combMem_2 ram_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data ({io_enq_bits_tl_state_source, io_enq_bits_tl_state_size}),
    .R0_data (_ram_ext_R0_data)
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
  assign io_deq_bits_tl_state_size = _ram_ext_R0_data[3:0];
  assign io_deq_bits_tl_state_source = _ram_ext_R0_data[8:4];
endmodule

module AXI4UserYanker(
  input         clock,
                reset,
                auto_in_aw_valid,
  input  [3:0]  auto_in_aw_bits_id,
  input  [30:0] auto_in_aw_bits_addr,
  input  [7:0]  auto_in_aw_bits_len,
  input  [2:0]  auto_in_aw_bits_size,
  input  [1:0]  auto_in_aw_bits_burst,
  input         auto_in_aw_bits_lock,
  input  [3:0]  auto_in_aw_bits_cache,
  input  [2:0]  auto_in_aw_bits_prot,
  input  [3:0]  auto_in_aw_bits_qos,
                auto_in_aw_bits_echo_tl_state_size,
  input  [4:0]  auto_in_aw_bits_echo_tl_state_source,
  input         auto_in_w_valid,
  input  [63:0] auto_in_w_bits_data,
  input  [7:0]  auto_in_w_bits_strb,
  input         auto_in_w_bits_last,
                auto_in_b_ready,
                auto_in_ar_valid,
  input  [3:0]  auto_in_ar_bits_id,
  input  [30:0] auto_in_ar_bits_addr,
  input  [7:0]  auto_in_ar_bits_len,
  input  [2:0]  auto_in_ar_bits_size,
  input  [1:0]  auto_in_ar_bits_burst,
  input         auto_in_ar_bits_lock,
  input  [3:0]  auto_in_ar_bits_cache,
  input  [2:0]  auto_in_ar_bits_prot,
  input  [3:0]  auto_in_ar_bits_qos,
                auto_in_ar_bits_echo_tl_state_size,
  input  [4:0]  auto_in_ar_bits_echo_tl_state_source,
  input         auto_in_r_ready,
                auto_out_aw_ready,
                auto_out_w_ready,
                auto_out_b_valid,
  input  [3:0]  auto_out_b_bits_id,
  input  [1:0]  auto_out_b_bits_resp,
  input         auto_out_ar_ready,
                auto_out_r_valid,
  input  [3:0]  auto_out_r_bits_id,
  input  [63:0] auto_out_r_bits_data,
  input  [1:0]  auto_out_r_bits_resp,
  input         auto_out_r_bits_last,
  output        auto_in_aw_ready,
                auto_in_w_ready,
                auto_in_b_valid,
  output [3:0]  auto_in_b_bits_id,
  output [1:0]  auto_in_b_bits_resp,
  output [3:0]  auto_in_b_bits_echo_tl_state_size,
  output [4:0]  auto_in_b_bits_echo_tl_state_source,
  output        auto_in_ar_ready,
                auto_in_r_valid,
  output [3:0]  auto_in_r_bits_id,
  output [63:0] auto_in_r_bits_data,
  output [1:0]  auto_in_r_bits_resp,
  output [3:0]  auto_in_r_bits_echo_tl_state_size,
  output [4:0]  auto_in_r_bits_echo_tl_state_source,
  output        auto_in_r_bits_last,
                auto_out_aw_valid,
  output [3:0]  auto_out_aw_bits_id,
  output [30:0] auto_out_aw_bits_addr,
  output [7:0]  auto_out_aw_bits_len,
  output [2:0]  auto_out_aw_bits_size,
  output [1:0]  auto_out_aw_bits_burst,
  output        auto_out_aw_bits_lock,
  output [3:0]  auto_out_aw_bits_cache,
  output [2:0]  auto_out_aw_bits_prot,
  output [3:0]  auto_out_aw_bits_qos,
  output        auto_out_w_valid,
  output [63:0] auto_out_w_bits_data,
  output [7:0]  auto_out_w_bits_strb,
  output        auto_out_w_bits_last,
                auto_out_b_ready,
                auto_out_ar_valid,
  output [3:0]  auto_out_ar_bits_id,
  output [30:0] auto_out_ar_bits_addr,
  output [7:0]  auto_out_ar_bits_len,
  output [2:0]  auto_out_ar_bits_size,
  output [1:0]  auto_out_ar_bits_burst,
  output        auto_out_ar_bits_lock,
  output [3:0]  auto_out_ar_bits_cache,
  output [2:0]  auto_out_ar_bits_prot,
  output [3:0]  auto_out_ar_bits_qos,
  output        auto_out_r_ready
);

  wire             _Queue1_BundleMap_5_io_enq_ready;
  wire             _Queue1_BundleMap_5_io_deq_valid;
  wire [3:0]       _Queue1_BundleMap_5_io_deq_bits_tl_state_size;
  wire [4:0]       _Queue1_BundleMap_5_io_deq_bits_tl_state_source;
  wire             _Queue1_BundleMap_4_io_enq_ready;
  wire             _Queue1_BundleMap_4_io_deq_valid;
  wire [3:0]       _Queue1_BundleMap_4_io_deq_bits_tl_state_size;
  wire [4:0]       _Queue1_BundleMap_4_io_deq_bits_tl_state_source;
  wire             _Queue8_BundleMap_3_io_enq_ready;
  wire             _Queue8_BundleMap_3_io_deq_valid;
  wire [3:0]       _Queue8_BundleMap_3_io_deq_bits_tl_state_size;
  wire [4:0]       _Queue8_BundleMap_3_io_deq_bits_tl_state_source;
  wire             _Queue8_BundleMap_2_io_enq_ready;
  wire             _Queue8_BundleMap_2_io_deq_valid;
  wire [3:0]       _Queue8_BundleMap_2_io_deq_bits_tl_state_size;
  wire [4:0]       _Queue8_BundleMap_2_io_deq_bits_tl_state_source;
  wire             _Queue1_BundleMap_3_io_enq_ready;
  wire             _Queue1_BundleMap_3_io_deq_valid;
  wire [3:0]       _Queue1_BundleMap_3_io_deq_bits_tl_state_size;
  wire [4:0]       _Queue1_BundleMap_3_io_deq_bits_tl_state_source;
  wire             _Queue1_BundleMap_2_io_enq_ready;
  wire             _Queue1_BundleMap_2_io_deq_valid;
  wire [3:0]       _Queue1_BundleMap_2_io_deq_bits_tl_state_size;
  wire [4:0]       _Queue1_BundleMap_2_io_deq_bits_tl_state_source;
  wire             _Queue1_BundleMap_1_io_enq_ready;
  wire             _Queue1_BundleMap_1_io_deq_valid;
  wire [3:0]       _Queue1_BundleMap_1_io_deq_bits_tl_state_size;
  wire [4:0]       _Queue1_BundleMap_1_io_deq_bits_tl_state_source;
  wire             _Queue8_BundleMap_1_io_enq_ready;
  wire             _Queue8_BundleMap_1_io_deq_valid;
  wire [3:0]       _Queue8_BundleMap_1_io_deq_bits_tl_state_size;
  wire [4:0]       _Queue8_BundleMap_1_io_deq_bits_tl_state_source;
  wire             _Queue8_BundleMap_io_enq_ready;
  wire             _Queue8_BundleMap_io_deq_valid;
  wire [3:0]       _Queue8_BundleMap_io_deq_bits_tl_state_size;
  wire [4:0]       _Queue8_BundleMap_io_deq_bits_tl_state_source;
  wire             _Queue1_BundleMap_io_enq_ready;
  wire             _Queue1_BundleMap_io_deq_valid;
  wire [3:0]       _Queue1_BundleMap_io_deq_bits_tl_state_size;
  wire [4:0]       _Queue1_BundleMap_io_deq_bits_tl_state_source;
  wire [15:0]      _GEN =
    {{1'h0},
     {1'h0},
     {1'h0},
     {1'h0},
     {1'h0},
     {1'h0},
     {1'h0},
     {1'h0},
     {1'h0},
     {1'h0},
     {1'h0},
     {_Queue1_BundleMap_2_io_enq_ready},
     {_Queue1_BundleMap_1_io_enq_ready},
     {_Queue8_BundleMap_1_io_enq_ready},
     {_Queue8_BundleMap_io_enq_ready},
     {_Queue1_BundleMap_io_enq_ready}};
  wire [15:0][3:0] _GEN_0 =
    {{4'h0},
     {4'h0},
     {4'h0},
     {4'h0},
     {4'h0},
     {4'h0},
     {4'h0},
     {4'h0},
     {4'h0},
     {4'h0},
     {4'h0},
     {_Queue1_BundleMap_2_io_deq_bits_tl_state_size},
     {_Queue1_BundleMap_1_io_deq_bits_tl_state_size},
     {_Queue8_BundleMap_1_io_deq_bits_tl_state_size},
     {_Queue8_BundleMap_io_deq_bits_tl_state_size},
     {_Queue1_BundleMap_io_deq_bits_tl_state_size}};
  wire [15:0][4:0] _GEN_1 =
    {{5'h0},
     {5'h0},
     {5'h0},
     {5'h0},
     {5'h0},
     {5'h0},
     {5'h0},
     {5'h0},
     {5'h0},
     {5'h0},
     {5'h0},
     {_Queue1_BundleMap_2_io_deq_bits_tl_state_source},
     {_Queue1_BundleMap_1_io_deq_bits_tl_state_source},
     {_Queue8_BundleMap_1_io_deq_bits_tl_state_source},
     {_Queue8_BundleMap_io_deq_bits_tl_state_source},
     {_Queue1_BundleMap_io_deq_bits_tl_state_source}};
  wire             _GEN_2 = auto_out_r_valid & auto_in_r_ready;
  wire             _GEN_3 = auto_in_ar_valid & auto_out_ar_ready;
  wire [15:0]      _GEN_4 =
    {{1'h0},
     {1'h0},
     {1'h0},
     {1'h0},
     {1'h0},
     {1'h0},
     {1'h0},
     {1'h0},
     {1'h0},
     {1'h0},
     {1'h0},
     {_Queue1_BundleMap_5_io_enq_ready},
     {_Queue1_BundleMap_4_io_enq_ready},
     {_Queue8_BundleMap_3_io_enq_ready},
     {_Queue8_BundleMap_2_io_enq_ready},
     {_Queue1_BundleMap_3_io_enq_ready}};
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      automatic logic [15:0] _GEN_5 =
        {{1'h0},
         {1'h0},
         {1'h0},
         {1'h0},
         {1'h0},
         {1'h0},
         {1'h0},
         {1'h0},
         {1'h0},
         {1'h0},
         {1'h0},
         {_Queue1_BundleMap_2_io_deq_valid},
         {_Queue1_BundleMap_1_io_deq_valid},
         {_Queue8_BundleMap_1_io_deq_valid},
         {_Queue8_BundleMap_io_deq_valid},
         {_Queue1_BundleMap_io_deq_valid}};
      automatic logic [15:0] _GEN_6 =
        {{1'h0},
         {1'h0},
         {1'h0},
         {1'h0},
         {1'h0},
         {1'h0},
         {1'h0},
         {1'h0},
         {1'h0},
         {1'h0},
         {1'h0},
         {_Queue1_BundleMap_5_io_deq_valid},
         {_Queue1_BundleMap_4_io_deq_valid},
         {_Queue8_BundleMap_3_io_deq_valid},
         {_Queue8_BundleMap_2_io_deq_valid},
         {_Queue1_BundleMap_3_io_deq_valid}};
      if (~reset & ~(~auto_out_r_valid | _GEN_5[auto_out_r_bits_id])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at UserYanker.scala:69 assert (!out.r.valid || r_valid) // Q must be ready faster than the response\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~auto_out_b_valid | _GEN_6[auto_out_b_bits_id])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at UserYanker.scala:98 assert (!out.b.valid || b_valid) // Q must be ready faster than the response\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  wire [15:0][3:0] _GEN_7 =
    {{4'h0},
     {4'h0},
     {4'h0},
     {4'h0},
     {4'h0},
     {4'h0},
     {4'h0},
     {4'h0},
     {4'h0},
     {4'h0},
     {4'h0},
     {_Queue1_BundleMap_5_io_deq_bits_tl_state_size},
     {_Queue1_BundleMap_4_io_deq_bits_tl_state_size},
     {_Queue8_BundleMap_3_io_deq_bits_tl_state_size},
     {_Queue8_BundleMap_2_io_deq_bits_tl_state_size},
     {_Queue1_BundleMap_3_io_deq_bits_tl_state_size}};
  wire [15:0][4:0] _GEN_8 =
    {{5'h0},
     {5'h0},
     {5'h0},
     {5'h0},
     {5'h0},
     {5'h0},
     {5'h0},
     {5'h0},
     {5'h0},
     {5'h0},
     {5'h0},
     {_Queue1_BundleMap_5_io_deq_bits_tl_state_source},
     {_Queue1_BundleMap_4_io_deq_bits_tl_state_source},
     {_Queue8_BundleMap_3_io_deq_bits_tl_state_source},
     {_Queue8_BundleMap_2_io_deq_bits_tl_state_source},
     {_Queue1_BundleMap_3_io_deq_bits_tl_state_source}};
  wire             _GEN_9 = auto_out_b_valid & auto_in_b_ready;
  wire             _GEN_10 = auto_in_aw_valid & auto_out_aw_ready;
  Queue1_BundleMap Queue1_BundleMap (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_GEN_3 & auto_in_ar_bits_id == 4'h0),
    .io_enq_bits_tl_state_size   (auto_in_ar_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_ar_bits_echo_tl_state_source),
    .io_deq_ready
      (_GEN_2 & auto_out_r_bits_id == 4'h0 & auto_out_r_bits_last),
    .io_enq_ready                (_Queue1_BundleMap_io_enq_ready),
    .io_deq_valid                (_Queue1_BundleMap_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue1_BundleMap_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue1_BundleMap_io_deq_bits_tl_state_source)
  );
  Queue8_BundleMap Queue8_BundleMap (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_GEN_3 & auto_in_ar_bits_id == 4'h1),
    .io_enq_bits_tl_state_size   (auto_in_ar_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_ar_bits_echo_tl_state_source),
    .io_deq_ready
      (_GEN_2 & auto_out_r_bits_id == 4'h1 & auto_out_r_bits_last),
    .io_enq_ready                (_Queue8_BundleMap_io_enq_ready),
    .io_deq_valid                (_Queue8_BundleMap_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue8_BundleMap_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue8_BundleMap_io_deq_bits_tl_state_source)
  );
  Queue8_BundleMap Queue8_BundleMap_1 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_GEN_3 & auto_in_ar_bits_id == 4'h2),
    .io_enq_bits_tl_state_size   (auto_in_ar_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_ar_bits_echo_tl_state_source),
    .io_deq_ready
      (_GEN_2 & auto_out_r_bits_id == 4'h2 & auto_out_r_bits_last),
    .io_enq_ready                (_Queue8_BundleMap_1_io_enq_ready),
    .io_deq_valid                (_Queue8_BundleMap_1_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue8_BundleMap_1_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue8_BundleMap_1_io_deq_bits_tl_state_source)
  );
  Queue1_BundleMap Queue1_BundleMap_1 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_GEN_3 & auto_in_ar_bits_id == 4'h3),
    .io_enq_bits_tl_state_size   (auto_in_ar_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_ar_bits_echo_tl_state_source),
    .io_deq_ready
      (_GEN_2 & auto_out_r_bits_id == 4'h3 & auto_out_r_bits_last),
    .io_enq_ready                (_Queue1_BundleMap_1_io_enq_ready),
    .io_deq_valid                (_Queue1_BundleMap_1_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue1_BundleMap_1_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue1_BundleMap_1_io_deq_bits_tl_state_source)
  );
  Queue1_BundleMap Queue1_BundleMap_2 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_GEN_3 & auto_in_ar_bits_id == 4'h4),
    .io_enq_bits_tl_state_size   (auto_in_ar_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_ar_bits_echo_tl_state_source),
    .io_deq_ready
      (_GEN_2 & auto_out_r_bits_id == 4'h4 & auto_out_r_bits_last),
    .io_enq_ready                (_Queue1_BundleMap_2_io_enq_ready),
    .io_deq_valid                (_Queue1_BundleMap_2_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue1_BundleMap_2_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue1_BundleMap_2_io_deq_bits_tl_state_source)
  );
  Queue1_BundleMap Queue1_BundleMap_3 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_GEN_10 & auto_in_aw_bits_id == 4'h0),
    .io_enq_bits_tl_state_size   (auto_in_aw_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_aw_bits_echo_tl_state_source),
    .io_deq_ready                (_GEN_9 & auto_out_b_bits_id == 4'h0),
    .io_enq_ready                (_Queue1_BundleMap_3_io_enq_ready),
    .io_deq_valid                (_Queue1_BundleMap_3_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue1_BundleMap_3_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue1_BundleMap_3_io_deq_bits_tl_state_source)
  );
  Queue8_BundleMap Queue8_BundleMap_2 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_GEN_10 & auto_in_aw_bits_id == 4'h1),
    .io_enq_bits_tl_state_size   (auto_in_aw_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_aw_bits_echo_tl_state_source),
    .io_deq_ready                (_GEN_9 & auto_out_b_bits_id == 4'h1),
    .io_enq_ready                (_Queue8_BundleMap_2_io_enq_ready),
    .io_deq_valid                (_Queue8_BundleMap_2_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue8_BundleMap_2_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue8_BundleMap_2_io_deq_bits_tl_state_source)
  );
  Queue8_BundleMap Queue8_BundleMap_3 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_GEN_10 & auto_in_aw_bits_id == 4'h2),
    .io_enq_bits_tl_state_size   (auto_in_aw_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_aw_bits_echo_tl_state_source),
    .io_deq_ready                (_GEN_9 & auto_out_b_bits_id == 4'h2),
    .io_enq_ready                (_Queue8_BundleMap_3_io_enq_ready),
    .io_deq_valid                (_Queue8_BundleMap_3_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue8_BundleMap_3_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue8_BundleMap_3_io_deq_bits_tl_state_source)
  );
  Queue1_BundleMap Queue1_BundleMap_4 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_GEN_10 & auto_in_aw_bits_id == 4'h3),
    .io_enq_bits_tl_state_size   (auto_in_aw_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_aw_bits_echo_tl_state_source),
    .io_deq_ready                (_GEN_9 & auto_out_b_bits_id == 4'h3),
    .io_enq_ready                (_Queue1_BundleMap_4_io_enq_ready),
    .io_deq_valid                (_Queue1_BundleMap_4_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue1_BundleMap_4_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue1_BundleMap_4_io_deq_bits_tl_state_source)
  );
  Queue1_BundleMap Queue1_BundleMap_5 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_GEN_10 & auto_in_aw_bits_id == 4'h4),
    .io_enq_bits_tl_state_size   (auto_in_aw_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_aw_bits_echo_tl_state_source),
    .io_deq_ready                (_GEN_9 & auto_out_b_bits_id == 4'h4),
    .io_enq_ready                (_Queue1_BundleMap_5_io_enq_ready),
    .io_deq_valid                (_Queue1_BundleMap_5_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue1_BundleMap_5_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue1_BundleMap_5_io_deq_bits_tl_state_source)
  );
  assign auto_in_aw_ready = auto_out_aw_ready & _GEN_4[auto_in_aw_bits_id];
  assign auto_in_w_ready = auto_out_w_ready;
  assign auto_in_b_valid = auto_out_b_valid;
  assign auto_in_b_bits_id = auto_out_b_bits_id;
  assign auto_in_b_bits_resp = auto_out_b_bits_resp;
  assign auto_in_b_bits_echo_tl_state_size = _GEN_7[auto_out_b_bits_id];
  assign auto_in_b_bits_echo_tl_state_source = _GEN_8[auto_out_b_bits_id];
  assign auto_in_ar_ready = auto_out_ar_ready & _GEN[auto_in_ar_bits_id];
  assign auto_in_r_valid = auto_out_r_valid;
  assign auto_in_r_bits_id = auto_out_r_bits_id;
  assign auto_in_r_bits_data = auto_out_r_bits_data;
  assign auto_in_r_bits_resp = auto_out_r_bits_resp;
  assign auto_in_r_bits_echo_tl_state_size = _GEN_0[auto_out_r_bits_id];
  assign auto_in_r_bits_echo_tl_state_source = _GEN_1[auto_out_r_bits_id];
  assign auto_in_r_bits_last = auto_out_r_bits_last;
  assign auto_out_aw_valid = auto_in_aw_valid & _GEN_4[auto_in_aw_bits_id];
  assign auto_out_aw_bits_id = auto_in_aw_bits_id;
  assign auto_out_aw_bits_addr = auto_in_aw_bits_addr;
  assign auto_out_aw_bits_len = auto_in_aw_bits_len;
  assign auto_out_aw_bits_size = auto_in_aw_bits_size;
  assign auto_out_aw_bits_burst = auto_in_aw_bits_burst;
  assign auto_out_aw_bits_lock = auto_in_aw_bits_lock;
  assign auto_out_aw_bits_cache = auto_in_aw_bits_cache;
  assign auto_out_aw_bits_prot = auto_in_aw_bits_prot;
  assign auto_out_aw_bits_qos = auto_in_aw_bits_qos;
  assign auto_out_w_valid = auto_in_w_valid;
  assign auto_out_w_bits_data = auto_in_w_bits_data;
  assign auto_out_w_bits_strb = auto_in_w_bits_strb;
  assign auto_out_w_bits_last = auto_in_w_bits_last;
  assign auto_out_b_ready = auto_in_b_ready;
  assign auto_out_ar_valid = auto_in_ar_valid & _GEN[auto_in_ar_bits_id];
  assign auto_out_ar_bits_id = auto_in_ar_bits_id;
  assign auto_out_ar_bits_addr = auto_in_ar_bits_addr;
  assign auto_out_ar_bits_len = auto_in_ar_bits_len;
  assign auto_out_ar_bits_size = auto_in_ar_bits_size;
  assign auto_out_ar_bits_burst = auto_in_ar_bits_burst;
  assign auto_out_ar_bits_lock = auto_in_ar_bits_lock;
  assign auto_out_ar_bits_cache = auto_in_ar_bits_cache;
  assign auto_out_ar_bits_prot = auto_in_ar_bits_prot;
  assign auto_out_ar_bits_qos = auto_in_ar_bits_qos;
  assign auto_out_r_ready = auto_in_r_ready;
endmodule

module Queue8_AXI4BundleR(
  input         clock,
                reset,
                io_enq_valid,
  input  [3:0]  io_enq_bits_id,
  input  [63:0] io_enq_bits_data,
  input  [1:0]  io_enq_bits_resp,
  input  [3:0]  io_enq_bits_echo_tl_state_size,
  input  [4:0]  io_enq_bits_echo_tl_state_source,
  input         io_enq_bits_last,
                io_deq_ready,
  output        io_enq_ready,
  output [3:0]  io_deq_bits_id,
  output [63:0] io_deq_bits_data,
  output [1:0]  io_deq_bits_resp,
  output [3:0]  io_deq_bits_echo_tl_state_size,
  output [4:0]  io_deq_bits_echo_tl_state_source,
  output        io_deq_bits_last
);

  wire [79:0] _ram_ext_R0_data;
  reg  [2:0]  enq_ptr_value;
  reg  [2:0]  deq_ptr_value;
  reg         maybe_full;
  wire        ptr_match = enq_ptr_value == deq_ptr_value;
  wire        full = ptr_match & maybe_full;
  wire        do_enq = ~full & io_enq_valid;
  always @(posedge clock) begin
    if (reset) begin
      enq_ptr_value <= 3'h0;
      deq_ptr_value <= 3'h0;
      maybe_full <= 1'h0;
    end
    else begin
      automatic logic do_deq = io_deq_ready & ~(ptr_match & ~maybe_full);
      if (do_enq)
        enq_ptr_value <= enq_ptr_value + 3'h1;
      if (do_deq)
        deq_ptr_value <= deq_ptr_value + 3'h1;
      if (do_enq != do_deq)
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_combMem_12 ram_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data
      ({io_enq_bits_last,
        io_enq_bits_echo_tl_state_source,
        io_enq_bits_echo_tl_state_size,
        io_enq_bits_resp,
        io_enq_bits_data,
        io_enq_bits_id}),
    .R0_data (_ram_ext_R0_data)
  );
  assign io_enq_ready = ~full;
  assign io_deq_bits_id = _ram_ext_R0_data[3:0];
  assign io_deq_bits_data = _ram_ext_R0_data[67:4];
  assign io_deq_bits_resp = _ram_ext_R0_data[69:68];
  assign io_deq_bits_echo_tl_state_size = _ram_ext_R0_data[73:70];
  assign io_deq_bits_echo_tl_state_source = _ram_ext_R0_data[78:74];
  assign io_deq_bits_last = _ram_ext_R0_data[79];
endmodule

module AXI4Deinterleaver(
  input         clock,
                reset,
                auto_anon_in_aw_valid,
  input  [3:0]  auto_anon_in_aw_bits_id,
  input  [30:0] auto_anon_in_aw_bits_addr,
  input  [7:0]  auto_anon_in_aw_bits_len,
  input  [2:0]  auto_anon_in_aw_bits_size,
  input  [1:0]  auto_anon_in_aw_bits_burst,
  input         auto_anon_in_aw_bits_lock,
  input  [3:0]  auto_anon_in_aw_bits_cache,
  input  [2:0]  auto_anon_in_aw_bits_prot,
  input  [3:0]  auto_anon_in_aw_bits_qos,
                auto_anon_in_aw_bits_echo_tl_state_size,
  input  [4:0]  auto_anon_in_aw_bits_echo_tl_state_source,
  input         auto_anon_in_w_valid,
  input  [63:0] auto_anon_in_w_bits_data,
  input  [7:0]  auto_anon_in_w_bits_strb,
  input         auto_anon_in_w_bits_last,
                auto_anon_in_b_ready,
                auto_anon_in_ar_valid,
  input  [3:0]  auto_anon_in_ar_bits_id,
  input  [30:0] auto_anon_in_ar_bits_addr,
  input  [7:0]  auto_anon_in_ar_bits_len,
  input  [2:0]  auto_anon_in_ar_bits_size,
  input  [1:0]  auto_anon_in_ar_bits_burst,
  input         auto_anon_in_ar_bits_lock,
  input  [3:0]  auto_anon_in_ar_bits_cache,
  input  [2:0]  auto_anon_in_ar_bits_prot,
  input  [3:0]  auto_anon_in_ar_bits_qos,
                auto_anon_in_ar_bits_echo_tl_state_size,
  input  [4:0]  auto_anon_in_ar_bits_echo_tl_state_source,
  input         auto_anon_in_r_ready,
                auto_anon_out_aw_ready,
                auto_anon_out_w_ready,
                auto_anon_out_b_valid,
  input  [3:0]  auto_anon_out_b_bits_id,
  input  [1:0]  auto_anon_out_b_bits_resp,
  input  [3:0]  auto_anon_out_b_bits_echo_tl_state_size,
  input  [4:0]  auto_anon_out_b_bits_echo_tl_state_source,
  input         auto_anon_out_ar_ready,
                auto_anon_out_r_valid,
  input  [3:0]  auto_anon_out_r_bits_id,
  input  [63:0] auto_anon_out_r_bits_data,
  input  [1:0]  auto_anon_out_r_bits_resp,
  input  [3:0]  auto_anon_out_r_bits_echo_tl_state_size,
  input  [4:0]  auto_anon_out_r_bits_echo_tl_state_source,
  input         auto_anon_out_r_bits_last,
  output        auto_anon_in_aw_ready,
                auto_anon_in_w_ready,
                auto_anon_in_b_valid,
  output [3:0]  auto_anon_in_b_bits_id,
  output [1:0]  auto_anon_in_b_bits_resp,
  output [3:0]  auto_anon_in_b_bits_echo_tl_state_size,
  output [4:0]  auto_anon_in_b_bits_echo_tl_state_source,
  output        auto_anon_in_ar_ready,
                auto_anon_in_r_valid,
  output [3:0]  auto_anon_in_r_bits_id,
  output [63:0] auto_anon_in_r_bits_data,
  output [1:0]  auto_anon_in_r_bits_resp,
  output [3:0]  auto_anon_in_r_bits_echo_tl_state_size,
  output [4:0]  auto_anon_in_r_bits_echo_tl_state_source,
  output        auto_anon_in_r_bits_last,
                auto_anon_out_aw_valid,
  output [3:0]  auto_anon_out_aw_bits_id,
  output [30:0] auto_anon_out_aw_bits_addr,
  output [7:0]  auto_anon_out_aw_bits_len,
  output [2:0]  auto_anon_out_aw_bits_size,
  output [1:0]  auto_anon_out_aw_bits_burst,
  output        auto_anon_out_aw_bits_lock,
  output [3:0]  auto_anon_out_aw_bits_cache,
  output [2:0]  auto_anon_out_aw_bits_prot,
  output [3:0]  auto_anon_out_aw_bits_qos,
                auto_anon_out_aw_bits_echo_tl_state_size,
  output [4:0]  auto_anon_out_aw_bits_echo_tl_state_source,
  output        auto_anon_out_w_valid,
  output [63:0] auto_anon_out_w_bits_data,
  output [7:0]  auto_anon_out_w_bits_strb,
  output        auto_anon_out_w_bits_last,
                auto_anon_out_b_ready,
                auto_anon_out_ar_valid,
  output [3:0]  auto_anon_out_ar_bits_id,
  output [30:0] auto_anon_out_ar_bits_addr,
  output [7:0]  auto_anon_out_ar_bits_len,
  output [2:0]  auto_anon_out_ar_bits_size,
  output [1:0]  auto_anon_out_ar_bits_burst,
  output        auto_anon_out_ar_bits_lock,
  output [3:0]  auto_anon_out_ar_bits_cache,
  output [2:0]  auto_anon_out_ar_bits_prot,
  output [3:0]  auto_anon_out_ar_bits_qos,
                auto_anon_out_ar_bits_echo_tl_state_size,
  output [4:0]  auto_anon_out_ar_bits_echo_tl_state_source,
  output        auto_anon_out_r_ready
);

  wire              anonOut_r_ready;
  wire              enq_OH_bools_15;
  wire              enq_OH_bools_14;
  wire              enq_OH_bools_13;
  wire              enq_OH_bools_12;
  wire              enq_OH_bools_11;
  wire              enq_OH_bools_10;
  wire              enq_OH_bools_9;
  wire              enq_OH_bools_8;
  wire              enq_OH_bools_7;
  wire              enq_OH_bools_6;
  wire              enq_OH_bools_5;
  wire              anonIn_r_bits_last;
  wire              _qs_queue_4_io_enq_ready;
  wire [3:0]        _qs_queue_4_io_deq_bits_id;
  wire [63:0]       _qs_queue_4_io_deq_bits_data;
  wire [1:0]        _qs_queue_4_io_deq_bits_resp;
  wire [3:0]        _qs_queue_4_io_deq_bits_echo_tl_state_size;
  wire [4:0]        _qs_queue_4_io_deq_bits_echo_tl_state_source;
  wire              _qs_queue_4_io_deq_bits_last;
  wire              _qs_queue_3_io_enq_ready;
  wire [3:0]        _qs_queue_3_io_deq_bits_id;
  wire [63:0]       _qs_queue_3_io_deq_bits_data;
  wire [1:0]        _qs_queue_3_io_deq_bits_resp;
  wire [3:0]        _qs_queue_3_io_deq_bits_echo_tl_state_size;
  wire [4:0]        _qs_queue_3_io_deq_bits_echo_tl_state_source;
  wire              _qs_queue_3_io_deq_bits_last;
  wire              _qs_queue_2_io_enq_ready;
  wire [3:0]        _qs_queue_2_io_deq_bits_id;
  wire [63:0]       _qs_queue_2_io_deq_bits_data;
  wire [1:0]        _qs_queue_2_io_deq_bits_resp;
  wire [3:0]        _qs_queue_2_io_deq_bits_echo_tl_state_size;
  wire [4:0]        _qs_queue_2_io_deq_bits_echo_tl_state_source;
  wire              _qs_queue_2_io_deq_bits_last;
  wire              _qs_queue_1_io_enq_ready;
  wire [3:0]        _qs_queue_1_io_deq_bits_id;
  wire [63:0]       _qs_queue_1_io_deq_bits_data;
  wire [1:0]        _qs_queue_1_io_deq_bits_resp;
  wire [3:0]        _qs_queue_1_io_deq_bits_echo_tl_state_size;
  wire [4:0]        _qs_queue_1_io_deq_bits_echo_tl_state_source;
  wire              _qs_queue_1_io_deq_bits_last;
  wire              _qs_queue_0_io_enq_ready;
  wire [3:0]        _qs_queue_0_io_deq_bits_id;
  wire [63:0]       _qs_queue_0_io_deq_bits_data;
  wire [1:0]        _qs_queue_0_io_deq_bits_resp;
  wire [3:0]        _qs_queue_0_io_deq_bits_echo_tl_state_size;
  wire [4:0]        _qs_queue_0_io_deq_bits_echo_tl_state_source;
  wire              _qs_queue_0_io_deq_bits_last;
  reg               locked;
  reg  [3:0]        deq_id;
  reg  [3:0]        pending_count;
  wire              enq_OH_bools_0 = auto_anon_out_r_bits_id == 4'h0;
  wire              _GEN = anonOut_r_ready & auto_anon_out_r_valid;
  wire              pending_inc = enq_OH_bools_0 & _GEN & auto_anon_out_r_bits_last;
  wire              _GEN_0 = auto_anon_in_r_ready & locked;
  wire              _GEN_1 = deq_id == 4'h0 & _GEN_0;
  wire              pending_dec = _GEN_1 & anonIn_r_bits_last;
  reg  [3:0]        pending_count_1;
  wire              enq_OH_bools_1 = auto_anon_out_r_bits_id == 4'h1;
  wire              pending_inc_1 = enq_OH_bools_1 & _GEN & auto_anon_out_r_bits_last;
  wire              _GEN_2 = deq_id == 4'h1 & _GEN_0;
  wire              pending_dec_1 = _GEN_2 & anonIn_r_bits_last;
  reg  [3:0]        pending_count_2;
  wire              enq_OH_bools_2 = auto_anon_out_r_bits_id == 4'h2;
  wire              pending_inc_2 = enq_OH_bools_2 & _GEN & auto_anon_out_r_bits_last;
  wire              _GEN_3 = deq_id == 4'h2 & _GEN_0;
  wire              pending_dec_2 = _GEN_3 & anonIn_r_bits_last;
  reg  [3:0]        pending_count_3;
  wire              enq_OH_bools_3 = auto_anon_out_r_bits_id == 4'h3;
  wire              pending_inc_3 = enq_OH_bools_3 & _GEN & auto_anon_out_r_bits_last;
  wire              _GEN_4 = deq_id == 4'h3 & _GEN_0;
  wire              pending_dec_3 = _GEN_4 & anonIn_r_bits_last;
  reg  [3:0]        pending_count_4;
  wire              enq_OH_bools_4 = auto_anon_out_r_bits_id == 4'h4;
  wire              pending_inc_4 = enq_OH_bools_4 & _GEN & auto_anon_out_r_bits_last;
  wire              _GEN_5 = deq_id == 4'h4 & _GEN_0;
  wire              pending_dec_4 = _GEN_5 & anonIn_r_bits_last;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (~reset & enq_OH_bools_5 & auto_anon_out_r_valid) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ID 5 should not be used\n    at Deinterleaver.scala:80 assert(!q.enq.valid, s\"ID ${i} should not be used\")\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & enq_OH_bools_6 & auto_anon_out_r_valid) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ID 6 should not be used\n    at Deinterleaver.scala:80 assert(!q.enq.valid, s\"ID ${i} should not be used\")\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & enq_OH_bools_7 & auto_anon_out_r_valid) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ID 7 should not be used\n    at Deinterleaver.scala:80 assert(!q.enq.valid, s\"ID ${i} should not be used\")\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & enq_OH_bools_8 & auto_anon_out_r_valid) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ID 8 should not be used\n    at Deinterleaver.scala:80 assert(!q.enq.valid, s\"ID ${i} should not be used\")\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & enq_OH_bools_9 & auto_anon_out_r_valid) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ID 9 should not be used\n    at Deinterleaver.scala:80 assert(!q.enq.valid, s\"ID ${i} should not be used\")\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & enq_OH_bools_10 & auto_anon_out_r_valid) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ID 10 should not be used\n    at Deinterleaver.scala:80 assert(!q.enq.valid, s\"ID ${i} should not be used\")\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & enq_OH_bools_11 & auto_anon_out_r_valid) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ID 11 should not be used\n    at Deinterleaver.scala:80 assert(!q.enq.valid, s\"ID ${i} should not be used\")\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & enq_OH_bools_12 & auto_anon_out_r_valid) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ID 12 should not be used\n    at Deinterleaver.scala:80 assert(!q.enq.valid, s\"ID ${i} should not be used\")\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & enq_OH_bools_13 & auto_anon_out_r_valid) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ID 13 should not be used\n    at Deinterleaver.scala:80 assert(!q.enq.valid, s\"ID ${i} should not be used\")\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & enq_OH_bools_14 & auto_anon_out_r_valid) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ID 14 should not be used\n    at Deinterleaver.scala:80 assert(!q.enq.valid, s\"ID ${i} should not be used\")\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & enq_OH_bools_15 & auto_anon_out_r_valid) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ID 15 should not be used\n    at Deinterleaver.scala:80 assert(!q.enq.valid, s\"ID ${i} should not be used\")\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~pending_dec | (|pending_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Deinterleaver.scala:104 assert (!dec || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~pending_inc | pending_count != 4'h8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Deinterleaver.scala:105 assert (!inc || count =/= beats.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~pending_dec_1 | (|pending_count_1))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Deinterleaver.scala:104 assert (!dec || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~pending_inc_1 | pending_count_1 != 4'h8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Deinterleaver.scala:105 assert (!inc || count =/= beats.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~pending_dec_2 | (|pending_count_2))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Deinterleaver.scala:104 assert (!dec || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~pending_inc_2 | pending_count_2 != 4'h8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Deinterleaver.scala:105 assert (!inc || count =/= beats.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~pending_dec_3 | (|pending_count_3))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Deinterleaver.scala:104 assert (!dec || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~pending_inc_3 | pending_count_3 != 4'h8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Deinterleaver.scala:105 assert (!inc || count =/= beats.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~pending_dec_4 | (|pending_count_4))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Deinterleaver.scala:104 assert (!dec || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~pending_inc_4 | pending_count_4 != 4'h8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Deinterleaver.scala:105 assert (!inc || count =/= beats.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  wire [15:0][3:0]  _GEN_6 =
    {{4'h0},
     {4'h0},
     {4'h0},
     {4'h0},
     {4'h0},
     {4'h0},
     {4'h0},
     {4'h0},
     {4'h0},
     {4'h0},
     {4'h0},
     {_qs_queue_4_io_deq_bits_id},
     {_qs_queue_3_io_deq_bits_id},
     {_qs_queue_2_io_deq_bits_id},
     {_qs_queue_1_io_deq_bits_id},
     {_qs_queue_0_io_deq_bits_id}};
  wire [15:0][63:0] _GEN_7 =
    {{64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {_qs_queue_4_io_deq_bits_data},
     {_qs_queue_3_io_deq_bits_data},
     {_qs_queue_2_io_deq_bits_data},
     {_qs_queue_1_io_deq_bits_data},
     {_qs_queue_0_io_deq_bits_data}};
  wire [15:0][1:0]  _GEN_8 =
    {{2'h0},
     {2'h0},
     {2'h0},
     {2'h0},
     {2'h0},
     {2'h0},
     {2'h0},
     {2'h0},
     {2'h0},
     {2'h0},
     {2'h0},
     {_qs_queue_4_io_deq_bits_resp},
     {_qs_queue_3_io_deq_bits_resp},
     {_qs_queue_2_io_deq_bits_resp},
     {_qs_queue_1_io_deq_bits_resp},
     {_qs_queue_0_io_deq_bits_resp}};
  wire [15:0][3:0]  _GEN_9 =
    {{4'h0},
     {4'h0},
     {4'h0},
     {4'h0},
     {4'h0},
     {4'h0},
     {4'h0},
     {4'h0},
     {4'h0},
     {4'h0},
     {4'h0},
     {_qs_queue_4_io_deq_bits_echo_tl_state_size},
     {_qs_queue_3_io_deq_bits_echo_tl_state_size},
     {_qs_queue_2_io_deq_bits_echo_tl_state_size},
     {_qs_queue_1_io_deq_bits_echo_tl_state_size},
     {_qs_queue_0_io_deq_bits_echo_tl_state_size}};
  wire [15:0][4:0]  _GEN_10 =
    {{5'h0},
     {5'h0},
     {5'h0},
     {5'h0},
     {5'h0},
     {5'h0},
     {5'h0},
     {5'h0},
     {5'h0},
     {5'h0},
     {5'h0},
     {_qs_queue_4_io_deq_bits_echo_tl_state_source},
     {_qs_queue_3_io_deq_bits_echo_tl_state_source},
     {_qs_queue_2_io_deq_bits_echo_tl_state_source},
     {_qs_queue_1_io_deq_bits_echo_tl_state_source},
     {_qs_queue_0_io_deq_bits_echo_tl_state_source}};
  wire [15:0]       _GEN_11 =
    {{1'h0},
     {1'h0},
     {1'h0},
     {1'h0},
     {1'h0},
     {1'h0},
     {1'h0},
     {1'h0},
     {1'h0},
     {1'h0},
     {1'h0},
     {_qs_queue_4_io_deq_bits_last},
     {_qs_queue_3_io_deq_bits_last},
     {_qs_queue_2_io_deq_bits_last},
     {_qs_queue_1_io_deq_bits_last},
     {_qs_queue_0_io_deq_bits_last}};
  assign anonIn_r_bits_last = _GEN_11[deq_id];
  assign enq_OH_bools_5 = auto_anon_out_r_bits_id == 4'h5;
  assign enq_OH_bools_6 = auto_anon_out_r_bits_id == 4'h6;
  assign enq_OH_bools_7 = auto_anon_out_r_bits_id == 4'h7;
  assign enq_OH_bools_8 = auto_anon_out_r_bits_id == 4'h8;
  assign enq_OH_bools_9 = auto_anon_out_r_bits_id == 4'h9;
  assign enq_OH_bools_10 = auto_anon_out_r_bits_id == 4'hA;
  assign enq_OH_bools_11 = auto_anon_out_r_bits_id == 4'hB;
  assign enq_OH_bools_12 = auto_anon_out_r_bits_id == 4'hC;
  assign enq_OH_bools_13 = auto_anon_out_r_bits_id == 4'hD;
  assign enq_OH_bools_14 = auto_anon_out_r_bits_id == 4'hE;
  assign enq_OH_bools_15 = &auto_anon_out_r_bits_id;
  wire [15:0]       _GEN_12 =
    {{1'h0},
     {1'h0},
     {1'h0},
     {1'h0},
     {1'h0},
     {1'h0},
     {1'h0},
     {1'h0},
     {1'h0},
     {1'h0},
     {1'h0},
     {_qs_queue_4_io_enq_ready},
     {_qs_queue_3_io_enq_ready},
     {_qs_queue_2_io_enq_ready},
     {_qs_queue_1_io_enq_ready},
     {_qs_queue_0_io_enq_ready}};
  assign anonOut_r_ready = _GEN_12[auto_anon_out_r_bits_id];
  always @(posedge clock) begin
    automatic logic [3:0] pending_next;
    automatic logic [3:0] pending_next_1;
    automatic logic [3:0] pending_next_2;
    automatic logic [3:0] pending_next_3;
    automatic logic [3:0] pending_next_4;
    automatic logic       _GEN_13;
    pending_next = pending_count + {3'h0, pending_inc} - {3'h0, pending_dec};
    pending_next_1 = pending_count_1 + {3'h0, pending_inc_1} - {3'h0, pending_dec_1};
    pending_next_2 = pending_count_2 + {3'h0, pending_inc_2} - {3'h0, pending_dec_2};
    pending_next_3 = pending_count_3 + {3'h0, pending_inc_3} - {3'h0, pending_dec_3};
    pending_next_4 = pending_count_4 + {3'h0, pending_inc_4} - {3'h0, pending_dec_4};
    _GEN_13 = ~locked | _GEN_0 & anonIn_r_bits_last;
    if (reset) begin
      locked <= 1'h0;
      pending_count <= 4'h0;
      pending_count_1 <= 4'h0;
      pending_count_2 <= 4'h0;
      pending_count_3 <= 4'h0;
      pending_count_4 <= 4'h0;
    end
    else begin
      if (_GEN_13)
        locked <=
          |{|pending_next_4,
            |pending_next_3,
            |pending_next_2,
            |pending_next_1,
            |pending_next};
      pending_count <= pending_next;
      pending_count_1 <= pending_next_1;
      pending_count_2 <= pending_next_2;
      pending_count_3 <= pending_next_3;
      pending_count_4 <= pending_next_4;
    end
    if (_GEN_13) begin
      automatic logic        _GEN_14;
      automatic logic        _GEN_15;
      automatic logic        _GEN_16;
      automatic logic        _GEN_17;
      automatic logic        _GEN_18;
      automatic logic        _GEN_19;
      automatic logic        _GEN_20;
      automatic logic        _GEN_21;
      automatic logic        _GEN_22;
      automatic logic        _GEN_23;
      automatic logic [14:0] _GEN_24;
      automatic logic [6:0]  _GEN_25;
      automatic logic [2:0]  _GEN_26;
      _GEN_14 = (|pending_next_4) | (|pending_next_3);
      _GEN_15 = (|pending_next_3) | (|pending_next_2);
      _GEN_16 = (|pending_next_2) | (|pending_next_1);
      _GEN_17 = (|pending_next_1) | (|pending_next);
      _GEN_18 = _GEN_15 | _GEN_17;
      _GEN_19 = _GEN_16 | (|pending_next);
      _GEN_20 = (|pending_next_4) | _GEN_18;
      _GEN_21 = _GEN_14 | _GEN_19;
      _GEN_22 = (|pending_next_4) | _GEN_15 | _GEN_17;
      _GEN_23 = _GEN_14 | _GEN_16 | (|pending_next);
      _GEN_24 =
        {~_GEN_21,
         ~_GEN_22,
         ~_GEN_23,
         ~_GEN_20,
         ~_GEN_21,
         ~_GEN_22,
         ~_GEN_23,
         ~_GEN_20,
         ~_GEN_21,
         ~_GEN_22,
         ~_GEN_23,
         ~_GEN_18,
         ~_GEN_19,
         ~_GEN_17,
         ~(|pending_next)}
        & {11'h0, |pending_next_4, |pending_next_3, |pending_next_2, |pending_next_1};
      _GEN_25 = _GEN_24[14:8] | _GEN_24[6:0];
      _GEN_26 = _GEN_25[6:4] | _GEN_25[2:0];
      deq_id <=
        {|(_GEN_24[14:7]), |(_GEN_25[6:3]), |(_GEN_26[2:1]), _GEN_26[2] | _GEN_26[0]};
    end
  end // always @(posedge)
  Queue8_AXI4BundleR qs_queue_0 (
    .clock                            (clock),
    .reset                            (reset),
    .io_enq_valid                     (enq_OH_bools_0 & auto_anon_out_r_valid),
    .io_enq_bits_id                   (auto_anon_out_r_bits_id),
    .io_enq_bits_data                 (auto_anon_out_r_bits_data),
    .io_enq_bits_resp                 (auto_anon_out_r_bits_resp),
    .io_enq_bits_echo_tl_state_size   (auto_anon_out_r_bits_echo_tl_state_size),
    .io_enq_bits_echo_tl_state_source (auto_anon_out_r_bits_echo_tl_state_source),
    .io_enq_bits_last                 (auto_anon_out_r_bits_last),
    .io_deq_ready                     (_GEN_1),
    .io_enq_ready                     (_qs_queue_0_io_enq_ready),
    .io_deq_bits_id                   (_qs_queue_0_io_deq_bits_id),
    .io_deq_bits_data                 (_qs_queue_0_io_deq_bits_data),
    .io_deq_bits_resp                 (_qs_queue_0_io_deq_bits_resp),
    .io_deq_bits_echo_tl_state_size   (_qs_queue_0_io_deq_bits_echo_tl_state_size),
    .io_deq_bits_echo_tl_state_source (_qs_queue_0_io_deq_bits_echo_tl_state_source),
    .io_deq_bits_last                 (_qs_queue_0_io_deq_bits_last)
  );
  Queue8_AXI4BundleR qs_queue_1 (
    .clock                            (clock),
    .reset                            (reset),
    .io_enq_valid                     (enq_OH_bools_1 & auto_anon_out_r_valid),
    .io_enq_bits_id                   (auto_anon_out_r_bits_id),
    .io_enq_bits_data                 (auto_anon_out_r_bits_data),
    .io_enq_bits_resp                 (auto_anon_out_r_bits_resp),
    .io_enq_bits_echo_tl_state_size   (auto_anon_out_r_bits_echo_tl_state_size),
    .io_enq_bits_echo_tl_state_source (auto_anon_out_r_bits_echo_tl_state_source),
    .io_enq_bits_last                 (auto_anon_out_r_bits_last),
    .io_deq_ready                     (_GEN_2),
    .io_enq_ready                     (_qs_queue_1_io_enq_ready),
    .io_deq_bits_id                   (_qs_queue_1_io_deq_bits_id),
    .io_deq_bits_data                 (_qs_queue_1_io_deq_bits_data),
    .io_deq_bits_resp                 (_qs_queue_1_io_deq_bits_resp),
    .io_deq_bits_echo_tl_state_size   (_qs_queue_1_io_deq_bits_echo_tl_state_size),
    .io_deq_bits_echo_tl_state_source (_qs_queue_1_io_deq_bits_echo_tl_state_source),
    .io_deq_bits_last                 (_qs_queue_1_io_deq_bits_last)
  );
  Queue8_AXI4BundleR qs_queue_2 (
    .clock                            (clock),
    .reset                            (reset),
    .io_enq_valid                     (enq_OH_bools_2 & auto_anon_out_r_valid),
    .io_enq_bits_id                   (auto_anon_out_r_bits_id),
    .io_enq_bits_data                 (auto_anon_out_r_bits_data),
    .io_enq_bits_resp                 (auto_anon_out_r_bits_resp),
    .io_enq_bits_echo_tl_state_size   (auto_anon_out_r_bits_echo_tl_state_size),
    .io_enq_bits_echo_tl_state_source (auto_anon_out_r_bits_echo_tl_state_source),
    .io_enq_bits_last                 (auto_anon_out_r_bits_last),
    .io_deq_ready                     (_GEN_3),
    .io_enq_ready                     (_qs_queue_2_io_enq_ready),
    .io_deq_bits_id                   (_qs_queue_2_io_deq_bits_id),
    .io_deq_bits_data                 (_qs_queue_2_io_deq_bits_data),
    .io_deq_bits_resp                 (_qs_queue_2_io_deq_bits_resp),
    .io_deq_bits_echo_tl_state_size   (_qs_queue_2_io_deq_bits_echo_tl_state_size),
    .io_deq_bits_echo_tl_state_source (_qs_queue_2_io_deq_bits_echo_tl_state_source),
    .io_deq_bits_last                 (_qs_queue_2_io_deq_bits_last)
  );
  Queue8_AXI4BundleR qs_queue_3 (
    .clock                            (clock),
    .reset                            (reset),
    .io_enq_valid                     (enq_OH_bools_3 & auto_anon_out_r_valid),
    .io_enq_bits_id                   (auto_anon_out_r_bits_id),
    .io_enq_bits_data                 (auto_anon_out_r_bits_data),
    .io_enq_bits_resp                 (auto_anon_out_r_bits_resp),
    .io_enq_bits_echo_tl_state_size   (auto_anon_out_r_bits_echo_tl_state_size),
    .io_enq_bits_echo_tl_state_source (auto_anon_out_r_bits_echo_tl_state_source),
    .io_enq_bits_last                 (auto_anon_out_r_bits_last),
    .io_deq_ready                     (_GEN_4),
    .io_enq_ready                     (_qs_queue_3_io_enq_ready),
    .io_deq_bits_id                   (_qs_queue_3_io_deq_bits_id),
    .io_deq_bits_data                 (_qs_queue_3_io_deq_bits_data),
    .io_deq_bits_resp                 (_qs_queue_3_io_deq_bits_resp),
    .io_deq_bits_echo_tl_state_size   (_qs_queue_3_io_deq_bits_echo_tl_state_size),
    .io_deq_bits_echo_tl_state_source (_qs_queue_3_io_deq_bits_echo_tl_state_source),
    .io_deq_bits_last                 (_qs_queue_3_io_deq_bits_last)
  );
  Queue8_AXI4BundleR qs_queue_4 (
    .clock                            (clock),
    .reset                            (reset),
    .io_enq_valid                     (enq_OH_bools_4 & auto_anon_out_r_valid),
    .io_enq_bits_id                   (auto_anon_out_r_bits_id),
    .io_enq_bits_data                 (auto_anon_out_r_bits_data),
    .io_enq_bits_resp                 (auto_anon_out_r_bits_resp),
    .io_enq_bits_echo_tl_state_size   (auto_anon_out_r_bits_echo_tl_state_size),
    .io_enq_bits_echo_tl_state_source (auto_anon_out_r_bits_echo_tl_state_source),
    .io_enq_bits_last                 (auto_anon_out_r_bits_last),
    .io_deq_ready                     (_GEN_5),
    .io_enq_ready                     (_qs_queue_4_io_enq_ready),
    .io_deq_bits_id                   (_qs_queue_4_io_deq_bits_id),
    .io_deq_bits_data                 (_qs_queue_4_io_deq_bits_data),
    .io_deq_bits_resp                 (_qs_queue_4_io_deq_bits_resp),
    .io_deq_bits_echo_tl_state_size   (_qs_queue_4_io_deq_bits_echo_tl_state_size),
    .io_deq_bits_echo_tl_state_source (_qs_queue_4_io_deq_bits_echo_tl_state_source),
    .io_deq_bits_last                 (_qs_queue_4_io_deq_bits_last)
  );
  assign auto_anon_in_aw_ready = auto_anon_out_aw_ready;
  assign auto_anon_in_w_ready = auto_anon_out_w_ready;
  assign auto_anon_in_b_valid = auto_anon_out_b_valid;
  assign auto_anon_in_b_bits_id = auto_anon_out_b_bits_id;
  assign auto_anon_in_b_bits_resp = auto_anon_out_b_bits_resp;
  assign auto_anon_in_b_bits_echo_tl_state_size = auto_anon_out_b_bits_echo_tl_state_size;
  assign auto_anon_in_b_bits_echo_tl_state_source =
    auto_anon_out_b_bits_echo_tl_state_source;
  assign auto_anon_in_ar_ready = auto_anon_out_ar_ready;
  assign auto_anon_in_r_valid = locked;
  assign auto_anon_in_r_bits_id = _GEN_6[deq_id];
  assign auto_anon_in_r_bits_data = _GEN_7[deq_id];
  assign auto_anon_in_r_bits_resp = _GEN_8[deq_id];
  assign auto_anon_in_r_bits_echo_tl_state_size = _GEN_9[deq_id];
  assign auto_anon_in_r_bits_echo_tl_state_source = _GEN_10[deq_id];
  assign auto_anon_in_r_bits_last = anonIn_r_bits_last;
  assign auto_anon_out_aw_valid = auto_anon_in_aw_valid;
  assign auto_anon_out_aw_bits_id = auto_anon_in_aw_bits_id;
  assign auto_anon_out_aw_bits_addr = auto_anon_in_aw_bits_addr;
  assign auto_anon_out_aw_bits_len = auto_anon_in_aw_bits_len;
  assign auto_anon_out_aw_bits_size = auto_anon_in_aw_bits_size;
  assign auto_anon_out_aw_bits_burst = auto_anon_in_aw_bits_burst;
  assign auto_anon_out_aw_bits_lock = auto_anon_in_aw_bits_lock;
  assign auto_anon_out_aw_bits_cache = auto_anon_in_aw_bits_cache;
  assign auto_anon_out_aw_bits_prot = auto_anon_in_aw_bits_prot;
  assign auto_anon_out_aw_bits_qos = auto_anon_in_aw_bits_qos;
  assign auto_anon_out_aw_bits_echo_tl_state_size =
    auto_anon_in_aw_bits_echo_tl_state_size;
  assign auto_anon_out_aw_bits_echo_tl_state_source =
    auto_anon_in_aw_bits_echo_tl_state_source;
  assign auto_anon_out_w_valid = auto_anon_in_w_valid;
  assign auto_anon_out_w_bits_data = auto_anon_in_w_bits_data;
  assign auto_anon_out_w_bits_strb = auto_anon_in_w_bits_strb;
  assign auto_anon_out_w_bits_last = auto_anon_in_w_bits_last;
  assign auto_anon_out_b_ready = auto_anon_in_b_ready;
  assign auto_anon_out_ar_valid = auto_anon_in_ar_valid;
  assign auto_anon_out_ar_bits_id = auto_anon_in_ar_bits_id;
  assign auto_anon_out_ar_bits_addr = auto_anon_in_ar_bits_addr;
  assign auto_anon_out_ar_bits_len = auto_anon_in_ar_bits_len;
  assign auto_anon_out_ar_bits_size = auto_anon_in_ar_bits_size;
  assign auto_anon_out_ar_bits_burst = auto_anon_in_ar_bits_burst;
  assign auto_anon_out_ar_bits_lock = auto_anon_in_ar_bits_lock;
  assign auto_anon_out_ar_bits_cache = auto_anon_in_ar_bits_cache;
  assign auto_anon_out_ar_bits_prot = auto_anon_in_ar_bits_prot;
  assign auto_anon_out_ar_bits_qos = auto_anon_in_ar_bits_qos;
  assign auto_anon_out_ar_bits_echo_tl_state_size =
    auto_anon_in_ar_bits_echo_tl_state_size;
  assign auto_anon_out_ar_bits_echo_tl_state_source =
    auto_anon_in_ar_bits_echo_tl_state_source;
  assign auto_anon_out_r_ready = anonOut_r_ready;
endmodule

module AXI4IdIndexer(
  input         auto_in_aw_valid,
  input  [2:0]  auto_in_aw_bits_id,
  input  [30:0] auto_in_aw_bits_addr,
  input  [7:0]  auto_in_aw_bits_len,
  input  [2:0]  auto_in_aw_bits_size,
  input  [1:0]  auto_in_aw_bits_burst,
  input         auto_in_aw_bits_lock,
  input  [3:0]  auto_in_aw_bits_cache,
  input  [2:0]  auto_in_aw_bits_prot,
  input  [3:0]  auto_in_aw_bits_qos,
                auto_in_aw_bits_echo_tl_state_size,
  input  [4:0]  auto_in_aw_bits_echo_tl_state_source,
  input         auto_in_w_valid,
  input  [63:0] auto_in_w_bits_data,
  input  [7:0]  auto_in_w_bits_strb,
  input         auto_in_w_bits_last,
                auto_in_b_ready,
                auto_in_ar_valid,
  input  [2:0]  auto_in_ar_bits_id,
  input  [30:0] auto_in_ar_bits_addr,
  input  [7:0]  auto_in_ar_bits_len,
  input  [2:0]  auto_in_ar_bits_size,
  input  [1:0]  auto_in_ar_bits_burst,
  input         auto_in_ar_bits_lock,
  input  [3:0]  auto_in_ar_bits_cache,
  input  [2:0]  auto_in_ar_bits_prot,
  input  [3:0]  auto_in_ar_bits_qos,
                auto_in_ar_bits_echo_tl_state_size,
  input  [4:0]  auto_in_ar_bits_echo_tl_state_source,
  input         auto_in_r_ready,
                auto_out_aw_ready,
                auto_out_w_ready,
                auto_out_b_valid,
  input  [3:0]  auto_out_b_bits_id,
  input  [1:0]  auto_out_b_bits_resp,
  input  [3:0]  auto_out_b_bits_echo_tl_state_size,
  input  [4:0]  auto_out_b_bits_echo_tl_state_source,
  input         auto_out_ar_ready,
                auto_out_r_valid,
  input  [3:0]  auto_out_r_bits_id,
  input  [63:0] auto_out_r_bits_data,
  input  [1:0]  auto_out_r_bits_resp,
  input  [3:0]  auto_out_r_bits_echo_tl_state_size,
  input  [4:0]  auto_out_r_bits_echo_tl_state_source,
  input         auto_out_r_bits_last,
  output        auto_in_aw_ready,
                auto_in_w_ready,
                auto_in_b_valid,
  output [2:0]  auto_in_b_bits_id,
  output [1:0]  auto_in_b_bits_resp,
  output [3:0]  auto_in_b_bits_echo_tl_state_size,
  output [4:0]  auto_in_b_bits_echo_tl_state_source,
  output        auto_in_ar_ready,
                auto_in_r_valid,
  output [2:0]  auto_in_r_bits_id,
  output [63:0] auto_in_r_bits_data,
  output [1:0]  auto_in_r_bits_resp,
  output [3:0]  auto_in_r_bits_echo_tl_state_size,
  output [4:0]  auto_in_r_bits_echo_tl_state_source,
  output        auto_in_r_bits_last,
                auto_out_aw_valid,
  output [3:0]  auto_out_aw_bits_id,
  output [30:0] auto_out_aw_bits_addr,
  output [7:0]  auto_out_aw_bits_len,
  output [2:0]  auto_out_aw_bits_size,
  output [1:0]  auto_out_aw_bits_burst,
  output        auto_out_aw_bits_lock,
  output [3:0]  auto_out_aw_bits_cache,
  output [2:0]  auto_out_aw_bits_prot,
  output [3:0]  auto_out_aw_bits_qos,
                auto_out_aw_bits_echo_tl_state_size,
  output [4:0]  auto_out_aw_bits_echo_tl_state_source,
  output        auto_out_w_valid,
  output [63:0] auto_out_w_bits_data,
  output [7:0]  auto_out_w_bits_strb,
  output        auto_out_w_bits_last,
                auto_out_b_ready,
                auto_out_ar_valid,
  output [3:0]  auto_out_ar_bits_id,
  output [30:0] auto_out_ar_bits_addr,
  output [7:0]  auto_out_ar_bits_len,
  output [2:0]  auto_out_ar_bits_size,
  output [1:0]  auto_out_ar_bits_burst,
  output        auto_out_ar_bits_lock,
  output [3:0]  auto_out_ar_bits_cache,
  output [2:0]  auto_out_ar_bits_prot,
  output [3:0]  auto_out_ar_bits_qos,
                auto_out_ar_bits_echo_tl_state_size,
  output [4:0]  auto_out_ar_bits_echo_tl_state_source,
  output        auto_out_r_ready
);

  assign auto_in_aw_ready = auto_out_aw_ready;
  assign auto_in_w_ready = auto_out_w_ready;
  assign auto_in_b_valid = auto_out_b_valid;
  assign auto_in_b_bits_id = auto_out_b_bits_id[2:0];
  assign auto_in_b_bits_resp = auto_out_b_bits_resp;
  assign auto_in_b_bits_echo_tl_state_size = auto_out_b_bits_echo_tl_state_size;
  assign auto_in_b_bits_echo_tl_state_source = auto_out_b_bits_echo_tl_state_source;
  assign auto_in_ar_ready = auto_out_ar_ready;
  assign auto_in_r_valid = auto_out_r_valid;
  assign auto_in_r_bits_id = auto_out_r_bits_id[2:0];
  assign auto_in_r_bits_data = auto_out_r_bits_data;
  assign auto_in_r_bits_resp = auto_out_r_bits_resp;
  assign auto_in_r_bits_echo_tl_state_size = auto_out_r_bits_echo_tl_state_size;
  assign auto_in_r_bits_echo_tl_state_source = auto_out_r_bits_echo_tl_state_source;
  assign auto_in_r_bits_last = auto_out_r_bits_last;
  assign auto_out_aw_valid = auto_in_aw_valid;
  assign auto_out_aw_bits_id = {1'h0, auto_in_aw_bits_id};
  assign auto_out_aw_bits_addr = auto_in_aw_bits_addr;
  assign auto_out_aw_bits_len = auto_in_aw_bits_len;
  assign auto_out_aw_bits_size = auto_in_aw_bits_size;
  assign auto_out_aw_bits_burst = auto_in_aw_bits_burst;
  assign auto_out_aw_bits_lock = auto_in_aw_bits_lock;
  assign auto_out_aw_bits_cache = auto_in_aw_bits_cache;
  assign auto_out_aw_bits_prot = auto_in_aw_bits_prot;
  assign auto_out_aw_bits_qos = auto_in_aw_bits_qos;
  assign auto_out_aw_bits_echo_tl_state_size = auto_in_aw_bits_echo_tl_state_size;
  assign auto_out_aw_bits_echo_tl_state_source = auto_in_aw_bits_echo_tl_state_source;
  assign auto_out_w_valid = auto_in_w_valid;
  assign auto_out_w_bits_data = auto_in_w_bits_data;
  assign auto_out_w_bits_strb = auto_in_w_bits_strb;
  assign auto_out_w_bits_last = auto_in_w_bits_last;
  assign auto_out_b_ready = auto_in_b_ready;
  assign auto_out_ar_valid = auto_in_ar_valid;
  assign auto_out_ar_bits_id = {1'h0, auto_in_ar_bits_id};
  assign auto_out_ar_bits_addr = auto_in_ar_bits_addr;
  assign auto_out_ar_bits_len = auto_in_ar_bits_len;
  assign auto_out_ar_bits_size = auto_in_ar_bits_size;
  assign auto_out_ar_bits_burst = auto_in_ar_bits_burst;
  assign auto_out_ar_bits_lock = auto_in_ar_bits_lock;
  assign auto_out_ar_bits_cache = auto_in_ar_bits_cache;
  assign auto_out_ar_bits_prot = auto_in_ar_bits_prot;
  assign auto_out_ar_bits_qos = auto_in_ar_bits_qos;
  assign auto_out_ar_bits_echo_tl_state_size = auto_in_ar_bits_echo_tl_state_size;
  assign auto_out_ar_bits_echo_tl_state_source = auto_in_ar_bits_echo_tl_state_source;
  assign auto_out_r_ready = auto_in_r_ready;
endmodule

module TLMonitor_4(
  input        clock,
               reset,
               io_in_a_ready,
               io_in_a_valid,
  input [2:0]  io_in_a_bits_opcode,
               io_in_a_bits_param,
  input [3:0]  io_in_a_bits_size,
  input [4:0]  io_in_a_bits_source,
  input [30:0] io_in_a_bits_address,
  input [7:0]  io_in_a_bits_mask,
  input        io_in_a_bits_corrupt,
               io_in_d_ready,
               io_in_d_valid,
  input [2:0]  io_in_d_bits_opcode,
  input [3:0]  io_in_d_bits_size,
  input [4:0]  io_in_d_bits_source,
  input        io_in_d_bits_denied,
               io_in_d_bits_corrupt
);

  wire [31:0]  _plusarg_reader_1_out;
  wire [31:0]  _plusarg_reader_out;
  wire [22:0]  _GEN = 23'hFF << io_in_a_bits_size;
  wire         _GEN_0 = io_in_a_ready & io_in_a_valid;
  reg  [4:0]   a_first_counter;
  reg  [2:0]   opcode;
  reg  [2:0]   param;
  reg  [3:0]   size;
  reg  [4:0]   source;
  reg  [30:0]  address;
  reg  [4:0]   d_first_counter;
  reg  [2:0]   opcode_1;
  reg  [1:0]   param_1;
  reg  [3:0]   size_1;
  reg  [4:0]   source_1;
  reg          sink;
  reg          denied;
  reg  [18:0]  inflight;
  reg  [75:0]  inflight_opcodes;
  reg  [151:0] inflight_sizes;
  reg  [4:0]   a_first_counter_1;
  wire         a_first_1 = a_first_counter_1 == 5'h0;
  reg  [4:0]   d_first_counter_1;
  wire         d_first_1 = d_first_counter_1 == 5'h0;
  wire [31:0]  _GEN_1 = 32'h1 << io_in_a_bits_source;
  wire         _GEN_2 = _GEN_0 & a_first_1;
  wire         d_release_ack = io_in_d_bits_opcode == 3'h6;
  wire [31:0]  _GEN_3 = 32'h1 << io_in_d_bits_source;
  reg  [31:0]  watchdog;
  reg  [18:0]  inflight_1;
  reg  [151:0] inflight_sizes_1;
  reg  [4:0]   d_first_counter_2;
  wire         d_first_2 = d_first_counter_2 == 5'h0;
  reg  [31:0]  watchdog_1;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      automatic logic [7:0][2:0] _GEN_4 =
        '{3'h4, 3'h5, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic [7:0][2:0] _GEN_5 =
        '{3'h4, 3'h4, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic            _GEN_6 = io_in_a_bits_source[4:3] == 2'h0;
      automatic logic            _GEN_7 = io_in_a_bits_source[4:3] == 2'h1;
      automatic logic            _GEN_8 = io_in_a_bits_source == 5'h10;
      automatic logic            _GEN_9 = io_in_a_bits_source == 5'h11;
      automatic logic            _GEN_10 = io_in_a_bits_source == 5'h12;
      automatic logic            source_ok = _GEN_6 | _GEN_7 | _GEN_8 | _GEN_9 | _GEN_10;
      automatic logic [7:0]      _GEN_11 = io_in_a_bits_address[7:0] & ~(_GEN[7:0]);
      automatic logic            _GEN_12 = io_in_a_bits_size > 4'h2;
      automatic logic            mask_size = io_in_a_bits_size[1:0] == 2'h2;
      automatic logic            mask_acc =
        _GEN_12 | mask_size & ~(io_in_a_bits_address[2]);
      automatic logic            mask_acc_1 =
        _GEN_12 | mask_size & io_in_a_bits_address[2];
      automatic logic            mask_size_1 = io_in_a_bits_size[1:0] == 2'h1;
      automatic logic            mask_eq_2 =
        ~(io_in_a_bits_address[2]) & ~(io_in_a_bits_address[1]);
      automatic logic            mask_acc_2 = mask_acc | mask_size_1 & mask_eq_2;
      automatic logic            mask_eq_3 =
        ~(io_in_a_bits_address[2]) & io_in_a_bits_address[1];
      automatic logic            mask_acc_3 = mask_acc | mask_size_1 & mask_eq_3;
      automatic logic            mask_eq_4 =
        io_in_a_bits_address[2] & ~(io_in_a_bits_address[1]);
      automatic logic            mask_acc_4 = mask_acc_1 | mask_size_1 & mask_eq_4;
      automatic logic            mask_eq_5 =
        io_in_a_bits_address[2] & io_in_a_bits_address[1];
      automatic logic            mask_acc_5 = mask_acc_1 | mask_size_1 & mask_eq_5;
      automatic logic [7:0]      mask =
        {mask_acc_5 | mask_eq_5 & io_in_a_bits_address[0],
         mask_acc_5 | mask_eq_5 & ~(io_in_a_bits_address[0]),
         mask_acc_4 | mask_eq_4 & io_in_a_bits_address[0],
         mask_acc_4 | mask_eq_4 & ~(io_in_a_bits_address[0]),
         mask_acc_3 | mask_eq_3 & io_in_a_bits_address[0],
         mask_acc_3 | mask_eq_3 & ~(io_in_a_bits_address[0]),
         mask_acc_2 | mask_eq_2 & io_in_a_bits_address[0],
         mask_acc_2 | mask_eq_2 & ~(io_in_a_bits_address[0])};
      automatic logic            _GEN_13 = io_in_a_bits_size < 4'hD;
      automatic logic            _GEN_14 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_15 =
        _GEN_8 & io_in_a_bits_size == 4'h6 & _GEN_13 & (&(io_in_a_bits_address[30:29]));
      automatic logic            _GEN_16 = io_in_a_bits_param > 3'h2;
      automatic logic            _GEN_17 = io_in_a_bits_mask != 8'hFF;
      automatic logic            _GEN_18 =
        io_in_a_valid & (&io_in_a_bits_opcode) & ~reset;
      automatic logic            _GEN_19 =
        _GEN_13 & (_GEN_6 | _GEN_7 | _GEN_8 | _GEN_9 | _GEN_10);
      automatic logic            _GEN_20 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_21 = io_in_a_bits_mask != mask;
      automatic logic            _GEN_22 =
        _GEN_19 & io_in_a_bits_size < 4'h9 & (&(io_in_a_bits_address[30:29]));
      automatic logic            _GEN_23 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_24 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_25 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_26 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h3 & ~reset;
      automatic logic            _GEN_27 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h5 & ~reset;
      automatic logic            source_ok_1 =
        io_in_d_bits_source[4:3] == 2'h0 | io_in_d_bits_source[4:3] == 2'h1
        | io_in_d_bits_source == 5'h10 | io_in_d_bits_source == 5'h11
        | io_in_d_bits_source == 5'h12;
      automatic logic            _GEN_28 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_29 = io_in_d_bits_size < 4'h3;
      automatic logic            _GEN_30 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_31 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h5 & ~reset;
      automatic logic            _GEN_32 = ~io_in_d_bits_denied | io_in_d_bits_corrupt;
      automatic logic            _GEN_33 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_34 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_35 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_36 = io_in_a_valid & (|a_first_counter) & ~reset;
      automatic logic            _GEN_37 = io_in_d_valid & (|d_first_counter) & ~reset;
      automatic logic [75:0]     _GEN_38 =
        inflight_opcodes >> {69'h0, io_in_d_bits_source, 2'h0};
      automatic logic [151:0]    _GEN_39 = {144'h0, io_in_d_bits_source, 3'h0};
      automatic logic            _GEN_40 = io_in_a_valid & a_first_1;
      automatic logic [18:0]     a_set_wo_ready = _GEN_40 ? _GEN_1[18:0] : 19'h0;
      automatic logic            _GEN_41 = io_in_d_valid & d_first_1;
      automatic logic            _GEN_42 = _GEN_41 & ~d_release_ack;
      automatic logic            _GEN_43 = io_in_a_bits_source == io_in_d_bits_source;
      automatic logic            same_cycle_resp = _GEN_40 & _GEN_43;
      automatic logic [18:0]     _GEN_44 = {14'h0, io_in_d_bits_source};
      automatic logic            _GEN_45 = _GEN_42 & same_cycle_resp & ~reset;
      automatic logic            _GEN_46 = _GEN_42 & ~same_cycle_resp & ~reset;
      automatic logic [7:0]      _GEN_47 = {4'h0, io_in_d_bits_size};
      automatic logic            _GEN_48 =
        io_in_d_valid & d_first_2 & d_release_ack & ~reset;
      automatic logic [18:0]     _GEN_49 = inflight >> io_in_a_bits_source;
      automatic logic [18:0]     _GEN_50 = inflight >> _GEN_44;
      automatic logic [151:0]    _GEN_51 = inflight_sizes >> _GEN_39;
      automatic logic [18:0]     _GEN_52 = inflight_1 >> _GEN_44;
      automatic logic [151:0]    _GEN_53 = inflight_sizes_1 >> _GEN_39;
      if (_GEN_14) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & ~_GEN_15) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock carries invalid source ID (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & ~_GEN_12) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & (|_GEN_11)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & _GEN_16) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock carries invalid grow param (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & _GEN_17) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock is corrupt (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & ~_GEN_15) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm carries invalid source ID (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & ~_GEN_12) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & (|_GEN_11)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & _GEN_16) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm carries invalid grow param (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & ~(|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & _GEN_17) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm is corrupt (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & ~_GEN_19) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & ~(io_in_a_bits_size < 4'h7 & (&(io_in_a_bits_address[30:29])))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get carries invalid source ID (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & (|_GEN_11)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get address not aligned to size (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get carries invalid param (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & _GEN_21) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get contains invalid mask (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get is corrupt (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_23 & ~_GEN_22) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_23 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull carries invalid source ID (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_23 & (|_GEN_11)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull address not aligned to size (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_23 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull carries invalid param (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_23 & _GEN_21) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull contains invalid mask (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_24 & ~_GEN_22) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_24 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_24 & (|_GEN_11)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial address not aligned to size (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_24 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial carries invalid param (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_24 & (|(io_in_a_bits_mask & ~mask))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial contains invalid mask (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25 & (|_GEN_11)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25 & io_in_a_bits_param > 3'h4) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25 & _GEN_21) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_26) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_26 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical carries invalid source ID (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_26 & (|_GEN_11)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical address not aligned to size (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_26 & io_in_a_bits_param[2]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical carries invalid opcode param (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_26 & _GEN_21) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical contains invalid mask (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint carries invalid source ID (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & (|_GEN_11)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint address not aligned to size (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & (|(io_in_a_bits_param[2:1]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint carries invalid opcode param (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & _GEN_21) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint contains invalid mask (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint is corrupt (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & ~reset & (&io_in_d_bits_opcode)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel has invalid opcode (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & _GEN_29) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck is corrupt (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & io_in_d_bits_denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck is denied (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid source ID (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid sink ID (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & _GEN_29) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant smaller than a beat (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant is corrupt (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid source ID (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid sink ID (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & _GEN_29) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData smaller than a beat (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & ~_GEN_32) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData is denied but not corrupt (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_33 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_33 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck is corrupt (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_34 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_34 & ~_GEN_32) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData is denied but not corrupt (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_35 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck carries invalid source ID (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_35 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck is corrupt (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_36 & io_in_a_bits_opcode != opcode) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel opcode changed within multibeat operation (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_36 & io_in_a_bits_param != param) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel param changed within multibeat operation (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_36 & io_in_a_bits_size != size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel size changed within multibeat operation (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_36 & io_in_a_bits_source != source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel source changed within multibeat operation (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_36 & io_in_a_bits_address != address) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel address changed with multibeat operation (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & io_in_d_bits_opcode != opcode_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel opcode changed within multibeat operation (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & (|param_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel param changed within multibeat operation (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & io_in_d_bits_size != size_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel size changed within multibeat operation (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & io_in_d_bits_source != source_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel source changed within multibeat operation (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & sink) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel sink changed with multibeat operation (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & io_in_d_bits_denied != denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel denied changed with multibeat operation (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_2 & ~reset & _GEN_49[0]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel re-used a source ID (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & ~reset & ~(_GEN_50[0] | same_cycle_resp)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_45
          & ~(io_in_d_bits_opcode == _GEN_5[io_in_a_bits_opcode]
              | io_in_d_bits_opcode == _GEN_4[io_in_a_bits_opcode])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_45 & io_in_a_bits_size != io_in_d_bits_size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_46
          & ~(io_in_d_bits_opcode == _GEN_5[_GEN_38[3:1]]
              | io_in_d_bits_opcode == _GEN_4[_GEN_38[3:1]])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_46 & _GEN_47 != {1'h0, _GEN_51[7:1]}) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_41 & a_first_1 & io_in_a_valid & _GEN_43 & ~d_release_ack & ~reset
          & ~(~io_in_d_ready | io_in_a_ready)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ready check\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(a_set_wo_ready != (_GEN_42 ? _GEN_3[18:0] : 19'h0)
              | a_set_wo_ready == 19'h0)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' and 'D' concurrent, despite minlatency > 0 (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight == 19'h0 | _plusarg_reader_out == 32'h0
              | watchdog < _plusarg_reader_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_48 & ~(_GEN_52[0])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_48 & _GEN_47 != {1'h0, _GEN_53[7:1]}) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight_1 == 19'h0 | _plusarg_reader_1_out == 32'h0
              | watchdog_1 < _plusarg_reader_1_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/subsystem/Ports.scala:147:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    automatic logic _GEN_54;
    automatic logic _GEN_55;
    _GEN_54 = io_in_d_ready & io_in_d_valid;
    _GEN_55 = _GEN_54 & ~(|d_first_counter);
    if (reset) begin
      a_first_counter <= 5'h0;
      d_first_counter <= 5'h0;
      inflight <= 19'h0;
      inflight_opcodes <= 76'h0;
      inflight_sizes <= 152'h0;
      a_first_counter_1 <= 5'h0;
      d_first_counter_1 <= 5'h0;
      watchdog <= 32'h0;
      inflight_1 <= 19'h0;
      inflight_sizes_1 <= 152'h0;
      d_first_counter_2 <= 5'h0;
      watchdog_1 <= 32'h0;
    end
    else begin
      automatic logic         _GEN_56;
      automatic logic [270:0] _GEN_57 = 271'hFF << {263'h0, io_in_d_bits_source, 3'h0};
      automatic logic         _GEN_58;
      automatic logic [270:0] _GEN_59 = 271'hF << {264'h0, io_in_d_bits_source, 2'h0};
      automatic logic [258:0] _GEN_60 =
        {255'h0, _GEN_2 ? {io_in_a_bits_opcode, 1'h1} : 4'h0}
        << {252'h0, io_in_a_bits_source, 2'h0};
      automatic logic [259:0] _GEN_61 =
        {255'h0, _GEN_2 ? {io_in_a_bits_size, 1'h1} : 5'h0}
        << {252'h0, io_in_a_bits_source, 3'h0};
      _GEN_56 = _GEN_54 & d_first_1 & ~d_release_ack;
      _GEN_58 = _GEN_54 & d_first_2 & d_release_ack;
      if (_GEN_0) begin
        if (|a_first_counter)
          a_first_counter <= a_first_counter - 5'h1;
        else if (io_in_a_bits_opcode[2])
          a_first_counter <= 5'h0;
        else
          a_first_counter <= ~(_GEN[7:3]);
        if (a_first_1) begin
          if (io_in_a_bits_opcode[2])
            a_first_counter_1 <= 5'h0;
          else
            a_first_counter_1 <= ~(_GEN[7:3]);
        end
        else
          a_first_counter_1 <= a_first_counter_1 - 5'h1;
      end
      if (_GEN_54) begin
        automatic logic [22:0] _GEN_62 = 23'hFF << io_in_d_bits_size;
        if (|d_first_counter)
          d_first_counter <= d_first_counter - 5'h1;
        else if (io_in_d_bits_opcode[0])
          d_first_counter <= ~(_GEN_62[7:3]);
        else
          d_first_counter <= 5'h0;
        if (d_first_1) begin
          if (io_in_d_bits_opcode[0])
            d_first_counter_1 <= ~(_GEN_62[7:3]);
          else
            d_first_counter_1 <= 5'h0;
        end
        else
          d_first_counter_1 <= d_first_counter_1 - 5'h1;
        if (d_first_2) begin
          if (io_in_d_bits_opcode[0])
            d_first_counter_2 <= ~(_GEN_62[7:3]);
          else
            d_first_counter_2 <= 5'h0;
        end
        else
          d_first_counter_2 <= d_first_counter_2 - 5'h1;
        watchdog_1 <= 32'h0;
      end
      else
        watchdog_1 <= watchdog_1 + 32'h1;
      inflight <=
        (inflight | (_GEN_2 ? _GEN_1[18:0] : 19'h0)) & ~(_GEN_56 ? _GEN_3[18:0] : 19'h0);
      inflight_opcodes <=
        (inflight_opcodes | (_GEN_2 ? _GEN_60[75:0] : 76'h0))
        & ~(_GEN_56 ? _GEN_59[75:0] : 76'h0);
      inflight_sizes <=
        (inflight_sizes | (_GEN_2 ? _GEN_61[151:0] : 152'h0))
        & ~(_GEN_56 ? _GEN_57[151:0] : 152'h0);
      if (_GEN_0 | _GEN_54)
        watchdog <= 32'h0;
      else
        watchdog <= watchdog + 32'h1;
      inflight_1 <= inflight_1 & ~(_GEN_58 ? _GEN_3[18:0] : 19'h0);
      inflight_sizes_1 <= inflight_sizes_1 & ~(_GEN_58 ? _GEN_57[151:0] : 152'h0);
    end
    if (_GEN_0 & ~(|a_first_counter)) begin
      opcode <= io_in_a_bits_opcode;
      param <= io_in_a_bits_param;
      size <= io_in_a_bits_size;
      source <= io_in_a_bits_source;
      address <= io_in_a_bits_address;
    end
    if (_GEN_55) begin
      opcode_1 <= io_in_d_bits_opcode;
      param_1 <= 2'h0;
      size_1 <= io_in_d_bits_size;
      source_1 <= io_in_d_bits_source;
      denied <= io_in_d_bits_denied;
    end
    sink <= ~_GEN_55 & sink;
  end // always @(posedge)
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader (
    .out (_plusarg_reader_out)
  );
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader_1 (
    .out (_plusarg_reader_1_out)
  );
endmodule

module Queue1_AXI4BundleW(
  input         clock,
                reset,
                io_enq_valid,
  input  [63:0] io_enq_bits_data,
  input  [7:0]  io_enq_bits_strb,
  input         io_enq_bits_last,
                io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
  output [63:0] io_deq_bits_data,
  output [7:0]  io_deq_bits_strb,
  output        io_deq_bits_last
);

  reg  [72:0] ram;
  reg         full;
  wire        _io_deq_valid_output = io_enq_valid | full;
  wire        do_enq = ~(~full & io_deq_ready) & ~full & io_enq_valid;
  always @(posedge clock) begin
    if (do_enq)
      ram <= {io_enq_bits_last, io_enq_bits_strb, io_enq_bits_data};
    if (reset)
      full <= 1'h0;
    else if (do_enq != (full & io_deq_ready & _io_deq_valid_output))
      full <= do_enq;
  end // always @(posedge)
  assign io_enq_ready = ~full;
  assign io_deq_valid = _io_deq_valid_output;
  assign io_deq_bits_data = full ? ram[63:0] : io_enq_bits_data;
  assign io_deq_bits_strb = full ? ram[71:64] : io_enq_bits_strb;
  assign io_deq_bits_last = full ? ram[72] : io_enq_bits_last;
endmodule

module Queue1_AXI4BundleARW(
  input         clock,
                reset,
                io_enq_valid,
  input  [2:0]  io_enq_bits_id,
  input  [30:0] io_enq_bits_addr,
  input  [7:0]  io_enq_bits_len,
  input  [2:0]  io_enq_bits_size,
  input  [3:0]  io_enq_bits_cache,
  input  [2:0]  io_enq_bits_prot,
  input  [3:0]  io_enq_bits_echo_tl_state_size,
  input  [4:0]  io_enq_bits_echo_tl_state_source,
  input         io_enq_bits_wen,
                io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
  output [2:0]  io_deq_bits_id,
  output [30:0] io_deq_bits_addr,
  output [7:0]  io_deq_bits_len,
  output [2:0]  io_deq_bits_size,
  output [1:0]  io_deq_bits_burst,
  output        io_deq_bits_lock,
  output [3:0]  io_deq_bits_cache,
  output [2:0]  io_deq_bits_prot,
  output [3:0]  io_deq_bits_qos,
                io_deq_bits_echo_tl_state_size,
  output [4:0]  io_deq_bits_echo_tl_state_source,
  output        io_deq_bits_wen
);

  reg  [68:0] ram;
  reg         full;
  wire        _io_deq_valid_output = io_enq_valid | full;
  wire        do_enq = ~(~full & io_deq_ready) & ~full & io_enq_valid;
  always @(posedge clock) begin
    if (do_enq)
      ram <=
        {io_enq_bits_wen,
         io_enq_bits_echo_tl_state_source,
         io_enq_bits_echo_tl_state_size,
         4'h0,
         io_enq_bits_prot,
         io_enq_bits_cache,
         3'h1,
         io_enq_bits_size,
         io_enq_bits_len,
         io_enq_bits_addr,
         io_enq_bits_id};
    if (reset)
      full <= 1'h0;
    else if (do_enq != (full & io_deq_ready & _io_deq_valid_output))
      full <= do_enq;
  end // always @(posedge)
  assign io_enq_ready = ~full;
  assign io_deq_valid = _io_deq_valid_output;
  assign io_deq_bits_id = full ? ram[2:0] : io_enq_bits_id;
  assign io_deq_bits_addr = full ? ram[33:3] : io_enq_bits_addr;
  assign io_deq_bits_len = full ? ram[41:34] : io_enq_bits_len;
  assign io_deq_bits_size = full ? ram[44:42] : io_enq_bits_size;
  assign io_deq_bits_burst = full ? ram[46:45] : 2'h1;
  assign io_deq_bits_lock = full & ram[47];
  assign io_deq_bits_cache = full ? ram[51:48] : io_enq_bits_cache;
  assign io_deq_bits_prot = full ? ram[54:52] : io_enq_bits_prot;
  assign io_deq_bits_qos = full ? ram[58:55] : 4'h0;
  assign io_deq_bits_echo_tl_state_size =
    full ? ram[62:59] : io_enq_bits_echo_tl_state_size;
  assign io_deq_bits_echo_tl_state_source =
    full ? ram[67:63] : io_enq_bits_echo_tl_state_source;
  assign io_deq_bits_wen = full ? ram[68] : io_enq_bits_wen;
endmodule

module TLToAXI4(
  input         clock,
                reset,
                auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
                auto_in_a_bits_param,
  input  [3:0]  auto_in_a_bits_size,
  input  [4:0]  auto_in_a_bits_source,
  input  [30:0] auto_in_a_bits_address,
  input         auto_in_a_bits_user_amba_prot_bufferable,
                auto_in_a_bits_user_amba_prot_modifiable,
                auto_in_a_bits_user_amba_prot_readalloc,
                auto_in_a_bits_user_amba_prot_writealloc,
                auto_in_a_bits_user_amba_prot_privileged,
                auto_in_a_bits_user_amba_prot_secure,
                auto_in_a_bits_user_amba_prot_fetch,
  input  [7:0]  auto_in_a_bits_mask,
  input  [63:0] auto_in_a_bits_data,
  input         auto_in_a_bits_corrupt,
                auto_in_d_ready,
                auto_out_aw_ready,
                auto_out_w_ready,
                auto_out_b_valid,
  input  [2:0]  auto_out_b_bits_id,
  input  [1:0]  auto_out_b_bits_resp,
  input  [3:0]  auto_out_b_bits_echo_tl_state_size,
  input  [4:0]  auto_out_b_bits_echo_tl_state_source,
  input         auto_out_ar_ready,
                auto_out_r_valid,
  input  [2:0]  auto_out_r_bits_id,
  input  [63:0] auto_out_r_bits_data,
  input  [1:0]  auto_out_r_bits_resp,
  input  [3:0]  auto_out_r_bits_echo_tl_state_size,
  input  [4:0]  auto_out_r_bits_echo_tl_state_source,
  input         auto_out_r_bits_last,
  output        auto_in_a_ready,
                auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
  output [3:0]  auto_in_d_bits_size,
  output [4:0]  auto_in_d_bits_source,
  output        auto_in_d_bits_denied,
  output [63:0] auto_in_d_bits_data,
  output        auto_in_d_bits_corrupt,
                auto_out_aw_valid,
  output [2:0]  auto_out_aw_bits_id,
  output [30:0] auto_out_aw_bits_addr,
  output [7:0]  auto_out_aw_bits_len,
  output [2:0]  auto_out_aw_bits_size,
  output [1:0]  auto_out_aw_bits_burst,
  output        auto_out_aw_bits_lock,
  output [3:0]  auto_out_aw_bits_cache,
  output [2:0]  auto_out_aw_bits_prot,
  output [3:0]  auto_out_aw_bits_qos,
                auto_out_aw_bits_echo_tl_state_size,
  output [4:0]  auto_out_aw_bits_echo_tl_state_source,
  output        auto_out_w_valid,
  output [63:0] auto_out_w_bits_data,
  output [7:0]  auto_out_w_bits_strb,
  output        auto_out_w_bits_last,
                auto_out_b_ready,
                auto_out_ar_valid,
  output [2:0]  auto_out_ar_bits_id,
  output [30:0] auto_out_ar_bits_addr,
  output [7:0]  auto_out_ar_bits_len,
  output [2:0]  auto_out_ar_bits_size,
  output [1:0]  auto_out_ar_bits_burst,
  output        auto_out_ar_bits_lock,
  output [3:0]  auto_out_ar_bits_cache,
  output [2:0]  auto_out_ar_bits_prot,
  output [3:0]  auto_out_ar_bits_qos,
                auto_out_ar_bits_echo_tl_state_size,
  output [4:0]  auto_out_ar_bits_echo_tl_state_source,
  output        auto_out_r_ready
);

  reg              count_5;
  reg              count_4;
  wire             idStall_2;
  wire             idStall_1;
  reg              count_1;
  wire             _queue_arw_deq_q_io_enq_ready;
  wire             _queue_arw_deq_q_io_deq_valid;
  wire [2:0]       _queue_arw_deq_q_io_deq_bits_id;
  wire [30:0]      _queue_arw_deq_q_io_deq_bits_addr;
  wire [7:0]       _queue_arw_deq_q_io_deq_bits_len;
  wire [2:0]       _queue_arw_deq_q_io_deq_bits_size;
  wire [1:0]       _queue_arw_deq_q_io_deq_bits_burst;
  wire             _queue_arw_deq_q_io_deq_bits_lock;
  wire [3:0]       _queue_arw_deq_q_io_deq_bits_cache;
  wire [2:0]       _queue_arw_deq_q_io_deq_bits_prot;
  wire [3:0]       _queue_arw_deq_q_io_deq_bits_qos;
  wire [3:0]       _queue_arw_deq_q_io_deq_bits_echo_tl_state_size;
  wire [4:0]       _queue_arw_deq_q_io_deq_bits_echo_tl_state_source;
  wire             _queue_arw_deq_q_io_deq_bits_wen;
  wire             _nodeOut_w_deq_q_io_enq_ready;
  wire [31:0][2:0] _GEN =
    '{3'h1,
      3'h1,
      3'h1,
      3'h1,
      3'h1,
      3'h1,
      3'h1,
      3'h1,
      3'h1,
      3'h1,
      3'h1,
      3'h1,
      3'h1,
      3'h0,
      3'h3,
      3'h4,
      3'h2,
      3'h2,
      3'h2,
      3'h2,
      3'h2,
      3'h2,
      3'h2,
      3'h2,
      3'h1,
      3'h1,
      3'h1,
      3'h1,
      3'h1,
      3'h1,
      3'h1,
      3'h1};
  wire [22:0]      _GEN_0 = 23'hFF << auto_in_a_bits_size;
  reg  [4:0]       counter;
  wire             a_first = counter == 5'h0;
  wire             out_w_bits_last =
    counter == 5'h1 | (auto_in_a_bits_opcode[2] ? 5'h0 : ~(_GEN_0[7:3])) == 5'h0;
  reg              doneAW;
  wire [25:0]      _GEN_1 = 26'h7FF << auto_in_a_bits_size;
  wire [31:0]      _GEN_2 =
    {{idStall_1},
     {idStall_1},
     {idStall_1},
     {idStall_1},
     {idStall_1},
     {idStall_1},
     {idStall_1},
     {idStall_1},
     {idStall_1},
     {idStall_1},
     {idStall_1},
     {idStall_1},
     {idStall_1},
     {count_1},
     {count_4},
     {count_5},
     {idStall_2},
     {idStall_2},
     {idStall_2},
     {idStall_2},
     {idStall_2},
     {idStall_2},
     {idStall_2},
     {idStall_2},
     {idStall_1},
     {idStall_1},
     {idStall_1},
     {idStall_1},
     {idStall_1},
     {idStall_1},
     {idStall_1},
     {idStall_1}};
  wire             stall = _GEN_2[auto_in_a_bits_source] & a_first;
  wire             _GEN_3 = doneAW | _queue_arw_deq_q_io_enq_ready;
  wire             nodeIn_a_ready =
    ~stall
    & (auto_in_a_bits_opcode[2]
         ? _queue_arw_deq_q_io_enq_ready
         : _GEN_3 & _nodeOut_w_deq_q_io_enq_ready);
  wire             _GEN_4 = ~stall & auto_in_a_valid;
  wire             out_arw_valid =
    _GEN_4 & (auto_in_a_bits_opcode[2] | ~doneAW & _nodeOut_w_deq_q_io_enq_ready);
  reg              r_holds_d;
  reg  [2:0]       b_delay;
  wire             r_wins = auto_out_r_valid & b_delay != 3'h7 | r_holds_d;
  wire             nodeOut_r_ready = auto_in_d_ready & r_wins;
  wire             nodeOut_b_ready = auto_in_d_ready & ~r_wins;
  wire             nodeIn_d_valid = r_wins ? auto_out_r_valid : auto_out_b_valid;
  reg              r_first;
  reg              r_denied_r;
  wire             r_d_denied = r_first ? (&auto_out_r_bits_resp) : r_denied_r;
  wire [2:0]       nodeIn_d_bits_opcode = {2'h0, r_wins};
  wire [3:0]       nodeIn_d_bits_size =
    r_wins ? auto_out_r_bits_echo_tl_state_size : auto_out_b_bits_echo_tl_state_size;
  wire [4:0]       nodeIn_d_bits_source =
    r_wins ? auto_out_r_bits_echo_tl_state_source : auto_out_b_bits_echo_tl_state_source;
  wire             nodeIn_d_bits_denied = r_wins ? r_d_denied : (|auto_out_b_bits_resp);
  wire             nodeIn_d_bits_corrupt =
    r_wins & ((|auto_out_r_bits_resp) | r_d_denied);
  wire [2:0]       d_sel_shiftAmount = r_wins ? auto_out_r_bits_id : auto_out_b_bits_id;
  wire             d_last = ~r_wins | auto_out_r_bits_last;
  wire             _GEN_5 = _queue_arw_deq_q_io_enq_ready & out_arw_valid;
  wire             inc = _GEN[auto_in_a_bits_source] == 3'h0 & _GEN_5;
  wire             _GEN_6 = auto_in_d_ready & nodeIn_d_valid;
  wire             dec = d_sel_shiftAmount == 3'h0 & d_last & _GEN_6;
  reg  [3:0]       count_2;
  reg              write_1;
  wire             inc_1 = _GEN[auto_in_a_bits_source] == 3'h1 & _GEN_5;
  wire             dec_1 = d_sel_shiftAmount == 3'h1 & d_last & _GEN_6;
  assign idStall_1 =
    (|count_2) & write_1 != ~(auto_in_a_bits_opcode[2]) | count_2 == 4'h8;
  reg  [3:0]       count_3;
  reg              write_2;
  wire             inc_2 = _GEN[auto_in_a_bits_source] == 3'h2 & _GEN_5;
  wire             dec_2 = d_sel_shiftAmount == 3'h2 & d_last & _GEN_6;
  assign idStall_2 =
    (|count_3) & write_2 != ~(auto_in_a_bits_opcode[2]) | count_3 == 4'h8;
  wire             inc_3 = _GEN[auto_in_a_bits_source] == 3'h3 & _GEN_5;
  wire             dec_3 = d_sel_shiftAmount == 3'h3 & d_last & _GEN_6;
  wire             inc_4 = _GEN[auto_in_a_bits_source] == 3'h4 & _GEN_5;
  wire             dec_4 = d_sel_shiftAmount == 3'h4 & d_last & _GEN_6;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (~reset & ~(~dec | count_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc | ~count_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_1 | (|count_2))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_1 | count_2 != 4'h8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_2 | (|count_3))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_2 | count_3 != 4'h8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_3 | count_4)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_3 | ~count_4)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_4 | count_5)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_4 | ~count_5)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    if (reset) begin
      counter <= 5'h0;
      doneAW <= 1'h0;
      r_holds_d <= 1'h0;
      r_first <= 1'h1;
      count_1 <= 1'h0;
      count_2 <= 4'h0;
      count_3 <= 4'h0;
      count_4 <= 1'h0;
      count_5 <= 1'h0;
    end
    else begin
      if (nodeIn_a_ready & auto_in_a_valid) begin
        if (a_first) begin
          if (auto_in_a_bits_opcode[2])
            counter <= 5'h0;
          else
            counter <= ~(_GEN_0[7:3]);
        end
        else
          counter <= counter - 5'h1;
        doneAW <= ~out_w_bits_last;
      end
      if (nodeOut_r_ready & auto_out_r_valid) begin
        r_holds_d <= ~auto_out_r_bits_last;
        r_first <= auto_out_r_bits_last;
      end
      count_1 <= count_1 + inc - dec;
      count_2 <= count_2 + {3'h0, inc_1} - {3'h0, dec_1};
      count_3 <= count_3 + {3'h0, inc_2} - {3'h0, dec_2};
      count_4 <= count_4 + inc_3 - dec_3;
      count_5 <= count_5 + inc_4 - dec_4;
    end
    if (auto_out_b_valid & ~nodeOut_b_ready)
      b_delay <= b_delay + 3'h1;
    else
      b_delay <= 3'h0;
    if (r_first)
      r_denied_r <= &auto_out_r_bits_resp;
    if (inc_1)
      write_1 <= ~(auto_in_a_bits_opcode[2]);
    if (inc_2)
      write_2 <= ~(auto_in_a_bits_opcode[2]);
  end // always @(posedge)
  TLMonitor_4 monitor (
    .clock                (clock),
    .reset                (reset),
    .io_in_a_ready        (nodeIn_a_ready),
    .io_in_a_valid        (auto_in_a_valid),
    .io_in_a_bits_opcode  (auto_in_a_bits_opcode),
    .io_in_a_bits_param   (auto_in_a_bits_param),
    .io_in_a_bits_size    (auto_in_a_bits_size),
    .io_in_a_bits_source  (auto_in_a_bits_source),
    .io_in_a_bits_address (auto_in_a_bits_address),
    .io_in_a_bits_mask    (auto_in_a_bits_mask),
    .io_in_a_bits_corrupt (auto_in_a_bits_corrupt),
    .io_in_d_ready        (auto_in_d_ready),
    .io_in_d_valid        (nodeIn_d_valid),
    .io_in_d_bits_opcode  (nodeIn_d_bits_opcode),
    .io_in_d_bits_size    (nodeIn_d_bits_size),
    .io_in_d_bits_source  (nodeIn_d_bits_source),
    .io_in_d_bits_denied  (nodeIn_d_bits_denied),
    .io_in_d_bits_corrupt (nodeIn_d_bits_corrupt)
  );
  Queue1_AXI4BundleW nodeOut_w_deq_q (
    .clock            (clock),
    .reset            (reset),
    .io_enq_valid     (_GEN_4 & ~(auto_in_a_bits_opcode[2]) & _GEN_3),
    .io_enq_bits_data (auto_in_a_bits_data),
    .io_enq_bits_strb (auto_in_a_bits_mask),
    .io_enq_bits_last (out_w_bits_last),
    .io_deq_ready     (auto_out_w_ready),
    .io_enq_ready     (_nodeOut_w_deq_q_io_enq_ready),
    .io_deq_valid     (auto_out_w_valid),
    .io_deq_bits_data (auto_out_w_bits_data),
    .io_deq_bits_strb (auto_out_w_bits_strb),
    .io_deq_bits_last (auto_out_w_bits_last)
  );
  Queue1_AXI4BundleARW queue_arw_deq_q (
    .clock                            (clock),
    .reset                            (reset),
    .io_enq_valid                     (out_arw_valid),
    .io_enq_bits_id                   (_GEN[auto_in_a_bits_source]),
    .io_enq_bits_addr                 (auto_in_a_bits_address),
    .io_enq_bits_len                  (~(_GEN_1[10:3])),
    .io_enq_bits_size
      (auto_in_a_bits_size > 4'h2 ? 3'h3 : auto_in_a_bits_size[2:0]),
    .io_enq_bits_cache
      ({auto_in_a_bits_user_amba_prot_writealloc,
        auto_in_a_bits_user_amba_prot_readalloc,
        auto_in_a_bits_user_amba_prot_modifiable,
        auto_in_a_bits_user_amba_prot_bufferable}),
    .io_enq_bits_prot
      ({auto_in_a_bits_user_amba_prot_fetch,
        ~auto_in_a_bits_user_amba_prot_secure,
        auto_in_a_bits_user_amba_prot_privileged}),
    .io_enq_bits_echo_tl_state_size   (auto_in_a_bits_size),
    .io_enq_bits_echo_tl_state_source (auto_in_a_bits_source),
    .io_enq_bits_wen                  (~(auto_in_a_bits_opcode[2])),
    .io_deq_ready
      (_queue_arw_deq_q_io_deq_bits_wen ? auto_out_aw_ready : auto_out_ar_ready),
    .io_enq_ready                     (_queue_arw_deq_q_io_enq_ready),
    .io_deq_valid                     (_queue_arw_deq_q_io_deq_valid),
    .io_deq_bits_id                   (_queue_arw_deq_q_io_deq_bits_id),
    .io_deq_bits_addr                 (_queue_arw_deq_q_io_deq_bits_addr),
    .io_deq_bits_len                  (_queue_arw_deq_q_io_deq_bits_len),
    .io_deq_bits_size                 (_queue_arw_deq_q_io_deq_bits_size),
    .io_deq_bits_burst                (_queue_arw_deq_q_io_deq_bits_burst),
    .io_deq_bits_lock                 (_queue_arw_deq_q_io_deq_bits_lock),
    .io_deq_bits_cache                (_queue_arw_deq_q_io_deq_bits_cache),
    .io_deq_bits_prot                 (_queue_arw_deq_q_io_deq_bits_prot),
    .io_deq_bits_qos                  (_queue_arw_deq_q_io_deq_bits_qos),
    .io_deq_bits_echo_tl_state_size   (_queue_arw_deq_q_io_deq_bits_echo_tl_state_size),
    .io_deq_bits_echo_tl_state_source (_queue_arw_deq_q_io_deq_bits_echo_tl_state_source),
    .io_deq_bits_wen                  (_queue_arw_deq_q_io_deq_bits_wen)
  );
  assign auto_in_a_ready = nodeIn_a_ready;
  assign auto_in_d_valid = nodeIn_d_valid;
  assign auto_in_d_bits_opcode = nodeIn_d_bits_opcode;
  assign auto_in_d_bits_size = nodeIn_d_bits_size;
  assign auto_in_d_bits_source = nodeIn_d_bits_source;
  assign auto_in_d_bits_denied = nodeIn_d_bits_denied;
  assign auto_in_d_bits_data = auto_out_r_bits_data;
  assign auto_in_d_bits_corrupt = nodeIn_d_bits_corrupt;
  assign auto_out_aw_valid =
    _queue_arw_deq_q_io_deq_valid & _queue_arw_deq_q_io_deq_bits_wen;
  assign auto_out_aw_bits_id = _queue_arw_deq_q_io_deq_bits_id;
  assign auto_out_aw_bits_addr = _queue_arw_deq_q_io_deq_bits_addr;
  assign auto_out_aw_bits_len = _queue_arw_deq_q_io_deq_bits_len;
  assign auto_out_aw_bits_size = _queue_arw_deq_q_io_deq_bits_size;
  assign auto_out_aw_bits_burst = _queue_arw_deq_q_io_deq_bits_burst;
  assign auto_out_aw_bits_lock = _queue_arw_deq_q_io_deq_bits_lock;
  assign auto_out_aw_bits_cache = _queue_arw_deq_q_io_deq_bits_cache;
  assign auto_out_aw_bits_prot = _queue_arw_deq_q_io_deq_bits_prot;
  assign auto_out_aw_bits_qos = _queue_arw_deq_q_io_deq_bits_qos;
  assign auto_out_aw_bits_echo_tl_state_size =
    _queue_arw_deq_q_io_deq_bits_echo_tl_state_size;
  assign auto_out_aw_bits_echo_tl_state_source =
    _queue_arw_deq_q_io_deq_bits_echo_tl_state_source;
  assign auto_out_b_ready = nodeOut_b_ready;
  assign auto_out_ar_valid =
    _queue_arw_deq_q_io_deq_valid & ~_queue_arw_deq_q_io_deq_bits_wen;
  assign auto_out_ar_bits_id = _queue_arw_deq_q_io_deq_bits_id;
  assign auto_out_ar_bits_addr = _queue_arw_deq_q_io_deq_bits_addr;
  assign auto_out_ar_bits_len = _queue_arw_deq_q_io_deq_bits_len;
  assign auto_out_ar_bits_size = _queue_arw_deq_q_io_deq_bits_size;
  assign auto_out_ar_bits_burst = _queue_arw_deq_q_io_deq_bits_burst;
  assign auto_out_ar_bits_lock = _queue_arw_deq_q_io_deq_bits_lock;
  assign auto_out_ar_bits_cache = _queue_arw_deq_q_io_deq_bits_cache;
  assign auto_out_ar_bits_prot = _queue_arw_deq_q_io_deq_bits_prot;
  assign auto_out_ar_bits_qos = _queue_arw_deq_q_io_deq_bits_qos;
  assign auto_out_ar_bits_echo_tl_state_size =
    _queue_arw_deq_q_io_deq_bits_echo_tl_state_size;
  assign auto_out_ar_bits_echo_tl_state_source =
    _queue_arw_deq_q_io_deq_bits_echo_tl_state_source;
  assign auto_out_r_ready = nodeOut_r_ready;
endmodule

module TLInterconnectCoupler_sbus_to_port_named_mmio_port_axi4(
  input         clock,
                reset,
                auto_axi4buf_out_aw_ready,
                auto_axi4buf_out_w_ready,
                auto_axi4buf_out_b_valid,
  input  [3:0]  auto_axi4buf_out_b_bits_id,
  input  [1:0]  auto_axi4buf_out_b_bits_resp,
  input         auto_axi4buf_out_ar_ready,
                auto_axi4buf_out_r_valid,
  input  [3:0]  auto_axi4buf_out_r_bits_id,
  input  [63:0] auto_axi4buf_out_r_bits_data,
  input  [1:0]  auto_axi4buf_out_r_bits_resp,
  input         auto_axi4buf_out_r_bits_last,
                auto_tl_in_a_valid,
  input  [2:0]  auto_tl_in_a_bits_opcode,
                auto_tl_in_a_bits_param,
  input  [3:0]  auto_tl_in_a_bits_size,
  input  [4:0]  auto_tl_in_a_bits_source,
  input  [30:0] auto_tl_in_a_bits_address,
  input         auto_tl_in_a_bits_user_amba_prot_bufferable,
                auto_tl_in_a_bits_user_amba_prot_modifiable,
                auto_tl_in_a_bits_user_amba_prot_readalloc,
                auto_tl_in_a_bits_user_amba_prot_writealloc,
                auto_tl_in_a_bits_user_amba_prot_privileged,
                auto_tl_in_a_bits_user_amba_prot_secure,
                auto_tl_in_a_bits_user_amba_prot_fetch,
  input  [7:0]  auto_tl_in_a_bits_mask,
  input  [63:0] auto_tl_in_a_bits_data,
  input         auto_tl_in_a_bits_corrupt,
                auto_tl_in_d_ready,
  output        auto_axi4buf_out_aw_valid,
  output [3:0]  auto_axi4buf_out_aw_bits_id,
  output [30:0] auto_axi4buf_out_aw_bits_addr,
  output [7:0]  auto_axi4buf_out_aw_bits_len,
  output [2:0]  auto_axi4buf_out_aw_bits_size,
  output [1:0]  auto_axi4buf_out_aw_bits_burst,
  output        auto_axi4buf_out_aw_bits_lock,
  output [3:0]  auto_axi4buf_out_aw_bits_cache,
  output [2:0]  auto_axi4buf_out_aw_bits_prot,
  output [3:0]  auto_axi4buf_out_aw_bits_qos,
  output        auto_axi4buf_out_w_valid,
  output [63:0] auto_axi4buf_out_w_bits_data,
  output [7:0]  auto_axi4buf_out_w_bits_strb,
  output        auto_axi4buf_out_w_bits_last,
                auto_axi4buf_out_b_ready,
                auto_axi4buf_out_ar_valid,
  output [3:0]  auto_axi4buf_out_ar_bits_id,
  output [30:0] auto_axi4buf_out_ar_bits_addr,
  output [7:0]  auto_axi4buf_out_ar_bits_len,
  output [2:0]  auto_axi4buf_out_ar_bits_size,
  output [1:0]  auto_axi4buf_out_ar_bits_burst,
  output        auto_axi4buf_out_ar_bits_lock,
  output [3:0]  auto_axi4buf_out_ar_bits_cache,
  output [2:0]  auto_axi4buf_out_ar_bits_prot,
  output [3:0]  auto_axi4buf_out_ar_bits_qos,
  output        auto_axi4buf_out_r_ready,
                auto_tl_in_a_ready,
                auto_tl_in_d_valid,
  output [2:0]  auto_tl_in_d_bits_opcode,
  output [3:0]  auto_tl_in_d_bits_size,
  output [4:0]  auto_tl_in_d_bits_source,
  output        auto_tl_in_d_bits_denied,
  output [63:0] auto_tl_in_d_bits_data,
  output        auto_tl_in_d_bits_corrupt
);

  wire        _tl2axi4_auto_out_aw_valid;
  wire [2:0]  _tl2axi4_auto_out_aw_bits_id;
  wire [30:0] _tl2axi4_auto_out_aw_bits_addr;
  wire [7:0]  _tl2axi4_auto_out_aw_bits_len;
  wire [2:0]  _tl2axi4_auto_out_aw_bits_size;
  wire [1:0]  _tl2axi4_auto_out_aw_bits_burst;
  wire        _tl2axi4_auto_out_aw_bits_lock;
  wire [3:0]  _tl2axi4_auto_out_aw_bits_cache;
  wire [2:0]  _tl2axi4_auto_out_aw_bits_prot;
  wire [3:0]  _tl2axi4_auto_out_aw_bits_qos;
  wire [3:0]  _tl2axi4_auto_out_aw_bits_echo_tl_state_size;
  wire [4:0]  _tl2axi4_auto_out_aw_bits_echo_tl_state_source;
  wire        _tl2axi4_auto_out_w_valid;
  wire [63:0] _tl2axi4_auto_out_w_bits_data;
  wire [7:0]  _tl2axi4_auto_out_w_bits_strb;
  wire        _tl2axi4_auto_out_w_bits_last;
  wire        _tl2axi4_auto_out_b_ready;
  wire        _tl2axi4_auto_out_ar_valid;
  wire [2:0]  _tl2axi4_auto_out_ar_bits_id;
  wire [30:0] _tl2axi4_auto_out_ar_bits_addr;
  wire [7:0]  _tl2axi4_auto_out_ar_bits_len;
  wire [2:0]  _tl2axi4_auto_out_ar_bits_size;
  wire [1:0]  _tl2axi4_auto_out_ar_bits_burst;
  wire        _tl2axi4_auto_out_ar_bits_lock;
  wire [3:0]  _tl2axi4_auto_out_ar_bits_cache;
  wire [2:0]  _tl2axi4_auto_out_ar_bits_prot;
  wire [3:0]  _tl2axi4_auto_out_ar_bits_qos;
  wire [3:0]  _tl2axi4_auto_out_ar_bits_echo_tl_state_size;
  wire [4:0]  _tl2axi4_auto_out_ar_bits_echo_tl_state_source;
  wire        _tl2axi4_auto_out_r_ready;
  wire        _axi4index_auto_in_aw_ready;
  wire        _axi4index_auto_in_w_ready;
  wire        _axi4index_auto_in_b_valid;
  wire [2:0]  _axi4index_auto_in_b_bits_id;
  wire [1:0]  _axi4index_auto_in_b_bits_resp;
  wire [3:0]  _axi4index_auto_in_b_bits_echo_tl_state_size;
  wire [4:0]  _axi4index_auto_in_b_bits_echo_tl_state_source;
  wire        _axi4index_auto_in_ar_ready;
  wire        _axi4index_auto_in_r_valid;
  wire [2:0]  _axi4index_auto_in_r_bits_id;
  wire [63:0] _axi4index_auto_in_r_bits_data;
  wire [1:0]  _axi4index_auto_in_r_bits_resp;
  wire [3:0]  _axi4index_auto_in_r_bits_echo_tl_state_size;
  wire [4:0]  _axi4index_auto_in_r_bits_echo_tl_state_source;
  wire        _axi4index_auto_in_r_bits_last;
  wire        _axi4index_auto_out_aw_valid;
  wire [3:0]  _axi4index_auto_out_aw_bits_id;
  wire [30:0] _axi4index_auto_out_aw_bits_addr;
  wire [7:0]  _axi4index_auto_out_aw_bits_len;
  wire [2:0]  _axi4index_auto_out_aw_bits_size;
  wire [1:0]  _axi4index_auto_out_aw_bits_burst;
  wire        _axi4index_auto_out_aw_bits_lock;
  wire [3:0]  _axi4index_auto_out_aw_bits_cache;
  wire [2:0]  _axi4index_auto_out_aw_bits_prot;
  wire [3:0]  _axi4index_auto_out_aw_bits_qos;
  wire [3:0]  _axi4index_auto_out_aw_bits_echo_tl_state_size;
  wire [4:0]  _axi4index_auto_out_aw_bits_echo_tl_state_source;
  wire        _axi4index_auto_out_w_valid;
  wire [63:0] _axi4index_auto_out_w_bits_data;
  wire [7:0]  _axi4index_auto_out_w_bits_strb;
  wire        _axi4index_auto_out_w_bits_last;
  wire        _axi4index_auto_out_b_ready;
  wire        _axi4index_auto_out_ar_valid;
  wire [3:0]  _axi4index_auto_out_ar_bits_id;
  wire [30:0] _axi4index_auto_out_ar_bits_addr;
  wire [7:0]  _axi4index_auto_out_ar_bits_len;
  wire [2:0]  _axi4index_auto_out_ar_bits_size;
  wire [1:0]  _axi4index_auto_out_ar_bits_burst;
  wire        _axi4index_auto_out_ar_bits_lock;
  wire [3:0]  _axi4index_auto_out_ar_bits_cache;
  wire [2:0]  _axi4index_auto_out_ar_bits_prot;
  wire [3:0]  _axi4index_auto_out_ar_bits_qos;
  wire [3:0]  _axi4index_auto_out_ar_bits_echo_tl_state_size;
  wire [4:0]  _axi4index_auto_out_ar_bits_echo_tl_state_source;
  wire        _axi4index_auto_out_r_ready;
  wire        _axi4deint_auto_anon_in_aw_ready;
  wire        _axi4deint_auto_anon_in_w_ready;
  wire        _axi4deint_auto_anon_in_b_valid;
  wire [3:0]  _axi4deint_auto_anon_in_b_bits_id;
  wire [1:0]  _axi4deint_auto_anon_in_b_bits_resp;
  wire [3:0]  _axi4deint_auto_anon_in_b_bits_echo_tl_state_size;
  wire [4:0]  _axi4deint_auto_anon_in_b_bits_echo_tl_state_source;
  wire        _axi4deint_auto_anon_in_ar_ready;
  wire        _axi4deint_auto_anon_in_r_valid;
  wire [3:0]  _axi4deint_auto_anon_in_r_bits_id;
  wire [63:0] _axi4deint_auto_anon_in_r_bits_data;
  wire [1:0]  _axi4deint_auto_anon_in_r_bits_resp;
  wire [3:0]  _axi4deint_auto_anon_in_r_bits_echo_tl_state_size;
  wire [4:0]  _axi4deint_auto_anon_in_r_bits_echo_tl_state_source;
  wire        _axi4deint_auto_anon_in_r_bits_last;
  wire        _axi4deint_auto_anon_out_aw_valid;
  wire [3:0]  _axi4deint_auto_anon_out_aw_bits_id;
  wire [30:0] _axi4deint_auto_anon_out_aw_bits_addr;
  wire [7:0]  _axi4deint_auto_anon_out_aw_bits_len;
  wire [2:0]  _axi4deint_auto_anon_out_aw_bits_size;
  wire [1:0]  _axi4deint_auto_anon_out_aw_bits_burst;
  wire        _axi4deint_auto_anon_out_aw_bits_lock;
  wire [3:0]  _axi4deint_auto_anon_out_aw_bits_cache;
  wire [2:0]  _axi4deint_auto_anon_out_aw_bits_prot;
  wire [3:0]  _axi4deint_auto_anon_out_aw_bits_qos;
  wire [3:0]  _axi4deint_auto_anon_out_aw_bits_echo_tl_state_size;
  wire [4:0]  _axi4deint_auto_anon_out_aw_bits_echo_tl_state_source;
  wire        _axi4deint_auto_anon_out_w_valid;
  wire [63:0] _axi4deint_auto_anon_out_w_bits_data;
  wire [7:0]  _axi4deint_auto_anon_out_w_bits_strb;
  wire        _axi4deint_auto_anon_out_w_bits_last;
  wire        _axi4deint_auto_anon_out_b_ready;
  wire        _axi4deint_auto_anon_out_ar_valid;
  wire [3:0]  _axi4deint_auto_anon_out_ar_bits_id;
  wire [30:0] _axi4deint_auto_anon_out_ar_bits_addr;
  wire [7:0]  _axi4deint_auto_anon_out_ar_bits_len;
  wire [2:0]  _axi4deint_auto_anon_out_ar_bits_size;
  wire [1:0]  _axi4deint_auto_anon_out_ar_bits_burst;
  wire        _axi4deint_auto_anon_out_ar_bits_lock;
  wire [3:0]  _axi4deint_auto_anon_out_ar_bits_cache;
  wire [2:0]  _axi4deint_auto_anon_out_ar_bits_prot;
  wire [3:0]  _axi4deint_auto_anon_out_ar_bits_qos;
  wire [3:0]  _axi4deint_auto_anon_out_ar_bits_echo_tl_state_size;
  wire [4:0]  _axi4deint_auto_anon_out_ar_bits_echo_tl_state_source;
  wire        _axi4deint_auto_anon_out_r_ready;
  wire        _axi4yank_auto_in_aw_ready;
  wire        _axi4yank_auto_in_w_ready;
  wire        _axi4yank_auto_in_b_valid;
  wire [3:0]  _axi4yank_auto_in_b_bits_id;
  wire [1:0]  _axi4yank_auto_in_b_bits_resp;
  wire [3:0]  _axi4yank_auto_in_b_bits_echo_tl_state_size;
  wire [4:0]  _axi4yank_auto_in_b_bits_echo_tl_state_source;
  wire        _axi4yank_auto_in_ar_ready;
  wire        _axi4yank_auto_in_r_valid;
  wire [3:0]  _axi4yank_auto_in_r_bits_id;
  wire [63:0] _axi4yank_auto_in_r_bits_data;
  wire [1:0]  _axi4yank_auto_in_r_bits_resp;
  wire [3:0]  _axi4yank_auto_in_r_bits_echo_tl_state_size;
  wire [4:0]  _axi4yank_auto_in_r_bits_echo_tl_state_source;
  wire        _axi4yank_auto_in_r_bits_last;
  wire        _axi4yank_auto_out_aw_valid;
  wire [3:0]  _axi4yank_auto_out_aw_bits_id;
  wire [30:0] _axi4yank_auto_out_aw_bits_addr;
  wire [7:0]  _axi4yank_auto_out_aw_bits_len;
  wire [2:0]  _axi4yank_auto_out_aw_bits_size;
  wire [1:0]  _axi4yank_auto_out_aw_bits_burst;
  wire        _axi4yank_auto_out_aw_bits_lock;
  wire [3:0]  _axi4yank_auto_out_aw_bits_cache;
  wire [2:0]  _axi4yank_auto_out_aw_bits_prot;
  wire [3:0]  _axi4yank_auto_out_aw_bits_qos;
  wire        _axi4yank_auto_out_w_valid;
  wire [63:0] _axi4yank_auto_out_w_bits_data;
  wire [7:0]  _axi4yank_auto_out_w_bits_strb;
  wire        _axi4yank_auto_out_w_bits_last;
  wire        _axi4yank_auto_out_b_ready;
  wire        _axi4yank_auto_out_ar_valid;
  wire [3:0]  _axi4yank_auto_out_ar_bits_id;
  wire [30:0] _axi4yank_auto_out_ar_bits_addr;
  wire [7:0]  _axi4yank_auto_out_ar_bits_len;
  wire [2:0]  _axi4yank_auto_out_ar_bits_size;
  wire [1:0]  _axi4yank_auto_out_ar_bits_burst;
  wire        _axi4yank_auto_out_ar_bits_lock;
  wire [3:0]  _axi4yank_auto_out_ar_bits_cache;
  wire [2:0]  _axi4yank_auto_out_ar_bits_prot;
  wire [3:0]  _axi4yank_auto_out_ar_bits_qos;
  wire        _axi4yank_auto_out_r_ready;
  wire        _axi4buf_auto_in_aw_ready;
  wire        _axi4buf_auto_in_w_ready;
  wire        _axi4buf_auto_in_b_valid;
  wire [3:0]  _axi4buf_auto_in_b_bits_id;
  wire [1:0]  _axi4buf_auto_in_b_bits_resp;
  wire        _axi4buf_auto_in_ar_ready;
  wire        _axi4buf_auto_in_r_valid;
  wire [3:0]  _axi4buf_auto_in_r_bits_id;
  wire [63:0] _axi4buf_auto_in_r_bits_data;
  wire [1:0]  _axi4buf_auto_in_r_bits_resp;
  wire        _axi4buf_auto_in_r_bits_last;
  AXI4Buffer axi4buf (
    .clock                  (clock),
    .reset                  (reset),
    .auto_in_aw_valid       (_axi4yank_auto_out_aw_valid),
    .auto_in_aw_bits_id     (_axi4yank_auto_out_aw_bits_id),
    .auto_in_aw_bits_addr   (_axi4yank_auto_out_aw_bits_addr),
    .auto_in_aw_bits_len    (_axi4yank_auto_out_aw_bits_len),
    .auto_in_aw_bits_size   (_axi4yank_auto_out_aw_bits_size),
    .auto_in_aw_bits_burst  (_axi4yank_auto_out_aw_bits_burst),
    .auto_in_aw_bits_lock   (_axi4yank_auto_out_aw_bits_lock),
    .auto_in_aw_bits_cache  (_axi4yank_auto_out_aw_bits_cache),
    .auto_in_aw_bits_prot   (_axi4yank_auto_out_aw_bits_prot),
    .auto_in_aw_bits_qos    (_axi4yank_auto_out_aw_bits_qos),
    .auto_in_w_valid        (_axi4yank_auto_out_w_valid),
    .auto_in_w_bits_data    (_axi4yank_auto_out_w_bits_data),
    .auto_in_w_bits_strb    (_axi4yank_auto_out_w_bits_strb),
    .auto_in_w_bits_last    (_axi4yank_auto_out_w_bits_last),
    .auto_in_b_ready        (_axi4yank_auto_out_b_ready),
    .auto_in_ar_valid       (_axi4yank_auto_out_ar_valid),
    .auto_in_ar_bits_id     (_axi4yank_auto_out_ar_bits_id),
    .auto_in_ar_bits_addr   (_axi4yank_auto_out_ar_bits_addr),
    .auto_in_ar_bits_len    (_axi4yank_auto_out_ar_bits_len),
    .auto_in_ar_bits_size   (_axi4yank_auto_out_ar_bits_size),
    .auto_in_ar_bits_burst  (_axi4yank_auto_out_ar_bits_burst),
    .auto_in_ar_bits_lock   (_axi4yank_auto_out_ar_bits_lock),
    .auto_in_ar_bits_cache  (_axi4yank_auto_out_ar_bits_cache),
    .auto_in_ar_bits_prot   (_axi4yank_auto_out_ar_bits_prot),
    .auto_in_ar_bits_qos    (_axi4yank_auto_out_ar_bits_qos),
    .auto_in_r_ready        (_axi4yank_auto_out_r_ready),
    .auto_out_aw_ready      (auto_axi4buf_out_aw_ready),
    .auto_out_w_ready       (auto_axi4buf_out_w_ready),
    .auto_out_b_valid       (auto_axi4buf_out_b_valid),
    .auto_out_b_bits_id     (auto_axi4buf_out_b_bits_id),
    .auto_out_b_bits_resp   (auto_axi4buf_out_b_bits_resp),
    .auto_out_ar_ready      (auto_axi4buf_out_ar_ready),
    .auto_out_r_valid       (auto_axi4buf_out_r_valid),
    .auto_out_r_bits_id     (auto_axi4buf_out_r_bits_id),
    .auto_out_r_bits_data   (auto_axi4buf_out_r_bits_data),
    .auto_out_r_bits_resp   (auto_axi4buf_out_r_bits_resp),
    .auto_out_r_bits_last   (auto_axi4buf_out_r_bits_last),
    .auto_in_aw_ready       (_axi4buf_auto_in_aw_ready),
    .auto_in_w_ready        (_axi4buf_auto_in_w_ready),
    .auto_in_b_valid        (_axi4buf_auto_in_b_valid),
    .auto_in_b_bits_id      (_axi4buf_auto_in_b_bits_id),
    .auto_in_b_bits_resp    (_axi4buf_auto_in_b_bits_resp),
    .auto_in_ar_ready       (_axi4buf_auto_in_ar_ready),
    .auto_in_r_valid        (_axi4buf_auto_in_r_valid),
    .auto_in_r_bits_id      (_axi4buf_auto_in_r_bits_id),
    .auto_in_r_bits_data    (_axi4buf_auto_in_r_bits_data),
    .auto_in_r_bits_resp    (_axi4buf_auto_in_r_bits_resp),
    .auto_in_r_bits_last    (_axi4buf_auto_in_r_bits_last),
    .auto_out_aw_valid      (auto_axi4buf_out_aw_valid),
    .auto_out_aw_bits_id    (auto_axi4buf_out_aw_bits_id),
    .auto_out_aw_bits_addr  (auto_axi4buf_out_aw_bits_addr),
    .auto_out_aw_bits_len   (auto_axi4buf_out_aw_bits_len),
    .auto_out_aw_bits_size  (auto_axi4buf_out_aw_bits_size),
    .auto_out_aw_bits_burst (auto_axi4buf_out_aw_bits_burst),
    .auto_out_aw_bits_lock  (auto_axi4buf_out_aw_bits_lock),
    .auto_out_aw_bits_cache (auto_axi4buf_out_aw_bits_cache),
    .auto_out_aw_bits_prot  (auto_axi4buf_out_aw_bits_prot),
    .auto_out_aw_bits_qos   (auto_axi4buf_out_aw_bits_qos),
    .auto_out_w_valid       (auto_axi4buf_out_w_valid),
    .auto_out_w_bits_data   (auto_axi4buf_out_w_bits_data),
    .auto_out_w_bits_strb   (auto_axi4buf_out_w_bits_strb),
    .auto_out_w_bits_last   (auto_axi4buf_out_w_bits_last),
    .auto_out_b_ready       (auto_axi4buf_out_b_ready),
    .auto_out_ar_valid      (auto_axi4buf_out_ar_valid),
    .auto_out_ar_bits_id    (auto_axi4buf_out_ar_bits_id),
    .auto_out_ar_bits_addr  (auto_axi4buf_out_ar_bits_addr),
    .auto_out_ar_bits_len   (auto_axi4buf_out_ar_bits_len),
    .auto_out_ar_bits_size  (auto_axi4buf_out_ar_bits_size),
    .auto_out_ar_bits_burst (auto_axi4buf_out_ar_bits_burst),
    .auto_out_ar_bits_lock  (auto_axi4buf_out_ar_bits_lock),
    .auto_out_ar_bits_cache (auto_axi4buf_out_ar_bits_cache),
    .auto_out_ar_bits_prot  (auto_axi4buf_out_ar_bits_prot),
    .auto_out_ar_bits_qos   (auto_axi4buf_out_ar_bits_qos),
    .auto_out_r_ready       (auto_axi4buf_out_r_ready)
  );
  AXI4UserYanker axi4yank (
    .clock                                (clock),
    .reset                                (reset),
    .auto_in_aw_valid                     (_axi4deint_auto_anon_out_aw_valid),
    .auto_in_aw_bits_id                   (_axi4deint_auto_anon_out_aw_bits_id),
    .auto_in_aw_bits_addr                 (_axi4deint_auto_anon_out_aw_bits_addr),
    .auto_in_aw_bits_len                  (_axi4deint_auto_anon_out_aw_bits_len),
    .auto_in_aw_bits_size                 (_axi4deint_auto_anon_out_aw_bits_size),
    .auto_in_aw_bits_burst                (_axi4deint_auto_anon_out_aw_bits_burst),
    .auto_in_aw_bits_lock                 (_axi4deint_auto_anon_out_aw_bits_lock),
    .auto_in_aw_bits_cache                (_axi4deint_auto_anon_out_aw_bits_cache),
    .auto_in_aw_bits_prot                 (_axi4deint_auto_anon_out_aw_bits_prot),
    .auto_in_aw_bits_qos                  (_axi4deint_auto_anon_out_aw_bits_qos),
    .auto_in_aw_bits_echo_tl_state_size
      (_axi4deint_auto_anon_out_aw_bits_echo_tl_state_size),
    .auto_in_aw_bits_echo_tl_state_source
      (_axi4deint_auto_anon_out_aw_bits_echo_tl_state_source),
    .auto_in_w_valid                      (_axi4deint_auto_anon_out_w_valid),
    .auto_in_w_bits_data                  (_axi4deint_auto_anon_out_w_bits_data),
    .auto_in_w_bits_strb                  (_axi4deint_auto_anon_out_w_bits_strb),
    .auto_in_w_bits_last                  (_axi4deint_auto_anon_out_w_bits_last),
    .auto_in_b_ready                      (_axi4deint_auto_anon_out_b_ready),
    .auto_in_ar_valid                     (_axi4deint_auto_anon_out_ar_valid),
    .auto_in_ar_bits_id                   (_axi4deint_auto_anon_out_ar_bits_id),
    .auto_in_ar_bits_addr                 (_axi4deint_auto_anon_out_ar_bits_addr),
    .auto_in_ar_bits_len                  (_axi4deint_auto_anon_out_ar_bits_len),
    .auto_in_ar_bits_size                 (_axi4deint_auto_anon_out_ar_bits_size),
    .auto_in_ar_bits_burst                (_axi4deint_auto_anon_out_ar_bits_burst),
    .auto_in_ar_bits_lock                 (_axi4deint_auto_anon_out_ar_bits_lock),
    .auto_in_ar_bits_cache                (_axi4deint_auto_anon_out_ar_bits_cache),
    .auto_in_ar_bits_prot                 (_axi4deint_auto_anon_out_ar_bits_prot),
    .auto_in_ar_bits_qos                  (_axi4deint_auto_anon_out_ar_bits_qos),
    .auto_in_ar_bits_echo_tl_state_size
      (_axi4deint_auto_anon_out_ar_bits_echo_tl_state_size),
    .auto_in_ar_bits_echo_tl_state_source
      (_axi4deint_auto_anon_out_ar_bits_echo_tl_state_source),
    .auto_in_r_ready                      (_axi4deint_auto_anon_out_r_ready),
    .auto_out_aw_ready                    (_axi4buf_auto_in_aw_ready),
    .auto_out_w_ready                     (_axi4buf_auto_in_w_ready),
    .auto_out_b_valid                     (_axi4buf_auto_in_b_valid),
    .auto_out_b_bits_id                   (_axi4buf_auto_in_b_bits_id),
    .auto_out_b_bits_resp                 (_axi4buf_auto_in_b_bits_resp),
    .auto_out_ar_ready                    (_axi4buf_auto_in_ar_ready),
    .auto_out_r_valid                     (_axi4buf_auto_in_r_valid),
    .auto_out_r_bits_id                   (_axi4buf_auto_in_r_bits_id),
    .auto_out_r_bits_data                 (_axi4buf_auto_in_r_bits_data),
    .auto_out_r_bits_resp                 (_axi4buf_auto_in_r_bits_resp),
    .auto_out_r_bits_last                 (_axi4buf_auto_in_r_bits_last),
    .auto_in_aw_ready                     (_axi4yank_auto_in_aw_ready),
    .auto_in_w_ready                      (_axi4yank_auto_in_w_ready),
    .auto_in_b_valid                      (_axi4yank_auto_in_b_valid),
    .auto_in_b_bits_id                    (_axi4yank_auto_in_b_bits_id),
    .auto_in_b_bits_resp                  (_axi4yank_auto_in_b_bits_resp),
    .auto_in_b_bits_echo_tl_state_size    (_axi4yank_auto_in_b_bits_echo_tl_state_size),
    .auto_in_b_bits_echo_tl_state_source  (_axi4yank_auto_in_b_bits_echo_tl_state_source),
    .auto_in_ar_ready                     (_axi4yank_auto_in_ar_ready),
    .auto_in_r_valid                      (_axi4yank_auto_in_r_valid),
    .auto_in_r_bits_id                    (_axi4yank_auto_in_r_bits_id),
    .auto_in_r_bits_data                  (_axi4yank_auto_in_r_bits_data),
    .auto_in_r_bits_resp                  (_axi4yank_auto_in_r_bits_resp),
    .auto_in_r_bits_echo_tl_state_size    (_axi4yank_auto_in_r_bits_echo_tl_state_size),
    .auto_in_r_bits_echo_tl_state_source  (_axi4yank_auto_in_r_bits_echo_tl_state_source),
    .auto_in_r_bits_last                  (_axi4yank_auto_in_r_bits_last),
    .auto_out_aw_valid                    (_axi4yank_auto_out_aw_valid),
    .auto_out_aw_bits_id                  (_axi4yank_auto_out_aw_bits_id),
    .auto_out_aw_bits_addr                (_axi4yank_auto_out_aw_bits_addr),
    .auto_out_aw_bits_len                 (_axi4yank_auto_out_aw_bits_len),
    .auto_out_aw_bits_size                (_axi4yank_auto_out_aw_bits_size),
    .auto_out_aw_bits_burst               (_axi4yank_auto_out_aw_bits_burst),
    .auto_out_aw_bits_lock                (_axi4yank_auto_out_aw_bits_lock),
    .auto_out_aw_bits_cache               (_axi4yank_auto_out_aw_bits_cache),
    .auto_out_aw_bits_prot                (_axi4yank_auto_out_aw_bits_prot),
    .auto_out_aw_bits_qos                 (_axi4yank_auto_out_aw_bits_qos),
    .auto_out_w_valid                     (_axi4yank_auto_out_w_valid),
    .auto_out_w_bits_data                 (_axi4yank_auto_out_w_bits_data),
    .auto_out_w_bits_strb                 (_axi4yank_auto_out_w_bits_strb),
    .auto_out_w_bits_last                 (_axi4yank_auto_out_w_bits_last),
    .auto_out_b_ready                     (_axi4yank_auto_out_b_ready),
    .auto_out_ar_valid                    (_axi4yank_auto_out_ar_valid),
    .auto_out_ar_bits_id                  (_axi4yank_auto_out_ar_bits_id),
    .auto_out_ar_bits_addr                (_axi4yank_auto_out_ar_bits_addr),
    .auto_out_ar_bits_len                 (_axi4yank_auto_out_ar_bits_len),
    .auto_out_ar_bits_size                (_axi4yank_auto_out_ar_bits_size),
    .auto_out_ar_bits_burst               (_axi4yank_auto_out_ar_bits_burst),
    .auto_out_ar_bits_lock                (_axi4yank_auto_out_ar_bits_lock),
    .auto_out_ar_bits_cache               (_axi4yank_auto_out_ar_bits_cache),
    .auto_out_ar_bits_prot                (_axi4yank_auto_out_ar_bits_prot),
    .auto_out_ar_bits_qos                 (_axi4yank_auto_out_ar_bits_qos),
    .auto_out_r_ready                     (_axi4yank_auto_out_r_ready)
  );
  AXI4Deinterleaver axi4deint (
    .clock                                      (clock),
    .reset                                      (reset),
    .auto_anon_in_aw_valid                      (_axi4index_auto_out_aw_valid),
    .auto_anon_in_aw_bits_id                    (_axi4index_auto_out_aw_bits_id),
    .auto_anon_in_aw_bits_addr                  (_axi4index_auto_out_aw_bits_addr),
    .auto_anon_in_aw_bits_len                   (_axi4index_auto_out_aw_bits_len),
    .auto_anon_in_aw_bits_size                  (_axi4index_auto_out_aw_bits_size),
    .auto_anon_in_aw_bits_burst                 (_axi4index_auto_out_aw_bits_burst),
    .auto_anon_in_aw_bits_lock                  (_axi4index_auto_out_aw_bits_lock),
    .auto_anon_in_aw_bits_cache                 (_axi4index_auto_out_aw_bits_cache),
    .auto_anon_in_aw_bits_prot                  (_axi4index_auto_out_aw_bits_prot),
    .auto_anon_in_aw_bits_qos                   (_axi4index_auto_out_aw_bits_qos),
    .auto_anon_in_aw_bits_echo_tl_state_size
      (_axi4index_auto_out_aw_bits_echo_tl_state_size),
    .auto_anon_in_aw_bits_echo_tl_state_source
      (_axi4index_auto_out_aw_bits_echo_tl_state_source),
    .auto_anon_in_w_valid                       (_axi4index_auto_out_w_valid),
    .auto_anon_in_w_bits_data                   (_axi4index_auto_out_w_bits_data),
    .auto_anon_in_w_bits_strb                   (_axi4index_auto_out_w_bits_strb),
    .auto_anon_in_w_bits_last                   (_axi4index_auto_out_w_bits_last),
    .auto_anon_in_b_ready                       (_axi4index_auto_out_b_ready),
    .auto_anon_in_ar_valid                      (_axi4index_auto_out_ar_valid),
    .auto_anon_in_ar_bits_id                    (_axi4index_auto_out_ar_bits_id),
    .auto_anon_in_ar_bits_addr                  (_axi4index_auto_out_ar_bits_addr),
    .auto_anon_in_ar_bits_len                   (_axi4index_auto_out_ar_bits_len),
    .auto_anon_in_ar_bits_size                  (_axi4index_auto_out_ar_bits_size),
    .auto_anon_in_ar_bits_burst                 (_axi4index_auto_out_ar_bits_burst),
    .auto_anon_in_ar_bits_lock                  (_axi4index_auto_out_ar_bits_lock),
    .auto_anon_in_ar_bits_cache                 (_axi4index_auto_out_ar_bits_cache),
    .auto_anon_in_ar_bits_prot                  (_axi4index_auto_out_ar_bits_prot),
    .auto_anon_in_ar_bits_qos                   (_axi4index_auto_out_ar_bits_qos),
    .auto_anon_in_ar_bits_echo_tl_state_size
      (_axi4index_auto_out_ar_bits_echo_tl_state_size),
    .auto_anon_in_ar_bits_echo_tl_state_source
      (_axi4index_auto_out_ar_bits_echo_tl_state_source),
    .auto_anon_in_r_ready                       (_axi4index_auto_out_r_ready),
    .auto_anon_out_aw_ready                     (_axi4yank_auto_in_aw_ready),
    .auto_anon_out_w_ready                      (_axi4yank_auto_in_w_ready),
    .auto_anon_out_b_valid                      (_axi4yank_auto_in_b_valid),
    .auto_anon_out_b_bits_id                    (_axi4yank_auto_in_b_bits_id),
    .auto_anon_out_b_bits_resp                  (_axi4yank_auto_in_b_bits_resp),
    .auto_anon_out_b_bits_echo_tl_state_size
      (_axi4yank_auto_in_b_bits_echo_tl_state_size),
    .auto_anon_out_b_bits_echo_tl_state_source
      (_axi4yank_auto_in_b_bits_echo_tl_state_source),
    .auto_anon_out_ar_ready                     (_axi4yank_auto_in_ar_ready),
    .auto_anon_out_r_valid                      (_axi4yank_auto_in_r_valid),
    .auto_anon_out_r_bits_id                    (_axi4yank_auto_in_r_bits_id),
    .auto_anon_out_r_bits_data                  (_axi4yank_auto_in_r_bits_data),
    .auto_anon_out_r_bits_resp                  (_axi4yank_auto_in_r_bits_resp),
    .auto_anon_out_r_bits_echo_tl_state_size
      (_axi4yank_auto_in_r_bits_echo_tl_state_size),
    .auto_anon_out_r_bits_echo_tl_state_source
      (_axi4yank_auto_in_r_bits_echo_tl_state_source),
    .auto_anon_out_r_bits_last                  (_axi4yank_auto_in_r_bits_last),
    .auto_anon_in_aw_ready                      (_axi4deint_auto_anon_in_aw_ready),
    .auto_anon_in_w_ready                       (_axi4deint_auto_anon_in_w_ready),
    .auto_anon_in_b_valid                       (_axi4deint_auto_anon_in_b_valid),
    .auto_anon_in_b_bits_id                     (_axi4deint_auto_anon_in_b_bits_id),
    .auto_anon_in_b_bits_resp                   (_axi4deint_auto_anon_in_b_bits_resp),
    .auto_anon_in_b_bits_echo_tl_state_size
      (_axi4deint_auto_anon_in_b_bits_echo_tl_state_size),
    .auto_anon_in_b_bits_echo_tl_state_source
      (_axi4deint_auto_anon_in_b_bits_echo_tl_state_source),
    .auto_anon_in_ar_ready                      (_axi4deint_auto_anon_in_ar_ready),
    .auto_anon_in_r_valid                       (_axi4deint_auto_anon_in_r_valid),
    .auto_anon_in_r_bits_id                     (_axi4deint_auto_anon_in_r_bits_id),
    .auto_anon_in_r_bits_data                   (_axi4deint_auto_anon_in_r_bits_data),
    .auto_anon_in_r_bits_resp                   (_axi4deint_auto_anon_in_r_bits_resp),
    .auto_anon_in_r_bits_echo_tl_state_size
      (_axi4deint_auto_anon_in_r_bits_echo_tl_state_size),
    .auto_anon_in_r_bits_echo_tl_state_source
      (_axi4deint_auto_anon_in_r_bits_echo_tl_state_source),
    .auto_anon_in_r_bits_last                   (_axi4deint_auto_anon_in_r_bits_last),
    .auto_anon_out_aw_valid                     (_axi4deint_auto_anon_out_aw_valid),
    .auto_anon_out_aw_bits_id                   (_axi4deint_auto_anon_out_aw_bits_id),
    .auto_anon_out_aw_bits_addr                 (_axi4deint_auto_anon_out_aw_bits_addr),
    .auto_anon_out_aw_bits_len                  (_axi4deint_auto_anon_out_aw_bits_len),
    .auto_anon_out_aw_bits_size                 (_axi4deint_auto_anon_out_aw_bits_size),
    .auto_anon_out_aw_bits_burst                (_axi4deint_auto_anon_out_aw_bits_burst),
    .auto_anon_out_aw_bits_lock                 (_axi4deint_auto_anon_out_aw_bits_lock),
    .auto_anon_out_aw_bits_cache                (_axi4deint_auto_anon_out_aw_bits_cache),
    .auto_anon_out_aw_bits_prot                 (_axi4deint_auto_anon_out_aw_bits_prot),
    .auto_anon_out_aw_bits_qos                  (_axi4deint_auto_anon_out_aw_bits_qos),
    .auto_anon_out_aw_bits_echo_tl_state_size
      (_axi4deint_auto_anon_out_aw_bits_echo_tl_state_size),
    .auto_anon_out_aw_bits_echo_tl_state_source
      (_axi4deint_auto_anon_out_aw_bits_echo_tl_state_source),
    .auto_anon_out_w_valid                      (_axi4deint_auto_anon_out_w_valid),
    .auto_anon_out_w_bits_data                  (_axi4deint_auto_anon_out_w_bits_data),
    .auto_anon_out_w_bits_strb                  (_axi4deint_auto_anon_out_w_bits_strb),
    .auto_anon_out_w_bits_last                  (_axi4deint_auto_anon_out_w_bits_last),
    .auto_anon_out_b_ready                      (_axi4deint_auto_anon_out_b_ready),
    .auto_anon_out_ar_valid                     (_axi4deint_auto_anon_out_ar_valid),
    .auto_anon_out_ar_bits_id                   (_axi4deint_auto_anon_out_ar_bits_id),
    .auto_anon_out_ar_bits_addr                 (_axi4deint_auto_anon_out_ar_bits_addr),
    .auto_anon_out_ar_bits_len                  (_axi4deint_auto_anon_out_ar_bits_len),
    .auto_anon_out_ar_bits_size                 (_axi4deint_auto_anon_out_ar_bits_size),
    .auto_anon_out_ar_bits_burst                (_axi4deint_auto_anon_out_ar_bits_burst),
    .auto_anon_out_ar_bits_lock                 (_axi4deint_auto_anon_out_ar_bits_lock),
    .auto_anon_out_ar_bits_cache                (_axi4deint_auto_anon_out_ar_bits_cache),
    .auto_anon_out_ar_bits_prot                 (_axi4deint_auto_anon_out_ar_bits_prot),
    .auto_anon_out_ar_bits_qos                  (_axi4deint_auto_anon_out_ar_bits_qos),
    .auto_anon_out_ar_bits_echo_tl_state_size
      (_axi4deint_auto_anon_out_ar_bits_echo_tl_state_size),
    .auto_anon_out_ar_bits_echo_tl_state_source
      (_axi4deint_auto_anon_out_ar_bits_echo_tl_state_source),
    .auto_anon_out_r_ready                      (_axi4deint_auto_anon_out_r_ready)
  );
  AXI4IdIndexer axi4index (
    .auto_in_aw_valid                      (_tl2axi4_auto_out_aw_valid),
    .auto_in_aw_bits_id                    (_tl2axi4_auto_out_aw_bits_id),
    .auto_in_aw_bits_addr                  (_tl2axi4_auto_out_aw_bits_addr),
    .auto_in_aw_bits_len                   (_tl2axi4_auto_out_aw_bits_len),
    .auto_in_aw_bits_size                  (_tl2axi4_auto_out_aw_bits_size),
    .auto_in_aw_bits_burst                 (_tl2axi4_auto_out_aw_bits_burst),
    .auto_in_aw_bits_lock                  (_tl2axi4_auto_out_aw_bits_lock),
    .auto_in_aw_bits_cache                 (_tl2axi4_auto_out_aw_bits_cache),
    .auto_in_aw_bits_prot                  (_tl2axi4_auto_out_aw_bits_prot),
    .auto_in_aw_bits_qos                   (_tl2axi4_auto_out_aw_bits_qos),
    .auto_in_aw_bits_echo_tl_state_size    (_tl2axi4_auto_out_aw_bits_echo_tl_state_size),
    .auto_in_aw_bits_echo_tl_state_source
      (_tl2axi4_auto_out_aw_bits_echo_tl_state_source),
    .auto_in_w_valid                       (_tl2axi4_auto_out_w_valid),
    .auto_in_w_bits_data                   (_tl2axi4_auto_out_w_bits_data),
    .auto_in_w_bits_strb                   (_tl2axi4_auto_out_w_bits_strb),
    .auto_in_w_bits_last                   (_tl2axi4_auto_out_w_bits_last),
    .auto_in_b_ready                       (_tl2axi4_auto_out_b_ready),
    .auto_in_ar_valid                      (_tl2axi4_auto_out_ar_valid),
    .auto_in_ar_bits_id                    (_tl2axi4_auto_out_ar_bits_id),
    .auto_in_ar_bits_addr                  (_tl2axi4_auto_out_ar_bits_addr),
    .auto_in_ar_bits_len                   (_tl2axi4_auto_out_ar_bits_len),
    .auto_in_ar_bits_size                  (_tl2axi4_auto_out_ar_bits_size),
    .auto_in_ar_bits_burst                 (_tl2axi4_auto_out_ar_bits_burst),
    .auto_in_ar_bits_lock                  (_tl2axi4_auto_out_ar_bits_lock),
    .auto_in_ar_bits_cache                 (_tl2axi4_auto_out_ar_bits_cache),
    .auto_in_ar_bits_prot                  (_tl2axi4_auto_out_ar_bits_prot),
    .auto_in_ar_bits_qos                   (_tl2axi4_auto_out_ar_bits_qos),
    .auto_in_ar_bits_echo_tl_state_size    (_tl2axi4_auto_out_ar_bits_echo_tl_state_size),
    .auto_in_ar_bits_echo_tl_state_source
      (_tl2axi4_auto_out_ar_bits_echo_tl_state_source),
    .auto_in_r_ready                       (_tl2axi4_auto_out_r_ready),
    .auto_out_aw_ready                     (_axi4deint_auto_anon_in_aw_ready),
    .auto_out_w_ready                      (_axi4deint_auto_anon_in_w_ready),
    .auto_out_b_valid                      (_axi4deint_auto_anon_in_b_valid),
    .auto_out_b_bits_id                    (_axi4deint_auto_anon_in_b_bits_id),
    .auto_out_b_bits_resp                  (_axi4deint_auto_anon_in_b_bits_resp),
    .auto_out_b_bits_echo_tl_state_size
      (_axi4deint_auto_anon_in_b_bits_echo_tl_state_size),
    .auto_out_b_bits_echo_tl_state_source
      (_axi4deint_auto_anon_in_b_bits_echo_tl_state_source),
    .auto_out_ar_ready                     (_axi4deint_auto_anon_in_ar_ready),
    .auto_out_r_valid                      (_axi4deint_auto_anon_in_r_valid),
    .auto_out_r_bits_id                    (_axi4deint_auto_anon_in_r_bits_id),
    .auto_out_r_bits_data                  (_axi4deint_auto_anon_in_r_bits_data),
    .auto_out_r_bits_resp                  (_axi4deint_auto_anon_in_r_bits_resp),
    .auto_out_r_bits_echo_tl_state_size
      (_axi4deint_auto_anon_in_r_bits_echo_tl_state_size),
    .auto_out_r_bits_echo_tl_state_source
      (_axi4deint_auto_anon_in_r_bits_echo_tl_state_source),
    .auto_out_r_bits_last                  (_axi4deint_auto_anon_in_r_bits_last),
    .auto_in_aw_ready                      (_axi4index_auto_in_aw_ready),
    .auto_in_w_ready                       (_axi4index_auto_in_w_ready),
    .auto_in_b_valid                       (_axi4index_auto_in_b_valid),
    .auto_in_b_bits_id                     (_axi4index_auto_in_b_bits_id),
    .auto_in_b_bits_resp                   (_axi4index_auto_in_b_bits_resp),
    .auto_in_b_bits_echo_tl_state_size     (_axi4index_auto_in_b_bits_echo_tl_state_size),
    .auto_in_b_bits_echo_tl_state_source
      (_axi4index_auto_in_b_bits_echo_tl_state_source),
    .auto_in_ar_ready                      (_axi4index_auto_in_ar_ready),
    .auto_in_r_valid                       (_axi4index_auto_in_r_valid),
    .auto_in_r_bits_id                     (_axi4index_auto_in_r_bits_id),
    .auto_in_r_bits_data                   (_axi4index_auto_in_r_bits_data),
    .auto_in_r_bits_resp                   (_axi4index_auto_in_r_bits_resp),
    .auto_in_r_bits_echo_tl_state_size     (_axi4index_auto_in_r_bits_echo_tl_state_size),
    .auto_in_r_bits_echo_tl_state_source
      (_axi4index_auto_in_r_bits_echo_tl_state_source),
    .auto_in_r_bits_last                   (_axi4index_auto_in_r_bits_last),
    .auto_out_aw_valid                     (_axi4index_auto_out_aw_valid),
    .auto_out_aw_bits_id                   (_axi4index_auto_out_aw_bits_id),
    .auto_out_aw_bits_addr                 (_axi4index_auto_out_aw_bits_addr),
    .auto_out_aw_bits_len                  (_axi4index_auto_out_aw_bits_len),
    .auto_out_aw_bits_size                 (_axi4index_auto_out_aw_bits_size),
    .auto_out_aw_bits_burst                (_axi4index_auto_out_aw_bits_burst),
    .auto_out_aw_bits_lock                 (_axi4index_auto_out_aw_bits_lock),
    .auto_out_aw_bits_cache                (_axi4index_auto_out_aw_bits_cache),
    .auto_out_aw_bits_prot                 (_axi4index_auto_out_aw_bits_prot),
    .auto_out_aw_bits_qos                  (_axi4index_auto_out_aw_bits_qos),
    .auto_out_aw_bits_echo_tl_state_size
      (_axi4index_auto_out_aw_bits_echo_tl_state_size),
    .auto_out_aw_bits_echo_tl_state_source
      (_axi4index_auto_out_aw_bits_echo_tl_state_source),
    .auto_out_w_valid                      (_axi4index_auto_out_w_valid),
    .auto_out_w_bits_data                  (_axi4index_auto_out_w_bits_data),
    .auto_out_w_bits_strb                  (_axi4index_auto_out_w_bits_strb),
    .auto_out_w_bits_last                  (_axi4index_auto_out_w_bits_last),
    .auto_out_b_ready                      (_axi4index_auto_out_b_ready),
    .auto_out_ar_valid                     (_axi4index_auto_out_ar_valid),
    .auto_out_ar_bits_id                   (_axi4index_auto_out_ar_bits_id),
    .auto_out_ar_bits_addr                 (_axi4index_auto_out_ar_bits_addr),
    .auto_out_ar_bits_len                  (_axi4index_auto_out_ar_bits_len),
    .auto_out_ar_bits_size                 (_axi4index_auto_out_ar_bits_size),
    .auto_out_ar_bits_burst                (_axi4index_auto_out_ar_bits_burst),
    .auto_out_ar_bits_lock                 (_axi4index_auto_out_ar_bits_lock),
    .auto_out_ar_bits_cache                (_axi4index_auto_out_ar_bits_cache),
    .auto_out_ar_bits_prot                 (_axi4index_auto_out_ar_bits_prot),
    .auto_out_ar_bits_qos                  (_axi4index_auto_out_ar_bits_qos),
    .auto_out_ar_bits_echo_tl_state_size
      (_axi4index_auto_out_ar_bits_echo_tl_state_size),
    .auto_out_ar_bits_echo_tl_state_source
      (_axi4index_auto_out_ar_bits_echo_tl_state_source),
    .auto_out_r_ready                      (_axi4index_auto_out_r_ready)
  );
  TLToAXI4 tl2axi4 (
    .clock                                    (clock),
    .reset                                    (reset),
    .auto_in_a_valid                          (auto_tl_in_a_valid),
    .auto_in_a_bits_opcode                    (auto_tl_in_a_bits_opcode),
    .auto_in_a_bits_param                     (auto_tl_in_a_bits_param),
    .auto_in_a_bits_size                      (auto_tl_in_a_bits_size),
    .auto_in_a_bits_source                    (auto_tl_in_a_bits_source),
    .auto_in_a_bits_address                   (auto_tl_in_a_bits_address),
    .auto_in_a_bits_user_amba_prot_bufferable
      (auto_tl_in_a_bits_user_amba_prot_bufferable),
    .auto_in_a_bits_user_amba_prot_modifiable
      (auto_tl_in_a_bits_user_amba_prot_modifiable),
    .auto_in_a_bits_user_amba_prot_readalloc
      (auto_tl_in_a_bits_user_amba_prot_readalloc),
    .auto_in_a_bits_user_amba_prot_writealloc
      (auto_tl_in_a_bits_user_amba_prot_writealloc),
    .auto_in_a_bits_user_amba_prot_privileged
      (auto_tl_in_a_bits_user_amba_prot_privileged),
    .auto_in_a_bits_user_amba_prot_secure     (auto_tl_in_a_bits_user_amba_prot_secure),
    .auto_in_a_bits_user_amba_prot_fetch      (auto_tl_in_a_bits_user_amba_prot_fetch),
    .auto_in_a_bits_mask                      (auto_tl_in_a_bits_mask),
    .auto_in_a_bits_data                      (auto_tl_in_a_bits_data),
    .auto_in_a_bits_corrupt                   (auto_tl_in_a_bits_corrupt),
    .auto_in_d_ready                          (auto_tl_in_d_ready),
    .auto_out_aw_ready                        (_axi4index_auto_in_aw_ready),
    .auto_out_w_ready                         (_axi4index_auto_in_w_ready),
    .auto_out_b_valid                         (_axi4index_auto_in_b_valid),
    .auto_out_b_bits_id                       (_axi4index_auto_in_b_bits_id),
    .auto_out_b_bits_resp                     (_axi4index_auto_in_b_bits_resp),
    .auto_out_b_bits_echo_tl_state_size
      (_axi4index_auto_in_b_bits_echo_tl_state_size),
    .auto_out_b_bits_echo_tl_state_source
      (_axi4index_auto_in_b_bits_echo_tl_state_source),
    .auto_out_ar_ready                        (_axi4index_auto_in_ar_ready),
    .auto_out_r_valid                         (_axi4index_auto_in_r_valid),
    .auto_out_r_bits_id                       (_axi4index_auto_in_r_bits_id),
    .auto_out_r_bits_data                     (_axi4index_auto_in_r_bits_data),
    .auto_out_r_bits_resp                     (_axi4index_auto_in_r_bits_resp),
    .auto_out_r_bits_echo_tl_state_size
      (_axi4index_auto_in_r_bits_echo_tl_state_size),
    .auto_out_r_bits_echo_tl_state_source
      (_axi4index_auto_in_r_bits_echo_tl_state_source),
    .auto_out_r_bits_last                     (_axi4index_auto_in_r_bits_last),
    .auto_in_a_ready                          (auto_tl_in_a_ready),
    .auto_in_d_valid                          (auto_tl_in_d_valid),
    .auto_in_d_bits_opcode                    (auto_tl_in_d_bits_opcode),
    .auto_in_d_bits_size                      (auto_tl_in_d_bits_size),
    .auto_in_d_bits_source                    (auto_tl_in_d_bits_source),
    .auto_in_d_bits_denied                    (auto_tl_in_d_bits_denied),
    .auto_in_d_bits_data                      (auto_tl_in_d_bits_data),
    .auto_in_d_bits_corrupt                   (auto_tl_in_d_bits_corrupt),
    .auto_out_aw_valid                        (_tl2axi4_auto_out_aw_valid),
    .auto_out_aw_bits_id                      (_tl2axi4_auto_out_aw_bits_id),
    .auto_out_aw_bits_addr                    (_tl2axi4_auto_out_aw_bits_addr),
    .auto_out_aw_bits_len                     (_tl2axi4_auto_out_aw_bits_len),
    .auto_out_aw_bits_size                    (_tl2axi4_auto_out_aw_bits_size),
    .auto_out_aw_bits_burst                   (_tl2axi4_auto_out_aw_bits_burst),
    .auto_out_aw_bits_lock                    (_tl2axi4_auto_out_aw_bits_lock),
    .auto_out_aw_bits_cache                   (_tl2axi4_auto_out_aw_bits_cache),
    .auto_out_aw_bits_prot                    (_tl2axi4_auto_out_aw_bits_prot),
    .auto_out_aw_bits_qos                     (_tl2axi4_auto_out_aw_bits_qos),
    .auto_out_aw_bits_echo_tl_state_size
      (_tl2axi4_auto_out_aw_bits_echo_tl_state_size),
    .auto_out_aw_bits_echo_tl_state_source
      (_tl2axi4_auto_out_aw_bits_echo_tl_state_source),
    .auto_out_w_valid                         (_tl2axi4_auto_out_w_valid),
    .auto_out_w_bits_data                     (_tl2axi4_auto_out_w_bits_data),
    .auto_out_w_bits_strb                     (_tl2axi4_auto_out_w_bits_strb),
    .auto_out_w_bits_last                     (_tl2axi4_auto_out_w_bits_last),
    .auto_out_b_ready                         (_tl2axi4_auto_out_b_ready),
    .auto_out_ar_valid                        (_tl2axi4_auto_out_ar_valid),
    .auto_out_ar_bits_id                      (_tl2axi4_auto_out_ar_bits_id),
    .auto_out_ar_bits_addr                    (_tl2axi4_auto_out_ar_bits_addr),
    .auto_out_ar_bits_len                     (_tl2axi4_auto_out_ar_bits_len),
    .auto_out_ar_bits_size                    (_tl2axi4_auto_out_ar_bits_size),
    .auto_out_ar_bits_burst                   (_tl2axi4_auto_out_ar_bits_burst),
    .auto_out_ar_bits_lock                    (_tl2axi4_auto_out_ar_bits_lock),
    .auto_out_ar_bits_cache                   (_tl2axi4_auto_out_ar_bits_cache),
    .auto_out_ar_bits_prot                    (_tl2axi4_auto_out_ar_bits_prot),
    .auto_out_ar_bits_qos                     (_tl2axi4_auto_out_ar_bits_qos),
    .auto_out_ar_bits_echo_tl_state_size
      (_tl2axi4_auto_out_ar_bits_echo_tl_state_size),
    .auto_out_ar_bits_echo_tl_state_source
      (_tl2axi4_auto_out_ar_bits_echo_tl_state_source),
    .auto_out_r_ready                         (_tl2axi4_auto_out_r_ready)
  );
endmodule

module SystemBus(
  input         auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_ready,
                auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_ready,
                auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_b_valid,
  input  [3:0]  auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_b_bits_id,
  input  [1:0]  auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_b_bits_resp,
  input         auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_ready,
                auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_valid,
  input  [3:0]  auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_bits_id,
  input  [63:0] auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_bits_data,
  input  [1:0]  auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_bits_resp,
  input         auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_bits_last,
                auto_coupler_from_rockettile_tl_master_clock_xing_in_a_valid,
  input  [2:0]  auto_coupler_from_rockettile_tl_master_clock_xing_in_a_bits_opcode,
                auto_coupler_from_rockettile_tl_master_clock_xing_in_a_bits_param,
  input  [3:0]  auto_coupler_from_rockettile_tl_master_clock_xing_in_a_bits_size,
  input  [1:0]  auto_coupler_from_rockettile_tl_master_clock_xing_in_a_bits_source,
  input  [31:0] auto_coupler_from_rockettile_tl_master_clock_xing_in_a_bits_address,
  input  [7:0]  auto_coupler_from_rockettile_tl_master_clock_xing_in_a_bits_mask,
  input  [63:0] auto_coupler_from_rockettile_tl_master_clock_xing_in_a_bits_data,
  input         auto_coupler_from_rockettile_tl_master_clock_xing_in_a_bits_corrupt,
                auto_coupler_from_rockettile_tl_master_clock_xing_in_b_ready,
                auto_coupler_from_rockettile_tl_master_clock_xing_in_c_valid,
  input  [2:0]  auto_coupler_from_rockettile_tl_master_clock_xing_in_c_bits_opcode,
                auto_coupler_from_rockettile_tl_master_clock_xing_in_c_bits_param,
  input  [3:0]  auto_coupler_from_rockettile_tl_master_clock_xing_in_c_bits_size,
  input  [1:0]  auto_coupler_from_rockettile_tl_master_clock_xing_in_c_bits_source,
  input  [31:0] auto_coupler_from_rockettile_tl_master_clock_xing_in_c_bits_address,
  input  [63:0] auto_coupler_from_rockettile_tl_master_clock_xing_in_c_bits_data,
  input         auto_coupler_from_rockettile_tl_master_clock_xing_in_c_bits_corrupt,
                auto_coupler_from_rockettile_tl_master_clock_xing_in_d_ready,
                auto_coupler_from_rockettile_tl_master_clock_xing_in_e_valid,
  input  [1:0]  auto_coupler_from_rockettile_tl_master_clock_xing_in_e_bits_sink,
  input         auto_coupler_to_bus_named_coh_widget_anon_out_a_ready,
                auto_coupler_to_bus_named_coh_widget_anon_out_b_valid,
  input  [1:0]  auto_coupler_to_bus_named_coh_widget_anon_out_b_bits_param,
  input  [31:0] auto_coupler_to_bus_named_coh_widget_anon_out_b_bits_address,
  input         auto_coupler_to_bus_named_coh_widget_anon_out_c_ready,
                auto_coupler_to_bus_named_coh_widget_anon_out_d_valid,
  input  [2:0]  auto_coupler_to_bus_named_coh_widget_anon_out_d_bits_opcode,
  input  [1:0]  auto_coupler_to_bus_named_coh_widget_anon_out_d_bits_param,
  input  [2:0]  auto_coupler_to_bus_named_coh_widget_anon_out_d_bits_size,
  input  [4:0]  auto_coupler_to_bus_named_coh_widget_anon_out_d_bits_source,
  input  [1:0]  auto_coupler_to_bus_named_coh_widget_anon_out_d_bits_sink,
  input         auto_coupler_to_bus_named_coh_widget_anon_out_d_bits_denied,
  input  [63:0] auto_coupler_to_bus_named_coh_widget_anon_out_d_bits_data,
  input         auto_coupler_to_bus_named_coh_widget_anon_out_d_bits_corrupt,
                auto_coupler_from_bus_named_fbus_bus_xing_in_a_valid,
  input  [2:0]  auto_coupler_from_bus_named_fbus_bus_xing_in_a_bits_opcode,
                auto_coupler_from_bus_named_fbus_bus_xing_in_a_bits_param,
  input  [3:0]  auto_coupler_from_bus_named_fbus_bus_xing_in_a_bits_size,
                auto_coupler_from_bus_named_fbus_bus_xing_in_a_bits_source,
  input  [31:0] auto_coupler_from_bus_named_fbus_bus_xing_in_a_bits_address,
  input         auto_coupler_from_bus_named_fbus_bus_xing_in_a_bits_user_amba_prot_bufferable,
                auto_coupler_from_bus_named_fbus_bus_xing_in_a_bits_user_amba_prot_modifiable,
                auto_coupler_from_bus_named_fbus_bus_xing_in_a_bits_user_amba_prot_readalloc,
                auto_coupler_from_bus_named_fbus_bus_xing_in_a_bits_user_amba_prot_writealloc,
                auto_coupler_from_bus_named_fbus_bus_xing_in_a_bits_user_amba_prot_privileged,
                auto_coupler_from_bus_named_fbus_bus_xing_in_a_bits_user_amba_prot_secure,
                auto_coupler_from_bus_named_fbus_bus_xing_in_a_bits_user_amba_prot_fetch,
  input  [7:0]  auto_coupler_from_bus_named_fbus_bus_xing_in_a_bits_mask,
  input  [63:0] auto_coupler_from_bus_named_fbus_bus_xing_in_a_bits_data,
  input         auto_coupler_from_bus_named_fbus_bus_xing_in_a_bits_corrupt,
                auto_coupler_from_bus_named_fbus_bus_xing_in_d_ready,
                auto_coupler_to_bus_named_cbus_bus_xing_out_a_ready,
                auto_coupler_to_bus_named_cbus_bus_xing_out_d_valid,
  input  [2:0]  auto_coupler_to_bus_named_cbus_bus_xing_out_d_bits_opcode,
  input  [1:0]  auto_coupler_to_bus_named_cbus_bus_xing_out_d_bits_param,
  input  [3:0]  auto_coupler_to_bus_named_cbus_bus_xing_out_d_bits_size,
  input  [4:0]  auto_coupler_to_bus_named_cbus_bus_xing_out_d_bits_source,
  input         auto_coupler_to_bus_named_cbus_bus_xing_out_d_bits_sink,
                auto_coupler_to_bus_named_cbus_bus_xing_out_d_bits_denied,
  input  [63:0] auto_coupler_to_bus_named_cbus_bus_xing_out_d_bits_data,
  input         auto_coupler_to_bus_named_cbus_bus_xing_out_d_bits_corrupt,
                auto_sbus_clock_groups_in_member_sbus_5_clock,
                auto_sbus_clock_groups_in_member_sbus_5_reset,
                auto_sbus_clock_groups_in_member_sbus_4_clock,
                auto_sbus_clock_groups_in_member_sbus_4_reset,
                auto_sbus_clock_groups_in_member_sbus_3_clock,
                auto_sbus_clock_groups_in_member_sbus_3_reset,
                auto_sbus_clock_groups_in_member_sbus_1_clock,
                auto_sbus_clock_groups_in_member_sbus_1_reset,
                auto_sbus_clock_groups_in_member_sbus_0_clock,
                auto_sbus_clock_groups_in_member_sbus_0_reset,
  output        auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_valid,
  output [3:0]  auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_id,
  output [30:0] auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_addr,
  output [7:0]  auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_len,
  output [2:0]  auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_size,
  output [1:0]  auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_burst,
  output        auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_lock,
  output [3:0]  auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_cache,
  output [2:0]  auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_prot,
  output [3:0]  auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_qos,
  output        auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_valid,
  output [63:0] auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_bits_data,
  output [7:0]  auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_bits_strb,
  output        auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_bits_last,
                auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_b_ready,
                auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_valid,
  output [3:0]  auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_id,
  output [30:0] auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_addr,
  output [7:0]  auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_len,
  output [2:0]  auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_size,
  output [1:0]  auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_burst,
  output        auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_lock,
  output [3:0]  auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_cache,
  output [2:0]  auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_prot,
  output [3:0]  auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_qos,
  output        auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_ready,
                auto_coupler_from_rockettile_tl_master_clock_xing_in_a_ready,
                auto_coupler_from_rockettile_tl_master_clock_xing_in_b_valid,
  output [1:0]  auto_coupler_from_rockettile_tl_master_clock_xing_in_b_bits_param,
  output [31:0] auto_coupler_from_rockettile_tl_master_clock_xing_in_b_bits_address,
  output        auto_coupler_from_rockettile_tl_master_clock_xing_in_c_ready,
                auto_coupler_from_rockettile_tl_master_clock_xing_in_d_valid,
  output [2:0]  auto_coupler_from_rockettile_tl_master_clock_xing_in_d_bits_opcode,
  output [1:0]  auto_coupler_from_rockettile_tl_master_clock_xing_in_d_bits_param,
  output [3:0]  auto_coupler_from_rockettile_tl_master_clock_xing_in_d_bits_size,
  output [1:0]  auto_coupler_from_rockettile_tl_master_clock_xing_in_d_bits_source,
                auto_coupler_from_rockettile_tl_master_clock_xing_in_d_bits_sink,
  output        auto_coupler_from_rockettile_tl_master_clock_xing_in_d_bits_denied,
  output [63:0] auto_coupler_from_rockettile_tl_master_clock_xing_in_d_bits_data,
  output        auto_coupler_from_rockettile_tl_master_clock_xing_in_d_bits_corrupt,
                auto_coupler_to_bus_named_coh_widget_anon_out_a_valid,
  output [2:0]  auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_opcode,
                auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_param,
                auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_size,
  output [4:0]  auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_source,
  output [31:0] auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_address,
  output        auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_user_amba_prot_bufferable,
                auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_user_amba_prot_modifiable,
                auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_user_amba_prot_readalloc,
                auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_user_amba_prot_writealloc,
                auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_user_amba_prot_privileged,
                auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_user_amba_prot_secure,
                auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_user_amba_prot_fetch,
  output [7:0]  auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_mask,
  output [63:0] auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_data,
  output        auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_corrupt,
                auto_coupler_to_bus_named_coh_widget_anon_out_b_ready,
                auto_coupler_to_bus_named_coh_widget_anon_out_c_valid,
  output [2:0]  auto_coupler_to_bus_named_coh_widget_anon_out_c_bits_opcode,
                auto_coupler_to_bus_named_coh_widget_anon_out_c_bits_param,
                auto_coupler_to_bus_named_coh_widget_anon_out_c_bits_size,
  output [4:0]  auto_coupler_to_bus_named_coh_widget_anon_out_c_bits_source,
  output [31:0] auto_coupler_to_bus_named_coh_widget_anon_out_c_bits_address,
  output [63:0] auto_coupler_to_bus_named_coh_widget_anon_out_c_bits_data,
  output        auto_coupler_to_bus_named_coh_widget_anon_out_c_bits_corrupt,
                auto_coupler_to_bus_named_coh_widget_anon_out_d_ready,
                auto_coupler_to_bus_named_coh_widget_anon_out_e_valid,
  output [1:0]  auto_coupler_to_bus_named_coh_widget_anon_out_e_bits_sink,
  output        auto_coupler_from_bus_named_fbus_bus_xing_in_a_ready,
                auto_coupler_from_bus_named_fbus_bus_xing_in_d_valid,
  output [2:0]  auto_coupler_from_bus_named_fbus_bus_xing_in_d_bits_opcode,
  output [1:0]  auto_coupler_from_bus_named_fbus_bus_xing_in_d_bits_param,
  output [3:0]  auto_coupler_from_bus_named_fbus_bus_xing_in_d_bits_size,
                auto_coupler_from_bus_named_fbus_bus_xing_in_d_bits_source,
  output [1:0]  auto_coupler_from_bus_named_fbus_bus_xing_in_d_bits_sink,
  output        auto_coupler_from_bus_named_fbus_bus_xing_in_d_bits_denied,
  output [63:0] auto_coupler_from_bus_named_fbus_bus_xing_in_d_bits_data,
  output        auto_coupler_from_bus_named_fbus_bus_xing_in_d_bits_corrupt,
                auto_coupler_to_bus_named_cbus_bus_xing_out_a_valid,
  output [2:0]  auto_coupler_to_bus_named_cbus_bus_xing_out_a_bits_opcode,
                auto_coupler_to_bus_named_cbus_bus_xing_out_a_bits_param,
  output [3:0]  auto_coupler_to_bus_named_cbus_bus_xing_out_a_bits_size,
  output [4:0]  auto_coupler_to_bus_named_cbus_bus_xing_out_a_bits_source,
  output [27:0] auto_coupler_to_bus_named_cbus_bus_xing_out_a_bits_address,
  output [7:0]  auto_coupler_to_bus_named_cbus_bus_xing_out_a_bits_mask,
  output [63:0] auto_coupler_to_bus_named_cbus_bus_xing_out_a_bits_data,
  output        auto_coupler_to_bus_named_cbus_bus_xing_out_a_bits_corrupt,
                auto_coupler_to_bus_named_cbus_bus_xing_out_d_ready,
                auto_fixedClockNode_anon_out_1_clock,
                auto_fixedClockNode_anon_out_1_reset,
                auto_fixedClockNode_anon_out_0_clock,
                auto_fixedClockNode_anon_out_0_reset,
                auto_sbus_clock_groups_out_2_member_coh_1_clock,
                auto_sbus_clock_groups_out_2_member_coh_1_reset,
                auto_sbus_clock_groups_out_2_member_coh_0_clock,
                auto_sbus_clock_groups_out_2_member_coh_0_reset,
                auto_sbus_clock_groups_out_1_member_fbus_0_clock,
                auto_sbus_clock_groups_out_1_member_fbus_0_reset,
                auto_sbus_clock_groups_out_0_member_cbus_0_clock,
                auto_sbus_clock_groups_out_0_member_cbus_0_reset
);

  wire        _coupler_to_port_named_mmio_port_axi4_auto_tl_in_a_ready;
  wire        _coupler_to_port_named_mmio_port_axi4_auto_tl_in_d_valid;
  wire [2:0]  _coupler_to_port_named_mmio_port_axi4_auto_tl_in_d_bits_opcode;
  wire [3:0]  _coupler_to_port_named_mmio_port_axi4_auto_tl_in_d_bits_size;
  wire [4:0]  _coupler_to_port_named_mmio_port_axi4_auto_tl_in_d_bits_source;
  wire        _coupler_to_port_named_mmio_port_axi4_auto_tl_in_d_bits_denied;
  wire [63:0] _coupler_to_port_named_mmio_port_axi4_auto_tl_in_d_bits_data;
  wire        _coupler_to_port_named_mmio_port_axi4_auto_tl_in_d_bits_corrupt;
  wire        _fixer_auto_anon_out_1_a_valid;
  wire [2:0]  _fixer_auto_anon_out_1_a_bits_opcode;
  wire [2:0]  _fixer_auto_anon_out_1_a_bits_param;
  wire [3:0]  _fixer_auto_anon_out_1_a_bits_size;
  wire [1:0]  _fixer_auto_anon_out_1_a_bits_source;
  wire [31:0] _fixer_auto_anon_out_1_a_bits_address;
  wire [7:0]  _fixer_auto_anon_out_1_a_bits_mask;
  wire [63:0] _fixer_auto_anon_out_1_a_bits_data;
  wire        _fixer_auto_anon_out_1_a_bits_corrupt;
  wire        _fixer_auto_anon_out_1_b_ready;
  wire        _fixer_auto_anon_out_1_c_valid;
  wire [2:0]  _fixer_auto_anon_out_1_c_bits_opcode;
  wire [2:0]  _fixer_auto_anon_out_1_c_bits_param;
  wire [3:0]  _fixer_auto_anon_out_1_c_bits_size;
  wire [1:0]  _fixer_auto_anon_out_1_c_bits_source;
  wire [31:0] _fixer_auto_anon_out_1_c_bits_address;
  wire [63:0] _fixer_auto_anon_out_1_c_bits_data;
  wire        _fixer_auto_anon_out_1_c_bits_corrupt;
  wire        _fixer_auto_anon_out_1_d_ready;
  wire        _fixer_auto_anon_out_1_e_valid;
  wire [1:0]  _fixer_auto_anon_out_1_e_bits_sink;
  wire        _fixer_auto_anon_out_0_a_valid;
  wire [2:0]  _fixer_auto_anon_out_0_a_bits_opcode;
  wire [2:0]  _fixer_auto_anon_out_0_a_bits_param;
  wire [3:0]  _fixer_auto_anon_out_0_a_bits_size;
  wire [3:0]  _fixer_auto_anon_out_0_a_bits_source;
  wire [31:0] _fixer_auto_anon_out_0_a_bits_address;
  wire        _fixer_auto_anon_out_0_a_bits_user_amba_prot_bufferable;
  wire        _fixer_auto_anon_out_0_a_bits_user_amba_prot_modifiable;
  wire        _fixer_auto_anon_out_0_a_bits_user_amba_prot_readalloc;
  wire        _fixer_auto_anon_out_0_a_bits_user_amba_prot_writealloc;
  wire        _fixer_auto_anon_out_0_a_bits_user_amba_prot_privileged;
  wire        _fixer_auto_anon_out_0_a_bits_user_amba_prot_secure;
  wire        _fixer_auto_anon_out_0_a_bits_user_amba_prot_fetch;
  wire [7:0]  _fixer_auto_anon_out_0_a_bits_mask;
  wire [63:0] _fixer_auto_anon_out_0_a_bits_data;
  wire        _fixer_auto_anon_out_0_a_bits_corrupt;
  wire        _fixer_auto_anon_out_0_d_ready;
  wire        _system_bus_xbar_auto_anon_in_1_a_ready;
  wire        _system_bus_xbar_auto_anon_in_1_b_valid;
  wire [1:0]  _system_bus_xbar_auto_anon_in_1_b_bits_param;
  wire [31:0] _system_bus_xbar_auto_anon_in_1_b_bits_address;
  wire        _system_bus_xbar_auto_anon_in_1_c_ready;
  wire        _system_bus_xbar_auto_anon_in_1_d_valid;
  wire [2:0]  _system_bus_xbar_auto_anon_in_1_d_bits_opcode;
  wire [1:0]  _system_bus_xbar_auto_anon_in_1_d_bits_param;
  wire [3:0]  _system_bus_xbar_auto_anon_in_1_d_bits_size;
  wire [1:0]  _system_bus_xbar_auto_anon_in_1_d_bits_source;
  wire [1:0]  _system_bus_xbar_auto_anon_in_1_d_bits_sink;
  wire        _system_bus_xbar_auto_anon_in_1_d_bits_denied;
  wire [63:0] _system_bus_xbar_auto_anon_in_1_d_bits_data;
  wire        _system_bus_xbar_auto_anon_in_1_d_bits_corrupt;
  wire        _system_bus_xbar_auto_anon_in_0_a_ready;
  wire        _system_bus_xbar_auto_anon_in_0_d_valid;
  wire [2:0]  _system_bus_xbar_auto_anon_in_0_d_bits_opcode;
  wire [1:0]  _system_bus_xbar_auto_anon_in_0_d_bits_param;
  wire [3:0]  _system_bus_xbar_auto_anon_in_0_d_bits_size;
  wire [3:0]  _system_bus_xbar_auto_anon_in_0_d_bits_source;
  wire [1:0]  _system_bus_xbar_auto_anon_in_0_d_bits_sink;
  wire        _system_bus_xbar_auto_anon_in_0_d_bits_denied;
  wire [63:0] _system_bus_xbar_auto_anon_in_0_d_bits_data;
  wire        _system_bus_xbar_auto_anon_in_0_d_bits_corrupt;
  wire        _system_bus_xbar_auto_anon_out_2_a_valid;
  wire [2:0]  _system_bus_xbar_auto_anon_out_2_a_bits_opcode;
  wire [2:0]  _system_bus_xbar_auto_anon_out_2_a_bits_param;
  wire [3:0]  _system_bus_xbar_auto_anon_out_2_a_bits_size;
  wire [4:0]  _system_bus_xbar_auto_anon_out_2_a_bits_source;
  wire [30:0] _system_bus_xbar_auto_anon_out_2_a_bits_address;
  wire        _system_bus_xbar_auto_anon_out_2_a_bits_user_amba_prot_bufferable;
  wire        _system_bus_xbar_auto_anon_out_2_a_bits_user_amba_prot_modifiable;
  wire        _system_bus_xbar_auto_anon_out_2_a_bits_user_amba_prot_readalloc;
  wire        _system_bus_xbar_auto_anon_out_2_a_bits_user_amba_prot_writealloc;
  wire        _system_bus_xbar_auto_anon_out_2_a_bits_user_amba_prot_privileged;
  wire        _system_bus_xbar_auto_anon_out_2_a_bits_user_amba_prot_secure;
  wire        _system_bus_xbar_auto_anon_out_2_a_bits_user_amba_prot_fetch;
  wire [7:0]  _system_bus_xbar_auto_anon_out_2_a_bits_mask;
  wire [63:0] _system_bus_xbar_auto_anon_out_2_a_bits_data;
  wire        _system_bus_xbar_auto_anon_out_2_a_bits_corrupt;
  wire        _system_bus_xbar_auto_anon_out_2_d_ready;
  wire        _fixedClockNode_auto_anon_out_0_clock;
  wire        _fixedClockNode_auto_anon_out_0_reset;
  FixedClockBroadcast_3 fixedClockNode (
    .auto_anon_in_clock    (auto_sbus_clock_groups_in_member_sbus_0_clock),
    .auto_anon_in_reset    (auto_sbus_clock_groups_in_member_sbus_0_reset),
    .auto_anon_out_2_clock (auto_fixedClockNode_anon_out_1_clock),
    .auto_anon_out_2_reset (auto_fixedClockNode_anon_out_1_reset),
    .auto_anon_out_1_clock (auto_fixedClockNode_anon_out_0_clock),
    .auto_anon_out_1_reset (auto_fixedClockNode_anon_out_0_reset),
    .auto_anon_out_0_clock (_fixedClockNode_auto_anon_out_0_clock),
    .auto_anon_out_0_reset (_fixedClockNode_auto_anon_out_0_reset)
  );
  TLXbar_sbus_i2_o3_a32d64s5k2z4c system_bus_xbar (
    .clock
      (_fixedClockNode_auto_anon_out_0_clock),
    .reset
      (_fixedClockNode_auto_anon_out_0_reset),
    .auto_anon_in_1_a_valid                           (_fixer_auto_anon_out_1_a_valid),
    .auto_anon_in_1_a_bits_opcode
      (_fixer_auto_anon_out_1_a_bits_opcode),
    .auto_anon_in_1_a_bits_param
      (_fixer_auto_anon_out_1_a_bits_param),
    .auto_anon_in_1_a_bits_size
      (_fixer_auto_anon_out_1_a_bits_size),
    .auto_anon_in_1_a_bits_source
      (_fixer_auto_anon_out_1_a_bits_source),
    .auto_anon_in_1_a_bits_address
      (_fixer_auto_anon_out_1_a_bits_address),
    .auto_anon_in_1_a_bits_mask
      (_fixer_auto_anon_out_1_a_bits_mask),
    .auto_anon_in_1_a_bits_data
      (_fixer_auto_anon_out_1_a_bits_data),
    .auto_anon_in_1_a_bits_corrupt
      (_fixer_auto_anon_out_1_a_bits_corrupt),
    .auto_anon_in_1_b_ready                           (_fixer_auto_anon_out_1_b_ready),
    .auto_anon_in_1_c_valid                           (_fixer_auto_anon_out_1_c_valid),
    .auto_anon_in_1_c_bits_opcode
      (_fixer_auto_anon_out_1_c_bits_opcode),
    .auto_anon_in_1_c_bits_param
      (_fixer_auto_anon_out_1_c_bits_param),
    .auto_anon_in_1_c_bits_size
      (_fixer_auto_anon_out_1_c_bits_size),
    .auto_anon_in_1_c_bits_source
      (_fixer_auto_anon_out_1_c_bits_source),
    .auto_anon_in_1_c_bits_address
      (_fixer_auto_anon_out_1_c_bits_address),
    .auto_anon_in_1_c_bits_data
      (_fixer_auto_anon_out_1_c_bits_data),
    .auto_anon_in_1_c_bits_corrupt
      (_fixer_auto_anon_out_1_c_bits_corrupt),
    .auto_anon_in_1_d_ready                           (_fixer_auto_anon_out_1_d_ready),
    .auto_anon_in_1_e_valid                           (_fixer_auto_anon_out_1_e_valid),
    .auto_anon_in_1_e_bits_sink
      (_fixer_auto_anon_out_1_e_bits_sink),
    .auto_anon_in_0_a_valid                           (_fixer_auto_anon_out_0_a_valid),
    .auto_anon_in_0_a_bits_opcode
      (_fixer_auto_anon_out_0_a_bits_opcode),
    .auto_anon_in_0_a_bits_param
      (_fixer_auto_anon_out_0_a_bits_param),
    .auto_anon_in_0_a_bits_size
      (_fixer_auto_anon_out_0_a_bits_size),
    .auto_anon_in_0_a_bits_source
      (_fixer_auto_anon_out_0_a_bits_source),
    .auto_anon_in_0_a_bits_address
      (_fixer_auto_anon_out_0_a_bits_address),
    .auto_anon_in_0_a_bits_user_amba_prot_bufferable
      (_fixer_auto_anon_out_0_a_bits_user_amba_prot_bufferable),
    .auto_anon_in_0_a_bits_user_amba_prot_modifiable
      (_fixer_auto_anon_out_0_a_bits_user_amba_prot_modifiable),
    .auto_anon_in_0_a_bits_user_amba_prot_readalloc
      (_fixer_auto_anon_out_0_a_bits_user_amba_prot_readalloc),
    .auto_anon_in_0_a_bits_user_amba_prot_writealloc
      (_fixer_auto_anon_out_0_a_bits_user_amba_prot_writealloc),
    .auto_anon_in_0_a_bits_user_amba_prot_privileged
      (_fixer_auto_anon_out_0_a_bits_user_amba_prot_privileged),
    .auto_anon_in_0_a_bits_user_amba_prot_secure
      (_fixer_auto_anon_out_0_a_bits_user_amba_prot_secure),
    .auto_anon_in_0_a_bits_user_amba_prot_fetch
      (_fixer_auto_anon_out_0_a_bits_user_amba_prot_fetch),
    .auto_anon_in_0_a_bits_mask
      (_fixer_auto_anon_out_0_a_bits_mask),
    .auto_anon_in_0_a_bits_data
      (_fixer_auto_anon_out_0_a_bits_data),
    .auto_anon_in_0_a_bits_corrupt
      (_fixer_auto_anon_out_0_a_bits_corrupt),
    .auto_anon_in_0_d_ready                           (_fixer_auto_anon_out_0_d_ready),
    .auto_anon_out_2_a_ready
      (_coupler_to_port_named_mmio_port_axi4_auto_tl_in_a_ready),
    .auto_anon_out_2_d_valid
      (_coupler_to_port_named_mmio_port_axi4_auto_tl_in_d_valid),
    .auto_anon_out_2_d_bits_opcode
      (_coupler_to_port_named_mmio_port_axi4_auto_tl_in_d_bits_opcode),
    .auto_anon_out_2_d_bits_size
      (_coupler_to_port_named_mmio_port_axi4_auto_tl_in_d_bits_size),
    .auto_anon_out_2_d_bits_source
      (_coupler_to_port_named_mmio_port_axi4_auto_tl_in_d_bits_source),
    .auto_anon_out_2_d_bits_denied
      (_coupler_to_port_named_mmio_port_axi4_auto_tl_in_d_bits_denied),
    .auto_anon_out_2_d_bits_data
      (_coupler_to_port_named_mmio_port_axi4_auto_tl_in_d_bits_data),
    .auto_anon_out_2_d_bits_corrupt
      (_coupler_to_port_named_mmio_port_axi4_auto_tl_in_d_bits_corrupt),
    .auto_anon_out_1_a_ready
      (auto_coupler_to_bus_named_coh_widget_anon_out_a_ready),
    .auto_anon_out_1_b_valid
      (auto_coupler_to_bus_named_coh_widget_anon_out_b_valid),
    .auto_anon_out_1_b_bits_param
      (auto_coupler_to_bus_named_coh_widget_anon_out_b_bits_param),
    .auto_anon_out_1_b_bits_address
      (auto_coupler_to_bus_named_coh_widget_anon_out_b_bits_address),
    .auto_anon_out_1_c_ready
      (auto_coupler_to_bus_named_coh_widget_anon_out_c_ready),
    .auto_anon_out_1_d_valid
      (auto_coupler_to_bus_named_coh_widget_anon_out_d_valid),
    .auto_anon_out_1_d_bits_opcode
      (auto_coupler_to_bus_named_coh_widget_anon_out_d_bits_opcode),
    .auto_anon_out_1_d_bits_param
      (auto_coupler_to_bus_named_coh_widget_anon_out_d_bits_param),
    .auto_anon_out_1_d_bits_size
      (auto_coupler_to_bus_named_coh_widget_anon_out_d_bits_size),
    .auto_anon_out_1_d_bits_source
      (auto_coupler_to_bus_named_coh_widget_anon_out_d_bits_source),
    .auto_anon_out_1_d_bits_sink
      (auto_coupler_to_bus_named_coh_widget_anon_out_d_bits_sink),
    .auto_anon_out_1_d_bits_denied
      (auto_coupler_to_bus_named_coh_widget_anon_out_d_bits_denied),
    .auto_anon_out_1_d_bits_data
      (auto_coupler_to_bus_named_coh_widget_anon_out_d_bits_data),
    .auto_anon_out_1_d_bits_corrupt
      (auto_coupler_to_bus_named_coh_widget_anon_out_d_bits_corrupt),
    .auto_anon_out_0_a_ready
      (auto_coupler_to_bus_named_cbus_bus_xing_out_a_ready),
    .auto_anon_out_0_d_valid
      (auto_coupler_to_bus_named_cbus_bus_xing_out_d_valid),
    .auto_anon_out_0_d_bits_opcode
      (auto_coupler_to_bus_named_cbus_bus_xing_out_d_bits_opcode),
    .auto_anon_out_0_d_bits_param
      (auto_coupler_to_bus_named_cbus_bus_xing_out_d_bits_param),
    .auto_anon_out_0_d_bits_size
      (auto_coupler_to_bus_named_cbus_bus_xing_out_d_bits_size),
    .auto_anon_out_0_d_bits_source
      (auto_coupler_to_bus_named_cbus_bus_xing_out_d_bits_source),
    .auto_anon_out_0_d_bits_sink
      (auto_coupler_to_bus_named_cbus_bus_xing_out_d_bits_sink),
    .auto_anon_out_0_d_bits_denied
      (auto_coupler_to_bus_named_cbus_bus_xing_out_d_bits_denied),
    .auto_anon_out_0_d_bits_data
      (auto_coupler_to_bus_named_cbus_bus_xing_out_d_bits_data),
    .auto_anon_out_0_d_bits_corrupt
      (auto_coupler_to_bus_named_cbus_bus_xing_out_d_bits_corrupt),
    .auto_anon_in_1_a_ready
      (_system_bus_xbar_auto_anon_in_1_a_ready),
    .auto_anon_in_1_b_valid
      (_system_bus_xbar_auto_anon_in_1_b_valid),
    .auto_anon_in_1_b_bits_param
      (_system_bus_xbar_auto_anon_in_1_b_bits_param),
    .auto_anon_in_1_b_bits_address
      (_system_bus_xbar_auto_anon_in_1_b_bits_address),
    .auto_anon_in_1_c_ready
      (_system_bus_xbar_auto_anon_in_1_c_ready),
    .auto_anon_in_1_d_valid
      (_system_bus_xbar_auto_anon_in_1_d_valid),
    .auto_anon_in_1_d_bits_opcode
      (_system_bus_xbar_auto_anon_in_1_d_bits_opcode),
    .auto_anon_in_1_d_bits_param
      (_system_bus_xbar_auto_anon_in_1_d_bits_param),
    .auto_anon_in_1_d_bits_size
      (_system_bus_xbar_auto_anon_in_1_d_bits_size),
    .auto_anon_in_1_d_bits_source
      (_system_bus_xbar_auto_anon_in_1_d_bits_source),
    .auto_anon_in_1_d_bits_sink
      (_system_bus_xbar_auto_anon_in_1_d_bits_sink),
    .auto_anon_in_1_d_bits_denied
      (_system_bus_xbar_auto_anon_in_1_d_bits_denied),
    .auto_anon_in_1_d_bits_data
      (_system_bus_xbar_auto_anon_in_1_d_bits_data),
    .auto_anon_in_1_d_bits_corrupt
      (_system_bus_xbar_auto_anon_in_1_d_bits_corrupt),
    .auto_anon_in_0_a_ready
      (_system_bus_xbar_auto_anon_in_0_a_ready),
    .auto_anon_in_0_d_valid
      (_system_bus_xbar_auto_anon_in_0_d_valid),
    .auto_anon_in_0_d_bits_opcode
      (_system_bus_xbar_auto_anon_in_0_d_bits_opcode),
    .auto_anon_in_0_d_bits_param
      (_system_bus_xbar_auto_anon_in_0_d_bits_param),
    .auto_anon_in_0_d_bits_size
      (_system_bus_xbar_auto_anon_in_0_d_bits_size),
    .auto_anon_in_0_d_bits_source
      (_system_bus_xbar_auto_anon_in_0_d_bits_source),
    .auto_anon_in_0_d_bits_sink
      (_system_bus_xbar_auto_anon_in_0_d_bits_sink),
    .auto_anon_in_0_d_bits_denied
      (_system_bus_xbar_auto_anon_in_0_d_bits_denied),
    .auto_anon_in_0_d_bits_data
      (_system_bus_xbar_auto_anon_in_0_d_bits_data),
    .auto_anon_in_0_d_bits_corrupt
      (_system_bus_xbar_auto_anon_in_0_d_bits_corrupt),
    .auto_anon_out_2_a_valid
      (_system_bus_xbar_auto_anon_out_2_a_valid),
    .auto_anon_out_2_a_bits_opcode
      (_system_bus_xbar_auto_anon_out_2_a_bits_opcode),
    .auto_anon_out_2_a_bits_param
      (_system_bus_xbar_auto_anon_out_2_a_bits_param),
    .auto_anon_out_2_a_bits_size
      (_system_bus_xbar_auto_anon_out_2_a_bits_size),
    .auto_anon_out_2_a_bits_source
      (_system_bus_xbar_auto_anon_out_2_a_bits_source),
    .auto_anon_out_2_a_bits_address
      (_system_bus_xbar_auto_anon_out_2_a_bits_address),
    .auto_anon_out_2_a_bits_user_amba_prot_bufferable
      (_system_bus_xbar_auto_anon_out_2_a_bits_user_amba_prot_bufferable),
    .auto_anon_out_2_a_bits_user_amba_prot_modifiable
      (_system_bus_xbar_auto_anon_out_2_a_bits_user_amba_prot_modifiable),
    .auto_anon_out_2_a_bits_user_amba_prot_readalloc
      (_system_bus_xbar_auto_anon_out_2_a_bits_user_amba_prot_readalloc),
    .auto_anon_out_2_a_bits_user_amba_prot_writealloc
      (_system_bus_xbar_auto_anon_out_2_a_bits_user_amba_prot_writealloc),
    .auto_anon_out_2_a_bits_user_amba_prot_privileged
      (_system_bus_xbar_auto_anon_out_2_a_bits_user_amba_prot_privileged),
    .auto_anon_out_2_a_bits_user_amba_prot_secure
      (_system_bus_xbar_auto_anon_out_2_a_bits_user_amba_prot_secure),
    .auto_anon_out_2_a_bits_user_amba_prot_fetch
      (_system_bus_xbar_auto_anon_out_2_a_bits_user_amba_prot_fetch),
    .auto_anon_out_2_a_bits_mask
      (_system_bus_xbar_auto_anon_out_2_a_bits_mask),
    .auto_anon_out_2_a_bits_data
      (_system_bus_xbar_auto_anon_out_2_a_bits_data),
    .auto_anon_out_2_a_bits_corrupt
      (_system_bus_xbar_auto_anon_out_2_a_bits_corrupt),
    .auto_anon_out_2_d_ready
      (_system_bus_xbar_auto_anon_out_2_d_ready),
    .auto_anon_out_1_a_valid
      (auto_coupler_to_bus_named_coh_widget_anon_out_a_valid),
    .auto_anon_out_1_a_bits_opcode
      (auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_opcode),
    .auto_anon_out_1_a_bits_param
      (auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_param),
    .auto_anon_out_1_a_bits_size
      (auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_size),
    .auto_anon_out_1_a_bits_source
      (auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_source),
    .auto_anon_out_1_a_bits_address
      (auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_address),
    .auto_anon_out_1_a_bits_user_amba_prot_bufferable
      (auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_user_amba_prot_bufferable),
    .auto_anon_out_1_a_bits_user_amba_prot_modifiable
      (auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_user_amba_prot_modifiable),
    .auto_anon_out_1_a_bits_user_amba_prot_readalloc
      (auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_user_amba_prot_readalloc),
    .auto_anon_out_1_a_bits_user_amba_prot_writealloc
      (auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_user_amba_prot_writealloc),
    .auto_anon_out_1_a_bits_user_amba_prot_privileged
      (auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_user_amba_prot_privileged),
    .auto_anon_out_1_a_bits_user_amba_prot_secure
      (auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_user_amba_prot_secure),
    .auto_anon_out_1_a_bits_user_amba_prot_fetch
      (auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_user_amba_prot_fetch),
    .auto_anon_out_1_a_bits_mask
      (auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_mask),
    .auto_anon_out_1_a_bits_data
      (auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_data),
    .auto_anon_out_1_a_bits_corrupt
      (auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_corrupt),
    .auto_anon_out_1_b_ready
      (auto_coupler_to_bus_named_coh_widget_anon_out_b_ready),
    .auto_anon_out_1_c_valid
      (auto_coupler_to_bus_named_coh_widget_anon_out_c_valid),
    .auto_anon_out_1_c_bits_opcode
      (auto_coupler_to_bus_named_coh_widget_anon_out_c_bits_opcode),
    .auto_anon_out_1_c_bits_param
      (auto_coupler_to_bus_named_coh_widget_anon_out_c_bits_param),
    .auto_anon_out_1_c_bits_size
      (auto_coupler_to_bus_named_coh_widget_anon_out_c_bits_size),
    .auto_anon_out_1_c_bits_source
      (auto_coupler_to_bus_named_coh_widget_anon_out_c_bits_source),
    .auto_anon_out_1_c_bits_address
      (auto_coupler_to_bus_named_coh_widget_anon_out_c_bits_address),
    .auto_anon_out_1_c_bits_data
      (auto_coupler_to_bus_named_coh_widget_anon_out_c_bits_data),
    .auto_anon_out_1_c_bits_corrupt
      (auto_coupler_to_bus_named_coh_widget_anon_out_c_bits_corrupt),
    .auto_anon_out_1_d_ready
      (auto_coupler_to_bus_named_coh_widget_anon_out_d_ready),
    .auto_anon_out_1_e_valid
      (auto_coupler_to_bus_named_coh_widget_anon_out_e_valid),
    .auto_anon_out_1_e_bits_sink
      (auto_coupler_to_bus_named_coh_widget_anon_out_e_bits_sink),
    .auto_anon_out_0_a_valid
      (auto_coupler_to_bus_named_cbus_bus_xing_out_a_valid),
    .auto_anon_out_0_a_bits_opcode
      (auto_coupler_to_bus_named_cbus_bus_xing_out_a_bits_opcode),
    .auto_anon_out_0_a_bits_param
      (auto_coupler_to_bus_named_cbus_bus_xing_out_a_bits_param),
    .auto_anon_out_0_a_bits_size
      (auto_coupler_to_bus_named_cbus_bus_xing_out_a_bits_size),
    .auto_anon_out_0_a_bits_source
      (auto_coupler_to_bus_named_cbus_bus_xing_out_a_bits_source),
    .auto_anon_out_0_a_bits_address
      (auto_coupler_to_bus_named_cbus_bus_xing_out_a_bits_address),
    .auto_anon_out_0_a_bits_mask
      (auto_coupler_to_bus_named_cbus_bus_xing_out_a_bits_mask),
    .auto_anon_out_0_a_bits_data
      (auto_coupler_to_bus_named_cbus_bus_xing_out_a_bits_data),
    .auto_anon_out_0_a_bits_corrupt
      (auto_coupler_to_bus_named_cbus_bus_xing_out_a_bits_corrupt),
    .auto_anon_out_0_d_ready
      (auto_coupler_to_bus_named_cbus_bus_xing_out_d_ready)
  );
  TLFIFOFixer fixer (
    .clock
      (_fixedClockNode_auto_anon_out_0_clock),
    .reset
      (_fixedClockNode_auto_anon_out_0_reset),
    .auto_anon_in_1_a_valid
      (auto_coupler_from_rockettile_tl_master_clock_xing_in_a_valid),
    .auto_anon_in_1_a_bits_opcode
      (auto_coupler_from_rockettile_tl_master_clock_xing_in_a_bits_opcode),
    .auto_anon_in_1_a_bits_param
      (auto_coupler_from_rockettile_tl_master_clock_xing_in_a_bits_param),
    .auto_anon_in_1_a_bits_size
      (auto_coupler_from_rockettile_tl_master_clock_xing_in_a_bits_size),
    .auto_anon_in_1_a_bits_source
      (auto_coupler_from_rockettile_tl_master_clock_xing_in_a_bits_source),
    .auto_anon_in_1_a_bits_address
      (auto_coupler_from_rockettile_tl_master_clock_xing_in_a_bits_address),
    .auto_anon_in_1_a_bits_mask
      (auto_coupler_from_rockettile_tl_master_clock_xing_in_a_bits_mask),
    .auto_anon_in_1_a_bits_data
      (auto_coupler_from_rockettile_tl_master_clock_xing_in_a_bits_data),
    .auto_anon_in_1_a_bits_corrupt
      (auto_coupler_from_rockettile_tl_master_clock_xing_in_a_bits_corrupt),
    .auto_anon_in_1_b_ready
      (auto_coupler_from_rockettile_tl_master_clock_xing_in_b_ready),
    .auto_anon_in_1_c_valid
      (auto_coupler_from_rockettile_tl_master_clock_xing_in_c_valid),
    .auto_anon_in_1_c_bits_opcode
      (auto_coupler_from_rockettile_tl_master_clock_xing_in_c_bits_opcode),
    .auto_anon_in_1_c_bits_param
      (auto_coupler_from_rockettile_tl_master_clock_xing_in_c_bits_param),
    .auto_anon_in_1_c_bits_size
      (auto_coupler_from_rockettile_tl_master_clock_xing_in_c_bits_size),
    .auto_anon_in_1_c_bits_source
      (auto_coupler_from_rockettile_tl_master_clock_xing_in_c_bits_source),
    .auto_anon_in_1_c_bits_address
      (auto_coupler_from_rockettile_tl_master_clock_xing_in_c_bits_address),
    .auto_anon_in_1_c_bits_data
      (auto_coupler_from_rockettile_tl_master_clock_xing_in_c_bits_data),
    .auto_anon_in_1_c_bits_corrupt
      (auto_coupler_from_rockettile_tl_master_clock_xing_in_c_bits_corrupt),
    .auto_anon_in_1_d_ready
      (auto_coupler_from_rockettile_tl_master_clock_xing_in_d_ready),
    .auto_anon_in_1_e_valid
      (auto_coupler_from_rockettile_tl_master_clock_xing_in_e_valid),
    .auto_anon_in_1_e_bits_sink
      (auto_coupler_from_rockettile_tl_master_clock_xing_in_e_bits_sink),
    .auto_anon_in_0_a_valid
      (auto_coupler_from_bus_named_fbus_bus_xing_in_a_valid),
    .auto_anon_in_0_a_bits_opcode
      (auto_coupler_from_bus_named_fbus_bus_xing_in_a_bits_opcode),
    .auto_anon_in_0_a_bits_param
      (auto_coupler_from_bus_named_fbus_bus_xing_in_a_bits_param),
    .auto_anon_in_0_a_bits_size
      (auto_coupler_from_bus_named_fbus_bus_xing_in_a_bits_size),
    .auto_anon_in_0_a_bits_source
      (auto_coupler_from_bus_named_fbus_bus_xing_in_a_bits_source),
    .auto_anon_in_0_a_bits_address
      (auto_coupler_from_bus_named_fbus_bus_xing_in_a_bits_address),
    .auto_anon_in_0_a_bits_user_amba_prot_bufferable
      (auto_coupler_from_bus_named_fbus_bus_xing_in_a_bits_user_amba_prot_bufferable),
    .auto_anon_in_0_a_bits_user_amba_prot_modifiable
      (auto_coupler_from_bus_named_fbus_bus_xing_in_a_bits_user_amba_prot_modifiable),
    .auto_anon_in_0_a_bits_user_amba_prot_readalloc
      (auto_coupler_from_bus_named_fbus_bus_xing_in_a_bits_user_amba_prot_readalloc),
    .auto_anon_in_0_a_bits_user_amba_prot_writealloc
      (auto_coupler_from_bus_named_fbus_bus_xing_in_a_bits_user_amba_prot_writealloc),
    .auto_anon_in_0_a_bits_user_amba_prot_privileged
      (auto_coupler_from_bus_named_fbus_bus_xing_in_a_bits_user_amba_prot_privileged),
    .auto_anon_in_0_a_bits_user_amba_prot_secure
      (auto_coupler_from_bus_named_fbus_bus_xing_in_a_bits_user_amba_prot_secure),
    .auto_anon_in_0_a_bits_user_amba_prot_fetch
      (auto_coupler_from_bus_named_fbus_bus_xing_in_a_bits_user_amba_prot_fetch),
    .auto_anon_in_0_a_bits_mask
      (auto_coupler_from_bus_named_fbus_bus_xing_in_a_bits_mask),
    .auto_anon_in_0_a_bits_data
      (auto_coupler_from_bus_named_fbus_bus_xing_in_a_bits_data),
    .auto_anon_in_0_a_bits_corrupt
      (auto_coupler_from_bus_named_fbus_bus_xing_in_a_bits_corrupt),
    .auto_anon_in_0_d_ready
      (auto_coupler_from_bus_named_fbus_bus_xing_in_d_ready),
    .auto_anon_out_1_a_ready
      (_system_bus_xbar_auto_anon_in_1_a_ready),
    .auto_anon_out_1_b_valid
      (_system_bus_xbar_auto_anon_in_1_b_valid),
    .auto_anon_out_1_b_bits_param
      (_system_bus_xbar_auto_anon_in_1_b_bits_param),
    .auto_anon_out_1_b_bits_address
      (_system_bus_xbar_auto_anon_in_1_b_bits_address),
    .auto_anon_out_1_c_ready
      (_system_bus_xbar_auto_anon_in_1_c_ready),
    .auto_anon_out_1_d_valid
      (_system_bus_xbar_auto_anon_in_1_d_valid),
    .auto_anon_out_1_d_bits_opcode
      (_system_bus_xbar_auto_anon_in_1_d_bits_opcode),
    .auto_anon_out_1_d_bits_param
      (_system_bus_xbar_auto_anon_in_1_d_bits_param),
    .auto_anon_out_1_d_bits_size
      (_system_bus_xbar_auto_anon_in_1_d_bits_size),
    .auto_anon_out_1_d_bits_source
      (_system_bus_xbar_auto_anon_in_1_d_bits_source),
    .auto_anon_out_1_d_bits_sink
      (_system_bus_xbar_auto_anon_in_1_d_bits_sink),
    .auto_anon_out_1_d_bits_denied
      (_system_bus_xbar_auto_anon_in_1_d_bits_denied),
    .auto_anon_out_1_d_bits_data
      (_system_bus_xbar_auto_anon_in_1_d_bits_data),
    .auto_anon_out_1_d_bits_corrupt
      (_system_bus_xbar_auto_anon_in_1_d_bits_corrupt),
    .auto_anon_out_0_a_ready
      (_system_bus_xbar_auto_anon_in_0_a_ready),
    .auto_anon_out_0_d_valid
      (_system_bus_xbar_auto_anon_in_0_d_valid),
    .auto_anon_out_0_d_bits_opcode
      (_system_bus_xbar_auto_anon_in_0_d_bits_opcode),
    .auto_anon_out_0_d_bits_param
      (_system_bus_xbar_auto_anon_in_0_d_bits_param),
    .auto_anon_out_0_d_bits_size
      (_system_bus_xbar_auto_anon_in_0_d_bits_size),
    .auto_anon_out_0_d_bits_source
      (_system_bus_xbar_auto_anon_in_0_d_bits_source),
    .auto_anon_out_0_d_bits_sink
      (_system_bus_xbar_auto_anon_in_0_d_bits_sink),
    .auto_anon_out_0_d_bits_denied
      (_system_bus_xbar_auto_anon_in_0_d_bits_denied),
    .auto_anon_out_0_d_bits_data
      (_system_bus_xbar_auto_anon_in_0_d_bits_data),
    .auto_anon_out_0_d_bits_corrupt
      (_system_bus_xbar_auto_anon_in_0_d_bits_corrupt),
    .auto_anon_in_1_a_ready
      (auto_coupler_from_rockettile_tl_master_clock_xing_in_a_ready),
    .auto_anon_in_1_b_valid
      (auto_coupler_from_rockettile_tl_master_clock_xing_in_b_valid),
    .auto_anon_in_1_b_bits_param
      (auto_coupler_from_rockettile_tl_master_clock_xing_in_b_bits_param),
    .auto_anon_in_1_b_bits_address
      (auto_coupler_from_rockettile_tl_master_clock_xing_in_b_bits_address),
    .auto_anon_in_1_c_ready
      (auto_coupler_from_rockettile_tl_master_clock_xing_in_c_ready),
    .auto_anon_in_1_d_valid
      (auto_coupler_from_rockettile_tl_master_clock_xing_in_d_valid),
    .auto_anon_in_1_d_bits_opcode
      (auto_coupler_from_rockettile_tl_master_clock_xing_in_d_bits_opcode),
    .auto_anon_in_1_d_bits_param
      (auto_coupler_from_rockettile_tl_master_clock_xing_in_d_bits_param),
    .auto_anon_in_1_d_bits_size
      (auto_coupler_from_rockettile_tl_master_clock_xing_in_d_bits_size),
    .auto_anon_in_1_d_bits_source
      (auto_coupler_from_rockettile_tl_master_clock_xing_in_d_bits_source),
    .auto_anon_in_1_d_bits_sink
      (auto_coupler_from_rockettile_tl_master_clock_xing_in_d_bits_sink),
    .auto_anon_in_1_d_bits_denied
      (auto_coupler_from_rockettile_tl_master_clock_xing_in_d_bits_denied),
    .auto_anon_in_1_d_bits_data
      (auto_coupler_from_rockettile_tl_master_clock_xing_in_d_bits_data),
    .auto_anon_in_1_d_bits_corrupt
      (auto_coupler_from_rockettile_tl_master_clock_xing_in_d_bits_corrupt),
    .auto_anon_in_0_a_ready
      (auto_coupler_from_bus_named_fbus_bus_xing_in_a_ready),
    .auto_anon_in_0_d_valid
      (auto_coupler_from_bus_named_fbus_bus_xing_in_d_valid),
    .auto_anon_in_0_d_bits_opcode
      (auto_coupler_from_bus_named_fbus_bus_xing_in_d_bits_opcode),
    .auto_anon_in_0_d_bits_param
      (auto_coupler_from_bus_named_fbus_bus_xing_in_d_bits_param),
    .auto_anon_in_0_d_bits_size
      (auto_coupler_from_bus_named_fbus_bus_xing_in_d_bits_size),
    .auto_anon_in_0_d_bits_source
      (auto_coupler_from_bus_named_fbus_bus_xing_in_d_bits_source),
    .auto_anon_in_0_d_bits_sink
      (auto_coupler_from_bus_named_fbus_bus_xing_in_d_bits_sink),
    .auto_anon_in_0_d_bits_denied
      (auto_coupler_from_bus_named_fbus_bus_xing_in_d_bits_denied),
    .auto_anon_in_0_d_bits_data
      (auto_coupler_from_bus_named_fbus_bus_xing_in_d_bits_data),
    .auto_anon_in_0_d_bits_corrupt
      (auto_coupler_from_bus_named_fbus_bus_xing_in_d_bits_corrupt),
    .auto_anon_out_1_a_valid                          (_fixer_auto_anon_out_1_a_valid),
    .auto_anon_out_1_a_bits_opcode
      (_fixer_auto_anon_out_1_a_bits_opcode),
    .auto_anon_out_1_a_bits_param
      (_fixer_auto_anon_out_1_a_bits_param),
    .auto_anon_out_1_a_bits_size
      (_fixer_auto_anon_out_1_a_bits_size),
    .auto_anon_out_1_a_bits_source
      (_fixer_auto_anon_out_1_a_bits_source),
    .auto_anon_out_1_a_bits_address
      (_fixer_auto_anon_out_1_a_bits_address),
    .auto_anon_out_1_a_bits_mask
      (_fixer_auto_anon_out_1_a_bits_mask),
    .auto_anon_out_1_a_bits_data
      (_fixer_auto_anon_out_1_a_bits_data),
    .auto_anon_out_1_a_bits_corrupt
      (_fixer_auto_anon_out_1_a_bits_corrupt),
    .auto_anon_out_1_b_ready                          (_fixer_auto_anon_out_1_b_ready),
    .auto_anon_out_1_c_valid                          (_fixer_auto_anon_out_1_c_valid),
    .auto_anon_out_1_c_bits_opcode
      (_fixer_auto_anon_out_1_c_bits_opcode),
    .auto_anon_out_1_c_bits_param
      (_fixer_auto_anon_out_1_c_bits_param),
    .auto_anon_out_1_c_bits_size
      (_fixer_auto_anon_out_1_c_bits_size),
    .auto_anon_out_1_c_bits_source
      (_fixer_auto_anon_out_1_c_bits_source),
    .auto_anon_out_1_c_bits_address
      (_fixer_auto_anon_out_1_c_bits_address),
    .auto_anon_out_1_c_bits_data
      (_fixer_auto_anon_out_1_c_bits_data),
    .auto_anon_out_1_c_bits_corrupt
      (_fixer_auto_anon_out_1_c_bits_corrupt),
    .auto_anon_out_1_d_ready                          (_fixer_auto_anon_out_1_d_ready),
    .auto_anon_out_1_e_valid                          (_fixer_auto_anon_out_1_e_valid),
    .auto_anon_out_1_e_bits_sink
      (_fixer_auto_anon_out_1_e_bits_sink),
    .auto_anon_out_0_a_valid                          (_fixer_auto_anon_out_0_a_valid),
    .auto_anon_out_0_a_bits_opcode
      (_fixer_auto_anon_out_0_a_bits_opcode),
    .auto_anon_out_0_a_bits_param
      (_fixer_auto_anon_out_0_a_bits_param),
    .auto_anon_out_0_a_bits_size
      (_fixer_auto_anon_out_0_a_bits_size),
    .auto_anon_out_0_a_bits_source
      (_fixer_auto_anon_out_0_a_bits_source),
    .auto_anon_out_0_a_bits_address
      (_fixer_auto_anon_out_0_a_bits_address),
    .auto_anon_out_0_a_bits_user_amba_prot_bufferable
      (_fixer_auto_anon_out_0_a_bits_user_amba_prot_bufferable),
    .auto_anon_out_0_a_bits_user_amba_prot_modifiable
      (_fixer_auto_anon_out_0_a_bits_user_amba_prot_modifiable),
    .auto_anon_out_0_a_bits_user_amba_prot_readalloc
      (_fixer_auto_anon_out_0_a_bits_user_amba_prot_readalloc),
    .auto_anon_out_0_a_bits_user_amba_prot_writealloc
      (_fixer_auto_anon_out_0_a_bits_user_amba_prot_writealloc),
    .auto_anon_out_0_a_bits_user_amba_prot_privileged
      (_fixer_auto_anon_out_0_a_bits_user_amba_prot_privileged),
    .auto_anon_out_0_a_bits_user_amba_prot_secure
      (_fixer_auto_anon_out_0_a_bits_user_amba_prot_secure),
    .auto_anon_out_0_a_bits_user_amba_prot_fetch
      (_fixer_auto_anon_out_0_a_bits_user_amba_prot_fetch),
    .auto_anon_out_0_a_bits_mask
      (_fixer_auto_anon_out_0_a_bits_mask),
    .auto_anon_out_0_a_bits_data
      (_fixer_auto_anon_out_0_a_bits_data),
    .auto_anon_out_0_a_bits_corrupt
      (_fixer_auto_anon_out_0_a_bits_corrupt),
    .auto_anon_out_0_d_ready                          (_fixer_auto_anon_out_0_d_ready)
  );
  TLInterconnectCoupler_sbus_to_port_named_mmio_port_axi4 coupler_to_port_named_mmio_port_axi4 (
    .clock                                       (_fixedClockNode_auto_anon_out_0_clock),
    .reset                                       (_fixedClockNode_auto_anon_out_0_reset),
    .auto_axi4buf_out_aw_ready
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_ready),
    .auto_axi4buf_out_w_ready
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_ready),
    .auto_axi4buf_out_b_valid
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_b_valid),
    .auto_axi4buf_out_b_bits_id
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_b_bits_id),
    .auto_axi4buf_out_b_bits_resp
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_b_bits_resp),
    .auto_axi4buf_out_ar_ready
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_ready),
    .auto_axi4buf_out_r_valid
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_valid),
    .auto_axi4buf_out_r_bits_id
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_bits_id),
    .auto_axi4buf_out_r_bits_data
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_bits_data),
    .auto_axi4buf_out_r_bits_resp
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_bits_resp),
    .auto_axi4buf_out_r_bits_last
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_bits_last),
    .auto_tl_in_a_valid
      (_system_bus_xbar_auto_anon_out_2_a_valid),
    .auto_tl_in_a_bits_opcode
      (_system_bus_xbar_auto_anon_out_2_a_bits_opcode),
    .auto_tl_in_a_bits_param
      (_system_bus_xbar_auto_anon_out_2_a_bits_param),
    .auto_tl_in_a_bits_size
      (_system_bus_xbar_auto_anon_out_2_a_bits_size),
    .auto_tl_in_a_bits_source
      (_system_bus_xbar_auto_anon_out_2_a_bits_source),
    .auto_tl_in_a_bits_address
      (_system_bus_xbar_auto_anon_out_2_a_bits_address),
    .auto_tl_in_a_bits_user_amba_prot_bufferable
      (_system_bus_xbar_auto_anon_out_2_a_bits_user_amba_prot_bufferable),
    .auto_tl_in_a_bits_user_amba_prot_modifiable
      (_system_bus_xbar_auto_anon_out_2_a_bits_user_amba_prot_modifiable),
    .auto_tl_in_a_bits_user_amba_prot_readalloc
      (_system_bus_xbar_auto_anon_out_2_a_bits_user_amba_prot_readalloc),
    .auto_tl_in_a_bits_user_amba_prot_writealloc
      (_system_bus_xbar_auto_anon_out_2_a_bits_user_amba_prot_writealloc),
    .auto_tl_in_a_bits_user_amba_prot_privileged
      (_system_bus_xbar_auto_anon_out_2_a_bits_user_amba_prot_privileged),
    .auto_tl_in_a_bits_user_amba_prot_secure
      (_system_bus_xbar_auto_anon_out_2_a_bits_user_amba_prot_secure),
    .auto_tl_in_a_bits_user_amba_prot_fetch
      (_system_bus_xbar_auto_anon_out_2_a_bits_user_amba_prot_fetch),
    .auto_tl_in_a_bits_mask
      (_system_bus_xbar_auto_anon_out_2_a_bits_mask),
    .auto_tl_in_a_bits_data
      (_system_bus_xbar_auto_anon_out_2_a_bits_data),
    .auto_tl_in_a_bits_corrupt
      (_system_bus_xbar_auto_anon_out_2_a_bits_corrupt),
    .auto_tl_in_d_ready
      (_system_bus_xbar_auto_anon_out_2_d_ready),
    .auto_axi4buf_out_aw_valid
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_valid),
    .auto_axi4buf_out_aw_bits_id
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_id),
    .auto_axi4buf_out_aw_bits_addr
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_addr),
    .auto_axi4buf_out_aw_bits_len
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_len),
    .auto_axi4buf_out_aw_bits_size
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_size),
    .auto_axi4buf_out_aw_bits_burst
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_burst),
    .auto_axi4buf_out_aw_bits_lock
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_lock),
    .auto_axi4buf_out_aw_bits_cache
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_cache),
    .auto_axi4buf_out_aw_bits_prot
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_prot),
    .auto_axi4buf_out_aw_bits_qos
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_qos),
    .auto_axi4buf_out_w_valid
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_valid),
    .auto_axi4buf_out_w_bits_data
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_bits_data),
    .auto_axi4buf_out_w_bits_strb
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_bits_strb),
    .auto_axi4buf_out_w_bits_last
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_bits_last),
    .auto_axi4buf_out_b_ready
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_b_ready),
    .auto_axi4buf_out_ar_valid
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_valid),
    .auto_axi4buf_out_ar_bits_id
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_id),
    .auto_axi4buf_out_ar_bits_addr
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_addr),
    .auto_axi4buf_out_ar_bits_len
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_len),
    .auto_axi4buf_out_ar_bits_size
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_size),
    .auto_axi4buf_out_ar_bits_burst
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_burst),
    .auto_axi4buf_out_ar_bits_lock
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_lock),
    .auto_axi4buf_out_ar_bits_cache
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_cache),
    .auto_axi4buf_out_ar_bits_prot
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_prot),
    .auto_axi4buf_out_ar_bits_qos
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_qos),
    .auto_axi4buf_out_r_ready
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_ready),
    .auto_tl_in_a_ready
      (_coupler_to_port_named_mmio_port_axi4_auto_tl_in_a_ready),
    .auto_tl_in_d_valid
      (_coupler_to_port_named_mmio_port_axi4_auto_tl_in_d_valid),
    .auto_tl_in_d_bits_opcode
      (_coupler_to_port_named_mmio_port_axi4_auto_tl_in_d_bits_opcode),
    .auto_tl_in_d_bits_size
      (_coupler_to_port_named_mmio_port_axi4_auto_tl_in_d_bits_size),
    .auto_tl_in_d_bits_source
      (_coupler_to_port_named_mmio_port_axi4_auto_tl_in_d_bits_source),
    .auto_tl_in_d_bits_denied
      (_coupler_to_port_named_mmio_port_axi4_auto_tl_in_d_bits_denied),
    .auto_tl_in_d_bits_data
      (_coupler_to_port_named_mmio_port_axi4_auto_tl_in_d_bits_data),
    .auto_tl_in_d_bits_corrupt
      (_coupler_to_port_named_mmio_port_axi4_auto_tl_in_d_bits_corrupt)
  );
  assign auto_sbus_clock_groups_out_2_member_coh_1_clock =
    auto_sbus_clock_groups_in_member_sbus_5_clock;
  assign auto_sbus_clock_groups_out_2_member_coh_1_reset =
    auto_sbus_clock_groups_in_member_sbus_5_reset;
  assign auto_sbus_clock_groups_out_2_member_coh_0_clock =
    auto_sbus_clock_groups_in_member_sbus_4_clock;
  assign auto_sbus_clock_groups_out_2_member_coh_0_reset =
    auto_sbus_clock_groups_in_member_sbus_4_reset;
  assign auto_sbus_clock_groups_out_1_member_fbus_0_clock =
    auto_sbus_clock_groups_in_member_sbus_3_clock;
  assign auto_sbus_clock_groups_out_1_member_fbus_0_reset =
    auto_sbus_clock_groups_in_member_sbus_3_reset;
  assign auto_sbus_clock_groups_out_0_member_cbus_0_clock =
    auto_sbus_clock_groups_in_member_sbus_1_clock;
  assign auto_sbus_clock_groups_out_0_member_cbus_0_reset =
    auto_sbus_clock_groups_in_member_sbus_1_reset;
endmodule

module TLMonitor_5(
  input        clock,
               reset,
               io_in_a_ready,
               io_in_a_valid,
  input [2:0]  io_in_a_bits_opcode,
               io_in_a_bits_param,
  input [3:0]  io_in_a_bits_size,
               io_in_a_bits_source,
  input [31:0] io_in_a_bits_address,
  input [7:0]  io_in_a_bits_mask,
  input        io_in_a_bits_corrupt,
               io_in_d_ready,
               io_in_d_valid,
  input [2:0]  io_in_d_bits_opcode,
  input [1:0]  io_in_d_bits_param,
  input [3:0]  io_in_d_bits_size,
               io_in_d_bits_source,
  input [1:0]  io_in_d_bits_sink,
  input        io_in_d_bits_denied,
               io_in_d_bits_corrupt
);

  wire [31:0]  _plusarg_reader_1_out;
  wire [31:0]  _plusarg_reader_out;
  wire [26:0]  _GEN = 27'hFFF << io_in_a_bits_size;
  wire         _GEN_0 = io_in_a_ready & io_in_a_valid;
  reg  [8:0]   a_first_counter;
  reg  [2:0]   opcode;
  reg  [2:0]   param;
  reg  [3:0]   size;
  reg  [3:0]   source;
  reg  [31:0]  address;
  reg  [8:0]   d_first_counter;
  reg  [2:0]   opcode_1;
  reg  [1:0]   param_1;
  reg  [3:0]   size_1;
  reg  [3:0]   source_1;
  reg  [1:0]   sink;
  reg          denied;
  reg  [15:0]  inflight;
  reg  [63:0]  inflight_opcodes;
  reg  [127:0] inflight_sizes;
  reg  [8:0]   a_first_counter_1;
  wire         a_first_1 = a_first_counter_1 == 9'h0;
  reg  [8:0]   d_first_counter_1;
  wire         d_first_1 = d_first_counter_1 == 9'h0;
  wire [15:0]  _GEN_1 = {12'h0, io_in_a_bits_source};
  wire [15:0]  _GEN_2 = 16'h1 << _GEN_1;
  wire         _GEN_3 = _GEN_0 & a_first_1;
  wire         d_release_ack = io_in_d_bits_opcode == 3'h6;
  wire [15:0]  _GEN_4 = {12'h0, io_in_d_bits_source};
  wire [15:0]  _GEN_5 = 16'h1 << _GEN_4;
  reg  [31:0]  watchdog;
  reg  [15:0]  inflight_1;
  reg  [127:0] inflight_sizes_1;
  reg  [8:0]   d_first_counter_2;
  wire         d_first_2 = d_first_counter_2 == 9'h0;
  reg  [31:0]  watchdog_1;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      automatic logic [7:0][2:0] _GEN_6 =
        '{3'h4, 3'h5, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic [7:0][2:0] _GEN_7 =
        '{3'h4, 3'h4, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic [11:0]     _GEN_8 = io_in_a_bits_address[11:0] & ~(_GEN[11:0]);
      automatic logic            _GEN_9 = io_in_a_bits_size > 4'h2;
      automatic logic            mask_size = io_in_a_bits_size[1:0] == 2'h2;
      automatic logic            mask_acc =
        _GEN_9 | mask_size & ~(io_in_a_bits_address[2]);
      automatic logic            mask_acc_1 =
        _GEN_9 | mask_size & io_in_a_bits_address[2];
      automatic logic            mask_size_1 = io_in_a_bits_size[1:0] == 2'h1;
      automatic logic            mask_eq_2 =
        ~(io_in_a_bits_address[2]) & ~(io_in_a_bits_address[1]);
      automatic logic            mask_acc_2 = mask_acc | mask_size_1 & mask_eq_2;
      automatic logic            mask_eq_3 =
        ~(io_in_a_bits_address[2]) & io_in_a_bits_address[1];
      automatic logic            mask_acc_3 = mask_acc | mask_size_1 & mask_eq_3;
      automatic logic            mask_eq_4 =
        io_in_a_bits_address[2] & ~(io_in_a_bits_address[1]);
      automatic logic            mask_acc_4 = mask_acc_1 | mask_size_1 & mask_eq_4;
      automatic logic            mask_eq_5 =
        io_in_a_bits_address[2] & io_in_a_bits_address[1];
      automatic logic            mask_acc_5 = mask_acc_1 | mask_size_1 & mask_eq_5;
      automatic logic [7:0]      mask =
        {mask_acc_5 | mask_eq_5 & io_in_a_bits_address[0],
         mask_acc_5 | mask_eq_5 & ~(io_in_a_bits_address[0]),
         mask_acc_4 | mask_eq_4 & io_in_a_bits_address[0],
         mask_acc_4 | mask_eq_4 & ~(io_in_a_bits_address[0]),
         mask_acc_3 | mask_eq_3 & io_in_a_bits_address[0],
         mask_acc_3 | mask_eq_3 & ~(io_in_a_bits_address[0]),
         mask_acc_2 | mask_eq_2 & io_in_a_bits_address[0],
         mask_acc_2 | mask_eq_2 & ~(io_in_a_bits_address[0])};
      automatic logic            _GEN_10 = io_in_a_bits_size < 4'hD;
      automatic logic            _GEN_11 = io_in_a_bits_size < 4'h7;
      automatic logic            _GEN_12 = io_in_a_bits_address[31:28] == 4'h8;
      automatic logic            _GEN_13 = _GEN_10 & _GEN_11 & _GEN_12;
      automatic logic            _GEN_14 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_15 = io_in_a_bits_param > 3'h2;
      automatic logic            _GEN_16 = io_in_a_bits_mask != 8'hFF;
      automatic logic            _GEN_17 =
        io_in_a_valid & (&io_in_a_bits_opcode) & ~reset;
      automatic logic            _GEN_18 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_19 =
        {io_in_a_bits_address[31:14], ~(io_in_a_bits_address[13:12])} == 20'h0;
      automatic logic            _GEN_20 = _GEN_10 & _GEN_19;
      automatic logic            _GEN_21 = io_in_a_bits_address[31:12] == 20'h0;
      automatic logic            _GEN_22 =
        {io_in_a_bits_address[31:26], io_in_a_bits_address[25:16] ^ 10'h200} == 16'h0;
      automatic logic            _GEN_23 =
        {io_in_a_bits_address[31:28], ~(io_in_a_bits_address[27:26])} == 6'h0;
      automatic logic            _GEN_24 =
        {io_in_a_bits_address[31], ~(io_in_a_bits_address[30:29])} == 3'h0;
      automatic logic            _GEN_25 = io_in_a_bits_mask != mask;
      automatic logic            _GEN_26 =
        _GEN_10
        & (_GEN_20 | _GEN_11 & (_GEN_21 | _GEN_22 | _GEN_23 | _GEN_12)
           | io_in_a_bits_size < 4'h9 & _GEN_24);
      automatic logic            _GEN_27 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_28 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_29 =
        _GEN_10 & io_in_a_bits_size < 4'h4 & (_GEN_21 | _GEN_19 | _GEN_22 | _GEN_23);
      automatic logic            _GEN_30 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_31 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h3 & ~reset;
      automatic logic            _GEN_32 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h5 & ~reset;
      automatic logic            _GEN_33 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_34 = io_in_d_bits_size < 4'h3;
      automatic logic            _GEN_35 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_36 = io_in_d_bits_param == 2'h2;
      automatic logic            _GEN_37 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h5 & ~reset;
      automatic logic            _GEN_38 = ~io_in_d_bits_denied | io_in_d_bits_corrupt;
      automatic logic            _GEN_39 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_40 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_41 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_42 = io_in_a_valid & (|a_first_counter) & ~reset;
      automatic logic            _GEN_43 = io_in_d_valid & (|d_first_counter) & ~reset;
      automatic logic [63:0]     _GEN_44 =
        inflight_opcodes >> {58'h0, io_in_d_bits_source, 2'h0};
      automatic logic [127:0]    _GEN_45 = {121'h0, io_in_d_bits_source, 3'h0};
      automatic logic            _GEN_46 = io_in_a_valid & a_first_1;
      automatic logic [15:0]     a_set_wo_ready = _GEN_46 ? _GEN_2 : 16'h0;
      automatic logic            _GEN_47 = io_in_d_valid & d_first_1;
      automatic logic            _GEN_48 = _GEN_47 & ~d_release_ack;
      automatic logic            _GEN_49 = io_in_a_bits_source == io_in_d_bits_source;
      automatic logic            same_cycle_resp = _GEN_46 & _GEN_49;
      automatic logic            _GEN_50 = _GEN_48 & same_cycle_resp & ~reset;
      automatic logic            _GEN_51 = _GEN_48 & ~same_cycle_resp & ~reset;
      automatic logic [7:0]      _GEN_52 = {4'h0, io_in_d_bits_size};
      automatic logic            _GEN_53 =
        io_in_d_valid & d_first_2 & d_release_ack & ~reset;
      automatic logic [15:0]     _GEN_54 = inflight >> _GEN_1;
      automatic logic [15:0]     _GEN_55 = inflight >> _GEN_4;
      automatic logic [127:0]    _GEN_56 = inflight_sizes >> _GEN_45;
      automatic logic [15:0]     _GEN_57 = inflight_1 >> _GEN_4;
      automatic logic [127:0]    _GEN_58 = inflight_sizes_1 >> _GEN_45;
      if (_GEN_14 & ~_GEN_13) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & ~_GEN_9) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & _GEN_15) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock carries invalid grow param (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & _GEN_16) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock is corrupt (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & ~_GEN_13) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & ~_GEN_9) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & _GEN_15) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm carries invalid grow param (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & ~(|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & _GEN_16) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm is corrupt (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & ~_GEN_10) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18
          & ~(_GEN_20 | _GEN_11
              & (_GEN_21
                 | {io_in_a_bits_address[31:17], ~(io_in_a_bits_address[16])} == 16'h0
                 | _GEN_22 | _GEN_23 | _GEN_24 | _GEN_12))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get address not aligned to size (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get carries invalid param (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & _GEN_25) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get contains invalid mask (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get is corrupt (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & ~_GEN_26) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull address not aligned to size (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull carries invalid param (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & _GEN_25) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull contains invalid mask (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & ~_GEN_26) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial address not aligned to size (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial carries invalid param (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & (|(io_in_a_bits_mask & ~mask))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial contains invalid mask (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & ~_GEN_29) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & io_in_a_bits_param > 3'h4) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & _GEN_25) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & ~_GEN_29) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical address not aligned to size (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & io_in_a_bits_param[2]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical carries invalid opcode param (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & _GEN_25) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical contains invalid mask (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & ~(_GEN_10 & _GEN_20)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint address not aligned to size (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & (|(io_in_a_bits_param[2:1]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint carries invalid opcode param (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & _GEN_25) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint contains invalid mask (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint is corrupt (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & ~reset & (&io_in_d_bits_opcode)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel has invalid opcode (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_33 & _GEN_34) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_33 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_33 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck is corrupt (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_33 & io_in_d_bits_denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck is denied (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_35 & _GEN_34) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant smaller than a beat (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_35 & (&io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid cap param (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_35 & _GEN_36) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries toN param (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_35 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant is corrupt (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & _GEN_34) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData smaller than a beat (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & (&io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid cap param (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & _GEN_36) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries toN param (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & ~_GEN_38) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData is denied but not corrupt (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_39 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck carries invalid param (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_39 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck is corrupt (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_40 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData carries invalid param (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_40 & ~_GEN_38) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData is denied but not corrupt (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_41 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck carries invalid param (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_41 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck is corrupt (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & io_in_a_bits_opcode != opcode) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel opcode changed within multibeat operation (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & io_in_a_bits_param != param) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel param changed within multibeat operation (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & io_in_a_bits_size != size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel size changed within multibeat operation (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & io_in_a_bits_source != source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel source changed within multibeat operation (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & io_in_a_bits_address != address) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel address changed with multibeat operation (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & io_in_d_bits_opcode != opcode_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel opcode changed within multibeat operation (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & io_in_d_bits_param != param_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel param changed within multibeat operation (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & io_in_d_bits_size != size_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel size changed within multibeat operation (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & io_in_d_bits_source != source_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel source changed within multibeat operation (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & io_in_d_bits_sink != sink) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel sink changed with multibeat operation (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & io_in_d_bits_denied != denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel denied changed with multibeat operation (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_3 & ~reset & _GEN_54[0]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel re-used a source ID (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_48 & ~reset & ~(_GEN_55[0] | same_cycle_resp)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_50
          & ~(io_in_d_bits_opcode == _GEN_7[io_in_a_bits_opcode]
              | io_in_d_bits_opcode == _GEN_6[io_in_a_bits_opcode])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_50 & io_in_a_bits_size != io_in_d_bits_size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_51
          & ~(io_in_d_bits_opcode == _GEN_7[_GEN_44[3:1]]
              | io_in_d_bits_opcode == _GEN_6[_GEN_44[3:1]])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_51 & _GEN_52 != {1'h0, _GEN_56[7:1]}) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_47 & a_first_1 & io_in_a_valid & _GEN_49 & ~d_release_ack & ~reset
          & ~(~io_in_d_ready | io_in_a_ready)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ready check\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(a_set_wo_ready != (_GEN_48 ? _GEN_5 : 16'h0)
              | a_set_wo_ready == 16'h0)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' and 'D' concurrent, despite minlatency > 0 (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight == 16'h0 | _plusarg_reader_out == 32'h0
              | watchdog < _plusarg_reader_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_53 & ~(_GEN_57[0])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_53 & _GEN_52 != {1'h0, _GEN_58[7:1]}) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight_1 == 16'h0 | _plusarg_reader_1_out == 32'h0
              | watchdog_1 < _plusarg_reader_1_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    automatic logic _GEN_59;
    _GEN_59 = io_in_d_ready & io_in_d_valid;
    if (reset) begin
      a_first_counter <= 9'h0;
      d_first_counter <= 9'h0;
      inflight <= 16'h0;
      inflight_opcodes <= 64'h0;
      inflight_sizes <= 128'h0;
      a_first_counter_1 <= 9'h0;
      d_first_counter_1 <= 9'h0;
      watchdog <= 32'h0;
      inflight_1 <= 16'h0;
      inflight_sizes_1 <= 128'h0;
      d_first_counter_2 <= 9'h0;
      watchdog_1 <= 32'h0;
    end
    else begin
      automatic logic         _GEN_60;
      automatic logic [142:0] _GEN_61 = 143'hFF << {136'h0, io_in_d_bits_source, 3'h0};
      automatic logic         _GEN_62;
      automatic logic [142:0] _GEN_63 = 143'hF << {137'h0, io_in_d_bits_source, 2'h0};
      automatic logic [130:0] _GEN_64 =
        {127'h0, _GEN_3 ? {io_in_a_bits_opcode, 1'h1} : 4'h0}
        << {125'h0, io_in_a_bits_source, 2'h0};
      automatic logic [131:0] _GEN_65 =
        {127'h0, _GEN_3 ? {io_in_a_bits_size, 1'h1} : 5'h0}
        << {125'h0, io_in_a_bits_source, 3'h0};
      _GEN_60 = _GEN_59 & d_first_1 & ~d_release_ack;
      _GEN_62 = _GEN_59 & d_first_2 & d_release_ack;
      if (_GEN_0) begin
        if (|a_first_counter)
          a_first_counter <= a_first_counter - 9'h1;
        else if (io_in_a_bits_opcode[2])
          a_first_counter <= 9'h0;
        else
          a_first_counter <= ~(_GEN[11:3]);
        if (a_first_1) begin
          if (io_in_a_bits_opcode[2])
            a_first_counter_1 <= 9'h0;
          else
            a_first_counter_1 <= ~(_GEN[11:3]);
        end
        else
          a_first_counter_1 <= a_first_counter_1 - 9'h1;
      end
      if (_GEN_59) begin
        automatic logic [26:0] _GEN_66 = 27'hFFF << io_in_d_bits_size;
        if (|d_first_counter)
          d_first_counter <= d_first_counter - 9'h1;
        else if (io_in_d_bits_opcode[0])
          d_first_counter <= ~(_GEN_66[11:3]);
        else
          d_first_counter <= 9'h0;
        if (d_first_1) begin
          if (io_in_d_bits_opcode[0])
            d_first_counter_1 <= ~(_GEN_66[11:3]);
          else
            d_first_counter_1 <= 9'h0;
        end
        else
          d_first_counter_1 <= d_first_counter_1 - 9'h1;
        if (d_first_2) begin
          if (io_in_d_bits_opcode[0])
            d_first_counter_2 <= ~(_GEN_66[11:3]);
          else
            d_first_counter_2 <= 9'h0;
        end
        else
          d_first_counter_2 <= d_first_counter_2 - 9'h1;
        watchdog_1 <= 32'h0;
      end
      else
        watchdog_1 <= watchdog_1 + 32'h1;
      inflight <= (inflight | (_GEN_3 ? _GEN_2 : 16'h0)) & ~(_GEN_60 ? _GEN_5 : 16'h0);
      inflight_opcodes <=
        (inflight_opcodes | (_GEN_3 ? _GEN_64[63:0] : 64'h0))
        & ~(_GEN_60 ? _GEN_63[63:0] : 64'h0);
      inflight_sizes <=
        (inflight_sizes | (_GEN_3 ? _GEN_65[127:0] : 128'h0))
        & ~(_GEN_60 ? _GEN_61[127:0] : 128'h0);
      if (_GEN_0 | _GEN_59)
        watchdog <= 32'h0;
      else
        watchdog <= watchdog + 32'h1;
      inflight_1 <= inflight_1 & ~(_GEN_62 ? _GEN_5 : 16'h0);
      inflight_sizes_1 <= inflight_sizes_1 & ~(_GEN_62 ? _GEN_61[127:0] : 128'h0);
    end
    if (_GEN_0 & ~(|a_first_counter)) begin
      opcode <= io_in_a_bits_opcode;
      param <= io_in_a_bits_param;
      size <= io_in_a_bits_size;
      source <= io_in_a_bits_source;
      address <= io_in_a_bits_address;
    end
    if (_GEN_59 & ~(|d_first_counter)) begin
      opcode_1 <= io_in_d_bits_opcode;
      param_1 <= io_in_d_bits_param;
      size_1 <= io_in_d_bits_size;
      source_1 <= io_in_d_bits_source;
      sink <= io_in_d_bits_sink;
      denied <= io_in_d_bits_denied;
    end
  end // always @(posedge)
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader (
    .out (_plusarg_reader_out)
  );
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader_1 (
    .out (_plusarg_reader_1_out)
  );
endmodule

module Queue2_TLBundleA_a32d64s4k2z4u(
  input         clock,
                reset,
                io_enq_valid,
  input  [2:0]  io_enq_bits_opcode,
                io_enq_bits_param,
  input  [3:0]  io_enq_bits_size,
                io_enq_bits_source,
  input  [31:0] io_enq_bits_address,
  input         io_enq_bits_user_amba_prot_bufferable,
                io_enq_bits_user_amba_prot_modifiable,
                io_enq_bits_user_amba_prot_readalloc,
                io_enq_bits_user_amba_prot_writealloc,
                io_enq_bits_user_amba_prot_privileged,
                io_enq_bits_user_amba_prot_secure,
                io_enq_bits_user_amba_prot_fetch,
  input  [7:0]  io_enq_bits_mask,
  input  [63:0] io_enq_bits_data,
  input         io_enq_bits_corrupt,
                io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
  output [2:0]  io_deq_bits_opcode,
                io_deq_bits_param,
  output [3:0]  io_deq_bits_size,
                io_deq_bits_source,
  output [31:0] io_deq_bits_address,
  output        io_deq_bits_user_amba_prot_bufferable,
                io_deq_bits_user_amba_prot_modifiable,
                io_deq_bits_user_amba_prot_readalloc,
                io_deq_bits_user_amba_prot_writealloc,
                io_deq_bits_user_amba_prot_privileged,
                io_deq_bits_user_amba_prot_secure,
                io_deq_bits_user_amba_prot_fetch,
  output [7:0]  io_deq_bits_mask,
  output [63:0] io_deq_bits_data,
  output        io_deq_bits_corrupt
);

  wire [125:0] _ram_ext_R0_data;
  reg          wrap;
  reg          wrap_1;
  reg          maybe_full;
  wire         ptr_match = wrap == wrap_1;
  wire         empty = ptr_match & ~maybe_full;
  wire         full = ptr_match & maybe_full;
  wire         do_enq = ~full & io_enq_valid;
  always @(posedge clock) begin
    if (reset) begin
      wrap <= 1'h0;
      wrap_1 <= 1'h0;
      maybe_full <= 1'h0;
    end
    else begin
      automatic logic do_deq = io_deq_ready & ~empty;
      if (do_enq)
        wrap <= wrap - 1'h1;
      if (do_deq)
        wrap_1 <= wrap_1 - 1'h1;
      if (do_enq != do_deq)
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_combMem_18 ram_ext (
    .R0_addr (wrap_1),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (wrap),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data
      ({io_enq_bits_corrupt,
        io_enq_bits_data,
        io_enq_bits_mask,
        io_enq_bits_user_amba_prot_fetch,
        io_enq_bits_user_amba_prot_secure,
        io_enq_bits_user_amba_prot_privileged,
        io_enq_bits_user_amba_prot_writealloc,
        io_enq_bits_user_amba_prot_readalloc,
        io_enq_bits_user_amba_prot_modifiable,
        io_enq_bits_user_amba_prot_bufferable,
        io_enq_bits_address,
        io_enq_bits_source,
        io_enq_bits_size,
        io_enq_bits_param,
        io_enq_bits_opcode}),
    .R0_data (_ram_ext_R0_data)
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
  assign io_deq_bits_opcode = _ram_ext_R0_data[2:0];
  assign io_deq_bits_param = _ram_ext_R0_data[5:3];
  assign io_deq_bits_size = _ram_ext_R0_data[9:6];
  assign io_deq_bits_source = _ram_ext_R0_data[13:10];
  assign io_deq_bits_address = _ram_ext_R0_data[45:14];
  assign io_deq_bits_user_amba_prot_bufferable = _ram_ext_R0_data[46];
  assign io_deq_bits_user_amba_prot_modifiable = _ram_ext_R0_data[47];
  assign io_deq_bits_user_amba_prot_readalloc = _ram_ext_R0_data[48];
  assign io_deq_bits_user_amba_prot_writealloc = _ram_ext_R0_data[49];
  assign io_deq_bits_user_amba_prot_privileged = _ram_ext_R0_data[50];
  assign io_deq_bits_user_amba_prot_secure = _ram_ext_R0_data[51];
  assign io_deq_bits_user_amba_prot_fetch = _ram_ext_R0_data[52];
  assign io_deq_bits_mask = _ram_ext_R0_data[60:53];
  assign io_deq_bits_data = _ram_ext_R0_data[124:61];
  assign io_deq_bits_corrupt = _ram_ext_R0_data[125];
endmodule

module Queue2_TLBundleD_a32d64s4k2z4u(
  input         clock,
                reset,
                io_enq_valid,
  input  [2:0]  io_enq_bits_opcode,
  input  [1:0]  io_enq_bits_param,
  input  [3:0]  io_enq_bits_size,
                io_enq_bits_source,
  input  [1:0]  io_enq_bits_sink,
  input         io_enq_bits_denied,
  input  [63:0] io_enq_bits_data,
  input         io_enq_bits_corrupt,
                io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
  output [2:0]  io_deq_bits_opcode,
  output [1:0]  io_deq_bits_param,
  output [3:0]  io_deq_bits_size,
                io_deq_bits_source,
  output [1:0]  io_deq_bits_sink,
  output        io_deq_bits_denied,
  output [63:0] io_deq_bits_data,
  output        io_deq_bits_corrupt
);

  wire [80:0] _ram_ext_R0_data;
  reg         wrap;
  reg         wrap_1;
  reg         maybe_full;
  wire        ptr_match = wrap == wrap_1;
  wire        empty = ptr_match & ~maybe_full;
  wire        full = ptr_match & maybe_full;
  wire        do_enq = ~full & io_enq_valid;
  always @(posedge clock) begin
    if (reset) begin
      wrap <= 1'h0;
      wrap_1 <= 1'h0;
      maybe_full <= 1'h0;
    end
    else begin
      automatic logic do_deq = io_deq_ready & ~empty;
      if (do_enq)
        wrap <= wrap - 1'h1;
      if (do_deq)
        wrap_1 <= wrap_1 - 1'h1;
      if (do_enq != do_deq)
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_combMem_13 ram_ext (
    .R0_addr (wrap_1),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (wrap),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data
      ({io_enq_bits_corrupt,
        io_enq_bits_data,
        io_enq_bits_denied,
        io_enq_bits_sink,
        io_enq_bits_source,
        io_enq_bits_size,
        io_enq_bits_param,
        io_enq_bits_opcode}),
    .R0_data (_ram_ext_R0_data)
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
  assign io_deq_bits_opcode = _ram_ext_R0_data[2:0];
  assign io_deq_bits_param = _ram_ext_R0_data[4:3];
  assign io_deq_bits_size = _ram_ext_R0_data[8:5];
  assign io_deq_bits_source = _ram_ext_R0_data[12:9];
  assign io_deq_bits_sink = _ram_ext_R0_data[14:13];
  assign io_deq_bits_denied = _ram_ext_R0_data[15];
  assign io_deq_bits_data = _ram_ext_R0_data[79:16];
  assign io_deq_bits_corrupt = _ram_ext_R0_data[80];
endmodule

module TLBuffer_a32d64s4k2z4u(
  input         clock,
                reset,
                auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
                auto_in_a_bits_param,
  input  [3:0]  auto_in_a_bits_size,
                auto_in_a_bits_source,
  input  [31:0] auto_in_a_bits_address,
  input         auto_in_a_bits_user_amba_prot_bufferable,
                auto_in_a_bits_user_amba_prot_modifiable,
                auto_in_a_bits_user_amba_prot_readalloc,
                auto_in_a_bits_user_amba_prot_writealloc,
                auto_in_a_bits_user_amba_prot_privileged,
                auto_in_a_bits_user_amba_prot_secure,
                auto_in_a_bits_user_amba_prot_fetch,
  input  [7:0]  auto_in_a_bits_mask,
  input  [63:0] auto_in_a_bits_data,
  input         auto_in_a_bits_corrupt,
                auto_in_d_ready,
                auto_out_a_ready,
                auto_out_d_valid,
  input  [2:0]  auto_out_d_bits_opcode,
  input  [1:0]  auto_out_d_bits_param,
  input  [3:0]  auto_out_d_bits_size,
                auto_out_d_bits_source,
  input  [1:0]  auto_out_d_bits_sink,
  input         auto_out_d_bits_denied,
  input  [63:0] auto_out_d_bits_data,
  input         auto_out_d_bits_corrupt,
  output        auto_in_a_ready,
                auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
  output [1:0]  auto_in_d_bits_param,
  output [3:0]  auto_in_d_bits_size,
                auto_in_d_bits_source,
  output [1:0]  auto_in_d_bits_sink,
  output        auto_in_d_bits_denied,
  output [63:0] auto_in_d_bits_data,
  output        auto_in_d_bits_corrupt,
                auto_out_a_valid,
  output [2:0]  auto_out_a_bits_opcode,
                auto_out_a_bits_param,
  output [3:0]  auto_out_a_bits_size,
                auto_out_a_bits_source,
  output [31:0] auto_out_a_bits_address,
  output        auto_out_a_bits_user_amba_prot_bufferable,
                auto_out_a_bits_user_amba_prot_modifiable,
                auto_out_a_bits_user_amba_prot_readalloc,
                auto_out_a_bits_user_amba_prot_writealloc,
                auto_out_a_bits_user_amba_prot_privileged,
                auto_out_a_bits_user_amba_prot_secure,
                auto_out_a_bits_user_amba_prot_fetch,
  output [7:0]  auto_out_a_bits_mask,
  output [63:0] auto_out_a_bits_data,
  output        auto_out_a_bits_corrupt,
                auto_out_d_ready
);

  wire       _nodeIn_d_q_io_deq_valid;
  wire [2:0] _nodeIn_d_q_io_deq_bits_opcode;
  wire [1:0] _nodeIn_d_q_io_deq_bits_param;
  wire [3:0] _nodeIn_d_q_io_deq_bits_size;
  wire [3:0] _nodeIn_d_q_io_deq_bits_source;
  wire [1:0] _nodeIn_d_q_io_deq_bits_sink;
  wire       _nodeIn_d_q_io_deq_bits_denied;
  wire       _nodeIn_d_q_io_deq_bits_corrupt;
  wire       _nodeOut_a_q_io_enq_ready;
  TLMonitor_5 monitor (
    .clock                (clock),
    .reset                (reset),
    .io_in_a_ready        (_nodeOut_a_q_io_enq_ready),
    .io_in_a_valid        (auto_in_a_valid),
    .io_in_a_bits_opcode  (auto_in_a_bits_opcode),
    .io_in_a_bits_param   (auto_in_a_bits_param),
    .io_in_a_bits_size    (auto_in_a_bits_size),
    .io_in_a_bits_source  (auto_in_a_bits_source),
    .io_in_a_bits_address (auto_in_a_bits_address),
    .io_in_a_bits_mask    (auto_in_a_bits_mask),
    .io_in_a_bits_corrupt (auto_in_a_bits_corrupt),
    .io_in_d_ready        (auto_in_d_ready),
    .io_in_d_valid        (_nodeIn_d_q_io_deq_valid),
    .io_in_d_bits_opcode  (_nodeIn_d_q_io_deq_bits_opcode),
    .io_in_d_bits_param   (_nodeIn_d_q_io_deq_bits_param),
    .io_in_d_bits_size    (_nodeIn_d_q_io_deq_bits_size),
    .io_in_d_bits_source  (_nodeIn_d_q_io_deq_bits_source),
    .io_in_d_bits_sink    (_nodeIn_d_q_io_deq_bits_sink),
    .io_in_d_bits_denied  (_nodeIn_d_q_io_deq_bits_denied),
    .io_in_d_bits_corrupt (_nodeIn_d_q_io_deq_bits_corrupt)
  );
  Queue2_TLBundleA_a32d64s4k2z4u nodeOut_a_q (
    .clock                                 (clock),
    .reset                                 (reset),
    .io_enq_valid                          (auto_in_a_valid),
    .io_enq_bits_opcode                    (auto_in_a_bits_opcode),
    .io_enq_bits_param                     (auto_in_a_bits_param),
    .io_enq_bits_size                      (auto_in_a_bits_size),
    .io_enq_bits_source                    (auto_in_a_bits_source),
    .io_enq_bits_address                   (auto_in_a_bits_address),
    .io_enq_bits_user_amba_prot_bufferable (auto_in_a_bits_user_amba_prot_bufferable),
    .io_enq_bits_user_amba_prot_modifiable (auto_in_a_bits_user_amba_prot_modifiable),
    .io_enq_bits_user_amba_prot_readalloc  (auto_in_a_bits_user_amba_prot_readalloc),
    .io_enq_bits_user_amba_prot_writealloc (auto_in_a_bits_user_amba_prot_writealloc),
    .io_enq_bits_user_amba_prot_privileged (auto_in_a_bits_user_amba_prot_privileged),
    .io_enq_bits_user_amba_prot_secure     (auto_in_a_bits_user_amba_prot_secure),
    .io_enq_bits_user_amba_prot_fetch      (auto_in_a_bits_user_amba_prot_fetch),
    .io_enq_bits_mask                      (auto_in_a_bits_mask),
    .io_enq_bits_data                      (auto_in_a_bits_data),
    .io_enq_bits_corrupt                   (auto_in_a_bits_corrupt),
    .io_deq_ready                          (auto_out_a_ready),
    .io_enq_ready                          (_nodeOut_a_q_io_enq_ready),
    .io_deq_valid                          (auto_out_a_valid),
    .io_deq_bits_opcode                    (auto_out_a_bits_opcode),
    .io_deq_bits_param                     (auto_out_a_bits_param),
    .io_deq_bits_size                      (auto_out_a_bits_size),
    .io_deq_bits_source                    (auto_out_a_bits_source),
    .io_deq_bits_address                   (auto_out_a_bits_address),
    .io_deq_bits_user_amba_prot_bufferable (auto_out_a_bits_user_amba_prot_bufferable),
    .io_deq_bits_user_amba_prot_modifiable (auto_out_a_bits_user_amba_prot_modifiable),
    .io_deq_bits_user_amba_prot_readalloc  (auto_out_a_bits_user_amba_prot_readalloc),
    .io_deq_bits_user_amba_prot_writealloc (auto_out_a_bits_user_amba_prot_writealloc),
    .io_deq_bits_user_amba_prot_privileged (auto_out_a_bits_user_amba_prot_privileged),
    .io_deq_bits_user_amba_prot_secure     (auto_out_a_bits_user_amba_prot_secure),
    .io_deq_bits_user_amba_prot_fetch      (auto_out_a_bits_user_amba_prot_fetch),
    .io_deq_bits_mask                      (auto_out_a_bits_mask),
    .io_deq_bits_data                      (auto_out_a_bits_data),
    .io_deq_bits_corrupt                   (auto_out_a_bits_corrupt)
  );
  Queue2_TLBundleD_a32d64s4k2z4u nodeIn_d_q (
    .clock               (clock),
    .reset               (reset),
    .io_enq_valid        (auto_out_d_valid),
    .io_enq_bits_opcode  (auto_out_d_bits_opcode),
    .io_enq_bits_param   (auto_out_d_bits_param),
    .io_enq_bits_size    (auto_out_d_bits_size),
    .io_enq_bits_source  (auto_out_d_bits_source),
    .io_enq_bits_sink    (auto_out_d_bits_sink),
    .io_enq_bits_denied  (auto_out_d_bits_denied),
    .io_enq_bits_data    (auto_out_d_bits_data),
    .io_enq_bits_corrupt (auto_out_d_bits_corrupt),
    .io_deq_ready        (auto_in_d_ready),
    .io_enq_ready        (auto_out_d_ready),
    .io_deq_valid        (_nodeIn_d_q_io_deq_valid),
    .io_deq_bits_opcode  (_nodeIn_d_q_io_deq_bits_opcode),
    .io_deq_bits_param   (_nodeIn_d_q_io_deq_bits_param),
    .io_deq_bits_size    (_nodeIn_d_q_io_deq_bits_size),
    .io_deq_bits_source  (_nodeIn_d_q_io_deq_bits_source),
    .io_deq_bits_sink    (_nodeIn_d_q_io_deq_bits_sink),
    .io_deq_bits_denied  (_nodeIn_d_q_io_deq_bits_denied),
    .io_deq_bits_data    (auto_in_d_bits_data),
    .io_deq_bits_corrupt (_nodeIn_d_q_io_deq_bits_corrupt)
  );
  assign auto_in_a_ready = _nodeOut_a_q_io_enq_ready;
  assign auto_in_d_valid = _nodeIn_d_q_io_deq_valid;
  assign auto_in_d_bits_opcode = _nodeIn_d_q_io_deq_bits_opcode;
  assign auto_in_d_bits_param = _nodeIn_d_q_io_deq_bits_param;
  assign auto_in_d_bits_size = _nodeIn_d_q_io_deq_bits_size;
  assign auto_in_d_bits_source = _nodeIn_d_q_io_deq_bits_source;
  assign auto_in_d_bits_sink = _nodeIn_d_q_io_deq_bits_sink;
  assign auto_in_d_bits_denied = _nodeIn_d_q_io_deq_bits_denied;
  assign auto_in_d_bits_corrupt = _nodeIn_d_q_io_deq_bits_corrupt;
endmodule

module TLMonitor_6(
  input        clock,
               reset,
               io_in_a_ready,
               io_in_a_valid,
  input [2:0]  io_in_a_bits_opcode,
  input [3:0]  io_in_a_bits_size,
               io_in_a_bits_source,
  input [31:0] io_in_a_bits_address,
  input [7:0]  io_in_a_bits_mask,
  input        io_in_d_ready,
               io_in_d_valid,
  input [2:0]  io_in_d_bits_opcode,
  input [1:0]  io_in_d_bits_param,
  input [3:0]  io_in_d_bits_size,
               io_in_d_bits_source,
  input [1:0]  io_in_d_bits_sink,
  input        io_in_d_bits_denied,
               io_in_d_bits_corrupt
);

  wire [31:0]  _plusarg_reader_1_out;
  wire [31:0]  _plusarg_reader_out;
  wire [26:0]  _GEN = 27'hFFF << io_in_a_bits_size;
  wire         _GEN_0 = io_in_a_ready & io_in_a_valid;
  reg  [8:0]   a_first_counter;
  reg  [2:0]   opcode;
  reg  [2:0]   param;
  reg  [3:0]   size;
  reg  [3:0]   source;
  reg  [31:0]  address;
  reg  [8:0]   d_first_counter;
  reg  [2:0]   opcode_1;
  reg  [1:0]   param_1;
  reg  [3:0]   size_1;
  reg  [3:0]   source_1;
  reg  [1:0]   sink;
  reg          denied;
  reg  [15:0]  inflight;
  reg  [63:0]  inflight_opcodes;
  reg  [127:0] inflight_sizes;
  reg  [8:0]   a_first_counter_1;
  wire         a_first_1 = a_first_counter_1 == 9'h0;
  reg  [8:0]   d_first_counter_1;
  wire         d_first_1 = d_first_counter_1 == 9'h0;
  wire [15:0]  _GEN_1 = {12'h0, io_in_a_bits_source};
  wire [15:0]  _GEN_2 = 16'h1 << _GEN_1;
  wire         _GEN_3 = _GEN_0 & a_first_1;
  wire         d_release_ack = io_in_d_bits_opcode == 3'h6;
  wire [15:0]  _GEN_4 = {12'h0, io_in_d_bits_source};
  wire [15:0]  _GEN_5 = 16'h1 << _GEN_4;
  reg  [31:0]  watchdog;
  reg  [15:0]  inflight_1;
  reg  [127:0] inflight_sizes_1;
  reg  [8:0]   d_first_counter_2;
  wire         d_first_2 = d_first_counter_2 == 9'h0;
  reg  [31:0]  watchdog_1;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      automatic logic [7:0][2:0] _GEN_6 =
        '{3'h4, 3'h5, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic [7:0][2:0] _GEN_7 =
        '{3'h4, 3'h4, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic [11:0]     _GEN_8 = io_in_a_bits_address[11:0] & ~(_GEN[11:0]);
      automatic logic            _GEN_9 = io_in_a_bits_size > 4'h2;
      automatic logic            mask_size = io_in_a_bits_size[1:0] == 2'h2;
      automatic logic            mask_acc =
        _GEN_9 | mask_size & ~(io_in_a_bits_address[2]);
      automatic logic            mask_acc_1 =
        _GEN_9 | mask_size & io_in_a_bits_address[2];
      automatic logic            mask_size_1 = io_in_a_bits_size[1:0] == 2'h1;
      automatic logic            mask_eq_2 =
        ~(io_in_a_bits_address[2]) & ~(io_in_a_bits_address[1]);
      automatic logic            mask_acc_2 = mask_acc | mask_size_1 & mask_eq_2;
      automatic logic            mask_eq_3 =
        ~(io_in_a_bits_address[2]) & io_in_a_bits_address[1];
      automatic logic            mask_acc_3 = mask_acc | mask_size_1 & mask_eq_3;
      automatic logic            mask_eq_4 =
        io_in_a_bits_address[2] & ~(io_in_a_bits_address[1]);
      automatic logic            mask_acc_4 = mask_acc_1 | mask_size_1 & mask_eq_4;
      automatic logic            mask_eq_5 =
        io_in_a_bits_address[2] & io_in_a_bits_address[1];
      automatic logic            mask_acc_5 = mask_acc_1 | mask_size_1 & mask_eq_5;
      automatic logic [7:0]      mask =
        {mask_acc_5 | mask_eq_5 & io_in_a_bits_address[0],
         mask_acc_5 | mask_eq_5 & ~(io_in_a_bits_address[0]),
         mask_acc_4 | mask_eq_4 & io_in_a_bits_address[0],
         mask_acc_4 | mask_eq_4 & ~(io_in_a_bits_address[0]),
         mask_acc_3 | mask_eq_3 & io_in_a_bits_address[0],
         mask_acc_3 | mask_eq_3 & ~(io_in_a_bits_address[0]),
         mask_acc_2 | mask_eq_2 & io_in_a_bits_address[0],
         mask_acc_2 | mask_eq_2 & ~(io_in_a_bits_address[0])};
      automatic logic            _GEN_10 = io_in_a_bits_size < 4'hD;
      automatic logic            _GEN_11 = io_in_a_bits_size < 4'h7;
      automatic logic            _GEN_12 = io_in_a_bits_address[31:28] == 4'h8;
      automatic logic            _GEN_13 = _GEN_10 & _GEN_11 & _GEN_12;
      automatic logic            _GEN_14 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_15 = io_in_a_bits_mask != 8'hFF;
      automatic logic            _GEN_16 =
        io_in_a_valid & (&io_in_a_bits_opcode) & ~reset;
      automatic logic            _GEN_17 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_18 =
        {io_in_a_bits_address[31:14], ~(io_in_a_bits_address[13:12])} == 20'h0;
      automatic logic            _GEN_19 = _GEN_10 & _GEN_18;
      automatic logic            _GEN_20 = io_in_a_bits_address[31:12] == 20'h0;
      automatic logic            _GEN_21 =
        {io_in_a_bits_address[31:26], io_in_a_bits_address[25:16] ^ 10'h200} == 16'h0;
      automatic logic            _GEN_22 =
        {io_in_a_bits_address[31:28], ~(io_in_a_bits_address[27:26])} == 6'h0;
      automatic logic            _GEN_23 =
        {io_in_a_bits_address[31], ~(io_in_a_bits_address[30:29])} == 3'h0;
      automatic logic            _GEN_24 = io_in_a_bits_mask != mask;
      automatic logic            _GEN_25 =
        _GEN_10
        & (_GEN_19 | _GEN_11 & (_GEN_20 | _GEN_21 | _GEN_22 | _GEN_12)
           | io_in_a_bits_size < 4'h9 & _GEN_23);
      automatic logic            _GEN_26 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_27 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_28 =
        _GEN_10 & io_in_a_bits_size < 4'h4 & (_GEN_20 | _GEN_18 | _GEN_21 | _GEN_22);
      automatic logic            _GEN_29 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_30 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h3 & ~reset;
      automatic logic            _GEN_31 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h5 & ~reset;
      automatic logic            _GEN_32 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_33 = io_in_d_bits_size < 4'h3;
      automatic logic            _GEN_34 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_35 = io_in_d_bits_param == 2'h2;
      automatic logic            _GEN_36 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h5 & ~reset;
      automatic logic            _GEN_37 = ~io_in_d_bits_denied | io_in_d_bits_corrupt;
      automatic logic            _GEN_38 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_39 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_40 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_41 = io_in_a_valid & (|a_first_counter) & ~reset;
      automatic logic            _GEN_42 = io_in_d_valid & (|d_first_counter) & ~reset;
      automatic logic [63:0]     _GEN_43 =
        inflight_opcodes >> {58'h0, io_in_d_bits_source, 2'h0};
      automatic logic [127:0]    _GEN_44 = {121'h0, io_in_d_bits_source, 3'h0};
      automatic logic            _GEN_45 = io_in_a_valid & a_first_1;
      automatic logic [15:0]     a_set_wo_ready = _GEN_45 ? _GEN_2 : 16'h0;
      automatic logic            _GEN_46 = io_in_d_valid & d_first_1;
      automatic logic            _GEN_47 = _GEN_46 & ~d_release_ack;
      automatic logic            _GEN_48 = io_in_a_bits_source == io_in_d_bits_source;
      automatic logic            same_cycle_resp = _GEN_45 & _GEN_48;
      automatic logic            _GEN_49 = _GEN_47 & same_cycle_resp & ~reset;
      automatic logic            _GEN_50 = _GEN_47 & ~same_cycle_resp & ~reset;
      automatic logic [7:0]      _GEN_51 = {4'h0, io_in_d_bits_size};
      automatic logic            _GEN_52 =
        io_in_d_valid & d_first_2 & d_release_ack & ~reset;
      automatic logic [15:0]     _GEN_53 = inflight >> _GEN_1;
      automatic logic [15:0]     _GEN_54 = inflight >> _GEN_4;
      automatic logic [127:0]    _GEN_55 = inflight_sizes >> _GEN_44;
      automatic logic [15:0]     _GEN_56 = inflight_1 >> _GEN_4;
      automatic logic [127:0]    _GEN_57 = inflight_sizes_1 >> _GEN_44;
      if (_GEN_14 & ~_GEN_13) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & ~_GEN_9) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & _GEN_15) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16 & ~_GEN_13) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16 & ~_GEN_9) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16 & _GEN_15) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & ~_GEN_10) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17
          & ~(_GEN_19 | _GEN_11
              & (_GEN_20
                 | {io_in_a_bits_address[31:17], ~(io_in_a_bits_address[16])} == 16'h0
                 | _GEN_21 | _GEN_22 | _GEN_23 | _GEN_12))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get address not aligned to size (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & _GEN_24) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get contains invalid mask (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_26 & ~_GEN_25) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_26 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull address not aligned to size (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_26 & _GEN_24) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull contains invalid mask (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & ~_GEN_25) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial address not aligned to size (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & (|(io_in_a_bits_mask & ~mask))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial contains invalid mask (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_29 & ~_GEN_28) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_29 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_29 & _GEN_24) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & ~_GEN_28) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical address not aligned to size (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & _GEN_24) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical contains invalid mask (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & ~(_GEN_10 & _GEN_19)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint address not aligned to size (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & _GEN_24) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint contains invalid mask (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & ~reset & (&io_in_d_bits_opcode)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel has invalid opcode (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & _GEN_33) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck is corrupt (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & io_in_d_bits_denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck is denied (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_34 & _GEN_33) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant smaller than a beat (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_34 & (&io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid cap param (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_34 & _GEN_35) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries toN param (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_34 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant is corrupt (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_36 & _GEN_33) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData smaller than a beat (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_36 & (&io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid cap param (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_36 & _GEN_35) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries toN param (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_36 & ~_GEN_37) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData is denied but not corrupt (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_38 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck carries invalid param (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_38 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck is corrupt (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_39 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData carries invalid param (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_39 & ~_GEN_37) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData is denied but not corrupt (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_40 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck carries invalid param (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_40 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck is corrupt (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_41 & io_in_a_bits_opcode != opcode) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel opcode changed within multibeat operation (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_41 & (|param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel param changed within multibeat operation (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_41 & io_in_a_bits_size != size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel size changed within multibeat operation (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_41 & io_in_a_bits_source != source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel source changed within multibeat operation (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_41 & io_in_a_bits_address != address) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel address changed with multibeat operation (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & io_in_d_bits_opcode != opcode_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel opcode changed within multibeat operation (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & io_in_d_bits_param != param_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel param changed within multibeat operation (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & io_in_d_bits_size != size_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel size changed within multibeat operation (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & io_in_d_bits_source != source_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel source changed within multibeat operation (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & io_in_d_bits_sink != sink) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel sink changed with multibeat operation (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & io_in_d_bits_denied != denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel denied changed with multibeat operation (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_3 & ~reset & _GEN_53[0]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel re-used a source ID (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_47 & ~reset & ~(_GEN_54[0] | same_cycle_resp)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_49
          & ~(io_in_d_bits_opcode == _GEN_7[io_in_a_bits_opcode]
              | io_in_d_bits_opcode == _GEN_6[io_in_a_bits_opcode])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_49 & io_in_a_bits_size != io_in_d_bits_size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_50
          & ~(io_in_d_bits_opcode == _GEN_7[_GEN_43[3:1]]
              | io_in_d_bits_opcode == _GEN_6[_GEN_43[3:1]])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_50 & _GEN_51 != {1'h0, _GEN_55[7:1]}) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_46 & a_first_1 & io_in_a_valid & _GEN_48 & ~d_release_ack & ~reset
          & ~(~io_in_d_ready | io_in_a_ready)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ready check\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(a_set_wo_ready != (_GEN_47 ? _GEN_5 : 16'h0)
              | a_set_wo_ready == 16'h0)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' and 'D' concurrent, despite minlatency > 0 (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight == 16'h0 | _plusarg_reader_out == 32'h0
              | watchdog < _plusarg_reader_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_52 & ~(_GEN_56[0])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_52 & _GEN_51 != {1'h0, _GEN_57[7:1]}) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight_1 == 16'h0 | _plusarg_reader_1_out == 32'h0
              | watchdog_1 < _plusarg_reader_1_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/subsystem/Ports.scala:173:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    automatic logic _GEN_58;
    _GEN_58 = io_in_d_ready & io_in_d_valid;
    if (reset) begin
      a_first_counter <= 9'h0;
      d_first_counter <= 9'h0;
      inflight <= 16'h0;
      inflight_opcodes <= 64'h0;
      inflight_sizes <= 128'h0;
      a_first_counter_1 <= 9'h0;
      d_first_counter_1 <= 9'h0;
      watchdog <= 32'h0;
      inflight_1 <= 16'h0;
      inflight_sizes_1 <= 128'h0;
      d_first_counter_2 <= 9'h0;
      watchdog_1 <= 32'h0;
    end
    else begin
      automatic logic         _GEN_59;
      automatic logic [142:0] _GEN_60 = 143'hFF << {136'h0, io_in_d_bits_source, 3'h0};
      automatic logic         _GEN_61;
      automatic logic [142:0] _GEN_62 = 143'hF << {137'h0, io_in_d_bits_source, 2'h0};
      automatic logic [130:0] _GEN_63 =
        {127'h0, _GEN_3 ? {io_in_a_bits_opcode, 1'h1} : 4'h0}
        << {125'h0, io_in_a_bits_source, 2'h0};
      automatic logic [131:0] _GEN_64 =
        {127'h0, _GEN_3 ? {io_in_a_bits_size, 1'h1} : 5'h0}
        << {125'h0, io_in_a_bits_source, 3'h0};
      _GEN_59 = _GEN_58 & d_first_1 & ~d_release_ack;
      _GEN_61 = _GEN_58 & d_first_2 & d_release_ack;
      if (_GEN_0) begin
        if (|a_first_counter)
          a_first_counter <= a_first_counter - 9'h1;
        else if (io_in_a_bits_opcode[2])
          a_first_counter <= 9'h0;
        else
          a_first_counter <= ~(_GEN[11:3]);
        if (a_first_1) begin
          if (io_in_a_bits_opcode[2])
            a_first_counter_1 <= 9'h0;
          else
            a_first_counter_1 <= ~(_GEN[11:3]);
        end
        else
          a_first_counter_1 <= a_first_counter_1 - 9'h1;
      end
      if (_GEN_58) begin
        automatic logic [26:0] _GEN_65 = 27'hFFF << io_in_d_bits_size;
        if (|d_first_counter)
          d_first_counter <= d_first_counter - 9'h1;
        else if (io_in_d_bits_opcode[0])
          d_first_counter <= ~(_GEN_65[11:3]);
        else
          d_first_counter <= 9'h0;
        if (d_first_1) begin
          if (io_in_d_bits_opcode[0])
            d_first_counter_1 <= ~(_GEN_65[11:3]);
          else
            d_first_counter_1 <= 9'h0;
        end
        else
          d_first_counter_1 <= d_first_counter_1 - 9'h1;
        if (d_first_2) begin
          if (io_in_d_bits_opcode[0])
            d_first_counter_2 <= ~(_GEN_65[11:3]);
          else
            d_first_counter_2 <= 9'h0;
        end
        else
          d_first_counter_2 <= d_first_counter_2 - 9'h1;
        watchdog_1 <= 32'h0;
      end
      else
        watchdog_1 <= watchdog_1 + 32'h1;
      inflight <= (inflight | (_GEN_3 ? _GEN_2 : 16'h0)) & ~(_GEN_59 ? _GEN_5 : 16'h0);
      inflight_opcodes <=
        (inflight_opcodes | (_GEN_3 ? _GEN_63[63:0] : 64'h0))
        & ~(_GEN_59 ? _GEN_62[63:0] : 64'h0);
      inflight_sizes <=
        (inflight_sizes | (_GEN_3 ? _GEN_64[127:0] : 128'h0))
        & ~(_GEN_59 ? _GEN_60[127:0] : 128'h0);
      if (_GEN_0 | _GEN_58)
        watchdog <= 32'h0;
      else
        watchdog <= watchdog + 32'h1;
      inflight_1 <= inflight_1 & ~(_GEN_61 ? _GEN_5 : 16'h0);
      inflight_sizes_1 <= inflight_sizes_1 & ~(_GEN_61 ? _GEN_60[127:0] : 128'h0);
    end
    if (_GEN_0 & ~(|a_first_counter)) begin
      opcode <= io_in_a_bits_opcode;
      param <= 3'h0;
      size <= io_in_a_bits_size;
      source <= io_in_a_bits_source;
      address <= io_in_a_bits_address;
    end
    if (_GEN_58 & ~(|d_first_counter)) begin
      opcode_1 <= io_in_d_bits_opcode;
      param_1 <= io_in_d_bits_param;
      size_1 <= io_in_d_bits_size;
      source_1 <= io_in_d_bits_source;
      sink <= io_in_d_bits_sink;
      denied <= io_in_d_bits_denied;
    end
  end // always @(posedge)
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader (
    .out (_plusarg_reader_out)
  );
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader_1 (
    .out (_plusarg_reader_1_out)
  );
endmodule

module TLBuffer_a32d64s4k2z4u_1(
  input         clock,
                reset,
                auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
  input  [3:0]  auto_in_a_bits_size,
                auto_in_a_bits_source,
  input  [31:0] auto_in_a_bits_address,
  input         auto_in_a_bits_user_amba_prot_bufferable,
                auto_in_a_bits_user_amba_prot_modifiable,
                auto_in_a_bits_user_amba_prot_readalloc,
                auto_in_a_bits_user_amba_prot_writealloc,
                auto_in_a_bits_user_amba_prot_privileged,
                auto_in_a_bits_user_amba_prot_secure,
                auto_in_a_bits_user_amba_prot_fetch,
  input  [7:0]  auto_in_a_bits_mask,
  input  [63:0] auto_in_a_bits_data,
  input         auto_in_d_ready,
                auto_out_a_ready,
                auto_out_d_valid,
  input  [2:0]  auto_out_d_bits_opcode,
  input  [1:0]  auto_out_d_bits_param,
  input  [3:0]  auto_out_d_bits_size,
                auto_out_d_bits_source,
  input  [1:0]  auto_out_d_bits_sink,
  input         auto_out_d_bits_denied,
  input  [63:0] auto_out_d_bits_data,
  input         auto_out_d_bits_corrupt,
  output        auto_in_a_ready,
                auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
  output [1:0]  auto_in_d_bits_param,
  output [3:0]  auto_in_d_bits_size,
                auto_in_d_bits_source,
  output [1:0]  auto_in_d_bits_sink,
  output        auto_in_d_bits_denied,
  output [63:0] auto_in_d_bits_data,
  output        auto_in_d_bits_corrupt,
                auto_out_a_valid,
  output [2:0]  auto_out_a_bits_opcode,
                auto_out_a_bits_param,
  output [3:0]  auto_out_a_bits_size,
                auto_out_a_bits_source,
  output [31:0] auto_out_a_bits_address,
  output        auto_out_a_bits_user_amba_prot_bufferable,
                auto_out_a_bits_user_amba_prot_modifiable,
                auto_out_a_bits_user_amba_prot_readalloc,
                auto_out_a_bits_user_amba_prot_writealloc,
                auto_out_a_bits_user_amba_prot_privileged,
                auto_out_a_bits_user_amba_prot_secure,
                auto_out_a_bits_user_amba_prot_fetch,
  output [7:0]  auto_out_a_bits_mask,
  output [63:0] auto_out_a_bits_data,
  output        auto_out_a_bits_corrupt,
                auto_out_d_ready
);

  wire       _nodeIn_d_q_io_deq_valid;
  wire [2:0] _nodeIn_d_q_io_deq_bits_opcode;
  wire [1:0] _nodeIn_d_q_io_deq_bits_param;
  wire [3:0] _nodeIn_d_q_io_deq_bits_size;
  wire [3:0] _nodeIn_d_q_io_deq_bits_source;
  wire [1:0] _nodeIn_d_q_io_deq_bits_sink;
  wire       _nodeIn_d_q_io_deq_bits_denied;
  wire       _nodeIn_d_q_io_deq_bits_corrupt;
  wire       _nodeOut_a_q_io_enq_ready;
  TLMonitor_6 monitor (
    .clock                (clock),
    .reset                (reset),
    .io_in_a_ready        (_nodeOut_a_q_io_enq_ready),
    .io_in_a_valid        (auto_in_a_valid),
    .io_in_a_bits_opcode  (auto_in_a_bits_opcode),
    .io_in_a_bits_size    (auto_in_a_bits_size),
    .io_in_a_bits_source  (auto_in_a_bits_source),
    .io_in_a_bits_address (auto_in_a_bits_address),
    .io_in_a_bits_mask    (auto_in_a_bits_mask),
    .io_in_d_ready        (auto_in_d_ready),
    .io_in_d_valid        (_nodeIn_d_q_io_deq_valid),
    .io_in_d_bits_opcode  (_nodeIn_d_q_io_deq_bits_opcode),
    .io_in_d_bits_param   (_nodeIn_d_q_io_deq_bits_param),
    .io_in_d_bits_size    (_nodeIn_d_q_io_deq_bits_size),
    .io_in_d_bits_source  (_nodeIn_d_q_io_deq_bits_source),
    .io_in_d_bits_sink    (_nodeIn_d_q_io_deq_bits_sink),
    .io_in_d_bits_denied  (_nodeIn_d_q_io_deq_bits_denied),
    .io_in_d_bits_corrupt (_nodeIn_d_q_io_deq_bits_corrupt)
  );
  Queue2_TLBundleA_a32d64s4k2z4u nodeOut_a_q (
    .clock                                 (clock),
    .reset                                 (reset),
    .io_enq_valid                          (auto_in_a_valid),
    .io_enq_bits_opcode                    (auto_in_a_bits_opcode),
    .io_enq_bits_param                     (3'h0),
    .io_enq_bits_size                      (auto_in_a_bits_size),
    .io_enq_bits_source                    (auto_in_a_bits_source),
    .io_enq_bits_address                   (auto_in_a_bits_address),
    .io_enq_bits_user_amba_prot_bufferable (auto_in_a_bits_user_amba_prot_bufferable),
    .io_enq_bits_user_amba_prot_modifiable (auto_in_a_bits_user_amba_prot_modifiable),
    .io_enq_bits_user_amba_prot_readalloc  (auto_in_a_bits_user_amba_prot_readalloc),
    .io_enq_bits_user_amba_prot_writealloc (auto_in_a_bits_user_amba_prot_writealloc),
    .io_enq_bits_user_amba_prot_privileged (auto_in_a_bits_user_amba_prot_privileged),
    .io_enq_bits_user_amba_prot_secure     (auto_in_a_bits_user_amba_prot_secure),
    .io_enq_bits_user_amba_prot_fetch      (auto_in_a_bits_user_amba_prot_fetch),
    .io_enq_bits_mask                      (auto_in_a_bits_mask),
    .io_enq_bits_data                      (auto_in_a_bits_data),
    .io_enq_bits_corrupt                   (1'h0),
    .io_deq_ready                          (auto_out_a_ready),
    .io_enq_ready                          (_nodeOut_a_q_io_enq_ready),
    .io_deq_valid                          (auto_out_a_valid),
    .io_deq_bits_opcode                    (auto_out_a_bits_opcode),
    .io_deq_bits_param                     (auto_out_a_bits_param),
    .io_deq_bits_size                      (auto_out_a_bits_size),
    .io_deq_bits_source                    (auto_out_a_bits_source),
    .io_deq_bits_address                   (auto_out_a_bits_address),
    .io_deq_bits_user_amba_prot_bufferable (auto_out_a_bits_user_amba_prot_bufferable),
    .io_deq_bits_user_amba_prot_modifiable (auto_out_a_bits_user_amba_prot_modifiable),
    .io_deq_bits_user_amba_prot_readalloc  (auto_out_a_bits_user_amba_prot_readalloc),
    .io_deq_bits_user_amba_prot_writealloc (auto_out_a_bits_user_amba_prot_writealloc),
    .io_deq_bits_user_amba_prot_privileged (auto_out_a_bits_user_amba_prot_privileged),
    .io_deq_bits_user_amba_prot_secure     (auto_out_a_bits_user_amba_prot_secure),
    .io_deq_bits_user_amba_prot_fetch      (auto_out_a_bits_user_amba_prot_fetch),
    .io_deq_bits_mask                      (auto_out_a_bits_mask),
    .io_deq_bits_data                      (auto_out_a_bits_data),
    .io_deq_bits_corrupt                   (auto_out_a_bits_corrupt)
  );
  Queue2_TLBundleD_a32d64s4k2z4u nodeIn_d_q (
    .clock               (clock),
    .reset               (reset),
    .io_enq_valid        (auto_out_d_valid),
    .io_enq_bits_opcode  (auto_out_d_bits_opcode),
    .io_enq_bits_param   (auto_out_d_bits_param),
    .io_enq_bits_size    (auto_out_d_bits_size),
    .io_enq_bits_source  (auto_out_d_bits_source),
    .io_enq_bits_sink    (auto_out_d_bits_sink),
    .io_enq_bits_denied  (auto_out_d_bits_denied),
    .io_enq_bits_data    (auto_out_d_bits_data),
    .io_enq_bits_corrupt (auto_out_d_bits_corrupt),
    .io_deq_ready        (auto_in_d_ready),
    .io_enq_ready        (auto_out_d_ready),
    .io_deq_valid        (_nodeIn_d_q_io_deq_valid),
    .io_deq_bits_opcode  (_nodeIn_d_q_io_deq_bits_opcode),
    .io_deq_bits_param   (_nodeIn_d_q_io_deq_bits_param),
    .io_deq_bits_size    (_nodeIn_d_q_io_deq_bits_size),
    .io_deq_bits_source  (_nodeIn_d_q_io_deq_bits_source),
    .io_deq_bits_sink    (_nodeIn_d_q_io_deq_bits_sink),
    .io_deq_bits_denied  (_nodeIn_d_q_io_deq_bits_denied),
    .io_deq_bits_data    (auto_in_d_bits_data),
    .io_deq_bits_corrupt (_nodeIn_d_q_io_deq_bits_corrupt)
  );
  assign auto_in_a_ready = _nodeOut_a_q_io_enq_ready;
  assign auto_in_d_valid = _nodeIn_d_q_io_deq_valid;
  assign auto_in_d_bits_opcode = _nodeIn_d_q_io_deq_bits_opcode;
  assign auto_in_d_bits_param = _nodeIn_d_q_io_deq_bits_param;
  assign auto_in_d_bits_size = _nodeIn_d_q_io_deq_bits_size;
  assign auto_in_d_bits_source = _nodeIn_d_q_io_deq_bits_source;
  assign auto_in_d_bits_sink = _nodeIn_d_q_io_deq_bits_sink;
  assign auto_in_d_bits_denied = _nodeIn_d_q_io_deq_bits_denied;
  assign auto_in_d_bits_corrupt = _nodeIn_d_q_io_deq_bits_corrupt;
endmodule

module TLMonitor_7(
  input        clock,
               reset,
               io_in_a_ready,
               io_in_a_valid,
  input [2:0]  io_in_a_bits_opcode,
  input [3:0]  io_in_a_bits_size,
               io_in_a_bits_source,
  input [31:0] io_in_a_bits_address,
  input [7:0]  io_in_a_bits_mask,
  input        io_in_d_ready,
               io_in_d_valid,
  input [2:0]  io_in_d_bits_opcode,
  input [1:0]  io_in_d_bits_param,
  input [3:0]  io_in_d_bits_size,
               io_in_d_bits_source,
  input [1:0]  io_in_d_bits_sink,
  input        io_in_d_bits_denied,
               io_in_d_bits_corrupt
);

  wire [31:0]  _plusarg_reader_1_out;
  wire [31:0]  _plusarg_reader_out;
  wire [26:0]  _GEN = 27'hFFF << io_in_a_bits_size;
  wire         _GEN_0 = io_in_a_ready & io_in_a_valid;
  reg  [8:0]   a_first_counter;
  reg  [2:0]   opcode;
  reg  [2:0]   param;
  reg  [3:0]   size;
  reg  [3:0]   source;
  reg  [31:0]  address;
  reg  [8:0]   d_first_counter;
  reg  [2:0]   opcode_1;
  reg  [1:0]   param_1;
  reg  [3:0]   size_1;
  reg  [3:0]   source_1;
  reg  [1:0]   sink;
  reg          denied;
  reg  [15:0]  inflight;
  reg  [63:0]  inflight_opcodes;
  reg  [127:0] inflight_sizes;
  reg  [8:0]   a_first_counter_1;
  wire         a_first_1 = a_first_counter_1 == 9'h0;
  reg  [8:0]   d_first_counter_1;
  wire         d_first_1 = d_first_counter_1 == 9'h0;
  wire [15:0]  _GEN_1 = {12'h0, io_in_a_bits_source};
  wire [15:0]  _GEN_2 = 16'h1 << _GEN_1;
  wire         _GEN_3 = _GEN_0 & a_first_1;
  wire         d_release_ack = io_in_d_bits_opcode == 3'h6;
  wire [15:0]  _GEN_4 = {12'h0, io_in_d_bits_source};
  wire [15:0]  _GEN_5 = 16'h1 << _GEN_4;
  reg  [31:0]  watchdog;
  reg  [15:0]  inflight_1;
  reg  [127:0] inflight_sizes_1;
  reg  [8:0]   d_first_counter_2;
  wire         d_first_2 = d_first_counter_2 == 9'h0;
  reg  [31:0]  watchdog_1;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      automatic logic [7:0][2:0] _GEN_6 =
        '{3'h4, 3'h5, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic [7:0][2:0] _GEN_7 =
        '{3'h4, 3'h4, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic [11:0]     _GEN_8 = io_in_a_bits_address[11:0] & ~(_GEN[11:0]);
      automatic logic            _GEN_9 = io_in_a_bits_size > 4'h2;
      automatic logic            mask_size = io_in_a_bits_size[1:0] == 2'h2;
      automatic logic            mask_acc =
        _GEN_9 | mask_size & ~(io_in_a_bits_address[2]);
      automatic logic            mask_acc_1 =
        _GEN_9 | mask_size & io_in_a_bits_address[2];
      automatic logic            mask_size_1 = io_in_a_bits_size[1:0] == 2'h1;
      automatic logic            mask_eq_2 =
        ~(io_in_a_bits_address[2]) & ~(io_in_a_bits_address[1]);
      automatic logic            mask_acc_2 = mask_acc | mask_size_1 & mask_eq_2;
      automatic logic            mask_eq_3 =
        ~(io_in_a_bits_address[2]) & io_in_a_bits_address[1];
      automatic logic            mask_acc_3 = mask_acc | mask_size_1 & mask_eq_3;
      automatic logic            mask_eq_4 =
        io_in_a_bits_address[2] & ~(io_in_a_bits_address[1]);
      automatic logic            mask_acc_4 = mask_acc_1 | mask_size_1 & mask_eq_4;
      automatic logic            mask_eq_5 =
        io_in_a_bits_address[2] & io_in_a_bits_address[1];
      automatic logic            mask_acc_5 = mask_acc_1 | mask_size_1 & mask_eq_5;
      automatic logic [7:0]      mask =
        {mask_acc_5 | mask_eq_5 & io_in_a_bits_address[0],
         mask_acc_5 | mask_eq_5 & ~(io_in_a_bits_address[0]),
         mask_acc_4 | mask_eq_4 & io_in_a_bits_address[0],
         mask_acc_4 | mask_eq_4 & ~(io_in_a_bits_address[0]),
         mask_acc_3 | mask_eq_3 & io_in_a_bits_address[0],
         mask_acc_3 | mask_eq_3 & ~(io_in_a_bits_address[0]),
         mask_acc_2 | mask_eq_2 & io_in_a_bits_address[0],
         mask_acc_2 | mask_eq_2 & ~(io_in_a_bits_address[0])};
      automatic logic            _GEN_10 = io_in_a_bits_size < 4'hD;
      automatic logic            _GEN_11 = io_in_a_bits_size < 4'h7;
      automatic logic            _GEN_12 = io_in_a_bits_address[31:28] == 4'h8;
      automatic logic            _GEN_13 = _GEN_10 & _GEN_11 & _GEN_12;
      automatic logic            _GEN_14 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_15 = io_in_a_bits_mask != 8'hFF;
      automatic logic            _GEN_16 =
        io_in_a_valid & (&io_in_a_bits_opcode) & ~reset;
      automatic logic            _GEN_17 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_18 =
        {io_in_a_bits_address[31:14], ~(io_in_a_bits_address[13:12])} == 20'h0;
      automatic logic            _GEN_19 = _GEN_10 & _GEN_18;
      automatic logic            _GEN_20 = io_in_a_bits_address[31:12] == 20'h0;
      automatic logic            _GEN_21 =
        {io_in_a_bits_address[31:26], io_in_a_bits_address[25:16] ^ 10'h200} == 16'h0;
      automatic logic            _GEN_22 =
        {io_in_a_bits_address[31:28], ~(io_in_a_bits_address[27:26])} == 6'h0;
      automatic logic            _GEN_23 =
        {io_in_a_bits_address[31], ~(io_in_a_bits_address[30:29])} == 3'h0;
      automatic logic            _GEN_24 = io_in_a_bits_mask != mask;
      automatic logic            _GEN_25 =
        _GEN_10
        & (_GEN_19 | _GEN_11 & (_GEN_20 | _GEN_21 | _GEN_22 | _GEN_12)
           | io_in_a_bits_size < 4'h9 & _GEN_23);
      automatic logic            _GEN_26 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_27 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_28 =
        _GEN_10 & io_in_a_bits_size < 4'h4 & (_GEN_20 | _GEN_18 | _GEN_21 | _GEN_22);
      automatic logic            _GEN_29 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_30 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h3 & ~reset;
      automatic logic            _GEN_31 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h5 & ~reset;
      automatic logic            _GEN_32 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_33 = io_in_d_bits_size < 4'h3;
      automatic logic            _GEN_34 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_35 = io_in_d_bits_param == 2'h2;
      automatic logic            _GEN_36 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h5 & ~reset;
      automatic logic            _GEN_37 = ~io_in_d_bits_denied | io_in_d_bits_corrupt;
      automatic logic            _GEN_38 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_39 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_40 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_41 = io_in_a_valid & (|a_first_counter) & ~reset;
      automatic logic            _GEN_42 = io_in_d_valid & (|d_first_counter) & ~reset;
      automatic logic [63:0]     _GEN_43 =
        inflight_opcodes >> {58'h0, io_in_d_bits_source, 2'h0};
      automatic logic [127:0]    _GEN_44 = {121'h0, io_in_d_bits_source, 3'h0};
      automatic logic            _GEN_45 = io_in_a_valid & a_first_1;
      automatic logic [15:0]     a_set_wo_ready = _GEN_45 ? _GEN_2 : 16'h0;
      automatic logic            _GEN_46 = io_in_d_valid & d_first_1;
      automatic logic            _GEN_47 = _GEN_46 & ~d_release_ack;
      automatic logic            _GEN_48 = io_in_a_bits_source == io_in_d_bits_source;
      automatic logic            same_cycle_resp = _GEN_45 & _GEN_48;
      automatic logic            _GEN_49 = _GEN_47 & same_cycle_resp & ~reset;
      automatic logic            _GEN_50 = _GEN_47 & ~same_cycle_resp & ~reset;
      automatic logic [7:0]      _GEN_51 = {4'h0, io_in_d_bits_size};
      automatic logic            _GEN_52 =
        io_in_d_valid & d_first_2 & d_release_ack & ~reset;
      automatic logic [15:0]     _GEN_53 = inflight >> _GEN_1;
      automatic logic [15:0]     _GEN_54 = inflight >> _GEN_4;
      automatic logic [127:0]    _GEN_55 = inflight_sizes >> _GEN_44;
      automatic logic [15:0]     _GEN_56 = inflight_1 >> _GEN_4;
      automatic logic [127:0]    _GEN_57 = inflight_sizes_1 >> _GEN_44;
      if (_GEN_14 & ~_GEN_13) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & ~_GEN_9) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & _GEN_15) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16 & ~_GEN_13) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16 & ~_GEN_9) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16 & _GEN_15) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & ~_GEN_10) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17
          & ~(_GEN_19 | _GEN_11
              & (_GEN_20
                 | {io_in_a_bits_address[31:17], ~(io_in_a_bits_address[16])} == 16'h0
                 | _GEN_21 | _GEN_22 | _GEN_23 | _GEN_12))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get address not aligned to size (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & _GEN_24) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get contains invalid mask (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_26 & ~_GEN_25) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_26 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull address not aligned to size (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_26 & _GEN_24) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull contains invalid mask (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & ~_GEN_25) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial address not aligned to size (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & (|(io_in_a_bits_mask & ~mask))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial contains invalid mask (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_29 & ~_GEN_28) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_29 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_29 & _GEN_24) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & ~_GEN_28) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical address not aligned to size (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & _GEN_24) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical contains invalid mask (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & ~(_GEN_10 & _GEN_19)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint address not aligned to size (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & _GEN_24) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint contains invalid mask (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & ~reset & (&io_in_d_bits_opcode)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel has invalid opcode (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & _GEN_33) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck is corrupt (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & io_in_d_bits_denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck is denied (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_34 & _GEN_33) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant smaller than a beat (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_34 & (&io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid cap param (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_34 & _GEN_35) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries toN param (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_34 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant is corrupt (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_36 & _GEN_33) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData smaller than a beat (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_36 & (&io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid cap param (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_36 & _GEN_35) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries toN param (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_36 & ~_GEN_37) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData is denied but not corrupt (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_38 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck carries invalid param (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_38 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck is corrupt (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_39 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData carries invalid param (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_39 & ~_GEN_37) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData is denied but not corrupt (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_40 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck carries invalid param (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_40 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck is corrupt (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_41 & io_in_a_bits_opcode != opcode) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel opcode changed within multibeat operation (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_41 & (|param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel param changed within multibeat operation (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_41 & io_in_a_bits_size != size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel size changed within multibeat operation (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_41 & io_in_a_bits_source != source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel source changed within multibeat operation (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_41 & io_in_a_bits_address != address) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel address changed with multibeat operation (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & io_in_d_bits_opcode != opcode_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel opcode changed within multibeat operation (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & io_in_d_bits_param != param_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel param changed within multibeat operation (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & io_in_d_bits_size != size_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel size changed within multibeat operation (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & io_in_d_bits_source != source_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel source changed within multibeat operation (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & io_in_d_bits_sink != sink) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel sink changed with multibeat operation (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & io_in_d_bits_denied != denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel denied changed with multibeat operation (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_3 & ~reset & _GEN_53[0]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel re-used a source ID (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_47 & ~reset & ~(_GEN_54[0] | same_cycle_resp)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_49
          & ~(io_in_d_bits_opcode == _GEN_7[io_in_a_bits_opcode]
              | io_in_d_bits_opcode == _GEN_6[io_in_a_bits_opcode])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_49 & io_in_a_bits_size != io_in_d_bits_size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_50
          & ~(io_in_d_bits_opcode == _GEN_7[_GEN_43[3:1]]
              | io_in_d_bits_opcode == _GEN_6[_GEN_43[3:1]])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_50 & _GEN_51 != {1'h0, _GEN_55[7:1]}) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_46 & a_first_1 & io_in_a_valid & _GEN_48 & ~d_release_ack & ~reset
          & ~(~io_in_d_ready | io_in_a_ready)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ready check\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(a_set_wo_ready != (_GEN_47 ? _GEN_5 : 16'h0)
              | a_set_wo_ready == 16'h0)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' and 'D' concurrent, despite minlatency > 0 (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight == 16'h0 | _plusarg_reader_out == 32'h0
              | watchdog < _plusarg_reader_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_52 & ~(_GEN_56[0])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_52 & _GEN_51 != {1'h0, _GEN_57[7:1]}) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight_1 == 16'h0 | _plusarg_reader_1_out == 32'h0
              | watchdog_1 < _plusarg_reader_1_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/subsystem/Ports.scala:174:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    automatic logic _GEN_58;
    _GEN_58 = io_in_d_ready & io_in_d_valid;
    if (reset) begin
      a_first_counter <= 9'h0;
      d_first_counter <= 9'h0;
      inflight <= 16'h0;
      inflight_opcodes <= 64'h0;
      inflight_sizes <= 128'h0;
      a_first_counter_1 <= 9'h0;
      d_first_counter_1 <= 9'h0;
      watchdog <= 32'h0;
      inflight_1 <= 16'h0;
      inflight_sizes_1 <= 128'h0;
      d_first_counter_2 <= 9'h0;
      watchdog_1 <= 32'h0;
    end
    else begin
      automatic logic         _GEN_59;
      automatic logic [142:0] _GEN_60 = 143'hFF << {136'h0, io_in_d_bits_source, 3'h0};
      automatic logic         _GEN_61;
      automatic logic [142:0] _GEN_62 = 143'hF << {137'h0, io_in_d_bits_source, 2'h0};
      automatic logic [130:0] _GEN_63 =
        {127'h0, _GEN_3 ? {io_in_a_bits_opcode, 1'h1} : 4'h0}
        << {125'h0, io_in_a_bits_source, 2'h0};
      automatic logic [131:0] _GEN_64 =
        {127'h0, _GEN_3 ? {io_in_a_bits_size, 1'h1} : 5'h0}
        << {125'h0, io_in_a_bits_source, 3'h0};
      _GEN_59 = _GEN_58 & d_first_1 & ~d_release_ack;
      _GEN_61 = _GEN_58 & d_first_2 & d_release_ack;
      if (_GEN_0) begin
        if (|a_first_counter)
          a_first_counter <= a_first_counter - 9'h1;
        else if (io_in_a_bits_opcode[2])
          a_first_counter <= 9'h0;
        else
          a_first_counter <= ~(_GEN[11:3]);
        if (a_first_1) begin
          if (io_in_a_bits_opcode[2])
            a_first_counter_1 <= 9'h0;
          else
            a_first_counter_1 <= ~(_GEN[11:3]);
        end
        else
          a_first_counter_1 <= a_first_counter_1 - 9'h1;
      end
      if (_GEN_58) begin
        automatic logic [26:0] _GEN_65 = 27'hFFF << io_in_d_bits_size;
        if (|d_first_counter)
          d_first_counter <= d_first_counter - 9'h1;
        else if (io_in_d_bits_opcode[0])
          d_first_counter <= ~(_GEN_65[11:3]);
        else
          d_first_counter <= 9'h0;
        if (d_first_1) begin
          if (io_in_d_bits_opcode[0])
            d_first_counter_1 <= ~(_GEN_65[11:3]);
          else
            d_first_counter_1 <= 9'h0;
        end
        else
          d_first_counter_1 <= d_first_counter_1 - 9'h1;
        if (d_first_2) begin
          if (io_in_d_bits_opcode[0])
            d_first_counter_2 <= ~(_GEN_65[11:3]);
          else
            d_first_counter_2 <= 9'h0;
        end
        else
          d_first_counter_2 <= d_first_counter_2 - 9'h1;
        watchdog_1 <= 32'h0;
      end
      else
        watchdog_1 <= watchdog_1 + 32'h1;
      inflight <= (inflight | (_GEN_3 ? _GEN_2 : 16'h0)) & ~(_GEN_59 ? _GEN_5 : 16'h0);
      inflight_opcodes <=
        (inflight_opcodes | (_GEN_3 ? _GEN_63[63:0] : 64'h0))
        & ~(_GEN_59 ? _GEN_62[63:0] : 64'h0);
      inflight_sizes <=
        (inflight_sizes | (_GEN_3 ? _GEN_64[127:0] : 128'h0))
        & ~(_GEN_59 ? _GEN_60[127:0] : 128'h0);
      if (_GEN_0 | _GEN_58)
        watchdog <= 32'h0;
      else
        watchdog <= watchdog + 32'h1;
      inflight_1 <= inflight_1 & ~(_GEN_61 ? _GEN_5 : 16'h0);
      inflight_sizes_1 <= inflight_sizes_1 & ~(_GEN_61 ? _GEN_60[127:0] : 128'h0);
    end
    if (_GEN_0 & ~(|a_first_counter)) begin
      opcode <= io_in_a_bits_opcode;
      param <= 3'h0;
      size <= io_in_a_bits_size;
      source <= io_in_a_bits_source;
      address <= io_in_a_bits_address;
    end
    if (_GEN_58 & ~(|d_first_counter)) begin
      opcode_1 <= io_in_d_bits_opcode;
      param_1 <= io_in_d_bits_param;
      size_1 <= io_in_d_bits_size;
      source_1 <= io_in_d_bits_source;
      sink <= io_in_d_bits_sink;
      denied <= io_in_d_bits_denied;
    end
  end // always @(posedge)
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader (
    .out (_plusarg_reader_out)
  );
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader_1 (
    .out (_plusarg_reader_1_out)
  );
endmodule

module TLFIFOFixer_2(
  input         clock,
                reset,
                auto_anon_in_a_valid,
  input  [2:0]  auto_anon_in_a_bits_opcode,
  input  [3:0]  auto_anon_in_a_bits_size,
                auto_anon_in_a_bits_source,
  input  [31:0] auto_anon_in_a_bits_address,
  input         auto_anon_in_a_bits_user_amba_prot_bufferable,
                auto_anon_in_a_bits_user_amba_prot_modifiable,
                auto_anon_in_a_bits_user_amba_prot_readalloc,
                auto_anon_in_a_bits_user_amba_prot_writealloc,
                auto_anon_in_a_bits_user_amba_prot_privileged,
                auto_anon_in_a_bits_user_amba_prot_secure,
                auto_anon_in_a_bits_user_amba_prot_fetch,
  input  [7:0]  auto_anon_in_a_bits_mask,
  input  [63:0] auto_anon_in_a_bits_data,
  input         auto_anon_in_d_ready,
                auto_anon_out_a_ready,
                auto_anon_out_d_valid,
  input  [2:0]  auto_anon_out_d_bits_opcode,
  input  [1:0]  auto_anon_out_d_bits_param,
  input  [3:0]  auto_anon_out_d_bits_size,
                auto_anon_out_d_bits_source,
  input  [1:0]  auto_anon_out_d_bits_sink,
  input         auto_anon_out_d_bits_denied,
  input  [63:0] auto_anon_out_d_bits_data,
  input         auto_anon_out_d_bits_corrupt,
  output        auto_anon_in_a_ready,
                auto_anon_in_d_valid,
  output [2:0]  auto_anon_in_d_bits_opcode,
  output [3:0]  auto_anon_in_d_bits_size,
                auto_anon_in_d_bits_source,
  output        auto_anon_in_d_bits_denied,
  output [63:0] auto_anon_in_d_bits_data,
  output        auto_anon_in_d_bits_corrupt,
                auto_anon_out_a_valid,
  output [2:0]  auto_anon_out_a_bits_opcode,
  output [3:0]  auto_anon_out_a_bits_size,
                auto_anon_out_a_bits_source,
  output [31:0] auto_anon_out_a_bits_address,
  output        auto_anon_out_a_bits_user_amba_prot_bufferable,
                auto_anon_out_a_bits_user_amba_prot_modifiable,
                auto_anon_out_a_bits_user_amba_prot_readalloc,
                auto_anon_out_a_bits_user_amba_prot_writealloc,
                auto_anon_out_a_bits_user_amba_prot_privileged,
                auto_anon_out_a_bits_user_amba_prot_secure,
                auto_anon_out_a_bits_user_amba_prot_fetch,
  output [7:0]  auto_anon_out_a_bits_mask,
  output [63:0] auto_anon_out_a_bits_data,
  output        auto_anon_out_d_ready
);

  reg  [8:0] a_first_counter;
  wire       a_first = a_first_counter == 9'h0;
  reg  [8:0] d_first_counter;
  reg        flight_0;
  reg        flight_1;
  reg        flight_2;
  reg        flight_3;
  reg        flight_4;
  reg        flight_5;
  reg        flight_6;
  reg        flight_7;
  reg        flight_8;
  reg        flight_9;
  reg        flight_10;
  reg        flight_11;
  reg        flight_12;
  reg        flight_13;
  reg        flight_14;
  reg        flight_15;
  reg        stalls_id;
  reg        stalls_id_1;
  wire       stall =
    ~(auto_anon_in_a_bits_source[3]) & a_first
    & (flight_0 | flight_1 | flight_2 | flight_3 | flight_4 | flight_5 | flight_6
       | flight_7)
    & (auto_anon_in_a_bits_address[31] | stalls_id != ~(auto_anon_in_a_bits_address[31]))
    | auto_anon_in_a_bits_source[3] & a_first
    & (flight_8 | flight_9 | flight_10 | flight_11 | flight_12 | flight_13 | flight_14
       | flight_15)
    & (auto_anon_in_a_bits_address[31]
       | stalls_id_1 != ~(auto_anon_in_a_bits_address[31]));
  wire       anonIn_a_ready = auto_anon_out_a_ready & ~stall;
  always @(posedge clock) begin
    automatic logic _GEN;
    _GEN = anonIn_a_ready & auto_anon_in_a_valid;
    if (reset) begin
      a_first_counter <= 9'h0;
      d_first_counter <= 9'h0;
      flight_0 <= 1'h0;
      flight_1 <= 1'h0;
      flight_2 <= 1'h0;
      flight_3 <= 1'h0;
      flight_4 <= 1'h0;
      flight_5 <= 1'h0;
      flight_6 <= 1'h0;
      flight_7 <= 1'h0;
      flight_8 <= 1'h0;
      flight_9 <= 1'h0;
      flight_10 <= 1'h0;
      flight_11 <= 1'h0;
      flight_12 <= 1'h0;
      flight_13 <= 1'h0;
      flight_14 <= 1'h0;
      flight_15 <= 1'h0;
    end
    else begin
      automatic logic _GEN_0 = auto_anon_in_d_ready & auto_anon_out_d_valid;
      automatic logic d_first_first;
      automatic logic _GEN_1;
      automatic logic _GEN_2;
      d_first_first = d_first_counter == 9'h0;
      _GEN_1 = a_first & _GEN;
      _GEN_2 = d_first_first & auto_anon_out_d_bits_opcode != 3'h6 & _GEN_0;
      if (_GEN) begin
        if (a_first) begin
          if (auto_anon_in_a_bits_opcode[2])
            a_first_counter <= 9'h0;
          else begin
            automatic logic [26:0] _GEN_3 = 27'hFFF << auto_anon_in_a_bits_size;
            a_first_counter <= ~(_GEN_3[11:3]);
          end
        end
        else
          a_first_counter <= a_first_counter - 9'h1;
      end
      if (_GEN_0) begin
        if (d_first_first) begin
          if (auto_anon_out_d_bits_opcode[0]) begin
            automatic logic [26:0] _GEN_4 = 27'hFFF << auto_anon_out_d_bits_size;
            d_first_counter <= ~(_GEN_4[11:3]);
          end
          else
            d_first_counter <= 9'h0;
        end
        else
          d_first_counter <= d_first_counter - 9'h1;
      end
      flight_0 <=
        ~(_GEN_2 & auto_anon_out_d_bits_source == 4'h0)
        & (_GEN_1 & auto_anon_in_a_bits_source == 4'h0 | flight_0);
      flight_1 <=
        ~(_GEN_2 & auto_anon_out_d_bits_source == 4'h1)
        & (_GEN_1 & auto_anon_in_a_bits_source == 4'h1 | flight_1);
      flight_2 <=
        ~(_GEN_2 & auto_anon_out_d_bits_source == 4'h2)
        & (_GEN_1 & auto_anon_in_a_bits_source == 4'h2 | flight_2);
      flight_3 <=
        ~(_GEN_2 & auto_anon_out_d_bits_source == 4'h3)
        & (_GEN_1 & auto_anon_in_a_bits_source == 4'h3 | flight_3);
      flight_4 <=
        ~(_GEN_2 & auto_anon_out_d_bits_source == 4'h4)
        & (_GEN_1 & auto_anon_in_a_bits_source == 4'h4 | flight_4);
      flight_5 <=
        ~(_GEN_2 & auto_anon_out_d_bits_source == 4'h5)
        & (_GEN_1 & auto_anon_in_a_bits_source == 4'h5 | flight_5);
      flight_6 <=
        ~(_GEN_2 & auto_anon_out_d_bits_source == 4'h6)
        & (_GEN_1 & auto_anon_in_a_bits_source == 4'h6 | flight_6);
      flight_7 <=
        ~(_GEN_2 & auto_anon_out_d_bits_source == 4'h7)
        & (_GEN_1 & auto_anon_in_a_bits_source == 4'h7 | flight_7);
      flight_8 <=
        ~(_GEN_2 & auto_anon_out_d_bits_source == 4'h8)
        & (_GEN_1 & auto_anon_in_a_bits_source == 4'h8 | flight_8);
      flight_9 <=
        ~(_GEN_2 & auto_anon_out_d_bits_source == 4'h9)
        & (_GEN_1 & auto_anon_in_a_bits_source == 4'h9 | flight_9);
      flight_10 <=
        ~(_GEN_2 & auto_anon_out_d_bits_source == 4'hA)
        & (_GEN_1 & auto_anon_in_a_bits_source == 4'hA | flight_10);
      flight_11 <=
        ~(_GEN_2 & auto_anon_out_d_bits_source == 4'hB)
        & (_GEN_1 & auto_anon_in_a_bits_source == 4'hB | flight_11);
      flight_12 <=
        ~(_GEN_2 & auto_anon_out_d_bits_source == 4'hC)
        & (_GEN_1 & auto_anon_in_a_bits_source == 4'hC | flight_12);
      flight_13 <=
        ~(_GEN_2 & auto_anon_out_d_bits_source == 4'hD)
        & (_GEN_1 & auto_anon_in_a_bits_source == 4'hD | flight_13);
      flight_14 <=
        ~(_GEN_2 & auto_anon_out_d_bits_source == 4'hE)
        & (_GEN_1 & auto_anon_in_a_bits_source == 4'hE | flight_14);
      flight_15 <=
        ~(_GEN_2 & (&auto_anon_out_d_bits_source))
        & (_GEN_1 & (&auto_anon_in_a_bits_source) | flight_15);
    end
    if (_GEN & ~(auto_anon_in_a_bits_source[3]))
      stalls_id <= ~(auto_anon_in_a_bits_address[31]);
    if (_GEN & auto_anon_in_a_bits_source[3])
      stalls_id_1 <= ~(auto_anon_in_a_bits_address[31]);
  end // always @(posedge)
  TLMonitor_7 monitor (
    .clock                (clock),
    .reset                (reset),
    .io_in_a_ready        (anonIn_a_ready),
    .io_in_a_valid        (auto_anon_in_a_valid),
    .io_in_a_bits_opcode  (auto_anon_in_a_bits_opcode),
    .io_in_a_bits_size    (auto_anon_in_a_bits_size),
    .io_in_a_bits_source  (auto_anon_in_a_bits_source),
    .io_in_a_bits_address (auto_anon_in_a_bits_address),
    .io_in_a_bits_mask    (auto_anon_in_a_bits_mask),
    .io_in_d_ready        (auto_anon_in_d_ready),
    .io_in_d_valid        (auto_anon_out_d_valid),
    .io_in_d_bits_opcode  (auto_anon_out_d_bits_opcode),
    .io_in_d_bits_param   (auto_anon_out_d_bits_param),
    .io_in_d_bits_size    (auto_anon_out_d_bits_size),
    .io_in_d_bits_source  (auto_anon_out_d_bits_source),
    .io_in_d_bits_sink    (auto_anon_out_d_bits_sink),
    .io_in_d_bits_denied  (auto_anon_out_d_bits_denied),
    .io_in_d_bits_corrupt (auto_anon_out_d_bits_corrupt)
  );
  assign auto_anon_in_a_ready = anonIn_a_ready;
  assign auto_anon_in_d_valid = auto_anon_out_d_valid;
  assign auto_anon_in_d_bits_opcode = auto_anon_out_d_bits_opcode;
  assign auto_anon_in_d_bits_size = auto_anon_out_d_bits_size;
  assign auto_anon_in_d_bits_source = auto_anon_out_d_bits_source;
  assign auto_anon_in_d_bits_denied = auto_anon_out_d_bits_denied;
  assign auto_anon_in_d_bits_data = auto_anon_out_d_bits_data;
  assign auto_anon_in_d_bits_corrupt = auto_anon_out_d_bits_corrupt;
  assign auto_anon_out_a_valid = auto_anon_in_a_valid & ~stall;
  assign auto_anon_out_a_bits_opcode = auto_anon_in_a_bits_opcode;
  assign auto_anon_out_a_bits_size = auto_anon_in_a_bits_size;
  assign auto_anon_out_a_bits_source = auto_anon_in_a_bits_source;
  assign auto_anon_out_a_bits_address = auto_anon_in_a_bits_address;
  assign auto_anon_out_a_bits_user_amba_prot_bufferable =
    auto_anon_in_a_bits_user_amba_prot_bufferable;
  assign auto_anon_out_a_bits_user_amba_prot_modifiable =
    auto_anon_in_a_bits_user_amba_prot_modifiable;
  assign auto_anon_out_a_bits_user_amba_prot_readalloc =
    auto_anon_in_a_bits_user_amba_prot_readalloc;
  assign auto_anon_out_a_bits_user_amba_prot_writealloc =
    auto_anon_in_a_bits_user_amba_prot_writealloc;
  assign auto_anon_out_a_bits_user_amba_prot_privileged =
    auto_anon_in_a_bits_user_amba_prot_privileged;
  assign auto_anon_out_a_bits_user_amba_prot_secure =
    auto_anon_in_a_bits_user_amba_prot_secure;
  assign auto_anon_out_a_bits_user_amba_prot_fetch =
    auto_anon_in_a_bits_user_amba_prot_fetch;
  assign auto_anon_out_a_bits_mask = auto_anon_in_a_bits_mask;
  assign auto_anon_out_a_bits_data = auto_anon_in_a_bits_data;
  assign auto_anon_out_d_ready = auto_anon_in_d_ready;
endmodule

module Queue1_AXI4BundleR(
  input         clock,
                reset,
                io_enq_valid,
                io_enq_bits_id,
  input  [63:0] io_enq_bits_data,
  input  [1:0]  io_enq_bits_resp,
  input         io_enq_bits_last,
                io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
                io_deq_bits_id,
  output [63:0] io_deq_bits_data,
  output [1:0]  io_deq_bits_resp,
  output        io_deq_bits_last
);

  reg  [67:0] ram;
  reg         full;
  wire        _io_deq_valid_output = io_enq_valid | full;
  wire        do_enq = ~(~full & io_deq_ready) & ~full & io_enq_valid;
  always @(posedge clock) begin
    if (do_enq)
      ram <= {io_enq_bits_last, io_enq_bits_resp, io_enq_bits_data, io_enq_bits_id};
    if (reset)
      full <= 1'h0;
    else if (do_enq != (full & io_deq_ready & _io_deq_valid_output))
      full <= do_enq;
  end // always @(posedge)
  assign io_enq_ready = ~full;
  assign io_deq_valid = _io_deq_valid_output;
  assign io_deq_bits_id = full ? ram[0] : io_enq_bits_id;
  assign io_deq_bits_data = full ? ram[64:1] : io_enq_bits_data;
  assign io_deq_bits_resp = full ? ram[66:65] : io_enq_bits_resp;
  assign io_deq_bits_last = full ? ram[67] : io_enq_bits_last;
endmodule

module Queue1_AXI4BundleB(
  input        clock,
               reset,
               io_enq_valid,
               io_enq_bits_id,
  input  [1:0] io_enq_bits_resp,
  input        io_deq_ready,
  output       io_enq_ready,
               io_deq_valid,
               io_deq_bits_id,
  output [1:0] io_deq_bits_resp
);

  reg  [2:0] ram;
  reg        full;
  wire       _io_deq_valid_output = io_enq_valid | full;
  wire       do_enq = ~(~full & io_deq_ready) & ~full & io_enq_valid;
  always @(posedge clock) begin
    if (do_enq)
      ram <= {io_enq_bits_resp, io_enq_bits_id};
    if (reset)
      full <= 1'h0;
    else if (do_enq != (full & io_deq_ready & _io_deq_valid_output))
      full <= do_enq;
  end // always @(posedge)
  assign io_enq_ready = ~full;
  assign io_deq_valid = _io_deq_valid_output;
  assign io_deq_bits_id = full ? ram[0] : io_enq_bits_id;
  assign io_deq_bits_resp = full ? ram[2:1] : io_enq_bits_resp;
endmodule

module AXI4ToTL(
  input         clock,
                reset,
                auto_in_aw_valid,
                auto_in_aw_bits_id,
  input  [31:0] auto_in_aw_bits_addr,
  input  [7:0]  auto_in_aw_bits_len,
  input  [2:0]  auto_in_aw_bits_size,
  input  [3:0]  auto_in_aw_bits_cache,
  input  [2:0]  auto_in_aw_bits_prot,
  input         auto_in_w_valid,
  input  [63:0] auto_in_w_bits_data,
  input  [7:0]  auto_in_w_bits_strb,
  input         auto_in_w_bits_last,
                auto_in_b_ready,
                auto_in_ar_valid,
                auto_in_ar_bits_id,
  input  [31:0] auto_in_ar_bits_addr,
  input  [7:0]  auto_in_ar_bits_len,
  input  [2:0]  auto_in_ar_bits_size,
  input  [3:0]  auto_in_ar_bits_cache,
  input  [2:0]  auto_in_ar_bits_prot,
  input         auto_in_r_ready,
                auto_out_a_ready,
                auto_out_d_valid,
  input  [2:0]  auto_out_d_bits_opcode,
  input  [3:0]  auto_out_d_bits_size,
                auto_out_d_bits_source,
  input         auto_out_d_bits_denied,
  input  [63:0] auto_out_d_bits_data,
  input         auto_out_d_bits_corrupt,
  output        auto_in_aw_ready,
                auto_in_w_ready,
                auto_in_b_valid,
                auto_in_b_bits_id,
  output [1:0]  auto_in_b_bits_resp,
  output        auto_in_ar_ready,
                auto_in_r_valid,
                auto_in_r_bits_id,
  output [63:0] auto_in_r_bits_data,
  output [1:0]  auto_in_r_bits_resp,
  output        auto_in_r_bits_last,
                auto_out_a_valid,
  output [2:0]  auto_out_a_bits_opcode,
  output [3:0]  auto_out_a_bits_size,
                auto_out_a_bits_source,
  output [31:0] auto_out_a_bits_address,
  output        auto_out_a_bits_user_amba_prot_bufferable,
                auto_out_a_bits_user_amba_prot_modifiable,
                auto_out_a_bits_user_amba_prot_readalloc,
                auto_out_a_bits_user_amba_prot_writealloc,
                auto_out_a_bits_user_amba_prot_privileged,
                auto_out_a_bits_user_amba_prot_secure,
                auto_out_a_bits_user_amba_prot_fetch,
  output [7:0]  auto_out_a_bits_mask,
  output [63:0] auto_out_a_bits_data,
  output        auto_out_d_ready
);

  wire        w_out_ready;
  wire        _q_b_deq_q_io_enq_ready;
  wire        _q_b_deq_q_io_deq_valid;
  wire        _q_b_deq_q_io_deq_bits_id;
  wire        _nodeIn_r_deq_q_io_enq_ready;
  wire [22:0] _GEN = {7'h0, auto_in_ar_bits_len, 8'hFF} << auto_in_ar_bits_size;
  wire [14:0] _GEN_0 = _GEN[22:8] & {1'h1, ~(_GEN[22:9])};
  wire [6:0]  _GEN_1 = _GEN_0[14:8] | _GEN_0[6:0];
  wire [2:0]  _GEN_2 = _GEN_1[6:4] | _GEN_1[2:0];
  wire        _GEN_3 = _GEN_2[2] | _GEN_2[0];
  wire [3:0]  r_out_bits_a_size =
    {|(_GEN_0[14:7]), |(_GEN_1[6:3]), |(_GEN_2[2:1]), _GEN_3};
  wire [31:0] r_out_bits_a_address =
    r_out_bits_a_size < 4'hD
    & {auto_in_ar_bits_addr[31:14], ~(auto_in_ar_bits_addr[13:12])} == 20'h0
    | r_out_bits_a_size < 4'h7
    & (auto_in_ar_bits_addr[31:12] == 20'h0
       | {auto_in_ar_bits_addr[31:17], ~(auto_in_ar_bits_addr[16])} == 16'h0
       | {auto_in_ar_bits_addr[31:26], auto_in_ar_bits_addr[25:16] ^ 10'h200} == 16'h0
       | {auto_in_ar_bits_addr[31:28], ~(auto_in_ar_bits_addr[27:26])} == 6'h0
       | {auto_in_ar_bits_addr[31], ~(auto_in_ar_bits_addr[30:29])} == 3'h0
       | auto_in_ar_bits_addr[31:28] == 4'h8)
      ? auto_in_ar_bits_addr
      : {29'h600, auto_in_ar_bits_addr[2:0]};
  reg  [2:0]  r_count_0;
  reg  [2:0]  r_count_1;
  wire        _GEN_4 = r_out_bits_a_size > 4'h2;
  wire [1:0]  _GEN_5 = {|(_GEN_2[2:1]), _GEN_3};
  wire        r_out_bits_a_mask_size = _GEN_5 == 2'h2;
  wire        r_out_bits_a_mask_acc =
    _GEN_4 | r_out_bits_a_mask_size & ~(r_out_bits_a_address[2]);
  wire        r_out_bits_a_mask_acc_1 =
    _GEN_4 | r_out_bits_a_mask_size & r_out_bits_a_address[2];
  wire        r_out_bits_a_mask_size_1 = _GEN_5 == 2'h1;
  wire        r_out_bits_a_mask_eq_2 =
    ~(r_out_bits_a_address[2]) & ~(r_out_bits_a_address[1]);
  wire        r_out_bits_a_mask_acc_2 =
    r_out_bits_a_mask_acc | r_out_bits_a_mask_size_1 & r_out_bits_a_mask_eq_2;
  wire        r_out_bits_a_mask_eq_3 =
    ~(r_out_bits_a_address[2]) & r_out_bits_a_address[1];
  wire        r_out_bits_a_mask_acc_3 =
    r_out_bits_a_mask_acc | r_out_bits_a_mask_size_1 & r_out_bits_a_mask_eq_3;
  wire        r_out_bits_a_mask_eq_4 =
    r_out_bits_a_address[2] & ~(r_out_bits_a_address[1]);
  wire        r_out_bits_a_mask_acc_4 =
    r_out_bits_a_mask_acc_1 | r_out_bits_a_mask_size_1 & r_out_bits_a_mask_eq_4;
  wire        r_out_bits_a_mask_eq_5 = r_out_bits_a_address[2] & r_out_bits_a_address[1];
  wire        r_out_bits_a_mask_acc_5 =
    r_out_bits_a_mask_acc_1 | r_out_bits_a_mask_size_1 & r_out_bits_a_mask_eq_5;
  wire [22:0] _GEN_6 = {7'h0, auto_in_aw_bits_len, 8'hFF} << auto_in_aw_bits_size;
  wire [14:0] _GEN_7 = _GEN_6[22:8] & {1'h1, ~(_GEN_6[22:9])};
  wire [6:0]  _GEN_8 = _GEN_7[14:8] | _GEN_7[6:0];
  wire [2:0]  _GEN_9 = _GEN_8[6:4] | _GEN_8[2:0];
  wire        _GEN_10 = _GEN_9[2] | _GEN_9[0];
  wire [3:0]  w_out_bits_a_size =
    {|(_GEN_7[14:7]), |(_GEN_8[6:3]), |(_GEN_9[2:1]), _GEN_10};
  reg  [2:0]  w_count_0;
  reg  [2:0]  w_count_1;
  wire        nodeIn_aw_ready = w_out_ready & auto_in_w_valid & auto_in_w_bits_last;
  wire        w_out_valid = auto_in_aw_valid & auto_in_w_valid;
  reg  [7:0]  beatsLeft;
  wire        idle = beatsLeft == 8'h0;
  wire [1:0]  readys_valid = {w_out_valid, auto_in_ar_valid};
  reg  [1:0]  readys_mask;
  wire [1:0]  _GEN_11 = readys_valid & ~readys_mask;
  wire [1:0]  readys_readys =
    ~({readys_mask[1], _GEN_11[1] | readys_mask[0]}
      & ({_GEN_11[0], w_out_valid} | _GEN_11));
  wire        winner_0 = readys_readys[0] & auto_in_ar_valid;
  wire        winner_1 = readys_readys[1] & w_out_valid;
  wire        _GEN_12 = auto_in_ar_valid | w_out_valid;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      automatic logic [29:0] _GEN_13 =
        30'h7FFF << {26'h0, |(_GEN_0[14:7]), |(_GEN_1[6:3]), |(_GEN_2[2:1]), _GEN_3};
      automatic logic [29:0] _GEN_14 =
        30'h7FFF << {26'h0, |(_GEN_7[14:7]), |(_GEN_8[6:3]), |(_GEN_9[2:1]), _GEN_10};
      if (~reset & ~(~auto_in_ar_valid | _GEN[22:8] == ~(_GEN_13[14:0]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToTL.scala:114 assert (!in.ar.valid || r_size1 === UIntToOH1(r_size, beatCountBits)) // because aligned\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~auto_in_aw_valid | _GEN_6[22:8] == ~(_GEN_14[14:0]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToTL.scala:150 assert (!in.aw.valid || w_size1 === UIntToOH1(w_size, beatCountBits)) // because aligned\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(~auto_in_aw_valid | auto_in_aw_bits_len == 8'h0
              | auto_in_aw_bits_size == 3'h3)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToTL.scala:151 assert (!in.aw.valid || in.aw.bits.len === 0.U || in.aw.bits.size === log2Ceil(beatBytes).U) // because aligned\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~winner_0 | ~winner_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Arbiter.scala:77 assert((prefixOR zip winner) map { case (p,w) => !p || !w } reduce {_ && _})\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_GEN_12 | winner_0 | winner_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Arbiter.scala:79 assert (!valids.reduce(_||_) || winner.reduce(_||_))\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  reg         state_0;
  reg         state_1;
  wire        muxState_0 = idle ? winner_0 : state_0;
  wire        muxState_1 = idle ? winner_1 : state_1;
  wire        r_out_ready = auto_out_a_ready & (idle ? readys_readys[0] : state_0);
  assign w_out_ready = auto_out_a_ready & (idle ? readys_readys[1] : state_1);
  wire        nodeOut_a_valid =
    idle ? _GEN_12 : state_0 & auto_in_ar_valid | state_1 & w_out_valid;
  wire [1:0]  ok_r_bits_resp = {auto_out_d_bits_denied | auto_out_d_bits_corrupt, 1'h0};
  wire [26:0] _GEN_15 = 27'hFFF << auto_out_d_bits_size;
  reg  [8:0]  d_last_counter;
  wire        nodeOut_d_ready =
    auto_out_d_bits_opcode[0] ? _nodeIn_r_deq_q_io_enq_ready : _q_b_deq_q_io_enq_ready;
  reg  [2:0]  b_count_0;
  reg  [2:0]  b_count_1;
  wire        b_allow =
    (_q_b_deq_q_io_deq_bits_id
       ? b_count_1
       : b_count_0) != (_q_b_deq_q_io_deq_bits_id ? w_count_1 : w_count_0);
  wire        nodeIn_b_valid = _q_b_deq_q_io_deq_valid & b_allow;
  always @(posedge clock) begin
    if (reset) begin
      r_count_0 <= 3'h0;
      r_count_1 <= 3'h0;
      w_count_0 <= 3'h0;
      w_count_1 <= 3'h0;
      beatsLeft <= 8'h0;
      readys_mask <= 2'h3;
      state_0 <= 1'h0;
      state_1 <= 1'h0;
      d_last_counter <= 9'h0;
      b_count_0 <= 3'h0;
      b_count_1 <= 3'h0;
    end
    else begin
      automatic logic _GEN_16 = r_out_ready & auto_in_ar_valid;
      automatic logic _GEN_17 = nodeIn_aw_ready & auto_in_aw_valid;
      automatic logic latch = idle & auto_out_a_ready;
      automatic logic _GEN_18 = auto_in_b_ready & nodeIn_b_valid;
      if (_GEN_16 & ~auto_in_ar_bits_id)
        r_count_0 <= r_count_0 + 3'h1;
      if (_GEN_16 & auto_in_ar_bits_id)
        r_count_1 <= r_count_1 + 3'h1;
      if (_GEN_17 & ~auto_in_aw_bits_id)
        w_count_0 <= w_count_0 + 3'h1;
      if (_GEN_17 & auto_in_aw_bits_id)
        w_count_1 <= w_count_1 + 3'h1;
      if (latch) begin
        if (winner_1)
          beatsLeft <= auto_in_aw_bits_len;
        else
          beatsLeft <= 8'h0;
      end
      else
        beatsLeft <= beatsLeft - {7'h0, auto_out_a_ready & nodeOut_a_valid};
      if (latch & (|readys_valid)) begin
        automatic logic [1:0] _GEN_19 = readys_readys & readys_valid;
        readys_mask <= _GEN_19 | {_GEN_19[0], 1'h0};
      end
      if (idle) begin
        state_0 <= winner_0;
        state_1 <= winner_1;
      end
      if (nodeOut_d_ready & auto_out_d_valid) begin
        if (d_last_counter == 9'h0) begin
          if (auto_out_d_bits_opcode[0])
            d_last_counter <= ~(_GEN_15[11:3]);
          else
            d_last_counter <= 9'h0;
        end
        else
          d_last_counter <= d_last_counter - 9'h1;
      end
      if (_GEN_18 & ~_q_b_deq_q_io_deq_bits_id)
        b_count_0 <= b_count_0 + 3'h1;
      if (_GEN_18 & _q_b_deq_q_io_deq_bits_id)
        b_count_1 <= b_count_1 + 3'h1;
    end
  end // always @(posedge)
  Queue1_AXI4BundleR nodeIn_r_deq_q (
    .clock            (clock),
    .reset            (reset),
    .io_enq_valid     (auto_out_d_valid & auto_out_d_bits_opcode[0]),
    .io_enq_bits_id   (auto_out_d_bits_source[3]),
    .io_enq_bits_data (auto_out_d_bits_data),
    .io_enq_bits_resp (ok_r_bits_resp),
    .io_enq_bits_last
      (d_last_counter == 9'h1
       | (auto_out_d_bits_opcode[0] ? ~(_GEN_15[11:3]) : 9'h0) == 9'h0),
    .io_deq_ready     (auto_in_r_ready),
    .io_enq_ready     (_nodeIn_r_deq_q_io_enq_ready),
    .io_deq_valid     (auto_in_r_valid),
    .io_deq_bits_id   (auto_in_r_bits_id),
    .io_deq_bits_data (auto_in_r_bits_data),
    .io_deq_bits_resp (auto_in_r_bits_resp),
    .io_deq_bits_last (auto_in_r_bits_last)
  );
  Queue1_AXI4BundleB q_b_deq_q (
    .clock            (clock),
    .reset            (reset),
    .io_enq_valid     (auto_out_d_valid & ~(auto_out_d_bits_opcode[0])),
    .io_enq_bits_id   (auto_out_d_bits_source[3]),
    .io_enq_bits_resp (ok_r_bits_resp),
    .io_deq_ready     (auto_in_b_ready & b_allow),
    .io_enq_ready     (_q_b_deq_q_io_enq_ready),
    .io_deq_valid     (_q_b_deq_q_io_deq_valid),
    .io_deq_bits_id   (_q_b_deq_q_io_deq_bits_id),
    .io_deq_bits_resp (auto_in_b_bits_resp)
  );
  assign auto_in_aw_ready = nodeIn_aw_ready;
  assign auto_in_w_ready = w_out_ready & auto_in_aw_valid;
  assign auto_in_b_valid = nodeIn_b_valid;
  assign auto_in_b_bits_id = _q_b_deq_q_io_deq_bits_id;
  assign auto_in_ar_ready = r_out_ready;
  assign auto_out_a_valid = nodeOut_a_valid;
  assign auto_out_a_bits_opcode = {muxState_0, 1'h0, muxState_1};
  assign auto_out_a_bits_size =
    (muxState_0 ? r_out_bits_a_size : 4'h0) | (muxState_1 ? w_out_bits_a_size : 4'h0);
  assign auto_out_a_bits_source =
    (muxState_0
       ? {auto_in_ar_bits_id, auto_in_ar_bits_id ? r_count_1[1:0] : r_count_0[1:0], 1'h0}
       : 4'h0)
    | (muxState_1
         ? {auto_in_aw_bits_id,
            auto_in_aw_bits_id ? w_count_1[1:0] : w_count_0[1:0],
            1'h1}
         : 4'h0);
  assign auto_out_a_bits_address =
    (muxState_0 ? r_out_bits_a_address : 32'h0)
    | (muxState_1
         ? (w_out_bits_a_size < 4'hD
            & {auto_in_aw_bits_addr[31:14], ~(auto_in_aw_bits_addr[13:12])} == 20'h0
            | w_out_bits_a_size < 4'h7
            & (auto_in_aw_bits_addr[31:12] == 20'h0
               | {auto_in_aw_bits_addr[31:26],
                  auto_in_aw_bits_addr[25:16] ^ 10'h200} == 16'h0
               | {auto_in_aw_bits_addr[31:28], ~(auto_in_aw_bits_addr[27:26])} == 6'h0
               | auto_in_aw_bits_addr[31:28] == 4'h8) | w_out_bits_a_size < 4'h9
            & {auto_in_aw_bits_addr[31], ~(auto_in_aw_bits_addr[30:29])} == 3'h0
              ? auto_in_aw_bits_addr
              : {29'h600, auto_in_aw_bits_addr[2:0]})
         : 32'h0);
  assign auto_out_a_bits_user_amba_prot_bufferable =
    muxState_0 & auto_in_ar_bits_cache[0] | muxState_1 & auto_in_aw_bits_cache[0];
  assign auto_out_a_bits_user_amba_prot_modifiable =
    muxState_0 & auto_in_ar_bits_cache[1] | muxState_1 & auto_in_aw_bits_cache[1];
  assign auto_out_a_bits_user_amba_prot_readalloc =
    muxState_0 & auto_in_ar_bits_cache[2] | muxState_1 & auto_in_aw_bits_cache[2];
  assign auto_out_a_bits_user_amba_prot_writealloc =
    muxState_0 & auto_in_ar_bits_cache[3] | muxState_1 & auto_in_aw_bits_cache[3];
  assign auto_out_a_bits_user_amba_prot_privileged =
    muxState_0 & auto_in_ar_bits_prot[0] | muxState_1 & auto_in_aw_bits_prot[0];
  assign auto_out_a_bits_user_amba_prot_secure =
    muxState_0 & ~(auto_in_ar_bits_prot[1]) | muxState_1 & ~(auto_in_aw_bits_prot[1]);
  assign auto_out_a_bits_user_amba_prot_fetch =
    muxState_0 & auto_in_ar_bits_prot[2] | muxState_1 & auto_in_aw_bits_prot[2];
  assign auto_out_a_bits_mask =
    (muxState_0
       ? {r_out_bits_a_mask_acc_5 | r_out_bits_a_mask_eq_5 & r_out_bits_a_address[0],
          r_out_bits_a_mask_acc_5 | r_out_bits_a_mask_eq_5 & ~(r_out_bits_a_address[0]),
          r_out_bits_a_mask_acc_4 | r_out_bits_a_mask_eq_4 & r_out_bits_a_address[0],
          r_out_bits_a_mask_acc_4 | r_out_bits_a_mask_eq_4 & ~(r_out_bits_a_address[0]),
          r_out_bits_a_mask_acc_3 | r_out_bits_a_mask_eq_3 & r_out_bits_a_address[0],
          r_out_bits_a_mask_acc_3 | r_out_bits_a_mask_eq_3 & ~(r_out_bits_a_address[0]),
          r_out_bits_a_mask_acc_2 | r_out_bits_a_mask_eq_2 & r_out_bits_a_address[0],
          r_out_bits_a_mask_acc_2 | r_out_bits_a_mask_eq_2 & ~(r_out_bits_a_address[0])}
       : 8'h0) | (muxState_1 ? auto_in_w_bits_strb : 8'h0);
  assign auto_out_a_bits_data = muxState_1 ? auto_in_w_bits_data : 64'h0;
  assign auto_out_d_ready = nodeOut_d_ready;
endmodule

module Queue4_BundleMap(
  input        clock,
               reset,
               io_enq_valid,
  input  [6:0] io_enq_bits_extra_id,
  input        io_enq_bits_real_last,
               io_deq_ready,
  output       io_enq_ready,
               io_deq_valid,
  output [6:0] io_deq_bits_extra_id,
  output       io_deq_bits_real_last
);

  wire [7:0] _ram_ext_R0_data;
  reg  [1:0] enq_ptr_value;
  reg  [1:0] deq_ptr_value;
  reg        maybe_full;
  wire       ptr_match = enq_ptr_value == deq_ptr_value;
  wire       empty = ptr_match & ~maybe_full;
  wire       full = ptr_match & maybe_full;
  wire       do_enq = ~full & io_enq_valid;
  always @(posedge clock) begin
    if (reset) begin
      enq_ptr_value <= 2'h0;
      deq_ptr_value <= 2'h0;
      maybe_full <= 1'h0;
    end
    else begin
      automatic logic do_deq = io_deq_ready & ~empty;
      if (do_enq)
        enq_ptr_value <= enq_ptr_value + 2'h1;
      if (do_deq)
        deq_ptr_value <= deq_ptr_value + 2'h1;
      if (do_enq != do_deq)
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_combMem_1 ram_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data ({io_enq_bits_real_last, io_enq_bits_extra_id}),
    .R0_data (_ram_ext_R0_data)
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
  assign io_deq_bits_extra_id = _ram_ext_R0_data[6:0];
  assign io_deq_bits_real_last = _ram_ext_R0_data[7];
endmodule

module AXI4UserYanker_1(
  input         clock,
                reset,
                auto_in_aw_valid,
                auto_in_aw_bits_id,
  input  [31:0] auto_in_aw_bits_addr,
  input  [7:0]  auto_in_aw_bits_len,
  input  [2:0]  auto_in_aw_bits_size,
  input  [3:0]  auto_in_aw_bits_cache,
  input  [2:0]  auto_in_aw_bits_prot,
  input  [6:0]  auto_in_aw_bits_echo_extra_id,
  input         auto_in_aw_bits_echo_real_last,
                auto_in_w_valid,
  input  [63:0] auto_in_w_bits_data,
  input  [7:0]  auto_in_w_bits_strb,
  input         auto_in_w_bits_last,
                auto_in_b_ready,
                auto_in_ar_valid,
                auto_in_ar_bits_id,
  input  [31:0] auto_in_ar_bits_addr,
  input  [7:0]  auto_in_ar_bits_len,
  input  [2:0]  auto_in_ar_bits_size,
  input  [3:0]  auto_in_ar_bits_cache,
  input  [2:0]  auto_in_ar_bits_prot,
  input  [6:0]  auto_in_ar_bits_echo_extra_id,
  input         auto_in_ar_bits_echo_real_last,
                auto_in_r_ready,
                auto_out_aw_ready,
                auto_out_w_ready,
                auto_out_b_valid,
                auto_out_b_bits_id,
  input  [1:0]  auto_out_b_bits_resp,
  input         auto_out_ar_ready,
                auto_out_r_valid,
                auto_out_r_bits_id,
  input  [63:0] auto_out_r_bits_data,
  input  [1:0]  auto_out_r_bits_resp,
  input         auto_out_r_bits_last,
  output        auto_in_aw_ready,
                auto_in_w_ready,
                auto_in_b_valid,
                auto_in_b_bits_id,
  output [1:0]  auto_in_b_bits_resp,
  output [6:0]  auto_in_b_bits_echo_extra_id,
  output        auto_in_b_bits_echo_real_last,
                auto_in_ar_ready,
                auto_in_r_valid,
                auto_in_r_bits_id,
  output [63:0] auto_in_r_bits_data,
  output [1:0]  auto_in_r_bits_resp,
  output [6:0]  auto_in_r_bits_echo_extra_id,
  output        auto_in_r_bits_echo_real_last,
                auto_in_r_bits_last,
                auto_out_aw_valid,
                auto_out_aw_bits_id,
  output [31:0] auto_out_aw_bits_addr,
  output [7:0]  auto_out_aw_bits_len,
  output [2:0]  auto_out_aw_bits_size,
  output [3:0]  auto_out_aw_bits_cache,
  output [2:0]  auto_out_aw_bits_prot,
  output        auto_out_w_valid,
  output [63:0] auto_out_w_bits_data,
  output [7:0]  auto_out_w_bits_strb,
  output        auto_out_w_bits_last,
                auto_out_b_ready,
                auto_out_ar_valid,
                auto_out_ar_bits_id,
  output [31:0] auto_out_ar_bits_addr,
  output [7:0]  auto_out_ar_bits_len,
  output [2:0]  auto_out_ar_bits_size,
  output [3:0]  auto_out_ar_bits_cache,
  output [2:0]  auto_out_ar_bits_prot,
  output        auto_out_r_ready
);

  wire       _Queue4_BundleMap_3_io_enq_ready;
  wire       _Queue4_BundleMap_3_io_deq_valid;
  wire [6:0] _Queue4_BundleMap_3_io_deq_bits_extra_id;
  wire       _Queue4_BundleMap_3_io_deq_bits_real_last;
  wire       _Queue4_BundleMap_2_io_enq_ready;
  wire       _Queue4_BundleMap_2_io_deq_valid;
  wire [6:0] _Queue4_BundleMap_2_io_deq_bits_extra_id;
  wire       _Queue4_BundleMap_2_io_deq_bits_real_last;
  wire       _Queue4_BundleMap_1_io_enq_ready;
  wire       _Queue4_BundleMap_1_io_deq_valid;
  wire [6:0] _Queue4_BundleMap_1_io_deq_bits_extra_id;
  wire       _Queue4_BundleMap_1_io_deq_bits_real_last;
  wire       _Queue4_BundleMap_io_enq_ready;
  wire       _Queue4_BundleMap_io_deq_valid;
  wire [6:0] _Queue4_BundleMap_io_deq_bits_extra_id;
  wire       _Queue4_BundleMap_io_deq_bits_real_last;
  wire       _GEN =
    auto_in_ar_bits_id
      ? _Queue4_BundleMap_1_io_enq_ready
      : _Queue4_BundleMap_io_enq_ready;
  wire       _GEN_0 = auto_out_r_valid & auto_in_r_ready;
  wire       _GEN_1 = auto_in_ar_valid & auto_out_ar_ready;
  wire       _GEN_2 =
    auto_in_aw_bits_id
      ? _Queue4_BundleMap_3_io_enq_ready
      : _Queue4_BundleMap_2_io_enq_ready;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (~reset
          & ~(~auto_out_r_valid
              | (auto_out_r_bits_id
                   ? _Queue4_BundleMap_1_io_deq_valid
                   : _Queue4_BundleMap_io_deq_valid))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at UserYanker.scala:69 assert (!out.r.valid || r_valid) // Q must be ready faster than the response\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(~auto_out_b_valid
              | (auto_out_b_bits_id
                   ? _Queue4_BundleMap_3_io_deq_valid
                   : _Queue4_BundleMap_2_io_deq_valid))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at UserYanker.scala:98 assert (!out.b.valid || b_valid) // Q must be ready faster than the response\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  wire       _GEN_3 = auto_out_b_valid & auto_in_b_ready;
  wire       _GEN_4 = auto_in_aw_valid & auto_out_aw_ready;
  Queue4_BundleMap Queue4_BundleMap (
    .clock                 (clock),
    .reset                 (reset),
    .io_enq_valid          (_GEN_1 & ~auto_in_ar_bits_id),
    .io_enq_bits_extra_id  (auto_in_ar_bits_echo_extra_id),
    .io_enq_bits_real_last (auto_in_ar_bits_echo_real_last),
    .io_deq_ready          (_GEN_0 & ~auto_out_r_bits_id & auto_out_r_bits_last),
    .io_enq_ready          (_Queue4_BundleMap_io_enq_ready),
    .io_deq_valid          (_Queue4_BundleMap_io_deq_valid),
    .io_deq_bits_extra_id  (_Queue4_BundleMap_io_deq_bits_extra_id),
    .io_deq_bits_real_last (_Queue4_BundleMap_io_deq_bits_real_last)
  );
  Queue4_BundleMap Queue4_BundleMap_1 (
    .clock                 (clock),
    .reset                 (reset),
    .io_enq_valid          (_GEN_1 & auto_in_ar_bits_id),
    .io_enq_bits_extra_id  (auto_in_ar_bits_echo_extra_id),
    .io_enq_bits_real_last (auto_in_ar_bits_echo_real_last),
    .io_deq_ready          (_GEN_0 & auto_out_r_bits_id & auto_out_r_bits_last),
    .io_enq_ready          (_Queue4_BundleMap_1_io_enq_ready),
    .io_deq_valid          (_Queue4_BundleMap_1_io_deq_valid),
    .io_deq_bits_extra_id  (_Queue4_BundleMap_1_io_deq_bits_extra_id),
    .io_deq_bits_real_last (_Queue4_BundleMap_1_io_deq_bits_real_last)
  );
  Queue4_BundleMap Queue4_BundleMap_2 (
    .clock                 (clock),
    .reset                 (reset),
    .io_enq_valid          (_GEN_4 & ~auto_in_aw_bits_id),
    .io_enq_bits_extra_id  (auto_in_aw_bits_echo_extra_id),
    .io_enq_bits_real_last (auto_in_aw_bits_echo_real_last),
    .io_deq_ready          (_GEN_3 & ~auto_out_b_bits_id),
    .io_enq_ready          (_Queue4_BundleMap_2_io_enq_ready),
    .io_deq_valid          (_Queue4_BundleMap_2_io_deq_valid),
    .io_deq_bits_extra_id  (_Queue4_BundleMap_2_io_deq_bits_extra_id),
    .io_deq_bits_real_last (_Queue4_BundleMap_2_io_deq_bits_real_last)
  );
  Queue4_BundleMap Queue4_BundleMap_3 (
    .clock                 (clock),
    .reset                 (reset),
    .io_enq_valid          (_GEN_4 & auto_in_aw_bits_id),
    .io_enq_bits_extra_id  (auto_in_aw_bits_echo_extra_id),
    .io_enq_bits_real_last (auto_in_aw_bits_echo_real_last),
    .io_deq_ready          (_GEN_3 & auto_out_b_bits_id),
    .io_enq_ready          (_Queue4_BundleMap_3_io_enq_ready),
    .io_deq_valid          (_Queue4_BundleMap_3_io_deq_valid),
    .io_deq_bits_extra_id  (_Queue4_BundleMap_3_io_deq_bits_extra_id),
    .io_deq_bits_real_last (_Queue4_BundleMap_3_io_deq_bits_real_last)
  );
  assign auto_in_aw_ready = auto_out_aw_ready & _GEN_2;
  assign auto_in_w_ready = auto_out_w_ready;
  assign auto_in_b_valid = auto_out_b_valid;
  assign auto_in_b_bits_id = auto_out_b_bits_id;
  assign auto_in_b_bits_resp = auto_out_b_bits_resp;
  assign auto_in_b_bits_echo_extra_id =
    auto_out_b_bits_id
      ? _Queue4_BundleMap_3_io_deq_bits_extra_id
      : _Queue4_BundleMap_2_io_deq_bits_extra_id;
  assign auto_in_b_bits_echo_real_last =
    auto_out_b_bits_id
      ? _Queue4_BundleMap_3_io_deq_bits_real_last
      : _Queue4_BundleMap_2_io_deq_bits_real_last;
  assign auto_in_ar_ready = auto_out_ar_ready & _GEN;
  assign auto_in_r_valid = auto_out_r_valid;
  assign auto_in_r_bits_id = auto_out_r_bits_id;
  assign auto_in_r_bits_data = auto_out_r_bits_data;
  assign auto_in_r_bits_resp = auto_out_r_bits_resp;
  assign auto_in_r_bits_echo_extra_id =
    auto_out_r_bits_id
      ? _Queue4_BundleMap_1_io_deq_bits_extra_id
      : _Queue4_BundleMap_io_deq_bits_extra_id;
  assign auto_in_r_bits_echo_real_last =
    auto_out_r_bits_id
      ? _Queue4_BundleMap_1_io_deq_bits_real_last
      : _Queue4_BundleMap_io_deq_bits_real_last;
  assign auto_in_r_bits_last = auto_out_r_bits_last;
  assign auto_out_aw_valid = auto_in_aw_valid & _GEN_2;
  assign auto_out_aw_bits_id = auto_in_aw_bits_id;
  assign auto_out_aw_bits_addr = auto_in_aw_bits_addr;
  assign auto_out_aw_bits_len = auto_in_aw_bits_len;
  assign auto_out_aw_bits_size = auto_in_aw_bits_size;
  assign auto_out_aw_bits_cache = auto_in_aw_bits_cache;
  assign auto_out_aw_bits_prot = auto_in_aw_bits_prot;
  assign auto_out_w_valid = auto_in_w_valid;
  assign auto_out_w_bits_data = auto_in_w_bits_data;
  assign auto_out_w_bits_strb = auto_in_w_bits_strb;
  assign auto_out_w_bits_last = auto_in_w_bits_last;
  assign auto_out_b_ready = auto_in_b_ready;
  assign auto_out_ar_valid = auto_in_ar_valid & _GEN;
  assign auto_out_ar_bits_id = auto_in_ar_bits_id;
  assign auto_out_ar_bits_addr = auto_in_ar_bits_addr;
  assign auto_out_ar_bits_len = auto_in_ar_bits_len;
  assign auto_out_ar_bits_size = auto_in_ar_bits_size;
  assign auto_out_ar_bits_cache = auto_in_ar_bits_cache;
  assign auto_out_ar_bits_prot = auto_in_ar_bits_prot;
  assign auto_out_r_ready = auto_in_r_ready;
endmodule

module Queue1_AXI4BundleAR(
  input         clock,
                reset,
                io_enq_valid,
                io_enq_bits_id,
  input  [31:0] io_enq_bits_addr,
  input  [7:0]  io_enq_bits_len,
  input  [2:0]  io_enq_bits_size,
  input  [1:0]  io_enq_bits_burst,
  input         io_enq_bits_lock,
  input  [3:0]  io_enq_bits_cache,
  input  [2:0]  io_enq_bits_prot,
  input  [3:0]  io_enq_bits_qos,
  input  [6:0]  io_enq_bits_echo_extra_id,
  input         io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
                io_deq_bits_id,
  output [31:0] io_deq_bits_addr,
  output [7:0]  io_deq_bits_len,
  output [2:0]  io_deq_bits_size,
  output [1:0]  io_deq_bits_burst,
  output [3:0]  io_deq_bits_cache,
  output [2:0]  io_deq_bits_prot,
  output [6:0]  io_deq_bits_echo_extra_id
);

  reg  [64:0] ram;
  reg         full;
  wire        _io_deq_valid_output = io_enq_valid | full;
  wire        do_enq = ~(~full & io_deq_ready) & ~full & io_enq_valid;
  always @(posedge clock) begin
    if (do_enq)
      ram <=
        {io_enq_bits_echo_extra_id,
         io_enq_bits_qos,
         io_enq_bits_prot,
         io_enq_bits_cache,
         io_enq_bits_lock,
         io_enq_bits_burst,
         io_enq_bits_size,
         io_enq_bits_len,
         io_enq_bits_addr,
         io_enq_bits_id};
    if (reset)
      full <= 1'h0;
    else if (do_enq != (full & io_deq_ready & _io_deq_valid_output))
      full <= do_enq;
  end // always @(posedge)
  assign io_enq_ready = ~full;
  assign io_deq_valid = _io_deq_valid_output;
  assign io_deq_bits_id = full ? ram[0] : io_enq_bits_id;
  assign io_deq_bits_addr = full ? ram[32:1] : io_enq_bits_addr;
  assign io_deq_bits_len = full ? ram[40:33] : io_enq_bits_len;
  assign io_deq_bits_size = full ? ram[43:41] : io_enq_bits_size;
  assign io_deq_bits_burst = full ? ram[45:44] : io_enq_bits_burst;
  assign io_deq_bits_cache = full ? ram[50:47] : io_enq_bits_cache;
  assign io_deq_bits_prot = full ? ram[53:51] : io_enq_bits_prot;
  assign io_deq_bits_echo_extra_id = full ? ram[64:58] : io_enq_bits_echo_extra_id;
endmodule

module AXI4Fragmenter(
  input         clock,
                reset,
                auto_in_aw_valid,
                auto_in_aw_bits_id,
  input  [31:0] auto_in_aw_bits_addr,
  input  [7:0]  auto_in_aw_bits_len,
  input  [2:0]  auto_in_aw_bits_size,
  input  [1:0]  auto_in_aw_bits_burst,
  input         auto_in_aw_bits_lock,
  input  [3:0]  auto_in_aw_bits_cache,
  input  [2:0]  auto_in_aw_bits_prot,
  input  [3:0]  auto_in_aw_bits_qos,
  input  [6:0]  auto_in_aw_bits_echo_extra_id,
  input         auto_in_w_valid,
  input  [63:0] auto_in_w_bits_data,
  input  [7:0]  auto_in_w_bits_strb,
  input         auto_in_w_bits_last,
                auto_in_b_ready,
                auto_in_ar_valid,
                auto_in_ar_bits_id,
  input  [31:0] auto_in_ar_bits_addr,
  input  [7:0]  auto_in_ar_bits_len,
  input  [2:0]  auto_in_ar_bits_size,
  input  [1:0]  auto_in_ar_bits_burst,
  input         auto_in_ar_bits_lock,
  input  [3:0]  auto_in_ar_bits_cache,
  input  [2:0]  auto_in_ar_bits_prot,
  input  [3:0]  auto_in_ar_bits_qos,
  input  [6:0]  auto_in_ar_bits_echo_extra_id,
  input         auto_in_r_ready,
                auto_out_aw_ready,
                auto_out_w_ready,
                auto_out_b_valid,
                auto_out_b_bits_id,
  input  [1:0]  auto_out_b_bits_resp,
  input  [6:0]  auto_out_b_bits_echo_extra_id,
  input         auto_out_b_bits_echo_real_last,
                auto_out_ar_ready,
                auto_out_r_valid,
                auto_out_r_bits_id,
  input  [63:0] auto_out_r_bits_data,
  input  [1:0]  auto_out_r_bits_resp,
  input  [6:0]  auto_out_r_bits_echo_extra_id,
  input         auto_out_r_bits_echo_real_last,
                auto_out_r_bits_last,
  output        auto_in_aw_ready,
                auto_in_w_ready,
                auto_in_b_valid,
                auto_in_b_bits_id,
  output [1:0]  auto_in_b_bits_resp,
  output [6:0]  auto_in_b_bits_echo_extra_id,
  output        auto_in_ar_ready,
                auto_in_r_valid,
                auto_in_r_bits_id,
  output [63:0] auto_in_r_bits_data,
  output [1:0]  auto_in_r_bits_resp,
  output [6:0]  auto_in_r_bits_echo_extra_id,
  output        auto_in_r_bits_last,
                auto_out_aw_valid,
                auto_out_aw_bits_id,
  output [31:0] auto_out_aw_bits_addr,
  output [7:0]  auto_out_aw_bits_len,
  output [2:0]  auto_out_aw_bits_size,
  output [3:0]  auto_out_aw_bits_cache,
  output [2:0]  auto_out_aw_bits_prot,
  output [6:0]  auto_out_aw_bits_echo_extra_id,
  output        auto_out_aw_bits_echo_real_last,
                auto_out_w_valid,
  output [63:0] auto_out_w_bits_data,
  output [7:0]  auto_out_w_bits_strb,
  output        auto_out_w_bits_last,
                auto_out_b_ready,
                auto_out_ar_valid,
                auto_out_ar_bits_id,
  output [31:0] auto_out_ar_bits_addr,
  output [7:0]  auto_out_ar_bits_len,
  output [2:0]  auto_out_ar_bits_size,
  output [3:0]  auto_out_ar_bits_cache,
  output [2:0]  auto_out_ar_bits_prot,
  output [6:0]  auto_out_ar_bits_echo_extra_id,
  output        auto_out_ar_bits_echo_real_last,
                auto_out_r_ready
);

  wire        nodeOut_w_valid;
  wire        wbeats_ready;
  wire        in_aw_ready;
  wire        _in_w_deq_q_io_deq_valid;
  wire        _in_w_deq_q_io_deq_bits_last;
  wire        _deq_q_1_io_deq_valid;
  wire [31:0] _deq_q_1_io_deq_bits_addr;
  wire [7:0]  _deq_q_1_io_deq_bits_len;
  wire [2:0]  _deq_q_1_io_deq_bits_size;
  wire [1:0]  _deq_q_1_io_deq_bits_burst;
  wire        _deq_q_io_deq_valid;
  wire [31:0] _deq_q_io_deq_bits_addr;
  wire [7:0]  _deq_q_io_deq_bits_len;
  wire [2:0]  _deq_q_io_deq_bits_size;
  wire [1:0]  _deq_q_io_deq_bits_burst;
  reg         busy;
  reg  [31:0] r_addr;
  reg  [7:0]  r_len;
  wire [7:0]  len = busy ? r_len : _deq_q_io_deq_bits_len;
  wire [31:0] addr = busy ? r_addr : _deq_q_io_deq_bits_addr;
  wire [5:0]  _GEN = len[6:1] | len[7:2];
  wire [4:0]  _GEN_0 = _GEN[4:0] | {len[7], _GEN[5:2]};
  wire [7:0]  _GEN_1 = ~len;
  wire [7:0]  _GEN_2 = _GEN_1 | {_GEN_1[6:0], 1'h0};
  wire [7:0]  _GEN_3 = _GEN_2 | {_GEN_2[5:0], 2'h0};
  wire [7:0]  _GEN_4 = addr[10:3] | {addr[9:3], 1'h0};
  wire [7:0]  _GEN_5 = _GEN_4 | {_GEN_4[5:0], 2'h0};
  wire        fixed = _deq_q_io_deq_bits_burst == 2'h0;
  wire [7:0]  in_ar_bits_len =
    fixed | _deq_q_io_deq_bits_size != 3'h3
      ? 8'h0
      : ({1'h0, len[7], _GEN[5], _GEN_0[4:3], _GEN_0[2:0] | {len[7], _GEN[5], _GEN_0[4]}}
         | ~(_GEN_3 | {_GEN_3[3:0], 4'h0})) & ~(_GEN_5 | {_GEN_5[3:0], 4'h0})
        & ({5'h0,
            {3{{addr[31:30], addr[27], addr[25], addr[16], addr[13]} == 6'h0
                 | {addr[31:30], addr[27], addr[25], ~(addr[16])} == 5'h0
                 | {addr[31:30], addr[27], ~(addr[25]), addr[16]} == 5'h0
                 | {addr[31:30], ~(addr[27])} == 3'h0 | {addr[31], ~(addr[30])} == 2'h0
                 | addr[31:30] == 2'h2}}}
           | {8{{addr[31:30], addr[27], addr[25], addr[16], ~(addr[13])} == 6'h0}});
  wire        nodeOut_ar_bits_echo_real_last = in_ar_bits_len == len;
  wire [31:0] _GEN_6 = ~addr;
  wire [9:0]  _GEN_7 = 10'h7 << _deq_q_io_deq_bits_size;
  reg         busy_1;
  reg  [31:0] r_addr_1;
  reg  [7:0]  r_len_1;
  wire [7:0]  len_1 = busy_1 ? r_len_1 : _deq_q_1_io_deq_bits_len;
  wire [31:0] addr_1 = busy_1 ? r_addr_1 : _deq_q_1_io_deq_bits_addr;
  wire [7:0]  _GEN_8 =
    {5'h0,
     {3{{addr_1[31:30], addr_1[27], addr_1[25], addr_1[13]} == 5'h0
          | {addr_1[31:30], addr_1[27], ~(addr_1[25])} == 4'h0
          | {addr_1[31:30], ~(addr_1[27])} == 3'h0 | addr_1[31:30] == 2'h2}}}
    | {8{{addr_1[31:30], addr_1[27], addr_1[25], ~(addr_1[13])} == 5'h0}};
  wire [5:0]  _GEN_9 = len_1[6:1] | len_1[7:2];
  wire [4:0]  _GEN_10 = _GEN_9[4:0] | {len_1[7], _GEN_9[5:2]};
  wire [7:0]  _GEN_11 = ~len_1;
  wire [7:0]  _GEN_12 = _GEN_11 | {_GEN_11[6:0], 1'h0};
  wire [7:0]  _GEN_13 = _GEN_12 | {_GEN_12[5:0], 2'h0};
  wire [7:0]  _GEN_14 = addr_1[10:3] | {addr_1[9:3], 1'h0};
  wire [7:0]  _GEN_15 = _GEN_14 | {_GEN_14[5:0], 2'h0};
  wire        fixed_1 = _deq_q_1_io_deq_bits_burst == 2'h0;
  wire [7:0]  in_aw_bits_len =
    fixed_1 | _deq_q_1_io_deq_bits_size != 3'h3
      ? 8'h0
      : ({1'h0,
          len_1[7],
          _GEN_9[5],
          _GEN_10[4:3],
          _GEN_10[2:0] | {len_1[7], _GEN_9[5], _GEN_10[4]}}
         | ~(_GEN_13 | {_GEN_13[3:0], 4'h0})) & ~(_GEN_15 | {_GEN_15[3:0], 4'h0})
        & {_GEN_8[7:5], _GEN_8[4:0] | {5{{addr_1[31], ~(addr_1[30])} == 2'h0}}};
  wire [8:0]  w_beats = {in_aw_bits_len, 1'h1} & {1'h1, ~in_aw_bits_len};
  wire        nodeOut_aw_bits_echo_real_last = in_aw_bits_len == len_1;
  wire [31:0] _GEN_16 = ~addr_1;
  wire [9:0]  _GEN_17 = 10'h7 << _deq_q_1_io_deq_bits_size;
  reg         wbeats_latched;
  wire        _GEN_18 = wbeats_ready | wbeats_latched;
  wire        nodeOut_aw_valid = _deq_q_1_io_deq_valid & _GEN_18;
  assign in_aw_ready = auto_out_aw_ready & _GEN_18;
  wire        wbeats_valid = _deq_q_1_io_deq_valid & ~wbeats_latched;
  reg  [8:0]  w_counter;
  assign wbeats_ready = w_counter == 9'h0;
  wire [8:0]  w_todo = wbeats_ready ? (wbeats_valid ? w_beats : 9'h0) : w_counter;
  wire        nodeOut_w_bits_last = w_todo == 9'h1;
  wire        _GEN_19 = auto_out_w_ready & nodeOut_w_valid;
  wire        _GEN_20 = ~wbeats_ready | wbeats_valid;
  assign nodeOut_w_valid = _in_w_deq_q_io_deq_valid & _GEN_20;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (~reset & ~(~_GEN_19 | (|w_todo))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Fragmenter.scala:181 assert (!out.w.fire || w_todo =/= 0.U) // underflow impossible\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(~nodeOut_w_valid | ~_in_w_deq_q_io_deq_bits_last
              | nodeOut_w_bits_last)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Fragmenter.scala:190 assert (!out.w.valid || !in_w.bits.last || w_last)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  wire        nodeOut_b_ready = auto_in_b_ready | ~auto_out_b_bits_echo_real_last;
  reg  [1:0]  error_0;
  reg  [1:0]  error_1;
  always @(posedge clock) begin
    automatic logic _GEN_21;
    automatic logic _GEN_22;
    _GEN_21 = auto_out_ar_ready & _deq_q_io_deq_valid;
    _GEN_22 = in_aw_ready & _deq_q_1_io_deq_valid;
    if (reset) begin
      busy <= 1'h0;
      busy_1 <= 1'h0;
      wbeats_latched <= 1'h0;
      w_counter <= 9'h0;
      error_0 <= 2'h0;
      error_1 <= 2'h0;
    end
    else begin
      automatic logic _GEN_23 = nodeOut_b_ready & auto_out_b_valid;
      if (_GEN_21)
        busy <= ~nodeOut_ar_bits_echo_real_last;
      if (_GEN_22)
        busy_1 <= ~nodeOut_aw_bits_echo_real_last;
      wbeats_latched <=
        ~(auto_out_aw_ready & nodeOut_aw_valid)
        & (wbeats_valid & wbeats_ready | wbeats_latched);
      w_counter <= w_todo - {8'h0, _GEN_19};
      if (~auto_out_b_bits_id & _GEN_23) begin
        if (auto_out_b_bits_echo_real_last)
          error_0 <= 2'h0;
        else
          error_0 <= error_0 | auto_out_b_bits_resp;
      end
      if (auto_out_b_bits_id & _GEN_23) begin
        if (auto_out_b_bits_echo_real_last)
          error_1 <= 2'h0;
        else
          error_1 <= error_1 | auto_out_b_bits_resp;
      end
    end
    if (_GEN_21) begin
      automatic logic [8:0] beats;
      beats = {in_ar_bits_len, 1'h1} & {1'h1, ~in_ar_bits_len};
      if (fixed)
        r_addr <= _deq_q_io_deq_bits_addr;
      else begin
        automatic logic [31:0] inc_addr;
        inc_addr = addr + {16'h0, {7'h0, beats} << _deq_q_io_deq_bits_size};
        if (_deq_q_io_deq_bits_burst == 2'h2) begin
          automatic logic [22:0] _GEN_24 =
            {7'h0, _deq_q_io_deq_bits_len, 8'hFF} << _deq_q_io_deq_bits_size;
          automatic logic [31:0] _GEN_25 = ~_deq_q_io_deq_bits_addr;
          r_addr <=
            {17'h0, inc_addr[14:0] & _GEN_24[22:8]}
            | ~{_GEN_25[31:15], _GEN_25[14:0] | _GEN_24[22:8]};
        end
        else
          r_addr <= inc_addr;
      end
      r_len <= len - beats[7:0];
    end
    if (_GEN_22) begin
      if (fixed_1)
        r_addr_1 <= _deq_q_1_io_deq_bits_addr;
      else begin
        automatic logic [31:0] inc_addr_1;
        inc_addr_1 = addr_1 + {16'h0, {7'h0, w_beats} << _deq_q_1_io_deq_bits_size};
        if (_deq_q_1_io_deq_bits_burst == 2'h2) begin
          automatic logic [22:0] _GEN_26 =
            {7'h0, _deq_q_1_io_deq_bits_len, 8'hFF} << _deq_q_1_io_deq_bits_size;
          automatic logic [31:0] _GEN_27 = ~_deq_q_1_io_deq_bits_addr;
          r_addr_1 <=
            {17'h0, inc_addr_1[14:0] & _GEN_26[22:8]}
            | ~{_GEN_27[31:15], _GEN_27[14:0] | _GEN_26[22:8]};
        end
        else
          r_addr_1 <= inc_addr_1;
      end
      r_len_1 <= len_1 - w_beats[7:0];
    end
  end // always @(posedge)
  Queue1_AXI4BundleAR deq_q (
    .clock                     (clock),
    .reset                     (reset),
    .io_enq_valid              (auto_in_ar_valid),
    .io_enq_bits_id            (auto_in_ar_bits_id),
    .io_enq_bits_addr          (auto_in_ar_bits_addr),
    .io_enq_bits_len           (auto_in_ar_bits_len),
    .io_enq_bits_size          (auto_in_ar_bits_size),
    .io_enq_bits_burst         (auto_in_ar_bits_burst),
    .io_enq_bits_lock          (auto_in_ar_bits_lock),
    .io_enq_bits_cache         (auto_in_ar_bits_cache),
    .io_enq_bits_prot          (auto_in_ar_bits_prot),
    .io_enq_bits_qos           (auto_in_ar_bits_qos),
    .io_enq_bits_echo_extra_id (auto_in_ar_bits_echo_extra_id),
    .io_deq_ready              (auto_out_ar_ready & nodeOut_ar_bits_echo_real_last),
    .io_enq_ready              (auto_in_ar_ready),
    .io_deq_valid              (_deq_q_io_deq_valid),
    .io_deq_bits_id            (auto_out_ar_bits_id),
    .io_deq_bits_addr          (_deq_q_io_deq_bits_addr),
    .io_deq_bits_len           (_deq_q_io_deq_bits_len),
    .io_deq_bits_size          (_deq_q_io_deq_bits_size),
    .io_deq_bits_burst         (_deq_q_io_deq_bits_burst),
    .io_deq_bits_cache         (auto_out_ar_bits_cache),
    .io_deq_bits_prot          (auto_out_ar_bits_prot),
    .io_deq_bits_echo_extra_id (auto_out_ar_bits_echo_extra_id)
  );
  Queue1_AXI4BundleAR deq_q_1 (
    .clock                     (clock),
    .reset                     (reset),
    .io_enq_valid              (auto_in_aw_valid),
    .io_enq_bits_id            (auto_in_aw_bits_id),
    .io_enq_bits_addr          (auto_in_aw_bits_addr),
    .io_enq_bits_len           (auto_in_aw_bits_len),
    .io_enq_bits_size          (auto_in_aw_bits_size),
    .io_enq_bits_burst         (auto_in_aw_bits_burst),
    .io_enq_bits_lock          (auto_in_aw_bits_lock),
    .io_enq_bits_cache         (auto_in_aw_bits_cache),
    .io_enq_bits_prot          (auto_in_aw_bits_prot),
    .io_enq_bits_qos           (auto_in_aw_bits_qos),
    .io_enq_bits_echo_extra_id (auto_in_aw_bits_echo_extra_id),
    .io_deq_ready              (in_aw_ready & nodeOut_aw_bits_echo_real_last),
    .io_enq_ready              (auto_in_aw_ready),
    .io_deq_valid              (_deq_q_1_io_deq_valid),
    .io_deq_bits_id            (auto_out_aw_bits_id),
    .io_deq_bits_addr          (_deq_q_1_io_deq_bits_addr),
    .io_deq_bits_len           (_deq_q_1_io_deq_bits_len),
    .io_deq_bits_size          (_deq_q_1_io_deq_bits_size),
    .io_deq_bits_burst         (_deq_q_1_io_deq_bits_burst),
    .io_deq_bits_cache         (auto_out_aw_bits_cache),
    .io_deq_bits_prot          (auto_out_aw_bits_prot),
    .io_deq_bits_echo_extra_id (auto_out_aw_bits_echo_extra_id)
  );
  Queue1_AXI4BundleW in_w_deq_q (
    .clock            (clock),
    .reset            (reset),
    .io_enq_valid     (auto_in_w_valid),
    .io_enq_bits_data (auto_in_w_bits_data),
    .io_enq_bits_strb (auto_in_w_bits_strb),
    .io_enq_bits_last (auto_in_w_bits_last),
    .io_deq_ready     (auto_out_w_ready & _GEN_20),
    .io_enq_ready     (auto_in_w_ready),
    .io_deq_valid     (_in_w_deq_q_io_deq_valid),
    .io_deq_bits_data (auto_out_w_bits_data),
    .io_deq_bits_strb (auto_out_w_bits_strb),
    .io_deq_bits_last (_in_w_deq_q_io_deq_bits_last)
  );
  assign auto_in_b_valid = auto_out_b_valid & auto_out_b_bits_echo_real_last;
  assign auto_in_b_bits_id = auto_out_b_bits_id;
  assign auto_in_b_bits_resp =
    auto_out_b_bits_resp | (auto_out_b_bits_id ? error_1 : error_0);
  assign auto_in_b_bits_echo_extra_id = auto_out_b_bits_echo_extra_id;
  assign auto_in_r_valid = auto_out_r_valid;
  assign auto_in_r_bits_id = auto_out_r_bits_id;
  assign auto_in_r_bits_data = auto_out_r_bits_data;
  assign auto_in_r_bits_resp = auto_out_r_bits_resp;
  assign auto_in_r_bits_echo_extra_id = auto_out_r_bits_echo_extra_id;
  assign auto_in_r_bits_last = auto_out_r_bits_last & auto_out_r_bits_echo_real_last;
  assign auto_out_aw_valid = nodeOut_aw_valid;
  assign auto_out_aw_bits_addr = ~{_GEN_16[31:3], _GEN_16[2:0] | ~(_GEN_17[2:0])};
  assign auto_out_aw_bits_len = in_aw_bits_len;
  assign auto_out_aw_bits_size = _deq_q_1_io_deq_bits_size;
  assign auto_out_aw_bits_echo_real_last = nodeOut_aw_bits_echo_real_last;
  assign auto_out_w_valid = nodeOut_w_valid;
  assign auto_out_w_bits_last = nodeOut_w_bits_last;
  assign auto_out_b_ready = nodeOut_b_ready;
  assign auto_out_ar_valid = _deq_q_io_deq_valid;
  assign auto_out_ar_bits_addr = ~{_GEN_6[31:3], _GEN_6[2:0] | ~(_GEN_7[2:0])};
  assign auto_out_ar_bits_len = in_ar_bits_len;
  assign auto_out_ar_bits_size = _deq_q_io_deq_bits_size;
  assign auto_out_ar_bits_echo_real_last = nodeOut_ar_bits_echo_real_last;
  assign auto_out_r_ready = auto_in_r_ready;
endmodule

module AXI4IdIndexer_1(
  input         auto_in_aw_valid,
  input  [7:0]  auto_in_aw_bits_id,
  input  [31:0] auto_in_aw_bits_addr,
  input  [7:0]  auto_in_aw_bits_len,
  input  [2:0]  auto_in_aw_bits_size,
  input  [1:0]  auto_in_aw_bits_burst,
  input         auto_in_aw_bits_lock,
  input  [3:0]  auto_in_aw_bits_cache,
  input  [2:0]  auto_in_aw_bits_prot,
  input  [3:0]  auto_in_aw_bits_qos,
  input         auto_in_w_valid,
  input  [63:0] auto_in_w_bits_data,
  input  [7:0]  auto_in_w_bits_strb,
  input         auto_in_w_bits_last,
                auto_in_b_ready,
                auto_in_ar_valid,
  input  [7:0]  auto_in_ar_bits_id,
  input  [31:0] auto_in_ar_bits_addr,
  input  [7:0]  auto_in_ar_bits_len,
  input  [2:0]  auto_in_ar_bits_size,
  input  [1:0]  auto_in_ar_bits_burst,
  input         auto_in_ar_bits_lock,
  input  [3:0]  auto_in_ar_bits_cache,
  input  [2:0]  auto_in_ar_bits_prot,
  input  [3:0]  auto_in_ar_bits_qos,
  input         auto_in_r_ready,
                auto_out_aw_ready,
                auto_out_w_ready,
                auto_out_b_valid,
                auto_out_b_bits_id,
  input  [1:0]  auto_out_b_bits_resp,
  input  [6:0]  auto_out_b_bits_echo_extra_id,
  input         auto_out_ar_ready,
                auto_out_r_valid,
                auto_out_r_bits_id,
  input  [63:0] auto_out_r_bits_data,
  input  [1:0]  auto_out_r_bits_resp,
  input  [6:0]  auto_out_r_bits_echo_extra_id,
  input         auto_out_r_bits_last,
  output        auto_in_aw_ready,
                auto_in_w_ready,
                auto_in_b_valid,
  output [7:0]  auto_in_b_bits_id,
  output [1:0]  auto_in_b_bits_resp,
  output        auto_in_ar_ready,
                auto_in_r_valid,
  output [7:0]  auto_in_r_bits_id,
  output [63:0] auto_in_r_bits_data,
  output [1:0]  auto_in_r_bits_resp,
  output        auto_in_r_bits_last,
                auto_out_aw_valid,
                auto_out_aw_bits_id,
  output [31:0] auto_out_aw_bits_addr,
  output [7:0]  auto_out_aw_bits_len,
  output [2:0]  auto_out_aw_bits_size,
  output [1:0]  auto_out_aw_bits_burst,
  output        auto_out_aw_bits_lock,
  output [3:0]  auto_out_aw_bits_cache,
  output [2:0]  auto_out_aw_bits_prot,
  output [3:0]  auto_out_aw_bits_qos,
  output [6:0]  auto_out_aw_bits_echo_extra_id,
  output        auto_out_w_valid,
  output [63:0] auto_out_w_bits_data,
  output [7:0]  auto_out_w_bits_strb,
  output        auto_out_w_bits_last,
                auto_out_b_ready,
                auto_out_ar_valid,
                auto_out_ar_bits_id,
  output [31:0] auto_out_ar_bits_addr,
  output [7:0]  auto_out_ar_bits_len,
  output [2:0]  auto_out_ar_bits_size,
  output [1:0]  auto_out_ar_bits_burst,
  output        auto_out_ar_bits_lock,
  output [3:0]  auto_out_ar_bits_cache,
  output [2:0]  auto_out_ar_bits_prot,
  output [3:0]  auto_out_ar_bits_qos,
  output [6:0]  auto_out_ar_bits_echo_extra_id,
  output        auto_out_r_ready
);

  assign auto_in_aw_ready = auto_out_aw_ready;
  assign auto_in_w_ready = auto_out_w_ready;
  assign auto_in_b_valid = auto_out_b_valid;
  assign auto_in_b_bits_id = {auto_out_b_bits_echo_extra_id, auto_out_b_bits_id};
  assign auto_in_b_bits_resp = auto_out_b_bits_resp;
  assign auto_in_ar_ready = auto_out_ar_ready;
  assign auto_in_r_valid = auto_out_r_valid;
  assign auto_in_r_bits_id = {auto_out_r_bits_echo_extra_id, auto_out_r_bits_id};
  assign auto_in_r_bits_data = auto_out_r_bits_data;
  assign auto_in_r_bits_resp = auto_out_r_bits_resp;
  assign auto_in_r_bits_last = auto_out_r_bits_last;
  assign auto_out_aw_valid = auto_in_aw_valid;
  assign auto_out_aw_bits_id = auto_in_aw_bits_id[0];
  assign auto_out_aw_bits_addr = auto_in_aw_bits_addr;
  assign auto_out_aw_bits_len = auto_in_aw_bits_len;
  assign auto_out_aw_bits_size = auto_in_aw_bits_size;
  assign auto_out_aw_bits_burst = auto_in_aw_bits_burst;
  assign auto_out_aw_bits_lock = auto_in_aw_bits_lock;
  assign auto_out_aw_bits_cache = auto_in_aw_bits_cache;
  assign auto_out_aw_bits_prot = auto_in_aw_bits_prot;
  assign auto_out_aw_bits_qos = auto_in_aw_bits_qos;
  assign auto_out_aw_bits_echo_extra_id = auto_in_aw_bits_id[7:1];
  assign auto_out_w_valid = auto_in_w_valid;
  assign auto_out_w_bits_data = auto_in_w_bits_data;
  assign auto_out_w_bits_strb = auto_in_w_bits_strb;
  assign auto_out_w_bits_last = auto_in_w_bits_last;
  assign auto_out_b_ready = auto_in_b_ready;
  assign auto_out_ar_valid = auto_in_ar_valid;
  assign auto_out_ar_bits_id = auto_in_ar_bits_id[0];
  assign auto_out_ar_bits_addr = auto_in_ar_bits_addr;
  assign auto_out_ar_bits_len = auto_in_ar_bits_len;
  assign auto_out_ar_bits_size = auto_in_ar_bits_size;
  assign auto_out_ar_bits_burst = auto_in_ar_bits_burst;
  assign auto_out_ar_bits_lock = auto_in_ar_bits_lock;
  assign auto_out_ar_bits_cache = auto_in_ar_bits_cache;
  assign auto_out_ar_bits_prot = auto_in_ar_bits_prot;
  assign auto_out_ar_bits_qos = auto_in_ar_bits_qos;
  assign auto_out_ar_bits_echo_extra_id = auto_in_ar_bits_id[7:1];
  assign auto_out_r_ready = auto_in_r_ready;
endmodule

module TLInterconnectCoupler_fbus_from_port_named_slave_port_axi4(
  input         clock,
                reset,
                auto_axi4index_in_aw_valid,
  input  [7:0]  auto_axi4index_in_aw_bits_id,
  input  [31:0] auto_axi4index_in_aw_bits_addr,
  input  [7:0]  auto_axi4index_in_aw_bits_len,
  input  [2:0]  auto_axi4index_in_aw_bits_size,
  input  [1:0]  auto_axi4index_in_aw_bits_burst,
  input         auto_axi4index_in_aw_bits_lock,
  input  [3:0]  auto_axi4index_in_aw_bits_cache,
  input  [2:0]  auto_axi4index_in_aw_bits_prot,
  input  [3:0]  auto_axi4index_in_aw_bits_qos,
  input         auto_axi4index_in_w_valid,
  input  [63:0] auto_axi4index_in_w_bits_data,
  input  [7:0]  auto_axi4index_in_w_bits_strb,
  input         auto_axi4index_in_w_bits_last,
                auto_axi4index_in_b_ready,
                auto_axi4index_in_ar_valid,
  input  [7:0]  auto_axi4index_in_ar_bits_id,
  input  [31:0] auto_axi4index_in_ar_bits_addr,
  input  [7:0]  auto_axi4index_in_ar_bits_len,
  input  [2:0]  auto_axi4index_in_ar_bits_size,
  input  [1:0]  auto_axi4index_in_ar_bits_burst,
  input         auto_axi4index_in_ar_bits_lock,
  input  [3:0]  auto_axi4index_in_ar_bits_cache,
  input  [2:0]  auto_axi4index_in_ar_bits_prot,
  input  [3:0]  auto_axi4index_in_ar_bits_qos,
  input         auto_axi4index_in_r_ready,
                auto_tl_out_a_ready,
                auto_tl_out_d_valid,
  input  [2:0]  auto_tl_out_d_bits_opcode,
  input  [1:0]  auto_tl_out_d_bits_param,
  input  [3:0]  auto_tl_out_d_bits_size,
                auto_tl_out_d_bits_source,
  input  [1:0]  auto_tl_out_d_bits_sink,
  input         auto_tl_out_d_bits_denied,
  input  [63:0] auto_tl_out_d_bits_data,
  input         auto_tl_out_d_bits_corrupt,
  output        auto_axi4index_in_aw_ready,
                auto_axi4index_in_w_ready,
                auto_axi4index_in_b_valid,
  output [7:0]  auto_axi4index_in_b_bits_id,
  output [1:0]  auto_axi4index_in_b_bits_resp,
  output        auto_axi4index_in_ar_ready,
                auto_axi4index_in_r_valid,
  output [7:0]  auto_axi4index_in_r_bits_id,
  output [63:0] auto_axi4index_in_r_bits_data,
  output [1:0]  auto_axi4index_in_r_bits_resp,
  output        auto_axi4index_in_r_bits_last,
                auto_tl_out_a_valid,
  output [2:0]  auto_tl_out_a_bits_opcode,
                auto_tl_out_a_bits_param,
  output [3:0]  auto_tl_out_a_bits_size,
                auto_tl_out_a_bits_source,
  output [31:0] auto_tl_out_a_bits_address,
  output        auto_tl_out_a_bits_user_amba_prot_bufferable,
                auto_tl_out_a_bits_user_amba_prot_modifiable,
                auto_tl_out_a_bits_user_amba_prot_readalloc,
                auto_tl_out_a_bits_user_amba_prot_writealloc,
                auto_tl_out_a_bits_user_amba_prot_privileged,
                auto_tl_out_a_bits_user_amba_prot_secure,
                auto_tl_out_a_bits_user_amba_prot_fetch,
  output [7:0]  auto_tl_out_a_bits_mask,
  output [63:0] auto_tl_out_a_bits_data,
  output        auto_tl_out_a_bits_corrupt,
                auto_tl_out_d_ready
);

  wire        _axi4index_auto_out_aw_valid;
  wire        _axi4index_auto_out_aw_bits_id;
  wire [31:0] _axi4index_auto_out_aw_bits_addr;
  wire [7:0]  _axi4index_auto_out_aw_bits_len;
  wire [2:0]  _axi4index_auto_out_aw_bits_size;
  wire [1:0]  _axi4index_auto_out_aw_bits_burst;
  wire        _axi4index_auto_out_aw_bits_lock;
  wire [3:0]  _axi4index_auto_out_aw_bits_cache;
  wire [2:0]  _axi4index_auto_out_aw_bits_prot;
  wire [3:0]  _axi4index_auto_out_aw_bits_qos;
  wire [6:0]  _axi4index_auto_out_aw_bits_echo_extra_id;
  wire        _axi4index_auto_out_w_valid;
  wire [63:0] _axi4index_auto_out_w_bits_data;
  wire [7:0]  _axi4index_auto_out_w_bits_strb;
  wire        _axi4index_auto_out_w_bits_last;
  wire        _axi4index_auto_out_b_ready;
  wire        _axi4index_auto_out_ar_valid;
  wire        _axi4index_auto_out_ar_bits_id;
  wire [31:0] _axi4index_auto_out_ar_bits_addr;
  wire [7:0]  _axi4index_auto_out_ar_bits_len;
  wire [2:0]  _axi4index_auto_out_ar_bits_size;
  wire [1:0]  _axi4index_auto_out_ar_bits_burst;
  wire        _axi4index_auto_out_ar_bits_lock;
  wire [3:0]  _axi4index_auto_out_ar_bits_cache;
  wire [2:0]  _axi4index_auto_out_ar_bits_prot;
  wire [3:0]  _axi4index_auto_out_ar_bits_qos;
  wire [6:0]  _axi4index_auto_out_ar_bits_echo_extra_id;
  wire        _axi4index_auto_out_r_ready;
  wire        _axi4frag_auto_in_aw_ready;
  wire        _axi4frag_auto_in_w_ready;
  wire        _axi4frag_auto_in_b_valid;
  wire        _axi4frag_auto_in_b_bits_id;
  wire [1:0]  _axi4frag_auto_in_b_bits_resp;
  wire [6:0]  _axi4frag_auto_in_b_bits_echo_extra_id;
  wire        _axi4frag_auto_in_ar_ready;
  wire        _axi4frag_auto_in_r_valid;
  wire        _axi4frag_auto_in_r_bits_id;
  wire [63:0] _axi4frag_auto_in_r_bits_data;
  wire [1:0]  _axi4frag_auto_in_r_bits_resp;
  wire [6:0]  _axi4frag_auto_in_r_bits_echo_extra_id;
  wire        _axi4frag_auto_in_r_bits_last;
  wire        _axi4frag_auto_out_aw_valid;
  wire        _axi4frag_auto_out_aw_bits_id;
  wire [31:0] _axi4frag_auto_out_aw_bits_addr;
  wire [7:0]  _axi4frag_auto_out_aw_bits_len;
  wire [2:0]  _axi4frag_auto_out_aw_bits_size;
  wire [3:0]  _axi4frag_auto_out_aw_bits_cache;
  wire [2:0]  _axi4frag_auto_out_aw_bits_prot;
  wire [6:0]  _axi4frag_auto_out_aw_bits_echo_extra_id;
  wire        _axi4frag_auto_out_aw_bits_echo_real_last;
  wire        _axi4frag_auto_out_w_valid;
  wire [63:0] _axi4frag_auto_out_w_bits_data;
  wire [7:0]  _axi4frag_auto_out_w_bits_strb;
  wire        _axi4frag_auto_out_w_bits_last;
  wire        _axi4frag_auto_out_b_ready;
  wire        _axi4frag_auto_out_ar_valid;
  wire        _axi4frag_auto_out_ar_bits_id;
  wire [31:0] _axi4frag_auto_out_ar_bits_addr;
  wire [7:0]  _axi4frag_auto_out_ar_bits_len;
  wire [2:0]  _axi4frag_auto_out_ar_bits_size;
  wire [3:0]  _axi4frag_auto_out_ar_bits_cache;
  wire [2:0]  _axi4frag_auto_out_ar_bits_prot;
  wire [6:0]  _axi4frag_auto_out_ar_bits_echo_extra_id;
  wire        _axi4frag_auto_out_ar_bits_echo_real_last;
  wire        _axi4frag_auto_out_r_ready;
  wire        _axi4yank_auto_in_aw_ready;
  wire        _axi4yank_auto_in_w_ready;
  wire        _axi4yank_auto_in_b_valid;
  wire        _axi4yank_auto_in_b_bits_id;
  wire [1:0]  _axi4yank_auto_in_b_bits_resp;
  wire [6:0]  _axi4yank_auto_in_b_bits_echo_extra_id;
  wire        _axi4yank_auto_in_b_bits_echo_real_last;
  wire        _axi4yank_auto_in_ar_ready;
  wire        _axi4yank_auto_in_r_valid;
  wire        _axi4yank_auto_in_r_bits_id;
  wire [63:0] _axi4yank_auto_in_r_bits_data;
  wire [1:0]  _axi4yank_auto_in_r_bits_resp;
  wire [6:0]  _axi4yank_auto_in_r_bits_echo_extra_id;
  wire        _axi4yank_auto_in_r_bits_echo_real_last;
  wire        _axi4yank_auto_in_r_bits_last;
  wire        _axi4yank_auto_out_aw_valid;
  wire        _axi4yank_auto_out_aw_bits_id;
  wire [31:0] _axi4yank_auto_out_aw_bits_addr;
  wire [7:0]  _axi4yank_auto_out_aw_bits_len;
  wire [2:0]  _axi4yank_auto_out_aw_bits_size;
  wire [3:0]  _axi4yank_auto_out_aw_bits_cache;
  wire [2:0]  _axi4yank_auto_out_aw_bits_prot;
  wire        _axi4yank_auto_out_w_valid;
  wire [63:0] _axi4yank_auto_out_w_bits_data;
  wire [7:0]  _axi4yank_auto_out_w_bits_strb;
  wire        _axi4yank_auto_out_w_bits_last;
  wire        _axi4yank_auto_out_b_ready;
  wire        _axi4yank_auto_out_ar_valid;
  wire        _axi4yank_auto_out_ar_bits_id;
  wire [31:0] _axi4yank_auto_out_ar_bits_addr;
  wire [7:0]  _axi4yank_auto_out_ar_bits_len;
  wire [2:0]  _axi4yank_auto_out_ar_bits_size;
  wire [3:0]  _axi4yank_auto_out_ar_bits_cache;
  wire [2:0]  _axi4yank_auto_out_ar_bits_prot;
  wire        _axi4yank_auto_out_r_ready;
  wire        _axi42tl_auto_in_aw_ready;
  wire        _axi42tl_auto_in_w_ready;
  wire        _axi42tl_auto_in_b_valid;
  wire        _axi42tl_auto_in_b_bits_id;
  wire [1:0]  _axi42tl_auto_in_b_bits_resp;
  wire        _axi42tl_auto_in_ar_ready;
  wire        _axi42tl_auto_in_r_valid;
  wire        _axi42tl_auto_in_r_bits_id;
  wire [63:0] _axi42tl_auto_in_r_bits_data;
  wire [1:0]  _axi42tl_auto_in_r_bits_resp;
  wire        _axi42tl_auto_in_r_bits_last;
  wire        _axi42tl_auto_out_a_valid;
  wire [2:0]  _axi42tl_auto_out_a_bits_opcode;
  wire [3:0]  _axi42tl_auto_out_a_bits_size;
  wire [3:0]  _axi42tl_auto_out_a_bits_source;
  wire [31:0] _axi42tl_auto_out_a_bits_address;
  wire        _axi42tl_auto_out_a_bits_user_amba_prot_bufferable;
  wire        _axi42tl_auto_out_a_bits_user_amba_prot_modifiable;
  wire        _axi42tl_auto_out_a_bits_user_amba_prot_readalloc;
  wire        _axi42tl_auto_out_a_bits_user_amba_prot_writealloc;
  wire        _axi42tl_auto_out_a_bits_user_amba_prot_privileged;
  wire        _axi42tl_auto_out_a_bits_user_amba_prot_secure;
  wire        _axi42tl_auto_out_a_bits_user_amba_prot_fetch;
  wire [7:0]  _axi42tl_auto_out_a_bits_mask;
  wire [63:0] _axi42tl_auto_out_a_bits_data;
  wire        _axi42tl_auto_out_d_ready;
  wire        _fixer_auto_anon_in_a_ready;
  wire        _fixer_auto_anon_in_d_valid;
  wire [2:0]  _fixer_auto_anon_in_d_bits_opcode;
  wire [3:0]  _fixer_auto_anon_in_d_bits_size;
  wire [3:0]  _fixer_auto_anon_in_d_bits_source;
  wire        _fixer_auto_anon_in_d_bits_denied;
  wire [63:0] _fixer_auto_anon_in_d_bits_data;
  wire        _fixer_auto_anon_in_d_bits_corrupt;
  wire        _fixer_auto_anon_out_a_valid;
  wire [2:0]  _fixer_auto_anon_out_a_bits_opcode;
  wire [3:0]  _fixer_auto_anon_out_a_bits_size;
  wire [3:0]  _fixer_auto_anon_out_a_bits_source;
  wire [31:0] _fixer_auto_anon_out_a_bits_address;
  wire        _fixer_auto_anon_out_a_bits_user_amba_prot_bufferable;
  wire        _fixer_auto_anon_out_a_bits_user_amba_prot_modifiable;
  wire        _fixer_auto_anon_out_a_bits_user_amba_prot_readalloc;
  wire        _fixer_auto_anon_out_a_bits_user_amba_prot_writealloc;
  wire        _fixer_auto_anon_out_a_bits_user_amba_prot_privileged;
  wire        _fixer_auto_anon_out_a_bits_user_amba_prot_secure;
  wire        _fixer_auto_anon_out_a_bits_user_amba_prot_fetch;
  wire [7:0]  _fixer_auto_anon_out_a_bits_mask;
  wire [63:0] _fixer_auto_anon_out_a_bits_data;
  wire        _fixer_auto_anon_out_d_ready;
  wire        _buffer_auto_in_a_ready;
  wire        _buffer_auto_in_d_valid;
  wire [2:0]  _buffer_auto_in_d_bits_opcode;
  wire [1:0]  _buffer_auto_in_d_bits_param;
  wire [3:0]  _buffer_auto_in_d_bits_size;
  wire [3:0]  _buffer_auto_in_d_bits_source;
  wire [1:0]  _buffer_auto_in_d_bits_sink;
  wire        _buffer_auto_in_d_bits_denied;
  wire [63:0] _buffer_auto_in_d_bits_data;
  wire        _buffer_auto_in_d_bits_corrupt;
  TLBuffer_a32d64s4k2z4u_1 buffer (
    .clock                                     (clock),
    .reset                                     (reset),
    .auto_in_a_valid                           (_fixer_auto_anon_out_a_valid),
    .auto_in_a_bits_opcode                     (_fixer_auto_anon_out_a_bits_opcode),
    .auto_in_a_bits_size                       (_fixer_auto_anon_out_a_bits_size),
    .auto_in_a_bits_source                     (_fixer_auto_anon_out_a_bits_source),
    .auto_in_a_bits_address                    (_fixer_auto_anon_out_a_bits_address),
    .auto_in_a_bits_user_amba_prot_bufferable
      (_fixer_auto_anon_out_a_bits_user_amba_prot_bufferable),
    .auto_in_a_bits_user_amba_prot_modifiable
      (_fixer_auto_anon_out_a_bits_user_amba_prot_modifiable),
    .auto_in_a_bits_user_amba_prot_readalloc
      (_fixer_auto_anon_out_a_bits_user_amba_prot_readalloc),
    .auto_in_a_bits_user_amba_prot_writealloc
      (_fixer_auto_anon_out_a_bits_user_amba_prot_writealloc),
    .auto_in_a_bits_user_amba_prot_privileged
      (_fixer_auto_anon_out_a_bits_user_amba_prot_privileged),
    .auto_in_a_bits_user_amba_prot_secure
      (_fixer_auto_anon_out_a_bits_user_amba_prot_secure),
    .auto_in_a_bits_user_amba_prot_fetch
      (_fixer_auto_anon_out_a_bits_user_amba_prot_fetch),
    .auto_in_a_bits_mask                       (_fixer_auto_anon_out_a_bits_mask),
    .auto_in_a_bits_data                       (_fixer_auto_anon_out_a_bits_data),
    .auto_in_d_ready                           (_fixer_auto_anon_out_d_ready),
    .auto_out_a_ready                          (auto_tl_out_a_ready),
    .auto_out_d_valid                          (auto_tl_out_d_valid),
    .auto_out_d_bits_opcode                    (auto_tl_out_d_bits_opcode),
    .auto_out_d_bits_param                     (auto_tl_out_d_bits_param),
    .auto_out_d_bits_size                      (auto_tl_out_d_bits_size),
    .auto_out_d_bits_source                    (auto_tl_out_d_bits_source),
    .auto_out_d_bits_sink                      (auto_tl_out_d_bits_sink),
    .auto_out_d_bits_denied                    (auto_tl_out_d_bits_denied),
    .auto_out_d_bits_data                      (auto_tl_out_d_bits_data),
    .auto_out_d_bits_corrupt                   (auto_tl_out_d_bits_corrupt),
    .auto_in_a_ready                           (_buffer_auto_in_a_ready),
    .auto_in_d_valid                           (_buffer_auto_in_d_valid),
    .auto_in_d_bits_opcode                     (_buffer_auto_in_d_bits_opcode),
    .auto_in_d_bits_param                      (_buffer_auto_in_d_bits_param),
    .auto_in_d_bits_size                       (_buffer_auto_in_d_bits_size),
    .auto_in_d_bits_source                     (_buffer_auto_in_d_bits_source),
    .auto_in_d_bits_sink                       (_buffer_auto_in_d_bits_sink),
    .auto_in_d_bits_denied                     (_buffer_auto_in_d_bits_denied),
    .auto_in_d_bits_data                       (_buffer_auto_in_d_bits_data),
    .auto_in_d_bits_corrupt                    (_buffer_auto_in_d_bits_corrupt),
    .auto_out_a_valid                          (auto_tl_out_a_valid),
    .auto_out_a_bits_opcode                    (auto_tl_out_a_bits_opcode),
    .auto_out_a_bits_param                     (auto_tl_out_a_bits_param),
    .auto_out_a_bits_size                      (auto_tl_out_a_bits_size),
    .auto_out_a_bits_source                    (auto_tl_out_a_bits_source),
    .auto_out_a_bits_address                   (auto_tl_out_a_bits_address),
    .auto_out_a_bits_user_amba_prot_bufferable
      (auto_tl_out_a_bits_user_amba_prot_bufferable),
    .auto_out_a_bits_user_amba_prot_modifiable
      (auto_tl_out_a_bits_user_amba_prot_modifiable),
    .auto_out_a_bits_user_amba_prot_readalloc
      (auto_tl_out_a_bits_user_amba_prot_readalloc),
    .auto_out_a_bits_user_amba_prot_writealloc
      (auto_tl_out_a_bits_user_amba_prot_writealloc),
    .auto_out_a_bits_user_amba_prot_privileged
      (auto_tl_out_a_bits_user_amba_prot_privileged),
    .auto_out_a_bits_user_amba_prot_secure     (auto_tl_out_a_bits_user_amba_prot_secure),
    .auto_out_a_bits_user_amba_prot_fetch      (auto_tl_out_a_bits_user_amba_prot_fetch),
    .auto_out_a_bits_mask                      (auto_tl_out_a_bits_mask),
    .auto_out_a_bits_data                      (auto_tl_out_a_bits_data),
    .auto_out_a_bits_corrupt                   (auto_tl_out_a_bits_corrupt),
    .auto_out_d_ready                          (auto_tl_out_d_ready)
  );
  TLFIFOFixer_2 fixer (
    .clock                                          (clock),
    .reset                                          (reset),
    .auto_anon_in_a_valid                           (_axi42tl_auto_out_a_valid),
    .auto_anon_in_a_bits_opcode                     (_axi42tl_auto_out_a_bits_opcode),
    .auto_anon_in_a_bits_size                       (_axi42tl_auto_out_a_bits_size),
    .auto_anon_in_a_bits_source                     (_axi42tl_auto_out_a_bits_source),
    .auto_anon_in_a_bits_address                    (_axi42tl_auto_out_a_bits_address),
    .auto_anon_in_a_bits_user_amba_prot_bufferable
      (_axi42tl_auto_out_a_bits_user_amba_prot_bufferable),
    .auto_anon_in_a_bits_user_amba_prot_modifiable
      (_axi42tl_auto_out_a_bits_user_amba_prot_modifiable),
    .auto_anon_in_a_bits_user_amba_prot_readalloc
      (_axi42tl_auto_out_a_bits_user_amba_prot_readalloc),
    .auto_anon_in_a_bits_user_amba_prot_writealloc
      (_axi42tl_auto_out_a_bits_user_amba_prot_writealloc),
    .auto_anon_in_a_bits_user_amba_prot_privileged
      (_axi42tl_auto_out_a_bits_user_amba_prot_privileged),
    .auto_anon_in_a_bits_user_amba_prot_secure
      (_axi42tl_auto_out_a_bits_user_amba_prot_secure),
    .auto_anon_in_a_bits_user_amba_prot_fetch
      (_axi42tl_auto_out_a_bits_user_amba_prot_fetch),
    .auto_anon_in_a_bits_mask                       (_axi42tl_auto_out_a_bits_mask),
    .auto_anon_in_a_bits_data                       (_axi42tl_auto_out_a_bits_data),
    .auto_anon_in_d_ready                           (_axi42tl_auto_out_d_ready),
    .auto_anon_out_a_ready                          (_buffer_auto_in_a_ready),
    .auto_anon_out_d_valid                          (_buffer_auto_in_d_valid),
    .auto_anon_out_d_bits_opcode                    (_buffer_auto_in_d_bits_opcode),
    .auto_anon_out_d_bits_param                     (_buffer_auto_in_d_bits_param),
    .auto_anon_out_d_bits_size                      (_buffer_auto_in_d_bits_size),
    .auto_anon_out_d_bits_source                    (_buffer_auto_in_d_bits_source),
    .auto_anon_out_d_bits_sink                      (_buffer_auto_in_d_bits_sink),
    .auto_anon_out_d_bits_denied                    (_buffer_auto_in_d_bits_denied),
    .auto_anon_out_d_bits_data                      (_buffer_auto_in_d_bits_data),
    .auto_anon_out_d_bits_corrupt                   (_buffer_auto_in_d_bits_corrupt),
    .auto_anon_in_a_ready                           (_fixer_auto_anon_in_a_ready),
    .auto_anon_in_d_valid                           (_fixer_auto_anon_in_d_valid),
    .auto_anon_in_d_bits_opcode                     (_fixer_auto_anon_in_d_bits_opcode),
    .auto_anon_in_d_bits_size                       (_fixer_auto_anon_in_d_bits_size),
    .auto_anon_in_d_bits_source                     (_fixer_auto_anon_in_d_bits_source),
    .auto_anon_in_d_bits_denied                     (_fixer_auto_anon_in_d_bits_denied),
    .auto_anon_in_d_bits_data                       (_fixer_auto_anon_in_d_bits_data),
    .auto_anon_in_d_bits_corrupt                    (_fixer_auto_anon_in_d_bits_corrupt),
    .auto_anon_out_a_valid                          (_fixer_auto_anon_out_a_valid),
    .auto_anon_out_a_bits_opcode                    (_fixer_auto_anon_out_a_bits_opcode),
    .auto_anon_out_a_bits_size                      (_fixer_auto_anon_out_a_bits_size),
    .auto_anon_out_a_bits_source                    (_fixer_auto_anon_out_a_bits_source),
    .auto_anon_out_a_bits_address                   (_fixer_auto_anon_out_a_bits_address),
    .auto_anon_out_a_bits_user_amba_prot_bufferable
      (_fixer_auto_anon_out_a_bits_user_amba_prot_bufferable),
    .auto_anon_out_a_bits_user_amba_prot_modifiable
      (_fixer_auto_anon_out_a_bits_user_amba_prot_modifiable),
    .auto_anon_out_a_bits_user_amba_prot_readalloc
      (_fixer_auto_anon_out_a_bits_user_amba_prot_readalloc),
    .auto_anon_out_a_bits_user_amba_prot_writealloc
      (_fixer_auto_anon_out_a_bits_user_amba_prot_writealloc),
    .auto_anon_out_a_bits_user_amba_prot_privileged
      (_fixer_auto_anon_out_a_bits_user_amba_prot_privileged),
    .auto_anon_out_a_bits_user_amba_prot_secure
      (_fixer_auto_anon_out_a_bits_user_amba_prot_secure),
    .auto_anon_out_a_bits_user_amba_prot_fetch
      (_fixer_auto_anon_out_a_bits_user_amba_prot_fetch),
    .auto_anon_out_a_bits_mask                      (_fixer_auto_anon_out_a_bits_mask),
    .auto_anon_out_a_bits_data                      (_fixer_auto_anon_out_a_bits_data),
    .auto_anon_out_d_ready                          (_fixer_auto_anon_out_d_ready)
  );
  AXI4ToTL axi42tl (
    .clock                                     (clock),
    .reset                                     (reset),
    .auto_in_aw_valid                          (_axi4yank_auto_out_aw_valid),
    .auto_in_aw_bits_id                        (_axi4yank_auto_out_aw_bits_id),
    .auto_in_aw_bits_addr                      (_axi4yank_auto_out_aw_bits_addr),
    .auto_in_aw_bits_len                       (_axi4yank_auto_out_aw_bits_len),
    .auto_in_aw_bits_size                      (_axi4yank_auto_out_aw_bits_size),
    .auto_in_aw_bits_cache                     (_axi4yank_auto_out_aw_bits_cache),
    .auto_in_aw_bits_prot                      (_axi4yank_auto_out_aw_bits_prot),
    .auto_in_w_valid                           (_axi4yank_auto_out_w_valid),
    .auto_in_w_bits_data                       (_axi4yank_auto_out_w_bits_data),
    .auto_in_w_bits_strb                       (_axi4yank_auto_out_w_bits_strb),
    .auto_in_w_bits_last                       (_axi4yank_auto_out_w_bits_last),
    .auto_in_b_ready                           (_axi4yank_auto_out_b_ready),
    .auto_in_ar_valid                          (_axi4yank_auto_out_ar_valid),
    .auto_in_ar_bits_id                        (_axi4yank_auto_out_ar_bits_id),
    .auto_in_ar_bits_addr                      (_axi4yank_auto_out_ar_bits_addr),
    .auto_in_ar_bits_len                       (_axi4yank_auto_out_ar_bits_len),
    .auto_in_ar_bits_size                      (_axi4yank_auto_out_ar_bits_size),
    .auto_in_ar_bits_cache                     (_axi4yank_auto_out_ar_bits_cache),
    .auto_in_ar_bits_prot                      (_axi4yank_auto_out_ar_bits_prot),
    .auto_in_r_ready                           (_axi4yank_auto_out_r_ready),
    .auto_out_a_ready                          (_fixer_auto_anon_in_a_ready),
    .auto_out_d_valid                          (_fixer_auto_anon_in_d_valid),
    .auto_out_d_bits_opcode                    (_fixer_auto_anon_in_d_bits_opcode),
    .auto_out_d_bits_size                      (_fixer_auto_anon_in_d_bits_size),
    .auto_out_d_bits_source                    (_fixer_auto_anon_in_d_bits_source),
    .auto_out_d_bits_denied                    (_fixer_auto_anon_in_d_bits_denied),
    .auto_out_d_bits_data                      (_fixer_auto_anon_in_d_bits_data),
    .auto_out_d_bits_corrupt                   (_fixer_auto_anon_in_d_bits_corrupt),
    .auto_in_aw_ready                          (_axi42tl_auto_in_aw_ready),
    .auto_in_w_ready                           (_axi42tl_auto_in_w_ready),
    .auto_in_b_valid                           (_axi42tl_auto_in_b_valid),
    .auto_in_b_bits_id                         (_axi42tl_auto_in_b_bits_id),
    .auto_in_b_bits_resp                       (_axi42tl_auto_in_b_bits_resp),
    .auto_in_ar_ready                          (_axi42tl_auto_in_ar_ready),
    .auto_in_r_valid                           (_axi42tl_auto_in_r_valid),
    .auto_in_r_bits_id                         (_axi42tl_auto_in_r_bits_id),
    .auto_in_r_bits_data                       (_axi42tl_auto_in_r_bits_data),
    .auto_in_r_bits_resp                       (_axi42tl_auto_in_r_bits_resp),
    .auto_in_r_bits_last                       (_axi42tl_auto_in_r_bits_last),
    .auto_out_a_valid                          (_axi42tl_auto_out_a_valid),
    .auto_out_a_bits_opcode                    (_axi42tl_auto_out_a_bits_opcode),
    .auto_out_a_bits_size                      (_axi42tl_auto_out_a_bits_size),
    .auto_out_a_bits_source                    (_axi42tl_auto_out_a_bits_source),
    .auto_out_a_bits_address                   (_axi42tl_auto_out_a_bits_address),
    .auto_out_a_bits_user_amba_prot_bufferable
      (_axi42tl_auto_out_a_bits_user_amba_prot_bufferable),
    .auto_out_a_bits_user_amba_prot_modifiable
      (_axi42tl_auto_out_a_bits_user_amba_prot_modifiable),
    .auto_out_a_bits_user_amba_prot_readalloc
      (_axi42tl_auto_out_a_bits_user_amba_prot_readalloc),
    .auto_out_a_bits_user_amba_prot_writealloc
      (_axi42tl_auto_out_a_bits_user_amba_prot_writealloc),
    .auto_out_a_bits_user_amba_prot_privileged
      (_axi42tl_auto_out_a_bits_user_amba_prot_privileged),
    .auto_out_a_bits_user_amba_prot_secure
      (_axi42tl_auto_out_a_bits_user_amba_prot_secure),
    .auto_out_a_bits_user_amba_prot_fetch
      (_axi42tl_auto_out_a_bits_user_amba_prot_fetch),
    .auto_out_a_bits_mask                      (_axi42tl_auto_out_a_bits_mask),
    .auto_out_a_bits_data                      (_axi42tl_auto_out_a_bits_data),
    .auto_out_d_ready                          (_axi42tl_auto_out_d_ready)
  );
  AXI4UserYanker_1 axi4yank (
    .clock                          (clock),
    .reset                          (reset),
    .auto_in_aw_valid               (_axi4frag_auto_out_aw_valid),
    .auto_in_aw_bits_id             (_axi4frag_auto_out_aw_bits_id),
    .auto_in_aw_bits_addr           (_axi4frag_auto_out_aw_bits_addr),
    .auto_in_aw_bits_len            (_axi4frag_auto_out_aw_bits_len),
    .auto_in_aw_bits_size           (_axi4frag_auto_out_aw_bits_size),
    .auto_in_aw_bits_cache          (_axi4frag_auto_out_aw_bits_cache),
    .auto_in_aw_bits_prot           (_axi4frag_auto_out_aw_bits_prot),
    .auto_in_aw_bits_echo_extra_id  (_axi4frag_auto_out_aw_bits_echo_extra_id),
    .auto_in_aw_bits_echo_real_last (_axi4frag_auto_out_aw_bits_echo_real_last),
    .auto_in_w_valid                (_axi4frag_auto_out_w_valid),
    .auto_in_w_bits_data            (_axi4frag_auto_out_w_bits_data),
    .auto_in_w_bits_strb            (_axi4frag_auto_out_w_bits_strb),
    .auto_in_w_bits_last            (_axi4frag_auto_out_w_bits_last),
    .auto_in_b_ready                (_axi4frag_auto_out_b_ready),
    .auto_in_ar_valid               (_axi4frag_auto_out_ar_valid),
    .auto_in_ar_bits_id             (_axi4frag_auto_out_ar_bits_id),
    .auto_in_ar_bits_addr           (_axi4frag_auto_out_ar_bits_addr),
    .auto_in_ar_bits_len            (_axi4frag_auto_out_ar_bits_len),
    .auto_in_ar_bits_size           (_axi4frag_auto_out_ar_bits_size),
    .auto_in_ar_bits_cache          (_axi4frag_auto_out_ar_bits_cache),
    .auto_in_ar_bits_prot           (_axi4frag_auto_out_ar_bits_prot),
    .auto_in_ar_bits_echo_extra_id  (_axi4frag_auto_out_ar_bits_echo_extra_id),
    .auto_in_ar_bits_echo_real_last (_axi4frag_auto_out_ar_bits_echo_real_last),
    .auto_in_r_ready                (_axi4frag_auto_out_r_ready),
    .auto_out_aw_ready              (_axi42tl_auto_in_aw_ready),
    .auto_out_w_ready               (_axi42tl_auto_in_w_ready),
    .auto_out_b_valid               (_axi42tl_auto_in_b_valid),
    .auto_out_b_bits_id             (_axi42tl_auto_in_b_bits_id),
    .auto_out_b_bits_resp           (_axi42tl_auto_in_b_bits_resp),
    .auto_out_ar_ready              (_axi42tl_auto_in_ar_ready),
    .auto_out_r_valid               (_axi42tl_auto_in_r_valid),
    .auto_out_r_bits_id             (_axi42tl_auto_in_r_bits_id),
    .auto_out_r_bits_data           (_axi42tl_auto_in_r_bits_data),
    .auto_out_r_bits_resp           (_axi42tl_auto_in_r_bits_resp),
    .auto_out_r_bits_last           (_axi42tl_auto_in_r_bits_last),
    .auto_in_aw_ready               (_axi4yank_auto_in_aw_ready),
    .auto_in_w_ready                (_axi4yank_auto_in_w_ready),
    .auto_in_b_valid                (_axi4yank_auto_in_b_valid),
    .auto_in_b_bits_id              (_axi4yank_auto_in_b_bits_id),
    .auto_in_b_bits_resp            (_axi4yank_auto_in_b_bits_resp),
    .auto_in_b_bits_echo_extra_id   (_axi4yank_auto_in_b_bits_echo_extra_id),
    .auto_in_b_bits_echo_real_last  (_axi4yank_auto_in_b_bits_echo_real_last),
    .auto_in_ar_ready               (_axi4yank_auto_in_ar_ready),
    .auto_in_r_valid                (_axi4yank_auto_in_r_valid),
    .auto_in_r_bits_id              (_axi4yank_auto_in_r_bits_id),
    .auto_in_r_bits_data            (_axi4yank_auto_in_r_bits_data),
    .auto_in_r_bits_resp            (_axi4yank_auto_in_r_bits_resp),
    .auto_in_r_bits_echo_extra_id   (_axi4yank_auto_in_r_bits_echo_extra_id),
    .auto_in_r_bits_echo_real_last  (_axi4yank_auto_in_r_bits_echo_real_last),
    .auto_in_r_bits_last            (_axi4yank_auto_in_r_bits_last),
    .auto_out_aw_valid              (_axi4yank_auto_out_aw_valid),
    .auto_out_aw_bits_id            (_axi4yank_auto_out_aw_bits_id),
    .auto_out_aw_bits_addr          (_axi4yank_auto_out_aw_bits_addr),
    .auto_out_aw_bits_len           (_axi4yank_auto_out_aw_bits_len),
    .auto_out_aw_bits_size          (_axi4yank_auto_out_aw_bits_size),
    .auto_out_aw_bits_cache         (_axi4yank_auto_out_aw_bits_cache),
    .auto_out_aw_bits_prot          (_axi4yank_auto_out_aw_bits_prot),
    .auto_out_w_valid               (_axi4yank_auto_out_w_valid),
    .auto_out_w_bits_data           (_axi4yank_auto_out_w_bits_data),
    .auto_out_w_bits_strb           (_axi4yank_auto_out_w_bits_strb),
    .auto_out_w_bits_last           (_axi4yank_auto_out_w_bits_last),
    .auto_out_b_ready               (_axi4yank_auto_out_b_ready),
    .auto_out_ar_valid              (_axi4yank_auto_out_ar_valid),
    .auto_out_ar_bits_id            (_axi4yank_auto_out_ar_bits_id),
    .auto_out_ar_bits_addr          (_axi4yank_auto_out_ar_bits_addr),
    .auto_out_ar_bits_len           (_axi4yank_auto_out_ar_bits_len),
    .auto_out_ar_bits_size          (_axi4yank_auto_out_ar_bits_size),
    .auto_out_ar_bits_cache         (_axi4yank_auto_out_ar_bits_cache),
    .auto_out_ar_bits_prot          (_axi4yank_auto_out_ar_bits_prot),
    .auto_out_r_ready               (_axi4yank_auto_out_r_ready)
  );
  AXI4Fragmenter axi4frag (
    .clock                           (clock),
    .reset                           (reset),
    .auto_in_aw_valid                (_axi4index_auto_out_aw_valid),
    .auto_in_aw_bits_id              (_axi4index_auto_out_aw_bits_id),
    .auto_in_aw_bits_addr            (_axi4index_auto_out_aw_bits_addr),
    .auto_in_aw_bits_len             (_axi4index_auto_out_aw_bits_len),
    .auto_in_aw_bits_size            (_axi4index_auto_out_aw_bits_size),
    .auto_in_aw_bits_burst           (_axi4index_auto_out_aw_bits_burst),
    .auto_in_aw_bits_lock            (_axi4index_auto_out_aw_bits_lock),
    .auto_in_aw_bits_cache           (_axi4index_auto_out_aw_bits_cache),
    .auto_in_aw_bits_prot            (_axi4index_auto_out_aw_bits_prot),
    .auto_in_aw_bits_qos             (_axi4index_auto_out_aw_bits_qos),
    .auto_in_aw_bits_echo_extra_id   (_axi4index_auto_out_aw_bits_echo_extra_id),
    .auto_in_w_valid                 (_axi4index_auto_out_w_valid),
    .auto_in_w_bits_data             (_axi4index_auto_out_w_bits_data),
    .auto_in_w_bits_strb             (_axi4index_auto_out_w_bits_strb),
    .auto_in_w_bits_last             (_axi4index_auto_out_w_bits_last),
    .auto_in_b_ready                 (_axi4index_auto_out_b_ready),
    .auto_in_ar_valid                (_axi4index_auto_out_ar_valid),
    .auto_in_ar_bits_id              (_axi4index_auto_out_ar_bits_id),
    .auto_in_ar_bits_addr            (_axi4index_auto_out_ar_bits_addr),
    .auto_in_ar_bits_len             (_axi4index_auto_out_ar_bits_len),
    .auto_in_ar_bits_size            (_axi4index_auto_out_ar_bits_size),
    .auto_in_ar_bits_burst           (_axi4index_auto_out_ar_bits_burst),
    .auto_in_ar_bits_lock            (_axi4index_auto_out_ar_bits_lock),
    .auto_in_ar_bits_cache           (_axi4index_auto_out_ar_bits_cache),
    .auto_in_ar_bits_prot            (_axi4index_auto_out_ar_bits_prot),
    .auto_in_ar_bits_qos             (_axi4index_auto_out_ar_bits_qos),
    .auto_in_ar_bits_echo_extra_id   (_axi4index_auto_out_ar_bits_echo_extra_id),
    .auto_in_r_ready                 (_axi4index_auto_out_r_ready),
    .auto_out_aw_ready               (_axi4yank_auto_in_aw_ready),
    .auto_out_w_ready                (_axi4yank_auto_in_w_ready),
    .auto_out_b_valid                (_axi4yank_auto_in_b_valid),
    .auto_out_b_bits_id              (_axi4yank_auto_in_b_bits_id),
    .auto_out_b_bits_resp            (_axi4yank_auto_in_b_bits_resp),
    .auto_out_b_bits_echo_extra_id   (_axi4yank_auto_in_b_bits_echo_extra_id),
    .auto_out_b_bits_echo_real_last  (_axi4yank_auto_in_b_bits_echo_real_last),
    .auto_out_ar_ready               (_axi4yank_auto_in_ar_ready),
    .auto_out_r_valid                (_axi4yank_auto_in_r_valid),
    .auto_out_r_bits_id              (_axi4yank_auto_in_r_bits_id),
    .auto_out_r_bits_data            (_axi4yank_auto_in_r_bits_data),
    .auto_out_r_bits_resp            (_axi4yank_auto_in_r_bits_resp),
    .auto_out_r_bits_echo_extra_id   (_axi4yank_auto_in_r_bits_echo_extra_id),
    .auto_out_r_bits_echo_real_last  (_axi4yank_auto_in_r_bits_echo_real_last),
    .auto_out_r_bits_last            (_axi4yank_auto_in_r_bits_last),
    .auto_in_aw_ready                (_axi4frag_auto_in_aw_ready),
    .auto_in_w_ready                 (_axi4frag_auto_in_w_ready),
    .auto_in_b_valid                 (_axi4frag_auto_in_b_valid),
    .auto_in_b_bits_id               (_axi4frag_auto_in_b_bits_id),
    .auto_in_b_bits_resp             (_axi4frag_auto_in_b_bits_resp),
    .auto_in_b_bits_echo_extra_id    (_axi4frag_auto_in_b_bits_echo_extra_id),
    .auto_in_ar_ready                (_axi4frag_auto_in_ar_ready),
    .auto_in_r_valid                 (_axi4frag_auto_in_r_valid),
    .auto_in_r_bits_id               (_axi4frag_auto_in_r_bits_id),
    .auto_in_r_bits_data             (_axi4frag_auto_in_r_bits_data),
    .auto_in_r_bits_resp             (_axi4frag_auto_in_r_bits_resp),
    .auto_in_r_bits_echo_extra_id    (_axi4frag_auto_in_r_bits_echo_extra_id),
    .auto_in_r_bits_last             (_axi4frag_auto_in_r_bits_last),
    .auto_out_aw_valid               (_axi4frag_auto_out_aw_valid),
    .auto_out_aw_bits_id             (_axi4frag_auto_out_aw_bits_id),
    .auto_out_aw_bits_addr           (_axi4frag_auto_out_aw_bits_addr),
    .auto_out_aw_bits_len            (_axi4frag_auto_out_aw_bits_len),
    .auto_out_aw_bits_size           (_axi4frag_auto_out_aw_bits_size),
    .auto_out_aw_bits_cache          (_axi4frag_auto_out_aw_bits_cache),
    .auto_out_aw_bits_prot           (_axi4frag_auto_out_aw_bits_prot),
    .auto_out_aw_bits_echo_extra_id  (_axi4frag_auto_out_aw_bits_echo_extra_id),
    .auto_out_aw_bits_echo_real_last (_axi4frag_auto_out_aw_bits_echo_real_last),
    .auto_out_w_valid                (_axi4frag_auto_out_w_valid),
    .auto_out_w_bits_data            (_axi4frag_auto_out_w_bits_data),
    .auto_out_w_bits_strb            (_axi4frag_auto_out_w_bits_strb),
    .auto_out_w_bits_last            (_axi4frag_auto_out_w_bits_last),
    .auto_out_b_ready                (_axi4frag_auto_out_b_ready),
    .auto_out_ar_valid               (_axi4frag_auto_out_ar_valid),
    .auto_out_ar_bits_id             (_axi4frag_auto_out_ar_bits_id),
    .auto_out_ar_bits_addr           (_axi4frag_auto_out_ar_bits_addr),
    .auto_out_ar_bits_len            (_axi4frag_auto_out_ar_bits_len),
    .auto_out_ar_bits_size           (_axi4frag_auto_out_ar_bits_size),
    .auto_out_ar_bits_cache          (_axi4frag_auto_out_ar_bits_cache),
    .auto_out_ar_bits_prot           (_axi4frag_auto_out_ar_bits_prot),
    .auto_out_ar_bits_echo_extra_id  (_axi4frag_auto_out_ar_bits_echo_extra_id),
    .auto_out_ar_bits_echo_real_last (_axi4frag_auto_out_ar_bits_echo_real_last),
    .auto_out_r_ready                (_axi4frag_auto_out_r_ready)
  );
  AXI4IdIndexer_1 axi4index (
    .auto_in_aw_valid               (auto_axi4index_in_aw_valid),
    .auto_in_aw_bits_id             (auto_axi4index_in_aw_bits_id),
    .auto_in_aw_bits_addr           (auto_axi4index_in_aw_bits_addr),
    .auto_in_aw_bits_len            (auto_axi4index_in_aw_bits_len),
    .auto_in_aw_bits_size           (auto_axi4index_in_aw_bits_size),
    .auto_in_aw_bits_burst          (auto_axi4index_in_aw_bits_burst),
    .auto_in_aw_bits_lock           (auto_axi4index_in_aw_bits_lock),
    .auto_in_aw_bits_cache          (auto_axi4index_in_aw_bits_cache),
    .auto_in_aw_bits_prot           (auto_axi4index_in_aw_bits_prot),
    .auto_in_aw_bits_qos            (auto_axi4index_in_aw_bits_qos),
    .auto_in_w_valid                (auto_axi4index_in_w_valid),
    .auto_in_w_bits_data            (auto_axi4index_in_w_bits_data),
    .auto_in_w_bits_strb            (auto_axi4index_in_w_bits_strb),
    .auto_in_w_bits_last            (auto_axi4index_in_w_bits_last),
    .auto_in_b_ready                (auto_axi4index_in_b_ready),
    .auto_in_ar_valid               (auto_axi4index_in_ar_valid),
    .auto_in_ar_bits_id             (auto_axi4index_in_ar_bits_id),
    .auto_in_ar_bits_addr           (auto_axi4index_in_ar_bits_addr),
    .auto_in_ar_bits_len            (auto_axi4index_in_ar_bits_len),
    .auto_in_ar_bits_size           (auto_axi4index_in_ar_bits_size),
    .auto_in_ar_bits_burst          (auto_axi4index_in_ar_bits_burst),
    .auto_in_ar_bits_lock           (auto_axi4index_in_ar_bits_lock),
    .auto_in_ar_bits_cache          (auto_axi4index_in_ar_bits_cache),
    .auto_in_ar_bits_prot           (auto_axi4index_in_ar_bits_prot),
    .auto_in_ar_bits_qos            (auto_axi4index_in_ar_bits_qos),
    .auto_in_r_ready                (auto_axi4index_in_r_ready),
    .auto_out_aw_ready              (_axi4frag_auto_in_aw_ready),
    .auto_out_w_ready               (_axi4frag_auto_in_w_ready),
    .auto_out_b_valid               (_axi4frag_auto_in_b_valid),
    .auto_out_b_bits_id             (_axi4frag_auto_in_b_bits_id),
    .auto_out_b_bits_resp           (_axi4frag_auto_in_b_bits_resp),
    .auto_out_b_bits_echo_extra_id  (_axi4frag_auto_in_b_bits_echo_extra_id),
    .auto_out_ar_ready              (_axi4frag_auto_in_ar_ready),
    .auto_out_r_valid               (_axi4frag_auto_in_r_valid),
    .auto_out_r_bits_id             (_axi4frag_auto_in_r_bits_id),
    .auto_out_r_bits_data           (_axi4frag_auto_in_r_bits_data),
    .auto_out_r_bits_resp           (_axi4frag_auto_in_r_bits_resp),
    .auto_out_r_bits_echo_extra_id  (_axi4frag_auto_in_r_bits_echo_extra_id),
    .auto_out_r_bits_last           (_axi4frag_auto_in_r_bits_last),
    .auto_in_aw_ready               (auto_axi4index_in_aw_ready),
    .auto_in_w_ready                (auto_axi4index_in_w_ready),
    .auto_in_b_valid                (auto_axi4index_in_b_valid),
    .auto_in_b_bits_id              (auto_axi4index_in_b_bits_id),
    .auto_in_b_bits_resp            (auto_axi4index_in_b_bits_resp),
    .auto_in_ar_ready               (auto_axi4index_in_ar_ready),
    .auto_in_r_valid                (auto_axi4index_in_r_valid),
    .auto_in_r_bits_id              (auto_axi4index_in_r_bits_id),
    .auto_in_r_bits_data            (auto_axi4index_in_r_bits_data),
    .auto_in_r_bits_resp            (auto_axi4index_in_r_bits_resp),
    .auto_in_r_bits_last            (auto_axi4index_in_r_bits_last),
    .auto_out_aw_valid              (_axi4index_auto_out_aw_valid),
    .auto_out_aw_bits_id            (_axi4index_auto_out_aw_bits_id),
    .auto_out_aw_bits_addr          (_axi4index_auto_out_aw_bits_addr),
    .auto_out_aw_bits_len           (_axi4index_auto_out_aw_bits_len),
    .auto_out_aw_bits_size          (_axi4index_auto_out_aw_bits_size),
    .auto_out_aw_bits_burst         (_axi4index_auto_out_aw_bits_burst),
    .auto_out_aw_bits_lock          (_axi4index_auto_out_aw_bits_lock),
    .auto_out_aw_bits_cache         (_axi4index_auto_out_aw_bits_cache),
    .auto_out_aw_bits_prot          (_axi4index_auto_out_aw_bits_prot),
    .auto_out_aw_bits_qos           (_axi4index_auto_out_aw_bits_qos),
    .auto_out_aw_bits_echo_extra_id (_axi4index_auto_out_aw_bits_echo_extra_id),
    .auto_out_w_valid               (_axi4index_auto_out_w_valid),
    .auto_out_w_bits_data           (_axi4index_auto_out_w_bits_data),
    .auto_out_w_bits_strb           (_axi4index_auto_out_w_bits_strb),
    .auto_out_w_bits_last           (_axi4index_auto_out_w_bits_last),
    .auto_out_b_ready               (_axi4index_auto_out_b_ready),
    .auto_out_ar_valid              (_axi4index_auto_out_ar_valid),
    .auto_out_ar_bits_id            (_axi4index_auto_out_ar_bits_id),
    .auto_out_ar_bits_addr          (_axi4index_auto_out_ar_bits_addr),
    .auto_out_ar_bits_len           (_axi4index_auto_out_ar_bits_len),
    .auto_out_ar_bits_size          (_axi4index_auto_out_ar_bits_size),
    .auto_out_ar_bits_burst         (_axi4index_auto_out_ar_bits_burst),
    .auto_out_ar_bits_lock          (_axi4index_auto_out_ar_bits_lock),
    .auto_out_ar_bits_cache         (_axi4index_auto_out_ar_bits_cache),
    .auto_out_ar_bits_prot          (_axi4index_auto_out_ar_bits_prot),
    .auto_out_ar_bits_qos           (_axi4index_auto_out_ar_bits_qos),
    .auto_out_ar_bits_echo_extra_id (_axi4index_auto_out_ar_bits_echo_extra_id),
    .auto_out_r_ready               (_axi4index_auto_out_r_ready)
  );
endmodule

module FixedClockBroadcast_5(
  input  auto_anon_in_clock,
         auto_anon_in_reset,
  output auto_anon_out_4_clock,
         auto_anon_out_4_reset,
         auto_anon_out_2_clock,
         auto_anon_out_2_reset,
         auto_anon_out_1_clock,
         auto_anon_out_1_reset,
         auto_anon_out_0_clock,
         auto_anon_out_0_reset
);

  assign auto_anon_out_4_clock = auto_anon_in_clock;
  assign auto_anon_out_4_reset = auto_anon_in_reset;
  assign auto_anon_out_2_clock = auto_anon_in_clock;
  assign auto_anon_out_2_reset = auto_anon_in_reset;
  assign auto_anon_out_1_clock = auto_anon_in_clock;
  assign auto_anon_out_1_reset = auto_anon_in_reset;
  assign auto_anon_out_0_clock = auto_anon_in_clock;
  assign auto_anon_out_0_reset = auto_anon_in_reset;
endmodule

module TLMonitor_8(
  input        clock,
               reset,
               io_in_a_ready,
               io_in_a_valid,
  input [2:0]  io_in_a_bits_opcode,
               io_in_a_bits_param,
  input [3:0]  io_in_a_bits_size,
  input [4:0]  io_in_a_bits_source,
  input [27:0] io_in_a_bits_address,
  input [7:0]  io_in_a_bits_mask,
  input        io_in_a_bits_corrupt,
               io_in_d_ready,
               io_in_d_valid,
  input [2:0]  io_in_d_bits_opcode,
  input [1:0]  io_in_d_bits_param,
  input [3:0]  io_in_d_bits_size,
  input [4:0]  io_in_d_bits_source,
  input        io_in_d_bits_sink,
               io_in_d_bits_denied,
               io_in_d_bits_corrupt
);

  wire [31:0]  _plusarg_reader_1_out;
  wire [31:0]  _plusarg_reader_out;
  wire [26:0]  _GEN = 27'hFFF << io_in_a_bits_size;
  wire         _GEN_0 = io_in_a_ready & io_in_a_valid;
  reg  [8:0]   a_first_counter;
  reg  [2:0]   opcode;
  reg  [2:0]   param;
  reg  [3:0]   size;
  reg  [4:0]   source;
  reg  [27:0]  address;
  reg  [8:0]   d_first_counter;
  reg  [2:0]   opcode_1;
  reg  [1:0]   param_1;
  reg  [3:0]   size_1;
  reg  [4:0]   source_1;
  reg          sink;
  reg          denied;
  reg  [18:0]  inflight;
  reg  [75:0]  inflight_opcodes;
  reg  [151:0] inflight_sizes;
  reg  [8:0]   a_first_counter_1;
  wire         a_first_1 = a_first_counter_1 == 9'h0;
  reg  [8:0]   d_first_counter_1;
  wire         d_first_1 = d_first_counter_1 == 9'h0;
  wire         _GEN_1 = _GEN_0 & a_first_1;
  wire         d_release_ack = io_in_d_bits_opcode == 3'h6;
  reg  [31:0]  watchdog;
  reg  [18:0]  inflight_1;
  reg  [151:0] inflight_sizes_1;
  reg  [8:0]   d_first_counter_2;
  wire         d_first_2 = d_first_counter_2 == 9'h0;
  reg  [31:0]  watchdog_1;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      automatic logic [7:0][2:0] _GEN_2 =
        '{3'h4, 3'h5, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic [7:0][2:0] _GEN_3 =
        '{3'h4, 3'h4, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic            _GEN_4 = io_in_a_bits_source[4:3] == 2'h0;
      automatic logic            _GEN_5 = io_in_a_bits_source[4:3] == 2'h1;
      automatic logic            _GEN_6 = io_in_a_bits_source == 5'h10;
      automatic logic            _GEN_7 = io_in_a_bits_source == 5'h11;
      automatic logic            _GEN_8 = io_in_a_bits_source == 5'h12;
      automatic logic            source_ok = _GEN_4 | _GEN_5 | _GEN_6 | _GEN_7 | _GEN_8;
      automatic logic [11:0]     _GEN_9 = io_in_a_bits_address[11:0] & ~(_GEN[11:0]);
      automatic logic            _GEN_10 = io_in_a_bits_size > 4'h2;
      automatic logic            mask_size = io_in_a_bits_size[1:0] == 2'h2;
      automatic logic            mask_acc =
        _GEN_10 | mask_size & ~(io_in_a_bits_address[2]);
      automatic logic            mask_acc_1 =
        _GEN_10 | mask_size & io_in_a_bits_address[2];
      automatic logic            mask_size_1 = io_in_a_bits_size[1:0] == 2'h1;
      automatic logic            mask_eq_2 =
        ~(io_in_a_bits_address[2]) & ~(io_in_a_bits_address[1]);
      automatic logic            mask_acc_2 = mask_acc | mask_size_1 & mask_eq_2;
      automatic logic            mask_eq_3 =
        ~(io_in_a_bits_address[2]) & io_in_a_bits_address[1];
      automatic logic            mask_acc_3 = mask_acc | mask_size_1 & mask_eq_3;
      automatic logic            mask_eq_4 =
        io_in_a_bits_address[2] & ~(io_in_a_bits_address[1]);
      automatic logic            mask_acc_4 = mask_acc_1 | mask_size_1 & mask_eq_4;
      automatic logic            mask_eq_5 =
        io_in_a_bits_address[2] & io_in_a_bits_address[1];
      automatic logic            mask_acc_5 = mask_acc_1 | mask_size_1 & mask_eq_5;
      automatic logic [7:0]      mask =
        {mask_acc_5 | mask_eq_5 & io_in_a_bits_address[0],
         mask_acc_5 | mask_eq_5 & ~(io_in_a_bits_address[0]),
         mask_acc_4 | mask_eq_4 & io_in_a_bits_address[0],
         mask_acc_4 | mask_eq_4 & ~(io_in_a_bits_address[0]),
         mask_acc_3 | mask_eq_3 & io_in_a_bits_address[0],
         mask_acc_3 | mask_eq_3 & ~(io_in_a_bits_address[0]),
         mask_acc_2 | mask_eq_2 & io_in_a_bits_address[0],
         mask_acc_2 | mask_eq_2 & ~(io_in_a_bits_address[0])};
      automatic logic            _GEN_11 = io_in_a_bits_size < 4'hD;
      automatic logic            _GEN_12 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_13 = io_in_a_bits_address[27:12] == 16'h0;
      automatic logic            _GEN_14 =
        {io_in_a_bits_address[27:14], ~(io_in_a_bits_address[13:12])} == 16'h0;
      automatic logic            _GEN_15 =
        {io_in_a_bits_address[27:17], ~(io_in_a_bits_address[16])} == 12'h0;
      automatic logic            _GEN_16 =
        {io_in_a_bits_address[27:26], io_in_a_bits_address[25:16] ^ 10'h200} == 12'h0;
      automatic logic            _GEN_17 =
        _GEN_6 & io_in_a_bits_size == 4'h6 & _GEN_11
        & (_GEN_13 | _GEN_14 | _GEN_15 | _GEN_16 | (&(io_in_a_bits_address[27:26])));
      automatic logic            _GEN_18 = io_in_a_bits_param > 3'h2;
      automatic logic            _GEN_19 = io_in_a_bits_mask != 8'hFF;
      automatic logic            _GEN_20 =
        io_in_a_valid & (&io_in_a_bits_opcode) & ~reset;
      automatic logic            _GEN_21 =
        _GEN_11 & (_GEN_4 | _GEN_5 | _GEN_6 | _GEN_7 | _GEN_8);
      automatic logic            _GEN_22 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_23 = _GEN_11 & _GEN_14;
      automatic logic            _GEN_24 = io_in_a_bits_size < 4'h7;
      automatic logic            _GEN_25 = io_in_a_bits_mask != mask;
      automatic logic            _GEN_26 =
        _GEN_21
        & (_GEN_23 | _GEN_24 & (_GEN_13 | _GEN_16 | (&(io_in_a_bits_address[27:26]))));
      automatic logic            _GEN_27 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_28 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_29 = _GEN_21 & io_in_a_bits_size < 4'h4 & _GEN_14;
      automatic logic            _GEN_30 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_31 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h3 & ~reset;
      automatic logic            _GEN_32 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h5 & ~reset;
      automatic logic            source_ok_1 =
        io_in_d_bits_source[4:3] == 2'h0 | io_in_d_bits_source[4:3] == 2'h1
        | io_in_d_bits_source == 5'h10 | io_in_d_bits_source == 5'h11
        | io_in_d_bits_source == 5'h12;
      automatic logic            _GEN_33 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_34 = io_in_d_bits_size < 4'h3;
      automatic logic            _GEN_35 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_36 = io_in_d_bits_param == 2'h2;
      automatic logic            _GEN_37 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h5 & ~reset;
      automatic logic            _GEN_38 = ~io_in_d_bits_denied | io_in_d_bits_corrupt;
      automatic logic            _GEN_39 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_40 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_41 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_42 = io_in_a_valid & (|a_first_counter) & ~reset;
      automatic logic            _GEN_43 = io_in_d_valid & (|d_first_counter) & ~reset;
      automatic logic [75:0]     _GEN_44 =
        inflight_opcodes >> {69'h0, io_in_d_bits_source, 2'h0};
      automatic logic [151:0]    _GEN_45 = {144'h0, io_in_d_bits_source, 3'h0};
      automatic logic            _GEN_46 = io_in_d_valid & d_first_1;
      automatic logic            _GEN_47 = _GEN_46 & ~d_release_ack;
      automatic logic            _GEN_48 = io_in_a_bits_source == io_in_d_bits_source;
      automatic logic            same_cycle_resp = io_in_a_valid & a_first_1 & _GEN_48;
      automatic logic [18:0]     _GEN_49 = {14'h0, io_in_d_bits_source};
      automatic logic            _GEN_50 = _GEN_47 & same_cycle_resp & ~reset;
      automatic logic            _GEN_51 = _GEN_47 & ~same_cycle_resp & ~reset;
      automatic logic [7:0]      _GEN_52 = {4'h0, io_in_d_bits_size};
      automatic logic            _GEN_53 =
        io_in_d_valid & d_first_2 & d_release_ack & ~reset;
      automatic logic [18:0]     _GEN_54 = inflight >> io_in_a_bits_source;
      automatic logic [18:0]     _GEN_55 = inflight >> _GEN_49;
      automatic logic [151:0]    _GEN_56 = inflight_sizes >> _GEN_45;
      automatic logic [18:0]     _GEN_57 = inflight_1 >> _GEN_49;
      automatic logic [151:0]    _GEN_58 = inflight_sizes_1 >> _GEN_45;
      if (_GEN_12) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_12 & ~_GEN_17) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_12 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock carries invalid source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_12 & ~_GEN_10) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_12 & (|_GEN_9)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_12 & _GEN_18) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock carries invalid grow param (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_12 & _GEN_19) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_12 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock is corrupt (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & ~_GEN_17) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm carries invalid source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & ~_GEN_10) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & (|_GEN_9)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & _GEN_18) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm carries invalid grow param (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & ~(|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & _GEN_19) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm is corrupt (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & ~_GEN_21) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22
          & ~(_GEN_23 | _GEN_24
              & (_GEN_13 | _GEN_15 | _GEN_16 | (&(io_in_a_bits_address[27:26]))))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get carries invalid source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & (|_GEN_9)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get address not aligned to size (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get carries invalid param (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & _GEN_25) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get contains invalid mask (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get is corrupt (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & ~_GEN_26) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull carries invalid source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & (|_GEN_9)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull address not aligned to size (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull carries invalid param (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & _GEN_25) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull contains invalid mask (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & ~_GEN_26) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & (|_GEN_9)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial address not aligned to size (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial carries invalid param (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & (|(io_in_a_bits_mask & ~mask))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial contains invalid mask (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & ~_GEN_29) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & (|_GEN_9)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & io_in_a_bits_param > 3'h4) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & _GEN_25) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & ~_GEN_29) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical carries invalid source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & (|_GEN_9)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical address not aligned to size (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & io_in_a_bits_param[2]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical carries invalid opcode param (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & _GEN_25) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical contains invalid mask (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & ~(_GEN_21 & _GEN_23)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint carries invalid source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & (|_GEN_9)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint address not aligned to size (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & (|(io_in_a_bits_param[2:1]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint carries invalid opcode param (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & _GEN_25) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint contains invalid mask (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint is corrupt (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & ~reset & (&io_in_d_bits_opcode)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel has invalid opcode (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_33 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_33 & _GEN_34) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_33 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_33 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck is corrupt (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_33 & io_in_d_bits_denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck is denied (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_35 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_35) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid sink ID (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_35 & _GEN_34) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant smaller than a beat (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_35 & (&io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid cap param (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_35 & _GEN_36) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries toN param (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_35 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant is corrupt (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid sink ID (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & _GEN_34) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData smaller than a beat (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & (&io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid cap param (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & _GEN_36) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries toN param (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & ~_GEN_38) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData is denied but not corrupt (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_39 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_39 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck carries invalid param (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_39 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck is corrupt (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_40 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_40 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData carries invalid param (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_40 & ~_GEN_38) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData is denied but not corrupt (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_41 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck carries invalid source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_41 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck carries invalid param (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_41 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck is corrupt (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & io_in_a_bits_opcode != opcode) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel opcode changed within multibeat operation (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & io_in_a_bits_param != param) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel param changed within multibeat operation (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & io_in_a_bits_size != size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel size changed within multibeat operation (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & io_in_a_bits_source != source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel source changed within multibeat operation (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & io_in_a_bits_address != address) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel address changed with multibeat operation (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & io_in_d_bits_opcode != opcode_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel opcode changed within multibeat operation (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & io_in_d_bits_param != param_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel param changed within multibeat operation (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & io_in_d_bits_size != size_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel size changed within multibeat operation (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & io_in_d_bits_source != source_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel source changed within multibeat operation (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & io_in_d_bits_sink != sink) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel sink changed with multibeat operation (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & io_in_d_bits_denied != denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel denied changed with multibeat operation (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_1 & ~reset & _GEN_54[0]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel re-used a source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_47 & ~reset & ~(_GEN_55[0] | same_cycle_resp)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_50
          & ~(io_in_d_bits_opcode == _GEN_3[io_in_a_bits_opcode]
              | io_in_d_bits_opcode == _GEN_2[io_in_a_bits_opcode])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_50 & io_in_a_bits_size != io_in_d_bits_size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_51
          & ~(io_in_d_bits_opcode == _GEN_3[_GEN_44[3:1]]
              | io_in_d_bits_opcode == _GEN_2[_GEN_44[3:1]])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_51 & _GEN_52 != {1'h0, _GEN_56[7:1]}) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_46 & a_first_1 & io_in_a_valid & _GEN_48 & ~d_release_ack & ~reset
          & ~(~io_in_d_ready | io_in_a_ready)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ready check\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight == 19'h0 | _plusarg_reader_out == 32'h0
              | watchdog < _plusarg_reader_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_53 & ~(_GEN_57[0])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_53 & _GEN_52 != {1'h0, _GEN_58[7:1]}) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight_1 == 19'h0 | _plusarg_reader_1_out == 32'h0
              | watchdog_1 < _plusarg_reader_1_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/subsystem/PeripheryBus.scala:61:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    automatic logic _GEN_59;
    _GEN_59 = io_in_d_ready & io_in_d_valid;
    if (reset) begin
      a_first_counter <= 9'h0;
      d_first_counter <= 9'h0;
      inflight <= 19'h0;
      inflight_opcodes <= 76'h0;
      inflight_sizes <= 152'h0;
      a_first_counter_1 <= 9'h0;
      d_first_counter_1 <= 9'h0;
      watchdog <= 32'h0;
      inflight_1 <= 19'h0;
      inflight_sizes_1 <= 152'h0;
      d_first_counter_2 <= 9'h0;
      watchdog_1 <= 32'h0;
    end
    else begin
      automatic logic         _GEN_60;
      automatic logic [31:0]  _GEN_61 = 32'h1 << io_in_d_bits_source;
      automatic logic [270:0] _GEN_62 = 271'hFF << {263'h0, io_in_d_bits_source, 3'h0};
      automatic logic         _GEN_63;
      automatic logic [31:0]  _GEN_64 = 32'h1 << io_in_a_bits_source;
      automatic logic [270:0] _GEN_65 = 271'hF << {264'h0, io_in_d_bits_source, 2'h0};
      automatic logic [258:0] _GEN_66 =
        {255'h0, _GEN_1 ? {io_in_a_bits_opcode, 1'h1} : 4'h0}
        << {252'h0, io_in_a_bits_source, 2'h0};
      automatic logic [259:0] _GEN_67 =
        {255'h0, _GEN_1 ? {io_in_a_bits_size, 1'h1} : 5'h0}
        << {252'h0, io_in_a_bits_source, 3'h0};
      _GEN_60 = _GEN_59 & d_first_1 & ~d_release_ack;
      _GEN_63 = _GEN_59 & d_first_2 & d_release_ack;
      if (_GEN_0) begin
        if (|a_first_counter)
          a_first_counter <= a_first_counter - 9'h1;
        else if (io_in_a_bits_opcode[2])
          a_first_counter <= 9'h0;
        else
          a_first_counter <= ~(_GEN[11:3]);
        if (a_first_1) begin
          if (io_in_a_bits_opcode[2])
            a_first_counter_1 <= 9'h0;
          else
            a_first_counter_1 <= ~(_GEN[11:3]);
        end
        else
          a_first_counter_1 <= a_first_counter_1 - 9'h1;
      end
      if (_GEN_59) begin
        automatic logic [26:0] _GEN_68 = 27'hFFF << io_in_d_bits_size;
        if (|d_first_counter)
          d_first_counter <= d_first_counter - 9'h1;
        else if (io_in_d_bits_opcode[0])
          d_first_counter <= ~(_GEN_68[11:3]);
        else
          d_first_counter <= 9'h0;
        if (d_first_1) begin
          if (io_in_d_bits_opcode[0])
            d_first_counter_1 <= ~(_GEN_68[11:3]);
          else
            d_first_counter_1 <= 9'h0;
        end
        else
          d_first_counter_1 <= d_first_counter_1 - 9'h1;
        if (d_first_2) begin
          if (io_in_d_bits_opcode[0])
            d_first_counter_2 <= ~(_GEN_68[11:3]);
          else
            d_first_counter_2 <= 9'h0;
        end
        else
          d_first_counter_2 <= d_first_counter_2 - 9'h1;
        watchdog_1 <= 32'h0;
      end
      else
        watchdog_1 <= watchdog_1 + 32'h1;
      inflight <=
        (inflight | (_GEN_1 ? _GEN_64[18:0] : 19'h0))
        & ~(_GEN_60 ? _GEN_61[18:0] : 19'h0);
      inflight_opcodes <=
        (inflight_opcodes | (_GEN_1 ? _GEN_66[75:0] : 76'h0))
        & ~(_GEN_60 ? _GEN_65[75:0] : 76'h0);
      inflight_sizes <=
        (inflight_sizes | (_GEN_1 ? _GEN_67[151:0] : 152'h0))
        & ~(_GEN_60 ? _GEN_62[151:0] : 152'h0);
      if (_GEN_0 | _GEN_59)
        watchdog <= 32'h0;
      else
        watchdog <= watchdog + 32'h1;
      inflight_1 <= inflight_1 & ~(_GEN_63 ? _GEN_61[18:0] : 19'h0);
      inflight_sizes_1 <= inflight_sizes_1 & ~(_GEN_63 ? _GEN_62[151:0] : 152'h0);
    end
    if (_GEN_0 & ~(|a_first_counter)) begin
      opcode <= io_in_a_bits_opcode;
      param <= io_in_a_bits_param;
      size <= io_in_a_bits_size;
      source <= io_in_a_bits_source;
      address <= io_in_a_bits_address;
    end
    if (_GEN_59 & ~(|d_first_counter)) begin
      opcode_1 <= io_in_d_bits_opcode;
      param_1 <= io_in_d_bits_param;
      size_1 <= io_in_d_bits_size;
      source_1 <= io_in_d_bits_source;
      sink <= io_in_d_bits_sink;
      denied <= io_in_d_bits_denied;
    end
  end // always @(posedge)
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader (
    .out (_plusarg_reader_out)
  );
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader_1 (
    .out (_plusarg_reader_1_out)
  );
endmodule

module TLFIFOFixer_3(
  input         clock,
                reset,
                auto_anon_in_a_valid,
  input  [2:0]  auto_anon_in_a_bits_opcode,
                auto_anon_in_a_bits_param,
  input  [3:0]  auto_anon_in_a_bits_size,
  input  [4:0]  auto_anon_in_a_bits_source,
  input  [27:0] auto_anon_in_a_bits_address,
  input  [7:0]  auto_anon_in_a_bits_mask,
  input  [63:0] auto_anon_in_a_bits_data,
  input         auto_anon_in_a_bits_corrupt,
                auto_anon_in_d_ready,
                auto_anon_out_a_ready,
                auto_anon_out_d_valid,
  input  [2:0]  auto_anon_out_d_bits_opcode,
  input  [1:0]  auto_anon_out_d_bits_param,
  input  [3:0]  auto_anon_out_d_bits_size,
  input  [4:0]  auto_anon_out_d_bits_source,
  input         auto_anon_out_d_bits_sink,
                auto_anon_out_d_bits_denied,
  input  [63:0] auto_anon_out_d_bits_data,
  input         auto_anon_out_d_bits_corrupt,
  output        auto_anon_in_a_ready,
                auto_anon_in_d_valid,
  output [2:0]  auto_anon_in_d_bits_opcode,
  output [1:0]  auto_anon_in_d_bits_param,
  output [3:0]  auto_anon_in_d_bits_size,
  output [4:0]  auto_anon_in_d_bits_source,
  output        auto_anon_in_d_bits_sink,
                auto_anon_in_d_bits_denied,
  output [63:0] auto_anon_in_d_bits_data,
  output        auto_anon_in_d_bits_corrupt,
                auto_anon_out_a_valid,
  output [2:0]  auto_anon_out_a_bits_opcode,
                auto_anon_out_a_bits_param,
  output [3:0]  auto_anon_out_a_bits_size,
  output [4:0]  auto_anon_out_a_bits_source,
  output [27:0] auto_anon_out_a_bits_address,
  output [7:0]  auto_anon_out_a_bits_mask,
  output [63:0] auto_anon_out_a_bits_data,
  output        auto_anon_out_a_bits_corrupt,
                auto_anon_out_d_ready
);

  wire [2:0] _GEN =
    {{auto_anon_in_a_bits_address[27],
      auto_anon_in_a_bits_address[25],
      auto_anon_in_a_bits_address[16],
      auto_anon_in_a_bits_address[13]} == 4'h0,
     1'h0,
     {auto_anon_in_a_bits_address[27],
      auto_anon_in_a_bits_address[25],
      auto_anon_in_a_bits_address[16],
      ~(auto_anon_in_a_bits_address[13])} == 4'h0}
    | ({auto_anon_in_a_bits_address[27],
        auto_anon_in_a_bits_address[25],
        ~(auto_anon_in_a_bits_address[16])} == 3'h0
         ? 3'h5
         : 3'h0);
  wire [2:0] a_id =
    {_GEN[2],
     _GEN[1:0]
       | {{auto_anon_in_a_bits_address[27],
           ~(auto_anon_in_a_bits_address[25]),
           auto_anon_in_a_bits_address[16]} == 3'h0,
          1'h0} | {2{auto_anon_in_a_bits_address[27]}}};
  wire       a_noDomain = a_id == 3'h0;
  reg  [8:0] a_first_counter;
  wire       a_first = a_first_counter == 9'h0;
  reg  [8:0] d_first_counter;
  reg        flight_0;
  reg        flight_1;
  reg        flight_2;
  reg        flight_3;
  reg        flight_4;
  reg        flight_5;
  reg        flight_6;
  reg        flight_7;
  reg        flight_8;
  reg        flight_9;
  reg        flight_10;
  reg        flight_11;
  reg        flight_12;
  reg        flight_13;
  reg        flight_14;
  reg        flight_15;
  wire       stalls_a_sel = auto_anon_in_a_bits_source[4:3] == 2'h0;
  reg  [2:0] stalls_id;
  wire       stalls_a_sel_1 = auto_anon_in_a_bits_source[4:3] == 2'h1;
  reg  [2:0] stalls_id_1;
  wire       stall =
    stalls_a_sel & a_first
    & (flight_0 | flight_1 | flight_2 | flight_3 | flight_4 | flight_5 | flight_6
       | flight_7) & (a_noDomain | stalls_id != a_id) | stalls_a_sel_1 & a_first
    & (flight_8 | flight_9 | flight_10 | flight_11 | flight_12 | flight_13 | flight_14
       | flight_15) & (a_noDomain | stalls_id_1 != a_id);
  wire       anonIn_a_ready = auto_anon_out_a_ready & ~stall;
  always @(posedge clock) begin
    automatic logic _GEN_0;
    _GEN_0 = anonIn_a_ready & auto_anon_in_a_valid;
    if (reset) begin
      a_first_counter <= 9'h0;
      d_first_counter <= 9'h0;
      flight_0 <= 1'h0;
      flight_1 <= 1'h0;
      flight_2 <= 1'h0;
      flight_3 <= 1'h0;
      flight_4 <= 1'h0;
      flight_5 <= 1'h0;
      flight_6 <= 1'h0;
      flight_7 <= 1'h0;
      flight_8 <= 1'h0;
      flight_9 <= 1'h0;
      flight_10 <= 1'h0;
      flight_11 <= 1'h0;
      flight_12 <= 1'h0;
      flight_13 <= 1'h0;
      flight_14 <= 1'h0;
      flight_15 <= 1'h0;
    end
    else begin
      automatic logic _GEN_1 = auto_anon_in_d_ready & auto_anon_out_d_valid;
      automatic logic d_first_first;
      automatic logic _GEN_2;
      automatic logic _GEN_3;
      d_first_first = d_first_counter == 9'h0;
      _GEN_2 = a_first & _GEN_0;
      _GEN_3 = d_first_first & auto_anon_out_d_bits_opcode != 3'h6 & _GEN_1;
      if (_GEN_0) begin
        if (a_first) begin
          if (auto_anon_in_a_bits_opcode[2])
            a_first_counter <= 9'h0;
          else begin
            automatic logic [26:0] _GEN_4 = 27'hFFF << auto_anon_in_a_bits_size;
            a_first_counter <= ~(_GEN_4[11:3]);
          end
        end
        else
          a_first_counter <= a_first_counter - 9'h1;
      end
      if (_GEN_1) begin
        if (d_first_first) begin
          if (auto_anon_out_d_bits_opcode[0]) begin
            automatic logic [26:0] _GEN_5 = 27'hFFF << auto_anon_out_d_bits_size;
            d_first_counter <= ~(_GEN_5[11:3]);
          end
          else
            d_first_counter <= 9'h0;
        end
        else
          d_first_counter <= d_first_counter - 9'h1;
      end
      flight_0 <=
        ~(_GEN_3 & auto_anon_out_d_bits_source == 5'h0)
        & (_GEN_2 & auto_anon_in_a_bits_source == 5'h0 | flight_0);
      flight_1 <=
        ~(_GEN_3 & auto_anon_out_d_bits_source == 5'h1)
        & (_GEN_2 & auto_anon_in_a_bits_source == 5'h1 | flight_1);
      flight_2 <=
        ~(_GEN_3 & auto_anon_out_d_bits_source == 5'h2)
        & (_GEN_2 & auto_anon_in_a_bits_source == 5'h2 | flight_2);
      flight_3 <=
        ~(_GEN_3 & auto_anon_out_d_bits_source == 5'h3)
        & (_GEN_2 & auto_anon_in_a_bits_source == 5'h3 | flight_3);
      flight_4 <=
        ~(_GEN_3 & auto_anon_out_d_bits_source == 5'h4)
        & (_GEN_2 & auto_anon_in_a_bits_source == 5'h4 | flight_4);
      flight_5 <=
        ~(_GEN_3 & auto_anon_out_d_bits_source == 5'h5)
        & (_GEN_2 & auto_anon_in_a_bits_source == 5'h5 | flight_5);
      flight_6 <=
        ~(_GEN_3 & auto_anon_out_d_bits_source == 5'h6)
        & (_GEN_2 & auto_anon_in_a_bits_source == 5'h6 | flight_6);
      flight_7 <=
        ~(_GEN_3 & auto_anon_out_d_bits_source == 5'h7)
        & (_GEN_2 & auto_anon_in_a_bits_source == 5'h7 | flight_7);
      flight_8 <=
        ~(_GEN_3 & auto_anon_out_d_bits_source == 5'h8)
        & (_GEN_2 & auto_anon_in_a_bits_source == 5'h8 | flight_8);
      flight_9 <=
        ~(_GEN_3 & auto_anon_out_d_bits_source == 5'h9)
        & (_GEN_2 & auto_anon_in_a_bits_source == 5'h9 | flight_9);
      flight_10 <=
        ~(_GEN_3 & auto_anon_out_d_bits_source == 5'hA)
        & (_GEN_2 & auto_anon_in_a_bits_source == 5'hA | flight_10);
      flight_11 <=
        ~(_GEN_3 & auto_anon_out_d_bits_source == 5'hB)
        & (_GEN_2 & auto_anon_in_a_bits_source == 5'hB | flight_11);
      flight_12 <=
        ~(_GEN_3 & auto_anon_out_d_bits_source == 5'hC)
        & (_GEN_2 & auto_anon_in_a_bits_source == 5'hC | flight_12);
      flight_13 <=
        ~(_GEN_3 & auto_anon_out_d_bits_source == 5'hD)
        & (_GEN_2 & auto_anon_in_a_bits_source == 5'hD | flight_13);
      flight_14 <=
        ~(_GEN_3 & auto_anon_out_d_bits_source == 5'hE)
        & (_GEN_2 & auto_anon_in_a_bits_source == 5'hE | flight_14);
      flight_15 <=
        ~(_GEN_3 & auto_anon_out_d_bits_source == 5'hF)
        & (_GEN_2 & auto_anon_in_a_bits_source == 5'hF | flight_15);
    end
    if (_GEN_0 & stalls_a_sel)
      stalls_id <= a_id;
    if (_GEN_0 & stalls_a_sel_1)
      stalls_id_1 <= a_id;
  end // always @(posedge)
  TLMonitor_8 monitor (
    .clock                (clock),
    .reset                (reset),
    .io_in_a_ready        (anonIn_a_ready),
    .io_in_a_valid        (auto_anon_in_a_valid),
    .io_in_a_bits_opcode  (auto_anon_in_a_bits_opcode),
    .io_in_a_bits_param   (auto_anon_in_a_bits_param),
    .io_in_a_bits_size    (auto_anon_in_a_bits_size),
    .io_in_a_bits_source  (auto_anon_in_a_bits_source),
    .io_in_a_bits_address (auto_anon_in_a_bits_address),
    .io_in_a_bits_mask    (auto_anon_in_a_bits_mask),
    .io_in_a_bits_corrupt (auto_anon_in_a_bits_corrupt),
    .io_in_d_ready        (auto_anon_in_d_ready),
    .io_in_d_valid        (auto_anon_out_d_valid),
    .io_in_d_bits_opcode  (auto_anon_out_d_bits_opcode),
    .io_in_d_bits_param   (auto_anon_out_d_bits_param),
    .io_in_d_bits_size    (auto_anon_out_d_bits_size),
    .io_in_d_bits_source  (auto_anon_out_d_bits_source),
    .io_in_d_bits_sink    (auto_anon_out_d_bits_sink),
    .io_in_d_bits_denied  (auto_anon_out_d_bits_denied),
    .io_in_d_bits_corrupt (auto_anon_out_d_bits_corrupt)
  );
  assign auto_anon_in_a_ready = anonIn_a_ready;
  assign auto_anon_in_d_valid = auto_anon_out_d_valid;
  assign auto_anon_in_d_bits_opcode = auto_anon_out_d_bits_opcode;
  assign auto_anon_in_d_bits_param = auto_anon_out_d_bits_param;
  assign auto_anon_in_d_bits_size = auto_anon_out_d_bits_size;
  assign auto_anon_in_d_bits_source = auto_anon_out_d_bits_source;
  assign auto_anon_in_d_bits_sink = auto_anon_out_d_bits_sink;
  assign auto_anon_in_d_bits_denied = auto_anon_out_d_bits_denied;
  assign auto_anon_in_d_bits_data = auto_anon_out_d_bits_data;
  assign auto_anon_in_d_bits_corrupt = auto_anon_out_d_bits_corrupt;
  assign auto_anon_out_a_valid = auto_anon_in_a_valid & ~stall;
  assign auto_anon_out_a_bits_opcode = auto_anon_in_a_bits_opcode;
  assign auto_anon_out_a_bits_param = auto_anon_in_a_bits_param;
  assign auto_anon_out_a_bits_size = auto_anon_in_a_bits_size;
  assign auto_anon_out_a_bits_source = auto_anon_in_a_bits_source;
  assign auto_anon_out_a_bits_address = auto_anon_in_a_bits_address;
  assign auto_anon_out_a_bits_mask = auto_anon_in_a_bits_mask;
  assign auto_anon_out_a_bits_data = auto_anon_in_a_bits_data;
  assign auto_anon_out_a_bits_corrupt = auto_anon_in_a_bits_corrupt;
  assign auto_anon_out_d_ready = auto_anon_in_d_ready;
endmodule

module TLMonitor_9(
  input        clock,
               reset,
               io_in_a_ready,
               io_in_a_valid,
  input [2:0]  io_in_a_bits_opcode,
               io_in_a_bits_param,
  input [3:0]  io_in_a_bits_size,
  input [4:0]  io_in_a_bits_source,
  input [27:0] io_in_a_bits_address,
  input [7:0]  io_in_a_bits_mask,
  input        io_in_a_bits_corrupt,
               io_in_d_ready,
               io_in_d_valid,
  input [2:0]  io_in_d_bits_opcode,
  input [1:0]  io_in_d_bits_param,
  input [3:0]  io_in_d_bits_size,
  input [4:0]  io_in_d_bits_source,
  input        io_in_d_bits_sink,
               io_in_d_bits_denied,
               io_in_d_bits_corrupt
);

  wire [31:0]  _plusarg_reader_1_out;
  wire [31:0]  _plusarg_reader_out;
  wire [26:0]  _GEN = 27'hFFF << io_in_a_bits_size;
  wire         _GEN_0 = io_in_a_ready & io_in_a_valid;
  reg  [8:0]   a_first_counter;
  reg  [2:0]   opcode;
  reg  [2:0]   param;
  reg  [3:0]   size;
  reg  [4:0]   source;
  reg  [27:0]  address;
  reg  [8:0]   d_first_counter;
  reg  [2:0]   opcode_1;
  reg  [1:0]   param_1;
  reg  [3:0]   size_1;
  reg  [4:0]   source_1;
  reg          sink;
  reg          denied;
  reg  [18:0]  inflight;
  reg  [75:0]  inflight_opcodes;
  reg  [151:0] inflight_sizes;
  reg  [8:0]   a_first_counter_1;
  wire         a_first_1 = a_first_counter_1 == 9'h0;
  reg  [8:0]   d_first_counter_1;
  wire         d_first_1 = d_first_counter_1 == 9'h0;
  wire         _GEN_1 = _GEN_0 & a_first_1;
  wire         d_release_ack = io_in_d_bits_opcode == 3'h6;
  reg  [31:0]  watchdog;
  reg  [18:0]  inflight_1;
  reg  [151:0] inflight_sizes_1;
  reg  [8:0]   d_first_counter_2;
  wire         d_first_2 = d_first_counter_2 == 9'h0;
  reg  [31:0]  watchdog_1;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      automatic logic [7:0][2:0] _GEN_2 =
        '{3'h4, 3'h5, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic [7:0][2:0] _GEN_3 =
        '{3'h4, 3'h4, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic            _GEN_4 = io_in_a_bits_source[4:3] == 2'h0;
      automatic logic            _GEN_5 = io_in_a_bits_source[4:3] == 2'h1;
      automatic logic            _GEN_6 = io_in_a_bits_source == 5'h10;
      automatic logic            _GEN_7 = io_in_a_bits_source == 5'h11;
      automatic logic            _GEN_8 = io_in_a_bits_source == 5'h12;
      automatic logic            source_ok = _GEN_4 | _GEN_5 | _GEN_6 | _GEN_7 | _GEN_8;
      automatic logic [11:0]     _GEN_9 = io_in_a_bits_address[11:0] & ~(_GEN[11:0]);
      automatic logic            _GEN_10 = io_in_a_bits_size > 4'h2;
      automatic logic            mask_size = io_in_a_bits_size[1:0] == 2'h2;
      automatic logic            mask_acc =
        _GEN_10 | mask_size & ~(io_in_a_bits_address[2]);
      automatic logic            mask_acc_1 =
        _GEN_10 | mask_size & io_in_a_bits_address[2];
      automatic logic            mask_size_1 = io_in_a_bits_size[1:0] == 2'h1;
      automatic logic            mask_eq_2 =
        ~(io_in_a_bits_address[2]) & ~(io_in_a_bits_address[1]);
      automatic logic            mask_acc_2 = mask_acc | mask_size_1 & mask_eq_2;
      automatic logic            mask_eq_3 =
        ~(io_in_a_bits_address[2]) & io_in_a_bits_address[1];
      automatic logic            mask_acc_3 = mask_acc | mask_size_1 & mask_eq_3;
      automatic logic            mask_eq_4 =
        io_in_a_bits_address[2] & ~(io_in_a_bits_address[1]);
      automatic logic            mask_acc_4 = mask_acc_1 | mask_size_1 & mask_eq_4;
      automatic logic            mask_eq_5 =
        io_in_a_bits_address[2] & io_in_a_bits_address[1];
      automatic logic            mask_acc_5 = mask_acc_1 | mask_size_1 & mask_eq_5;
      automatic logic [7:0]      mask =
        {mask_acc_5 | mask_eq_5 & io_in_a_bits_address[0],
         mask_acc_5 | mask_eq_5 & ~(io_in_a_bits_address[0]),
         mask_acc_4 | mask_eq_4 & io_in_a_bits_address[0],
         mask_acc_4 | mask_eq_4 & ~(io_in_a_bits_address[0]),
         mask_acc_3 | mask_eq_3 & io_in_a_bits_address[0],
         mask_acc_3 | mask_eq_3 & ~(io_in_a_bits_address[0]),
         mask_acc_2 | mask_eq_2 & io_in_a_bits_address[0],
         mask_acc_2 | mask_eq_2 & ~(io_in_a_bits_address[0])};
      automatic logic            _GEN_11 = io_in_a_bits_size < 4'hD;
      automatic logic            _GEN_12 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_13 = io_in_a_bits_address[27:12] == 16'h0;
      automatic logic            _GEN_14 =
        {io_in_a_bits_address[27:14], ~(io_in_a_bits_address[13:12])} == 16'h0;
      automatic logic            _GEN_15 =
        {io_in_a_bits_address[27:17], ~(io_in_a_bits_address[16])} == 12'h0;
      automatic logic            _GEN_16 =
        {io_in_a_bits_address[27:26], io_in_a_bits_address[25:16] ^ 10'h200} == 12'h0;
      automatic logic            _GEN_17 =
        _GEN_6 & io_in_a_bits_size == 4'h6 & _GEN_11
        & (_GEN_13 | _GEN_14 | _GEN_15 | _GEN_16 | (&(io_in_a_bits_address[27:26])));
      automatic logic            _GEN_18 = io_in_a_bits_param > 3'h2;
      automatic logic            _GEN_19 = io_in_a_bits_mask != 8'hFF;
      automatic logic            _GEN_20 =
        io_in_a_valid & (&io_in_a_bits_opcode) & ~reset;
      automatic logic            _GEN_21 =
        _GEN_11 & (_GEN_4 | _GEN_5 | _GEN_6 | _GEN_7 | _GEN_8);
      automatic logic            _GEN_22 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_23 = _GEN_11 & _GEN_14;
      automatic logic            _GEN_24 = io_in_a_bits_size < 4'h7;
      automatic logic            _GEN_25 = io_in_a_bits_mask != mask;
      automatic logic            _GEN_26 =
        _GEN_21
        & (_GEN_23 | _GEN_24 & (_GEN_13 | _GEN_16 | (&(io_in_a_bits_address[27:26]))));
      automatic logic            _GEN_27 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_28 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_29 = _GEN_21 & io_in_a_bits_size < 4'h4 & _GEN_14;
      automatic logic            _GEN_30 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_31 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h3 & ~reset;
      automatic logic            _GEN_32 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h5 & ~reset;
      automatic logic            source_ok_1 =
        io_in_d_bits_source[4:3] == 2'h0 | io_in_d_bits_source[4:3] == 2'h1
        | io_in_d_bits_source == 5'h10 | io_in_d_bits_source == 5'h11
        | io_in_d_bits_source == 5'h12;
      automatic logic            _GEN_33 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_34 = io_in_d_bits_size < 4'h3;
      automatic logic            _GEN_35 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_36 = io_in_d_bits_param == 2'h2;
      automatic logic            _GEN_37 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h5 & ~reset;
      automatic logic            _GEN_38 = ~io_in_d_bits_denied | io_in_d_bits_corrupt;
      automatic logic            _GEN_39 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_40 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_41 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_42 = io_in_a_valid & (|a_first_counter) & ~reset;
      automatic logic            _GEN_43 = io_in_d_valid & (|d_first_counter) & ~reset;
      automatic logic [75:0]     _GEN_44 =
        inflight_opcodes >> {69'h0, io_in_d_bits_source, 2'h0};
      automatic logic [151:0]    _GEN_45 = {144'h0, io_in_d_bits_source, 3'h0};
      automatic logic            _GEN_46 = io_in_d_valid & d_first_1;
      automatic logic            _GEN_47 = _GEN_46 & ~d_release_ack;
      automatic logic            _GEN_48 = io_in_a_bits_source == io_in_d_bits_source;
      automatic logic            same_cycle_resp = io_in_a_valid & a_first_1 & _GEN_48;
      automatic logic [18:0]     _GEN_49 = {14'h0, io_in_d_bits_source};
      automatic logic            _GEN_50 = _GEN_47 & same_cycle_resp & ~reset;
      automatic logic            _GEN_51 = _GEN_47 & ~same_cycle_resp & ~reset;
      automatic logic [7:0]      _GEN_52 = {4'h0, io_in_d_bits_size};
      automatic logic            _GEN_53 =
        io_in_d_valid & d_first_2 & d_release_ack & ~reset;
      automatic logic [18:0]     _GEN_54 = inflight >> io_in_a_bits_source;
      automatic logic [18:0]     _GEN_55 = inflight >> _GEN_49;
      automatic logic [151:0]    _GEN_56 = inflight_sizes >> _GEN_45;
      automatic logic [18:0]     _GEN_57 = inflight_1 >> _GEN_49;
      automatic logic [151:0]    _GEN_58 = inflight_sizes_1 >> _GEN_45;
      if (_GEN_12) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_12 & ~_GEN_17) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_12 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock carries invalid source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_12 & ~_GEN_10) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_12 & (|_GEN_9)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_12 & _GEN_18) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock carries invalid grow param (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_12 & _GEN_19) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_12 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock is corrupt (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & ~_GEN_17) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm carries invalid source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & ~_GEN_10) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & (|_GEN_9)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & _GEN_18) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm carries invalid grow param (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & ~(|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & _GEN_19) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm is corrupt (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & ~_GEN_21) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22
          & ~(_GEN_23 | _GEN_24
              & (_GEN_13 | _GEN_15 | _GEN_16 | (&(io_in_a_bits_address[27:26]))))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get carries invalid source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & (|_GEN_9)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get address not aligned to size (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get carries invalid param (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & _GEN_25) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get contains invalid mask (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get is corrupt (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & ~_GEN_26) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull carries invalid source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & (|_GEN_9)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull address not aligned to size (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull carries invalid param (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & _GEN_25) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull contains invalid mask (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & ~_GEN_26) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & (|_GEN_9)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial address not aligned to size (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial carries invalid param (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & (|(io_in_a_bits_mask & ~mask))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial contains invalid mask (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & ~_GEN_29) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & (|_GEN_9)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & io_in_a_bits_param > 3'h4) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & _GEN_25) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & ~_GEN_29) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical carries invalid source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & (|_GEN_9)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical address not aligned to size (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & io_in_a_bits_param[2]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical carries invalid opcode param (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & _GEN_25) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical contains invalid mask (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & ~(_GEN_21 & _GEN_23)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint carries invalid source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & (|_GEN_9)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint address not aligned to size (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & (|(io_in_a_bits_param[2:1]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint carries invalid opcode param (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & _GEN_25) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint contains invalid mask (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint is corrupt (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & ~reset & (&io_in_d_bits_opcode)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel has invalid opcode (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_33 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_33 & _GEN_34) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_33 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_33 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck is corrupt (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_33 & io_in_d_bits_denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck is denied (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_35 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_35) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid sink ID (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_35 & _GEN_34) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant smaller than a beat (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_35 & (&io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid cap param (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_35 & _GEN_36) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries toN param (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_35 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant is corrupt (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid sink ID (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & _GEN_34) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData smaller than a beat (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & (&io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid cap param (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & _GEN_36) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries toN param (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & ~_GEN_38) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData is denied but not corrupt (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_39 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_39 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck carries invalid param (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_39 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck is corrupt (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_40 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_40 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData carries invalid param (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_40 & ~_GEN_38) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData is denied but not corrupt (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_41 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck carries invalid source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_41 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck carries invalid param (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_41 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck is corrupt (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & io_in_a_bits_opcode != opcode) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel opcode changed within multibeat operation (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & io_in_a_bits_param != param) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel param changed within multibeat operation (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & io_in_a_bits_size != size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel size changed within multibeat operation (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & io_in_a_bits_source != source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel source changed within multibeat operation (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & io_in_a_bits_address != address) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel address changed with multibeat operation (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & io_in_d_bits_opcode != opcode_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel opcode changed within multibeat operation (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & io_in_d_bits_param != param_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel param changed within multibeat operation (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & io_in_d_bits_size != size_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel size changed within multibeat operation (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & io_in_d_bits_source != source_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel source changed within multibeat operation (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & io_in_d_bits_sink != sink) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel sink changed with multibeat operation (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & io_in_d_bits_denied != denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel denied changed with multibeat operation (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_1 & ~reset & _GEN_54[0]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel re-used a source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_47 & ~reset & ~(_GEN_55[0] | same_cycle_resp)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_50
          & ~(io_in_d_bits_opcode == _GEN_3[io_in_a_bits_opcode]
              | io_in_d_bits_opcode == _GEN_2[io_in_a_bits_opcode])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_50 & io_in_a_bits_size != io_in_d_bits_size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_51
          & ~(io_in_d_bits_opcode == _GEN_3[_GEN_44[3:1]]
              | io_in_d_bits_opcode == _GEN_2[_GEN_44[3:1]])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_51 & _GEN_52 != {1'h0, _GEN_56[7:1]}) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_46 & a_first_1 & io_in_a_valid & _GEN_48 & ~d_release_ack & ~reset
          & ~(~io_in_d_ready | io_in_a_ready)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ready check\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight == 19'h0 | _plusarg_reader_out == 32'h0
              | watchdog < _plusarg_reader_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_53 & ~(_GEN_57[0])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_53 & _GEN_52 != {1'h0, _GEN_58[7:1]}) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight_1 == 19'h0 | _plusarg_reader_1_out == 32'h0
              | watchdog_1 < _plusarg_reader_1_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/subsystem/PeripheryBus.scala:60:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    automatic logic _GEN_59;
    _GEN_59 = io_in_d_ready & io_in_d_valid;
    if (reset) begin
      a_first_counter <= 9'h0;
      d_first_counter <= 9'h0;
      inflight <= 19'h0;
      inflight_opcodes <= 76'h0;
      inflight_sizes <= 152'h0;
      a_first_counter_1 <= 9'h0;
      d_first_counter_1 <= 9'h0;
      watchdog <= 32'h0;
      inflight_1 <= 19'h0;
      inflight_sizes_1 <= 152'h0;
      d_first_counter_2 <= 9'h0;
      watchdog_1 <= 32'h0;
    end
    else begin
      automatic logic         _GEN_60;
      automatic logic [31:0]  _GEN_61 = 32'h1 << io_in_d_bits_source;
      automatic logic [270:0] _GEN_62 = 271'hFF << {263'h0, io_in_d_bits_source, 3'h0};
      automatic logic         _GEN_63;
      automatic logic [31:0]  _GEN_64 = 32'h1 << io_in_a_bits_source;
      automatic logic [270:0] _GEN_65 = 271'hF << {264'h0, io_in_d_bits_source, 2'h0};
      automatic logic [258:0] _GEN_66 =
        {255'h0, _GEN_1 ? {io_in_a_bits_opcode, 1'h1} : 4'h0}
        << {252'h0, io_in_a_bits_source, 2'h0};
      automatic logic [259:0] _GEN_67 =
        {255'h0, _GEN_1 ? {io_in_a_bits_size, 1'h1} : 5'h0}
        << {252'h0, io_in_a_bits_source, 3'h0};
      _GEN_60 = _GEN_59 & d_first_1 & ~d_release_ack;
      _GEN_63 = _GEN_59 & d_first_2 & d_release_ack;
      if (_GEN_0) begin
        if (|a_first_counter)
          a_first_counter <= a_first_counter - 9'h1;
        else if (io_in_a_bits_opcode[2])
          a_first_counter <= 9'h0;
        else
          a_first_counter <= ~(_GEN[11:3]);
        if (a_first_1) begin
          if (io_in_a_bits_opcode[2])
            a_first_counter_1 <= 9'h0;
          else
            a_first_counter_1 <= ~(_GEN[11:3]);
        end
        else
          a_first_counter_1 <= a_first_counter_1 - 9'h1;
      end
      if (_GEN_59) begin
        automatic logic [26:0] _GEN_68 = 27'hFFF << io_in_d_bits_size;
        if (|d_first_counter)
          d_first_counter <= d_first_counter - 9'h1;
        else if (io_in_d_bits_opcode[0])
          d_first_counter <= ~(_GEN_68[11:3]);
        else
          d_first_counter <= 9'h0;
        if (d_first_1) begin
          if (io_in_d_bits_opcode[0])
            d_first_counter_1 <= ~(_GEN_68[11:3]);
          else
            d_first_counter_1 <= 9'h0;
        end
        else
          d_first_counter_1 <= d_first_counter_1 - 9'h1;
        if (d_first_2) begin
          if (io_in_d_bits_opcode[0])
            d_first_counter_2 <= ~(_GEN_68[11:3]);
          else
            d_first_counter_2 <= 9'h0;
        end
        else
          d_first_counter_2 <= d_first_counter_2 - 9'h1;
        watchdog_1 <= 32'h0;
      end
      else
        watchdog_1 <= watchdog_1 + 32'h1;
      inflight <=
        (inflight | (_GEN_1 ? _GEN_64[18:0] : 19'h0))
        & ~(_GEN_60 ? _GEN_61[18:0] : 19'h0);
      inflight_opcodes <=
        (inflight_opcodes | (_GEN_1 ? _GEN_66[75:0] : 76'h0))
        & ~(_GEN_60 ? _GEN_65[75:0] : 76'h0);
      inflight_sizes <=
        (inflight_sizes | (_GEN_1 ? _GEN_67[151:0] : 152'h0))
        & ~(_GEN_60 ? _GEN_62[151:0] : 152'h0);
      if (_GEN_0 | _GEN_59)
        watchdog <= 32'h0;
      else
        watchdog <= watchdog + 32'h1;
      inflight_1 <= inflight_1 & ~(_GEN_63 ? _GEN_61[18:0] : 19'h0);
      inflight_sizes_1 <= inflight_sizes_1 & ~(_GEN_63 ? _GEN_62[151:0] : 152'h0);
    end
    if (_GEN_0 & ~(|a_first_counter)) begin
      opcode <= io_in_a_bits_opcode;
      param <= io_in_a_bits_param;
      size <= io_in_a_bits_size;
      source <= io_in_a_bits_source;
      address <= io_in_a_bits_address;
    end
    if (_GEN_59 & ~(|d_first_counter)) begin
      opcode_1 <= io_in_d_bits_opcode;
      param_1 <= io_in_d_bits_param;
      size_1 <= io_in_d_bits_size;
      source_1 <= io_in_d_bits_source;
      sink <= io_in_d_bits_sink;
      denied <= io_in_d_bits_denied;
    end
  end // always @(posedge)
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader (
    .out (_plusarg_reader_out)
  );
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader_1 (
    .out (_plusarg_reader_1_out)
  );
endmodule

module TLXbar_cbus_out_i1_o5_a28d64s5k1z4u(
  input         clock,
                reset,
                auto_anon_in_a_valid,
  input  [2:0]  auto_anon_in_a_bits_opcode,
                auto_anon_in_a_bits_param,
  input  [3:0]  auto_anon_in_a_bits_size,
  input  [4:0]  auto_anon_in_a_bits_source,
  input  [27:0] auto_anon_in_a_bits_address,
  input  [7:0]  auto_anon_in_a_bits_mask,
  input  [63:0] auto_anon_in_a_bits_data,
  input         auto_anon_in_a_bits_corrupt,
                auto_anon_in_d_ready,
                auto_anon_out_4_a_ready,
                auto_anon_out_4_d_valid,
  input  [2:0]  auto_anon_out_4_d_bits_size,
  input  [4:0]  auto_anon_out_4_d_bits_source,
  input  [63:0] auto_anon_out_4_d_bits_data,
  input         auto_anon_out_3_a_ready,
                auto_anon_out_3_d_valid,
  input  [2:0]  auto_anon_out_3_d_bits_opcode,
                auto_anon_out_3_d_bits_size,
  input  [4:0]  auto_anon_out_3_d_bits_source,
  input  [63:0] auto_anon_out_3_d_bits_data,
  input         auto_anon_out_2_a_ready,
                auto_anon_out_2_d_valid,
  input  [2:0]  auto_anon_out_2_d_bits_opcode,
                auto_anon_out_2_d_bits_size,
  input  [4:0]  auto_anon_out_2_d_bits_source,
  input  [63:0] auto_anon_out_2_d_bits_data,
  input         auto_anon_out_1_a_ready,
                auto_anon_out_1_d_valid,
  input  [2:0]  auto_anon_out_1_d_bits_opcode,
                auto_anon_out_1_d_bits_size,
  input  [4:0]  auto_anon_out_1_d_bits_source,
  input  [63:0] auto_anon_out_1_d_bits_data,
  input         auto_anon_out_0_a_ready,
                auto_anon_out_0_d_valid,
  input  [2:0]  auto_anon_out_0_d_bits_opcode,
  input  [1:0]  auto_anon_out_0_d_bits_param,
  input  [3:0]  auto_anon_out_0_d_bits_size,
  input  [4:0]  auto_anon_out_0_d_bits_source,
  input         auto_anon_out_0_d_bits_sink,
                auto_anon_out_0_d_bits_denied,
  input  [63:0] auto_anon_out_0_d_bits_data,
  input         auto_anon_out_0_d_bits_corrupt,
  output        auto_anon_in_a_ready,
                auto_anon_in_d_valid,
  output [2:0]  auto_anon_in_d_bits_opcode,
  output [1:0]  auto_anon_in_d_bits_param,
  output [3:0]  auto_anon_in_d_bits_size,
  output [4:0]  auto_anon_in_d_bits_source,
  output        auto_anon_in_d_bits_sink,
                auto_anon_in_d_bits_denied,
  output [63:0] auto_anon_in_d_bits_data,
  output        auto_anon_in_d_bits_corrupt,
                auto_anon_out_4_a_valid,
  output [2:0]  auto_anon_out_4_a_bits_opcode,
                auto_anon_out_4_a_bits_param,
                auto_anon_out_4_a_bits_size,
  output [4:0]  auto_anon_out_4_a_bits_source,
  output [16:0] auto_anon_out_4_a_bits_address,
  output [7:0]  auto_anon_out_4_a_bits_mask,
  output        auto_anon_out_4_a_bits_corrupt,
                auto_anon_out_4_d_ready,
                auto_anon_out_3_a_valid,
  output [2:0]  auto_anon_out_3_a_bits_opcode,
                auto_anon_out_3_a_bits_param,
                auto_anon_out_3_a_bits_size,
  output [4:0]  auto_anon_out_3_a_bits_source,
  output [11:0] auto_anon_out_3_a_bits_address,
  output [7:0]  auto_anon_out_3_a_bits_mask,
  output [63:0] auto_anon_out_3_a_bits_data,
  output        auto_anon_out_3_a_bits_corrupt,
                auto_anon_out_3_d_ready,
                auto_anon_out_2_a_valid,
  output [2:0]  auto_anon_out_2_a_bits_opcode,
                auto_anon_out_2_a_bits_param,
                auto_anon_out_2_a_bits_size,
  output [4:0]  auto_anon_out_2_a_bits_source,
  output [27:0] auto_anon_out_2_a_bits_address,
  output [7:0]  auto_anon_out_2_a_bits_mask,
  output [63:0] auto_anon_out_2_a_bits_data,
  output        auto_anon_out_2_a_bits_corrupt,
                auto_anon_out_2_d_ready,
                auto_anon_out_1_a_valid,
  output [2:0]  auto_anon_out_1_a_bits_opcode,
                auto_anon_out_1_a_bits_param,
                auto_anon_out_1_a_bits_size,
  output [4:0]  auto_anon_out_1_a_bits_source,
  output [25:0] auto_anon_out_1_a_bits_address,
  output [7:0]  auto_anon_out_1_a_bits_mask,
  output [63:0] auto_anon_out_1_a_bits_data,
  output        auto_anon_out_1_a_bits_corrupt,
                auto_anon_out_1_d_ready,
                auto_anon_out_0_a_valid,
  output [2:0]  auto_anon_out_0_a_bits_opcode,
                auto_anon_out_0_a_bits_param,
  output [3:0]  auto_anon_out_0_a_bits_size,
  output [4:0]  auto_anon_out_0_a_bits_source,
  output [13:0] auto_anon_out_0_a_bits_address,
  output [7:0]  auto_anon_out_0_a_bits_mask,
  output [63:0] auto_anon_out_0_a_bits_data,
  output        auto_anon_out_0_a_bits_corrupt,
                auto_anon_out_0_d_ready
);

  wire       requestAIO_0_0 =
    {auto_anon_in_a_bits_address[27],
     auto_anon_in_a_bits_address[25],
     auto_anon_in_a_bits_address[16],
     ~(auto_anon_in_a_bits_address[13])} == 4'h0;
  wire       requestAIO_0_1 =
    {auto_anon_in_a_bits_address[27],
     ~(auto_anon_in_a_bits_address[25]),
     auto_anon_in_a_bits_address[16]} == 3'h0;
  wire       requestAIO_0_3 =
    {auto_anon_in_a_bits_address[27],
     auto_anon_in_a_bits_address[25],
     auto_anon_in_a_bits_address[16],
     auto_anon_in_a_bits_address[13]} == 4'h0;
  wire       requestAIO_0_4 =
    {auto_anon_in_a_bits_address[27],
     auto_anon_in_a_bits_address[25],
     ~(auto_anon_in_a_bits_address[16])} == 3'h0;
  wire       in_0_a_ready =
    requestAIO_0_0 & auto_anon_out_0_a_ready | requestAIO_0_1 & auto_anon_out_1_a_ready
    | auto_anon_in_a_bits_address[27] & auto_anon_out_2_a_ready | requestAIO_0_3
    & auto_anon_out_3_a_ready | requestAIO_0_4 & auto_anon_out_4_a_ready;
  reg  [8:0] beatsLeft;
  wire       idle = beatsLeft == 9'h0;
  wire [4:0] readys_valid =
    {auto_anon_out_4_d_valid,
     auto_anon_out_3_d_valid,
     auto_anon_out_2_d_valid,
     auto_anon_out_1_d_valid,
     auto_anon_out_0_d_valid};
  reg  [4:0] readys_mask;
  wire [4:0] _GEN = readys_valid & ~readys_mask;
  wire [7:0] _GEN_0 =
    {_GEN[3:0],
     auto_anon_out_4_d_valid,
     auto_anon_out_3_d_valid,
     auto_anon_out_2_d_valid,
     auto_anon_out_1_d_valid}
    | {_GEN, auto_anon_out_4_d_valid, auto_anon_out_3_d_valid, auto_anon_out_2_d_valid};
  wire [6:0] _GEN_1 = _GEN_0[6:0] | {_GEN[4], _GEN_0[7:2]};
  wire [4:0] readys_readys =
    ~({readys_mask[4],
       _GEN[4] | readys_mask[3],
       _GEN_0[7] | readys_mask[2],
       _GEN_1[6:5] | readys_mask[1:0]}
      & (_GEN_1[4:0] | {_GEN[4], _GEN_0[7], _GEN_1[6:4]}));
  wire       winner_0 = readys_readys[0] & auto_anon_out_0_d_valid;
  wire       winner_1 = readys_readys[1] & auto_anon_out_1_d_valid;
  wire       winner_2 = readys_readys[2] & auto_anon_out_2_d_valid;
  wire       winner_3 = readys_readys[3] & auto_anon_out_3_d_valid;
  wire       winner_4 = readys_readys[4] & auto_anon_out_4_d_valid;
  wire       _GEN_2 =
    auto_anon_out_0_d_valid | auto_anon_out_1_d_valid | auto_anon_out_2_d_valid
    | auto_anon_out_3_d_valid | auto_anon_out_4_d_valid;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      automatic logic prefixOR_2 = winner_0 | winner_1;
      automatic logic prefixOR_3 = prefixOR_2 | winner_2;
      if (~reset
          & ~((~winner_0 | ~winner_1) & (~prefixOR_2 | ~winner_2)
              & (~prefixOR_3 | ~winner_3) & (~(prefixOR_3 | winner_3) | ~winner_4))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Arbiter.scala:77 assert((prefixOR zip winner) map { case (p,w) => !p || !w } reduce {_ && _})\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(~_GEN_2 | winner_0 | winner_1 | winner_2 | winner_3 | winner_4)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Arbiter.scala:79 assert (!valids.reduce(_||_) || winner.reduce(_||_))\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  reg        state_0;
  reg        state_1;
  reg        state_2;
  reg        state_3;
  reg        state_4;
  wire       muxState_0 = idle ? winner_0 : state_0;
  wire       muxState_1 = idle ? winner_1 : state_1;
  wire       muxState_2 = idle ? winner_2 : state_2;
  wire       muxState_3 = idle ? winner_3 : state_3;
  wire       muxState_4 = idle ? winner_4 : state_4;
  wire       in_0_d_valid =
    idle
      ? _GEN_2
      : state_0 & auto_anon_out_0_d_valid | state_1 & auto_anon_out_1_d_valid | state_2
        & auto_anon_out_2_d_valid | state_3 & auto_anon_out_3_d_valid | state_4
        & auto_anon_out_4_d_valid;
  wire       in_0_d_bits_corrupt = muxState_0 & auto_anon_out_0_d_bits_corrupt;
  wire       in_0_d_bits_denied = muxState_0 & auto_anon_out_0_d_bits_denied;
  wire       in_0_d_bits_sink = muxState_0 & auto_anon_out_0_d_bits_sink;
  wire [4:0] in_0_d_bits_source =
    (muxState_0 ? auto_anon_out_0_d_bits_source : 5'h0)
    | (muxState_1 ? auto_anon_out_1_d_bits_source : 5'h0)
    | (muxState_2 ? auto_anon_out_2_d_bits_source : 5'h0)
    | (muxState_3 ? auto_anon_out_3_d_bits_source : 5'h0)
    | (muxState_4 ? auto_anon_out_4_d_bits_source : 5'h0);
  wire [3:0] in_0_d_bits_size =
    (muxState_0 ? auto_anon_out_0_d_bits_size : 4'h0)
    | (muxState_1 ? {1'h0, auto_anon_out_1_d_bits_size} : 4'h0)
    | (muxState_2 ? {1'h0, auto_anon_out_2_d_bits_size} : 4'h0)
    | (muxState_3 ? {1'h0, auto_anon_out_3_d_bits_size} : 4'h0)
    | (muxState_4 ? {1'h0, auto_anon_out_4_d_bits_size} : 4'h0);
  wire [1:0] in_0_d_bits_param = muxState_0 ? auto_anon_out_0_d_bits_param : 2'h0;
  wire [2:0] in_0_d_bits_opcode =
    (muxState_0 ? auto_anon_out_0_d_bits_opcode : 3'h0)
    | (muxState_1 ? auto_anon_out_1_d_bits_opcode : 3'h0)
    | (muxState_2 ? auto_anon_out_2_d_bits_opcode : 3'h0)
    | (muxState_3 ? auto_anon_out_3_d_bits_opcode : 3'h0) | {2'h0, muxState_4};
  always @(posedge clock) begin
    if (reset) begin
      beatsLeft <= 9'h0;
      readys_mask <= 5'h1F;
      state_0 <= 1'h0;
      state_1 <= 1'h0;
      state_2 <= 1'h0;
      state_3 <= 1'h0;
      state_4 <= 1'h0;
    end
    else begin
      automatic logic latch = idle & auto_anon_in_d_ready;
      if (latch) begin
        automatic logic [26:0] _GEN_3 = 27'hFFF << auto_anon_out_0_d_bits_size;
        automatic logic [8:0]  maskedBeats_0 =
          winner_0 & auto_anon_out_0_d_bits_opcode[0] ? ~(_GEN_3[11:3]) : 9'h0;
        automatic logic [20:0] _GEN_4 = 21'h3F << auto_anon_out_4_d_bits_size;
        automatic logic [20:0] _GEN_5 = 21'h3F << auto_anon_out_3_d_bits_size;
        automatic logic [20:0] _GEN_6 = 21'h3F << auto_anon_out_2_d_bits_size;
        automatic logic [20:0] _GEN_7 = 21'h3F << auto_anon_out_1_d_bits_size;
        beatsLeft <=
          {maskedBeats_0[8:3],
           maskedBeats_0[2:0]
             | (winner_1 & auto_anon_out_1_d_bits_opcode[0] ? ~(_GEN_7[5:3]) : 3'h0)
             | (winner_2 & auto_anon_out_2_d_bits_opcode[0] ? ~(_GEN_6[5:3]) : 3'h0)
             | (winner_3 & auto_anon_out_3_d_bits_opcode[0] ? ~(_GEN_5[5:3]) : 3'h0)
             | (winner_4 ? ~(_GEN_4[5:3]) : 3'h0)};
      end
      else
        beatsLeft <= beatsLeft - {8'h0, auto_anon_in_d_ready & in_0_d_valid};
      if (latch & (|readys_valid)) begin
        automatic logic [4:0] _GEN_8 = readys_readys & readys_valid;
        automatic logic [4:0] _GEN_9 = _GEN_8 | {_GEN_8[3:0], 1'h0};
        automatic logic [4:0] _GEN_10 = _GEN_9 | {_GEN_9[2:0], 2'h0};
        readys_mask <= _GEN_10 | {_GEN_10[0], 4'h0};
      end
      if (idle) begin
        state_0 <= winner_0;
        state_1 <= winner_1;
        state_2 <= winner_2;
        state_3 <= winner_3;
        state_4 <= winner_4;
      end
    end
  end // always @(posedge)
  TLMonitor_9 monitor (
    .clock                (clock),
    .reset                (reset),
    .io_in_a_ready        (in_0_a_ready),
    .io_in_a_valid        (auto_anon_in_a_valid),
    .io_in_a_bits_opcode  (auto_anon_in_a_bits_opcode),
    .io_in_a_bits_param   (auto_anon_in_a_bits_param),
    .io_in_a_bits_size    (auto_anon_in_a_bits_size),
    .io_in_a_bits_source  (auto_anon_in_a_bits_source),
    .io_in_a_bits_address (auto_anon_in_a_bits_address),
    .io_in_a_bits_mask    (auto_anon_in_a_bits_mask),
    .io_in_a_bits_corrupt (auto_anon_in_a_bits_corrupt),
    .io_in_d_ready        (auto_anon_in_d_ready),
    .io_in_d_valid        (in_0_d_valid),
    .io_in_d_bits_opcode  (in_0_d_bits_opcode),
    .io_in_d_bits_param   (in_0_d_bits_param),
    .io_in_d_bits_size    (in_0_d_bits_size),
    .io_in_d_bits_source  (in_0_d_bits_source),
    .io_in_d_bits_sink    (in_0_d_bits_sink),
    .io_in_d_bits_denied  (in_0_d_bits_denied),
    .io_in_d_bits_corrupt (in_0_d_bits_corrupt)
  );
  assign auto_anon_in_a_ready = in_0_a_ready;
  assign auto_anon_in_d_valid = in_0_d_valid;
  assign auto_anon_in_d_bits_opcode = in_0_d_bits_opcode;
  assign auto_anon_in_d_bits_param = in_0_d_bits_param;
  assign auto_anon_in_d_bits_size = in_0_d_bits_size;
  assign auto_anon_in_d_bits_source = in_0_d_bits_source;
  assign auto_anon_in_d_bits_sink = in_0_d_bits_sink;
  assign auto_anon_in_d_bits_denied = in_0_d_bits_denied;
  assign auto_anon_in_d_bits_data =
    (muxState_0 ? auto_anon_out_0_d_bits_data : 64'h0)
    | (muxState_1 ? auto_anon_out_1_d_bits_data : 64'h0)
    | (muxState_2 ? auto_anon_out_2_d_bits_data : 64'h0)
    | (muxState_3 ? auto_anon_out_3_d_bits_data : 64'h0)
    | (muxState_4 ? auto_anon_out_4_d_bits_data : 64'h0);
  assign auto_anon_in_d_bits_corrupt = in_0_d_bits_corrupt;
  assign auto_anon_out_4_a_valid = auto_anon_in_a_valid & requestAIO_0_4;
  assign auto_anon_out_4_a_bits_opcode = auto_anon_in_a_bits_opcode;
  assign auto_anon_out_4_a_bits_param = auto_anon_in_a_bits_param;
  assign auto_anon_out_4_a_bits_size = auto_anon_in_a_bits_size[2:0];
  assign auto_anon_out_4_a_bits_source = auto_anon_in_a_bits_source;
  assign auto_anon_out_4_a_bits_address = auto_anon_in_a_bits_address[16:0];
  assign auto_anon_out_4_a_bits_mask = auto_anon_in_a_bits_mask;
  assign auto_anon_out_4_a_bits_corrupt = auto_anon_in_a_bits_corrupt;
  assign auto_anon_out_4_d_ready =
    auto_anon_in_d_ready & (idle ? readys_readys[4] : state_4);
  assign auto_anon_out_3_a_valid = auto_anon_in_a_valid & requestAIO_0_3;
  assign auto_anon_out_3_a_bits_opcode = auto_anon_in_a_bits_opcode;
  assign auto_anon_out_3_a_bits_param = auto_anon_in_a_bits_param;
  assign auto_anon_out_3_a_bits_size = auto_anon_in_a_bits_size[2:0];
  assign auto_anon_out_3_a_bits_source = auto_anon_in_a_bits_source;
  assign auto_anon_out_3_a_bits_address = auto_anon_in_a_bits_address[11:0];
  assign auto_anon_out_3_a_bits_mask = auto_anon_in_a_bits_mask;
  assign auto_anon_out_3_a_bits_data = auto_anon_in_a_bits_data;
  assign auto_anon_out_3_a_bits_corrupt = auto_anon_in_a_bits_corrupt;
  assign auto_anon_out_3_d_ready =
    auto_anon_in_d_ready & (idle ? readys_readys[3] : state_3);
  assign auto_anon_out_2_a_valid = auto_anon_in_a_valid & auto_anon_in_a_bits_address[27];
  assign auto_anon_out_2_a_bits_opcode = auto_anon_in_a_bits_opcode;
  assign auto_anon_out_2_a_bits_param = auto_anon_in_a_bits_param;
  assign auto_anon_out_2_a_bits_size = auto_anon_in_a_bits_size[2:0];
  assign auto_anon_out_2_a_bits_source = auto_anon_in_a_bits_source;
  assign auto_anon_out_2_a_bits_address = auto_anon_in_a_bits_address;
  assign auto_anon_out_2_a_bits_mask = auto_anon_in_a_bits_mask;
  assign auto_anon_out_2_a_bits_data = auto_anon_in_a_bits_data;
  assign auto_anon_out_2_a_bits_corrupt = auto_anon_in_a_bits_corrupt;
  assign auto_anon_out_2_d_ready =
    auto_anon_in_d_ready & (idle ? readys_readys[2] : state_2);
  assign auto_anon_out_1_a_valid = auto_anon_in_a_valid & requestAIO_0_1;
  assign auto_anon_out_1_a_bits_opcode = auto_anon_in_a_bits_opcode;
  assign auto_anon_out_1_a_bits_param = auto_anon_in_a_bits_param;
  assign auto_anon_out_1_a_bits_size = auto_anon_in_a_bits_size[2:0];
  assign auto_anon_out_1_a_bits_source = auto_anon_in_a_bits_source;
  assign auto_anon_out_1_a_bits_address = auto_anon_in_a_bits_address[25:0];
  assign auto_anon_out_1_a_bits_mask = auto_anon_in_a_bits_mask;
  assign auto_anon_out_1_a_bits_data = auto_anon_in_a_bits_data;
  assign auto_anon_out_1_a_bits_corrupt = auto_anon_in_a_bits_corrupt;
  assign auto_anon_out_1_d_ready =
    auto_anon_in_d_ready & (idle ? readys_readys[1] : state_1);
  assign auto_anon_out_0_a_valid = auto_anon_in_a_valid & requestAIO_0_0;
  assign auto_anon_out_0_a_bits_opcode = auto_anon_in_a_bits_opcode;
  assign auto_anon_out_0_a_bits_param = auto_anon_in_a_bits_param;
  assign auto_anon_out_0_a_bits_size = auto_anon_in_a_bits_size;
  assign auto_anon_out_0_a_bits_source = auto_anon_in_a_bits_source;
  assign auto_anon_out_0_a_bits_address = auto_anon_in_a_bits_address[13:0];
  assign auto_anon_out_0_a_bits_mask = auto_anon_in_a_bits_mask;
  assign auto_anon_out_0_a_bits_data = auto_anon_in_a_bits_data;
  assign auto_anon_out_0_a_bits_corrupt = auto_anon_in_a_bits_corrupt;
  assign auto_anon_out_0_d_ready =
    auto_anon_in_d_ready & (idle ? readys_readys[0] : state_0);
endmodule

module TLMonitor_10(
  input        clock,
               reset,
               io_in_a_ready,
               io_in_a_valid,
  input [2:0]  io_in_a_bits_opcode,
               io_in_a_bits_param,
  input [3:0]  io_in_a_bits_size,
  input [4:0]  io_in_a_bits_source,
  input [27:0] io_in_a_bits_address,
  input [7:0]  io_in_a_bits_mask,
  input        io_in_a_bits_corrupt,
               io_in_d_ready,
               io_in_d_valid,
  input [2:0]  io_in_d_bits_opcode,
  input [1:0]  io_in_d_bits_param,
  input [3:0]  io_in_d_bits_size,
  input [4:0]  io_in_d_bits_source,
  input        io_in_d_bits_sink,
               io_in_d_bits_denied,
               io_in_d_bits_corrupt
);

  wire [31:0]  _plusarg_reader_1_out;
  wire [31:0]  _plusarg_reader_out;
  wire [26:0]  _GEN = 27'hFFF << io_in_a_bits_size;
  wire         _GEN_0 = io_in_a_ready & io_in_a_valid;
  reg  [8:0]   a_first_counter;
  reg  [2:0]   opcode;
  reg  [2:0]   param;
  reg  [3:0]   size;
  reg  [4:0]   source;
  reg  [27:0]  address;
  reg  [8:0]   d_first_counter;
  reg  [2:0]   opcode_1;
  reg  [1:0]   param_1;
  reg  [3:0]   size_1;
  reg  [4:0]   source_1;
  reg          sink;
  reg          denied;
  reg  [18:0]  inflight;
  reg  [75:0]  inflight_opcodes;
  reg  [151:0] inflight_sizes;
  reg  [8:0]   a_first_counter_1;
  wire         a_first_1 = a_first_counter_1 == 9'h0;
  reg  [8:0]   d_first_counter_1;
  wire         d_first_1 = d_first_counter_1 == 9'h0;
  wire [31:0]  _GEN_1 = 32'h1 << io_in_a_bits_source;
  wire         _GEN_2 = _GEN_0 & a_first_1;
  wire         d_release_ack = io_in_d_bits_opcode == 3'h6;
  wire [31:0]  _GEN_3 = 32'h1 << io_in_d_bits_source;
  reg  [31:0]  watchdog;
  reg  [18:0]  inflight_1;
  reg  [151:0] inflight_sizes_1;
  reg  [8:0]   d_first_counter_2;
  wire         d_first_2 = d_first_counter_2 == 9'h0;
  reg  [31:0]  watchdog_1;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      automatic logic [7:0][2:0] _GEN_4 =
        '{3'h4, 3'h5, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic [7:0][2:0] _GEN_5 =
        '{3'h4, 3'h4, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic            _GEN_6 = io_in_a_bits_source[4:3] == 2'h0;
      automatic logic            _GEN_7 = io_in_a_bits_source[4:3] == 2'h1;
      automatic logic            _GEN_8 = io_in_a_bits_source == 5'h10;
      automatic logic            _GEN_9 = io_in_a_bits_source == 5'h11;
      automatic logic            _GEN_10 = io_in_a_bits_source == 5'h12;
      automatic logic            source_ok = _GEN_6 | _GEN_7 | _GEN_8 | _GEN_9 | _GEN_10;
      automatic logic [11:0]     _GEN_11 = io_in_a_bits_address[11:0] & ~(_GEN[11:0]);
      automatic logic            _GEN_12 = io_in_a_bits_size > 4'h2;
      automatic logic            mask_size = io_in_a_bits_size[1:0] == 2'h2;
      automatic logic            mask_acc =
        _GEN_12 | mask_size & ~(io_in_a_bits_address[2]);
      automatic logic            mask_acc_1 =
        _GEN_12 | mask_size & io_in_a_bits_address[2];
      automatic logic            mask_size_1 = io_in_a_bits_size[1:0] == 2'h1;
      automatic logic            mask_eq_2 =
        ~(io_in_a_bits_address[2]) & ~(io_in_a_bits_address[1]);
      automatic logic            mask_acc_2 = mask_acc | mask_size_1 & mask_eq_2;
      automatic logic            mask_eq_3 =
        ~(io_in_a_bits_address[2]) & io_in_a_bits_address[1];
      automatic logic            mask_acc_3 = mask_acc | mask_size_1 & mask_eq_3;
      automatic logic            mask_eq_4 =
        io_in_a_bits_address[2] & ~(io_in_a_bits_address[1]);
      automatic logic            mask_acc_4 = mask_acc_1 | mask_size_1 & mask_eq_4;
      automatic logic            mask_eq_5 =
        io_in_a_bits_address[2] & io_in_a_bits_address[1];
      automatic logic            mask_acc_5 = mask_acc_1 | mask_size_1 & mask_eq_5;
      automatic logic [7:0]      mask =
        {mask_acc_5 | mask_eq_5 & io_in_a_bits_address[0],
         mask_acc_5 | mask_eq_5 & ~(io_in_a_bits_address[0]),
         mask_acc_4 | mask_eq_4 & io_in_a_bits_address[0],
         mask_acc_4 | mask_eq_4 & ~(io_in_a_bits_address[0]),
         mask_acc_3 | mask_eq_3 & io_in_a_bits_address[0],
         mask_acc_3 | mask_eq_3 & ~(io_in_a_bits_address[0]),
         mask_acc_2 | mask_eq_2 & io_in_a_bits_address[0],
         mask_acc_2 | mask_eq_2 & ~(io_in_a_bits_address[0])};
      automatic logic            _GEN_13 = io_in_a_bits_size < 4'hD;
      automatic logic            _GEN_14 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_15 = io_in_a_bits_address[27:12] == 16'h0;
      automatic logic            _GEN_16 =
        {io_in_a_bits_address[27:14], ~(io_in_a_bits_address[13:12])} == 16'h0;
      automatic logic            _GEN_17 =
        {io_in_a_bits_address[27:17], ~(io_in_a_bits_address[16])} == 12'h0;
      automatic logic            _GEN_18 =
        {io_in_a_bits_address[27:26], io_in_a_bits_address[25:16] ^ 10'h200} == 12'h0;
      automatic logic            _GEN_19 =
        _GEN_8 & io_in_a_bits_size == 4'h6 & _GEN_13
        & (_GEN_15 | _GEN_16 | _GEN_17 | _GEN_18 | (&(io_in_a_bits_address[27:26])));
      automatic logic            _GEN_20 = io_in_a_bits_param > 3'h2;
      automatic logic            _GEN_21 = io_in_a_bits_mask != 8'hFF;
      automatic logic            _GEN_22 =
        io_in_a_valid & (&io_in_a_bits_opcode) & ~reset;
      automatic logic            _GEN_23 =
        _GEN_13 & (_GEN_6 | _GEN_7 | _GEN_8 | _GEN_9 | _GEN_10);
      automatic logic            _GEN_24 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_25 = _GEN_13 & _GEN_16;
      automatic logic            _GEN_26 = io_in_a_bits_size < 4'h7;
      automatic logic            _GEN_27 = io_in_a_bits_mask != mask;
      automatic logic            _GEN_28 =
        _GEN_23
        & (_GEN_25 | _GEN_26 & (_GEN_15 | _GEN_18 | (&(io_in_a_bits_address[27:26]))));
      automatic logic            _GEN_29 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_30 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_31 = _GEN_23 & io_in_a_bits_size < 4'h4 & _GEN_16;
      automatic logic            _GEN_32 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_33 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h3 & ~reset;
      automatic logic            _GEN_34 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h5 & ~reset;
      automatic logic            source_ok_1 =
        io_in_d_bits_source[4:3] == 2'h0 | io_in_d_bits_source[4:3] == 2'h1
        | io_in_d_bits_source == 5'h10 | io_in_d_bits_source == 5'h11
        | io_in_d_bits_source == 5'h12;
      automatic logic            _GEN_35 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_36 = io_in_d_bits_size < 4'h3;
      automatic logic            _GEN_37 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_38 = io_in_d_bits_param == 2'h2;
      automatic logic            _GEN_39 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h5 & ~reset;
      automatic logic            _GEN_40 = ~io_in_d_bits_denied | io_in_d_bits_corrupt;
      automatic logic            _GEN_41 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_42 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_43 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_44 = io_in_a_valid & (|a_first_counter) & ~reset;
      automatic logic            _GEN_45 = io_in_d_valid & (|d_first_counter) & ~reset;
      automatic logic [75:0]     _GEN_46 =
        inflight_opcodes >> {69'h0, io_in_d_bits_source, 2'h0};
      automatic logic [151:0]    _GEN_47 = {144'h0, io_in_d_bits_source, 3'h0};
      automatic logic            _GEN_48 = io_in_a_valid & a_first_1;
      automatic logic [18:0]     a_set_wo_ready = _GEN_48 ? _GEN_1[18:0] : 19'h0;
      automatic logic            _GEN_49 = io_in_d_valid & d_first_1;
      automatic logic            _GEN_50 = _GEN_49 & ~d_release_ack;
      automatic logic            _GEN_51 = io_in_a_bits_source == io_in_d_bits_source;
      automatic logic            same_cycle_resp = _GEN_48 & _GEN_51;
      automatic logic [18:0]     _GEN_52 = {14'h0, io_in_d_bits_source};
      automatic logic            _GEN_53 = _GEN_50 & same_cycle_resp & ~reset;
      automatic logic            _GEN_54 = _GEN_50 & ~same_cycle_resp & ~reset;
      automatic logic [7:0]      _GEN_55 = {4'h0, io_in_d_bits_size};
      automatic logic            _GEN_56 =
        io_in_d_valid & d_first_2 & d_release_ack & ~reset;
      automatic logic [18:0]     _GEN_57 = inflight >> io_in_a_bits_source;
      automatic logic [18:0]     _GEN_58 = inflight >> _GEN_52;
      automatic logic [151:0]    _GEN_59 = inflight_sizes >> _GEN_47;
      automatic logic [18:0]     _GEN_60 = inflight_1 >> _GEN_52;
      automatic logic [151:0]    _GEN_61 = inflight_sizes_1 >> _GEN_47;
      if (_GEN_14) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & ~_GEN_19) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock carries invalid source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & ~_GEN_12) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & (|_GEN_11)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & _GEN_20) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock carries invalid grow param (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & _GEN_21) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock is corrupt (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & ~_GEN_19) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm carries invalid source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & ~_GEN_12) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & (|_GEN_11)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & _GEN_20) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm carries invalid grow param (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & ~(|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & _GEN_21) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm is corrupt (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_24 & ~_GEN_23) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_24
          & ~(_GEN_25 | _GEN_26
              & (_GEN_15 | _GEN_17 | _GEN_18 | (&(io_in_a_bits_address[27:26]))))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_24 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get carries invalid source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_24 & (|_GEN_11)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get address not aligned to size (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_24 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get carries invalid param (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_24 & _GEN_27) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get contains invalid mask (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_24 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get is corrupt (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_29 & ~_GEN_28) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_29 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull carries invalid source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_29 & (|_GEN_11)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull address not aligned to size (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_29 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull carries invalid param (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_29 & _GEN_27) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull contains invalid mask (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & ~_GEN_28) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & (|_GEN_11)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial address not aligned to size (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial carries invalid param (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & (|(io_in_a_bits_mask & ~mask))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial contains invalid mask (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & ~_GEN_31) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & (|_GEN_11)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & io_in_a_bits_param > 3'h4) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & _GEN_27) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_33 & ~_GEN_31) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_33 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical carries invalid source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_33 & (|_GEN_11)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical address not aligned to size (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_33 & io_in_a_bits_param[2]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical carries invalid opcode param (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_33 & _GEN_27) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical contains invalid mask (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_34 & ~(_GEN_23 & _GEN_25)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_34 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint carries invalid source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_34 & (|_GEN_11)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint address not aligned to size (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_34 & (|(io_in_a_bits_param[2:1]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint carries invalid opcode param (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_34 & _GEN_27) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint contains invalid mask (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_34 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint is corrupt (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & ~reset & (&io_in_d_bits_opcode)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel has invalid opcode (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_35 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_35 & _GEN_36) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_35 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_35 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck is corrupt (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_35 & io_in_d_bits_denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck is denied (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid sink ID (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & _GEN_36) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant smaller than a beat (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & (&io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid cap param (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & _GEN_38) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries toN param (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant is corrupt (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_39 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_39) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid sink ID (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_39 & _GEN_36) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData smaller than a beat (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_39 & (&io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid cap param (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_39 & _GEN_38) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries toN param (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_39 & ~_GEN_40) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData is denied but not corrupt (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_41 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_41 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck carries invalid param (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_41 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck is corrupt (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData carries invalid param (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & ~_GEN_40) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData is denied but not corrupt (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck carries invalid source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck carries invalid param (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck is corrupt (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_44 & io_in_a_bits_opcode != opcode) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel opcode changed within multibeat operation (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_44 & io_in_a_bits_param != param) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel param changed within multibeat operation (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_44 & io_in_a_bits_size != size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel size changed within multibeat operation (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_44 & io_in_a_bits_source != source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel source changed within multibeat operation (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_44 & io_in_a_bits_address != address) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel address changed with multibeat operation (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_45 & io_in_d_bits_opcode != opcode_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel opcode changed within multibeat operation (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_45 & io_in_d_bits_param != param_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel param changed within multibeat operation (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_45 & io_in_d_bits_size != size_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel size changed within multibeat operation (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_45 & io_in_d_bits_source != source_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel source changed within multibeat operation (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_45 & io_in_d_bits_sink != sink) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel sink changed with multibeat operation (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_45 & io_in_d_bits_denied != denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel denied changed with multibeat operation (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_2 & ~reset & _GEN_57[0]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel re-used a source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_50 & ~reset & ~(_GEN_58[0] | same_cycle_resp)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_53
          & ~(io_in_d_bits_opcode == _GEN_5[io_in_a_bits_opcode]
              | io_in_d_bits_opcode == _GEN_4[io_in_a_bits_opcode])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_53 & io_in_a_bits_size != io_in_d_bits_size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_54
          & ~(io_in_d_bits_opcode == _GEN_5[_GEN_46[3:1]]
              | io_in_d_bits_opcode == _GEN_4[_GEN_46[3:1]])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_54 & _GEN_55 != {1'h0, _GEN_59[7:1]}) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_49 & a_first_1 & io_in_a_valid & _GEN_51 & ~d_release_ack & ~reset
          & ~(~io_in_d_ready | io_in_a_ready)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ready check\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(a_set_wo_ready != (_GEN_50 ? _GEN_3[18:0] : 19'h0)
              | a_set_wo_ready == 19'h0)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' and 'D' concurrent, despite minlatency > 0 (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight == 19'h0 | _plusarg_reader_out == 32'h0
              | watchdog < _plusarg_reader_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_56 & ~(_GEN_60[0])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_56 & _GEN_55 != {1'h0, _GEN_61[7:1]}) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight_1 == 19'h0 | _plusarg_reader_1_out == 32'h0
              | watchdog_1 < _plusarg_reader_1_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/subsystem/PeripheryBus.scala:62:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    automatic logic _GEN_62;
    _GEN_62 = io_in_d_ready & io_in_d_valid;
    if (reset) begin
      a_first_counter <= 9'h0;
      d_first_counter <= 9'h0;
      inflight <= 19'h0;
      inflight_opcodes <= 76'h0;
      inflight_sizes <= 152'h0;
      a_first_counter_1 <= 9'h0;
      d_first_counter_1 <= 9'h0;
      watchdog <= 32'h0;
      inflight_1 <= 19'h0;
      inflight_sizes_1 <= 152'h0;
      d_first_counter_2 <= 9'h0;
      watchdog_1 <= 32'h0;
    end
    else begin
      automatic logic         _GEN_63;
      automatic logic [270:0] _GEN_64 = 271'hFF << {263'h0, io_in_d_bits_source, 3'h0};
      automatic logic         _GEN_65;
      automatic logic [270:0] _GEN_66 = 271'hF << {264'h0, io_in_d_bits_source, 2'h0};
      automatic logic [258:0] _GEN_67 =
        {255'h0, _GEN_2 ? {io_in_a_bits_opcode, 1'h1} : 4'h0}
        << {252'h0, io_in_a_bits_source, 2'h0};
      automatic logic [259:0] _GEN_68 =
        {255'h0, _GEN_2 ? {io_in_a_bits_size, 1'h1} : 5'h0}
        << {252'h0, io_in_a_bits_source, 3'h0};
      _GEN_63 = _GEN_62 & d_first_1 & ~d_release_ack;
      _GEN_65 = _GEN_62 & d_first_2 & d_release_ack;
      if (_GEN_0) begin
        if (|a_first_counter)
          a_first_counter <= a_first_counter - 9'h1;
        else if (io_in_a_bits_opcode[2])
          a_first_counter <= 9'h0;
        else
          a_first_counter <= ~(_GEN[11:3]);
        if (a_first_1) begin
          if (io_in_a_bits_opcode[2])
            a_first_counter_1 <= 9'h0;
          else
            a_first_counter_1 <= ~(_GEN[11:3]);
        end
        else
          a_first_counter_1 <= a_first_counter_1 - 9'h1;
      end
      if (_GEN_62) begin
        automatic logic [26:0] _GEN_69 = 27'hFFF << io_in_d_bits_size;
        if (|d_first_counter)
          d_first_counter <= d_first_counter - 9'h1;
        else if (io_in_d_bits_opcode[0])
          d_first_counter <= ~(_GEN_69[11:3]);
        else
          d_first_counter <= 9'h0;
        if (d_first_1) begin
          if (io_in_d_bits_opcode[0])
            d_first_counter_1 <= ~(_GEN_69[11:3]);
          else
            d_first_counter_1 <= 9'h0;
        end
        else
          d_first_counter_1 <= d_first_counter_1 - 9'h1;
        if (d_first_2) begin
          if (io_in_d_bits_opcode[0])
            d_first_counter_2 <= ~(_GEN_69[11:3]);
          else
            d_first_counter_2 <= 9'h0;
        end
        else
          d_first_counter_2 <= d_first_counter_2 - 9'h1;
        watchdog_1 <= 32'h0;
      end
      else
        watchdog_1 <= watchdog_1 + 32'h1;
      inflight <=
        (inflight | (_GEN_2 ? _GEN_1[18:0] : 19'h0)) & ~(_GEN_63 ? _GEN_3[18:0] : 19'h0);
      inflight_opcodes <=
        (inflight_opcodes | (_GEN_2 ? _GEN_67[75:0] : 76'h0))
        & ~(_GEN_63 ? _GEN_66[75:0] : 76'h0);
      inflight_sizes <=
        (inflight_sizes | (_GEN_2 ? _GEN_68[151:0] : 152'h0))
        & ~(_GEN_63 ? _GEN_64[151:0] : 152'h0);
      if (_GEN_0 | _GEN_62)
        watchdog <= 32'h0;
      else
        watchdog <= watchdog + 32'h1;
      inflight_1 <= inflight_1 & ~(_GEN_65 ? _GEN_3[18:0] : 19'h0);
      inflight_sizes_1 <= inflight_sizes_1 & ~(_GEN_65 ? _GEN_64[151:0] : 152'h0);
    end
    if (_GEN_0 & ~(|a_first_counter)) begin
      opcode <= io_in_a_bits_opcode;
      param <= io_in_a_bits_param;
      size <= io_in_a_bits_size;
      source <= io_in_a_bits_source;
      address <= io_in_a_bits_address;
    end
    if (_GEN_62 & ~(|d_first_counter)) begin
      opcode_1 <= io_in_d_bits_opcode;
      param_1 <= io_in_d_bits_param;
      size_1 <= io_in_d_bits_size;
      source_1 <= io_in_d_bits_source;
      sink <= io_in_d_bits_sink;
      denied <= io_in_d_bits_denied;
    end
  end // always @(posedge)
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader (
    .out (_plusarg_reader_out)
  );
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader_1 (
    .out (_plusarg_reader_1_out)
  );
endmodule

module Queue2_TLBundleA_a28d64s5k1z4u(
  input         clock,
                reset,
                io_enq_valid,
  input  [2:0]  io_enq_bits_opcode,
                io_enq_bits_param,
  input  [3:0]  io_enq_bits_size,
  input  [4:0]  io_enq_bits_source,
  input  [27:0] io_enq_bits_address,
  input  [7:0]  io_enq_bits_mask,
  input  [63:0] io_enq_bits_data,
  input         io_enq_bits_corrupt,
                io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
  output [2:0]  io_deq_bits_opcode,
                io_deq_bits_param,
  output [3:0]  io_deq_bits_size,
  output [4:0]  io_deq_bits_source,
  output [27:0] io_deq_bits_address,
  output [7:0]  io_deq_bits_mask,
  output [63:0] io_deq_bits_data,
  output        io_deq_bits_corrupt
);

  wire [115:0] _ram_ext_R0_data;
  reg          wrap;
  reg          wrap_1;
  reg          maybe_full;
  wire         ptr_match = wrap == wrap_1;
  wire         empty = ptr_match & ~maybe_full;
  wire         full = ptr_match & maybe_full;
  wire         do_enq = ~full & io_enq_valid;
  always @(posedge clock) begin
    if (reset) begin
      wrap <= 1'h0;
      wrap_1 <= 1'h0;
      maybe_full <= 1'h0;
    end
    else begin
      automatic logic do_deq = io_deq_ready & ~empty;
      if (do_enq)
        wrap <= wrap - 1'h1;
      if (do_deq)
        wrap_1 <= wrap_1 - 1'h1;
      if (do_enq != do_deq)
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_combMem_16 ram_ext (
    .R0_addr (wrap_1),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (wrap),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data
      ({io_enq_bits_corrupt,
        io_enq_bits_data,
        io_enq_bits_mask,
        io_enq_bits_address,
        io_enq_bits_source,
        io_enq_bits_size,
        io_enq_bits_param,
        io_enq_bits_opcode}),
    .R0_data (_ram_ext_R0_data)
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
  assign io_deq_bits_opcode = _ram_ext_R0_data[2:0];
  assign io_deq_bits_param = _ram_ext_R0_data[5:3];
  assign io_deq_bits_size = _ram_ext_R0_data[9:6];
  assign io_deq_bits_source = _ram_ext_R0_data[14:10];
  assign io_deq_bits_address = _ram_ext_R0_data[42:15];
  assign io_deq_bits_mask = _ram_ext_R0_data[50:43];
  assign io_deq_bits_data = _ram_ext_R0_data[114:51];
  assign io_deq_bits_corrupt = _ram_ext_R0_data[115];
endmodule

module Queue2_TLBundleD_a28d64s5k1z4u(
  input         clock,
                reset,
                io_enq_valid,
  input  [2:0]  io_enq_bits_opcode,
  input  [1:0]  io_enq_bits_param,
  input  [3:0]  io_enq_bits_size,
  input  [4:0]  io_enq_bits_source,
  input         io_enq_bits_sink,
                io_enq_bits_denied,
  input  [63:0] io_enq_bits_data,
  input         io_enq_bits_corrupt,
                io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
  output [2:0]  io_deq_bits_opcode,
  output [1:0]  io_deq_bits_param,
  output [3:0]  io_deq_bits_size,
  output [4:0]  io_deq_bits_source,
  output        io_deq_bits_sink,
                io_deq_bits_denied,
  output [63:0] io_deq_bits_data,
  output        io_deq_bits_corrupt
);

  wire [80:0] _ram_ext_R0_data;
  reg         wrap;
  reg         wrap_1;
  reg         maybe_full;
  wire        ptr_match = wrap == wrap_1;
  wire        empty = ptr_match & ~maybe_full;
  wire        full = ptr_match & maybe_full;
  wire        do_enq = ~full & io_enq_valid;
  always @(posedge clock) begin
    if (reset) begin
      wrap <= 1'h0;
      wrap_1 <= 1'h0;
      maybe_full <= 1'h0;
    end
    else begin
      automatic logic do_deq = io_deq_ready & ~empty;
      if (do_enq)
        wrap <= wrap - 1'h1;
      if (do_deq)
        wrap_1 <= wrap_1 - 1'h1;
      if (do_enq != do_deq)
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_combMem_13 ram_ext (
    .R0_addr (wrap_1),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (wrap),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data
      ({io_enq_bits_corrupt,
        io_enq_bits_data,
        io_enq_bits_denied,
        io_enq_bits_sink,
        io_enq_bits_source,
        io_enq_bits_size,
        io_enq_bits_param,
        io_enq_bits_opcode}),
    .R0_data (_ram_ext_R0_data)
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
  assign io_deq_bits_opcode = _ram_ext_R0_data[2:0];
  assign io_deq_bits_param = _ram_ext_R0_data[4:3];
  assign io_deq_bits_size = _ram_ext_R0_data[8:5];
  assign io_deq_bits_source = _ram_ext_R0_data[13:9];
  assign io_deq_bits_sink = _ram_ext_R0_data[14];
  assign io_deq_bits_denied = _ram_ext_R0_data[15];
  assign io_deq_bits_data = _ram_ext_R0_data[79:16];
  assign io_deq_bits_corrupt = _ram_ext_R0_data[80];
endmodule

module TLBuffer_a28d64s5k1z4u(
  input         clock,
                reset,
                auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
                auto_in_a_bits_param,
  input  [3:0]  auto_in_a_bits_size,
  input  [4:0]  auto_in_a_bits_source,
  input  [27:0] auto_in_a_bits_address,
  input  [7:0]  auto_in_a_bits_mask,
  input  [63:0] auto_in_a_bits_data,
  input         auto_in_a_bits_corrupt,
                auto_in_d_ready,
                auto_out_a_ready,
                auto_out_d_valid,
  input  [2:0]  auto_out_d_bits_opcode,
  input  [1:0]  auto_out_d_bits_param,
  input  [3:0]  auto_out_d_bits_size,
  input  [4:0]  auto_out_d_bits_source,
  input         auto_out_d_bits_sink,
                auto_out_d_bits_denied,
  input  [63:0] auto_out_d_bits_data,
  input         auto_out_d_bits_corrupt,
  output        auto_in_a_ready,
                auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
  output [1:0]  auto_in_d_bits_param,
  output [3:0]  auto_in_d_bits_size,
  output [4:0]  auto_in_d_bits_source,
  output        auto_in_d_bits_sink,
                auto_in_d_bits_denied,
  output [63:0] auto_in_d_bits_data,
  output        auto_in_d_bits_corrupt,
                auto_out_a_valid,
  output [2:0]  auto_out_a_bits_opcode,
                auto_out_a_bits_param,
  output [3:0]  auto_out_a_bits_size,
  output [4:0]  auto_out_a_bits_source,
  output [27:0] auto_out_a_bits_address,
  output [7:0]  auto_out_a_bits_mask,
  output [63:0] auto_out_a_bits_data,
  output        auto_out_a_bits_corrupt,
                auto_out_d_ready
);

  wire       _nodeIn_d_q_io_deq_valid;
  wire [2:0] _nodeIn_d_q_io_deq_bits_opcode;
  wire [1:0] _nodeIn_d_q_io_deq_bits_param;
  wire [3:0] _nodeIn_d_q_io_deq_bits_size;
  wire [4:0] _nodeIn_d_q_io_deq_bits_source;
  wire       _nodeIn_d_q_io_deq_bits_sink;
  wire       _nodeIn_d_q_io_deq_bits_denied;
  wire       _nodeIn_d_q_io_deq_bits_corrupt;
  wire       _nodeOut_a_q_io_enq_ready;
  TLMonitor_10 monitor (
    .clock                (clock),
    .reset                (reset),
    .io_in_a_ready        (_nodeOut_a_q_io_enq_ready),
    .io_in_a_valid        (auto_in_a_valid),
    .io_in_a_bits_opcode  (auto_in_a_bits_opcode),
    .io_in_a_bits_param   (auto_in_a_bits_param),
    .io_in_a_bits_size    (auto_in_a_bits_size),
    .io_in_a_bits_source  (auto_in_a_bits_source),
    .io_in_a_bits_address (auto_in_a_bits_address),
    .io_in_a_bits_mask    (auto_in_a_bits_mask),
    .io_in_a_bits_corrupt (auto_in_a_bits_corrupt),
    .io_in_d_ready        (auto_in_d_ready),
    .io_in_d_valid        (_nodeIn_d_q_io_deq_valid),
    .io_in_d_bits_opcode  (_nodeIn_d_q_io_deq_bits_opcode),
    .io_in_d_bits_param   (_nodeIn_d_q_io_deq_bits_param),
    .io_in_d_bits_size    (_nodeIn_d_q_io_deq_bits_size),
    .io_in_d_bits_source  (_nodeIn_d_q_io_deq_bits_source),
    .io_in_d_bits_sink    (_nodeIn_d_q_io_deq_bits_sink),
    .io_in_d_bits_denied  (_nodeIn_d_q_io_deq_bits_denied),
    .io_in_d_bits_corrupt (_nodeIn_d_q_io_deq_bits_corrupt)
  );
  Queue2_TLBundleA_a28d64s5k1z4u nodeOut_a_q (
    .clock               (clock),
    .reset               (reset),
    .io_enq_valid        (auto_in_a_valid),
    .io_enq_bits_opcode  (auto_in_a_bits_opcode),
    .io_enq_bits_param   (auto_in_a_bits_param),
    .io_enq_bits_size    (auto_in_a_bits_size),
    .io_enq_bits_source  (auto_in_a_bits_source),
    .io_enq_bits_address (auto_in_a_bits_address),
    .io_enq_bits_mask    (auto_in_a_bits_mask),
    .io_enq_bits_data    (auto_in_a_bits_data),
    .io_enq_bits_corrupt (auto_in_a_bits_corrupt),
    .io_deq_ready        (auto_out_a_ready),
    .io_enq_ready        (_nodeOut_a_q_io_enq_ready),
    .io_deq_valid        (auto_out_a_valid),
    .io_deq_bits_opcode  (auto_out_a_bits_opcode),
    .io_deq_bits_param   (auto_out_a_bits_param),
    .io_deq_bits_size    (auto_out_a_bits_size),
    .io_deq_bits_source  (auto_out_a_bits_source),
    .io_deq_bits_address (auto_out_a_bits_address),
    .io_deq_bits_mask    (auto_out_a_bits_mask),
    .io_deq_bits_data    (auto_out_a_bits_data),
    .io_deq_bits_corrupt (auto_out_a_bits_corrupt)
  );
  Queue2_TLBundleD_a28d64s5k1z4u nodeIn_d_q (
    .clock               (clock),
    .reset               (reset),
    .io_enq_valid        (auto_out_d_valid),
    .io_enq_bits_opcode  (auto_out_d_bits_opcode),
    .io_enq_bits_param   (auto_out_d_bits_param),
    .io_enq_bits_size    (auto_out_d_bits_size),
    .io_enq_bits_source  (auto_out_d_bits_source),
    .io_enq_bits_sink    (auto_out_d_bits_sink),
    .io_enq_bits_denied  (auto_out_d_bits_denied),
    .io_enq_bits_data    (auto_out_d_bits_data),
    .io_enq_bits_corrupt (auto_out_d_bits_corrupt),
    .io_deq_ready        (auto_in_d_ready),
    .io_enq_ready        (auto_out_d_ready),
    .io_deq_valid        (_nodeIn_d_q_io_deq_valid),
    .io_deq_bits_opcode  (_nodeIn_d_q_io_deq_bits_opcode),
    .io_deq_bits_param   (_nodeIn_d_q_io_deq_bits_param),
    .io_deq_bits_size    (_nodeIn_d_q_io_deq_bits_size),
    .io_deq_bits_source  (_nodeIn_d_q_io_deq_bits_source),
    .io_deq_bits_sink    (_nodeIn_d_q_io_deq_bits_sink),
    .io_deq_bits_denied  (_nodeIn_d_q_io_deq_bits_denied),
    .io_deq_bits_data    (auto_in_d_bits_data),
    .io_deq_bits_corrupt (_nodeIn_d_q_io_deq_bits_corrupt)
  );
  assign auto_in_a_ready = _nodeOut_a_q_io_enq_ready;
  assign auto_in_d_valid = _nodeIn_d_q_io_deq_valid;
  assign auto_in_d_bits_opcode = _nodeIn_d_q_io_deq_bits_opcode;
  assign auto_in_d_bits_param = _nodeIn_d_q_io_deq_bits_param;
  assign auto_in_d_bits_size = _nodeIn_d_q_io_deq_bits_size;
  assign auto_in_d_bits_source = _nodeIn_d_q_io_deq_bits_source;
  assign auto_in_d_bits_sink = _nodeIn_d_q_io_deq_bits_sink;
  assign auto_in_d_bits_denied = _nodeIn_d_q_io_deq_bits_denied;
  assign auto_in_d_bits_corrupt = _nodeIn_d_q_io_deq_bits_corrupt;
endmodule

module TLMonitor_11(
  input        clock,
               reset,
               io_in_a_ready,
               io_in_a_valid,
  input [2:0]  io_in_a_bits_opcode,
               io_in_a_bits_param,
  input [3:0]  io_in_a_bits_size,
  input [4:0]  io_in_a_bits_source,
  input [27:0] io_in_a_bits_address,
  input [7:0]  io_in_a_bits_mask,
  input        io_in_a_bits_corrupt,
               io_in_d_ready,
               io_in_d_valid,
  input [2:0]  io_in_d_bits_opcode,
  input [1:0]  io_in_d_bits_param,
  input [3:0]  io_in_d_bits_size,
  input [4:0]  io_in_d_bits_source,
  input        io_in_d_bits_sink,
               io_in_d_bits_denied,
               io_in_d_bits_corrupt
);

  wire [31:0]  _plusarg_reader_1_out;
  wire [31:0]  _plusarg_reader_out;
  wire [26:0]  _GEN = 27'hFFF << io_in_a_bits_size;
  wire         _GEN_0 = io_in_a_ready & io_in_a_valid;
  reg  [8:0]   a_first_counter;
  reg  [2:0]   opcode;
  reg  [2:0]   param;
  reg  [3:0]   size;
  reg  [4:0]   source;
  reg  [27:0]  address;
  reg  [8:0]   d_first_counter;
  reg  [2:0]   opcode_1;
  reg  [1:0]   param_1;
  reg  [3:0]   size_1;
  reg  [4:0]   source_1;
  reg          sink;
  reg          denied;
  reg  [18:0]  inflight;
  reg  [75:0]  inflight_opcodes;
  reg  [151:0] inflight_sizes;
  reg  [8:0]   a_first_counter_1;
  wire         a_first_1 = a_first_counter_1 == 9'h0;
  reg  [8:0]   d_first_counter_1;
  wire         d_first_1 = d_first_counter_1 == 9'h0;
  wire [31:0]  _GEN_1 = 32'h1 << io_in_a_bits_source;
  wire         _GEN_2 = _GEN_0 & a_first_1;
  wire         d_release_ack = io_in_d_bits_opcode == 3'h6;
  wire [31:0]  _GEN_3 = 32'h1 << io_in_d_bits_source;
  reg  [31:0]  watchdog;
  reg  [18:0]  inflight_1;
  reg  [151:0] inflight_sizes_1;
  reg  [8:0]   d_first_counter_2;
  wire         d_first_2 = d_first_counter_2 == 9'h0;
  reg  [31:0]  watchdog_1;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      automatic logic [7:0][2:0] _GEN_4 =
        '{3'h4, 3'h5, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic [7:0][2:0] _GEN_5 =
        '{3'h4, 3'h4, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic            _GEN_6 = io_in_a_bits_source[4:3] == 2'h0;
      automatic logic            _GEN_7 = io_in_a_bits_source[4:3] == 2'h1;
      automatic logic            _GEN_8 = io_in_a_bits_source == 5'h10;
      automatic logic            _GEN_9 = io_in_a_bits_source == 5'h11;
      automatic logic            _GEN_10 = io_in_a_bits_source == 5'h12;
      automatic logic            source_ok = _GEN_6 | _GEN_7 | _GEN_8 | _GEN_9 | _GEN_10;
      automatic logic [11:0]     _GEN_11 = io_in_a_bits_address[11:0] & ~(_GEN[11:0]);
      automatic logic            _GEN_12 = io_in_a_bits_size > 4'h2;
      automatic logic            mask_size = io_in_a_bits_size[1:0] == 2'h2;
      automatic logic            mask_acc =
        _GEN_12 | mask_size & ~(io_in_a_bits_address[2]);
      automatic logic            mask_acc_1 =
        _GEN_12 | mask_size & io_in_a_bits_address[2];
      automatic logic            mask_size_1 = io_in_a_bits_size[1:0] == 2'h1;
      automatic logic            mask_eq_2 =
        ~(io_in_a_bits_address[2]) & ~(io_in_a_bits_address[1]);
      automatic logic            mask_acc_2 = mask_acc | mask_size_1 & mask_eq_2;
      automatic logic            mask_eq_3 =
        ~(io_in_a_bits_address[2]) & io_in_a_bits_address[1];
      automatic logic            mask_acc_3 = mask_acc | mask_size_1 & mask_eq_3;
      automatic logic            mask_eq_4 =
        io_in_a_bits_address[2] & ~(io_in_a_bits_address[1]);
      automatic logic            mask_acc_4 = mask_acc_1 | mask_size_1 & mask_eq_4;
      automatic logic            mask_eq_5 =
        io_in_a_bits_address[2] & io_in_a_bits_address[1];
      automatic logic            mask_acc_5 = mask_acc_1 | mask_size_1 & mask_eq_5;
      automatic logic [7:0]      mask =
        {mask_acc_5 | mask_eq_5 & io_in_a_bits_address[0],
         mask_acc_5 | mask_eq_5 & ~(io_in_a_bits_address[0]),
         mask_acc_4 | mask_eq_4 & io_in_a_bits_address[0],
         mask_acc_4 | mask_eq_4 & ~(io_in_a_bits_address[0]),
         mask_acc_3 | mask_eq_3 & io_in_a_bits_address[0],
         mask_acc_3 | mask_eq_3 & ~(io_in_a_bits_address[0]),
         mask_acc_2 | mask_eq_2 & io_in_a_bits_address[0],
         mask_acc_2 | mask_eq_2 & ~(io_in_a_bits_address[0])};
      automatic logic            _GEN_13 = io_in_a_bits_size < 4'hD;
      automatic logic            _GEN_14 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_15 = io_in_a_bits_address[27:12] == 16'h0;
      automatic logic            _GEN_16 =
        {io_in_a_bits_address[27:14], ~(io_in_a_bits_address[13:12])} == 16'h0;
      automatic logic            _GEN_17 =
        {io_in_a_bits_address[27:17], ~(io_in_a_bits_address[16])} == 12'h0;
      automatic logic            _GEN_18 =
        {io_in_a_bits_address[27:26], io_in_a_bits_address[25:16] ^ 10'h200} == 12'h0;
      automatic logic            _GEN_19 = _GEN_15 | _GEN_16;
      automatic logic            _GEN_20 =
        _GEN_8 & io_in_a_bits_size == 4'h6 & _GEN_13
        & (_GEN_19 | _GEN_17 | _GEN_18 | (&(io_in_a_bits_address[27:26])));
      automatic logic            _GEN_21 = io_in_a_bits_param > 3'h2;
      automatic logic            _GEN_22 = io_in_a_bits_mask != 8'hFF;
      automatic logic            _GEN_23 =
        io_in_a_valid & (&io_in_a_bits_opcode) & ~reset;
      automatic logic            _GEN_24 =
        _GEN_13 & (_GEN_6 | _GEN_7 | _GEN_8 | _GEN_9 | _GEN_10);
      automatic logic            _GEN_25 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_26 = _GEN_13 & _GEN_16;
      automatic logic            _GEN_27 = io_in_a_bits_size < 4'h7;
      automatic logic            _GEN_28 = io_in_a_bits_mask != mask;
      automatic logic            _GEN_29 =
        _GEN_24
        & (_GEN_26 | _GEN_27 & (_GEN_15 | _GEN_18 | (&(io_in_a_bits_address[27:26]))));
      automatic logic            _GEN_30 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_31 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_32 =
        _GEN_24 & io_in_a_bits_size < 4'h4
        & (_GEN_19 | _GEN_18 | (&(io_in_a_bits_address[27:26])));
      automatic logic            _GEN_33 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_34 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h3 & ~reset;
      automatic logic            _GEN_35 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h5 & ~reset;
      automatic logic            source_ok_1 =
        io_in_d_bits_source[4:3] == 2'h0 | io_in_d_bits_source[4:3] == 2'h1
        | io_in_d_bits_source == 5'h10 | io_in_d_bits_source == 5'h11
        | io_in_d_bits_source == 5'h12;
      automatic logic            _GEN_36 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_37 = io_in_d_bits_size < 4'h3;
      automatic logic            _GEN_38 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_39 = io_in_d_bits_param == 2'h2;
      automatic logic            _GEN_40 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h5 & ~reset;
      automatic logic            _GEN_41 = ~io_in_d_bits_denied | io_in_d_bits_corrupt;
      automatic logic            _GEN_42 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_43 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_44 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_45 = io_in_a_valid & (|a_first_counter) & ~reset;
      automatic logic            _GEN_46 = io_in_d_valid & (|d_first_counter) & ~reset;
      automatic logic [75:0]     _GEN_47 =
        inflight_opcodes >> {69'h0, io_in_d_bits_source, 2'h0};
      automatic logic [151:0]    _GEN_48 = {144'h0, io_in_d_bits_source, 3'h0};
      automatic logic            _GEN_49 = io_in_a_valid & a_first_1;
      automatic logic [18:0]     a_set_wo_ready = _GEN_49 ? _GEN_1[18:0] : 19'h0;
      automatic logic            _GEN_50 = io_in_d_valid & d_first_1;
      automatic logic            _GEN_51 = _GEN_50 & ~d_release_ack;
      automatic logic            _GEN_52 = io_in_a_bits_source == io_in_d_bits_source;
      automatic logic            same_cycle_resp = _GEN_49 & _GEN_52;
      automatic logic [18:0]     _GEN_53 = {14'h0, io_in_d_bits_source};
      automatic logic            _GEN_54 = _GEN_51 & same_cycle_resp & ~reset;
      automatic logic            _GEN_55 = _GEN_51 & ~same_cycle_resp & ~reset;
      automatic logic [7:0]      _GEN_56 = {4'h0, io_in_d_bits_size};
      automatic logic            _GEN_57 =
        io_in_d_valid & d_first_2 & d_release_ack & ~reset;
      automatic logic [18:0]     _GEN_58 = inflight >> io_in_a_bits_source;
      automatic logic [18:0]     _GEN_59 = inflight >> _GEN_53;
      automatic logic [151:0]    _GEN_60 = inflight_sizes >> _GEN_48;
      automatic logic [18:0]     _GEN_61 = inflight_1 >> _GEN_53;
      automatic logic [151:0]    _GEN_62 = inflight_sizes_1 >> _GEN_48;
      if (_GEN_14) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & ~_GEN_20) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock carries invalid source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & ~_GEN_12) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & (|_GEN_11)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & _GEN_21) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock carries invalid grow param (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & _GEN_22) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock is corrupt (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_23) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_23 & ~_GEN_20) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_23 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm carries invalid source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_23 & ~_GEN_12) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_23 & (|_GEN_11)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_23 & _GEN_21) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm carries invalid grow param (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_23 & ~(|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_23 & _GEN_22) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_23 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm is corrupt (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25 & ~_GEN_24) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25
          & ~(_GEN_26 | _GEN_27
              & (_GEN_15 | _GEN_17 | _GEN_18 | (&(io_in_a_bits_address[27:26]))))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get carries invalid source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25 & (|_GEN_11)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get address not aligned to size (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get carries invalid param (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25 & _GEN_28) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get contains invalid mask (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get is corrupt (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & ~_GEN_29) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull carries invalid source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & (|_GEN_11)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull address not aligned to size (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull carries invalid param (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & _GEN_28) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull contains invalid mask (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & ~_GEN_29) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & (|_GEN_11)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial address not aligned to size (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial carries invalid param (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & (|(io_in_a_bits_mask & ~mask))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial contains invalid mask (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_33 & ~_GEN_32) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_33 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_33 & (|_GEN_11)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_33 & io_in_a_bits_param > 3'h4) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_33 & _GEN_28) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_34 & ~_GEN_32) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_34 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical carries invalid source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_34 & (|_GEN_11)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical address not aligned to size (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_34 & io_in_a_bits_param[2]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical carries invalid opcode param (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_34 & _GEN_28) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical contains invalid mask (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_35 & ~(_GEN_24 & _GEN_26)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_35 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint carries invalid source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_35 & (|_GEN_11)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint address not aligned to size (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_35 & (|(io_in_a_bits_param[2:1]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint carries invalid opcode param (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_35 & _GEN_28) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint contains invalid mask (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_35 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint is corrupt (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & ~reset & (&io_in_d_bits_opcode)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel has invalid opcode (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_36 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_36 & _GEN_37) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_36 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_36 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck is corrupt (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_36 & io_in_d_bits_denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck is denied (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_38 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_38) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid sink ID (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_38 & _GEN_37) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant smaller than a beat (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_38 & (&io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid cap param (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_38 & _GEN_39) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries toN param (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_38 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant is corrupt (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_40 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_40) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid sink ID (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_40 & _GEN_37) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData smaller than a beat (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_40 & (&io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid cap param (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_40 & _GEN_39) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries toN param (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_40 & ~_GEN_41) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData is denied but not corrupt (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck carries invalid param (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck is corrupt (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData carries invalid param (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & ~_GEN_41) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData is denied but not corrupt (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_44 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck carries invalid source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_44 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck carries invalid param (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_44 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck is corrupt (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_45 & io_in_a_bits_opcode != opcode) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel opcode changed within multibeat operation (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_45 & io_in_a_bits_param != param) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel param changed within multibeat operation (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_45 & io_in_a_bits_size != size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel size changed within multibeat operation (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_45 & io_in_a_bits_source != source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel source changed within multibeat operation (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_45 & io_in_a_bits_address != address) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel address changed with multibeat operation (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_46 & io_in_d_bits_opcode != opcode_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel opcode changed within multibeat operation (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_46 & io_in_d_bits_param != param_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel param changed within multibeat operation (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_46 & io_in_d_bits_size != size_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel size changed within multibeat operation (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_46 & io_in_d_bits_source != source_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel source changed within multibeat operation (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_46 & io_in_d_bits_sink != sink) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel sink changed with multibeat operation (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_46 & io_in_d_bits_denied != denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel denied changed with multibeat operation (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_2 & ~reset & _GEN_58[0]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel re-used a source ID (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_51 & ~reset & ~(_GEN_59[0] | same_cycle_resp)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_54
          & ~(io_in_d_bits_opcode == _GEN_5[io_in_a_bits_opcode]
              | io_in_d_bits_opcode == _GEN_4[io_in_a_bits_opcode])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_54 & io_in_a_bits_size != io_in_d_bits_size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_55
          & ~(io_in_d_bits_opcode == _GEN_5[_GEN_47[3:1]]
              | io_in_d_bits_opcode == _GEN_4[_GEN_47[3:1]])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_55 & _GEN_56 != {1'h0, _GEN_60[7:1]}) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_50 & a_first_1 & io_in_a_valid & _GEN_52 & ~d_release_ack & ~reset
          & ~(~io_in_d_ready | io_in_a_ready)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ready check\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(a_set_wo_ready != (_GEN_51 ? _GEN_3[18:0] : 19'h0)
              | a_set_wo_ready == 19'h0)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' and 'D' concurrent, despite minlatency > 0 (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight == 19'h0 | _plusarg_reader_out == 32'h0
              | watchdog < _plusarg_reader_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_57 & ~(_GEN_61[0])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_57 & _GEN_56 != {1'h0, _GEN_62[7:1]}) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight_1 == 19'h0 | _plusarg_reader_1_out == 32'h0
              | watchdog_1 < _plusarg_reader_1_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/subsystem/PeripheryBus.scala:65:7)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    automatic logic _GEN_63;
    _GEN_63 = io_in_d_ready & io_in_d_valid;
    if (reset) begin
      a_first_counter <= 9'h0;
      d_first_counter <= 9'h0;
      inflight <= 19'h0;
      inflight_opcodes <= 76'h0;
      inflight_sizes <= 152'h0;
      a_first_counter_1 <= 9'h0;
      d_first_counter_1 <= 9'h0;
      watchdog <= 32'h0;
      inflight_1 <= 19'h0;
      inflight_sizes_1 <= 152'h0;
      d_first_counter_2 <= 9'h0;
      watchdog_1 <= 32'h0;
    end
    else begin
      automatic logic         _GEN_64;
      automatic logic [270:0] _GEN_65 = 271'hFF << {263'h0, io_in_d_bits_source, 3'h0};
      automatic logic         _GEN_66;
      automatic logic [270:0] _GEN_67 = 271'hF << {264'h0, io_in_d_bits_source, 2'h0};
      automatic logic [258:0] _GEN_68 =
        {255'h0, _GEN_2 ? {io_in_a_bits_opcode, 1'h1} : 4'h0}
        << {252'h0, io_in_a_bits_source, 2'h0};
      automatic logic [259:0] _GEN_69 =
        {255'h0, _GEN_2 ? {io_in_a_bits_size, 1'h1} : 5'h0}
        << {252'h0, io_in_a_bits_source, 3'h0};
      _GEN_64 = _GEN_63 & d_first_1 & ~d_release_ack;
      _GEN_66 = _GEN_63 & d_first_2 & d_release_ack;
      if (_GEN_0) begin
        if (|a_first_counter)
          a_first_counter <= a_first_counter - 9'h1;
        else if (io_in_a_bits_opcode[2])
          a_first_counter <= 9'h0;
        else
          a_first_counter <= ~(_GEN[11:3]);
        if (a_first_1) begin
          if (io_in_a_bits_opcode[2])
            a_first_counter_1 <= 9'h0;
          else
            a_first_counter_1 <= ~(_GEN[11:3]);
        end
        else
          a_first_counter_1 <= a_first_counter_1 - 9'h1;
      end
      if (_GEN_63) begin
        automatic logic [26:0] _GEN_70 = 27'hFFF << io_in_d_bits_size;
        if (|d_first_counter)
          d_first_counter <= d_first_counter - 9'h1;
        else if (io_in_d_bits_opcode[0])
          d_first_counter <= ~(_GEN_70[11:3]);
        else
          d_first_counter <= 9'h0;
        if (d_first_1) begin
          if (io_in_d_bits_opcode[0])
            d_first_counter_1 <= ~(_GEN_70[11:3]);
          else
            d_first_counter_1 <= 9'h0;
        end
        else
          d_first_counter_1 <= d_first_counter_1 - 9'h1;
        if (d_first_2) begin
          if (io_in_d_bits_opcode[0])
            d_first_counter_2 <= ~(_GEN_70[11:3]);
          else
            d_first_counter_2 <= 9'h0;
        end
        else
          d_first_counter_2 <= d_first_counter_2 - 9'h1;
        watchdog_1 <= 32'h0;
      end
      else
        watchdog_1 <= watchdog_1 + 32'h1;
      inflight <=
        (inflight | (_GEN_2 ? _GEN_1[18:0] : 19'h0)) & ~(_GEN_64 ? _GEN_3[18:0] : 19'h0);
      inflight_opcodes <=
        (inflight_opcodes | (_GEN_2 ? _GEN_68[75:0] : 76'h0))
        & ~(_GEN_64 ? _GEN_67[75:0] : 76'h0);
      inflight_sizes <=
        (inflight_sizes | (_GEN_2 ? _GEN_69[151:0] : 152'h0))
        & ~(_GEN_64 ? _GEN_65[151:0] : 152'h0);
      if (_GEN_0 | _GEN_63)
        watchdog <= 32'h0;
      else
        watchdog <= watchdog + 32'h1;
      inflight_1 <= inflight_1 & ~(_GEN_66 ? _GEN_3[18:0] : 19'h0);
      inflight_sizes_1 <= inflight_sizes_1 & ~(_GEN_66 ? _GEN_65[151:0] : 152'h0);
    end
    if (_GEN_0 & ~(|a_first_counter)) begin
      opcode <= io_in_a_bits_opcode;
      param <= io_in_a_bits_param;
      size <= io_in_a_bits_size;
      source <= io_in_a_bits_source;
      address <= io_in_a_bits_address;
    end
    if (_GEN_63 & ~(|d_first_counter)) begin
      opcode_1 <= io_in_d_bits_opcode;
      param_1 <= io_in_d_bits_param;
      size_1 <= io_in_d_bits_size;
      source_1 <= io_in_d_bits_source;
      sink <= io_in_d_bits_sink;
      denied <= io_in_d_bits_denied;
    end
  end // always @(posedge)
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader (
    .out (_plusarg_reader_out)
  );
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader_1 (
    .out (_plusarg_reader_1_out)
  );
endmodule

module TLAtomicAutomata_cbus(
  input         clock,
                reset,
                auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
                auto_in_a_bits_param,
  input  [3:0]  auto_in_a_bits_size,
  input  [4:0]  auto_in_a_bits_source,
  input  [27:0] auto_in_a_bits_address,
  input  [7:0]  auto_in_a_bits_mask,
  input  [63:0] auto_in_a_bits_data,
  input         auto_in_a_bits_corrupt,
                auto_in_d_ready,
                auto_out_a_ready,
                auto_out_d_valid,
  input  [2:0]  auto_out_d_bits_opcode,
  input  [1:0]  auto_out_d_bits_param,
  input  [3:0]  auto_out_d_bits_size,
  input  [4:0]  auto_out_d_bits_source,
  input         auto_out_d_bits_sink,
                auto_out_d_bits_denied,
  input  [63:0] auto_out_d_bits_data,
  input         auto_out_d_bits_corrupt,
  output        auto_in_a_ready,
                auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
  output [1:0]  auto_in_d_bits_param,
  output [3:0]  auto_in_d_bits_size,
  output [4:0]  auto_in_d_bits_source,
  output        auto_in_d_bits_sink,
                auto_in_d_bits_denied,
  output [63:0] auto_in_d_bits_data,
  output        auto_in_d_bits_corrupt,
                auto_out_a_valid,
  output [2:0]  auto_out_a_bits_opcode,
                auto_out_a_bits_param,
  output [3:0]  auto_out_a_bits_size,
  output [4:0]  auto_out_a_bits_source,
  output [27:0] auto_out_a_bits_address,
  output [7:0]  auto_out_a_bits_mask,
  output [63:0] auto_out_a_bits_data,
  output        auto_out_a_bits_corrupt,
                auto_out_d_ready
);

  wire        source_i_ready;
  reg  [1:0]  cam_s_0_state;
  reg  [2:0]  cam_a_0_bits_opcode;
  reg  [2:0]  cam_a_0_bits_param;
  reg  [3:0]  cam_a_0_bits_size;
  reg  [4:0]  cam_a_0_bits_source;
  reg  [27:0] cam_a_0_bits_address;
  reg  [7:0]  cam_a_0_bits_mask;
  reg  [63:0] cam_a_0_bits_data;
  reg         cam_a_0_bits_corrupt;
  reg         cam_a_0_fifoId;
  reg  [3:0]  cam_a_0_lut;
  reg  [63:0] cam_d_0_data;
  reg         cam_d_0_denied;
  reg         cam_d_0_corrupt;
  wire        cam_free_0 = cam_s_0_state == 2'h0;
  wire        winner_0 = cam_s_0_state == 2'h2;
  wire        _GEN = auto_in_a_bits_size < 4'h4;
  wire        _GEN_0 =
    {auto_in_a_bits_address[27],
     auto_in_a_bits_address[25],
     auto_in_a_bits_address[16],
     ~(auto_in_a_bits_address[13])} == 4'h0;
  wire        a_isSupported =
    auto_in_a_bits_opcode == 3'h3
      ? _GEN & _GEN_0
      : auto_in_a_bits_opcode != 3'h2 | _GEN & _GEN_0;
  wire [3:0]  _GEN_1 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[0], cam_d_0_data[0]};
  wire [3:0]  _GEN_2 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[1], cam_d_0_data[1]};
  wire [3:0]  _GEN_3 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[2], cam_d_0_data[2]};
  wire [3:0]  _GEN_4 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[3], cam_d_0_data[3]};
  wire [3:0]  _GEN_5 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[4], cam_d_0_data[4]};
  wire [3:0]  _GEN_6 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[5], cam_d_0_data[5]};
  wire [3:0]  _GEN_7 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[6], cam_d_0_data[6]};
  wire [3:0]  _GEN_8 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[7], cam_d_0_data[7]};
  wire [3:0]  _GEN_9 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[8], cam_d_0_data[8]};
  wire [3:0]  _GEN_10 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[9], cam_d_0_data[9]};
  wire [3:0]  _GEN_11 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[10], cam_d_0_data[10]};
  wire [3:0]  _GEN_12 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[11], cam_d_0_data[11]};
  wire [3:0]  _GEN_13 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[12], cam_d_0_data[12]};
  wire [3:0]  _GEN_14 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[13], cam_d_0_data[13]};
  wire [3:0]  _GEN_15 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[14], cam_d_0_data[14]};
  wire [3:0]  _GEN_16 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[15], cam_d_0_data[15]};
  wire [3:0]  _GEN_17 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[16], cam_d_0_data[16]};
  wire [3:0]  _GEN_18 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[17], cam_d_0_data[17]};
  wire [3:0]  _GEN_19 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[18], cam_d_0_data[18]};
  wire [3:0]  _GEN_20 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[19], cam_d_0_data[19]};
  wire [3:0]  _GEN_21 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[20], cam_d_0_data[20]};
  wire [3:0]  _GEN_22 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[21], cam_d_0_data[21]};
  wire [3:0]  _GEN_23 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[22], cam_d_0_data[22]};
  wire [3:0]  _GEN_24 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[23], cam_d_0_data[23]};
  wire [3:0]  _GEN_25 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[24], cam_d_0_data[24]};
  wire [3:0]  _GEN_26 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[25], cam_d_0_data[25]};
  wire [3:0]  _GEN_27 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[26], cam_d_0_data[26]};
  wire [3:0]  _GEN_28 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[27], cam_d_0_data[27]};
  wire [3:0]  _GEN_29 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[28], cam_d_0_data[28]};
  wire [3:0]  _GEN_30 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[29], cam_d_0_data[29]};
  wire [3:0]  _GEN_31 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[30], cam_d_0_data[30]};
  wire [3:0]  _GEN_32 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[31], cam_d_0_data[31]};
  wire [3:0]  _GEN_33 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[32], cam_d_0_data[32]};
  wire [3:0]  _GEN_34 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[33], cam_d_0_data[33]};
  wire [3:0]  _GEN_35 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[34], cam_d_0_data[34]};
  wire [3:0]  _GEN_36 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[35], cam_d_0_data[35]};
  wire [3:0]  _GEN_37 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[36], cam_d_0_data[36]};
  wire [3:0]  _GEN_38 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[37], cam_d_0_data[37]};
  wire [3:0]  _GEN_39 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[38], cam_d_0_data[38]};
  wire [3:0]  _GEN_40 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[39], cam_d_0_data[39]};
  wire [3:0]  _GEN_41 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[40], cam_d_0_data[40]};
  wire [3:0]  _GEN_42 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[41], cam_d_0_data[41]};
  wire [3:0]  _GEN_43 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[42], cam_d_0_data[42]};
  wire [3:0]  _GEN_44 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[43], cam_d_0_data[43]};
  wire [3:0]  _GEN_45 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[44], cam_d_0_data[44]};
  wire [3:0]  _GEN_46 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[45], cam_d_0_data[45]};
  wire [3:0]  _GEN_47 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[46], cam_d_0_data[46]};
  wire [3:0]  _GEN_48 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[47], cam_d_0_data[47]};
  wire [3:0]  _GEN_49 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[48], cam_d_0_data[48]};
  wire [3:0]  _GEN_50 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[49], cam_d_0_data[49]};
  wire [3:0]  _GEN_51 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[50], cam_d_0_data[50]};
  wire [3:0]  _GEN_52 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[51], cam_d_0_data[51]};
  wire [3:0]  _GEN_53 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[52], cam_d_0_data[52]};
  wire [3:0]  _GEN_54 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[53], cam_d_0_data[53]};
  wire [3:0]  _GEN_55 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[54], cam_d_0_data[54]};
  wire [3:0]  _GEN_56 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[55], cam_d_0_data[55]};
  wire [3:0]  _GEN_57 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[56], cam_d_0_data[56]};
  wire [3:0]  _GEN_58 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[57], cam_d_0_data[57]};
  wire [3:0]  _GEN_59 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[58], cam_d_0_data[58]};
  wire [3:0]  _GEN_60 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[59], cam_d_0_data[59]};
  wire [3:0]  _GEN_61 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[60], cam_d_0_data[60]};
  wire [3:0]  _GEN_62 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[61], cam_d_0_data[61]};
  wire [3:0]  _GEN_63 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[62], cam_d_0_data[62]};
  wire [3:0]  _GEN_64 = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[63], cam_d_0_data[63]};
  wire [6:0]  _GEN_65 = ~(cam_a_0_bits_mask[6:0]) | cam_a_0_bits_mask[7:1];
  wire [6:0]  _GEN_66 =
    {cam_a_0_bits_data[55],
     cam_a_0_bits_data[47],
     cam_a_0_bits_data[39],
     cam_a_0_bits_data[31],
     cam_a_0_bits_data[23],
     cam_a_0_bits_data[15],
     cam_a_0_bits_data[7]} & ~_GEN_65;
  wire [6:0]  _GEN_67 =
    {cam_d_0_data[55],
     cam_d_0_data[47],
     cam_d_0_data[39],
     cam_d_0_data[31],
     cam_d_0_data[23],
     cam_d_0_data[15],
     cam_d_0_data[7]} & ~_GEN_65;
  wire [5:0]  _GEN_68 = _GEN_66[6:1] | _GEN_66[5:0];
  wire [3:0]  _GEN_69 = _GEN_68[5:2] | _GEN_68[3:0];
  wire        _GEN_70 = _GEN_68[1] | _GEN_66[0];
  wire [5:0]  _GEN_71 = _GEN_67[6:1] | _GEN_67[5:0];
  wire [3:0]  _GEN_72 = _GEN_71[5:2] | _GEN_71[3:0];
  wire        _GEN_73 = _GEN_71[1] | _GEN_67[0];
  wire [63:0] wide_mask =
    {{8{cam_a_0_bits_mask[7]}},
     {8{cam_a_0_bits_mask[6]}},
     {8{cam_a_0_bits_mask[5]}},
     {8{cam_a_0_bits_mask[4]}},
     {8{cam_a_0_bits_mask[3]}},
     {8{cam_a_0_bits_mask[2]}},
     {8{cam_a_0_bits_mask[1]}},
     {8{cam_a_0_bits_mask[0]}}};
  wire [63:0] a_a_ext =
    cam_a_0_bits_data & wide_mask
    | {{8{_GEN_69[3] | _GEN_70}},
       {8{_GEN_69[2] | _GEN_68[0]}},
       {8{_GEN_69[1] | _GEN_66[0]}},
       {8{_GEN_69[0]}},
       {8{_GEN_70}},
       {8{_GEN_68[0]}},
       {8{_GEN_66[0]}},
       8'h0};
  wire [63:0] a_d_ext =
    cam_d_0_data & wide_mask
    | {{8{_GEN_72[3] | _GEN_73}},
       {8{_GEN_72[2] | _GEN_71[0]}},
       {8{_GEN_72[1] | _GEN_67[0]}},
       {8{_GEN_72[0]}},
       {8{_GEN_73}},
       {8{_GEN_71[0]}},
       {8{_GEN_67[0]}},
       8'h0};
  wire [63:0] adder_out = a_a_ext + ({64{~(cam_a_0_bits_param[2])}} ^ a_d_ext);
  wire        a_allow =
    ~(((&cam_s_0_state) | winner_0) & ~cam_a_0_fifoId) & (a_isSupported | cam_free_0);
  wire        nodeIn_a_ready = source_i_ready & a_allow;
  wire        source_i_valid = auto_in_a_valid & a_allow;
  wire        _GEN_74 = cam_a_0_bits_size > 4'h2;
  wire        source_c_bits_a_mask_size = cam_a_0_bits_size[1:0] == 2'h2;
  wire        source_c_bits_a_mask_acc =
    _GEN_74 | source_c_bits_a_mask_size & ~(cam_a_0_bits_address[2]);
  wire        source_c_bits_a_mask_acc_1 =
    _GEN_74 | source_c_bits_a_mask_size & cam_a_0_bits_address[2];
  wire        source_c_bits_a_mask_size_1 = cam_a_0_bits_size[1:0] == 2'h1;
  wire        source_c_bits_a_mask_eq_2 =
    ~(cam_a_0_bits_address[2]) & ~(cam_a_0_bits_address[1]);
  wire        source_c_bits_a_mask_acc_2 =
    source_c_bits_a_mask_acc | source_c_bits_a_mask_size_1 & source_c_bits_a_mask_eq_2;
  wire        source_c_bits_a_mask_eq_3 =
    ~(cam_a_0_bits_address[2]) & cam_a_0_bits_address[1];
  wire        source_c_bits_a_mask_acc_3 =
    source_c_bits_a_mask_acc | source_c_bits_a_mask_size_1 & source_c_bits_a_mask_eq_3;
  wire        source_c_bits_a_mask_eq_4 =
    cam_a_0_bits_address[2] & ~(cam_a_0_bits_address[1]);
  wire        source_c_bits_a_mask_acc_4 =
    source_c_bits_a_mask_acc_1 | source_c_bits_a_mask_size_1 & source_c_bits_a_mask_eq_4;
  wire        source_c_bits_a_mask_eq_5 =
    cam_a_0_bits_address[2] & cam_a_0_bits_address[1];
  wire        source_c_bits_a_mask_acc_5 =
    source_c_bits_a_mask_acc_1 | source_c_bits_a_mask_size_1 & source_c_bits_a_mask_eq_5;
  reg  [8:0]  beatsLeft;
  wire        idle = beatsLeft == 9'h0;
  wire        winner_1 = ~winner_0 & source_i_valid;
  wire        _GEN_75 = winner_0 | source_i_valid;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (~reset & ~(~winner_0 | ~winner_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Arbiter.scala:77 assert((prefixOR zip winner) map { case (p,w) => !p || !w } reduce {_ && _})\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_GEN_75 | winner_0 | winner_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Arbiter.scala:79 assert (!valids.reduce(_||_) || winner.reduce(_||_))\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  reg         state_0;
  reg         state_1;
  wire        muxState_0 = idle ? winner_0 : state_0;
  wire        muxState_1 = idle ? winner_1 : state_1;
  assign source_i_ready = auto_out_a_ready & (idle ? ~winner_0 : state_1);
  wire        nodeOut_a_valid =
    idle ? _GEN_75 : state_0 & winner_0 | state_1 & source_i_valid;
  reg  [8:0]  d_first_counter;
  wire        d_first = d_first_counter == 9'h0;
  wire        d_cam_sel_0 =
    cam_a_0_bits_source == auto_out_d_bits_source & (|cam_s_0_state);
  wire        d_ackd = auto_out_d_bits_opcode == 3'h1;
  wire        d_drop = d_first & d_ackd & d_cam_sel_0;
  wire        d_replace = d_first & auto_out_d_bits_opcode == 3'h0 & d_cam_sel_0;
  wire        nodeIn_d_valid = auto_out_d_valid & ~d_drop;
  wire        nodeOut_d_ready = auto_in_d_ready | d_drop;
  wire [2:0]  nodeIn_d_bits_opcode = d_replace ? 3'h1 : auto_out_d_bits_opcode;
  wire        nodeIn_d_bits_corrupt =
    d_replace ? cam_d_0_corrupt | auto_out_d_bits_denied : auto_out_d_bits_corrupt;
  wire        nodeIn_d_bits_denied = d_replace & cam_d_0_denied | auto_out_d_bits_denied;
  always @(posedge clock) begin
    automatic logic _GEN_76;
    automatic logic _GEN_77;
    automatic logic _GEN_78;
    _GEN_76 = source_i_ready & source_i_valid & ~a_isSupported & cam_free_0;
    _GEN_77 = nodeOut_d_ready & auto_out_d_valid;
    _GEN_78 = _GEN_77 & d_first;
    if (reset) begin
      cam_s_0_state <= 2'h0;
      beatsLeft <= 9'h0;
      state_0 <= 1'h0;
      state_1 <= 1'h0;
      d_first_counter <= 9'h0;
    end
    else begin
      if (_GEN_78 & d_cam_sel_0)
        cam_s_0_state <= {d_ackd, 1'h0};
      else if (auto_out_a_ready & (idle | state_0) & winner_0)
        cam_s_0_state <= 2'h1;
      else if (_GEN_76)
        cam_s_0_state <= 2'h3;
      if (idle & auto_out_a_ready) begin
        if (winner_1 & ~(auto_in_a_bits_opcode[2])) begin
          automatic logic [26:0] _GEN_79 = 27'hFFF << auto_in_a_bits_size;
          beatsLeft <= ~(_GEN_79[11:3]);
        end
        else
          beatsLeft <= 9'h0;
      end
      else
        beatsLeft <= beatsLeft - {8'h0, auto_out_a_ready & nodeOut_a_valid};
      if (idle) begin
        state_0 <= winner_0;
        state_1 <= winner_1;
      end
      if (_GEN_77) begin
        if (d_first) begin
          if (auto_out_d_bits_opcode[0]) begin
            automatic logic [26:0] _GEN_80 = 27'hFFF << auto_out_d_bits_size;
            d_first_counter <= ~(_GEN_80[11:3]);
          end
          else
            d_first_counter <= 9'h0;
        end
        else
          d_first_counter <= d_first_counter - 9'h1;
      end
    end
    if (_GEN_76) begin
      automatic logic [3:0][3:0] _GEN_81 = '{4'hC, 4'h8, 4'hE, 4'h6};
      cam_a_0_bits_opcode <= auto_in_a_bits_opcode;
      cam_a_0_bits_param <= auto_in_a_bits_param;
      cam_a_0_bits_size <= auto_in_a_bits_size;
      cam_a_0_bits_source <= auto_in_a_bits_source;
      cam_a_0_bits_address <= auto_in_a_bits_address;
      cam_a_0_bits_mask <= auto_in_a_bits_mask;
      cam_a_0_bits_data <= auto_in_a_bits_data;
      cam_a_0_bits_corrupt <= auto_in_a_bits_corrupt;
      cam_a_0_lut <= _GEN_81[auto_in_a_bits_param[1:0]];
    end
    cam_a_0_fifoId <= ~_GEN_76 & cam_a_0_fifoId;
    if (_GEN_78 & d_cam_sel_0 & d_ackd) begin
      cam_d_0_data <= auto_out_d_bits_data;
      cam_d_0_denied <= auto_out_d_bits_denied;
      cam_d_0_corrupt <= auto_out_d_bits_corrupt;
    end
  end // always @(posedge)
  TLMonitor_11 monitor (
    .clock                (clock),
    .reset                (reset),
    .io_in_a_ready        (nodeIn_a_ready),
    .io_in_a_valid        (auto_in_a_valid),
    .io_in_a_bits_opcode  (auto_in_a_bits_opcode),
    .io_in_a_bits_param   (auto_in_a_bits_param),
    .io_in_a_bits_size    (auto_in_a_bits_size),
    .io_in_a_bits_source  (auto_in_a_bits_source),
    .io_in_a_bits_address (auto_in_a_bits_address),
    .io_in_a_bits_mask    (auto_in_a_bits_mask),
    .io_in_a_bits_corrupt (auto_in_a_bits_corrupt),
    .io_in_d_ready        (auto_in_d_ready),
    .io_in_d_valid        (nodeIn_d_valid),
    .io_in_d_bits_opcode  (nodeIn_d_bits_opcode),
    .io_in_d_bits_param   (auto_out_d_bits_param),
    .io_in_d_bits_size    (auto_out_d_bits_size),
    .io_in_d_bits_source  (auto_out_d_bits_source),
    .io_in_d_bits_sink    (auto_out_d_bits_sink),
    .io_in_d_bits_denied  (nodeIn_d_bits_denied),
    .io_in_d_bits_corrupt (nodeIn_d_bits_corrupt)
  );
  assign auto_in_a_ready = nodeIn_a_ready;
  assign auto_in_d_valid = nodeIn_d_valid;
  assign auto_in_d_bits_opcode = nodeIn_d_bits_opcode;
  assign auto_in_d_bits_param = auto_out_d_bits_param;
  assign auto_in_d_bits_size = auto_out_d_bits_size;
  assign auto_in_d_bits_source = auto_out_d_bits_source;
  assign auto_in_d_bits_sink = auto_out_d_bits_sink;
  assign auto_in_d_bits_denied = nodeIn_d_bits_denied;
  assign auto_in_d_bits_data = d_replace ? cam_d_0_data : auto_out_d_bits_data;
  assign auto_in_d_bits_corrupt = nodeIn_d_bits_corrupt;
  assign auto_out_a_valid = nodeOut_a_valid;
  assign auto_out_a_bits_opcode =
    muxState_1 ? (a_isSupported ? auto_in_a_bits_opcode : 3'h4) : 3'h0;
  assign auto_out_a_bits_param = muxState_1 & a_isSupported ? auto_in_a_bits_param : 3'h0;
  assign auto_out_a_bits_size =
    (muxState_0 ? cam_a_0_bits_size : 4'h0) | (muxState_1 ? auto_in_a_bits_size : 4'h0);
  assign auto_out_a_bits_source =
    (muxState_0 ? cam_a_0_bits_source : 5'h0)
    | (muxState_1 ? auto_in_a_bits_source : 5'h0);
  assign auto_out_a_bits_address =
    (muxState_0 ? cam_a_0_bits_address : 28'h0)
    | (muxState_1 ? auto_in_a_bits_address : 28'h0);
  assign auto_out_a_bits_mask =
    (muxState_0
       ? {source_c_bits_a_mask_acc_5 | source_c_bits_a_mask_eq_5
            & cam_a_0_bits_address[0],
          source_c_bits_a_mask_acc_5 | source_c_bits_a_mask_eq_5
            & ~(cam_a_0_bits_address[0]),
          source_c_bits_a_mask_acc_4 | source_c_bits_a_mask_eq_4
            & cam_a_0_bits_address[0],
          source_c_bits_a_mask_acc_4 | source_c_bits_a_mask_eq_4
            & ~(cam_a_0_bits_address[0]),
          source_c_bits_a_mask_acc_3 | source_c_bits_a_mask_eq_3
            & cam_a_0_bits_address[0],
          source_c_bits_a_mask_acc_3 | source_c_bits_a_mask_eq_3
            & ~(cam_a_0_bits_address[0]),
          source_c_bits_a_mask_acc_2 | source_c_bits_a_mask_eq_2
            & cam_a_0_bits_address[0],
          source_c_bits_a_mask_acc_2 | source_c_bits_a_mask_eq_2
            & ~(cam_a_0_bits_address[0])}
       : 8'h0) | (muxState_1 ? auto_in_a_bits_mask : 8'h0);
  assign auto_out_a_bits_data =
    (muxState_0
       ? (cam_a_0_bits_opcode[0]
            ? {_GEN_64[0],
               _GEN_63[0],
               _GEN_62[0],
               _GEN_61[0],
               _GEN_60[0],
               _GEN_59[0],
               _GEN_58[0],
               _GEN_57[0],
               _GEN_56[0],
               _GEN_55[0],
               _GEN_54[0],
               _GEN_53[0],
               _GEN_52[0],
               _GEN_51[0],
               _GEN_50[0],
               _GEN_49[0],
               _GEN_48[0],
               _GEN_47[0],
               _GEN_46[0],
               _GEN_45[0],
               _GEN_44[0],
               _GEN_43[0],
               _GEN_42[0],
               _GEN_41[0],
               _GEN_40[0],
               _GEN_39[0],
               _GEN_38[0],
               _GEN_37[0],
               _GEN_36[0],
               _GEN_35[0],
               _GEN_34[0],
               _GEN_33[0],
               _GEN_32[0],
               _GEN_31[0],
               _GEN_30[0],
               _GEN_29[0],
               _GEN_28[0],
               _GEN_27[0],
               _GEN_26[0],
               _GEN_25[0],
               _GEN_24[0],
               _GEN_23[0],
               _GEN_22[0],
               _GEN_21[0],
               _GEN_20[0],
               _GEN_19[0],
               _GEN_18[0],
               _GEN_17[0],
               _GEN_16[0],
               _GEN_15[0],
               _GEN_14[0],
               _GEN_13[0],
               _GEN_12[0],
               _GEN_11[0],
               _GEN_10[0],
               _GEN_9[0],
               _GEN_8[0],
               _GEN_7[0],
               _GEN_6[0],
               _GEN_5[0],
               _GEN_4[0],
               _GEN_3[0],
               _GEN_2[0],
               _GEN_1[0]}
            : cam_a_0_bits_param[2]
                ? adder_out
                : cam_a_0_bits_param[0] == (a_a_ext[63] == a_d_ext[63]
                                              ? ~(adder_out[63])
                                              : cam_a_0_bits_param[1] == a_a_ext[63])
                    ? cam_a_0_bits_data
                    : cam_d_0_data)
       : 64'h0) | (muxState_1 ? auto_in_a_bits_data : 64'h0);
  assign auto_out_a_bits_corrupt =
    muxState_0 & (cam_a_0_bits_corrupt | cam_d_0_corrupt) | muxState_1
    & auto_in_a_bits_corrupt;
  assign auto_out_d_ready = nodeOut_d_ready;
endmodule

module TLMonitor_12(
  input        clock,
               reset,
               io_in_a_ready,
               io_in_a_valid,
  input [2:0]  io_in_a_bits_opcode,
               io_in_a_bits_param,
  input [3:0]  io_in_a_bits_size,
  input [4:0]  io_in_a_bits_source,
  input [13:0] io_in_a_bits_address,
  input [7:0]  io_in_a_bits_mask,
  input        io_in_a_bits_corrupt,
               io_in_d_ready,
               io_in_d_valid,
  input [2:0]  io_in_d_bits_opcode,
  input [3:0]  io_in_d_bits_size,
  input [4:0]  io_in_d_bits_source,
  input        io_in_d_bits_corrupt
);

  wire [31:0]  _plusarg_reader_1_out;
  wire [31:0]  _plusarg_reader_out;
  wire [26:0]  _GEN = 27'hFFF << io_in_a_bits_size;
  wire         _GEN_0 = io_in_a_ready & io_in_a_valid;
  reg  [8:0]   a_first_counter;
  reg  [2:0]   opcode;
  reg  [2:0]   param;
  reg  [3:0]   size;
  reg  [4:0]   source;
  reg  [13:0]  address;
  reg  [8:0]   d_first_counter;
  reg  [2:0]   opcode_1;
  reg  [1:0]   param_1;
  reg  [3:0]   size_1;
  reg  [4:0]   source_1;
  reg          sink;
  reg          denied;
  reg  [18:0]  inflight;
  reg  [75:0]  inflight_opcodes;
  reg  [151:0] inflight_sizes;
  reg  [8:0]   a_first_counter_1;
  wire         a_first_1 = a_first_counter_1 == 9'h0;
  reg  [8:0]   d_first_counter_1;
  wire         d_first_1 = d_first_counter_1 == 9'h0;
  wire [31:0]  _GEN_1 = 32'h1 << io_in_a_bits_source;
  wire         _GEN_2 = _GEN_0 & a_first_1;
  wire         d_release_ack = io_in_d_bits_opcode == 3'h6;
  wire [31:0]  _GEN_3 = 32'h1 << io_in_d_bits_source;
  reg  [31:0]  watchdog;
  reg  [18:0]  inflight_1;
  reg  [151:0] inflight_sizes_1;
  reg  [8:0]   d_first_counter_2;
  wire         d_first_2 = d_first_counter_2 == 9'h0;
  reg  [31:0]  watchdog_1;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      automatic logic [7:0][2:0] _GEN_4 =
        '{3'h4, 3'h5, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic [7:0][2:0] _GEN_5 =
        '{3'h4, 3'h4, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic            _GEN_6 = io_in_a_bits_source[4:3] == 2'h0;
      automatic logic            _GEN_7 = io_in_a_bits_source[4:3] == 2'h1;
      automatic logic            _GEN_8 = io_in_a_bits_source == 5'h10;
      automatic logic            _GEN_9 = io_in_a_bits_source == 5'h11;
      automatic logic            _GEN_10 = io_in_a_bits_source == 5'h12;
      automatic logic            source_ok = _GEN_6 | _GEN_7 | _GEN_8 | _GEN_9 | _GEN_10;
      automatic logic [11:0]     _GEN_11 = io_in_a_bits_address[11:0] & ~(_GEN[11:0]);
      automatic logic            _GEN_12 = io_in_a_bits_size > 4'h2;
      automatic logic            mask_size = io_in_a_bits_size[1:0] == 2'h2;
      automatic logic            mask_acc =
        _GEN_12 | mask_size & ~(io_in_a_bits_address[2]);
      automatic logic            mask_acc_1 =
        _GEN_12 | mask_size & io_in_a_bits_address[2];
      automatic logic            mask_size_1 = io_in_a_bits_size[1:0] == 2'h1;
      automatic logic            mask_eq_2 =
        ~(io_in_a_bits_address[2]) & ~(io_in_a_bits_address[1]);
      automatic logic            mask_acc_2 = mask_acc | mask_size_1 & mask_eq_2;
      automatic logic            mask_eq_3 =
        ~(io_in_a_bits_address[2]) & io_in_a_bits_address[1];
      automatic logic            mask_acc_3 = mask_acc | mask_size_1 & mask_eq_3;
      automatic logic            mask_eq_4 =
        io_in_a_bits_address[2] & ~(io_in_a_bits_address[1]);
      automatic logic            mask_acc_4 = mask_acc_1 | mask_size_1 & mask_eq_4;
      automatic logic            mask_eq_5 =
        io_in_a_bits_address[2] & io_in_a_bits_address[1];
      automatic logic            mask_acc_5 = mask_acc_1 | mask_size_1 & mask_eq_5;
      automatic logic [7:0]      mask =
        {mask_acc_5 | mask_eq_5 & io_in_a_bits_address[0],
         mask_acc_5 | mask_eq_5 & ~(io_in_a_bits_address[0]),
         mask_acc_4 | mask_eq_4 & io_in_a_bits_address[0],
         mask_acc_4 | mask_eq_4 & ~(io_in_a_bits_address[0]),
         mask_acc_3 | mask_eq_3 & io_in_a_bits_address[0],
         mask_acc_3 | mask_eq_3 & ~(io_in_a_bits_address[0]),
         mask_acc_2 | mask_eq_2 & io_in_a_bits_address[0],
         mask_acc_2 | mask_eq_2 & ~(io_in_a_bits_address[0])};
      automatic logic            _GEN_13 = io_in_a_bits_size < 4'hD;
      automatic logic            _GEN_14 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_15 = _GEN_13 & (&(io_in_a_bits_address[13:12]));
      automatic logic            _GEN_16 = _GEN_8 & io_in_a_bits_size == 4'h6 & _GEN_15;
      automatic logic            _GEN_17 = io_in_a_bits_param > 3'h2;
      automatic logic            _GEN_18 = io_in_a_bits_mask != 8'hFF;
      automatic logic            _GEN_19 =
        io_in_a_valid & (&io_in_a_bits_opcode) & ~reset;
      automatic logic            _GEN_20 =
        _GEN_13 & (_GEN_6 | _GEN_7 | _GEN_8 | _GEN_9 | _GEN_10);
      automatic logic            _GEN_21 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_22 = io_in_a_bits_mask != mask;
      automatic logic            _GEN_23 = _GEN_20 & _GEN_15;
      automatic logic            _GEN_24 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_25 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_26 =
        _GEN_20 & io_in_a_bits_size < 4'h4 & (&(io_in_a_bits_address[13:12]));
      automatic logic            _GEN_27 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_28 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h3 & ~reset;
      automatic logic            _GEN_29 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h5 & ~reset;
      automatic logic            source_ok_1 =
        io_in_d_bits_source[4:3] == 2'h0 | io_in_d_bits_source[4:3] == 2'h1
        | io_in_d_bits_source == 5'h10 | io_in_d_bits_source == 5'h11
        | io_in_d_bits_source == 5'h12;
      automatic logic            _GEN_30 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_31 = io_in_d_bits_size < 4'h3;
      automatic logic            _GEN_32 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_33 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h5 & ~reset;
      automatic logic            _GEN_34 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_35 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_36 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_37 = io_in_a_valid & (|a_first_counter) & ~reset;
      automatic logic            _GEN_38 = io_in_d_valid & (|d_first_counter) & ~reset;
      automatic logic [75:0]     _GEN_39 =
        inflight_opcodes >> {69'h0, io_in_d_bits_source, 2'h0};
      automatic logic [151:0]    _GEN_40 = {144'h0, io_in_d_bits_source, 3'h0};
      automatic logic            _GEN_41 = io_in_a_valid & a_first_1;
      automatic logic [18:0]     a_set_wo_ready = _GEN_41 ? _GEN_1[18:0] : 19'h0;
      automatic logic            _GEN_42 = io_in_d_valid & d_first_1;
      automatic logic            _GEN_43 = _GEN_42 & ~d_release_ack;
      automatic logic            _GEN_44 = io_in_a_bits_source == io_in_d_bits_source;
      automatic logic            same_cycle_resp = _GEN_41 & _GEN_44;
      automatic logic [18:0]     _GEN_45 = {14'h0, io_in_d_bits_source};
      automatic logic            _GEN_46 = _GEN_43 & same_cycle_resp & ~reset;
      automatic logic            _GEN_47 = _GEN_43 & ~same_cycle_resp & ~reset;
      automatic logic [7:0]      _GEN_48 = {4'h0, io_in_d_bits_size};
      automatic logic            _GEN_49 =
        io_in_d_valid & d_first_2 & d_release_ack & ~reset;
      automatic logic [18:0]     _GEN_50 = inflight >> io_in_a_bits_source;
      automatic logic [18:0]     _GEN_51 = inflight >> _GEN_45;
      automatic logic [151:0]    _GEN_52 = inflight_sizes >> _GEN_40;
      automatic logic [18:0]     _GEN_53 = inflight_1 >> _GEN_45;
      automatic logic [151:0]    _GEN_54 = inflight_sizes_1 >> _GEN_40;
      if (_GEN_14) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & ~_GEN_16) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock carries invalid source ID (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & ~_GEN_12) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & (|_GEN_11)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & _GEN_17) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock carries invalid grow param (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & _GEN_18) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock is corrupt (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & ~_GEN_16) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm carries invalid source ID (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & ~_GEN_12) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & (|_GEN_11)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & _GEN_17) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm carries invalid grow param (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & ~(|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & _GEN_18) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm is corrupt (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_21 & ~_GEN_20) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_21 & ~_GEN_15) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_21 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get carries invalid source ID (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_21 & (|_GEN_11)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get address not aligned to size (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_21 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get carries invalid param (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_21 & _GEN_22) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get contains invalid mask (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_21 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get is corrupt (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_24 & ~_GEN_23) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_24 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull carries invalid source ID (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_24 & (|_GEN_11)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull address not aligned to size (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_24 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull carries invalid param (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_24 & _GEN_22) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull contains invalid mask (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25 & ~_GEN_23) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25 & (|_GEN_11)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial address not aligned to size (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial carries invalid param (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25 & (|(io_in_a_bits_mask & ~mask))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial contains invalid mask (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & ~_GEN_26) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & (|_GEN_11)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & io_in_a_bits_param > 3'h4) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & _GEN_22) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & ~_GEN_26) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical carries invalid source ID (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & (|_GEN_11)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical address not aligned to size (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & io_in_a_bits_param[2]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical carries invalid opcode param (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & _GEN_22) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical contains invalid mask (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_29 & ~_GEN_23) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_29 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint carries invalid source ID (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_29 & (|_GEN_11)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint address not aligned to size (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_29 & (|(io_in_a_bits_param[2:1]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint carries invalid opcode param (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_29 & _GEN_22) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint contains invalid mask (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_29 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint is corrupt (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & ~reset & (&io_in_d_bits_opcode)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel has invalid opcode (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & _GEN_31) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck is corrupt (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck is denied (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid source ID (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid sink ID (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & _GEN_31) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant smaller than a beat (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant is corrupt (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_33 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid source ID (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_33) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid sink ID (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_33 & _GEN_31) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData smaller than a beat (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_33 & ~io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData is denied but not corrupt (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_34 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_34 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck is corrupt (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_35 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_35 & ~io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData is denied but not corrupt (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_36 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck carries invalid source ID (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_36 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck is corrupt (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & io_in_a_bits_opcode != opcode) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel opcode changed within multibeat operation (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & io_in_a_bits_param != param) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel param changed within multibeat operation (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & io_in_a_bits_size != size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel size changed within multibeat operation (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & io_in_a_bits_source != source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel source changed within multibeat operation (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & io_in_a_bits_address != address) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel address changed with multibeat operation (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_38 & io_in_d_bits_opcode != opcode_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel opcode changed within multibeat operation (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_38 & (|param_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel param changed within multibeat operation (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_38 & io_in_d_bits_size != size_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel size changed within multibeat operation (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_38 & io_in_d_bits_source != source_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel source changed within multibeat operation (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_38 & sink) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel sink changed with multibeat operation (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_38 & ~denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel denied changed with multibeat operation (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_2 & ~reset & _GEN_50[0]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel re-used a source ID (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & ~reset & ~(_GEN_51[0] | same_cycle_resp)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_46
          & ~(io_in_d_bits_opcode == _GEN_5[io_in_a_bits_opcode]
              | io_in_d_bits_opcode == _GEN_4[io_in_a_bits_opcode])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_46 & io_in_a_bits_size != io_in_d_bits_size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_47
          & ~(io_in_d_bits_opcode == _GEN_5[_GEN_39[3:1]]
              | io_in_d_bits_opcode == _GEN_4[_GEN_39[3:1]])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_47 & _GEN_48 != {1'h0, _GEN_52[7:1]}) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & a_first_1 & io_in_a_valid & _GEN_44 & ~d_release_ack & ~reset
          & ~(~io_in_d_ready | io_in_a_ready)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ready check\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(a_set_wo_ready != (_GEN_43 ? _GEN_3[18:0] : 19'h0)
              | a_set_wo_ready == 19'h0)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' and 'D' concurrent, despite minlatency > 0 (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight == 19'h0 | _plusarg_reader_out == 32'h0
              | watchdog < _plusarg_reader_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_49 & ~(_GEN_53[0])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_49 & _GEN_48 != {1'h0, _GEN_54[7:1]}) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight_1 == 19'h0 | _plusarg_reader_1_out == 32'h0
              | watchdog_1 < _plusarg_reader_1_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:45:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    automatic logic _GEN_55;
    automatic logic _GEN_56;
    _GEN_55 = io_in_d_ready & io_in_d_valid;
    _GEN_56 = _GEN_55 & ~(|d_first_counter);
    if (reset) begin
      a_first_counter <= 9'h0;
      d_first_counter <= 9'h0;
      inflight <= 19'h0;
      inflight_opcodes <= 76'h0;
      inflight_sizes <= 152'h0;
      a_first_counter_1 <= 9'h0;
      d_first_counter_1 <= 9'h0;
      watchdog <= 32'h0;
      inflight_1 <= 19'h0;
      inflight_sizes_1 <= 152'h0;
      d_first_counter_2 <= 9'h0;
      watchdog_1 <= 32'h0;
    end
    else begin
      automatic logic         _GEN_57;
      automatic logic [270:0] _GEN_58 = 271'hFF << {263'h0, io_in_d_bits_source, 3'h0};
      automatic logic         _GEN_59;
      automatic logic [270:0] _GEN_60 = 271'hF << {264'h0, io_in_d_bits_source, 2'h0};
      automatic logic [258:0] _GEN_61 =
        {255'h0, _GEN_2 ? {io_in_a_bits_opcode, 1'h1} : 4'h0}
        << {252'h0, io_in_a_bits_source, 2'h0};
      automatic logic [259:0] _GEN_62 =
        {255'h0, _GEN_2 ? {io_in_a_bits_size, 1'h1} : 5'h0}
        << {252'h0, io_in_a_bits_source, 3'h0};
      _GEN_57 = _GEN_55 & d_first_1 & ~d_release_ack;
      _GEN_59 = _GEN_55 & d_first_2 & d_release_ack;
      if (_GEN_0) begin
        if (|a_first_counter)
          a_first_counter <= a_first_counter - 9'h1;
        else if (io_in_a_bits_opcode[2])
          a_first_counter <= 9'h0;
        else
          a_first_counter <= ~(_GEN[11:3]);
        if (a_first_1) begin
          if (io_in_a_bits_opcode[2])
            a_first_counter_1 <= 9'h0;
          else
            a_first_counter_1 <= ~(_GEN[11:3]);
        end
        else
          a_first_counter_1 <= a_first_counter_1 - 9'h1;
      end
      if (_GEN_55) begin
        automatic logic [26:0] _GEN_63 = 27'hFFF << io_in_d_bits_size;
        if (|d_first_counter)
          d_first_counter <= d_first_counter - 9'h1;
        else if (io_in_d_bits_opcode[0])
          d_first_counter <= ~(_GEN_63[11:3]);
        else
          d_first_counter <= 9'h0;
        if (d_first_1) begin
          if (io_in_d_bits_opcode[0])
            d_first_counter_1 <= ~(_GEN_63[11:3]);
          else
            d_first_counter_1 <= 9'h0;
        end
        else
          d_first_counter_1 <= d_first_counter_1 - 9'h1;
        if (d_first_2) begin
          if (io_in_d_bits_opcode[0])
            d_first_counter_2 <= ~(_GEN_63[11:3]);
          else
            d_first_counter_2 <= 9'h0;
        end
        else
          d_first_counter_2 <= d_first_counter_2 - 9'h1;
        watchdog_1 <= 32'h0;
      end
      else
        watchdog_1 <= watchdog_1 + 32'h1;
      inflight <=
        (inflight | (_GEN_2 ? _GEN_1[18:0] : 19'h0)) & ~(_GEN_57 ? _GEN_3[18:0] : 19'h0);
      inflight_opcodes <=
        (inflight_opcodes | (_GEN_2 ? _GEN_61[75:0] : 76'h0))
        & ~(_GEN_57 ? _GEN_60[75:0] : 76'h0);
      inflight_sizes <=
        (inflight_sizes | (_GEN_2 ? _GEN_62[151:0] : 152'h0))
        & ~(_GEN_57 ? _GEN_58[151:0] : 152'h0);
      if (_GEN_0 | _GEN_55)
        watchdog <= 32'h0;
      else
        watchdog <= watchdog + 32'h1;
      inflight_1 <= inflight_1 & ~(_GEN_59 ? _GEN_3[18:0] : 19'h0);
      inflight_sizes_1 <= inflight_sizes_1 & ~(_GEN_59 ? _GEN_58[151:0] : 152'h0);
    end
    if (_GEN_0 & ~(|a_first_counter)) begin
      opcode <= io_in_a_bits_opcode;
      param <= io_in_a_bits_param;
      size <= io_in_a_bits_size;
      source <= io_in_a_bits_source;
      address <= io_in_a_bits_address;
    end
    if (_GEN_56) begin
      opcode_1 <= io_in_d_bits_opcode;
      param_1 <= 2'h0;
      size_1 <= io_in_d_bits_size;
      source_1 <= io_in_d_bits_source;
    end
    sink <= ~_GEN_56 & sink;
    denied <= _GEN_56 | denied;
  end // always @(posedge)
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader (
    .out (_plusarg_reader_out)
  );
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader_1 (
    .out (_plusarg_reader_1_out)
  );
endmodule

module Queue1_TLBundleA_a14d64s5k1z4u(
  input         clock,
                reset,
                io_enq_valid,
  input  [2:0]  io_enq_bits_opcode,
                io_enq_bits_param,
  input  [3:0]  io_enq_bits_size,
  input  [4:0]  io_enq_bits_source,
  input  [13:0] io_enq_bits_address,
  input  [7:0]  io_enq_bits_mask,
  input  [63:0] io_enq_bits_data,
  input         io_enq_bits_corrupt,
                io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
  output [2:0]  io_deq_bits_opcode,
  output [3:0]  io_deq_bits_size,
  output [4:0]  io_deq_bits_source
);

  reg [101:0] ram;
  reg         full;
  always @(posedge clock) begin
    automatic logic do_enq;
    do_enq = ~full & io_enq_valid;
    if (do_enq)
      ram <=
        {io_enq_bits_corrupt,
         io_enq_bits_data,
         io_enq_bits_mask,
         io_enq_bits_address,
         io_enq_bits_source,
         io_enq_bits_size,
         io_enq_bits_param,
         io_enq_bits_opcode};
    if (reset)
      full <= 1'h0;
    else if (do_enq != (io_deq_ready & full))
      full <= do_enq;
  end // always @(posedge)
  assign io_enq_ready = ~full;
  assign io_deq_valid = full;
  assign io_deq_bits_opcode = ram[2:0];
  assign io_deq_bits_size = ram[9:6];
  assign io_deq_bits_source = ram[14:10];
endmodule

module TLError(
  input         clock,
                reset,
                auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
                auto_in_a_bits_param,
  input  [3:0]  auto_in_a_bits_size,
  input  [4:0]  auto_in_a_bits_source,
  input  [13:0] auto_in_a_bits_address,
  input  [7:0]  auto_in_a_bits_mask,
  input  [63:0] auto_in_a_bits_data,
  input         auto_in_a_bits_corrupt,
                auto_in_d_ready,
  output        auto_in_a_ready,
                auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
  output [3:0]  auto_in_d_bits_size,
  output [4:0]  auto_in_d_bits_source,
  output        auto_in_d_bits_corrupt
);

  wire [2:0]      da_bits_opcode;
  wire            _a_q_io_enq_ready;
  wire            _a_q_io_deq_valid;
  wire [2:0]      _a_q_io_deq_bits_opcode;
  wire [3:0]      _a_q_io_deq_bits_size;
  wire [4:0]      _a_q_io_deq_bits_source;
  wire [7:0][2:0] _GEN = '{3'h4, 3'h4, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
  wire [26:0]     _GEN_0 = 27'hFFF << _a_q_io_deq_bits_size;
  reg  [8:0]      a_last_counter;
  wire            a_last =
    a_last_counter == 9'h1
    | (_a_q_io_deq_bits_opcode[2] ? 9'h0 : ~(_GEN_0[11:3])) == 9'h0;
  reg  [8:0]      counter;
  wire            _GEN_1 =
    auto_in_d_ready
    & (counter == 9'h1 | (da_bits_opcode[0] ? ~(_GEN_0[11:3]) : 9'h0) == 9'h0) | ~a_last;
  wire            da_valid = _a_q_io_deq_valid & a_last;
  assign da_bits_opcode = _GEN[_a_q_io_deq_bits_opcode];
  always @(posedge clock) begin
    if (reset) begin
      a_last_counter <= 9'h0;
      counter <= 9'h0;
    end
    else begin
      if (_GEN_1 & _a_q_io_deq_valid) begin
        if (a_last_counter == 9'h0) begin
          if (_a_q_io_deq_bits_opcode[2])
            a_last_counter <= 9'h0;
          else
            a_last_counter <= ~(_GEN_0[11:3]);
        end
        else
          a_last_counter <= a_last_counter - 9'h1;
      end
      if (auto_in_d_ready & da_valid) begin
        if (counter == 9'h0) begin
          if (da_bits_opcode[0])
            counter <= ~(_GEN_0[11:3]);
          else
            counter <= 9'h0;
        end
        else
          counter <= counter - 9'h1;
      end
    end
  end // always @(posedge)
  TLMonitor_12 monitor (
    .clock                (clock),
    .reset                (reset),
    .io_in_a_ready        (_a_q_io_enq_ready),
    .io_in_a_valid        (auto_in_a_valid),
    .io_in_a_bits_opcode  (auto_in_a_bits_opcode),
    .io_in_a_bits_param   (auto_in_a_bits_param),
    .io_in_a_bits_size    (auto_in_a_bits_size),
    .io_in_a_bits_source  (auto_in_a_bits_source),
    .io_in_a_bits_address (auto_in_a_bits_address),
    .io_in_a_bits_mask    (auto_in_a_bits_mask),
    .io_in_a_bits_corrupt (auto_in_a_bits_corrupt),
    .io_in_d_ready        (auto_in_d_ready),
    .io_in_d_valid        (da_valid),
    .io_in_d_bits_opcode  (da_bits_opcode),
    .io_in_d_bits_size    (_a_q_io_deq_bits_size),
    .io_in_d_bits_source  (_a_q_io_deq_bits_source),
    .io_in_d_bits_corrupt (da_bits_opcode[0])
  );
  Queue1_TLBundleA_a14d64s5k1z4u a_q (
    .clock               (clock),
    .reset               (reset),
    .io_enq_valid        (auto_in_a_valid),
    .io_enq_bits_opcode  (auto_in_a_bits_opcode),
    .io_enq_bits_param   (auto_in_a_bits_param),
    .io_enq_bits_size    (auto_in_a_bits_size),
    .io_enq_bits_source  (auto_in_a_bits_source),
    .io_enq_bits_address (auto_in_a_bits_address),
    .io_enq_bits_mask    (auto_in_a_bits_mask),
    .io_enq_bits_data    (auto_in_a_bits_data),
    .io_enq_bits_corrupt (auto_in_a_bits_corrupt),
    .io_deq_ready        (_GEN_1),
    .io_enq_ready        (_a_q_io_enq_ready),
    .io_deq_valid        (_a_q_io_deq_valid),
    .io_deq_bits_opcode  (_a_q_io_deq_bits_opcode),
    .io_deq_bits_size    (_a_q_io_deq_bits_size),
    .io_deq_bits_source  (_a_q_io_deq_bits_source)
  );
  assign auto_in_a_ready = _a_q_io_enq_ready;
  assign auto_in_d_valid = da_valid;
  assign auto_in_d_bits_opcode = da_bits_opcode;
  assign auto_in_d_bits_size = _a_q_io_deq_bits_size;
  assign auto_in_d_bits_source = _a_q_io_deq_bits_source;
  assign auto_in_d_bits_corrupt = da_bits_opcode[0];
endmodule

module TLMonitor_13(
  input        clock,
               reset,
               io_in_a_ready,
               io_in_a_valid,
  input [2:0]  io_in_a_bits_opcode,
               io_in_a_bits_param,
  input [3:0]  io_in_a_bits_size,
  input [4:0]  io_in_a_bits_source,
  input [13:0] io_in_a_bits_address,
  input [7:0]  io_in_a_bits_mask,
  input        io_in_a_bits_corrupt,
               io_in_d_ready,
               io_in_d_valid,
  input [2:0]  io_in_d_bits_opcode,
  input [1:0]  io_in_d_bits_param,
  input [3:0]  io_in_d_bits_size,
  input [4:0]  io_in_d_bits_source,
  input        io_in_d_bits_sink,
               io_in_d_bits_denied,
               io_in_d_bits_corrupt
);

  wire [31:0]  _plusarg_reader_1_out;
  wire [31:0]  _plusarg_reader_out;
  wire [26:0]  _GEN = 27'hFFF << io_in_a_bits_size;
  wire         _GEN_0 = io_in_a_ready & io_in_a_valid;
  reg  [8:0]   a_first_counter;
  reg  [2:0]   opcode;
  reg  [2:0]   param;
  reg  [3:0]   size;
  reg  [4:0]   source;
  reg  [13:0]  address;
  reg  [8:0]   d_first_counter;
  reg  [2:0]   opcode_1;
  reg  [1:0]   param_1;
  reg  [3:0]   size_1;
  reg  [4:0]   source_1;
  reg          sink;
  reg          denied;
  reg  [18:0]  inflight;
  reg  [75:0]  inflight_opcodes;
  reg  [151:0] inflight_sizes;
  reg  [8:0]   a_first_counter_1;
  wire         a_first_1 = a_first_counter_1 == 9'h0;
  reg  [8:0]   d_first_counter_1;
  wire         d_first_1 = d_first_counter_1 == 9'h0;
  wire [31:0]  _GEN_1 = 32'h1 << io_in_a_bits_source;
  wire         _GEN_2 = _GEN_0 & a_first_1;
  wire         d_release_ack = io_in_d_bits_opcode == 3'h6;
  wire [31:0]  _GEN_3 = 32'h1 << io_in_d_bits_source;
  reg  [31:0]  watchdog;
  reg  [18:0]  inflight_1;
  reg  [151:0] inflight_sizes_1;
  reg  [8:0]   d_first_counter_2;
  wire         d_first_2 = d_first_counter_2 == 9'h0;
  reg  [31:0]  watchdog_1;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      automatic logic [7:0][2:0] _GEN_4 =
        '{3'h4, 3'h5, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic [7:0][2:0] _GEN_5 =
        '{3'h4, 3'h4, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic            _GEN_6 = io_in_a_bits_source[4:3] == 2'h0;
      automatic logic            _GEN_7 = io_in_a_bits_source[4:3] == 2'h1;
      automatic logic            _GEN_8 = io_in_a_bits_source == 5'h10;
      automatic logic            _GEN_9 = io_in_a_bits_source == 5'h11;
      automatic logic            _GEN_10 = io_in_a_bits_source == 5'h12;
      automatic logic            source_ok = _GEN_6 | _GEN_7 | _GEN_8 | _GEN_9 | _GEN_10;
      automatic logic [11:0]     _GEN_11 = io_in_a_bits_address[11:0] & ~(_GEN[11:0]);
      automatic logic            _GEN_12 = io_in_a_bits_size > 4'h2;
      automatic logic            mask_size = io_in_a_bits_size[1:0] == 2'h2;
      automatic logic            mask_acc =
        _GEN_12 | mask_size & ~(io_in_a_bits_address[2]);
      automatic logic            mask_acc_1 =
        _GEN_12 | mask_size & io_in_a_bits_address[2];
      automatic logic            mask_size_1 = io_in_a_bits_size[1:0] == 2'h1;
      automatic logic            mask_eq_2 =
        ~(io_in_a_bits_address[2]) & ~(io_in_a_bits_address[1]);
      automatic logic            mask_acc_2 = mask_acc | mask_size_1 & mask_eq_2;
      automatic logic            mask_eq_3 =
        ~(io_in_a_bits_address[2]) & io_in_a_bits_address[1];
      automatic logic            mask_acc_3 = mask_acc | mask_size_1 & mask_eq_3;
      automatic logic            mask_eq_4 =
        io_in_a_bits_address[2] & ~(io_in_a_bits_address[1]);
      automatic logic            mask_acc_4 = mask_acc_1 | mask_size_1 & mask_eq_4;
      automatic logic            mask_eq_5 =
        io_in_a_bits_address[2] & io_in_a_bits_address[1];
      automatic logic            mask_acc_5 = mask_acc_1 | mask_size_1 & mask_eq_5;
      automatic logic [7:0]      mask =
        {mask_acc_5 | mask_eq_5 & io_in_a_bits_address[0],
         mask_acc_5 | mask_eq_5 & ~(io_in_a_bits_address[0]),
         mask_acc_4 | mask_eq_4 & io_in_a_bits_address[0],
         mask_acc_4 | mask_eq_4 & ~(io_in_a_bits_address[0]),
         mask_acc_3 | mask_eq_3 & io_in_a_bits_address[0],
         mask_acc_3 | mask_eq_3 & ~(io_in_a_bits_address[0]),
         mask_acc_2 | mask_eq_2 & io_in_a_bits_address[0],
         mask_acc_2 | mask_eq_2 & ~(io_in_a_bits_address[0])};
      automatic logic            _GEN_13 = io_in_a_bits_size < 4'hD;
      automatic logic            _GEN_14 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_15 = _GEN_13 & (&(io_in_a_bits_address[13:12]));
      automatic logic            _GEN_16 = _GEN_8 & io_in_a_bits_size == 4'h6 & _GEN_15;
      automatic logic            _GEN_17 = io_in_a_bits_param > 3'h2;
      automatic logic            _GEN_18 = io_in_a_bits_mask != 8'hFF;
      automatic logic            _GEN_19 =
        io_in_a_valid & (&io_in_a_bits_opcode) & ~reset;
      automatic logic            _GEN_20 =
        _GEN_13 & (_GEN_6 | _GEN_7 | _GEN_8 | _GEN_9 | _GEN_10);
      automatic logic            _GEN_21 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_22 = io_in_a_bits_mask != mask;
      automatic logic            _GEN_23 = _GEN_20 & _GEN_15;
      automatic logic            _GEN_24 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_25 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_26 =
        _GEN_20 & io_in_a_bits_size < 4'h4 & (&(io_in_a_bits_address[13:12]));
      automatic logic            _GEN_27 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_28 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h3 & ~reset;
      automatic logic            _GEN_29 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h5 & ~reset;
      automatic logic            source_ok_1 =
        io_in_d_bits_source[4:3] == 2'h0 | io_in_d_bits_source[4:3] == 2'h1
        | io_in_d_bits_source == 5'h10 | io_in_d_bits_source == 5'h11
        | io_in_d_bits_source == 5'h12;
      automatic logic            _GEN_30 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_31 = io_in_d_bits_size < 4'h3;
      automatic logic            _GEN_32 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_33 = io_in_d_bits_param == 2'h2;
      automatic logic            _GEN_34 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h5 & ~reset;
      automatic logic            _GEN_35 = ~io_in_d_bits_denied | io_in_d_bits_corrupt;
      automatic logic            _GEN_36 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_37 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_38 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_39 = io_in_a_valid & (|a_first_counter) & ~reset;
      automatic logic            _GEN_40 = io_in_d_valid & (|d_first_counter) & ~reset;
      automatic logic [75:0]     _GEN_41 =
        inflight_opcodes >> {69'h0, io_in_d_bits_source, 2'h0};
      automatic logic [151:0]    _GEN_42 = {144'h0, io_in_d_bits_source, 3'h0};
      automatic logic            _GEN_43 = io_in_a_valid & a_first_1;
      automatic logic [18:0]     a_set_wo_ready = _GEN_43 ? _GEN_1[18:0] : 19'h0;
      automatic logic            _GEN_44 = io_in_d_valid & d_first_1;
      automatic logic            _GEN_45 = _GEN_44 & ~d_release_ack;
      automatic logic            _GEN_46 = io_in_a_bits_source == io_in_d_bits_source;
      automatic logic            same_cycle_resp = _GEN_43 & _GEN_46;
      automatic logic [18:0]     _GEN_47 = {14'h0, io_in_d_bits_source};
      automatic logic            _GEN_48 = _GEN_45 & same_cycle_resp & ~reset;
      automatic logic            _GEN_49 = _GEN_45 & ~same_cycle_resp & ~reset;
      automatic logic [7:0]      _GEN_50 = {4'h0, io_in_d_bits_size};
      automatic logic            _GEN_51 =
        io_in_d_valid & d_first_2 & d_release_ack & ~reset;
      automatic logic [18:0]     _GEN_52 = inflight >> io_in_a_bits_source;
      automatic logic [18:0]     _GEN_53 = inflight >> _GEN_47;
      automatic logic [151:0]    _GEN_54 = inflight_sizes >> _GEN_42;
      automatic logic [18:0]     _GEN_55 = inflight_1 >> _GEN_47;
      automatic logic [151:0]    _GEN_56 = inflight_sizes_1 >> _GEN_42;
      if (_GEN_14) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & ~_GEN_16) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock carries invalid source ID (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & ~_GEN_12) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & (|_GEN_11)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & _GEN_17) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock carries invalid grow param (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & _GEN_18) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock is corrupt (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & ~_GEN_16) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm carries invalid source ID (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & ~_GEN_12) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & (|_GEN_11)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & _GEN_17) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm carries invalid grow param (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & ~(|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & _GEN_18) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm is corrupt (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_21 & ~_GEN_20) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_21 & ~_GEN_15) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_21 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get carries invalid source ID (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_21 & (|_GEN_11)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get address not aligned to size (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_21 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get carries invalid param (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_21 & _GEN_22) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get contains invalid mask (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_21 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get is corrupt (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_24 & ~_GEN_23) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_24 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull carries invalid source ID (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_24 & (|_GEN_11)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull address not aligned to size (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_24 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull carries invalid param (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_24 & _GEN_22) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull contains invalid mask (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25 & ~_GEN_23) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25 & (|_GEN_11)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial address not aligned to size (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial carries invalid param (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25 & (|(io_in_a_bits_mask & ~mask))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial contains invalid mask (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & ~_GEN_26) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & (|_GEN_11)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & io_in_a_bits_param > 3'h4) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & _GEN_22) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & ~_GEN_26) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical carries invalid source ID (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & (|_GEN_11)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical address not aligned to size (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & io_in_a_bits_param[2]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical carries invalid opcode param (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & _GEN_22) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical contains invalid mask (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_29 & ~_GEN_23) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_29 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint carries invalid source ID (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_29 & (|_GEN_11)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint address not aligned to size (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_29 & (|(io_in_a_bits_param[2:1]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint carries invalid opcode param (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_29 & _GEN_22) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint contains invalid mask (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_29 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint is corrupt (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & ~reset & (&io_in_d_bits_opcode)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel has invalid opcode (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & _GEN_31) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck is corrupt (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & io_in_d_bits_denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck is denied (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid source ID (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid sink ID (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & _GEN_31) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant smaller than a beat (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & (&io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid cap param (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & _GEN_33) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries toN param (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant is corrupt (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_34 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid source ID (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_34) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid sink ID (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_34 & _GEN_31) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData smaller than a beat (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_34 & (&io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid cap param (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_34 & _GEN_33) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries toN param (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_34 & ~_GEN_35) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData is denied but not corrupt (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_36 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_36 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck carries invalid param (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_36 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck is corrupt (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData carries invalid param (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & ~_GEN_35) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData is denied but not corrupt (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_38 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck carries invalid source ID (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_38 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck carries invalid param (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_38 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck is corrupt (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_39 & io_in_a_bits_opcode != opcode) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel opcode changed within multibeat operation (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_39 & io_in_a_bits_param != param) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel param changed within multibeat operation (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_39 & io_in_a_bits_size != size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel size changed within multibeat operation (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_39 & io_in_a_bits_source != source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel source changed within multibeat operation (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_39 & io_in_a_bits_address != address) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel address changed with multibeat operation (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_40 & io_in_d_bits_opcode != opcode_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel opcode changed within multibeat operation (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_40 & io_in_d_bits_param != param_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel param changed within multibeat operation (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_40 & io_in_d_bits_size != size_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel size changed within multibeat operation (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_40 & io_in_d_bits_source != source_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel source changed within multibeat operation (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_40 & io_in_d_bits_sink != sink) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel sink changed with multibeat operation (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_40 & io_in_d_bits_denied != denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel denied changed with multibeat operation (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_2 & ~reset & _GEN_52[0]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel re-used a source ID (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_45 & ~reset & ~(_GEN_53[0] | same_cycle_resp)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_48
          & ~(io_in_d_bits_opcode == _GEN_5[io_in_a_bits_opcode]
              | io_in_d_bits_opcode == _GEN_4[io_in_a_bits_opcode])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_48 & io_in_a_bits_size != io_in_d_bits_size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_49
          & ~(io_in_d_bits_opcode == _GEN_5[_GEN_41[3:1]]
              | io_in_d_bits_opcode == _GEN_4[_GEN_41[3:1]])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_49 & _GEN_50 != {1'h0, _GEN_54[7:1]}) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_44 & a_first_1 & io_in_a_valid & _GEN_46 & ~d_release_ack & ~reset
          & ~(~io_in_d_ready | io_in_a_ready)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ready check\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(a_set_wo_ready != (_GEN_45 ? _GEN_3[18:0] : 19'h0)
              | a_set_wo_ready == 19'h0)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' and 'D' concurrent, despite minlatency > 0 (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight == 19'h0 | _plusarg_reader_out == 32'h0
              | watchdog < _plusarg_reader_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_51 & ~(_GEN_55[0])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_51 & _GEN_50 != {1'h0, _GEN_56[7:1]}) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight_1 == 19'h0 | _plusarg_reader_1_out == 32'h0
              | watchdog_1 < _plusarg_reader_1_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala:46:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    automatic logic _GEN_57;
    _GEN_57 = io_in_d_ready & io_in_d_valid;
    if (reset) begin
      a_first_counter <= 9'h0;
      d_first_counter <= 9'h0;
      inflight <= 19'h0;
      inflight_opcodes <= 76'h0;
      inflight_sizes <= 152'h0;
      a_first_counter_1 <= 9'h0;
      d_first_counter_1 <= 9'h0;
      watchdog <= 32'h0;
      inflight_1 <= 19'h0;
      inflight_sizes_1 <= 152'h0;
      d_first_counter_2 <= 9'h0;
      watchdog_1 <= 32'h0;
    end
    else begin
      automatic logic         _GEN_58;
      automatic logic [270:0] _GEN_59 = 271'hFF << {263'h0, io_in_d_bits_source, 3'h0};
      automatic logic         _GEN_60;
      automatic logic [270:0] _GEN_61 = 271'hF << {264'h0, io_in_d_bits_source, 2'h0};
      automatic logic [258:0] _GEN_62 =
        {255'h0, _GEN_2 ? {io_in_a_bits_opcode, 1'h1} : 4'h0}
        << {252'h0, io_in_a_bits_source, 2'h0};
      automatic logic [259:0] _GEN_63 =
        {255'h0, _GEN_2 ? {io_in_a_bits_size, 1'h1} : 5'h0}
        << {252'h0, io_in_a_bits_source, 3'h0};
      _GEN_58 = _GEN_57 & d_first_1 & ~d_release_ack;
      _GEN_60 = _GEN_57 & d_first_2 & d_release_ack;
      if (_GEN_0) begin
        if (|a_first_counter)
          a_first_counter <= a_first_counter - 9'h1;
        else if (io_in_a_bits_opcode[2])
          a_first_counter <= 9'h0;
        else
          a_first_counter <= ~(_GEN[11:3]);
        if (a_first_1) begin
          if (io_in_a_bits_opcode[2])
            a_first_counter_1 <= 9'h0;
          else
            a_first_counter_1 <= ~(_GEN[11:3]);
        end
        else
          a_first_counter_1 <= a_first_counter_1 - 9'h1;
      end
      if (_GEN_57) begin
        automatic logic [26:0] _GEN_64 = 27'hFFF << io_in_d_bits_size;
        if (|d_first_counter)
          d_first_counter <= d_first_counter - 9'h1;
        else if (io_in_d_bits_opcode[0])
          d_first_counter <= ~(_GEN_64[11:3]);
        else
          d_first_counter <= 9'h0;
        if (d_first_1) begin
          if (io_in_d_bits_opcode[0])
            d_first_counter_1 <= ~(_GEN_64[11:3]);
          else
            d_first_counter_1 <= 9'h0;
        end
        else
          d_first_counter_1 <= d_first_counter_1 - 9'h1;
        if (d_first_2) begin
          if (io_in_d_bits_opcode[0])
            d_first_counter_2 <= ~(_GEN_64[11:3]);
          else
            d_first_counter_2 <= 9'h0;
        end
        else
          d_first_counter_2 <= d_first_counter_2 - 9'h1;
        watchdog_1 <= 32'h0;
      end
      else
        watchdog_1 <= watchdog_1 + 32'h1;
      inflight <=
        (inflight | (_GEN_2 ? _GEN_1[18:0] : 19'h0)) & ~(_GEN_58 ? _GEN_3[18:0] : 19'h0);
      inflight_opcodes <=
        (inflight_opcodes | (_GEN_2 ? _GEN_62[75:0] : 76'h0))
        & ~(_GEN_58 ? _GEN_61[75:0] : 76'h0);
      inflight_sizes <=
        (inflight_sizes | (_GEN_2 ? _GEN_63[151:0] : 152'h0))
        & ~(_GEN_58 ? _GEN_59[151:0] : 152'h0);
      if (_GEN_0 | _GEN_57)
        watchdog <= 32'h0;
      else
        watchdog <= watchdog + 32'h1;
      inflight_1 <= inflight_1 & ~(_GEN_60 ? _GEN_3[18:0] : 19'h0);
      inflight_sizes_1 <= inflight_sizes_1 & ~(_GEN_60 ? _GEN_59[151:0] : 152'h0);
    end
    if (_GEN_0 & ~(|a_first_counter)) begin
      opcode <= io_in_a_bits_opcode;
      param <= io_in_a_bits_param;
      size <= io_in_a_bits_size;
      source <= io_in_a_bits_source;
      address <= io_in_a_bits_address;
    end
    if (_GEN_57 & ~(|d_first_counter)) begin
      opcode_1 <= io_in_d_bits_opcode;
      param_1 <= io_in_d_bits_param;
      size_1 <= io_in_d_bits_size;
      source_1 <= io_in_d_bits_source;
      sink <= io_in_d_bits_sink;
      denied <= io_in_d_bits_denied;
    end
  end // always @(posedge)
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader (
    .out (_plusarg_reader_out)
  );
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader_1 (
    .out (_plusarg_reader_1_out)
  );
endmodule

module Queue2_TLBundleA_a14d64s5k1z4u(
  input         clock,
                reset,
                io_enq_valid,
  input  [2:0]  io_enq_bits_opcode,
                io_enq_bits_param,
  input  [3:0]  io_enq_bits_size,
  input  [4:0]  io_enq_bits_source,
  input  [13:0] io_enq_bits_address,
  input  [7:0]  io_enq_bits_mask,
  input  [63:0] io_enq_bits_data,
  input         io_enq_bits_corrupt,
                io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
  output [2:0]  io_deq_bits_opcode,
                io_deq_bits_param,
  output [3:0]  io_deq_bits_size,
  output [4:0]  io_deq_bits_source,
  output [13:0] io_deq_bits_address,
  output [7:0]  io_deq_bits_mask,
  output [63:0] io_deq_bits_data,
  output        io_deq_bits_corrupt
);

  wire [101:0] _ram_ext_R0_data;
  reg          wrap;
  reg          wrap_1;
  reg          maybe_full;
  wire         ptr_match = wrap == wrap_1;
  wire         empty = ptr_match & ~maybe_full;
  wire         full = ptr_match & maybe_full;
  wire         do_enq = ~full & io_enq_valid;
  always @(posedge clock) begin
    if (reset) begin
      wrap <= 1'h0;
      wrap_1 <= 1'h0;
      maybe_full <= 1'h0;
    end
    else begin
      automatic logic do_deq = io_deq_ready & ~empty;
      if (do_enq)
        wrap <= wrap - 1'h1;
      if (do_deq)
        wrap_1 <= wrap_1 - 1'h1;
      if (do_enq != do_deq)
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_combMem_14 ram_ext (
    .R0_addr (wrap_1),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (wrap),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data
      ({io_enq_bits_corrupt,
        io_enq_bits_data,
        io_enq_bits_mask,
        io_enq_bits_address,
        io_enq_bits_source,
        io_enq_bits_size,
        io_enq_bits_param,
        io_enq_bits_opcode}),
    .R0_data (_ram_ext_R0_data)
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
  assign io_deq_bits_opcode = _ram_ext_R0_data[2:0];
  assign io_deq_bits_param = _ram_ext_R0_data[5:3];
  assign io_deq_bits_size = _ram_ext_R0_data[9:6];
  assign io_deq_bits_source = _ram_ext_R0_data[14:10];
  assign io_deq_bits_address = _ram_ext_R0_data[28:15];
  assign io_deq_bits_mask = _ram_ext_R0_data[36:29];
  assign io_deq_bits_data = _ram_ext_R0_data[100:37];
  assign io_deq_bits_corrupt = _ram_ext_R0_data[101];
endmodule

module TLBuffer_a14d64s5k1z4u(
  input         clock,
                reset,
                auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
                auto_in_a_bits_param,
  input  [3:0]  auto_in_a_bits_size,
  input  [4:0]  auto_in_a_bits_source,
  input  [13:0] auto_in_a_bits_address,
  input  [7:0]  auto_in_a_bits_mask,
  input  [63:0] auto_in_a_bits_data,
  input         auto_in_a_bits_corrupt,
                auto_in_d_ready,
                auto_out_a_ready,
                auto_out_d_valid,
  input  [2:0]  auto_out_d_bits_opcode,
  input  [3:0]  auto_out_d_bits_size,
  input  [4:0]  auto_out_d_bits_source,
  input         auto_out_d_bits_corrupt,
  output        auto_in_a_ready,
                auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
  output [1:0]  auto_in_d_bits_param,
  output [3:0]  auto_in_d_bits_size,
  output [4:0]  auto_in_d_bits_source,
  output        auto_in_d_bits_sink,
                auto_in_d_bits_denied,
  output [63:0] auto_in_d_bits_data,
  output        auto_in_d_bits_corrupt,
                auto_out_a_valid,
  output [2:0]  auto_out_a_bits_opcode,
                auto_out_a_bits_param,
  output [3:0]  auto_out_a_bits_size,
  output [4:0]  auto_out_a_bits_source,
  output [13:0] auto_out_a_bits_address,
  output [7:0]  auto_out_a_bits_mask,
  output [63:0] auto_out_a_bits_data,
  output        auto_out_a_bits_corrupt,
                auto_out_d_ready
);

  wire       _nodeIn_d_q_io_deq_valid;
  wire [2:0] _nodeIn_d_q_io_deq_bits_opcode;
  wire [1:0] _nodeIn_d_q_io_deq_bits_param;
  wire [3:0] _nodeIn_d_q_io_deq_bits_size;
  wire [4:0] _nodeIn_d_q_io_deq_bits_source;
  wire       _nodeIn_d_q_io_deq_bits_sink;
  wire       _nodeIn_d_q_io_deq_bits_denied;
  wire       _nodeIn_d_q_io_deq_bits_corrupt;
  wire       _nodeOut_a_q_io_enq_ready;
  TLMonitor_13 monitor (
    .clock                (clock),
    .reset                (reset),
    .io_in_a_ready        (_nodeOut_a_q_io_enq_ready),
    .io_in_a_valid        (auto_in_a_valid),
    .io_in_a_bits_opcode  (auto_in_a_bits_opcode),
    .io_in_a_bits_param   (auto_in_a_bits_param),
    .io_in_a_bits_size    (auto_in_a_bits_size),
    .io_in_a_bits_source  (auto_in_a_bits_source),
    .io_in_a_bits_address (auto_in_a_bits_address),
    .io_in_a_bits_mask    (auto_in_a_bits_mask),
    .io_in_a_bits_corrupt (auto_in_a_bits_corrupt),
    .io_in_d_ready        (auto_in_d_ready),
    .io_in_d_valid        (_nodeIn_d_q_io_deq_valid),
    .io_in_d_bits_opcode  (_nodeIn_d_q_io_deq_bits_opcode),
    .io_in_d_bits_param   (_nodeIn_d_q_io_deq_bits_param),
    .io_in_d_bits_size    (_nodeIn_d_q_io_deq_bits_size),
    .io_in_d_bits_source  (_nodeIn_d_q_io_deq_bits_source),
    .io_in_d_bits_sink    (_nodeIn_d_q_io_deq_bits_sink),
    .io_in_d_bits_denied  (_nodeIn_d_q_io_deq_bits_denied),
    .io_in_d_bits_corrupt (_nodeIn_d_q_io_deq_bits_corrupt)
  );
  Queue2_TLBundleA_a14d64s5k1z4u nodeOut_a_q (
    .clock               (clock),
    .reset               (reset),
    .io_enq_valid        (auto_in_a_valid),
    .io_enq_bits_opcode  (auto_in_a_bits_opcode),
    .io_enq_bits_param   (auto_in_a_bits_param),
    .io_enq_bits_size    (auto_in_a_bits_size),
    .io_enq_bits_source  (auto_in_a_bits_source),
    .io_enq_bits_address (auto_in_a_bits_address),
    .io_enq_bits_mask    (auto_in_a_bits_mask),
    .io_enq_bits_data    (auto_in_a_bits_data),
    .io_enq_bits_corrupt (auto_in_a_bits_corrupt),
    .io_deq_ready        (auto_out_a_ready),
    .io_enq_ready        (_nodeOut_a_q_io_enq_ready),
    .io_deq_valid        (auto_out_a_valid),
    .io_deq_bits_opcode  (auto_out_a_bits_opcode),
    .io_deq_bits_param   (auto_out_a_bits_param),
    .io_deq_bits_size    (auto_out_a_bits_size),
    .io_deq_bits_source  (auto_out_a_bits_source),
    .io_deq_bits_address (auto_out_a_bits_address),
    .io_deq_bits_mask    (auto_out_a_bits_mask),
    .io_deq_bits_data    (auto_out_a_bits_data),
    .io_deq_bits_corrupt (auto_out_a_bits_corrupt)
  );
  Queue2_TLBundleD_a28d64s5k1z4u nodeIn_d_q (
    .clock               (clock),
    .reset               (reset),
    .io_enq_valid        (auto_out_d_valid),
    .io_enq_bits_opcode  (auto_out_d_bits_opcode),
    .io_enq_bits_param   (2'h0),
    .io_enq_bits_size    (auto_out_d_bits_size),
    .io_enq_bits_source  (auto_out_d_bits_source),
    .io_enq_bits_sink    (1'h0),
    .io_enq_bits_denied  (1'h1),
    .io_enq_bits_data    (64'h0),
    .io_enq_bits_corrupt (auto_out_d_bits_corrupt),
    .io_deq_ready        (auto_in_d_ready),
    .io_enq_ready        (auto_out_d_ready),
    .io_deq_valid        (_nodeIn_d_q_io_deq_valid),
    .io_deq_bits_opcode  (_nodeIn_d_q_io_deq_bits_opcode),
    .io_deq_bits_param   (_nodeIn_d_q_io_deq_bits_param),
    .io_deq_bits_size    (_nodeIn_d_q_io_deq_bits_size),
    .io_deq_bits_source  (_nodeIn_d_q_io_deq_bits_source),
    .io_deq_bits_sink    (_nodeIn_d_q_io_deq_bits_sink),
    .io_deq_bits_denied  (_nodeIn_d_q_io_deq_bits_denied),
    .io_deq_bits_data    (auto_in_d_bits_data),
    .io_deq_bits_corrupt (_nodeIn_d_q_io_deq_bits_corrupt)
  );
  assign auto_in_a_ready = _nodeOut_a_q_io_enq_ready;
  assign auto_in_d_valid = _nodeIn_d_q_io_deq_valid;
  assign auto_in_d_bits_opcode = _nodeIn_d_q_io_deq_bits_opcode;
  assign auto_in_d_bits_param = _nodeIn_d_q_io_deq_bits_param;
  assign auto_in_d_bits_size = _nodeIn_d_q_io_deq_bits_size;
  assign auto_in_d_bits_source = _nodeIn_d_q_io_deq_bits_source;
  assign auto_in_d_bits_sink = _nodeIn_d_q_io_deq_bits_sink;
  assign auto_in_d_bits_denied = _nodeIn_d_q_io_deq_bits_denied;
  assign auto_in_d_bits_corrupt = _nodeIn_d_q_io_deq_bits_corrupt;
endmodule

module ErrorDeviceWrapper(
  input         clock,
                reset,
                auto_buffer_in_a_valid,
  input  [2:0]  auto_buffer_in_a_bits_opcode,
                auto_buffer_in_a_bits_param,
  input  [3:0]  auto_buffer_in_a_bits_size,
  input  [4:0]  auto_buffer_in_a_bits_source,
  input  [13:0] auto_buffer_in_a_bits_address,
  input  [7:0]  auto_buffer_in_a_bits_mask,
  input  [63:0] auto_buffer_in_a_bits_data,
  input         auto_buffer_in_a_bits_corrupt,
                auto_buffer_in_d_ready,
  output        auto_buffer_in_a_ready,
                auto_buffer_in_d_valid,
  output [2:0]  auto_buffer_in_d_bits_opcode,
  output [1:0]  auto_buffer_in_d_bits_param,
  output [3:0]  auto_buffer_in_d_bits_size,
  output [4:0]  auto_buffer_in_d_bits_source,
  output        auto_buffer_in_d_bits_sink,
                auto_buffer_in_d_bits_denied,
  output [63:0] auto_buffer_in_d_bits_data,
  output        auto_buffer_in_d_bits_corrupt
);

  wire        _buffer_auto_out_a_valid;
  wire [2:0]  _buffer_auto_out_a_bits_opcode;
  wire [2:0]  _buffer_auto_out_a_bits_param;
  wire [3:0]  _buffer_auto_out_a_bits_size;
  wire [4:0]  _buffer_auto_out_a_bits_source;
  wire [13:0] _buffer_auto_out_a_bits_address;
  wire [7:0]  _buffer_auto_out_a_bits_mask;
  wire [63:0] _buffer_auto_out_a_bits_data;
  wire        _buffer_auto_out_a_bits_corrupt;
  wire        _buffer_auto_out_d_ready;
  wire        _error_auto_in_a_ready;
  wire        _error_auto_in_d_valid;
  wire [2:0]  _error_auto_in_d_bits_opcode;
  wire [3:0]  _error_auto_in_d_bits_size;
  wire [4:0]  _error_auto_in_d_bits_source;
  wire        _error_auto_in_d_bits_corrupt;
  TLError error (
    .clock                  (clock),
    .reset                  (reset),
    .auto_in_a_valid        (_buffer_auto_out_a_valid),
    .auto_in_a_bits_opcode  (_buffer_auto_out_a_bits_opcode),
    .auto_in_a_bits_param   (_buffer_auto_out_a_bits_param),
    .auto_in_a_bits_size    (_buffer_auto_out_a_bits_size),
    .auto_in_a_bits_source  (_buffer_auto_out_a_bits_source),
    .auto_in_a_bits_address (_buffer_auto_out_a_bits_address),
    .auto_in_a_bits_mask    (_buffer_auto_out_a_bits_mask),
    .auto_in_a_bits_data    (_buffer_auto_out_a_bits_data),
    .auto_in_a_bits_corrupt (_buffer_auto_out_a_bits_corrupt),
    .auto_in_d_ready        (_buffer_auto_out_d_ready),
    .auto_in_a_ready        (_error_auto_in_a_ready),
    .auto_in_d_valid        (_error_auto_in_d_valid),
    .auto_in_d_bits_opcode  (_error_auto_in_d_bits_opcode),
    .auto_in_d_bits_size    (_error_auto_in_d_bits_size),
    .auto_in_d_bits_source  (_error_auto_in_d_bits_source),
    .auto_in_d_bits_corrupt (_error_auto_in_d_bits_corrupt)
  );
  TLBuffer_a14d64s5k1z4u buffer (
    .clock                   (clock),
    .reset                   (reset),
    .auto_in_a_valid         (auto_buffer_in_a_valid),
    .auto_in_a_bits_opcode   (auto_buffer_in_a_bits_opcode),
    .auto_in_a_bits_param    (auto_buffer_in_a_bits_param),
    .auto_in_a_bits_size     (auto_buffer_in_a_bits_size),
    .auto_in_a_bits_source   (auto_buffer_in_a_bits_source),
    .auto_in_a_bits_address  (auto_buffer_in_a_bits_address),
    .auto_in_a_bits_mask     (auto_buffer_in_a_bits_mask),
    .auto_in_a_bits_data     (auto_buffer_in_a_bits_data),
    .auto_in_a_bits_corrupt  (auto_buffer_in_a_bits_corrupt),
    .auto_in_d_ready         (auto_buffer_in_d_ready),
    .auto_out_a_ready        (_error_auto_in_a_ready),
    .auto_out_d_valid        (_error_auto_in_d_valid),
    .auto_out_d_bits_opcode  (_error_auto_in_d_bits_opcode),
    .auto_out_d_bits_size    (_error_auto_in_d_bits_size),
    .auto_out_d_bits_source  (_error_auto_in_d_bits_source),
    .auto_out_d_bits_corrupt (_error_auto_in_d_bits_corrupt),
    .auto_in_a_ready         (auto_buffer_in_a_ready),
    .auto_in_d_valid         (auto_buffer_in_d_valid),
    .auto_in_d_bits_opcode   (auto_buffer_in_d_bits_opcode),
    .auto_in_d_bits_param    (auto_buffer_in_d_bits_param),
    .auto_in_d_bits_size     (auto_buffer_in_d_bits_size),
    .auto_in_d_bits_source   (auto_buffer_in_d_bits_source),
    .auto_in_d_bits_sink     (auto_buffer_in_d_bits_sink),
    .auto_in_d_bits_denied   (auto_buffer_in_d_bits_denied),
    .auto_in_d_bits_data     (auto_buffer_in_d_bits_data),
    .auto_in_d_bits_corrupt  (auto_buffer_in_d_bits_corrupt),
    .auto_out_a_valid        (_buffer_auto_out_a_valid),
    .auto_out_a_bits_opcode  (_buffer_auto_out_a_bits_opcode),
    .auto_out_a_bits_param   (_buffer_auto_out_a_bits_param),
    .auto_out_a_bits_size    (_buffer_auto_out_a_bits_size),
    .auto_out_a_bits_source  (_buffer_auto_out_a_bits_source),
    .auto_out_a_bits_address (_buffer_auto_out_a_bits_address),
    .auto_out_a_bits_mask    (_buffer_auto_out_a_bits_mask),
    .auto_out_a_bits_data    (_buffer_auto_out_a_bits_data),
    .auto_out_a_bits_corrupt (_buffer_auto_out_a_bits_corrupt),
    .auto_out_d_ready        (_buffer_auto_out_d_ready)
  );
endmodule

module TLMonitor_14(
  input        clock,
               reset,
               io_in_a_ready,
               io_in_a_valid,
  input [2:0]  io_in_a_bits_opcode,
               io_in_a_bits_param,
               io_in_a_bits_size,
  input [4:0]  io_in_a_bits_source,
  input [25:0] io_in_a_bits_address,
  input [7:0]  io_in_a_bits_mask,
  input        io_in_a_bits_corrupt,
               io_in_d_ready,
               io_in_d_valid,
  input [2:0]  io_in_d_bits_opcode,
               io_in_d_bits_size,
  input [4:0]  io_in_d_bits_source
);

  wire [31:0] _plusarg_reader_1_out;
  wire [31:0] _plusarg_reader_out;
  wire [12:0] _GEN = 13'h3F << io_in_a_bits_size;
  wire        _GEN_0 = io_in_a_ready & io_in_a_valid;
  reg  [2:0]  a_first_counter;
  reg  [2:0]  opcode;
  reg  [2:0]  param;
  reg  [2:0]  size;
  reg  [4:0]  source;
  reg  [25:0] address;
  reg  [2:0]  d_first_counter;
  reg  [2:0]  opcode_1;
  reg  [1:0]  param_1;
  reg  [2:0]  size_1;
  reg  [4:0]  source_1;
  reg         sink;
  reg         denied;
  reg  [18:0] inflight;
  reg  [75:0] inflight_opcodes;
  reg  [75:0] inflight_sizes;
  reg  [2:0]  a_first_counter_1;
  wire        a_first_1 = a_first_counter_1 == 3'h0;
  reg  [2:0]  d_first_counter_1;
  wire        d_first_1 = d_first_counter_1 == 3'h0;
  wire        _GEN_1 = _GEN_0 & a_first_1;
  wire        d_release_ack = io_in_d_bits_opcode == 3'h6;
  reg  [31:0] watchdog;
  reg  [18:0] inflight_1;
  reg  [75:0] inflight_sizes_1;
  reg  [2:0]  d_first_counter_2;
  wire        d_first_2 = d_first_counter_2 == 3'h0;
  reg  [31:0] watchdog_1;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      automatic logic [7:0][2:0] _GEN_2 =
        '{3'h4, 3'h5, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic [7:0][2:0] _GEN_3 =
        '{3'h4, 3'h4, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic            _GEN_4 = io_in_a_bits_source[4:3] == 2'h0;
      automatic logic            _GEN_5 = io_in_a_bits_source[4:3] == 2'h1;
      automatic logic            _GEN_6 = io_in_a_bits_source == 5'h10;
      automatic logic            _GEN_7 = io_in_a_bits_source == 5'h11;
      automatic logic            _GEN_8 = io_in_a_bits_source == 5'h12;
      automatic logic            source_ok = _GEN_4 | _GEN_5 | _GEN_6 | _GEN_7 | _GEN_8;
      automatic logic [5:0]      _GEN_9 = io_in_a_bits_address[5:0] & ~(_GEN[5:0]);
      automatic logic            _GEN_10 = io_in_a_bits_size > 3'h2;
      automatic logic            mask_size = io_in_a_bits_size[1:0] == 2'h2;
      automatic logic            mask_acc =
        _GEN_10 | mask_size & ~(io_in_a_bits_address[2]);
      automatic logic            mask_acc_1 =
        _GEN_10 | mask_size & io_in_a_bits_address[2];
      automatic logic            mask_size_1 = io_in_a_bits_size[1:0] == 2'h1;
      automatic logic            mask_eq_2 =
        ~(io_in_a_bits_address[2]) & ~(io_in_a_bits_address[1]);
      automatic logic            mask_acc_2 = mask_acc | mask_size_1 & mask_eq_2;
      automatic logic            mask_eq_3 =
        ~(io_in_a_bits_address[2]) & io_in_a_bits_address[1];
      automatic logic            mask_acc_3 = mask_acc | mask_size_1 & mask_eq_3;
      automatic logic            mask_eq_4 =
        io_in_a_bits_address[2] & ~(io_in_a_bits_address[1]);
      automatic logic            mask_acc_4 = mask_acc_1 | mask_size_1 & mask_eq_4;
      automatic logic            mask_eq_5 =
        io_in_a_bits_address[2] & io_in_a_bits_address[1];
      automatic logic            mask_acc_5 = mask_acc_1 | mask_size_1 & mask_eq_5;
      automatic logic [7:0]      mask =
        {mask_acc_5 | mask_eq_5 & io_in_a_bits_address[0],
         mask_acc_5 | mask_eq_5 & ~(io_in_a_bits_address[0]),
         mask_acc_4 | mask_eq_4 & io_in_a_bits_address[0],
         mask_acc_4 | mask_eq_4 & ~(io_in_a_bits_address[0]),
         mask_acc_3 | mask_eq_3 & io_in_a_bits_address[0],
         mask_acc_3 | mask_eq_3 & ~(io_in_a_bits_address[0]),
         mask_acc_2 | mask_eq_2 & io_in_a_bits_address[0],
         mask_acc_2 | mask_eq_2 & ~(io_in_a_bits_address[0])};
      automatic logic            _GEN_11 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_12 = io_in_a_bits_address[25:16] == 10'h200;
      automatic logic            _GEN_13 = _GEN_6 & io_in_a_bits_size == 3'h6 & _GEN_12;
      automatic logic            _GEN_14 = io_in_a_bits_param > 3'h2;
      automatic logic            _GEN_15 = io_in_a_bits_mask != 8'hFF;
      automatic logic            _GEN_16 =
        io_in_a_valid & (&io_in_a_bits_opcode) & ~reset;
      automatic logic            _GEN_17 = _GEN_4 | _GEN_5 | _GEN_6 | _GEN_7 | _GEN_8;
      automatic logic            _GEN_18 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_19 = io_in_a_bits_size != 3'h7 & _GEN_12;
      automatic logic            _GEN_20 = io_in_a_bits_mask != mask;
      automatic logic            _GEN_21 = _GEN_17 & _GEN_19;
      automatic logic            _GEN_22 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_23 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_24 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_25 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h3 & ~reset;
      automatic logic            _GEN_26 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h5 & ~reset;
      automatic logic            source_ok_1 =
        io_in_d_bits_source[4:3] == 2'h0 | io_in_d_bits_source[4:3] == 2'h1
        | io_in_d_bits_source == 5'h10 | io_in_d_bits_source == 5'h11
        | io_in_d_bits_source == 5'h12;
      automatic logic            _GEN_27 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_28 = io_in_d_bits_size < 3'h3;
      automatic logic            _GEN_29 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_30 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h5 & ~reset;
      automatic logic            _GEN_31 = io_in_a_valid & (|a_first_counter) & ~reset;
      automatic logic            _GEN_32 = io_in_d_valid & (|d_first_counter) & ~reset;
      automatic logic [75:0]     _GEN_33 = {69'h0, io_in_d_bits_source, 2'h0};
      automatic logic [75:0]     _GEN_34 = inflight_opcodes >> _GEN_33;
      automatic logic            _GEN_35 = io_in_d_valid & d_first_1;
      automatic logic            _GEN_36 = _GEN_35 & ~d_release_ack;
      automatic logic            _GEN_37 = io_in_a_bits_source == io_in_d_bits_source;
      automatic logic            same_cycle_resp = io_in_a_valid & a_first_1 & _GEN_37;
      automatic logic [18:0]     _GEN_38 = {14'h0, io_in_d_bits_source};
      automatic logic            _GEN_39 = _GEN_36 & same_cycle_resp & ~reset;
      automatic logic            _GEN_40 = _GEN_36 & ~same_cycle_resp & ~reset;
      automatic logic            _GEN_41 =
        io_in_d_valid & d_first_2 & d_release_ack & ~reset;
      automatic logic [18:0]     _GEN_42 = inflight >> io_in_a_bits_source;
      automatic logic [18:0]     _GEN_43 = inflight >> _GEN_38;
      automatic logic [75:0]     _GEN_44 = inflight_sizes >> _GEN_33;
      automatic logic [18:0]     _GEN_45 = inflight_1 >> _GEN_38;
      automatic logic [75:0]     _GEN_46 = inflight_sizes_1 >> _GEN_33;
      if (_GEN_11) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_11 & ~_GEN_13) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_11 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock carries invalid source ID (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_11 & ~_GEN_10) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_11 & (|_GEN_9)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_11 & _GEN_14) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock carries invalid grow param (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_11 & _GEN_15) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_11 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock is corrupt (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16 & ~_GEN_13) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm carries invalid source ID (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16 & ~_GEN_10) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16 & (|_GEN_9)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16 & _GEN_14) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm carries invalid grow param (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16 & ~(|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16 & _GEN_15) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm is corrupt (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & ~_GEN_17) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & ~_GEN_19) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get carries invalid source ID (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & (|_GEN_9)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get address not aligned to size (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get carries invalid param (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & _GEN_20) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get contains invalid mask (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get is corrupt (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & ~_GEN_21) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull carries invalid source ID (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & (|_GEN_9)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull address not aligned to size (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull carries invalid param (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & _GEN_20) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull contains invalid mask (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_23 & ~_GEN_21) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_23 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_23 & (|_GEN_9)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial address not aligned to size (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_23 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial carries invalid param (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_23 & (|(io_in_a_bits_mask & ~mask))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial contains invalid mask (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_24) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_24 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_24 & (|_GEN_9)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_24 & io_in_a_bits_param > 3'h4) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_24 & _GEN_20) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical carries invalid source ID (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25 & (|_GEN_9)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical address not aligned to size (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25 & io_in_a_bits_param[2]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical carries invalid opcode param (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25 & _GEN_20) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical contains invalid mask (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_26) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_26 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint carries invalid source ID (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_26 & (|_GEN_9)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint address not aligned to size (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_26 & (|(io_in_a_bits_param[2:1]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint carries invalid opcode param (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_26 & _GEN_20) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint contains invalid mask (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_26 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint is corrupt (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & ~reset & (&io_in_d_bits_opcode)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel has invalid opcode (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & _GEN_28) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_29 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid source ID (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_29) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid sink ID (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_29 & _GEN_28) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant smaller than a beat (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid source ID (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid sink ID (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & _GEN_28) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData smaller than a beat (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & io_in_d_bits_opcode == 3'h0 & ~reset & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & io_in_d_bits_opcode == 3'h1 & ~reset & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & io_in_d_bits_opcode == 3'h2 & ~reset & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck carries invalid source ID (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & io_in_a_bits_opcode != opcode) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel opcode changed within multibeat operation (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & io_in_a_bits_param != param) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel param changed within multibeat operation (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & io_in_a_bits_size != size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel size changed within multibeat operation (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & io_in_a_bits_source != source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel source changed within multibeat operation (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & io_in_a_bits_address != address) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel address changed with multibeat operation (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & io_in_d_bits_opcode != opcode_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel opcode changed within multibeat operation (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & (|param_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel param changed within multibeat operation (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & io_in_d_bits_size != size_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel size changed within multibeat operation (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & io_in_d_bits_source != source_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel source changed within multibeat operation (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & sink) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel sink changed with multibeat operation (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel denied changed with multibeat operation (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_1 & ~reset & _GEN_42[0]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel re-used a source ID (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_36 & ~reset & ~(_GEN_43[0] | same_cycle_resp)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_39
          & ~(io_in_d_bits_opcode == _GEN_3[io_in_a_bits_opcode]
              | io_in_d_bits_opcode == _GEN_2[io_in_a_bits_opcode])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_39 & io_in_a_bits_size != io_in_d_bits_size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_40
          & ~(io_in_d_bits_opcode == _GEN_3[_GEN_34[3:1]]
              | io_in_d_bits_opcode == _GEN_2[_GEN_34[3:1]])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_40 & io_in_d_bits_size != _GEN_44[3:1]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_35 & a_first_1 & io_in_a_valid & _GEN_37 & ~d_release_ack & ~reset
          & ~(~io_in_d_ready | io_in_a_ready)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ready check\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight == 19'h0 | _plusarg_reader_out == 32'h0
              | watchdog < _plusarg_reader_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_41 & ~(_GEN_45[0])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_41 & io_in_d_bits_size != _GEN_46[3:1]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight_1 == 19'h0 | _plusarg_reader_1_out == 32'h0
              | watchdog_1 < _plusarg_reader_1_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/devices/tilelink/CLINT.scala:113:101)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    automatic logic _GEN_47;
    automatic logic _GEN_48;
    _GEN_47 = io_in_d_ready & io_in_d_valid;
    _GEN_48 = _GEN_47 & ~(|d_first_counter);
    if (reset) begin
      a_first_counter <= 3'h0;
      d_first_counter <= 3'h0;
      inflight <= 19'h0;
      inflight_opcodes <= 76'h0;
      inflight_sizes <= 76'h0;
      a_first_counter_1 <= 3'h0;
      d_first_counter_1 <= 3'h0;
      watchdog <= 32'h0;
      inflight_1 <= 19'h0;
      inflight_sizes_1 <= 76'h0;
      d_first_counter_2 <= 3'h0;
      watchdog_1 <= 32'h0;
    end
    else begin
      automatic logic [258:0] _GEN_49 = {252'h0, io_in_a_bits_source, 2'h0};
      automatic logic         _GEN_50;
      automatic logic [31:0]  _GEN_51 = 32'h1 << io_in_d_bits_source;
      automatic logic [270:0] _GEN_52 = 271'hF << {264'h0, io_in_d_bits_source, 2'h0};
      automatic logic [75:0]  d_sizes_clr;
      automatic logic         _GEN_53;
      automatic logic [31:0]  _GEN_54 = 32'h1 << io_in_a_bits_source;
      automatic logic [258:0] _GEN_55 =
        {255'h0, _GEN_1 ? {io_in_a_bits_opcode, 1'h1} : 4'h0} << _GEN_49;
      automatic logic [258:0] _GEN_56 =
        {255'h0, _GEN_1 ? {io_in_a_bits_size, 1'h1} : 4'h0} << _GEN_49;
      _GEN_50 = _GEN_47 & d_first_1 & ~d_release_ack;
      d_sizes_clr = _GEN_50 ? _GEN_52[75:0] : 76'h0;
      _GEN_53 = _GEN_47 & d_first_2 & d_release_ack;
      if (_GEN_0) begin
        if (|a_first_counter)
          a_first_counter <= a_first_counter - 3'h1;
        else if (io_in_a_bits_opcode[2])
          a_first_counter <= 3'h0;
        else
          a_first_counter <= ~(_GEN[5:3]);
        if (a_first_1) begin
          if (io_in_a_bits_opcode[2])
            a_first_counter_1 <= 3'h0;
          else
            a_first_counter_1 <= ~(_GEN[5:3]);
        end
        else
          a_first_counter_1 <= a_first_counter_1 - 3'h1;
      end
      if (_GEN_47) begin
        automatic logic [12:0] _GEN_57 = 13'h3F << io_in_d_bits_size;
        if (|d_first_counter)
          d_first_counter <= d_first_counter - 3'h1;
        else if (io_in_d_bits_opcode[0])
          d_first_counter <= ~(_GEN_57[5:3]);
        else
          d_first_counter <= 3'h0;
        if (d_first_1) begin
          if (io_in_d_bits_opcode[0])
            d_first_counter_1 <= ~(_GEN_57[5:3]);
          else
            d_first_counter_1 <= 3'h0;
        end
        else
          d_first_counter_1 <= d_first_counter_1 - 3'h1;
        if (d_first_2) begin
          if (io_in_d_bits_opcode[0])
            d_first_counter_2 <= ~(_GEN_57[5:3]);
          else
            d_first_counter_2 <= 3'h0;
        end
        else
          d_first_counter_2 <= d_first_counter_2 - 3'h1;
        watchdog_1 <= 32'h0;
      end
      else
        watchdog_1 <= watchdog_1 + 32'h1;
      inflight <=
        (inflight | (_GEN_1 ? _GEN_54[18:0] : 19'h0))
        & ~(_GEN_50 ? _GEN_51[18:0] : 19'h0);
      inflight_opcodes <=
        (inflight_opcodes | (_GEN_1 ? _GEN_55[75:0] : 76'h0)) & ~d_sizes_clr;
      inflight_sizes <=
        (inflight_sizes | (_GEN_1 ? _GEN_56[75:0] : 76'h0)) & ~d_sizes_clr;
      if (_GEN_0 | _GEN_47)
        watchdog <= 32'h0;
      else
        watchdog <= watchdog + 32'h1;
      inflight_1 <= inflight_1 & ~(_GEN_53 ? _GEN_51[18:0] : 19'h0);
      inflight_sizes_1 <= inflight_sizes_1 & ~(_GEN_53 ? _GEN_52[75:0] : 76'h0);
    end
    if (_GEN_0 & ~(|a_first_counter)) begin
      opcode <= io_in_a_bits_opcode;
      param <= io_in_a_bits_param;
      size <= io_in_a_bits_size;
      source <= io_in_a_bits_source;
      address <= io_in_a_bits_address;
    end
    if (_GEN_48) begin
      opcode_1 <= io_in_d_bits_opcode;
      param_1 <= 2'h0;
      size_1 <= io_in_d_bits_size;
      source_1 <= io_in_d_bits_source;
    end
    sink <= ~_GEN_48 & sink;
    denied <= ~_GEN_48 & denied;
  end // always @(posedge)
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader (
    .out (_plusarg_reader_out)
  );
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader_1 (
    .out (_plusarg_reader_1_out)
  );
endmodule

module Repeater_TLBundleA_a26d64s5k1z3u(
  input         clock,
                reset,
                io_repeat,
                io_enq_valid,
  input  [2:0]  io_enq_bits_opcode,
                io_enq_bits_param,
                io_enq_bits_size,
  input  [4:0]  io_enq_bits_source,
  input  [25:0] io_enq_bits_address,
  input  [7:0]  io_enq_bits_mask,
  input         io_enq_bits_corrupt,
                io_deq_ready,
  output        io_full,
                io_enq_ready,
                io_deq_valid,
  output [2:0]  io_deq_bits_opcode,
                io_deq_bits_param,
                io_deq_bits_size,
  output [4:0]  io_deq_bits_source,
  output [25:0] io_deq_bits_address,
  output [7:0]  io_deq_bits_mask,
  output        io_deq_bits_corrupt
);

  reg         full;
  reg  [2:0]  saved_opcode;
  reg  [2:0]  saved_param;
  reg  [2:0]  saved_size;
  reg  [4:0]  saved_source;
  reg  [25:0] saved_address;
  reg  [7:0]  saved_mask;
  reg         saved_corrupt;
  wire        _io_deq_valid_output = io_enq_valid | full;
  wire        _io_enq_ready_output = io_deq_ready & ~full;
  always @(posedge clock) begin
    automatic logic _GEN;
    _GEN = _io_enq_ready_output & io_enq_valid & io_repeat;
    if (reset)
      full <= 1'h0;
    else
      full <= ~(io_deq_ready & _io_deq_valid_output & ~io_repeat) & (_GEN | full);
    if (_GEN) begin
      saved_opcode <= io_enq_bits_opcode;
      saved_param <= io_enq_bits_param;
      saved_size <= io_enq_bits_size;
      saved_source <= io_enq_bits_source;
      saved_address <= io_enq_bits_address;
      saved_mask <= io_enq_bits_mask;
      saved_corrupt <= io_enq_bits_corrupt;
    end
  end // always @(posedge)
  assign io_full = full;
  assign io_enq_ready = _io_enq_ready_output;
  assign io_deq_valid = _io_deq_valid_output;
  assign io_deq_bits_opcode = full ? saved_opcode : io_enq_bits_opcode;
  assign io_deq_bits_param = full ? saved_param : io_enq_bits_param;
  assign io_deq_bits_size = full ? saved_size : io_enq_bits_size;
  assign io_deq_bits_source = full ? saved_source : io_enq_bits_source;
  assign io_deq_bits_address = full ? saved_address : io_enq_bits_address;
  assign io_deq_bits_mask = full ? saved_mask : io_enq_bits_mask;
  assign io_deq_bits_corrupt = full ? saved_corrupt : io_enq_bits_corrupt;
endmodule

module TLFragmenter_CLINT(
  input         clock,
                reset,
                auto_anon_in_a_valid,
  input  [2:0]  auto_anon_in_a_bits_opcode,
                auto_anon_in_a_bits_param,
                auto_anon_in_a_bits_size,
  input  [4:0]  auto_anon_in_a_bits_source,
  input  [25:0] auto_anon_in_a_bits_address,
  input  [7:0]  auto_anon_in_a_bits_mask,
  input  [63:0] auto_anon_in_a_bits_data,
  input         auto_anon_in_a_bits_corrupt,
                auto_anon_in_d_ready,
                auto_anon_out_a_ready,
                auto_anon_out_d_valid,
  input  [2:0]  auto_anon_out_d_bits_opcode,
  input  [1:0]  auto_anon_out_d_bits_size,
  input  [8:0]  auto_anon_out_d_bits_source,
  input  [63:0] auto_anon_out_d_bits_data,
  output        auto_anon_in_a_ready,
                auto_anon_in_d_valid,
  output [2:0]  auto_anon_in_d_bits_opcode,
                auto_anon_in_d_bits_size,
  output [4:0]  auto_anon_in_d_bits_source,
  output [63:0] auto_anon_in_d_bits_data,
  output        auto_anon_out_a_valid,
  output [2:0]  auto_anon_out_a_bits_opcode,
                auto_anon_out_a_bits_param,
  output [1:0]  auto_anon_out_a_bits_size,
  output [8:0]  auto_anon_out_a_bits_source,
  output [25:0] auto_anon_out_a_bits_address,
  output [7:0]  auto_anon_out_a_bits_mask,
  output [63:0] auto_anon_out_a_bits_data,
  output        auto_anon_out_a_bits_corrupt,
                auto_anon_out_d_ready
);

  wire        _repeater_io_full;
  wire        _repeater_io_enq_ready;
  wire        _repeater_io_deq_valid;
  wire [2:0]  _repeater_io_deq_bits_opcode;
  wire [2:0]  _repeater_io_deq_bits_size;
  wire [4:0]  _repeater_io_deq_bits_source;
  wire [25:0] _repeater_io_deq_bits_address;
  wire [7:0]  _repeater_io_deq_bits_mask;
  reg  [2:0]  acknum;
  reg  [2:0]  dOrig;
  reg         dToggle;
  wire        dFirst = acknum == 3'h0;
  wire [5:0]  _GEN = 6'h7 << auto_anon_out_d_bits_size;
  wire [5:0]  _GEN_0 =
    {auto_anon_out_d_bits_source[2:0], ~(_GEN[2:0])}
    & {1'h1, ~(auto_anon_out_d_bits_source[2:0]), _GEN[2:1]};
  wire [2:0]  _GEN_1 = {1'h0, _GEN_0[5:4]} | _GEN_0[2:0];
  wire [2:0]  dFirst_size = {|(_GEN_0[5:3]), |(_GEN_1[2:1]), _GEN_1[2] | _GEN_1[0]};
  wire        drop =
    ~(auto_anon_out_d_bits_opcode[0]) & (|(auto_anon_out_d_bits_source[2:0]));
  wire        anonOut_d_ready = auto_anon_in_d_ready | drop;
  wire        anonIn_d_valid = auto_anon_out_d_valid & ~drop;
  wire [2:0]  anonIn_d_bits_size = dFirst ? dFirst_size : dOrig;
  wire [12:0] _GEN_2 = 13'h3F << _repeater_io_deq_bits_size;
  reg  [2:0]  gennum;
  wire        aFirst = gennum == 3'h0;
  wire [2:0]  _GEN_3 = gennum - 3'h1;
  wire [2:0]  aFragnum = aFirst ? ~(_GEN_2[5:3]) : _GEN_3;
  reg         aToggle_r;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (~reset & ~(~_repeater_io_full | _repeater_io_deq_bits_opcode[2])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Fragmenter.scala:321 assert (!repeater.io.full || !aHasData)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_repeater_io_full | (&_repeater_io_deq_bits_mask))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Fragmenter.scala:324 assert (!repeater.io.full || in_a.bits.mask === fullMask)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    automatic logic _GEN_4;
    automatic logic _GEN_5;
    _GEN_4 = anonOut_d_ready & auto_anon_out_d_valid;
    _GEN_5 = _GEN_4 & dFirst;
    if (reset) begin
      acknum <= 3'h0;
      dToggle <= 1'h0;
      gennum <= 3'h0;
    end
    else begin
      if (_GEN_4) begin
        if (dFirst)
          acknum <= auto_anon_out_d_bits_source[2:0];
        else
          acknum <=
            acknum
            - {2'h0, auto_anon_out_d_bits_opcode[0] | (&auto_anon_out_d_bits_size)};
      end
      if (_GEN_5)
        dToggle <= auto_anon_out_d_bits_source[3];
      if (auto_anon_out_a_ready & _repeater_io_deq_valid) begin
        if (aFirst)
          gennum <= ~(_GEN_2[5:3]);
        else
          gennum <= _GEN_3;
      end
    end
    if (_GEN_5)
      dOrig <= dFirst_size;
    if (aFirst)
      aToggle_r <= dToggle;
  end // always @(posedge)
  TLMonitor_14 monitor (
    .clock                (clock),
    .reset                (reset),
    .io_in_a_ready        (_repeater_io_enq_ready),
    .io_in_a_valid        (auto_anon_in_a_valid),
    .io_in_a_bits_opcode  (auto_anon_in_a_bits_opcode),
    .io_in_a_bits_param   (auto_anon_in_a_bits_param),
    .io_in_a_bits_size    (auto_anon_in_a_bits_size),
    .io_in_a_bits_source  (auto_anon_in_a_bits_source),
    .io_in_a_bits_address (auto_anon_in_a_bits_address),
    .io_in_a_bits_mask    (auto_anon_in_a_bits_mask),
    .io_in_a_bits_corrupt (auto_anon_in_a_bits_corrupt),
    .io_in_d_ready        (auto_anon_in_d_ready),
    .io_in_d_valid        (anonIn_d_valid),
    .io_in_d_bits_opcode  (auto_anon_out_d_bits_opcode),
    .io_in_d_bits_size    (anonIn_d_bits_size),
    .io_in_d_bits_source  (auto_anon_out_d_bits_source[8:4])
  );
  Repeater_TLBundleA_a26d64s5k1z3u repeater (
    .clock               (clock),
    .reset               (reset),
    .io_repeat           (_repeater_io_deq_bits_opcode[2] & (|aFragnum)),
    .io_enq_valid        (auto_anon_in_a_valid),
    .io_enq_bits_opcode  (auto_anon_in_a_bits_opcode),
    .io_enq_bits_param   (auto_anon_in_a_bits_param),
    .io_enq_bits_size    (auto_anon_in_a_bits_size),
    .io_enq_bits_source  (auto_anon_in_a_bits_source),
    .io_enq_bits_address (auto_anon_in_a_bits_address),
    .io_enq_bits_mask    (auto_anon_in_a_bits_mask),
    .io_enq_bits_corrupt (auto_anon_in_a_bits_corrupt),
    .io_deq_ready        (auto_anon_out_a_ready),
    .io_full             (_repeater_io_full),
    .io_enq_ready        (_repeater_io_enq_ready),
    .io_deq_valid        (_repeater_io_deq_valid),
    .io_deq_bits_opcode  (_repeater_io_deq_bits_opcode),
    .io_deq_bits_param   (auto_anon_out_a_bits_param),
    .io_deq_bits_size    (_repeater_io_deq_bits_size),
    .io_deq_bits_source  (_repeater_io_deq_bits_source),
    .io_deq_bits_address (_repeater_io_deq_bits_address),
    .io_deq_bits_mask    (_repeater_io_deq_bits_mask),
    .io_deq_bits_corrupt (auto_anon_out_a_bits_corrupt)
  );
  assign auto_anon_in_a_ready = _repeater_io_enq_ready;
  assign auto_anon_in_d_valid = anonIn_d_valid;
  assign auto_anon_in_d_bits_opcode = auto_anon_out_d_bits_opcode;
  assign auto_anon_in_d_bits_size = anonIn_d_bits_size;
  assign auto_anon_in_d_bits_source = auto_anon_out_d_bits_source[8:4];
  assign auto_anon_in_d_bits_data = auto_anon_out_d_bits_data;
  assign auto_anon_out_a_valid = _repeater_io_deq_valid;
  assign auto_anon_out_a_bits_opcode = _repeater_io_deq_bits_opcode;
  assign auto_anon_out_a_bits_size =
    _repeater_io_deq_bits_size[2] ? 2'h3 : _repeater_io_deq_bits_size[1:0];
  assign auto_anon_out_a_bits_source =
    {_repeater_io_deq_bits_source, ~(aFirst ? dToggle : aToggle_r), aFragnum};
  assign auto_anon_out_a_bits_address =
    {_repeater_io_deq_bits_address[25:6],
     _repeater_io_deq_bits_address[5:0] | {~(aFragnum | _GEN_2[5:3]), 3'h0}};
  assign auto_anon_out_a_bits_mask = _repeater_io_full ? 8'hFF : auto_anon_in_a_bits_mask;
  assign auto_anon_out_a_bits_data = auto_anon_in_a_bits_data;
  assign auto_anon_out_d_ready = anonOut_d_ready;
endmodule

module TLInterconnectCoupler_cbus_to_clint(
  input         clock,
                reset,
                auto_fragmenter_anon_out_a_ready,
                auto_fragmenter_anon_out_d_valid,
  input  [2:0]  auto_fragmenter_anon_out_d_bits_opcode,
  input  [1:0]  auto_fragmenter_anon_out_d_bits_size,
  input  [8:0]  auto_fragmenter_anon_out_d_bits_source,
  input  [63:0] auto_fragmenter_anon_out_d_bits_data,
  input         auto_tl_in_a_valid,
  input  [2:0]  auto_tl_in_a_bits_opcode,
                auto_tl_in_a_bits_param,
                auto_tl_in_a_bits_size,
  input  [4:0]  auto_tl_in_a_bits_source,
  input  [25:0] auto_tl_in_a_bits_address,
  input  [7:0]  auto_tl_in_a_bits_mask,
  input  [63:0] auto_tl_in_a_bits_data,
  input         auto_tl_in_a_bits_corrupt,
                auto_tl_in_d_ready,
  output        auto_fragmenter_anon_out_a_valid,
  output [2:0]  auto_fragmenter_anon_out_a_bits_opcode,
                auto_fragmenter_anon_out_a_bits_param,
  output [1:0]  auto_fragmenter_anon_out_a_bits_size,
  output [8:0]  auto_fragmenter_anon_out_a_bits_source,
  output [25:0] auto_fragmenter_anon_out_a_bits_address,
  output [7:0]  auto_fragmenter_anon_out_a_bits_mask,
  output [63:0] auto_fragmenter_anon_out_a_bits_data,
  output        auto_fragmenter_anon_out_a_bits_corrupt,
                auto_fragmenter_anon_out_d_ready,
                auto_tl_in_a_ready,
                auto_tl_in_d_valid,
  output [2:0]  auto_tl_in_d_bits_opcode,
                auto_tl_in_d_bits_size,
  output [4:0]  auto_tl_in_d_bits_source,
  output [63:0] auto_tl_in_d_bits_data
);

  TLFragmenter_CLINT fragmenter (
    .clock                        (clock),
    .reset                        (reset),
    .auto_anon_in_a_valid         (auto_tl_in_a_valid),
    .auto_anon_in_a_bits_opcode   (auto_tl_in_a_bits_opcode),
    .auto_anon_in_a_bits_param    (auto_tl_in_a_bits_param),
    .auto_anon_in_a_bits_size     (auto_tl_in_a_bits_size),
    .auto_anon_in_a_bits_source   (auto_tl_in_a_bits_source),
    .auto_anon_in_a_bits_address  (auto_tl_in_a_bits_address),
    .auto_anon_in_a_bits_mask     (auto_tl_in_a_bits_mask),
    .auto_anon_in_a_bits_data     (auto_tl_in_a_bits_data),
    .auto_anon_in_a_bits_corrupt  (auto_tl_in_a_bits_corrupt),
    .auto_anon_in_d_ready         (auto_tl_in_d_ready),
    .auto_anon_out_a_ready        (auto_fragmenter_anon_out_a_ready),
    .auto_anon_out_d_valid        (auto_fragmenter_anon_out_d_valid),
    .auto_anon_out_d_bits_opcode  (auto_fragmenter_anon_out_d_bits_opcode),
    .auto_anon_out_d_bits_size    (auto_fragmenter_anon_out_d_bits_size),
    .auto_anon_out_d_bits_source  (auto_fragmenter_anon_out_d_bits_source),
    .auto_anon_out_d_bits_data    (auto_fragmenter_anon_out_d_bits_data),
    .auto_anon_in_a_ready         (auto_tl_in_a_ready),
    .auto_anon_in_d_valid         (auto_tl_in_d_valid),
    .auto_anon_in_d_bits_opcode   (auto_tl_in_d_bits_opcode),
    .auto_anon_in_d_bits_size     (auto_tl_in_d_bits_size),
    .auto_anon_in_d_bits_source   (auto_tl_in_d_bits_source),
    .auto_anon_in_d_bits_data     (auto_tl_in_d_bits_data),
    .auto_anon_out_a_valid        (auto_fragmenter_anon_out_a_valid),
    .auto_anon_out_a_bits_opcode  (auto_fragmenter_anon_out_a_bits_opcode),
    .auto_anon_out_a_bits_param   (auto_fragmenter_anon_out_a_bits_param),
    .auto_anon_out_a_bits_size    (auto_fragmenter_anon_out_a_bits_size),
    .auto_anon_out_a_bits_source  (auto_fragmenter_anon_out_a_bits_source),
    .auto_anon_out_a_bits_address (auto_fragmenter_anon_out_a_bits_address),
    .auto_anon_out_a_bits_mask    (auto_fragmenter_anon_out_a_bits_mask),
    .auto_anon_out_a_bits_data    (auto_fragmenter_anon_out_a_bits_data),
    .auto_anon_out_a_bits_corrupt (auto_fragmenter_anon_out_a_bits_corrupt),
    .auto_anon_out_d_ready        (auto_fragmenter_anon_out_d_ready)
  );
endmodule

module TLMonitor_15(
  input        clock,
               reset,
               io_in_a_ready,
               io_in_a_valid,
  input [2:0]  io_in_a_bits_opcode,
               io_in_a_bits_param,
               io_in_a_bits_size,
  input [4:0]  io_in_a_bits_source,
  input [27:0] io_in_a_bits_address,
  input [7:0]  io_in_a_bits_mask,
  input        io_in_a_bits_corrupt,
               io_in_d_ready,
               io_in_d_valid,
  input [2:0]  io_in_d_bits_opcode,
               io_in_d_bits_size,
  input [4:0]  io_in_d_bits_source
);

  wire [31:0] _plusarg_reader_1_out;
  wire [31:0] _plusarg_reader_out;
  wire [12:0] _GEN = 13'h3F << io_in_a_bits_size;
  wire        _GEN_0 = io_in_a_ready & io_in_a_valid;
  reg  [2:0]  a_first_counter;
  reg  [2:0]  opcode;
  reg  [2:0]  param;
  reg  [2:0]  size;
  reg  [4:0]  source;
  reg  [27:0] address;
  reg  [2:0]  d_first_counter;
  reg  [2:0]  opcode_1;
  reg  [1:0]  param_1;
  reg  [2:0]  size_1;
  reg  [4:0]  source_1;
  reg         sink;
  reg         denied;
  reg  [18:0] inflight;
  reg  [75:0] inflight_opcodes;
  reg  [75:0] inflight_sizes;
  reg  [2:0]  a_first_counter_1;
  wire        a_first_1 = a_first_counter_1 == 3'h0;
  reg  [2:0]  d_first_counter_1;
  wire        d_first_1 = d_first_counter_1 == 3'h0;
  wire [31:0] _GEN_1 = 32'h1 << io_in_a_bits_source;
  wire        _GEN_2 = _GEN_0 & a_first_1;
  wire        d_release_ack = io_in_d_bits_opcode == 3'h6;
  wire [31:0] _GEN_3 = 32'h1 << io_in_d_bits_source;
  reg  [31:0] watchdog;
  reg  [18:0] inflight_1;
  reg  [75:0] inflight_sizes_1;
  reg  [2:0]  d_first_counter_2;
  wire        d_first_2 = d_first_counter_2 == 3'h0;
  reg  [31:0] watchdog_1;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      automatic logic [7:0][2:0] _GEN_4 =
        '{3'h4, 3'h5, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic [7:0][2:0] _GEN_5 =
        '{3'h4, 3'h4, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic            _GEN_6 = io_in_a_bits_source[4:3] == 2'h0;
      automatic logic            _GEN_7 = io_in_a_bits_source[4:3] == 2'h1;
      automatic logic            _GEN_8 = io_in_a_bits_source == 5'h10;
      automatic logic            _GEN_9 = io_in_a_bits_source == 5'h11;
      automatic logic            _GEN_10 = io_in_a_bits_source == 5'h12;
      automatic logic            source_ok = _GEN_6 | _GEN_7 | _GEN_8 | _GEN_9 | _GEN_10;
      automatic logic [5:0]      _GEN_11 = io_in_a_bits_address[5:0] & ~(_GEN[5:0]);
      automatic logic            _GEN_12 = io_in_a_bits_size > 3'h2;
      automatic logic            mask_size = io_in_a_bits_size[1:0] == 2'h2;
      automatic logic            mask_acc =
        _GEN_12 | mask_size & ~(io_in_a_bits_address[2]);
      automatic logic            mask_acc_1 =
        _GEN_12 | mask_size & io_in_a_bits_address[2];
      automatic logic            mask_size_1 = io_in_a_bits_size[1:0] == 2'h1;
      automatic logic            mask_eq_2 =
        ~(io_in_a_bits_address[2]) & ~(io_in_a_bits_address[1]);
      automatic logic            mask_acc_2 = mask_acc | mask_size_1 & mask_eq_2;
      automatic logic            mask_eq_3 =
        ~(io_in_a_bits_address[2]) & io_in_a_bits_address[1];
      automatic logic            mask_acc_3 = mask_acc | mask_size_1 & mask_eq_3;
      automatic logic            mask_eq_4 =
        io_in_a_bits_address[2] & ~(io_in_a_bits_address[1]);
      automatic logic            mask_acc_4 = mask_acc_1 | mask_size_1 & mask_eq_4;
      automatic logic            mask_eq_5 =
        io_in_a_bits_address[2] & io_in_a_bits_address[1];
      automatic logic            mask_acc_5 = mask_acc_1 | mask_size_1 & mask_eq_5;
      automatic logic [7:0]      mask =
        {mask_acc_5 | mask_eq_5 & io_in_a_bits_address[0],
         mask_acc_5 | mask_eq_5 & ~(io_in_a_bits_address[0]),
         mask_acc_4 | mask_eq_4 & io_in_a_bits_address[0],
         mask_acc_4 | mask_eq_4 & ~(io_in_a_bits_address[0]),
         mask_acc_3 | mask_eq_3 & io_in_a_bits_address[0],
         mask_acc_3 | mask_eq_3 & ~(io_in_a_bits_address[0]),
         mask_acc_2 | mask_eq_2 & io_in_a_bits_address[0],
         mask_acc_2 | mask_eq_2 & ~(io_in_a_bits_address[0])};
      automatic logic            _GEN_13 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_14 =
        _GEN_8 & io_in_a_bits_size == 3'h6 & (&(io_in_a_bits_address[27:26]));
      automatic logic            _GEN_15 = io_in_a_bits_param > 3'h2;
      automatic logic            _GEN_16 = io_in_a_bits_mask != 8'hFF;
      automatic logic            _GEN_17 =
        io_in_a_valid & (&io_in_a_bits_opcode) & ~reset;
      automatic logic            _GEN_18 = _GEN_6 | _GEN_7 | _GEN_8 | _GEN_9 | _GEN_10;
      automatic logic            _GEN_19 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_20 =
        io_in_a_bits_size != 3'h7 & (&(io_in_a_bits_address[27:26]));
      automatic logic            _GEN_21 = io_in_a_bits_mask != mask;
      automatic logic            _GEN_22 = _GEN_18 & _GEN_20;
      automatic logic            _GEN_23 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_24 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_25 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_26 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h3 & ~reset;
      automatic logic            _GEN_27 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h5 & ~reset;
      automatic logic            source_ok_1 =
        io_in_d_bits_source[4:3] == 2'h0 | io_in_d_bits_source[4:3] == 2'h1
        | io_in_d_bits_source == 5'h10 | io_in_d_bits_source == 5'h11
        | io_in_d_bits_source == 5'h12;
      automatic logic            _GEN_28 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_29 = io_in_d_bits_size < 3'h3;
      automatic logic            _GEN_30 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_31 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h5 & ~reset;
      automatic logic            _GEN_32 = io_in_a_valid & (|a_first_counter) & ~reset;
      automatic logic            _GEN_33 = io_in_d_valid & (|d_first_counter) & ~reset;
      automatic logic [75:0]     _GEN_34 = {69'h0, io_in_d_bits_source, 2'h0};
      automatic logic [75:0]     _GEN_35 = inflight_opcodes >> _GEN_34;
      automatic logic            _GEN_36 = io_in_a_valid & a_first_1;
      automatic logic [18:0]     a_set_wo_ready = _GEN_36 ? _GEN_1[18:0] : 19'h0;
      automatic logic            _GEN_37 = io_in_d_valid & d_first_1;
      automatic logic            _GEN_38 = _GEN_37 & ~d_release_ack;
      automatic logic            _GEN_39 = io_in_a_bits_source == io_in_d_bits_source;
      automatic logic            same_cycle_resp = _GEN_36 & _GEN_39;
      automatic logic [18:0]     _GEN_40 = {14'h0, io_in_d_bits_source};
      automatic logic            _GEN_41 = _GEN_38 & same_cycle_resp & ~reset;
      automatic logic            _GEN_42 = _GEN_38 & ~same_cycle_resp & ~reset;
      automatic logic            _GEN_43 =
        io_in_d_valid & d_first_2 & d_release_ack & ~reset;
      automatic logic [18:0]     _GEN_44 = inflight >> io_in_a_bits_source;
      automatic logic [18:0]     _GEN_45 = inflight >> _GEN_40;
      automatic logic [75:0]     _GEN_46 = inflight_sizes >> _GEN_34;
      automatic logic [18:0]     _GEN_47 = inflight_1 >> _GEN_40;
      automatic logic [75:0]     _GEN_48 = inflight_sizes_1 >> _GEN_34;
      if (_GEN_13) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_13 & ~_GEN_14) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_13 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock carries invalid source ID (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_13 & ~_GEN_12) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_13 & (|_GEN_11)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_13 & _GEN_15) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock carries invalid grow param (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_13 & _GEN_16) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_13 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock is corrupt (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & ~_GEN_14) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm carries invalid source ID (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & ~_GEN_12) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & (|_GEN_11)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & _GEN_15) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm carries invalid grow param (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & ~(|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & _GEN_16) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm is corrupt (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & ~_GEN_18) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & ~_GEN_20) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get carries invalid source ID (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & (|_GEN_11)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get address not aligned to size (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get carries invalid param (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & _GEN_21) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get contains invalid mask (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get is corrupt (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_23 & ~_GEN_22) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_23 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull carries invalid source ID (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_23 & (|_GEN_11)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull address not aligned to size (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_23 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull carries invalid param (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_23 & _GEN_21) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull contains invalid mask (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_24 & ~_GEN_22) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_24 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_24 & (|_GEN_11)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial address not aligned to size (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_24 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial carries invalid param (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_24 & (|(io_in_a_bits_mask & ~mask))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial contains invalid mask (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25 & (|_GEN_11)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25 & io_in_a_bits_param > 3'h4) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25 & _GEN_21) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_26) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_26 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical carries invalid source ID (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_26 & (|_GEN_11)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical address not aligned to size (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_26 & io_in_a_bits_param[2]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical carries invalid opcode param (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_26 & _GEN_21) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical contains invalid mask (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint carries invalid source ID (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & (|_GEN_11)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint address not aligned to size (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & (|(io_in_a_bits_param[2:1]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint carries invalid opcode param (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & _GEN_21) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint contains invalid mask (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint is corrupt (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & ~reset & (&io_in_d_bits_opcode)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel has invalid opcode (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & _GEN_29) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid source ID (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid sink ID (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & _GEN_29) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant smaller than a beat (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid source ID (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid sink ID (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & _GEN_29) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData smaller than a beat (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & io_in_d_bits_opcode == 3'h0 & ~reset & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & io_in_d_bits_opcode == 3'h1 & ~reset & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & io_in_d_bits_opcode == 3'h2 & ~reset & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck carries invalid source ID (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & io_in_a_bits_opcode != opcode) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel opcode changed within multibeat operation (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & io_in_a_bits_param != param) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel param changed within multibeat operation (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & io_in_a_bits_size != size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel size changed within multibeat operation (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & io_in_a_bits_source != source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel source changed within multibeat operation (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & io_in_a_bits_address != address) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel address changed with multibeat operation (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_33 & io_in_d_bits_opcode != opcode_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel opcode changed within multibeat operation (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_33 & (|param_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel param changed within multibeat operation (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_33 & io_in_d_bits_size != size_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel size changed within multibeat operation (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_33 & io_in_d_bits_source != source_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel source changed within multibeat operation (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_33 & sink) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel sink changed with multibeat operation (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_33 & denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel denied changed with multibeat operation (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_2 & ~reset & _GEN_44[0]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel re-used a source ID (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_38 & ~reset & ~(_GEN_45[0] | same_cycle_resp)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_41
          & ~(io_in_d_bits_opcode == _GEN_5[io_in_a_bits_opcode]
              | io_in_d_bits_opcode == _GEN_4[io_in_a_bits_opcode])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_41 & io_in_a_bits_size != io_in_d_bits_size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42
          & ~(io_in_d_bits_opcode == _GEN_5[_GEN_35[3:1]]
              | io_in_d_bits_opcode == _GEN_4[_GEN_35[3:1]])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & io_in_d_bits_size != _GEN_46[3:1]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & a_first_1 & io_in_a_valid & _GEN_39 & ~d_release_ack & ~reset
          & ~(~io_in_d_ready | io_in_a_ready)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ready check\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(a_set_wo_ready != (_GEN_38 ? _GEN_3[18:0] : 19'h0)
              | a_set_wo_ready == 19'h0)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' and 'D' concurrent, despite minlatency > 0 (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight == 19'h0 | _plusarg_reader_out == 32'h0
              | watchdog < _plusarg_reader_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & ~(_GEN_47[0])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & io_in_d_bits_size != _GEN_48[3:1]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight_1 == 19'h0 | _plusarg_reader_1_out == 32'h0
              | watchdog_1 < _plusarg_reader_1_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/devices/tilelink/Plic.scala:368:97)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    automatic logic _GEN_49;
    automatic logic _GEN_50;
    _GEN_49 = io_in_d_ready & io_in_d_valid;
    _GEN_50 = _GEN_49 & ~(|d_first_counter);
    if (reset) begin
      a_first_counter <= 3'h0;
      d_first_counter <= 3'h0;
      inflight <= 19'h0;
      inflight_opcodes <= 76'h0;
      inflight_sizes <= 76'h0;
      a_first_counter_1 <= 3'h0;
      d_first_counter_1 <= 3'h0;
      watchdog <= 32'h0;
      inflight_1 <= 19'h0;
      inflight_sizes_1 <= 76'h0;
      d_first_counter_2 <= 3'h0;
      watchdog_1 <= 32'h0;
    end
    else begin
      automatic logic [258:0] _GEN_51 = {252'h0, io_in_a_bits_source, 2'h0};
      automatic logic         _GEN_52;
      automatic logic [270:0] _GEN_53 = 271'hF << {264'h0, io_in_d_bits_source, 2'h0};
      automatic logic [75:0]  d_sizes_clr;
      automatic logic         _GEN_54;
      automatic logic [258:0] _GEN_55 =
        {255'h0, _GEN_2 ? {io_in_a_bits_opcode, 1'h1} : 4'h0} << _GEN_51;
      automatic logic [258:0] _GEN_56 =
        {255'h0, _GEN_2 ? {io_in_a_bits_size, 1'h1} : 4'h0} << _GEN_51;
      _GEN_52 = _GEN_49 & d_first_1 & ~d_release_ack;
      d_sizes_clr = _GEN_52 ? _GEN_53[75:0] : 76'h0;
      _GEN_54 = _GEN_49 & d_first_2 & d_release_ack;
      if (_GEN_0) begin
        if (|a_first_counter)
          a_first_counter <= a_first_counter - 3'h1;
        else if (io_in_a_bits_opcode[2])
          a_first_counter <= 3'h0;
        else
          a_first_counter <= ~(_GEN[5:3]);
        if (a_first_1) begin
          if (io_in_a_bits_opcode[2])
            a_first_counter_1 <= 3'h0;
          else
            a_first_counter_1 <= ~(_GEN[5:3]);
        end
        else
          a_first_counter_1 <= a_first_counter_1 - 3'h1;
      end
      if (_GEN_49) begin
        automatic logic [12:0] _GEN_57 = 13'h3F << io_in_d_bits_size;
        if (|d_first_counter)
          d_first_counter <= d_first_counter - 3'h1;
        else if (io_in_d_bits_opcode[0])
          d_first_counter <= ~(_GEN_57[5:3]);
        else
          d_first_counter <= 3'h0;
        if (d_first_1) begin
          if (io_in_d_bits_opcode[0])
            d_first_counter_1 <= ~(_GEN_57[5:3]);
          else
            d_first_counter_1 <= 3'h0;
        end
        else
          d_first_counter_1 <= d_first_counter_1 - 3'h1;
        if (d_first_2) begin
          if (io_in_d_bits_opcode[0])
            d_first_counter_2 <= ~(_GEN_57[5:3]);
          else
            d_first_counter_2 <= 3'h0;
        end
        else
          d_first_counter_2 <= d_first_counter_2 - 3'h1;
        watchdog_1 <= 32'h0;
      end
      else
        watchdog_1 <= watchdog_1 + 32'h1;
      inflight <=
        (inflight | (_GEN_2 ? _GEN_1[18:0] : 19'h0)) & ~(_GEN_52 ? _GEN_3[18:0] : 19'h0);
      inflight_opcodes <=
        (inflight_opcodes | (_GEN_2 ? _GEN_55[75:0] : 76'h0)) & ~d_sizes_clr;
      inflight_sizes <=
        (inflight_sizes | (_GEN_2 ? _GEN_56[75:0] : 76'h0)) & ~d_sizes_clr;
      if (_GEN_0 | _GEN_49)
        watchdog <= 32'h0;
      else
        watchdog <= watchdog + 32'h1;
      inflight_1 <= inflight_1 & ~(_GEN_54 ? _GEN_3[18:0] : 19'h0);
      inflight_sizes_1 <= inflight_sizes_1 & ~(_GEN_54 ? _GEN_53[75:0] : 76'h0);
    end
    if (_GEN_0 & ~(|a_first_counter)) begin
      opcode <= io_in_a_bits_opcode;
      param <= io_in_a_bits_param;
      size <= io_in_a_bits_size;
      source <= io_in_a_bits_source;
      address <= io_in_a_bits_address;
    end
    if (_GEN_50) begin
      opcode_1 <= io_in_d_bits_opcode;
      param_1 <= 2'h0;
      size_1 <= io_in_d_bits_size;
      source_1 <= io_in_d_bits_source;
    end
    sink <= ~_GEN_50 & sink;
    denied <= ~_GEN_50 & denied;
  end // always @(posedge)
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader (
    .out (_plusarg_reader_out)
  );
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader_1 (
    .out (_plusarg_reader_1_out)
  );
endmodule

module Repeater_TLBundleA_a28d64s5k1z3u(
  input         clock,
                reset,
                io_repeat,
                io_enq_valid,
  input  [2:0]  io_enq_bits_opcode,
                io_enq_bits_param,
                io_enq_bits_size,
  input  [4:0]  io_enq_bits_source,
  input  [27:0] io_enq_bits_address,
  input  [7:0]  io_enq_bits_mask,
  input         io_enq_bits_corrupt,
                io_deq_ready,
  output        io_full,
                io_enq_ready,
                io_deq_valid,
  output [2:0]  io_deq_bits_opcode,
                io_deq_bits_param,
                io_deq_bits_size,
  output [4:0]  io_deq_bits_source,
  output [27:0] io_deq_bits_address,
  output [7:0]  io_deq_bits_mask,
  output        io_deq_bits_corrupt
);

  reg         full;
  reg  [2:0]  saved_opcode;
  reg  [2:0]  saved_param;
  reg  [2:0]  saved_size;
  reg  [4:0]  saved_source;
  reg  [27:0] saved_address;
  reg  [7:0]  saved_mask;
  reg         saved_corrupt;
  wire        _io_deq_valid_output = io_enq_valid | full;
  wire        _io_enq_ready_output = io_deq_ready & ~full;
  always @(posedge clock) begin
    automatic logic _GEN;
    _GEN = _io_enq_ready_output & io_enq_valid & io_repeat;
    if (reset)
      full <= 1'h0;
    else
      full <= ~(io_deq_ready & _io_deq_valid_output & ~io_repeat) & (_GEN | full);
    if (_GEN) begin
      saved_opcode <= io_enq_bits_opcode;
      saved_param <= io_enq_bits_param;
      saved_size <= io_enq_bits_size;
      saved_source <= io_enq_bits_source;
      saved_address <= io_enq_bits_address;
      saved_mask <= io_enq_bits_mask;
      saved_corrupt <= io_enq_bits_corrupt;
    end
  end // always @(posedge)
  assign io_full = full;
  assign io_enq_ready = _io_enq_ready_output;
  assign io_deq_valid = _io_deq_valid_output;
  assign io_deq_bits_opcode = full ? saved_opcode : io_enq_bits_opcode;
  assign io_deq_bits_param = full ? saved_param : io_enq_bits_param;
  assign io_deq_bits_size = full ? saved_size : io_enq_bits_size;
  assign io_deq_bits_source = full ? saved_source : io_enq_bits_source;
  assign io_deq_bits_address = full ? saved_address : io_enq_bits_address;
  assign io_deq_bits_mask = full ? saved_mask : io_enq_bits_mask;
  assign io_deq_bits_corrupt = full ? saved_corrupt : io_enq_bits_corrupt;
endmodule

module TLFragmenter_PLIC(
  input         clock,
                reset,
                auto_anon_in_a_valid,
  input  [2:0]  auto_anon_in_a_bits_opcode,
                auto_anon_in_a_bits_param,
                auto_anon_in_a_bits_size,
  input  [4:0]  auto_anon_in_a_bits_source,
  input  [27:0] auto_anon_in_a_bits_address,
  input  [7:0]  auto_anon_in_a_bits_mask,
  input  [63:0] auto_anon_in_a_bits_data,
  input         auto_anon_in_a_bits_corrupt,
                auto_anon_in_d_ready,
                auto_anon_out_a_ready,
                auto_anon_out_d_valid,
  input  [2:0]  auto_anon_out_d_bits_opcode,
  input  [1:0]  auto_anon_out_d_bits_size,
  input  [8:0]  auto_anon_out_d_bits_source,
  input  [63:0] auto_anon_out_d_bits_data,
  output        auto_anon_in_a_ready,
                auto_anon_in_d_valid,
  output [2:0]  auto_anon_in_d_bits_opcode,
                auto_anon_in_d_bits_size,
  output [4:0]  auto_anon_in_d_bits_source,
  output [63:0] auto_anon_in_d_bits_data,
  output        auto_anon_out_a_valid,
  output [2:0]  auto_anon_out_a_bits_opcode,
                auto_anon_out_a_bits_param,
  output [1:0]  auto_anon_out_a_bits_size,
  output [8:0]  auto_anon_out_a_bits_source,
  output [27:0] auto_anon_out_a_bits_address,
  output [7:0]  auto_anon_out_a_bits_mask,
  output [63:0] auto_anon_out_a_bits_data,
  output        auto_anon_out_a_bits_corrupt,
                auto_anon_out_d_ready
);

  wire        _repeater_io_full;
  wire        _repeater_io_enq_ready;
  wire        _repeater_io_deq_valid;
  wire [2:0]  _repeater_io_deq_bits_opcode;
  wire [2:0]  _repeater_io_deq_bits_size;
  wire [4:0]  _repeater_io_deq_bits_source;
  wire [27:0] _repeater_io_deq_bits_address;
  wire [7:0]  _repeater_io_deq_bits_mask;
  reg  [2:0]  acknum;
  reg  [2:0]  dOrig;
  reg         dToggle;
  wire        dFirst = acknum == 3'h0;
  wire [5:0]  _GEN = 6'h7 << auto_anon_out_d_bits_size;
  wire [5:0]  _GEN_0 =
    {auto_anon_out_d_bits_source[2:0], ~(_GEN[2:0])}
    & {1'h1, ~(auto_anon_out_d_bits_source[2:0]), _GEN[2:1]};
  wire [2:0]  _GEN_1 = {1'h0, _GEN_0[5:4]} | _GEN_0[2:0];
  wire [2:0]  dFirst_size = {|(_GEN_0[5:3]), |(_GEN_1[2:1]), _GEN_1[2] | _GEN_1[0]};
  wire        drop =
    ~(auto_anon_out_d_bits_opcode[0]) & (|(auto_anon_out_d_bits_source[2:0]));
  wire        anonOut_d_ready = auto_anon_in_d_ready | drop;
  wire        anonIn_d_valid = auto_anon_out_d_valid & ~drop;
  wire [2:0]  anonIn_d_bits_size = dFirst ? dFirst_size : dOrig;
  wire [12:0] _GEN_2 = 13'h3F << _repeater_io_deq_bits_size;
  reg  [2:0]  gennum;
  wire        aFirst = gennum == 3'h0;
  wire [2:0]  _GEN_3 = gennum - 3'h1;
  wire [2:0]  aFragnum = aFirst ? ~(_GEN_2[5:3]) : _GEN_3;
  reg         aToggle_r;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (~reset & ~(~_repeater_io_full | _repeater_io_deq_bits_opcode[2])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Fragmenter.scala:321 assert (!repeater.io.full || !aHasData)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_repeater_io_full | (&_repeater_io_deq_bits_mask))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Fragmenter.scala:324 assert (!repeater.io.full || in_a.bits.mask === fullMask)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    automatic logic _GEN_4;
    automatic logic _GEN_5;
    _GEN_4 = anonOut_d_ready & auto_anon_out_d_valid;
    _GEN_5 = _GEN_4 & dFirst;
    if (reset) begin
      acknum <= 3'h0;
      dToggle <= 1'h0;
      gennum <= 3'h0;
    end
    else begin
      if (_GEN_4) begin
        if (dFirst)
          acknum <= auto_anon_out_d_bits_source[2:0];
        else
          acknum <=
            acknum
            - {2'h0, auto_anon_out_d_bits_opcode[0] | (&auto_anon_out_d_bits_size)};
      end
      if (_GEN_5)
        dToggle <= auto_anon_out_d_bits_source[3];
      if (auto_anon_out_a_ready & _repeater_io_deq_valid) begin
        if (aFirst)
          gennum <= ~(_GEN_2[5:3]);
        else
          gennum <= _GEN_3;
      end
    end
    if (_GEN_5)
      dOrig <= dFirst_size;
    if (aFirst)
      aToggle_r <= dToggle;
  end // always @(posedge)
  TLMonitor_15 monitor (
    .clock                (clock),
    .reset                (reset),
    .io_in_a_ready        (_repeater_io_enq_ready),
    .io_in_a_valid        (auto_anon_in_a_valid),
    .io_in_a_bits_opcode  (auto_anon_in_a_bits_opcode),
    .io_in_a_bits_param   (auto_anon_in_a_bits_param),
    .io_in_a_bits_size    (auto_anon_in_a_bits_size),
    .io_in_a_bits_source  (auto_anon_in_a_bits_source),
    .io_in_a_bits_address (auto_anon_in_a_bits_address),
    .io_in_a_bits_mask    (auto_anon_in_a_bits_mask),
    .io_in_a_bits_corrupt (auto_anon_in_a_bits_corrupt),
    .io_in_d_ready        (auto_anon_in_d_ready),
    .io_in_d_valid        (anonIn_d_valid),
    .io_in_d_bits_opcode  (auto_anon_out_d_bits_opcode),
    .io_in_d_bits_size    (anonIn_d_bits_size),
    .io_in_d_bits_source  (auto_anon_out_d_bits_source[8:4])
  );
  Repeater_TLBundleA_a28d64s5k1z3u repeater (
    .clock               (clock),
    .reset               (reset),
    .io_repeat           (_repeater_io_deq_bits_opcode[2] & (|aFragnum)),
    .io_enq_valid        (auto_anon_in_a_valid),
    .io_enq_bits_opcode  (auto_anon_in_a_bits_opcode),
    .io_enq_bits_param   (auto_anon_in_a_bits_param),
    .io_enq_bits_size    (auto_anon_in_a_bits_size),
    .io_enq_bits_source  (auto_anon_in_a_bits_source),
    .io_enq_bits_address (auto_anon_in_a_bits_address),
    .io_enq_bits_mask    (auto_anon_in_a_bits_mask),
    .io_enq_bits_corrupt (auto_anon_in_a_bits_corrupt),
    .io_deq_ready        (auto_anon_out_a_ready),
    .io_full             (_repeater_io_full),
    .io_enq_ready        (_repeater_io_enq_ready),
    .io_deq_valid        (_repeater_io_deq_valid),
    .io_deq_bits_opcode  (_repeater_io_deq_bits_opcode),
    .io_deq_bits_param   (auto_anon_out_a_bits_param),
    .io_deq_bits_size    (_repeater_io_deq_bits_size),
    .io_deq_bits_source  (_repeater_io_deq_bits_source),
    .io_deq_bits_address (_repeater_io_deq_bits_address),
    .io_deq_bits_mask    (_repeater_io_deq_bits_mask),
    .io_deq_bits_corrupt (auto_anon_out_a_bits_corrupt)
  );
  assign auto_anon_in_a_ready = _repeater_io_enq_ready;
  assign auto_anon_in_d_valid = anonIn_d_valid;
  assign auto_anon_in_d_bits_opcode = auto_anon_out_d_bits_opcode;
  assign auto_anon_in_d_bits_size = anonIn_d_bits_size;
  assign auto_anon_in_d_bits_source = auto_anon_out_d_bits_source[8:4];
  assign auto_anon_in_d_bits_data = auto_anon_out_d_bits_data;
  assign auto_anon_out_a_valid = _repeater_io_deq_valid;
  assign auto_anon_out_a_bits_opcode = _repeater_io_deq_bits_opcode;
  assign auto_anon_out_a_bits_size =
    _repeater_io_deq_bits_size[2] ? 2'h3 : _repeater_io_deq_bits_size[1:0];
  assign auto_anon_out_a_bits_source =
    {_repeater_io_deq_bits_source, ~(aFirst ? dToggle : aToggle_r), aFragnum};
  assign auto_anon_out_a_bits_address =
    {_repeater_io_deq_bits_address[27:6],
     _repeater_io_deq_bits_address[5:0] | {~(aFragnum | _GEN_2[5:3]), 3'h0}};
  assign auto_anon_out_a_bits_mask = _repeater_io_full ? 8'hFF : auto_anon_in_a_bits_mask;
  assign auto_anon_out_a_bits_data = auto_anon_in_a_bits_data;
  assign auto_anon_out_d_ready = anonOut_d_ready;
endmodule

module TLInterconnectCoupler_cbus_to_plic(
  input         clock,
                reset,
                auto_fragmenter_anon_out_a_ready,
                auto_fragmenter_anon_out_d_valid,
  input  [2:0]  auto_fragmenter_anon_out_d_bits_opcode,
  input  [1:0]  auto_fragmenter_anon_out_d_bits_size,
  input  [8:0]  auto_fragmenter_anon_out_d_bits_source,
  input  [63:0] auto_fragmenter_anon_out_d_bits_data,
  input         auto_tl_in_a_valid,
  input  [2:0]  auto_tl_in_a_bits_opcode,
                auto_tl_in_a_bits_param,
                auto_tl_in_a_bits_size,
  input  [4:0]  auto_tl_in_a_bits_source,
  input  [27:0] auto_tl_in_a_bits_address,
  input  [7:0]  auto_tl_in_a_bits_mask,
  input  [63:0] auto_tl_in_a_bits_data,
  input         auto_tl_in_a_bits_corrupt,
                auto_tl_in_d_ready,
  output        auto_fragmenter_anon_out_a_valid,
  output [2:0]  auto_fragmenter_anon_out_a_bits_opcode,
                auto_fragmenter_anon_out_a_bits_param,
  output [1:0]  auto_fragmenter_anon_out_a_bits_size,
  output [8:0]  auto_fragmenter_anon_out_a_bits_source,
  output [27:0] auto_fragmenter_anon_out_a_bits_address,
  output [7:0]  auto_fragmenter_anon_out_a_bits_mask,
  output [63:0] auto_fragmenter_anon_out_a_bits_data,
  output        auto_fragmenter_anon_out_a_bits_corrupt,
                auto_fragmenter_anon_out_d_ready,
                auto_tl_in_a_ready,
                auto_tl_in_d_valid,
  output [2:0]  auto_tl_in_d_bits_opcode,
                auto_tl_in_d_bits_size,
  output [4:0]  auto_tl_in_d_bits_source,
  output [63:0] auto_tl_in_d_bits_data
);

  TLFragmenter_PLIC fragmenter (
    .clock                        (clock),
    .reset                        (reset),
    .auto_anon_in_a_valid         (auto_tl_in_a_valid),
    .auto_anon_in_a_bits_opcode   (auto_tl_in_a_bits_opcode),
    .auto_anon_in_a_bits_param    (auto_tl_in_a_bits_param),
    .auto_anon_in_a_bits_size     (auto_tl_in_a_bits_size),
    .auto_anon_in_a_bits_source   (auto_tl_in_a_bits_source),
    .auto_anon_in_a_bits_address  (auto_tl_in_a_bits_address),
    .auto_anon_in_a_bits_mask     (auto_tl_in_a_bits_mask),
    .auto_anon_in_a_bits_data     (auto_tl_in_a_bits_data),
    .auto_anon_in_a_bits_corrupt  (auto_tl_in_a_bits_corrupt),
    .auto_anon_in_d_ready         (auto_tl_in_d_ready),
    .auto_anon_out_a_ready        (auto_fragmenter_anon_out_a_ready),
    .auto_anon_out_d_valid        (auto_fragmenter_anon_out_d_valid),
    .auto_anon_out_d_bits_opcode  (auto_fragmenter_anon_out_d_bits_opcode),
    .auto_anon_out_d_bits_size    (auto_fragmenter_anon_out_d_bits_size),
    .auto_anon_out_d_bits_source  (auto_fragmenter_anon_out_d_bits_source),
    .auto_anon_out_d_bits_data    (auto_fragmenter_anon_out_d_bits_data),
    .auto_anon_in_a_ready         (auto_tl_in_a_ready),
    .auto_anon_in_d_valid         (auto_tl_in_d_valid),
    .auto_anon_in_d_bits_opcode   (auto_tl_in_d_bits_opcode),
    .auto_anon_in_d_bits_size     (auto_tl_in_d_bits_size),
    .auto_anon_in_d_bits_source   (auto_tl_in_d_bits_source),
    .auto_anon_in_d_bits_data     (auto_tl_in_d_bits_data),
    .auto_anon_out_a_valid        (auto_fragmenter_anon_out_a_valid),
    .auto_anon_out_a_bits_opcode  (auto_fragmenter_anon_out_a_bits_opcode),
    .auto_anon_out_a_bits_param   (auto_fragmenter_anon_out_a_bits_param),
    .auto_anon_out_a_bits_size    (auto_fragmenter_anon_out_a_bits_size),
    .auto_anon_out_a_bits_source  (auto_fragmenter_anon_out_a_bits_source),
    .auto_anon_out_a_bits_address (auto_fragmenter_anon_out_a_bits_address),
    .auto_anon_out_a_bits_mask    (auto_fragmenter_anon_out_a_bits_mask),
    .auto_anon_out_a_bits_data    (auto_fragmenter_anon_out_a_bits_data),
    .auto_anon_out_a_bits_corrupt (auto_fragmenter_anon_out_a_bits_corrupt),
    .auto_anon_out_d_ready        (auto_fragmenter_anon_out_d_ready)
  );
endmodule

module TLMonitor_16(
  input        clock,
               reset,
               io_in_a_ready,
               io_in_a_valid,
  input [2:0]  io_in_a_bits_opcode,
               io_in_a_bits_param,
               io_in_a_bits_size,
  input [4:0]  io_in_a_bits_source,
  input [11:0] io_in_a_bits_address,
  input [7:0]  io_in_a_bits_mask,
  input        io_in_a_bits_corrupt,
               io_in_d_ready,
               io_in_d_valid,
  input [2:0]  io_in_d_bits_opcode,
               io_in_d_bits_size,
  input [4:0]  io_in_d_bits_source
);

  wire [31:0] _plusarg_reader_1_out;
  wire [31:0] _plusarg_reader_out;
  wire [12:0] _GEN = 13'h3F << io_in_a_bits_size;
  wire        _GEN_0 = io_in_a_ready & io_in_a_valid;
  reg  [2:0]  a_first_counter;
  reg  [2:0]  opcode;
  reg  [2:0]  param;
  reg  [2:0]  size;
  reg  [4:0]  source;
  reg  [11:0] address;
  reg  [2:0]  d_first_counter;
  reg  [2:0]  opcode_1;
  reg  [1:0]  param_1;
  reg  [2:0]  size_1;
  reg  [4:0]  source_1;
  reg         sink;
  reg         denied;
  reg  [18:0] inflight;
  reg  [75:0] inflight_opcodes;
  reg  [75:0] inflight_sizes;
  reg  [2:0]  a_first_counter_1;
  wire        a_first_1 = a_first_counter_1 == 3'h0;
  reg  [2:0]  d_first_counter_1;
  wire        d_first_1 = d_first_counter_1 == 3'h0;
  wire        _GEN_1 = _GEN_0 & a_first_1;
  wire        d_release_ack = io_in_d_bits_opcode == 3'h6;
  reg  [31:0] watchdog;
  reg  [18:0] inflight_1;
  reg  [75:0] inflight_sizes_1;
  reg  [2:0]  d_first_counter_2;
  wire        d_first_2 = d_first_counter_2 == 3'h0;
  reg  [31:0] watchdog_1;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      automatic logic [7:0][2:0] _GEN_2 =
        '{3'h4, 3'h5, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic [7:0][2:0] _GEN_3 =
        '{3'h4, 3'h4, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic            _GEN_4 = io_in_a_bits_source[4:3] == 2'h0;
      automatic logic            _GEN_5 = io_in_a_bits_source[4:3] == 2'h1;
      automatic logic            _GEN_6 = io_in_a_bits_source == 5'h10;
      automatic logic            _GEN_7 = io_in_a_bits_source == 5'h11;
      automatic logic            _GEN_8 = io_in_a_bits_source == 5'h12;
      automatic logic            source_ok = _GEN_4 | _GEN_5 | _GEN_6 | _GEN_7 | _GEN_8;
      automatic logic [5:0]      _GEN_9 = io_in_a_bits_address[5:0] & ~(_GEN[5:0]);
      automatic logic            _GEN_10 = io_in_a_bits_size > 3'h2;
      automatic logic            mask_size = io_in_a_bits_size[1:0] == 2'h2;
      automatic logic            mask_acc =
        _GEN_10 | mask_size & ~(io_in_a_bits_address[2]);
      automatic logic            mask_acc_1 =
        _GEN_10 | mask_size & io_in_a_bits_address[2];
      automatic logic            mask_size_1 = io_in_a_bits_size[1:0] == 2'h1;
      automatic logic            mask_eq_2 =
        ~(io_in_a_bits_address[2]) & ~(io_in_a_bits_address[1]);
      automatic logic            mask_acc_2 = mask_acc | mask_size_1 & mask_eq_2;
      automatic logic            mask_eq_3 =
        ~(io_in_a_bits_address[2]) & io_in_a_bits_address[1];
      automatic logic            mask_acc_3 = mask_acc | mask_size_1 & mask_eq_3;
      automatic logic            mask_eq_4 =
        io_in_a_bits_address[2] & ~(io_in_a_bits_address[1]);
      automatic logic            mask_acc_4 = mask_acc_1 | mask_size_1 & mask_eq_4;
      automatic logic            mask_eq_5 =
        io_in_a_bits_address[2] & io_in_a_bits_address[1];
      automatic logic            mask_acc_5 = mask_acc_1 | mask_size_1 & mask_eq_5;
      automatic logic [7:0]      mask =
        {mask_acc_5 | mask_eq_5 & io_in_a_bits_address[0],
         mask_acc_5 | mask_eq_5 & ~(io_in_a_bits_address[0]),
         mask_acc_4 | mask_eq_4 & io_in_a_bits_address[0],
         mask_acc_4 | mask_eq_4 & ~(io_in_a_bits_address[0]),
         mask_acc_3 | mask_eq_3 & io_in_a_bits_address[0],
         mask_acc_3 | mask_eq_3 & ~(io_in_a_bits_address[0]),
         mask_acc_2 | mask_eq_2 & io_in_a_bits_address[0],
         mask_acc_2 | mask_eq_2 & ~(io_in_a_bits_address[0])};
      automatic logic            _GEN_11 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_12 = _GEN_6 & io_in_a_bits_size == 3'h6;
      automatic logic            _GEN_13 = io_in_a_bits_param > 3'h2;
      automatic logic            _GEN_14 = io_in_a_bits_mask != 8'hFF;
      automatic logic            _GEN_15 =
        io_in_a_valid & (&io_in_a_bits_opcode) & ~reset;
      automatic logic            _GEN_16 = _GEN_4 | _GEN_5 | _GEN_6 | _GEN_7 | _GEN_8;
      automatic logic            _GEN_17 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_18 = io_in_a_bits_size != 3'h7;
      automatic logic            _GEN_19 = io_in_a_bits_mask != mask;
      automatic logic            _GEN_20 = _GEN_16 & _GEN_18;
      automatic logic            _GEN_21 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_22 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_23 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_24 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h3 & ~reset;
      automatic logic            _GEN_25 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h5 & ~reset;
      automatic logic            source_ok_1 =
        io_in_d_bits_source[4:3] == 2'h0 | io_in_d_bits_source[4:3] == 2'h1
        | io_in_d_bits_source == 5'h10 | io_in_d_bits_source == 5'h11
        | io_in_d_bits_source == 5'h12;
      automatic logic            _GEN_26 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_27 = io_in_d_bits_size < 3'h3;
      automatic logic            _GEN_28 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_29 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h5 & ~reset;
      automatic logic            _GEN_30 = io_in_a_valid & (|a_first_counter) & ~reset;
      automatic logic            _GEN_31 = io_in_d_valid & (|d_first_counter) & ~reset;
      automatic logic [75:0]     _GEN_32 = {69'h0, io_in_d_bits_source, 2'h0};
      automatic logic [75:0]     _GEN_33 = inflight_opcodes >> _GEN_32;
      automatic logic            _GEN_34 = io_in_d_valid & d_first_1;
      automatic logic            _GEN_35 = _GEN_34 & ~d_release_ack;
      automatic logic            _GEN_36 = io_in_a_bits_source == io_in_d_bits_source;
      automatic logic            same_cycle_resp = io_in_a_valid & a_first_1 & _GEN_36;
      automatic logic [18:0]     _GEN_37 = {14'h0, io_in_d_bits_source};
      automatic logic            _GEN_38 = _GEN_35 & same_cycle_resp & ~reset;
      automatic logic            _GEN_39 = _GEN_35 & ~same_cycle_resp & ~reset;
      automatic logic            _GEN_40 =
        io_in_d_valid & d_first_2 & d_release_ack & ~reset;
      automatic logic [18:0]     _GEN_41 = inflight >> io_in_a_bits_source;
      automatic logic [18:0]     _GEN_42 = inflight >> _GEN_37;
      automatic logic [75:0]     _GEN_43 = inflight_sizes >> _GEN_32;
      automatic logic [18:0]     _GEN_44 = inflight_1 >> _GEN_37;
      automatic logic [75:0]     _GEN_45 = inflight_sizes_1 >> _GEN_32;
      if (_GEN_11) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_11 & ~_GEN_12) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_11 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock carries invalid source ID (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_11 & ~_GEN_10) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_11 & (|_GEN_9)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_11 & _GEN_13) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock carries invalid grow param (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_11 & _GEN_14) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_11 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock is corrupt (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & ~_GEN_12) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm carries invalid source ID (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & ~_GEN_10) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & (|_GEN_9)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & _GEN_13) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm carries invalid grow param (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & ~(|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & _GEN_14) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm is corrupt (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & ~_GEN_16) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & ~_GEN_18) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get carries invalid source ID (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & (|_GEN_9)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get address not aligned to size (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get carries invalid param (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & _GEN_19) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get contains invalid mask (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get is corrupt (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_21 & ~_GEN_20) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_21 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull carries invalid source ID (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_21 & (|_GEN_9)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull address not aligned to size (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_21 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull carries invalid param (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_21 & _GEN_19) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull contains invalid mask (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & ~_GEN_20) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & (|_GEN_9)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial address not aligned to size (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial carries invalid param (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & (|(io_in_a_bits_mask & ~mask))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial contains invalid mask (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_23) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_23 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_23 & (|_GEN_9)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_23 & io_in_a_bits_param > 3'h4) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_23 & _GEN_19) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_24) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_24 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical carries invalid source ID (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_24 & (|_GEN_9)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical address not aligned to size (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_24 & io_in_a_bits_param[2]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical carries invalid opcode param (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_24 & _GEN_19) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical contains invalid mask (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint carries invalid source ID (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25 & (|_GEN_9)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint address not aligned to size (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25 & (|(io_in_a_bits_param[2:1]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint carries invalid opcode param (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25 & _GEN_19) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint contains invalid mask (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint is corrupt (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & ~reset & (&io_in_d_bits_opcode)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel has invalid opcode (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_26 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_26 & _GEN_27) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid source ID (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid sink ID (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & _GEN_27) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant smaller than a beat (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_29 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid source ID (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_29) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid sink ID (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_29 & _GEN_27) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData smaller than a beat (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & io_in_d_bits_opcode == 3'h0 & ~reset & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & io_in_d_bits_opcode == 3'h1 & ~reset & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & io_in_d_bits_opcode == 3'h2 & ~reset & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck carries invalid source ID (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & io_in_a_bits_opcode != opcode) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel opcode changed within multibeat operation (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & io_in_a_bits_param != param) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel param changed within multibeat operation (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & io_in_a_bits_size != size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel size changed within multibeat operation (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & io_in_a_bits_source != source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel source changed within multibeat operation (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & io_in_a_bits_address != address) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel address changed with multibeat operation (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & io_in_d_bits_opcode != opcode_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel opcode changed within multibeat operation (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & (|param_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel param changed within multibeat operation (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & io_in_d_bits_size != size_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel size changed within multibeat operation (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & io_in_d_bits_source != source_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel source changed within multibeat operation (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & sink) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel sink changed with multibeat operation (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel denied changed with multibeat operation (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_1 & ~reset & _GEN_41[0]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel re-used a source ID (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_35 & ~reset & ~(_GEN_42[0] | same_cycle_resp)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_38
          & ~(io_in_d_bits_opcode == _GEN_3[io_in_a_bits_opcode]
              | io_in_d_bits_opcode == _GEN_2[io_in_a_bits_opcode])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_38 & io_in_a_bits_size != io_in_d_bits_size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_39
          & ~(io_in_d_bits_opcode == _GEN_3[_GEN_33[3:1]]
              | io_in_d_bits_opcode == _GEN_2[_GEN_33[3:1]])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_39 & io_in_d_bits_size != _GEN_43[3:1]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_34 & a_first_1 & io_in_a_valid & _GEN_36 & ~d_release_ack & ~reset
          & ~(~io_in_d_ready | io_in_a_ready)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ready check\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight == 19'h0 | _plusarg_reader_out == 32'h0
              | watchdog < _plusarg_reader_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_40 & ~(_GEN_44[0])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_40 & io_in_d_bits_size != _GEN_45[3:1]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight_1 == 19'h0 | _plusarg_reader_1_out == 32'h0
              | watchdog_1 < _plusarg_reader_1_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/devices/debug/Periphery.scala:90:119)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    automatic logic _GEN_46;
    automatic logic _GEN_47;
    _GEN_46 = io_in_d_ready & io_in_d_valid;
    _GEN_47 = _GEN_46 & ~(|d_first_counter);
    if (reset) begin
      a_first_counter <= 3'h0;
      d_first_counter <= 3'h0;
      inflight <= 19'h0;
      inflight_opcodes <= 76'h0;
      inflight_sizes <= 76'h0;
      a_first_counter_1 <= 3'h0;
      d_first_counter_1 <= 3'h0;
      watchdog <= 32'h0;
      inflight_1 <= 19'h0;
      inflight_sizes_1 <= 76'h0;
      d_first_counter_2 <= 3'h0;
      watchdog_1 <= 32'h0;
    end
    else begin
      automatic logic [258:0] _GEN_48 = {252'h0, io_in_a_bits_source, 2'h0};
      automatic logic         _GEN_49;
      automatic logic [31:0]  _GEN_50 = 32'h1 << io_in_d_bits_source;
      automatic logic [270:0] _GEN_51 = 271'hF << {264'h0, io_in_d_bits_source, 2'h0};
      automatic logic [75:0]  d_sizes_clr;
      automatic logic         _GEN_52;
      automatic logic [31:0]  _GEN_53 = 32'h1 << io_in_a_bits_source;
      automatic logic [258:0] _GEN_54 =
        {255'h0, _GEN_1 ? {io_in_a_bits_opcode, 1'h1} : 4'h0} << _GEN_48;
      automatic logic [258:0] _GEN_55 =
        {255'h0, _GEN_1 ? {io_in_a_bits_size, 1'h1} : 4'h0} << _GEN_48;
      _GEN_49 = _GEN_46 & d_first_1 & ~d_release_ack;
      d_sizes_clr = _GEN_49 ? _GEN_51[75:0] : 76'h0;
      _GEN_52 = _GEN_46 & d_first_2 & d_release_ack;
      if (_GEN_0) begin
        if (|a_first_counter)
          a_first_counter <= a_first_counter - 3'h1;
        else if (io_in_a_bits_opcode[2])
          a_first_counter <= 3'h0;
        else
          a_first_counter <= ~(_GEN[5:3]);
        if (a_first_1) begin
          if (io_in_a_bits_opcode[2])
            a_first_counter_1 <= 3'h0;
          else
            a_first_counter_1 <= ~(_GEN[5:3]);
        end
        else
          a_first_counter_1 <= a_first_counter_1 - 3'h1;
      end
      if (_GEN_46) begin
        automatic logic [12:0] _GEN_56 = 13'h3F << io_in_d_bits_size;
        if (|d_first_counter)
          d_first_counter <= d_first_counter - 3'h1;
        else if (io_in_d_bits_opcode[0])
          d_first_counter <= ~(_GEN_56[5:3]);
        else
          d_first_counter <= 3'h0;
        if (d_first_1) begin
          if (io_in_d_bits_opcode[0])
            d_first_counter_1 <= ~(_GEN_56[5:3]);
          else
            d_first_counter_1 <= 3'h0;
        end
        else
          d_first_counter_1 <= d_first_counter_1 - 3'h1;
        if (d_first_2) begin
          if (io_in_d_bits_opcode[0])
            d_first_counter_2 <= ~(_GEN_56[5:3]);
          else
            d_first_counter_2 <= 3'h0;
        end
        else
          d_first_counter_2 <= d_first_counter_2 - 3'h1;
        watchdog_1 <= 32'h0;
      end
      else
        watchdog_1 <= watchdog_1 + 32'h1;
      inflight <=
        (inflight | (_GEN_1 ? _GEN_53[18:0] : 19'h0))
        & ~(_GEN_49 ? _GEN_50[18:0] : 19'h0);
      inflight_opcodes <=
        (inflight_opcodes | (_GEN_1 ? _GEN_54[75:0] : 76'h0)) & ~d_sizes_clr;
      inflight_sizes <=
        (inflight_sizes | (_GEN_1 ? _GEN_55[75:0] : 76'h0)) & ~d_sizes_clr;
      if (_GEN_0 | _GEN_46)
        watchdog <= 32'h0;
      else
        watchdog <= watchdog + 32'h1;
      inflight_1 <= inflight_1 & ~(_GEN_52 ? _GEN_50[18:0] : 19'h0);
      inflight_sizes_1 <= inflight_sizes_1 & ~(_GEN_52 ? _GEN_51[75:0] : 76'h0);
    end
    if (_GEN_0 & ~(|a_first_counter)) begin
      opcode <= io_in_a_bits_opcode;
      param <= io_in_a_bits_param;
      size <= io_in_a_bits_size;
      source <= io_in_a_bits_source;
      address <= io_in_a_bits_address;
    end
    if (_GEN_47) begin
      opcode_1 <= io_in_d_bits_opcode;
      param_1 <= 2'h0;
      size_1 <= io_in_d_bits_size;
      source_1 <= io_in_d_bits_source;
    end
    sink <= ~_GEN_47 & sink;
    denied <= ~_GEN_47 & denied;
  end // always @(posedge)
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader (
    .out (_plusarg_reader_out)
  );
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader_1 (
    .out (_plusarg_reader_1_out)
  );
endmodule

module Repeater_TLBundleA_a12d64s5k1z3u(
  input         clock,
                reset,
                io_repeat,
                io_enq_valid,
  input  [2:0]  io_enq_bits_opcode,
                io_enq_bits_param,
                io_enq_bits_size,
  input  [4:0]  io_enq_bits_source,
  input  [11:0] io_enq_bits_address,
  input  [7:0]  io_enq_bits_mask,
  input         io_enq_bits_corrupt,
                io_deq_ready,
  output        io_full,
                io_enq_ready,
                io_deq_valid,
  output [2:0]  io_deq_bits_opcode,
                io_deq_bits_param,
                io_deq_bits_size,
  output [4:0]  io_deq_bits_source,
  output [11:0] io_deq_bits_address,
  output [7:0]  io_deq_bits_mask,
  output        io_deq_bits_corrupt
);

  reg         full;
  reg  [2:0]  saved_opcode;
  reg  [2:0]  saved_param;
  reg  [2:0]  saved_size;
  reg  [4:0]  saved_source;
  reg  [11:0] saved_address;
  reg  [7:0]  saved_mask;
  reg         saved_corrupt;
  wire        _io_deq_valid_output = io_enq_valid | full;
  wire        _io_enq_ready_output = io_deq_ready & ~full;
  always @(posedge clock) begin
    automatic logic _GEN;
    _GEN = _io_enq_ready_output & io_enq_valid & io_repeat;
    if (reset)
      full <= 1'h0;
    else
      full <= ~(io_deq_ready & _io_deq_valid_output & ~io_repeat) & (_GEN | full);
    if (_GEN) begin
      saved_opcode <= io_enq_bits_opcode;
      saved_param <= io_enq_bits_param;
      saved_size <= io_enq_bits_size;
      saved_source <= io_enq_bits_source;
      saved_address <= io_enq_bits_address;
      saved_mask <= io_enq_bits_mask;
      saved_corrupt <= io_enq_bits_corrupt;
    end
  end // always @(posedge)
  assign io_full = full;
  assign io_enq_ready = _io_enq_ready_output;
  assign io_deq_valid = _io_deq_valid_output;
  assign io_deq_bits_opcode = full ? saved_opcode : io_enq_bits_opcode;
  assign io_deq_bits_param = full ? saved_param : io_enq_bits_param;
  assign io_deq_bits_size = full ? saved_size : io_enq_bits_size;
  assign io_deq_bits_source = full ? saved_source : io_enq_bits_source;
  assign io_deq_bits_address = full ? saved_address : io_enq_bits_address;
  assign io_deq_bits_mask = full ? saved_mask : io_enq_bits_mask;
  assign io_deq_bits_corrupt = full ? saved_corrupt : io_enq_bits_corrupt;
endmodule

module TLFragmenter_Debug(
  input         clock,
                reset,
                auto_anon_in_a_valid,
  input  [2:0]  auto_anon_in_a_bits_opcode,
                auto_anon_in_a_bits_param,
                auto_anon_in_a_bits_size,
  input  [4:0]  auto_anon_in_a_bits_source,
  input  [11:0] auto_anon_in_a_bits_address,
  input  [7:0]  auto_anon_in_a_bits_mask,
  input  [63:0] auto_anon_in_a_bits_data,
  input         auto_anon_in_a_bits_corrupt,
                auto_anon_in_d_ready,
                auto_anon_out_a_ready,
                auto_anon_out_d_valid,
  input  [2:0]  auto_anon_out_d_bits_opcode,
  input  [1:0]  auto_anon_out_d_bits_size,
  input  [8:0]  auto_anon_out_d_bits_source,
  input  [63:0] auto_anon_out_d_bits_data,
  output        auto_anon_in_a_ready,
                auto_anon_in_d_valid,
  output [2:0]  auto_anon_in_d_bits_opcode,
                auto_anon_in_d_bits_size,
  output [4:0]  auto_anon_in_d_bits_source,
  output [63:0] auto_anon_in_d_bits_data,
  output        auto_anon_out_a_valid,
  output [2:0]  auto_anon_out_a_bits_opcode,
                auto_anon_out_a_bits_param,
  output [1:0]  auto_anon_out_a_bits_size,
  output [8:0]  auto_anon_out_a_bits_source,
  output [11:0] auto_anon_out_a_bits_address,
  output [7:0]  auto_anon_out_a_bits_mask,
  output [63:0] auto_anon_out_a_bits_data,
  output        auto_anon_out_a_bits_corrupt,
                auto_anon_out_d_ready
);

  wire        _repeater_io_full;
  wire        _repeater_io_enq_ready;
  wire        _repeater_io_deq_valid;
  wire [2:0]  _repeater_io_deq_bits_opcode;
  wire [2:0]  _repeater_io_deq_bits_size;
  wire [4:0]  _repeater_io_deq_bits_source;
  wire [11:0] _repeater_io_deq_bits_address;
  wire [7:0]  _repeater_io_deq_bits_mask;
  reg  [2:0]  acknum;
  reg  [2:0]  dOrig;
  reg         dToggle;
  wire        dFirst = acknum == 3'h0;
  wire [5:0]  _GEN = 6'h7 << auto_anon_out_d_bits_size;
  wire [5:0]  _GEN_0 =
    {auto_anon_out_d_bits_source[2:0], ~(_GEN[2:0])}
    & {1'h1, ~(auto_anon_out_d_bits_source[2:0]), _GEN[2:1]};
  wire [2:0]  _GEN_1 = {1'h0, _GEN_0[5:4]} | _GEN_0[2:0];
  wire [2:0]  dFirst_size = {|(_GEN_0[5:3]), |(_GEN_1[2:1]), _GEN_1[2] | _GEN_1[0]};
  wire        drop =
    ~(auto_anon_out_d_bits_opcode[0]) & (|(auto_anon_out_d_bits_source[2:0]));
  wire        anonOut_d_ready = auto_anon_in_d_ready | drop;
  wire        anonIn_d_valid = auto_anon_out_d_valid & ~drop;
  wire [2:0]  anonIn_d_bits_size = dFirst ? dFirst_size : dOrig;
  wire [12:0] _GEN_2 = 13'h3F << _repeater_io_deq_bits_size;
  reg  [2:0]  gennum;
  wire        aFirst = gennum == 3'h0;
  wire [2:0]  _GEN_3 = gennum - 3'h1;
  wire [2:0]  aFragnum = aFirst ? ~(_GEN_2[5:3]) : _GEN_3;
  reg         aToggle_r;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (~reset & ~(~_repeater_io_full | _repeater_io_deq_bits_opcode[2])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Fragmenter.scala:321 assert (!repeater.io.full || !aHasData)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_repeater_io_full | (&_repeater_io_deq_bits_mask))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Fragmenter.scala:324 assert (!repeater.io.full || in_a.bits.mask === fullMask)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    automatic logic _GEN_4;
    automatic logic _GEN_5;
    _GEN_4 = anonOut_d_ready & auto_anon_out_d_valid;
    _GEN_5 = _GEN_4 & dFirst;
    if (reset) begin
      acknum <= 3'h0;
      dToggle <= 1'h0;
      gennum <= 3'h0;
    end
    else begin
      if (_GEN_4) begin
        if (dFirst)
          acknum <= auto_anon_out_d_bits_source[2:0];
        else
          acknum <=
            acknum
            - {2'h0, auto_anon_out_d_bits_opcode[0] | (&auto_anon_out_d_bits_size)};
      end
      if (_GEN_5)
        dToggle <= auto_anon_out_d_bits_source[3];
      if (auto_anon_out_a_ready & _repeater_io_deq_valid) begin
        if (aFirst)
          gennum <= ~(_GEN_2[5:3]);
        else
          gennum <= _GEN_3;
      end
    end
    if (_GEN_5)
      dOrig <= dFirst_size;
    if (aFirst)
      aToggle_r <= dToggle;
  end // always @(posedge)
  TLMonitor_16 monitor (
    .clock                (clock),
    .reset                (reset),
    .io_in_a_ready        (_repeater_io_enq_ready),
    .io_in_a_valid        (auto_anon_in_a_valid),
    .io_in_a_bits_opcode  (auto_anon_in_a_bits_opcode),
    .io_in_a_bits_param   (auto_anon_in_a_bits_param),
    .io_in_a_bits_size    (auto_anon_in_a_bits_size),
    .io_in_a_bits_source  (auto_anon_in_a_bits_source),
    .io_in_a_bits_address (auto_anon_in_a_bits_address),
    .io_in_a_bits_mask    (auto_anon_in_a_bits_mask),
    .io_in_a_bits_corrupt (auto_anon_in_a_bits_corrupt),
    .io_in_d_ready        (auto_anon_in_d_ready),
    .io_in_d_valid        (anonIn_d_valid),
    .io_in_d_bits_opcode  (auto_anon_out_d_bits_opcode),
    .io_in_d_bits_size    (anonIn_d_bits_size),
    .io_in_d_bits_source  (auto_anon_out_d_bits_source[8:4])
  );
  Repeater_TLBundleA_a12d64s5k1z3u repeater (
    .clock               (clock),
    .reset               (reset),
    .io_repeat           (_repeater_io_deq_bits_opcode[2] & (|aFragnum)),
    .io_enq_valid        (auto_anon_in_a_valid),
    .io_enq_bits_opcode  (auto_anon_in_a_bits_opcode),
    .io_enq_bits_param   (auto_anon_in_a_bits_param),
    .io_enq_bits_size    (auto_anon_in_a_bits_size),
    .io_enq_bits_source  (auto_anon_in_a_bits_source),
    .io_enq_bits_address (auto_anon_in_a_bits_address),
    .io_enq_bits_mask    (auto_anon_in_a_bits_mask),
    .io_enq_bits_corrupt (auto_anon_in_a_bits_corrupt),
    .io_deq_ready        (auto_anon_out_a_ready),
    .io_full             (_repeater_io_full),
    .io_enq_ready        (_repeater_io_enq_ready),
    .io_deq_valid        (_repeater_io_deq_valid),
    .io_deq_bits_opcode  (_repeater_io_deq_bits_opcode),
    .io_deq_bits_param   (auto_anon_out_a_bits_param),
    .io_deq_bits_size    (_repeater_io_deq_bits_size),
    .io_deq_bits_source  (_repeater_io_deq_bits_source),
    .io_deq_bits_address (_repeater_io_deq_bits_address),
    .io_deq_bits_mask    (_repeater_io_deq_bits_mask),
    .io_deq_bits_corrupt (auto_anon_out_a_bits_corrupt)
  );
  assign auto_anon_in_a_ready = _repeater_io_enq_ready;
  assign auto_anon_in_d_valid = anonIn_d_valid;
  assign auto_anon_in_d_bits_opcode = auto_anon_out_d_bits_opcode;
  assign auto_anon_in_d_bits_size = anonIn_d_bits_size;
  assign auto_anon_in_d_bits_source = auto_anon_out_d_bits_source[8:4];
  assign auto_anon_in_d_bits_data = auto_anon_out_d_bits_data;
  assign auto_anon_out_a_valid = _repeater_io_deq_valid;
  assign auto_anon_out_a_bits_opcode = _repeater_io_deq_bits_opcode;
  assign auto_anon_out_a_bits_size =
    _repeater_io_deq_bits_size[2] ? 2'h3 : _repeater_io_deq_bits_size[1:0];
  assign auto_anon_out_a_bits_source =
    {_repeater_io_deq_bits_source, ~(aFirst ? dToggle : aToggle_r), aFragnum};
  assign auto_anon_out_a_bits_address =
    {_repeater_io_deq_bits_address[11:6],
     _repeater_io_deq_bits_address[5:0] | {~(aFragnum | _GEN_2[5:3]), 3'h0}};
  assign auto_anon_out_a_bits_mask = _repeater_io_full ? 8'hFF : auto_anon_in_a_bits_mask;
  assign auto_anon_out_a_bits_data = auto_anon_in_a_bits_data;
  assign auto_anon_out_d_ready = anonOut_d_ready;
endmodule

module TLInterconnectCoupler_cbus_to_debug(
  input         clock,
                reset,
                auto_fragmenter_anon_out_a_ready,
                auto_fragmenter_anon_out_d_valid,
  input  [2:0]  auto_fragmenter_anon_out_d_bits_opcode,
  input  [1:0]  auto_fragmenter_anon_out_d_bits_size,
  input  [8:0]  auto_fragmenter_anon_out_d_bits_source,
  input  [63:0] auto_fragmenter_anon_out_d_bits_data,
  input         auto_tl_in_a_valid,
  input  [2:0]  auto_tl_in_a_bits_opcode,
                auto_tl_in_a_bits_param,
                auto_tl_in_a_bits_size,
  input  [4:0]  auto_tl_in_a_bits_source,
  input  [11:0] auto_tl_in_a_bits_address,
  input  [7:0]  auto_tl_in_a_bits_mask,
  input  [63:0] auto_tl_in_a_bits_data,
  input         auto_tl_in_a_bits_corrupt,
                auto_tl_in_d_ready,
  output        auto_fragmenter_anon_out_a_valid,
  output [2:0]  auto_fragmenter_anon_out_a_bits_opcode,
                auto_fragmenter_anon_out_a_bits_param,
  output [1:0]  auto_fragmenter_anon_out_a_bits_size,
  output [8:0]  auto_fragmenter_anon_out_a_bits_source,
  output [11:0] auto_fragmenter_anon_out_a_bits_address,
  output [7:0]  auto_fragmenter_anon_out_a_bits_mask,
  output [63:0] auto_fragmenter_anon_out_a_bits_data,
  output        auto_fragmenter_anon_out_a_bits_corrupt,
                auto_fragmenter_anon_out_d_ready,
                auto_tl_in_a_ready,
                auto_tl_in_d_valid,
  output [2:0]  auto_tl_in_d_bits_opcode,
                auto_tl_in_d_bits_size,
  output [4:0]  auto_tl_in_d_bits_source,
  output [63:0] auto_tl_in_d_bits_data
);

  TLFragmenter_Debug fragmenter (
    .clock                        (clock),
    .reset                        (reset),
    .auto_anon_in_a_valid         (auto_tl_in_a_valid),
    .auto_anon_in_a_bits_opcode   (auto_tl_in_a_bits_opcode),
    .auto_anon_in_a_bits_param    (auto_tl_in_a_bits_param),
    .auto_anon_in_a_bits_size     (auto_tl_in_a_bits_size),
    .auto_anon_in_a_bits_source   (auto_tl_in_a_bits_source),
    .auto_anon_in_a_bits_address  (auto_tl_in_a_bits_address),
    .auto_anon_in_a_bits_mask     (auto_tl_in_a_bits_mask),
    .auto_anon_in_a_bits_data     (auto_tl_in_a_bits_data),
    .auto_anon_in_a_bits_corrupt  (auto_tl_in_a_bits_corrupt),
    .auto_anon_in_d_ready         (auto_tl_in_d_ready),
    .auto_anon_out_a_ready        (auto_fragmenter_anon_out_a_ready),
    .auto_anon_out_d_valid        (auto_fragmenter_anon_out_d_valid),
    .auto_anon_out_d_bits_opcode  (auto_fragmenter_anon_out_d_bits_opcode),
    .auto_anon_out_d_bits_size    (auto_fragmenter_anon_out_d_bits_size),
    .auto_anon_out_d_bits_source  (auto_fragmenter_anon_out_d_bits_source),
    .auto_anon_out_d_bits_data    (auto_fragmenter_anon_out_d_bits_data),
    .auto_anon_in_a_ready         (auto_tl_in_a_ready),
    .auto_anon_in_d_valid         (auto_tl_in_d_valid),
    .auto_anon_in_d_bits_opcode   (auto_tl_in_d_bits_opcode),
    .auto_anon_in_d_bits_size     (auto_tl_in_d_bits_size),
    .auto_anon_in_d_bits_source   (auto_tl_in_d_bits_source),
    .auto_anon_in_d_bits_data     (auto_tl_in_d_bits_data),
    .auto_anon_out_a_valid        (auto_fragmenter_anon_out_a_valid),
    .auto_anon_out_a_bits_opcode  (auto_fragmenter_anon_out_a_bits_opcode),
    .auto_anon_out_a_bits_param   (auto_fragmenter_anon_out_a_bits_param),
    .auto_anon_out_a_bits_size    (auto_fragmenter_anon_out_a_bits_size),
    .auto_anon_out_a_bits_source  (auto_fragmenter_anon_out_a_bits_source),
    .auto_anon_out_a_bits_address (auto_fragmenter_anon_out_a_bits_address),
    .auto_anon_out_a_bits_mask    (auto_fragmenter_anon_out_a_bits_mask),
    .auto_anon_out_a_bits_data    (auto_fragmenter_anon_out_a_bits_data),
    .auto_anon_out_a_bits_corrupt (auto_fragmenter_anon_out_a_bits_corrupt),
    .auto_anon_out_d_ready        (auto_fragmenter_anon_out_d_ready)
  );
endmodule

module TLMonitor_17(
  input        clock,
               reset,
               io_in_a_ready,
               io_in_a_valid,
  input [2:0]  io_in_a_bits_opcode,
               io_in_a_bits_param,
               io_in_a_bits_size,
  input [4:0]  io_in_a_bits_source,
  input [16:0] io_in_a_bits_address,
  input [7:0]  io_in_a_bits_mask,
  input        io_in_a_bits_corrupt,
               io_in_d_ready,
               io_in_d_valid,
  input [2:0]  io_in_d_bits_size,
  input [4:0]  io_in_d_bits_source
);

  wire [31:0] _plusarg_reader_out;
  wire        a_first_done = io_in_a_ready & io_in_a_valid;
  reg  [2:0]  a_first_counter;
  reg  [2:0]  opcode;
  reg  [2:0]  param;
  reg  [2:0]  size;
  reg  [4:0]  source;
  reg  [16:0] address;
  reg  [2:0]  d_first_counter;
  reg  [2:0]  opcode_1;
  reg  [1:0]  param_1;
  reg  [2:0]  size_1;
  reg  [4:0]  source_1;
  reg         sink;
  reg         denied;
  reg  [18:0] inflight;
  reg  [75:0] inflight_opcodes;
  reg  [75:0] inflight_sizes;
  reg  [2:0]  a_first_counter_1;
  wire        a_first_1 = a_first_counter_1 == 3'h0;
  reg  [2:0]  d_first_counter_1;
  wire        d_first_1 = d_first_counter_1 == 3'h0;
  wire        _GEN = a_first_done & a_first_1;
  reg  [31:0] watchdog;
  reg  [31:0] watchdog_1;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      automatic logic [7:0][2:0] _GEN_0 =
        '{3'h4, 3'h5, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic [7:0][2:0] _GEN_1 =
        '{3'h4, 3'h4, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic            _GEN_2 = io_in_a_bits_source[4:3] == 2'h0;
      automatic logic            _GEN_3 = io_in_a_bits_source[4:3] == 2'h1;
      automatic logic            _GEN_4 = io_in_a_bits_source == 5'h10;
      automatic logic            _GEN_5 = io_in_a_bits_source == 5'h11;
      automatic logic            _GEN_6 = io_in_a_bits_source == 5'h12;
      automatic logic            source_ok = _GEN_2 | _GEN_3 | _GEN_4 | _GEN_5 | _GEN_6;
      automatic logic [12:0]     _GEN_7 = 13'h3F << io_in_a_bits_size;
      automatic logic [5:0]      _GEN_8 = io_in_a_bits_address[5:0] & ~(_GEN_7[5:0]);
      automatic logic            _GEN_9 = io_in_a_bits_size > 3'h2;
      automatic logic            mask_size = io_in_a_bits_size[1:0] == 2'h2;
      automatic logic            mask_acc =
        _GEN_9 | mask_size & ~(io_in_a_bits_address[2]);
      automatic logic            mask_acc_1 =
        _GEN_9 | mask_size & io_in_a_bits_address[2];
      automatic logic            mask_size_1 = io_in_a_bits_size[1:0] == 2'h1;
      automatic logic            mask_eq_2 =
        ~(io_in_a_bits_address[2]) & ~(io_in_a_bits_address[1]);
      automatic logic            mask_acc_2 = mask_acc | mask_size_1 & mask_eq_2;
      automatic logic            mask_eq_3 =
        ~(io_in_a_bits_address[2]) & io_in_a_bits_address[1];
      automatic logic            mask_acc_3 = mask_acc | mask_size_1 & mask_eq_3;
      automatic logic            mask_eq_4 =
        io_in_a_bits_address[2] & ~(io_in_a_bits_address[1]);
      automatic logic            mask_acc_4 = mask_acc_1 | mask_size_1 & mask_eq_4;
      automatic logic            mask_eq_5 =
        io_in_a_bits_address[2] & io_in_a_bits_address[1];
      automatic logic            mask_acc_5 = mask_acc_1 | mask_size_1 & mask_eq_5;
      automatic logic [7:0]      mask =
        {mask_acc_5 | mask_eq_5 & io_in_a_bits_address[0],
         mask_acc_5 | mask_eq_5 & ~(io_in_a_bits_address[0]),
         mask_acc_4 | mask_eq_4 & io_in_a_bits_address[0],
         mask_acc_4 | mask_eq_4 & ~(io_in_a_bits_address[0]),
         mask_acc_3 | mask_eq_3 & io_in_a_bits_address[0],
         mask_acc_3 | mask_eq_3 & ~(io_in_a_bits_address[0]),
         mask_acc_2 | mask_eq_2 & io_in_a_bits_address[0],
         mask_acc_2 | mask_eq_2 & ~(io_in_a_bits_address[0])};
      automatic logic            _GEN_10 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_11 =
        _GEN_4 & io_in_a_bits_size == 3'h6 & io_in_a_bits_address[16];
      automatic logic            _GEN_12 = io_in_a_bits_param > 3'h2;
      automatic logic            _GEN_13 = io_in_a_bits_mask != 8'hFF;
      automatic logic            _GEN_14 =
        io_in_a_valid & (&io_in_a_bits_opcode) & ~reset;
      automatic logic            _GEN_15 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_16 = io_in_a_bits_mask != mask;
      automatic logic            _GEN_17 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_18 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_19 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_20 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h3 & ~reset;
      automatic logic            _GEN_21 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h5 & ~reset;
      automatic logic            _GEN_22 = io_in_a_valid & (|a_first_counter) & ~reset;
      automatic logic            _GEN_23 = io_in_d_valid & (|d_first_counter) & ~reset;
      automatic logic [75:0]     _GEN_24 = {69'h0, io_in_d_bits_source, 2'h0};
      automatic logic [75:0]     _GEN_25 = inflight_opcodes >> _GEN_24;
      automatic logic            _GEN_26 = io_in_d_valid & d_first_1;
      automatic logic            _GEN_27 = io_in_a_bits_source == io_in_d_bits_source;
      automatic logic            same_cycle_resp = io_in_a_valid & a_first_1 & _GEN_27;
      automatic logic            _GEN_28 = _GEN_26 & same_cycle_resp & ~reset;
      automatic logic            _GEN_29 = _GEN_26 & ~same_cycle_resp & ~reset;
      automatic logic [18:0]     _GEN_30 = inflight >> io_in_a_bits_source;
      automatic logic [18:0]     _GEN_31 = inflight >> io_in_d_bits_source;
      automatic logic [75:0]     _GEN_32 = inflight_sizes >> _GEN_24;
      if (_GEN_10) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_10 & ~_GEN_11) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_10 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock carries invalid source ID (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_10 & ~_GEN_9) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_10 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_10 & _GEN_12) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock carries invalid grow param (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_10 & _GEN_13) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_10 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock is corrupt (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & ~_GEN_11) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm carries invalid source ID (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & ~_GEN_9) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & _GEN_12) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm carries invalid grow param (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & ~(|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & _GEN_13) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm is corrupt (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & ~(_GEN_2 | _GEN_3 | _GEN_4 | _GEN_5 | _GEN_6)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & ~(io_in_a_bits_size != 3'h7 & io_in_a_bits_address[16])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get carries invalid source ID (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get address not aligned to size (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get carries invalid param (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & _GEN_16) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get contains invalid mask (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get is corrupt (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull carries invalid source ID (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull address not aligned to size (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull carries invalid param (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & _GEN_16) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull contains invalid mask (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial address not aligned to size (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial carries invalid param (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & (|(io_in_a_bits_mask & ~mask))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial contains invalid mask (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & io_in_a_bits_param > 3'h4) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & _GEN_16) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical carries invalid source ID (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical address not aligned to size (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & io_in_a_bits_param[2]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical carries invalid opcode param (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & _GEN_16) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical contains invalid mask (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_21) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_21 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint carries invalid source ID (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_21 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint address not aligned to size (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_21 & (|(io_in_a_bits_param[2:1]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint carries invalid opcode param (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_21 & _GEN_16) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint contains invalid mask (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_21 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint is corrupt (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & ~reset
          & ~(io_in_d_bits_source[4:3] == 2'h0 | io_in_d_bits_source[4:3] == 2'h1
              | io_in_d_bits_source == 5'h10 | io_in_d_bits_source == 5'h11
              | io_in_d_bits_source == 5'h12)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & io_in_a_bits_opcode != opcode) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel opcode changed within multibeat operation (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & io_in_a_bits_param != param) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel param changed within multibeat operation (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & io_in_a_bits_size != size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel size changed within multibeat operation (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & io_in_a_bits_source != source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel source changed within multibeat operation (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & io_in_a_bits_address != address) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel address changed with multibeat operation (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_23 & opcode_1 != 3'h1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel opcode changed within multibeat operation (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_23 & (|param_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel param changed within multibeat operation (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_23 & io_in_d_bits_size != size_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel size changed within multibeat operation (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_23 & io_in_d_bits_source != source_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel source changed within multibeat operation (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_23 & sink) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel sink changed with multibeat operation (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_23 & denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel denied changed with multibeat operation (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN & ~reset & _GEN_30[0]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel re-used a source ID (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_26 & ~reset & ~(_GEN_31[0] | same_cycle_resp)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28
          & ~(_GEN_1[io_in_a_bits_opcode] == 3'h1
              | _GEN_0[io_in_a_bits_opcode] == 3'h1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & io_in_a_bits_size != io_in_d_bits_size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_29 & ~(_GEN_1[_GEN_25[3:1]] == 3'h1 | _GEN_0[_GEN_25[3:1]] == 3'h1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_29 & io_in_d_bits_size != _GEN_32[3:1]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_26 & a_first_1 & io_in_a_valid & _GEN_27 & ~reset
          & ~(~io_in_d_ready | io_in_a_ready)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ready check\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight == 19'h0 | _plusarg_reader_out == 32'h0
              | watchdog < _plusarg_reader_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/devices/tilelink/BootROM.scala:89:85)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    automatic logic _GEN_33;
    automatic logic _GEN_34;
    _GEN_33 = io_in_d_ready & io_in_d_valid;
    _GEN_34 = _GEN_33 & ~(|d_first_counter);
    if (reset) begin
      a_first_counter <= 3'h0;
      d_first_counter <= 3'h0;
      inflight <= 19'h0;
      inflight_opcodes <= 76'h0;
      inflight_sizes <= 76'h0;
      a_first_counter_1 <= 3'h0;
      d_first_counter_1 <= 3'h0;
      watchdog <= 32'h0;
      watchdog_1 <= 32'h0;
    end
    else begin
      automatic logic [258:0] _GEN_35 = {252'h0, io_in_a_bits_source, 2'h0};
      automatic logic         _GEN_36;
      automatic logic [270:0] _GEN_37 = 271'hF << {264'h0, io_in_d_bits_source, 2'h0};
      automatic logic [75:0]  d_sizes_clr;
      automatic logic [31:0]  _GEN_38 = 32'h1 << io_in_d_bits_source;
      automatic logic [31:0]  _GEN_39 = 32'h1 << io_in_a_bits_source;
      automatic logic [258:0] _GEN_40 =
        {255'h0, _GEN ? {io_in_a_bits_opcode, 1'h1} : 4'h0} << _GEN_35;
      automatic logic [258:0] _GEN_41 =
        {255'h0, _GEN ? {io_in_a_bits_size, 1'h1} : 4'h0} << _GEN_35;
      _GEN_36 = _GEN_33 & d_first_1;
      d_sizes_clr = _GEN_36 ? _GEN_37[75:0] : 76'h0;
      if (a_first_done) begin
        if (|a_first_counter)
          a_first_counter <= a_first_counter - 3'h1;
        else
          a_first_counter <= 3'h0;
        if (a_first_1)
          a_first_counter_1 <= 3'h0;
        else
          a_first_counter_1 <= a_first_counter_1 - 3'h1;
      end
      if (_GEN_33) begin
        automatic logic [12:0] _GEN_42 = 13'h3F << io_in_d_bits_size;
        if (|d_first_counter)
          d_first_counter <= d_first_counter - 3'h1;
        else
          d_first_counter <= ~(_GEN_42[5:3]);
        if (d_first_1)
          d_first_counter_1 <= ~(_GEN_42[5:3]);
        else
          d_first_counter_1 <= d_first_counter_1 - 3'h1;
        watchdog_1 <= 32'h0;
      end
      else
        watchdog_1 <= watchdog_1 + 32'h1;
      inflight <=
        (inflight | (_GEN ? _GEN_39[18:0] : 19'h0)) & ~(_GEN_36 ? _GEN_38[18:0] : 19'h0);
      inflight_opcodes <=
        (inflight_opcodes | (_GEN ? _GEN_40[75:0] : 76'h0)) & ~d_sizes_clr;
      inflight_sizes <= (inflight_sizes | (_GEN ? _GEN_41[75:0] : 76'h0)) & ~d_sizes_clr;
      if (a_first_done | _GEN_33)
        watchdog <= 32'h0;
      else
        watchdog <= watchdog + 32'h1;
    end
    if (a_first_done & ~(|a_first_counter)) begin
      opcode <= io_in_a_bits_opcode;
      param <= io_in_a_bits_param;
      size <= io_in_a_bits_size;
      source <= io_in_a_bits_source;
      address <= io_in_a_bits_address;
    end
    if (_GEN_34) begin
      opcode_1 <= 3'h1;
      param_1 <= 2'h0;
      size_1 <= io_in_d_bits_size;
      source_1 <= io_in_d_bits_source;
    end
    sink <= ~_GEN_34 & sink;
    denied <= ~_GEN_34 & denied;
  end // always @(posedge)
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader (
    .out (_plusarg_reader_out)
  );
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader_1 (
    .out (/* unused */)
  );
endmodule

module Repeater_TLBundleA_a17d64s5k1z3u(
  input         clock,
                reset,
                io_repeat,
                io_enq_valid,
  input  [2:0]  io_enq_bits_opcode,
                io_enq_bits_param,
                io_enq_bits_size,
  input  [4:0]  io_enq_bits_source,
  input  [16:0] io_enq_bits_address,
  input  [7:0]  io_enq_bits_mask,
  input         io_enq_bits_corrupt,
                io_deq_ready,
  output        io_full,
                io_enq_ready,
                io_deq_valid,
  output [2:0]  io_deq_bits_opcode,
                io_deq_bits_param,
                io_deq_bits_size,
  output [4:0]  io_deq_bits_source,
  output [16:0] io_deq_bits_address,
  output [7:0]  io_deq_bits_mask,
  output        io_deq_bits_corrupt
);

  reg         full;
  reg  [2:0]  saved_opcode;
  reg  [2:0]  saved_param;
  reg  [2:0]  saved_size;
  reg  [4:0]  saved_source;
  reg  [16:0] saved_address;
  reg  [7:0]  saved_mask;
  reg         saved_corrupt;
  wire        _io_deq_valid_output = io_enq_valid | full;
  wire        _io_enq_ready_output = io_deq_ready & ~full;
  always @(posedge clock) begin
    automatic logic _GEN;
    _GEN = _io_enq_ready_output & io_enq_valid & io_repeat;
    if (reset)
      full <= 1'h0;
    else
      full <= ~(io_deq_ready & _io_deq_valid_output & ~io_repeat) & (_GEN | full);
    if (_GEN) begin
      saved_opcode <= io_enq_bits_opcode;
      saved_param <= io_enq_bits_param;
      saved_size <= io_enq_bits_size;
      saved_source <= io_enq_bits_source;
      saved_address <= io_enq_bits_address;
      saved_mask <= io_enq_bits_mask;
      saved_corrupt <= io_enq_bits_corrupt;
    end
  end // always @(posedge)
  assign io_full = full;
  assign io_enq_ready = _io_enq_ready_output;
  assign io_deq_valid = _io_deq_valid_output;
  assign io_deq_bits_opcode = full ? saved_opcode : io_enq_bits_opcode;
  assign io_deq_bits_param = full ? saved_param : io_enq_bits_param;
  assign io_deq_bits_size = full ? saved_size : io_enq_bits_size;
  assign io_deq_bits_source = full ? saved_source : io_enq_bits_source;
  assign io_deq_bits_address = full ? saved_address : io_enq_bits_address;
  assign io_deq_bits_mask = full ? saved_mask : io_enq_bits_mask;
  assign io_deq_bits_corrupt = full ? saved_corrupt : io_enq_bits_corrupt;
endmodule

module TLFragmenter_BootROM(
  input         clock,
                reset,
                auto_anon_in_a_valid,
  input  [2:0]  auto_anon_in_a_bits_opcode,
                auto_anon_in_a_bits_param,
                auto_anon_in_a_bits_size,
  input  [4:0]  auto_anon_in_a_bits_source,
  input  [16:0] auto_anon_in_a_bits_address,
  input  [7:0]  auto_anon_in_a_bits_mask,
  input         auto_anon_in_a_bits_corrupt,
                auto_anon_in_d_ready,
                auto_anon_out_a_ready,
                auto_anon_out_d_valid,
  input  [1:0]  auto_anon_out_d_bits_size,
  input  [8:0]  auto_anon_out_d_bits_source,
  input  [63:0] auto_anon_out_d_bits_data,
  output        auto_anon_in_a_ready,
                auto_anon_in_d_valid,
  output [2:0]  auto_anon_in_d_bits_size,
  output [4:0]  auto_anon_in_d_bits_source,
  output [63:0] auto_anon_in_d_bits_data,
  output        auto_anon_out_a_valid,
  output [2:0]  auto_anon_out_a_bits_opcode,
                auto_anon_out_a_bits_param,
  output [1:0]  auto_anon_out_a_bits_size,
  output [8:0]  auto_anon_out_a_bits_source,
  output [16:0] auto_anon_out_a_bits_address,
  output [7:0]  auto_anon_out_a_bits_mask,
  output        auto_anon_out_a_bits_corrupt,
                auto_anon_out_d_ready
);

  wire        _repeater_io_full;
  wire        _repeater_io_enq_ready;
  wire        _repeater_io_deq_valid;
  wire [2:0]  _repeater_io_deq_bits_size;
  wire [4:0]  _repeater_io_deq_bits_source;
  wire [16:0] _repeater_io_deq_bits_address;
  wire [7:0]  _repeater_io_deq_bits_mask;
  reg  [2:0]  acknum;
  reg  [2:0]  dOrig;
  reg         dToggle;
  wire        dFirst = acknum == 3'h0;
  wire [5:0]  _GEN = 6'h7 << auto_anon_out_d_bits_size;
  wire [5:0]  _GEN_0 =
    {auto_anon_out_d_bits_source[2:0], ~(_GEN[2:0])}
    & {1'h1, ~(auto_anon_out_d_bits_source[2:0]), _GEN[2:1]};
  wire [2:0]  _GEN_1 = {1'h0, _GEN_0[5:4]} | _GEN_0[2:0];
  wire [2:0]  dFirst_size = {|(_GEN_0[5:3]), |(_GEN_1[2:1]), _GEN_1[2] | _GEN_1[0]};
  wire [2:0]  anonIn_d_bits_size = dFirst ? dFirst_size : dOrig;
  wire [12:0] _GEN_2 = 13'h3F << _repeater_io_deq_bits_size;
  reg  [2:0]  gennum;
  wire        aFirst = gennum == 3'h0;
  wire [2:0]  _GEN_3 = gennum - 3'h1;
  wire [2:0]  aFragnum = aFirst ? ~(_GEN_2[5:3]) : _GEN_3;
  reg         aToggle_r;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (~reset & ~(~_repeater_io_full | (&_repeater_io_deq_bits_mask))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Fragmenter.scala:324 assert (!repeater.io.full || in_a.bits.mask === fullMask)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    automatic logic _GEN_4;
    automatic logic _GEN_5;
    _GEN_4 = auto_anon_in_d_ready & auto_anon_out_d_valid;
    _GEN_5 = _GEN_4 & dFirst;
    if (reset) begin
      acknum <= 3'h0;
      dToggle <= 1'h0;
      gennum <= 3'h0;
    end
    else begin
      if (_GEN_4) begin
        if (dFirst)
          acknum <= auto_anon_out_d_bits_source[2:0];
        else
          acknum <= acknum - 3'h1;
      end
      if (_GEN_5)
        dToggle <= auto_anon_out_d_bits_source[3];
      if (auto_anon_out_a_ready & _repeater_io_deq_valid) begin
        if (aFirst)
          gennum <= ~(_GEN_2[5:3]);
        else
          gennum <= _GEN_3;
      end
    end
    if (_GEN_5)
      dOrig <= dFirst_size;
    if (aFirst)
      aToggle_r <= dToggle;
  end // always @(posedge)
  TLMonitor_17 monitor (
    .clock                (clock),
    .reset                (reset),
    .io_in_a_ready        (_repeater_io_enq_ready),
    .io_in_a_valid        (auto_anon_in_a_valid),
    .io_in_a_bits_opcode  (auto_anon_in_a_bits_opcode),
    .io_in_a_bits_param   (auto_anon_in_a_bits_param),
    .io_in_a_bits_size    (auto_anon_in_a_bits_size),
    .io_in_a_bits_source  (auto_anon_in_a_bits_source),
    .io_in_a_bits_address (auto_anon_in_a_bits_address),
    .io_in_a_bits_mask    (auto_anon_in_a_bits_mask),
    .io_in_a_bits_corrupt (auto_anon_in_a_bits_corrupt),
    .io_in_d_ready        (auto_anon_in_d_ready),
    .io_in_d_valid        (auto_anon_out_d_valid),
    .io_in_d_bits_size    (anonIn_d_bits_size),
    .io_in_d_bits_source  (auto_anon_out_d_bits_source[8:4])
  );
  Repeater_TLBundleA_a17d64s5k1z3u repeater (
    .clock               (clock),
    .reset               (reset),
    .io_repeat           (|aFragnum),
    .io_enq_valid        (auto_anon_in_a_valid),
    .io_enq_bits_opcode  (auto_anon_in_a_bits_opcode),
    .io_enq_bits_param   (auto_anon_in_a_bits_param),
    .io_enq_bits_size    (auto_anon_in_a_bits_size),
    .io_enq_bits_source  (auto_anon_in_a_bits_source),
    .io_enq_bits_address (auto_anon_in_a_bits_address),
    .io_enq_bits_mask    (auto_anon_in_a_bits_mask),
    .io_enq_bits_corrupt (auto_anon_in_a_bits_corrupt),
    .io_deq_ready        (auto_anon_out_a_ready),
    .io_full             (_repeater_io_full),
    .io_enq_ready        (_repeater_io_enq_ready),
    .io_deq_valid        (_repeater_io_deq_valid),
    .io_deq_bits_opcode  (auto_anon_out_a_bits_opcode),
    .io_deq_bits_param   (auto_anon_out_a_bits_param),
    .io_deq_bits_size    (_repeater_io_deq_bits_size),
    .io_deq_bits_source  (_repeater_io_deq_bits_source),
    .io_deq_bits_address (_repeater_io_deq_bits_address),
    .io_deq_bits_mask    (_repeater_io_deq_bits_mask),
    .io_deq_bits_corrupt (auto_anon_out_a_bits_corrupt)
  );
  assign auto_anon_in_a_ready = _repeater_io_enq_ready;
  assign auto_anon_in_d_valid = auto_anon_out_d_valid;
  assign auto_anon_in_d_bits_size = anonIn_d_bits_size;
  assign auto_anon_in_d_bits_source = auto_anon_out_d_bits_source[8:4];
  assign auto_anon_in_d_bits_data = auto_anon_out_d_bits_data;
  assign auto_anon_out_a_valid = _repeater_io_deq_valid;
  assign auto_anon_out_a_bits_size =
    _repeater_io_deq_bits_size[2] ? 2'h3 : _repeater_io_deq_bits_size[1:0];
  assign auto_anon_out_a_bits_source =
    {_repeater_io_deq_bits_source, ~(aFirst ? dToggle : aToggle_r), aFragnum};
  assign auto_anon_out_a_bits_address =
    {_repeater_io_deq_bits_address[16:6],
     _repeater_io_deq_bits_address[5:0] | {~(aFragnum | _GEN_2[5:3]), 3'h0}};
  assign auto_anon_out_a_bits_mask = _repeater_io_full ? 8'hFF : auto_anon_in_a_bits_mask;
  assign auto_anon_out_d_ready = auto_anon_in_d_ready;
endmodule

module TLInterconnectCoupler_cbus_to_bootrom(
  input         clock,
                reset,
                auto_fragmenter_anon_out_a_ready,
                auto_fragmenter_anon_out_d_valid,
  input  [1:0]  auto_fragmenter_anon_out_d_bits_size,
  input  [8:0]  auto_fragmenter_anon_out_d_bits_source,
  input  [63:0] auto_fragmenter_anon_out_d_bits_data,
  input         auto_tl_in_a_valid,
  input  [2:0]  auto_tl_in_a_bits_opcode,
                auto_tl_in_a_bits_param,
                auto_tl_in_a_bits_size,
  input  [4:0]  auto_tl_in_a_bits_source,
  input  [16:0] auto_tl_in_a_bits_address,
  input  [7:0]  auto_tl_in_a_bits_mask,
  input         auto_tl_in_a_bits_corrupt,
                auto_tl_in_d_ready,
  output        auto_fragmenter_anon_out_a_valid,
  output [2:0]  auto_fragmenter_anon_out_a_bits_opcode,
                auto_fragmenter_anon_out_a_bits_param,
  output [1:0]  auto_fragmenter_anon_out_a_bits_size,
  output [8:0]  auto_fragmenter_anon_out_a_bits_source,
  output [16:0] auto_fragmenter_anon_out_a_bits_address,
  output [7:0]  auto_fragmenter_anon_out_a_bits_mask,
  output        auto_fragmenter_anon_out_a_bits_corrupt,
                auto_fragmenter_anon_out_d_ready,
                auto_tl_in_a_ready,
                auto_tl_in_d_valid,
  output [2:0]  auto_tl_in_d_bits_size,
  output [4:0]  auto_tl_in_d_bits_source,
  output [63:0] auto_tl_in_d_bits_data
);

  TLFragmenter_BootROM fragmenter (
    .clock                        (clock),
    .reset                        (reset),
    .auto_anon_in_a_valid         (auto_tl_in_a_valid),
    .auto_anon_in_a_bits_opcode   (auto_tl_in_a_bits_opcode),
    .auto_anon_in_a_bits_param    (auto_tl_in_a_bits_param),
    .auto_anon_in_a_bits_size     (auto_tl_in_a_bits_size),
    .auto_anon_in_a_bits_source   (auto_tl_in_a_bits_source),
    .auto_anon_in_a_bits_address  (auto_tl_in_a_bits_address),
    .auto_anon_in_a_bits_mask     (auto_tl_in_a_bits_mask),
    .auto_anon_in_a_bits_corrupt  (auto_tl_in_a_bits_corrupt),
    .auto_anon_in_d_ready         (auto_tl_in_d_ready),
    .auto_anon_out_a_ready        (auto_fragmenter_anon_out_a_ready),
    .auto_anon_out_d_valid        (auto_fragmenter_anon_out_d_valid),
    .auto_anon_out_d_bits_size    (auto_fragmenter_anon_out_d_bits_size),
    .auto_anon_out_d_bits_source  (auto_fragmenter_anon_out_d_bits_source),
    .auto_anon_out_d_bits_data    (auto_fragmenter_anon_out_d_bits_data),
    .auto_anon_in_a_ready         (auto_tl_in_a_ready),
    .auto_anon_in_d_valid         (auto_tl_in_d_valid),
    .auto_anon_in_d_bits_size     (auto_tl_in_d_bits_size),
    .auto_anon_in_d_bits_source   (auto_tl_in_d_bits_source),
    .auto_anon_in_d_bits_data     (auto_tl_in_d_bits_data),
    .auto_anon_out_a_valid        (auto_fragmenter_anon_out_a_valid),
    .auto_anon_out_a_bits_opcode  (auto_fragmenter_anon_out_a_bits_opcode),
    .auto_anon_out_a_bits_param   (auto_fragmenter_anon_out_a_bits_param),
    .auto_anon_out_a_bits_size    (auto_fragmenter_anon_out_a_bits_size),
    .auto_anon_out_a_bits_source  (auto_fragmenter_anon_out_a_bits_source),
    .auto_anon_out_a_bits_address (auto_fragmenter_anon_out_a_bits_address),
    .auto_anon_out_a_bits_mask    (auto_fragmenter_anon_out_a_bits_mask),
    .auto_anon_out_a_bits_corrupt (auto_fragmenter_anon_out_a_bits_corrupt),
    .auto_anon_out_d_ready        (auto_fragmenter_anon_out_d_ready)
  );
endmodule

module PeripheryBus_cbus(
  input         auto_coupler_to_bootrom_fragmenter_anon_out_a_ready,
                auto_coupler_to_bootrom_fragmenter_anon_out_d_valid,
  input  [1:0]  auto_coupler_to_bootrom_fragmenter_anon_out_d_bits_size,
  input  [8:0]  auto_coupler_to_bootrom_fragmenter_anon_out_d_bits_source,
  input  [63:0] auto_coupler_to_bootrom_fragmenter_anon_out_d_bits_data,
  input         auto_coupler_to_debug_fragmenter_anon_out_a_ready,
                auto_coupler_to_debug_fragmenter_anon_out_d_valid,
  input  [2:0]  auto_coupler_to_debug_fragmenter_anon_out_d_bits_opcode,
  input  [1:0]  auto_coupler_to_debug_fragmenter_anon_out_d_bits_size,
  input  [8:0]  auto_coupler_to_debug_fragmenter_anon_out_d_bits_source,
  input  [63:0] auto_coupler_to_debug_fragmenter_anon_out_d_bits_data,
  input         auto_coupler_to_plic_fragmenter_anon_out_a_ready,
                auto_coupler_to_plic_fragmenter_anon_out_d_valid,
  input  [2:0]  auto_coupler_to_plic_fragmenter_anon_out_d_bits_opcode,
  input  [1:0]  auto_coupler_to_plic_fragmenter_anon_out_d_bits_size,
  input  [8:0]  auto_coupler_to_plic_fragmenter_anon_out_d_bits_source,
  input  [63:0] auto_coupler_to_plic_fragmenter_anon_out_d_bits_data,
  input         auto_coupler_to_clint_fragmenter_anon_out_a_ready,
                auto_coupler_to_clint_fragmenter_anon_out_d_valid,
  input  [2:0]  auto_coupler_to_clint_fragmenter_anon_out_d_bits_opcode,
  input  [1:0]  auto_coupler_to_clint_fragmenter_anon_out_d_bits_size,
  input  [8:0]  auto_coupler_to_clint_fragmenter_anon_out_d_bits_source,
  input  [63:0] auto_coupler_to_clint_fragmenter_anon_out_d_bits_data,
  input         auto_cbus_clock_groups_in_member_cbus_0_clock,
                auto_cbus_clock_groups_in_member_cbus_0_reset,
                auto_bus_xing_in_a_valid,
  input  [2:0]  auto_bus_xing_in_a_bits_opcode,
                auto_bus_xing_in_a_bits_param,
  input  [3:0]  auto_bus_xing_in_a_bits_size,
  input  [4:0]  auto_bus_xing_in_a_bits_source,
  input  [27:0] auto_bus_xing_in_a_bits_address,
  input  [7:0]  auto_bus_xing_in_a_bits_mask,
  input  [63:0] auto_bus_xing_in_a_bits_data,
  input         auto_bus_xing_in_a_bits_corrupt,
                auto_bus_xing_in_d_ready,
  output        auto_coupler_to_bootrom_fragmenter_anon_out_a_valid,
  output [2:0]  auto_coupler_to_bootrom_fragmenter_anon_out_a_bits_opcode,
                auto_coupler_to_bootrom_fragmenter_anon_out_a_bits_param,
  output [1:0]  auto_coupler_to_bootrom_fragmenter_anon_out_a_bits_size,
  output [8:0]  auto_coupler_to_bootrom_fragmenter_anon_out_a_bits_source,
  output [16:0] auto_coupler_to_bootrom_fragmenter_anon_out_a_bits_address,
  output [7:0]  auto_coupler_to_bootrom_fragmenter_anon_out_a_bits_mask,
  output        auto_coupler_to_bootrom_fragmenter_anon_out_a_bits_corrupt,
                auto_coupler_to_bootrom_fragmenter_anon_out_d_ready,
                auto_coupler_to_debug_fragmenter_anon_out_a_valid,
  output [2:0]  auto_coupler_to_debug_fragmenter_anon_out_a_bits_opcode,
                auto_coupler_to_debug_fragmenter_anon_out_a_bits_param,
  output [1:0]  auto_coupler_to_debug_fragmenter_anon_out_a_bits_size,
  output [8:0]  auto_coupler_to_debug_fragmenter_anon_out_a_bits_source,
  output [11:0] auto_coupler_to_debug_fragmenter_anon_out_a_bits_address,
  output [7:0]  auto_coupler_to_debug_fragmenter_anon_out_a_bits_mask,
  output [63:0] auto_coupler_to_debug_fragmenter_anon_out_a_bits_data,
  output        auto_coupler_to_debug_fragmenter_anon_out_a_bits_corrupt,
                auto_coupler_to_debug_fragmenter_anon_out_d_ready,
                auto_coupler_to_plic_fragmenter_anon_out_a_valid,
  output [2:0]  auto_coupler_to_plic_fragmenter_anon_out_a_bits_opcode,
                auto_coupler_to_plic_fragmenter_anon_out_a_bits_param,
  output [1:0]  auto_coupler_to_plic_fragmenter_anon_out_a_bits_size,
  output [8:0]  auto_coupler_to_plic_fragmenter_anon_out_a_bits_source,
  output [27:0] auto_coupler_to_plic_fragmenter_anon_out_a_bits_address,
  output [7:0]  auto_coupler_to_plic_fragmenter_anon_out_a_bits_mask,
  output [63:0] auto_coupler_to_plic_fragmenter_anon_out_a_bits_data,
  output        auto_coupler_to_plic_fragmenter_anon_out_a_bits_corrupt,
                auto_coupler_to_plic_fragmenter_anon_out_d_ready,
                auto_coupler_to_clint_fragmenter_anon_out_a_valid,
  output [2:0]  auto_coupler_to_clint_fragmenter_anon_out_a_bits_opcode,
                auto_coupler_to_clint_fragmenter_anon_out_a_bits_param,
  output [1:0]  auto_coupler_to_clint_fragmenter_anon_out_a_bits_size,
  output [8:0]  auto_coupler_to_clint_fragmenter_anon_out_a_bits_source,
  output [25:0] auto_coupler_to_clint_fragmenter_anon_out_a_bits_address,
  output [7:0]  auto_coupler_to_clint_fragmenter_anon_out_a_bits_mask,
  output [63:0] auto_coupler_to_clint_fragmenter_anon_out_a_bits_data,
  output        auto_coupler_to_clint_fragmenter_anon_out_a_bits_corrupt,
                auto_coupler_to_clint_fragmenter_anon_out_d_ready,
                auto_fixedClockNode_anon_out_3_clock,
                auto_fixedClockNode_anon_out_3_reset,
                auto_fixedClockNode_anon_out_1_clock,
                auto_fixedClockNode_anon_out_1_reset,
                auto_fixedClockNode_anon_out_0_clock,
                auto_fixedClockNode_anon_out_0_reset,
                auto_bus_xing_in_a_ready,
                auto_bus_xing_in_d_valid,
  output [2:0]  auto_bus_xing_in_d_bits_opcode,
  output [1:0]  auto_bus_xing_in_d_bits_param,
  output [3:0]  auto_bus_xing_in_d_bits_size,
  output [4:0]  auto_bus_xing_in_d_bits_source,
  output        auto_bus_xing_in_d_bits_sink,
                auto_bus_xing_in_d_bits_denied,
  output [63:0] auto_bus_xing_in_d_bits_data,
  output        auto_bus_xing_in_d_bits_corrupt
);

  wire        _coupler_to_bootrom_auto_tl_in_a_ready;
  wire        _coupler_to_bootrom_auto_tl_in_d_valid;
  wire [2:0]  _coupler_to_bootrom_auto_tl_in_d_bits_size;
  wire [4:0]  _coupler_to_bootrom_auto_tl_in_d_bits_source;
  wire [63:0] _coupler_to_bootrom_auto_tl_in_d_bits_data;
  wire        _coupler_to_debug_auto_tl_in_a_ready;
  wire        _coupler_to_debug_auto_tl_in_d_valid;
  wire [2:0]  _coupler_to_debug_auto_tl_in_d_bits_opcode;
  wire [2:0]  _coupler_to_debug_auto_tl_in_d_bits_size;
  wire [4:0]  _coupler_to_debug_auto_tl_in_d_bits_source;
  wire [63:0] _coupler_to_debug_auto_tl_in_d_bits_data;
  wire        _coupler_to_plic_auto_tl_in_a_ready;
  wire        _coupler_to_plic_auto_tl_in_d_valid;
  wire [2:0]  _coupler_to_plic_auto_tl_in_d_bits_opcode;
  wire [2:0]  _coupler_to_plic_auto_tl_in_d_bits_size;
  wire [4:0]  _coupler_to_plic_auto_tl_in_d_bits_source;
  wire [63:0] _coupler_to_plic_auto_tl_in_d_bits_data;
  wire        _coupler_to_clint_auto_tl_in_a_ready;
  wire        _coupler_to_clint_auto_tl_in_d_valid;
  wire [2:0]  _coupler_to_clint_auto_tl_in_d_bits_opcode;
  wire [2:0]  _coupler_to_clint_auto_tl_in_d_bits_size;
  wire [4:0]  _coupler_to_clint_auto_tl_in_d_bits_source;
  wire [63:0] _coupler_to_clint_auto_tl_in_d_bits_data;
  wire        _wrapped_error_device_auto_buffer_in_a_ready;
  wire        _wrapped_error_device_auto_buffer_in_d_valid;
  wire [2:0]  _wrapped_error_device_auto_buffer_in_d_bits_opcode;
  wire [1:0]  _wrapped_error_device_auto_buffer_in_d_bits_param;
  wire [3:0]  _wrapped_error_device_auto_buffer_in_d_bits_size;
  wire [4:0]  _wrapped_error_device_auto_buffer_in_d_bits_source;
  wire        _wrapped_error_device_auto_buffer_in_d_bits_sink;
  wire        _wrapped_error_device_auto_buffer_in_d_bits_denied;
  wire [63:0] _wrapped_error_device_auto_buffer_in_d_bits_data;
  wire        _wrapped_error_device_auto_buffer_in_d_bits_corrupt;
  wire        _atomics_auto_out_a_valid;
  wire [2:0]  _atomics_auto_out_a_bits_opcode;
  wire [2:0]  _atomics_auto_out_a_bits_param;
  wire [3:0]  _atomics_auto_out_a_bits_size;
  wire [4:0]  _atomics_auto_out_a_bits_source;
  wire [27:0] _atomics_auto_out_a_bits_address;
  wire [7:0]  _atomics_auto_out_a_bits_mask;
  wire [63:0] _atomics_auto_out_a_bits_data;
  wire        _atomics_auto_out_a_bits_corrupt;
  wire        _atomics_auto_out_d_ready;
  wire        _buffer_auto_in_a_ready;
  wire        _buffer_auto_in_d_valid;
  wire [2:0]  _buffer_auto_in_d_bits_opcode;
  wire [1:0]  _buffer_auto_in_d_bits_param;
  wire [3:0]  _buffer_auto_in_d_bits_size;
  wire [4:0]  _buffer_auto_in_d_bits_source;
  wire        _buffer_auto_in_d_bits_sink;
  wire        _buffer_auto_in_d_bits_denied;
  wire [63:0] _buffer_auto_in_d_bits_data;
  wire        _buffer_auto_in_d_bits_corrupt;
  wire        _buffer_auto_out_a_valid;
  wire [2:0]  _buffer_auto_out_a_bits_opcode;
  wire [2:0]  _buffer_auto_out_a_bits_param;
  wire [3:0]  _buffer_auto_out_a_bits_size;
  wire [4:0]  _buffer_auto_out_a_bits_source;
  wire [27:0] _buffer_auto_out_a_bits_address;
  wire [7:0]  _buffer_auto_out_a_bits_mask;
  wire [63:0] _buffer_auto_out_a_bits_data;
  wire        _buffer_auto_out_a_bits_corrupt;
  wire        _buffer_auto_out_d_ready;
  wire        _out_xbar_auto_anon_in_a_ready;
  wire        _out_xbar_auto_anon_in_d_valid;
  wire [2:0]  _out_xbar_auto_anon_in_d_bits_opcode;
  wire [1:0]  _out_xbar_auto_anon_in_d_bits_param;
  wire [3:0]  _out_xbar_auto_anon_in_d_bits_size;
  wire [4:0]  _out_xbar_auto_anon_in_d_bits_source;
  wire        _out_xbar_auto_anon_in_d_bits_sink;
  wire        _out_xbar_auto_anon_in_d_bits_denied;
  wire [63:0] _out_xbar_auto_anon_in_d_bits_data;
  wire        _out_xbar_auto_anon_in_d_bits_corrupt;
  wire        _out_xbar_auto_anon_out_4_a_valid;
  wire [2:0]  _out_xbar_auto_anon_out_4_a_bits_opcode;
  wire [2:0]  _out_xbar_auto_anon_out_4_a_bits_param;
  wire [2:0]  _out_xbar_auto_anon_out_4_a_bits_size;
  wire [4:0]  _out_xbar_auto_anon_out_4_a_bits_source;
  wire [16:0] _out_xbar_auto_anon_out_4_a_bits_address;
  wire [7:0]  _out_xbar_auto_anon_out_4_a_bits_mask;
  wire        _out_xbar_auto_anon_out_4_a_bits_corrupt;
  wire        _out_xbar_auto_anon_out_4_d_ready;
  wire        _out_xbar_auto_anon_out_3_a_valid;
  wire [2:0]  _out_xbar_auto_anon_out_3_a_bits_opcode;
  wire [2:0]  _out_xbar_auto_anon_out_3_a_bits_param;
  wire [2:0]  _out_xbar_auto_anon_out_3_a_bits_size;
  wire [4:0]  _out_xbar_auto_anon_out_3_a_bits_source;
  wire [11:0] _out_xbar_auto_anon_out_3_a_bits_address;
  wire [7:0]  _out_xbar_auto_anon_out_3_a_bits_mask;
  wire [63:0] _out_xbar_auto_anon_out_3_a_bits_data;
  wire        _out_xbar_auto_anon_out_3_a_bits_corrupt;
  wire        _out_xbar_auto_anon_out_3_d_ready;
  wire        _out_xbar_auto_anon_out_2_a_valid;
  wire [2:0]  _out_xbar_auto_anon_out_2_a_bits_opcode;
  wire [2:0]  _out_xbar_auto_anon_out_2_a_bits_param;
  wire [2:0]  _out_xbar_auto_anon_out_2_a_bits_size;
  wire [4:0]  _out_xbar_auto_anon_out_2_a_bits_source;
  wire [27:0] _out_xbar_auto_anon_out_2_a_bits_address;
  wire [7:0]  _out_xbar_auto_anon_out_2_a_bits_mask;
  wire [63:0] _out_xbar_auto_anon_out_2_a_bits_data;
  wire        _out_xbar_auto_anon_out_2_a_bits_corrupt;
  wire        _out_xbar_auto_anon_out_2_d_ready;
  wire        _out_xbar_auto_anon_out_1_a_valid;
  wire [2:0]  _out_xbar_auto_anon_out_1_a_bits_opcode;
  wire [2:0]  _out_xbar_auto_anon_out_1_a_bits_param;
  wire [2:0]  _out_xbar_auto_anon_out_1_a_bits_size;
  wire [4:0]  _out_xbar_auto_anon_out_1_a_bits_source;
  wire [25:0] _out_xbar_auto_anon_out_1_a_bits_address;
  wire [7:0]  _out_xbar_auto_anon_out_1_a_bits_mask;
  wire [63:0] _out_xbar_auto_anon_out_1_a_bits_data;
  wire        _out_xbar_auto_anon_out_1_a_bits_corrupt;
  wire        _out_xbar_auto_anon_out_1_d_ready;
  wire        _out_xbar_auto_anon_out_0_a_valid;
  wire [2:0]  _out_xbar_auto_anon_out_0_a_bits_opcode;
  wire [2:0]  _out_xbar_auto_anon_out_0_a_bits_param;
  wire [3:0]  _out_xbar_auto_anon_out_0_a_bits_size;
  wire [4:0]  _out_xbar_auto_anon_out_0_a_bits_source;
  wire [13:0] _out_xbar_auto_anon_out_0_a_bits_address;
  wire [7:0]  _out_xbar_auto_anon_out_0_a_bits_mask;
  wire [63:0] _out_xbar_auto_anon_out_0_a_bits_data;
  wire        _out_xbar_auto_anon_out_0_a_bits_corrupt;
  wire        _out_xbar_auto_anon_out_0_d_ready;
  wire        _fixer_auto_anon_in_a_ready;
  wire        _fixer_auto_anon_in_d_valid;
  wire [2:0]  _fixer_auto_anon_in_d_bits_opcode;
  wire [1:0]  _fixer_auto_anon_in_d_bits_param;
  wire [3:0]  _fixer_auto_anon_in_d_bits_size;
  wire [4:0]  _fixer_auto_anon_in_d_bits_source;
  wire        _fixer_auto_anon_in_d_bits_sink;
  wire        _fixer_auto_anon_in_d_bits_denied;
  wire [63:0] _fixer_auto_anon_in_d_bits_data;
  wire        _fixer_auto_anon_in_d_bits_corrupt;
  wire        _fixer_auto_anon_out_a_valid;
  wire [2:0]  _fixer_auto_anon_out_a_bits_opcode;
  wire [2:0]  _fixer_auto_anon_out_a_bits_param;
  wire [3:0]  _fixer_auto_anon_out_a_bits_size;
  wire [4:0]  _fixer_auto_anon_out_a_bits_source;
  wire [27:0] _fixer_auto_anon_out_a_bits_address;
  wire [7:0]  _fixer_auto_anon_out_a_bits_mask;
  wire [63:0] _fixer_auto_anon_out_a_bits_data;
  wire        _fixer_auto_anon_out_a_bits_corrupt;
  wire        _fixer_auto_anon_out_d_ready;
  wire        _fixedClockNode_auto_anon_out_0_clock;
  wire        _fixedClockNode_auto_anon_out_0_reset;
  FixedClockBroadcast_5 fixedClockNode (
    .auto_anon_in_clock    (auto_cbus_clock_groups_in_member_cbus_0_clock),
    .auto_anon_in_reset    (auto_cbus_clock_groups_in_member_cbus_0_reset),
    .auto_anon_out_4_clock (auto_fixedClockNode_anon_out_3_clock),
    .auto_anon_out_4_reset (auto_fixedClockNode_anon_out_3_reset),
    .auto_anon_out_2_clock (auto_fixedClockNode_anon_out_1_clock),
    .auto_anon_out_2_reset (auto_fixedClockNode_anon_out_1_reset),
    .auto_anon_out_1_clock (auto_fixedClockNode_anon_out_0_clock),
    .auto_anon_out_1_reset (auto_fixedClockNode_anon_out_0_reset),
    .auto_anon_out_0_clock (_fixedClockNode_auto_anon_out_0_clock),
    .auto_anon_out_0_reset (_fixedClockNode_auto_anon_out_0_reset)
  );
  TLFIFOFixer_3 fixer (
    .clock                        (_fixedClockNode_auto_anon_out_0_clock),
    .reset                        (_fixedClockNode_auto_anon_out_0_reset),
    .auto_anon_in_a_valid         (_buffer_auto_out_a_valid),
    .auto_anon_in_a_bits_opcode   (_buffer_auto_out_a_bits_opcode),
    .auto_anon_in_a_bits_param    (_buffer_auto_out_a_bits_param),
    .auto_anon_in_a_bits_size     (_buffer_auto_out_a_bits_size),
    .auto_anon_in_a_bits_source   (_buffer_auto_out_a_bits_source),
    .auto_anon_in_a_bits_address  (_buffer_auto_out_a_bits_address),
    .auto_anon_in_a_bits_mask     (_buffer_auto_out_a_bits_mask),
    .auto_anon_in_a_bits_data     (_buffer_auto_out_a_bits_data),
    .auto_anon_in_a_bits_corrupt  (_buffer_auto_out_a_bits_corrupt),
    .auto_anon_in_d_ready         (_buffer_auto_out_d_ready),
    .auto_anon_out_a_ready        (_out_xbar_auto_anon_in_a_ready),
    .auto_anon_out_d_valid        (_out_xbar_auto_anon_in_d_valid),
    .auto_anon_out_d_bits_opcode  (_out_xbar_auto_anon_in_d_bits_opcode),
    .auto_anon_out_d_bits_param   (_out_xbar_auto_anon_in_d_bits_param),
    .auto_anon_out_d_bits_size    (_out_xbar_auto_anon_in_d_bits_size),
    .auto_anon_out_d_bits_source  (_out_xbar_auto_anon_in_d_bits_source),
    .auto_anon_out_d_bits_sink    (_out_xbar_auto_anon_in_d_bits_sink),
    .auto_anon_out_d_bits_denied  (_out_xbar_auto_anon_in_d_bits_denied),
    .auto_anon_out_d_bits_data    (_out_xbar_auto_anon_in_d_bits_data),
    .auto_anon_out_d_bits_corrupt (_out_xbar_auto_anon_in_d_bits_corrupt),
    .auto_anon_in_a_ready         (_fixer_auto_anon_in_a_ready),
    .auto_anon_in_d_valid         (_fixer_auto_anon_in_d_valid),
    .auto_anon_in_d_bits_opcode   (_fixer_auto_anon_in_d_bits_opcode),
    .auto_anon_in_d_bits_param    (_fixer_auto_anon_in_d_bits_param),
    .auto_anon_in_d_bits_size     (_fixer_auto_anon_in_d_bits_size),
    .auto_anon_in_d_bits_source   (_fixer_auto_anon_in_d_bits_source),
    .auto_anon_in_d_bits_sink     (_fixer_auto_anon_in_d_bits_sink),
    .auto_anon_in_d_bits_denied   (_fixer_auto_anon_in_d_bits_denied),
    .auto_anon_in_d_bits_data     (_fixer_auto_anon_in_d_bits_data),
    .auto_anon_in_d_bits_corrupt  (_fixer_auto_anon_in_d_bits_corrupt),
    .auto_anon_out_a_valid        (_fixer_auto_anon_out_a_valid),
    .auto_anon_out_a_bits_opcode  (_fixer_auto_anon_out_a_bits_opcode),
    .auto_anon_out_a_bits_param   (_fixer_auto_anon_out_a_bits_param),
    .auto_anon_out_a_bits_size    (_fixer_auto_anon_out_a_bits_size),
    .auto_anon_out_a_bits_source  (_fixer_auto_anon_out_a_bits_source),
    .auto_anon_out_a_bits_address (_fixer_auto_anon_out_a_bits_address),
    .auto_anon_out_a_bits_mask    (_fixer_auto_anon_out_a_bits_mask),
    .auto_anon_out_a_bits_data    (_fixer_auto_anon_out_a_bits_data),
    .auto_anon_out_a_bits_corrupt (_fixer_auto_anon_out_a_bits_corrupt),
    .auto_anon_out_d_ready        (_fixer_auto_anon_out_d_ready)
  );
  TLXbar_cbus_out_i1_o5_a28d64s5k1z4u out_xbar (
    .clock                          (_fixedClockNode_auto_anon_out_0_clock),
    .reset                          (_fixedClockNode_auto_anon_out_0_reset),
    .auto_anon_in_a_valid           (_fixer_auto_anon_out_a_valid),
    .auto_anon_in_a_bits_opcode     (_fixer_auto_anon_out_a_bits_opcode),
    .auto_anon_in_a_bits_param      (_fixer_auto_anon_out_a_bits_param),
    .auto_anon_in_a_bits_size       (_fixer_auto_anon_out_a_bits_size),
    .auto_anon_in_a_bits_source     (_fixer_auto_anon_out_a_bits_source),
    .auto_anon_in_a_bits_address    (_fixer_auto_anon_out_a_bits_address),
    .auto_anon_in_a_bits_mask       (_fixer_auto_anon_out_a_bits_mask),
    .auto_anon_in_a_bits_data       (_fixer_auto_anon_out_a_bits_data),
    .auto_anon_in_a_bits_corrupt    (_fixer_auto_anon_out_a_bits_corrupt),
    .auto_anon_in_d_ready           (_fixer_auto_anon_out_d_ready),
    .auto_anon_out_4_a_ready        (_coupler_to_bootrom_auto_tl_in_a_ready),
    .auto_anon_out_4_d_valid        (_coupler_to_bootrom_auto_tl_in_d_valid),
    .auto_anon_out_4_d_bits_size    (_coupler_to_bootrom_auto_tl_in_d_bits_size),
    .auto_anon_out_4_d_bits_source  (_coupler_to_bootrom_auto_tl_in_d_bits_source),
    .auto_anon_out_4_d_bits_data    (_coupler_to_bootrom_auto_tl_in_d_bits_data),
    .auto_anon_out_3_a_ready        (_coupler_to_debug_auto_tl_in_a_ready),
    .auto_anon_out_3_d_valid        (_coupler_to_debug_auto_tl_in_d_valid),
    .auto_anon_out_3_d_bits_opcode  (_coupler_to_debug_auto_tl_in_d_bits_opcode),
    .auto_anon_out_3_d_bits_size    (_coupler_to_debug_auto_tl_in_d_bits_size),
    .auto_anon_out_3_d_bits_source  (_coupler_to_debug_auto_tl_in_d_bits_source),
    .auto_anon_out_3_d_bits_data    (_coupler_to_debug_auto_tl_in_d_bits_data),
    .auto_anon_out_2_a_ready        (_coupler_to_plic_auto_tl_in_a_ready),
    .auto_anon_out_2_d_valid        (_coupler_to_plic_auto_tl_in_d_valid),
    .auto_anon_out_2_d_bits_opcode  (_coupler_to_plic_auto_tl_in_d_bits_opcode),
    .auto_anon_out_2_d_bits_size    (_coupler_to_plic_auto_tl_in_d_bits_size),
    .auto_anon_out_2_d_bits_source  (_coupler_to_plic_auto_tl_in_d_bits_source),
    .auto_anon_out_2_d_bits_data    (_coupler_to_plic_auto_tl_in_d_bits_data),
    .auto_anon_out_1_a_ready        (_coupler_to_clint_auto_tl_in_a_ready),
    .auto_anon_out_1_d_valid        (_coupler_to_clint_auto_tl_in_d_valid),
    .auto_anon_out_1_d_bits_opcode  (_coupler_to_clint_auto_tl_in_d_bits_opcode),
    .auto_anon_out_1_d_bits_size    (_coupler_to_clint_auto_tl_in_d_bits_size),
    .auto_anon_out_1_d_bits_source  (_coupler_to_clint_auto_tl_in_d_bits_source),
    .auto_anon_out_1_d_bits_data    (_coupler_to_clint_auto_tl_in_d_bits_data),
    .auto_anon_out_0_a_ready        (_wrapped_error_device_auto_buffer_in_a_ready),
    .auto_anon_out_0_d_valid        (_wrapped_error_device_auto_buffer_in_d_valid),
    .auto_anon_out_0_d_bits_opcode  (_wrapped_error_device_auto_buffer_in_d_bits_opcode),
    .auto_anon_out_0_d_bits_param   (_wrapped_error_device_auto_buffer_in_d_bits_param),
    .auto_anon_out_0_d_bits_size    (_wrapped_error_device_auto_buffer_in_d_bits_size),
    .auto_anon_out_0_d_bits_source  (_wrapped_error_device_auto_buffer_in_d_bits_source),
    .auto_anon_out_0_d_bits_sink    (_wrapped_error_device_auto_buffer_in_d_bits_sink),
    .auto_anon_out_0_d_bits_denied  (_wrapped_error_device_auto_buffer_in_d_bits_denied),
    .auto_anon_out_0_d_bits_data    (_wrapped_error_device_auto_buffer_in_d_bits_data),
    .auto_anon_out_0_d_bits_corrupt (_wrapped_error_device_auto_buffer_in_d_bits_corrupt),
    .auto_anon_in_a_ready           (_out_xbar_auto_anon_in_a_ready),
    .auto_anon_in_d_valid           (_out_xbar_auto_anon_in_d_valid),
    .auto_anon_in_d_bits_opcode     (_out_xbar_auto_anon_in_d_bits_opcode),
    .auto_anon_in_d_bits_param      (_out_xbar_auto_anon_in_d_bits_param),
    .auto_anon_in_d_bits_size       (_out_xbar_auto_anon_in_d_bits_size),
    .auto_anon_in_d_bits_source     (_out_xbar_auto_anon_in_d_bits_source),
    .auto_anon_in_d_bits_sink       (_out_xbar_auto_anon_in_d_bits_sink),
    .auto_anon_in_d_bits_denied     (_out_xbar_auto_anon_in_d_bits_denied),
    .auto_anon_in_d_bits_data       (_out_xbar_auto_anon_in_d_bits_data),
    .auto_anon_in_d_bits_corrupt    (_out_xbar_auto_anon_in_d_bits_corrupt),
    .auto_anon_out_4_a_valid        (_out_xbar_auto_anon_out_4_a_valid),
    .auto_anon_out_4_a_bits_opcode  (_out_xbar_auto_anon_out_4_a_bits_opcode),
    .auto_anon_out_4_a_bits_param   (_out_xbar_auto_anon_out_4_a_bits_param),
    .auto_anon_out_4_a_bits_size    (_out_xbar_auto_anon_out_4_a_bits_size),
    .auto_anon_out_4_a_bits_source  (_out_xbar_auto_anon_out_4_a_bits_source),
    .auto_anon_out_4_a_bits_address (_out_xbar_auto_anon_out_4_a_bits_address),
    .auto_anon_out_4_a_bits_mask    (_out_xbar_auto_anon_out_4_a_bits_mask),
    .auto_anon_out_4_a_bits_corrupt (_out_xbar_auto_anon_out_4_a_bits_corrupt),
    .auto_anon_out_4_d_ready        (_out_xbar_auto_anon_out_4_d_ready),
    .auto_anon_out_3_a_valid        (_out_xbar_auto_anon_out_3_a_valid),
    .auto_anon_out_3_a_bits_opcode  (_out_xbar_auto_anon_out_3_a_bits_opcode),
    .auto_anon_out_3_a_bits_param   (_out_xbar_auto_anon_out_3_a_bits_param),
    .auto_anon_out_3_a_bits_size    (_out_xbar_auto_anon_out_3_a_bits_size),
    .auto_anon_out_3_a_bits_source  (_out_xbar_auto_anon_out_3_a_bits_source),
    .auto_anon_out_3_a_bits_address (_out_xbar_auto_anon_out_3_a_bits_address),
    .auto_anon_out_3_a_bits_mask    (_out_xbar_auto_anon_out_3_a_bits_mask),
    .auto_anon_out_3_a_bits_data    (_out_xbar_auto_anon_out_3_a_bits_data),
    .auto_anon_out_3_a_bits_corrupt (_out_xbar_auto_anon_out_3_a_bits_corrupt),
    .auto_anon_out_3_d_ready        (_out_xbar_auto_anon_out_3_d_ready),
    .auto_anon_out_2_a_valid        (_out_xbar_auto_anon_out_2_a_valid),
    .auto_anon_out_2_a_bits_opcode  (_out_xbar_auto_anon_out_2_a_bits_opcode),
    .auto_anon_out_2_a_bits_param   (_out_xbar_auto_anon_out_2_a_bits_param),
    .auto_anon_out_2_a_bits_size    (_out_xbar_auto_anon_out_2_a_bits_size),
    .auto_anon_out_2_a_bits_source  (_out_xbar_auto_anon_out_2_a_bits_source),
    .auto_anon_out_2_a_bits_address (_out_xbar_auto_anon_out_2_a_bits_address),
    .auto_anon_out_2_a_bits_mask    (_out_xbar_auto_anon_out_2_a_bits_mask),
    .auto_anon_out_2_a_bits_data    (_out_xbar_auto_anon_out_2_a_bits_data),
    .auto_anon_out_2_a_bits_corrupt (_out_xbar_auto_anon_out_2_a_bits_corrupt),
    .auto_anon_out_2_d_ready        (_out_xbar_auto_anon_out_2_d_ready),
    .auto_anon_out_1_a_valid        (_out_xbar_auto_anon_out_1_a_valid),
    .auto_anon_out_1_a_bits_opcode  (_out_xbar_auto_anon_out_1_a_bits_opcode),
    .auto_anon_out_1_a_bits_param   (_out_xbar_auto_anon_out_1_a_bits_param),
    .auto_anon_out_1_a_bits_size    (_out_xbar_auto_anon_out_1_a_bits_size),
    .auto_anon_out_1_a_bits_source  (_out_xbar_auto_anon_out_1_a_bits_source),
    .auto_anon_out_1_a_bits_address (_out_xbar_auto_anon_out_1_a_bits_address),
    .auto_anon_out_1_a_bits_mask    (_out_xbar_auto_anon_out_1_a_bits_mask),
    .auto_anon_out_1_a_bits_data    (_out_xbar_auto_anon_out_1_a_bits_data),
    .auto_anon_out_1_a_bits_corrupt (_out_xbar_auto_anon_out_1_a_bits_corrupt),
    .auto_anon_out_1_d_ready        (_out_xbar_auto_anon_out_1_d_ready),
    .auto_anon_out_0_a_valid        (_out_xbar_auto_anon_out_0_a_valid),
    .auto_anon_out_0_a_bits_opcode  (_out_xbar_auto_anon_out_0_a_bits_opcode),
    .auto_anon_out_0_a_bits_param   (_out_xbar_auto_anon_out_0_a_bits_param),
    .auto_anon_out_0_a_bits_size    (_out_xbar_auto_anon_out_0_a_bits_size),
    .auto_anon_out_0_a_bits_source  (_out_xbar_auto_anon_out_0_a_bits_source),
    .auto_anon_out_0_a_bits_address (_out_xbar_auto_anon_out_0_a_bits_address),
    .auto_anon_out_0_a_bits_mask    (_out_xbar_auto_anon_out_0_a_bits_mask),
    .auto_anon_out_0_a_bits_data    (_out_xbar_auto_anon_out_0_a_bits_data),
    .auto_anon_out_0_a_bits_corrupt (_out_xbar_auto_anon_out_0_a_bits_corrupt),
    .auto_anon_out_0_d_ready        (_out_xbar_auto_anon_out_0_d_ready)
  );
  TLBuffer_a28d64s5k1z4u buffer (
    .clock                   (_fixedClockNode_auto_anon_out_0_clock),
    .reset                   (_fixedClockNode_auto_anon_out_0_reset),
    .auto_in_a_valid         (_atomics_auto_out_a_valid),
    .auto_in_a_bits_opcode   (_atomics_auto_out_a_bits_opcode),
    .auto_in_a_bits_param    (_atomics_auto_out_a_bits_param),
    .auto_in_a_bits_size     (_atomics_auto_out_a_bits_size),
    .auto_in_a_bits_source   (_atomics_auto_out_a_bits_source),
    .auto_in_a_bits_address  (_atomics_auto_out_a_bits_address),
    .auto_in_a_bits_mask     (_atomics_auto_out_a_bits_mask),
    .auto_in_a_bits_data     (_atomics_auto_out_a_bits_data),
    .auto_in_a_bits_corrupt  (_atomics_auto_out_a_bits_corrupt),
    .auto_in_d_ready         (_atomics_auto_out_d_ready),
    .auto_out_a_ready        (_fixer_auto_anon_in_a_ready),
    .auto_out_d_valid        (_fixer_auto_anon_in_d_valid),
    .auto_out_d_bits_opcode  (_fixer_auto_anon_in_d_bits_opcode),
    .auto_out_d_bits_param   (_fixer_auto_anon_in_d_bits_param),
    .auto_out_d_bits_size    (_fixer_auto_anon_in_d_bits_size),
    .auto_out_d_bits_source  (_fixer_auto_anon_in_d_bits_source),
    .auto_out_d_bits_sink    (_fixer_auto_anon_in_d_bits_sink),
    .auto_out_d_bits_denied  (_fixer_auto_anon_in_d_bits_denied),
    .auto_out_d_bits_data    (_fixer_auto_anon_in_d_bits_data),
    .auto_out_d_bits_corrupt (_fixer_auto_anon_in_d_bits_corrupt),
    .auto_in_a_ready         (_buffer_auto_in_a_ready),
    .auto_in_d_valid         (_buffer_auto_in_d_valid),
    .auto_in_d_bits_opcode   (_buffer_auto_in_d_bits_opcode),
    .auto_in_d_bits_param    (_buffer_auto_in_d_bits_param),
    .auto_in_d_bits_size     (_buffer_auto_in_d_bits_size),
    .auto_in_d_bits_source   (_buffer_auto_in_d_bits_source),
    .auto_in_d_bits_sink     (_buffer_auto_in_d_bits_sink),
    .auto_in_d_bits_denied   (_buffer_auto_in_d_bits_denied),
    .auto_in_d_bits_data     (_buffer_auto_in_d_bits_data),
    .auto_in_d_bits_corrupt  (_buffer_auto_in_d_bits_corrupt),
    .auto_out_a_valid        (_buffer_auto_out_a_valid),
    .auto_out_a_bits_opcode  (_buffer_auto_out_a_bits_opcode),
    .auto_out_a_bits_param   (_buffer_auto_out_a_bits_param),
    .auto_out_a_bits_size    (_buffer_auto_out_a_bits_size),
    .auto_out_a_bits_source  (_buffer_auto_out_a_bits_source),
    .auto_out_a_bits_address (_buffer_auto_out_a_bits_address),
    .auto_out_a_bits_mask    (_buffer_auto_out_a_bits_mask),
    .auto_out_a_bits_data    (_buffer_auto_out_a_bits_data),
    .auto_out_a_bits_corrupt (_buffer_auto_out_a_bits_corrupt),
    .auto_out_d_ready        (_buffer_auto_out_d_ready)
  );
  TLAtomicAutomata_cbus atomics (
    .clock                   (_fixedClockNode_auto_anon_out_0_clock),
    .reset                   (_fixedClockNode_auto_anon_out_0_reset),
    .auto_in_a_valid         (auto_bus_xing_in_a_valid),
    .auto_in_a_bits_opcode   (auto_bus_xing_in_a_bits_opcode),
    .auto_in_a_bits_param    (auto_bus_xing_in_a_bits_param),
    .auto_in_a_bits_size     (auto_bus_xing_in_a_bits_size),
    .auto_in_a_bits_source   (auto_bus_xing_in_a_bits_source),
    .auto_in_a_bits_address  (auto_bus_xing_in_a_bits_address),
    .auto_in_a_bits_mask     (auto_bus_xing_in_a_bits_mask),
    .auto_in_a_bits_data     (auto_bus_xing_in_a_bits_data),
    .auto_in_a_bits_corrupt  (auto_bus_xing_in_a_bits_corrupt),
    .auto_in_d_ready         (auto_bus_xing_in_d_ready),
    .auto_out_a_ready        (_buffer_auto_in_a_ready),
    .auto_out_d_valid        (_buffer_auto_in_d_valid),
    .auto_out_d_bits_opcode  (_buffer_auto_in_d_bits_opcode),
    .auto_out_d_bits_param   (_buffer_auto_in_d_bits_param),
    .auto_out_d_bits_size    (_buffer_auto_in_d_bits_size),
    .auto_out_d_bits_source  (_buffer_auto_in_d_bits_source),
    .auto_out_d_bits_sink    (_buffer_auto_in_d_bits_sink),
    .auto_out_d_bits_denied  (_buffer_auto_in_d_bits_denied),
    .auto_out_d_bits_data    (_buffer_auto_in_d_bits_data),
    .auto_out_d_bits_corrupt (_buffer_auto_in_d_bits_corrupt),
    .auto_in_a_ready         (auto_bus_xing_in_a_ready),
    .auto_in_d_valid         (auto_bus_xing_in_d_valid),
    .auto_in_d_bits_opcode   (auto_bus_xing_in_d_bits_opcode),
    .auto_in_d_bits_param    (auto_bus_xing_in_d_bits_param),
    .auto_in_d_bits_size     (auto_bus_xing_in_d_bits_size),
    .auto_in_d_bits_source   (auto_bus_xing_in_d_bits_source),
    .auto_in_d_bits_sink     (auto_bus_xing_in_d_bits_sink),
    .auto_in_d_bits_denied   (auto_bus_xing_in_d_bits_denied),
    .auto_in_d_bits_data     (auto_bus_xing_in_d_bits_data),
    .auto_in_d_bits_corrupt  (auto_bus_xing_in_d_bits_corrupt),
    .auto_out_a_valid        (_atomics_auto_out_a_valid),
    .auto_out_a_bits_opcode  (_atomics_auto_out_a_bits_opcode),
    .auto_out_a_bits_param   (_atomics_auto_out_a_bits_param),
    .auto_out_a_bits_size    (_atomics_auto_out_a_bits_size),
    .auto_out_a_bits_source  (_atomics_auto_out_a_bits_source),
    .auto_out_a_bits_address (_atomics_auto_out_a_bits_address),
    .auto_out_a_bits_mask    (_atomics_auto_out_a_bits_mask),
    .auto_out_a_bits_data    (_atomics_auto_out_a_bits_data),
    .auto_out_a_bits_corrupt (_atomics_auto_out_a_bits_corrupt),
    .auto_out_d_ready        (_atomics_auto_out_d_ready)
  );
  ErrorDeviceWrapper wrapped_error_device (
    .clock                         (_fixedClockNode_auto_anon_out_0_clock),
    .reset                         (_fixedClockNode_auto_anon_out_0_reset),
    .auto_buffer_in_a_valid        (_out_xbar_auto_anon_out_0_a_valid),
    .auto_buffer_in_a_bits_opcode  (_out_xbar_auto_anon_out_0_a_bits_opcode),
    .auto_buffer_in_a_bits_param   (_out_xbar_auto_anon_out_0_a_bits_param),
    .auto_buffer_in_a_bits_size    (_out_xbar_auto_anon_out_0_a_bits_size),
    .auto_buffer_in_a_bits_source  (_out_xbar_auto_anon_out_0_a_bits_source),
    .auto_buffer_in_a_bits_address (_out_xbar_auto_anon_out_0_a_bits_address),
    .auto_buffer_in_a_bits_mask    (_out_xbar_auto_anon_out_0_a_bits_mask),
    .auto_buffer_in_a_bits_data    (_out_xbar_auto_anon_out_0_a_bits_data),
    .auto_buffer_in_a_bits_corrupt (_out_xbar_auto_anon_out_0_a_bits_corrupt),
    .auto_buffer_in_d_ready        (_out_xbar_auto_anon_out_0_d_ready),
    .auto_buffer_in_a_ready        (_wrapped_error_device_auto_buffer_in_a_ready),
    .auto_buffer_in_d_valid        (_wrapped_error_device_auto_buffer_in_d_valid),
    .auto_buffer_in_d_bits_opcode  (_wrapped_error_device_auto_buffer_in_d_bits_opcode),
    .auto_buffer_in_d_bits_param   (_wrapped_error_device_auto_buffer_in_d_bits_param),
    .auto_buffer_in_d_bits_size    (_wrapped_error_device_auto_buffer_in_d_bits_size),
    .auto_buffer_in_d_bits_source  (_wrapped_error_device_auto_buffer_in_d_bits_source),
    .auto_buffer_in_d_bits_sink    (_wrapped_error_device_auto_buffer_in_d_bits_sink),
    .auto_buffer_in_d_bits_denied  (_wrapped_error_device_auto_buffer_in_d_bits_denied),
    .auto_buffer_in_d_bits_data    (_wrapped_error_device_auto_buffer_in_d_bits_data),
    .auto_buffer_in_d_bits_corrupt (_wrapped_error_device_auto_buffer_in_d_bits_corrupt)
  );
  TLInterconnectCoupler_cbus_to_clint coupler_to_clint (
    .clock                                   (_fixedClockNode_auto_anon_out_0_clock),
    .reset                                   (_fixedClockNode_auto_anon_out_0_reset),
    .auto_fragmenter_anon_out_a_ready
      (auto_coupler_to_clint_fragmenter_anon_out_a_ready),
    .auto_fragmenter_anon_out_d_valid
      (auto_coupler_to_clint_fragmenter_anon_out_d_valid),
    .auto_fragmenter_anon_out_d_bits_opcode
      (auto_coupler_to_clint_fragmenter_anon_out_d_bits_opcode),
    .auto_fragmenter_anon_out_d_bits_size
      (auto_coupler_to_clint_fragmenter_anon_out_d_bits_size),
    .auto_fragmenter_anon_out_d_bits_source
      (auto_coupler_to_clint_fragmenter_anon_out_d_bits_source),
    .auto_fragmenter_anon_out_d_bits_data
      (auto_coupler_to_clint_fragmenter_anon_out_d_bits_data),
    .auto_tl_in_a_valid                      (_out_xbar_auto_anon_out_1_a_valid),
    .auto_tl_in_a_bits_opcode                (_out_xbar_auto_anon_out_1_a_bits_opcode),
    .auto_tl_in_a_bits_param                 (_out_xbar_auto_anon_out_1_a_bits_param),
    .auto_tl_in_a_bits_size                  (_out_xbar_auto_anon_out_1_a_bits_size),
    .auto_tl_in_a_bits_source                (_out_xbar_auto_anon_out_1_a_bits_source),
    .auto_tl_in_a_bits_address               (_out_xbar_auto_anon_out_1_a_bits_address),
    .auto_tl_in_a_bits_mask                  (_out_xbar_auto_anon_out_1_a_bits_mask),
    .auto_tl_in_a_bits_data                  (_out_xbar_auto_anon_out_1_a_bits_data),
    .auto_tl_in_a_bits_corrupt               (_out_xbar_auto_anon_out_1_a_bits_corrupt),
    .auto_tl_in_d_ready                      (_out_xbar_auto_anon_out_1_d_ready),
    .auto_fragmenter_anon_out_a_valid
      (auto_coupler_to_clint_fragmenter_anon_out_a_valid),
    .auto_fragmenter_anon_out_a_bits_opcode
      (auto_coupler_to_clint_fragmenter_anon_out_a_bits_opcode),
    .auto_fragmenter_anon_out_a_bits_param
      (auto_coupler_to_clint_fragmenter_anon_out_a_bits_param),
    .auto_fragmenter_anon_out_a_bits_size
      (auto_coupler_to_clint_fragmenter_anon_out_a_bits_size),
    .auto_fragmenter_anon_out_a_bits_source
      (auto_coupler_to_clint_fragmenter_anon_out_a_bits_source),
    .auto_fragmenter_anon_out_a_bits_address
      (auto_coupler_to_clint_fragmenter_anon_out_a_bits_address),
    .auto_fragmenter_anon_out_a_bits_mask
      (auto_coupler_to_clint_fragmenter_anon_out_a_bits_mask),
    .auto_fragmenter_anon_out_a_bits_data
      (auto_coupler_to_clint_fragmenter_anon_out_a_bits_data),
    .auto_fragmenter_anon_out_a_bits_corrupt
      (auto_coupler_to_clint_fragmenter_anon_out_a_bits_corrupt),
    .auto_fragmenter_anon_out_d_ready
      (auto_coupler_to_clint_fragmenter_anon_out_d_ready),
    .auto_tl_in_a_ready                      (_coupler_to_clint_auto_tl_in_a_ready),
    .auto_tl_in_d_valid                      (_coupler_to_clint_auto_tl_in_d_valid),
    .auto_tl_in_d_bits_opcode                (_coupler_to_clint_auto_tl_in_d_bits_opcode),
    .auto_tl_in_d_bits_size                  (_coupler_to_clint_auto_tl_in_d_bits_size),
    .auto_tl_in_d_bits_source                (_coupler_to_clint_auto_tl_in_d_bits_source),
    .auto_tl_in_d_bits_data                  (_coupler_to_clint_auto_tl_in_d_bits_data)
  );
  TLInterconnectCoupler_cbus_to_plic coupler_to_plic (
    .clock                                   (_fixedClockNode_auto_anon_out_0_clock),
    .reset                                   (_fixedClockNode_auto_anon_out_0_reset),
    .auto_fragmenter_anon_out_a_ready
      (auto_coupler_to_plic_fragmenter_anon_out_a_ready),
    .auto_fragmenter_anon_out_d_valid
      (auto_coupler_to_plic_fragmenter_anon_out_d_valid),
    .auto_fragmenter_anon_out_d_bits_opcode
      (auto_coupler_to_plic_fragmenter_anon_out_d_bits_opcode),
    .auto_fragmenter_anon_out_d_bits_size
      (auto_coupler_to_plic_fragmenter_anon_out_d_bits_size),
    .auto_fragmenter_anon_out_d_bits_source
      (auto_coupler_to_plic_fragmenter_anon_out_d_bits_source),
    .auto_fragmenter_anon_out_d_bits_data
      (auto_coupler_to_plic_fragmenter_anon_out_d_bits_data),
    .auto_tl_in_a_valid                      (_out_xbar_auto_anon_out_2_a_valid),
    .auto_tl_in_a_bits_opcode                (_out_xbar_auto_anon_out_2_a_bits_opcode),
    .auto_tl_in_a_bits_param                 (_out_xbar_auto_anon_out_2_a_bits_param),
    .auto_tl_in_a_bits_size                  (_out_xbar_auto_anon_out_2_a_bits_size),
    .auto_tl_in_a_bits_source                (_out_xbar_auto_anon_out_2_a_bits_source),
    .auto_tl_in_a_bits_address               (_out_xbar_auto_anon_out_2_a_bits_address),
    .auto_tl_in_a_bits_mask                  (_out_xbar_auto_anon_out_2_a_bits_mask),
    .auto_tl_in_a_bits_data                  (_out_xbar_auto_anon_out_2_a_bits_data),
    .auto_tl_in_a_bits_corrupt               (_out_xbar_auto_anon_out_2_a_bits_corrupt),
    .auto_tl_in_d_ready                      (_out_xbar_auto_anon_out_2_d_ready),
    .auto_fragmenter_anon_out_a_valid
      (auto_coupler_to_plic_fragmenter_anon_out_a_valid),
    .auto_fragmenter_anon_out_a_bits_opcode
      (auto_coupler_to_plic_fragmenter_anon_out_a_bits_opcode),
    .auto_fragmenter_anon_out_a_bits_param
      (auto_coupler_to_plic_fragmenter_anon_out_a_bits_param),
    .auto_fragmenter_anon_out_a_bits_size
      (auto_coupler_to_plic_fragmenter_anon_out_a_bits_size),
    .auto_fragmenter_anon_out_a_bits_source
      (auto_coupler_to_plic_fragmenter_anon_out_a_bits_source),
    .auto_fragmenter_anon_out_a_bits_address
      (auto_coupler_to_plic_fragmenter_anon_out_a_bits_address),
    .auto_fragmenter_anon_out_a_bits_mask
      (auto_coupler_to_plic_fragmenter_anon_out_a_bits_mask),
    .auto_fragmenter_anon_out_a_bits_data
      (auto_coupler_to_plic_fragmenter_anon_out_a_bits_data),
    .auto_fragmenter_anon_out_a_bits_corrupt
      (auto_coupler_to_plic_fragmenter_anon_out_a_bits_corrupt),
    .auto_fragmenter_anon_out_d_ready
      (auto_coupler_to_plic_fragmenter_anon_out_d_ready),
    .auto_tl_in_a_ready                      (_coupler_to_plic_auto_tl_in_a_ready),
    .auto_tl_in_d_valid                      (_coupler_to_plic_auto_tl_in_d_valid),
    .auto_tl_in_d_bits_opcode                (_coupler_to_plic_auto_tl_in_d_bits_opcode),
    .auto_tl_in_d_bits_size                  (_coupler_to_plic_auto_tl_in_d_bits_size),
    .auto_tl_in_d_bits_source                (_coupler_to_plic_auto_tl_in_d_bits_source),
    .auto_tl_in_d_bits_data                  (_coupler_to_plic_auto_tl_in_d_bits_data)
  );
  TLInterconnectCoupler_cbus_to_debug coupler_to_debug (
    .clock                                   (_fixedClockNode_auto_anon_out_0_clock),
    .reset                                   (_fixedClockNode_auto_anon_out_0_reset),
    .auto_fragmenter_anon_out_a_ready
      (auto_coupler_to_debug_fragmenter_anon_out_a_ready),
    .auto_fragmenter_anon_out_d_valid
      (auto_coupler_to_debug_fragmenter_anon_out_d_valid),
    .auto_fragmenter_anon_out_d_bits_opcode
      (auto_coupler_to_debug_fragmenter_anon_out_d_bits_opcode),
    .auto_fragmenter_anon_out_d_bits_size
      (auto_coupler_to_debug_fragmenter_anon_out_d_bits_size),
    .auto_fragmenter_anon_out_d_bits_source
      (auto_coupler_to_debug_fragmenter_anon_out_d_bits_source),
    .auto_fragmenter_anon_out_d_bits_data
      (auto_coupler_to_debug_fragmenter_anon_out_d_bits_data),
    .auto_tl_in_a_valid                      (_out_xbar_auto_anon_out_3_a_valid),
    .auto_tl_in_a_bits_opcode                (_out_xbar_auto_anon_out_3_a_bits_opcode),
    .auto_tl_in_a_bits_param                 (_out_xbar_auto_anon_out_3_a_bits_param),
    .auto_tl_in_a_bits_size                  (_out_xbar_auto_anon_out_3_a_bits_size),
    .auto_tl_in_a_bits_source                (_out_xbar_auto_anon_out_3_a_bits_source),
    .auto_tl_in_a_bits_address               (_out_xbar_auto_anon_out_3_a_bits_address),
    .auto_tl_in_a_bits_mask                  (_out_xbar_auto_anon_out_3_a_bits_mask),
    .auto_tl_in_a_bits_data                  (_out_xbar_auto_anon_out_3_a_bits_data),
    .auto_tl_in_a_bits_corrupt               (_out_xbar_auto_anon_out_3_a_bits_corrupt),
    .auto_tl_in_d_ready                      (_out_xbar_auto_anon_out_3_d_ready),
    .auto_fragmenter_anon_out_a_valid
      (auto_coupler_to_debug_fragmenter_anon_out_a_valid),
    .auto_fragmenter_anon_out_a_bits_opcode
      (auto_coupler_to_debug_fragmenter_anon_out_a_bits_opcode),
    .auto_fragmenter_anon_out_a_bits_param
      (auto_coupler_to_debug_fragmenter_anon_out_a_bits_param),
    .auto_fragmenter_anon_out_a_bits_size
      (auto_coupler_to_debug_fragmenter_anon_out_a_bits_size),
    .auto_fragmenter_anon_out_a_bits_source
      (auto_coupler_to_debug_fragmenter_anon_out_a_bits_source),
    .auto_fragmenter_anon_out_a_bits_address
      (auto_coupler_to_debug_fragmenter_anon_out_a_bits_address),
    .auto_fragmenter_anon_out_a_bits_mask
      (auto_coupler_to_debug_fragmenter_anon_out_a_bits_mask),
    .auto_fragmenter_anon_out_a_bits_data
      (auto_coupler_to_debug_fragmenter_anon_out_a_bits_data),
    .auto_fragmenter_anon_out_a_bits_corrupt
      (auto_coupler_to_debug_fragmenter_anon_out_a_bits_corrupt),
    .auto_fragmenter_anon_out_d_ready
      (auto_coupler_to_debug_fragmenter_anon_out_d_ready),
    .auto_tl_in_a_ready                      (_coupler_to_debug_auto_tl_in_a_ready),
    .auto_tl_in_d_valid                      (_coupler_to_debug_auto_tl_in_d_valid),
    .auto_tl_in_d_bits_opcode                (_coupler_to_debug_auto_tl_in_d_bits_opcode),
    .auto_tl_in_d_bits_size                  (_coupler_to_debug_auto_tl_in_d_bits_size),
    .auto_tl_in_d_bits_source                (_coupler_to_debug_auto_tl_in_d_bits_source),
    .auto_tl_in_d_bits_data                  (_coupler_to_debug_auto_tl_in_d_bits_data)
  );
  TLInterconnectCoupler_cbus_to_bootrom coupler_to_bootrom (
    .clock                                   (_fixedClockNode_auto_anon_out_0_clock),
    .reset                                   (_fixedClockNode_auto_anon_out_0_reset),
    .auto_fragmenter_anon_out_a_ready
      (auto_coupler_to_bootrom_fragmenter_anon_out_a_ready),
    .auto_fragmenter_anon_out_d_valid
      (auto_coupler_to_bootrom_fragmenter_anon_out_d_valid),
    .auto_fragmenter_anon_out_d_bits_size
      (auto_coupler_to_bootrom_fragmenter_anon_out_d_bits_size),
    .auto_fragmenter_anon_out_d_bits_source
      (auto_coupler_to_bootrom_fragmenter_anon_out_d_bits_source),
    .auto_fragmenter_anon_out_d_bits_data
      (auto_coupler_to_bootrom_fragmenter_anon_out_d_bits_data),
    .auto_tl_in_a_valid                      (_out_xbar_auto_anon_out_4_a_valid),
    .auto_tl_in_a_bits_opcode                (_out_xbar_auto_anon_out_4_a_bits_opcode),
    .auto_tl_in_a_bits_param                 (_out_xbar_auto_anon_out_4_a_bits_param),
    .auto_tl_in_a_bits_size                  (_out_xbar_auto_anon_out_4_a_bits_size),
    .auto_tl_in_a_bits_source                (_out_xbar_auto_anon_out_4_a_bits_source),
    .auto_tl_in_a_bits_address               (_out_xbar_auto_anon_out_4_a_bits_address),
    .auto_tl_in_a_bits_mask                  (_out_xbar_auto_anon_out_4_a_bits_mask),
    .auto_tl_in_a_bits_corrupt               (_out_xbar_auto_anon_out_4_a_bits_corrupt),
    .auto_tl_in_d_ready                      (_out_xbar_auto_anon_out_4_d_ready),
    .auto_fragmenter_anon_out_a_valid
      (auto_coupler_to_bootrom_fragmenter_anon_out_a_valid),
    .auto_fragmenter_anon_out_a_bits_opcode
      (auto_coupler_to_bootrom_fragmenter_anon_out_a_bits_opcode),
    .auto_fragmenter_anon_out_a_bits_param
      (auto_coupler_to_bootrom_fragmenter_anon_out_a_bits_param),
    .auto_fragmenter_anon_out_a_bits_size
      (auto_coupler_to_bootrom_fragmenter_anon_out_a_bits_size),
    .auto_fragmenter_anon_out_a_bits_source
      (auto_coupler_to_bootrom_fragmenter_anon_out_a_bits_source),
    .auto_fragmenter_anon_out_a_bits_address
      (auto_coupler_to_bootrom_fragmenter_anon_out_a_bits_address),
    .auto_fragmenter_anon_out_a_bits_mask
      (auto_coupler_to_bootrom_fragmenter_anon_out_a_bits_mask),
    .auto_fragmenter_anon_out_a_bits_corrupt
      (auto_coupler_to_bootrom_fragmenter_anon_out_a_bits_corrupt),
    .auto_fragmenter_anon_out_d_ready
      (auto_coupler_to_bootrom_fragmenter_anon_out_d_ready),
    .auto_tl_in_a_ready                      (_coupler_to_bootrom_auto_tl_in_a_ready),
    .auto_tl_in_d_valid                      (_coupler_to_bootrom_auto_tl_in_d_valid),
    .auto_tl_in_d_bits_size                  (_coupler_to_bootrom_auto_tl_in_d_bits_size),
    .auto_tl_in_d_bits_source
      (_coupler_to_bootrom_auto_tl_in_d_bits_source),
    .auto_tl_in_d_bits_data                  (_coupler_to_bootrom_auto_tl_in_d_bits_data)
  );
endmodule

module TLMonitor_18(
  input        clock,
               reset,
               io_in_a_ready,
               io_in_a_valid,
  input [2:0]  io_in_a_bits_opcode,
               io_in_a_bits_param,
               io_in_a_bits_size,
  input [6:0]  io_in_a_bits_source,
  input [31:0] io_in_a_bits_address,
  input [7:0]  io_in_a_bits_mask,
  input        io_in_d_ready,
               io_in_d_valid,
  input [2:0]  io_in_d_bits_opcode,
               io_in_d_bits_size,
  input [6:0]  io_in_d_bits_source,
  input        io_in_d_bits_denied,
               io_in_d_bits_corrupt
);

  wire [31:0]  _plusarg_reader_1_out;
  wire [31:0]  _plusarg_reader_out;
  wire [12:0]  _GEN = 13'h3F << io_in_a_bits_size;
  wire         _GEN_0 = io_in_a_ready & io_in_a_valid;
  reg  [2:0]   a_first_counter;
  reg  [2:0]   opcode;
  reg  [2:0]   param;
  reg  [2:0]   size;
  reg  [6:0]   source;
  reg  [31:0]  address;
  reg  [2:0]   d_first_counter;
  reg  [2:0]   opcode_1;
  reg  [1:0]   param_1;
  reg  [2:0]   size_1;
  reg  [6:0]   source_1;
  reg          sink;
  reg          denied;
  reg  [127:0] inflight;
  reg  [511:0] inflight_opcodes;
  reg  [511:0] inflight_sizes;
  reg  [2:0]   a_first_counter_1;
  wire         a_first_1 = a_first_counter_1 == 3'h0;
  reg  [2:0]   d_first_counter_1;
  wire         d_first_1 = d_first_counter_1 == 3'h0;
  wire [127:0] _GEN_1 = {121'h0, io_in_a_bits_source};
  wire [127:0] _GEN_2 = 128'h1 << _GEN_1;
  wire         _GEN_3 = _GEN_0 & a_first_1;
  wire         d_release_ack = io_in_d_bits_opcode == 3'h6;
  wire [127:0] _GEN_4 = {121'h0, io_in_d_bits_source};
  wire [127:0] _GEN_5 = 128'h1 << _GEN_4;
  reg  [31:0]  watchdog;
  reg  [127:0] inflight_1;
  reg  [511:0] inflight_sizes_1;
  reg  [2:0]   d_first_counter_2;
  wire         d_first_2 = d_first_counter_2 == 3'h0;
  reg  [31:0]  watchdog_1;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      automatic logic [7:0][2:0] _GEN_6 =
        '{3'h4, 3'h5, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic [7:0][2:0] _GEN_7 =
        '{3'h4, 3'h4, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic [5:0]      _GEN_8 = io_in_a_bits_address[5:0] & ~(_GEN[5:0]);
      automatic logic            _GEN_9 = io_in_a_bits_size > 3'h2;
      automatic logic            mask_size = io_in_a_bits_size[1:0] == 2'h2;
      automatic logic            mask_acc =
        _GEN_9 | mask_size & ~(io_in_a_bits_address[2]);
      automatic logic            mask_acc_1 =
        _GEN_9 | mask_size & io_in_a_bits_address[2];
      automatic logic            mask_size_1 = io_in_a_bits_size[1:0] == 2'h1;
      automatic logic            mask_eq_2 =
        ~(io_in_a_bits_address[2]) & ~(io_in_a_bits_address[1]);
      automatic logic            mask_acc_2 = mask_acc | mask_size_1 & mask_eq_2;
      automatic logic            mask_eq_3 =
        ~(io_in_a_bits_address[2]) & io_in_a_bits_address[1];
      automatic logic            mask_acc_3 = mask_acc | mask_size_1 & mask_eq_3;
      automatic logic            mask_eq_4 =
        io_in_a_bits_address[2] & ~(io_in_a_bits_address[1]);
      automatic logic            mask_acc_4 = mask_acc_1 | mask_size_1 & mask_eq_4;
      automatic logic            mask_eq_5 =
        io_in_a_bits_address[2] & io_in_a_bits_address[1];
      automatic logic            mask_acc_5 = mask_acc_1 | mask_size_1 & mask_eq_5;
      automatic logic [7:0]      mask =
        {mask_acc_5 | mask_eq_5 & io_in_a_bits_address[0],
         mask_acc_5 | mask_eq_5 & ~(io_in_a_bits_address[0]),
         mask_acc_4 | mask_eq_4 & io_in_a_bits_address[0],
         mask_acc_4 | mask_eq_4 & ~(io_in_a_bits_address[0]),
         mask_acc_3 | mask_eq_3 & io_in_a_bits_address[0],
         mask_acc_3 | mask_eq_3 & ~(io_in_a_bits_address[0]),
         mask_acc_2 | mask_eq_2 & io_in_a_bits_address[0],
         mask_acc_2 | mask_eq_2 & ~(io_in_a_bits_address[0])};
      automatic logic            _GEN_10 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_11 = io_in_a_bits_param > 3'h2;
      automatic logic            _GEN_12 = io_in_a_bits_mask != 8'hFF;
      automatic logic            _GEN_13 =
        io_in_a_valid & (&io_in_a_bits_opcode) & ~reset;
      automatic logic            _GEN_14 =
        io_in_a_bits_size != 3'h7 & io_in_a_bits_address[31:28] == 4'h8;
      automatic logic            _GEN_15 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_16 = io_in_a_bits_mask != mask;
      automatic logic            _GEN_17 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_18 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_19 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_20 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h3 & ~reset;
      automatic logic            _GEN_21 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h5 & ~reset;
      automatic logic            _GEN_22 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_23 = io_in_d_bits_size < 3'h3;
      automatic logic            _GEN_24 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_25 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h5 & ~reset;
      automatic logic            _GEN_26 = ~io_in_d_bits_denied | io_in_d_bits_corrupt;
      automatic logic            _GEN_27 = io_in_a_valid & (|a_first_counter) & ~reset;
      automatic logic            _GEN_28 = io_in_d_valid & (|d_first_counter) & ~reset;
      automatic logic [511:0]    _GEN_29 = {503'h0, io_in_d_bits_source, 2'h0};
      automatic logic [511:0]    _GEN_30 = inflight_opcodes >> _GEN_29;
      automatic logic            _GEN_31 = io_in_a_valid & a_first_1;
      automatic logic [127:0]    a_set_wo_ready = _GEN_31 ? _GEN_2 : 128'h0;
      automatic logic            _GEN_32 = io_in_d_valid & d_first_1;
      automatic logic            _GEN_33 = _GEN_32 & ~d_release_ack;
      automatic logic            _GEN_34 = io_in_a_bits_source == io_in_d_bits_source;
      automatic logic            same_cycle_resp = _GEN_31 & _GEN_34;
      automatic logic            _GEN_35 = _GEN_33 & same_cycle_resp & ~reset;
      automatic logic            _GEN_36 = _GEN_33 & ~same_cycle_resp & ~reset;
      automatic logic            _GEN_37 =
        io_in_d_valid & d_first_2 & d_release_ack & ~reset;
      automatic logic [127:0]    _GEN_38 = inflight >> _GEN_1;
      automatic logic [127:0]    _GEN_39 = inflight >> _GEN_4;
      automatic logic [511:0]    _GEN_40 = inflight_sizes >> _GEN_29;
      automatic logic [127:0]    _GEN_41 = inflight_1 >> _GEN_4;
      automatic logic [511:0]    _GEN_42 = inflight_sizes_1 >> _GEN_29;
      if (_GEN_10) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_10 & ~_GEN_9) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_10 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_10 & _GEN_11) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock carries invalid grow param (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_10 & _GEN_12) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_13) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_13 & ~_GEN_9) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_13 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_13 & _GEN_11) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm carries invalid grow param (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_13 & ~(|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_13 & _GEN_12) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & ~_GEN_14) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get address not aligned to size (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get carries invalid param (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & _GEN_16) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get contains invalid mask (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & ~_GEN_14) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull address not aligned to size (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull carries invalid param (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & _GEN_16) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull contains invalid mask (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & ~_GEN_14) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial address not aligned to size (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial carries invalid param (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & (|(io_in_a_bits_mask & ~mask))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial contains invalid mask (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & io_in_a_bits_param > 3'h4) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & _GEN_16) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical address not aligned to size (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & io_in_a_bits_param[2]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical carries invalid opcode param (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & _GEN_16) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical contains invalid mask (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_21) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_21 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint address not aligned to size (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_21 & (|(io_in_a_bits_param[2:1]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint carries invalid opcode param (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_21 & _GEN_16) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint contains invalid mask (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & ~reset & (&io_in_d_bits_opcode)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel has invalid opcode (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & _GEN_23) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck is corrupt (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & io_in_d_bits_denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck is denied (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_24) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid sink ID (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_24 & _GEN_23) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant smaller than a beat (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_24 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant is corrupt (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid sink ID (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25 & _GEN_23) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData smaller than a beat (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25 & ~_GEN_26) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData is denied but not corrupt (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & io_in_d_bits_opcode == 3'h0 & ~reset
          & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck is corrupt (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & io_in_d_bits_opcode == 3'h1 & ~reset & ~_GEN_26) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData is denied but not corrupt (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & io_in_d_bits_opcode == 3'h2 & ~reset
          & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck is corrupt (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & io_in_a_bits_opcode != opcode) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel opcode changed within multibeat operation (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & io_in_a_bits_param != param) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel param changed within multibeat operation (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & io_in_a_bits_size != size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel size changed within multibeat operation (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & io_in_a_bits_source != source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel source changed within multibeat operation (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & io_in_a_bits_address != address) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel address changed with multibeat operation (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & io_in_d_bits_opcode != opcode_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel opcode changed within multibeat operation (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & (|param_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel param changed within multibeat operation (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & io_in_d_bits_size != size_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel size changed within multibeat operation (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & io_in_d_bits_source != source_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel source changed within multibeat operation (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & sink) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel sink changed with multibeat operation (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & io_in_d_bits_denied != denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel denied changed with multibeat operation (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_3 & ~reset & _GEN_38[0]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel re-used a source ID (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_33 & ~reset & ~(_GEN_39[0] | same_cycle_resp)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_35
          & ~(io_in_d_bits_opcode == _GEN_7[io_in_a_bits_opcode]
              | io_in_d_bits_opcode == _GEN_6[io_in_a_bits_opcode])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_35 & io_in_a_bits_size != io_in_d_bits_size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_36
          & ~(io_in_d_bits_opcode == _GEN_7[_GEN_30[3:1]]
              | io_in_d_bits_opcode == _GEN_6[_GEN_30[3:1]])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_36 & io_in_d_bits_size != _GEN_40[3:1]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & a_first_1 & io_in_a_valid & _GEN_34 & ~d_release_ack & ~reset
          & ~(~io_in_d_ready | io_in_a_ready)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ready check\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(a_set_wo_ready != (_GEN_33 ? _GEN_5 : 128'h0)
              | a_set_wo_ready == 128'h0)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' and 'D' concurrent, despite minlatency > 0 (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight == 128'h0 | _plusarg_reader_out == 32'h0
              | watchdog < _plusarg_reader_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & ~(_GEN_41[0])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & io_in_d_bits_size != _GEN_42[3:1]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight_1 == 128'h0 | _plusarg_reader_1_out == 32'h0
              | watchdog_1 < _plusarg_reader_1_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/subsystem/MemoryBus.scala:52:50)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    automatic logic _GEN_43;
    automatic logic _GEN_44;
    _GEN_43 = io_in_d_ready & io_in_d_valid;
    _GEN_44 = _GEN_43 & ~(|d_first_counter);
    if (reset) begin
      a_first_counter <= 3'h0;
      d_first_counter <= 3'h0;
      inflight <= 128'h0;
      inflight_opcodes <= 512'h0;
      inflight_sizes <= 512'h0;
      a_first_counter_1 <= 3'h0;
      d_first_counter_1 <= 3'h0;
      watchdog <= 32'h0;
      inflight_1 <= 128'h0;
      inflight_sizes_1 <= 512'h0;
      d_first_counter_2 <= 3'h0;
      watchdog_1 <= 32'h0;
    end
    else begin
      automatic logic [1026:0] _GEN_45 = {1018'h0, io_in_a_bits_source, 2'h0};
      automatic logic          _GEN_46;
      automatic logic [1038:0] _GEN_47 = 1039'hF << {1030'h0, io_in_d_bits_source, 2'h0};
      automatic logic [511:0]  d_sizes_clr;
      automatic logic          _GEN_48;
      automatic logic [1026:0] _GEN_49 =
        {1023'h0, _GEN_3 ? {io_in_a_bits_opcode, 1'h1} : 4'h0} << _GEN_45;
      automatic logic [1026:0] _GEN_50 =
        {1023'h0, _GEN_3 ? {io_in_a_bits_size, 1'h1} : 4'h0} << _GEN_45;
      _GEN_46 = _GEN_43 & d_first_1 & ~d_release_ack;
      d_sizes_clr = _GEN_46 ? _GEN_47[511:0] : 512'h0;
      _GEN_48 = _GEN_43 & d_first_2 & d_release_ack;
      if (_GEN_0) begin
        if (|a_first_counter)
          a_first_counter <= a_first_counter - 3'h1;
        else if (io_in_a_bits_opcode[2])
          a_first_counter <= 3'h0;
        else
          a_first_counter <= ~(_GEN[5:3]);
        if (a_first_1) begin
          if (io_in_a_bits_opcode[2])
            a_first_counter_1 <= 3'h0;
          else
            a_first_counter_1 <= ~(_GEN[5:3]);
        end
        else
          a_first_counter_1 <= a_first_counter_1 - 3'h1;
      end
      if (_GEN_43) begin
        automatic logic [12:0] _GEN_51 = 13'h3F << io_in_d_bits_size;
        if (|d_first_counter)
          d_first_counter <= d_first_counter - 3'h1;
        else if (io_in_d_bits_opcode[0])
          d_first_counter <= ~(_GEN_51[5:3]);
        else
          d_first_counter <= 3'h0;
        if (d_first_1) begin
          if (io_in_d_bits_opcode[0])
            d_first_counter_1 <= ~(_GEN_51[5:3]);
          else
            d_first_counter_1 <= 3'h0;
        end
        else
          d_first_counter_1 <= d_first_counter_1 - 3'h1;
        if (d_first_2) begin
          if (io_in_d_bits_opcode[0])
            d_first_counter_2 <= ~(_GEN_51[5:3]);
          else
            d_first_counter_2 <= 3'h0;
        end
        else
          d_first_counter_2 <= d_first_counter_2 - 3'h1;
        watchdog_1 <= 32'h0;
      end
      else
        watchdog_1 <= watchdog_1 + 32'h1;
      inflight <= (inflight | (_GEN_3 ? _GEN_2 : 128'h0)) & ~(_GEN_46 ? _GEN_5 : 128'h0);
      inflight_opcodes <=
        (inflight_opcodes | (_GEN_3 ? _GEN_49[511:0] : 512'h0)) & ~d_sizes_clr;
      inflight_sizes <=
        (inflight_sizes | (_GEN_3 ? _GEN_50[511:0] : 512'h0)) & ~d_sizes_clr;
      if (_GEN_0 | _GEN_43)
        watchdog <= 32'h0;
      else
        watchdog <= watchdog + 32'h1;
      inflight_1 <= inflight_1 & ~(_GEN_48 ? _GEN_5 : 128'h0);
      inflight_sizes_1 <= inflight_sizes_1 & ~(_GEN_48 ? _GEN_47[511:0] : 512'h0);
    end
    if (_GEN_0 & ~(|a_first_counter)) begin
      opcode <= io_in_a_bits_opcode;
      param <= io_in_a_bits_param;
      size <= io_in_a_bits_size;
      source <= io_in_a_bits_source;
      address <= io_in_a_bits_address;
    end
    if (_GEN_44) begin
      opcode_1 <= io_in_d_bits_opcode;
      param_1 <= 2'h0;
      size_1 <= io_in_d_bits_size;
      source_1 <= io_in_d_bits_source;
      denied <= io_in_d_bits_denied;
    end
    sink <= ~_GEN_44 & sink;
  end // always @(posedge)
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader (
    .out (_plusarg_reader_out)
  );
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader_1 (
    .out (_plusarg_reader_1_out)
  );
endmodule

module ProbePicker(
  input         clock,
                reset,
                auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
                auto_in_a_bits_param,
                auto_in_a_bits_size,
  input  [6:0]  auto_in_a_bits_source,
  input  [31:0] auto_in_a_bits_address,
  input         auto_in_a_bits_user_amba_prot_bufferable,
                auto_in_a_bits_user_amba_prot_modifiable,
                auto_in_a_bits_user_amba_prot_readalloc,
                auto_in_a_bits_user_amba_prot_writealloc,
                auto_in_a_bits_user_amba_prot_privileged,
                auto_in_a_bits_user_amba_prot_secure,
                auto_in_a_bits_user_amba_prot_fetch,
  input  [7:0]  auto_in_a_bits_mask,
  input  [63:0] auto_in_a_bits_data,
  input         auto_in_d_ready,
                auto_out_a_ready,
                auto_out_d_valid,
  input  [2:0]  auto_out_d_bits_opcode,
                auto_out_d_bits_size,
  input  [6:0]  auto_out_d_bits_source,
  input         auto_out_d_bits_denied,
  input  [63:0] auto_out_d_bits_data,
  input         auto_out_d_bits_corrupt,
  output        auto_in_a_ready,
                auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
                auto_in_d_bits_size,
  output [6:0]  auto_in_d_bits_source,
  output        auto_in_d_bits_denied,
  output [63:0] auto_in_d_bits_data,
  output        auto_in_d_bits_corrupt,
                auto_out_a_valid,
  output [2:0]  auto_out_a_bits_opcode,
                auto_out_a_bits_param,
                auto_out_a_bits_size,
  output [6:0]  auto_out_a_bits_source,
  output [31:0] auto_out_a_bits_address,
  output        auto_out_a_bits_user_amba_prot_bufferable,
                auto_out_a_bits_user_amba_prot_modifiable,
                auto_out_a_bits_user_amba_prot_readalloc,
                auto_out_a_bits_user_amba_prot_writealloc,
                auto_out_a_bits_user_amba_prot_privileged,
                auto_out_a_bits_user_amba_prot_secure,
                auto_out_a_bits_user_amba_prot_fetch,
  output [7:0]  auto_out_a_bits_mask,
  output [63:0] auto_out_a_bits_data,
  output        auto_out_d_ready
);

  TLMonitor_18 monitor (
    .clock                (clock),
    .reset                (reset),
    .io_in_a_ready        (auto_out_a_ready),
    .io_in_a_valid        (auto_in_a_valid),
    .io_in_a_bits_opcode  (auto_in_a_bits_opcode),
    .io_in_a_bits_param   (auto_in_a_bits_param),
    .io_in_a_bits_size    (auto_in_a_bits_size),
    .io_in_a_bits_source  (auto_in_a_bits_source),
    .io_in_a_bits_address (auto_in_a_bits_address),
    .io_in_a_bits_mask    (auto_in_a_bits_mask),
    .io_in_d_ready        (auto_in_d_ready),
    .io_in_d_valid        (auto_out_d_valid),
    .io_in_d_bits_opcode  (auto_out_d_bits_opcode),
    .io_in_d_bits_size    (auto_out_d_bits_size),
    .io_in_d_bits_source  (auto_out_d_bits_source),
    .io_in_d_bits_denied  (auto_out_d_bits_denied),
    .io_in_d_bits_corrupt (auto_out_d_bits_corrupt)
  );
  assign auto_in_a_ready = auto_out_a_ready;
  assign auto_in_d_valid = auto_out_d_valid;
  assign auto_in_d_bits_opcode = auto_out_d_bits_opcode;
  assign auto_in_d_bits_size = auto_out_d_bits_size;
  assign auto_in_d_bits_source = auto_out_d_bits_source;
  assign auto_in_d_bits_denied = auto_out_d_bits_denied;
  assign auto_in_d_bits_data = auto_out_d_bits_data;
  assign auto_in_d_bits_corrupt = auto_out_d_bits_corrupt;
  assign auto_out_a_valid = auto_in_a_valid;
  assign auto_out_a_bits_opcode = auto_in_a_bits_opcode;
  assign auto_out_a_bits_param = auto_in_a_bits_param;
  assign auto_out_a_bits_size = auto_in_a_bits_size;
  assign auto_out_a_bits_source = auto_in_a_bits_source;
  assign auto_out_a_bits_address = auto_in_a_bits_address;
  assign auto_out_a_bits_user_amba_prot_bufferable =
    auto_in_a_bits_user_amba_prot_bufferable;
  assign auto_out_a_bits_user_amba_prot_modifiable =
    auto_in_a_bits_user_amba_prot_modifiable;
  assign auto_out_a_bits_user_amba_prot_readalloc =
    auto_in_a_bits_user_amba_prot_readalloc;
  assign auto_out_a_bits_user_amba_prot_writealloc =
    auto_in_a_bits_user_amba_prot_writealloc;
  assign auto_out_a_bits_user_amba_prot_privileged =
    auto_in_a_bits_user_amba_prot_privileged;
  assign auto_out_a_bits_user_amba_prot_secure = auto_in_a_bits_user_amba_prot_secure;
  assign auto_out_a_bits_user_amba_prot_fetch = auto_in_a_bits_user_amba_prot_fetch;
  assign auto_out_a_bits_mask = auto_in_a_bits_mask;
  assign auto_out_a_bits_data = auto_in_a_bits_data;
  assign auto_out_d_ready = auto_in_d_ready;
endmodule

module Queue8_BundleMap_4(
  input        clock,
               reset,
               io_enq_valid,
  input  [3:0] io_enq_bits_tl_state_size,
  input  [6:0] io_enq_bits_tl_state_source,
  input  [2:0] io_enq_bits_extra_id,
  input        io_deq_ready,
  output       io_enq_ready,
               io_deq_valid,
  output [3:0] io_deq_bits_tl_state_size,
  output [6:0] io_deq_bits_tl_state_source,
  output [2:0] io_deq_bits_extra_id
);

  wire [13:0] _ram_ext_R0_data;
  reg  [2:0]  enq_ptr_value;
  reg  [2:0]  deq_ptr_value;
  reg         maybe_full;
  wire        ptr_match = enq_ptr_value == deq_ptr_value;
  wire        empty = ptr_match & ~maybe_full;
  wire        full = ptr_match & maybe_full;
  wire        do_enq = ~full & io_enq_valid;
  always @(posedge clock) begin
    if (reset) begin
      enq_ptr_value <= 3'h0;
      deq_ptr_value <= 3'h0;
      maybe_full <= 1'h0;
    end
    else begin
      automatic logic do_deq = io_deq_ready & ~empty;
      if (do_enq)
        enq_ptr_value <= enq_ptr_value + 3'h1;
      if (do_deq)
        deq_ptr_value <= deq_ptr_value + 3'h1;
      if (do_enq != do_deq)
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_combMem_3 ram_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data
      ({io_enq_bits_extra_id, io_enq_bits_tl_state_source, io_enq_bits_tl_state_size}),
    .R0_data (_ram_ext_R0_data)
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
  assign io_deq_bits_tl_state_size = _ram_ext_R0_data[3:0];
  assign io_deq_bits_tl_state_source = _ram_ext_R0_data[10:4];
  assign io_deq_bits_extra_id = _ram_ext_R0_data[13:11];
endmodule

module AXI4UserYanker_2(
  input         clock,
                reset,
                auto_in_aw_valid,
  input  [3:0]  auto_in_aw_bits_id,
  input  [31:0] auto_in_aw_bits_addr,
  input  [7:0]  auto_in_aw_bits_len,
  input  [2:0]  auto_in_aw_bits_size,
  input  [1:0]  auto_in_aw_bits_burst,
  input         auto_in_aw_bits_lock,
  input  [3:0]  auto_in_aw_bits_cache,
  input  [2:0]  auto_in_aw_bits_prot,
  input  [3:0]  auto_in_aw_bits_qos,
                auto_in_aw_bits_echo_tl_state_size,
  input  [6:0]  auto_in_aw_bits_echo_tl_state_source,
  input  [2:0]  auto_in_aw_bits_echo_extra_id,
  input         auto_in_w_valid,
  input  [63:0] auto_in_w_bits_data,
  input  [7:0]  auto_in_w_bits_strb,
  input         auto_in_w_bits_last,
                auto_in_b_ready,
                auto_in_ar_valid,
  input  [3:0]  auto_in_ar_bits_id,
  input  [31:0] auto_in_ar_bits_addr,
  input  [7:0]  auto_in_ar_bits_len,
  input  [2:0]  auto_in_ar_bits_size,
  input  [1:0]  auto_in_ar_bits_burst,
  input         auto_in_ar_bits_lock,
  input  [3:0]  auto_in_ar_bits_cache,
  input  [2:0]  auto_in_ar_bits_prot,
  input  [3:0]  auto_in_ar_bits_qos,
                auto_in_ar_bits_echo_tl_state_size,
  input  [6:0]  auto_in_ar_bits_echo_tl_state_source,
  input  [2:0]  auto_in_ar_bits_echo_extra_id,
  input         auto_in_r_ready,
                auto_out_aw_ready,
                auto_out_w_ready,
                auto_out_b_valid,
  input  [3:0]  auto_out_b_bits_id,
  input  [1:0]  auto_out_b_bits_resp,
  input         auto_out_ar_ready,
                auto_out_r_valid,
  input  [3:0]  auto_out_r_bits_id,
  input  [63:0] auto_out_r_bits_data,
  input  [1:0]  auto_out_r_bits_resp,
  input         auto_out_r_bits_last,
  output        auto_in_aw_ready,
                auto_in_w_ready,
                auto_in_b_valid,
  output [3:0]  auto_in_b_bits_id,
  output [1:0]  auto_in_b_bits_resp,
  output [3:0]  auto_in_b_bits_echo_tl_state_size,
  output [6:0]  auto_in_b_bits_echo_tl_state_source,
  output [2:0]  auto_in_b_bits_echo_extra_id,
  output        auto_in_ar_ready,
                auto_in_r_valid,
  output [3:0]  auto_in_r_bits_id,
  output [63:0] auto_in_r_bits_data,
  output [1:0]  auto_in_r_bits_resp,
  output [3:0]  auto_in_r_bits_echo_tl_state_size,
  output [6:0]  auto_in_r_bits_echo_tl_state_source,
  output [2:0]  auto_in_r_bits_echo_extra_id,
  output        auto_in_r_bits_last,
                auto_out_aw_valid,
  output [3:0]  auto_out_aw_bits_id,
  output [31:0] auto_out_aw_bits_addr,
  output [7:0]  auto_out_aw_bits_len,
  output [2:0]  auto_out_aw_bits_size,
  output [1:0]  auto_out_aw_bits_burst,
  output        auto_out_aw_bits_lock,
  output [3:0]  auto_out_aw_bits_cache,
  output [2:0]  auto_out_aw_bits_prot,
  output [3:0]  auto_out_aw_bits_qos,
  output        auto_out_w_valid,
  output [63:0] auto_out_w_bits_data,
  output [7:0]  auto_out_w_bits_strb,
  output        auto_out_w_bits_last,
                auto_out_b_ready,
                auto_out_ar_valid,
  output [3:0]  auto_out_ar_bits_id,
  output [31:0] auto_out_ar_bits_addr,
  output [7:0]  auto_out_ar_bits_len,
  output [2:0]  auto_out_ar_bits_size,
  output [1:0]  auto_out_ar_bits_burst,
  output        auto_out_ar_bits_lock,
  output [3:0]  auto_out_ar_bits_cache,
  output [2:0]  auto_out_ar_bits_prot,
  output [3:0]  auto_out_ar_bits_qos,
  output        auto_out_r_ready
);

  wire             _Queue8_BundleMap_31_io_enq_ready;
  wire             _Queue8_BundleMap_31_io_deq_valid;
  wire [3:0]       _Queue8_BundleMap_31_io_deq_bits_tl_state_size;
  wire [6:0]       _Queue8_BundleMap_31_io_deq_bits_tl_state_source;
  wire [2:0]       _Queue8_BundleMap_31_io_deq_bits_extra_id;
  wire             _Queue8_BundleMap_30_io_enq_ready;
  wire             _Queue8_BundleMap_30_io_deq_valid;
  wire [3:0]       _Queue8_BundleMap_30_io_deq_bits_tl_state_size;
  wire [6:0]       _Queue8_BundleMap_30_io_deq_bits_tl_state_source;
  wire [2:0]       _Queue8_BundleMap_30_io_deq_bits_extra_id;
  wire             _Queue8_BundleMap_29_io_enq_ready;
  wire             _Queue8_BundleMap_29_io_deq_valid;
  wire [3:0]       _Queue8_BundleMap_29_io_deq_bits_tl_state_size;
  wire [6:0]       _Queue8_BundleMap_29_io_deq_bits_tl_state_source;
  wire [2:0]       _Queue8_BundleMap_29_io_deq_bits_extra_id;
  wire             _Queue8_BundleMap_28_io_enq_ready;
  wire             _Queue8_BundleMap_28_io_deq_valid;
  wire [3:0]       _Queue8_BundleMap_28_io_deq_bits_tl_state_size;
  wire [6:0]       _Queue8_BundleMap_28_io_deq_bits_tl_state_source;
  wire [2:0]       _Queue8_BundleMap_28_io_deq_bits_extra_id;
  wire             _Queue8_BundleMap_27_io_enq_ready;
  wire             _Queue8_BundleMap_27_io_deq_valid;
  wire [3:0]       _Queue8_BundleMap_27_io_deq_bits_tl_state_size;
  wire [6:0]       _Queue8_BundleMap_27_io_deq_bits_tl_state_source;
  wire [2:0]       _Queue8_BundleMap_27_io_deq_bits_extra_id;
  wire             _Queue8_BundleMap_26_io_enq_ready;
  wire             _Queue8_BundleMap_26_io_deq_valid;
  wire [3:0]       _Queue8_BundleMap_26_io_deq_bits_tl_state_size;
  wire [6:0]       _Queue8_BundleMap_26_io_deq_bits_tl_state_source;
  wire [2:0]       _Queue8_BundleMap_26_io_deq_bits_extra_id;
  wire             _Queue8_BundleMap_25_io_enq_ready;
  wire             _Queue8_BundleMap_25_io_deq_valid;
  wire [3:0]       _Queue8_BundleMap_25_io_deq_bits_tl_state_size;
  wire [6:0]       _Queue8_BundleMap_25_io_deq_bits_tl_state_source;
  wire [2:0]       _Queue8_BundleMap_25_io_deq_bits_extra_id;
  wire             _Queue8_BundleMap_24_io_enq_ready;
  wire             _Queue8_BundleMap_24_io_deq_valid;
  wire [3:0]       _Queue8_BundleMap_24_io_deq_bits_tl_state_size;
  wire [6:0]       _Queue8_BundleMap_24_io_deq_bits_tl_state_source;
  wire [2:0]       _Queue8_BundleMap_24_io_deq_bits_extra_id;
  wire             _Queue8_BundleMap_23_io_enq_ready;
  wire             _Queue8_BundleMap_23_io_deq_valid;
  wire [3:0]       _Queue8_BundleMap_23_io_deq_bits_tl_state_size;
  wire [6:0]       _Queue8_BundleMap_23_io_deq_bits_tl_state_source;
  wire [2:0]       _Queue8_BundleMap_23_io_deq_bits_extra_id;
  wire             _Queue8_BundleMap_22_io_enq_ready;
  wire             _Queue8_BundleMap_22_io_deq_valid;
  wire [3:0]       _Queue8_BundleMap_22_io_deq_bits_tl_state_size;
  wire [6:0]       _Queue8_BundleMap_22_io_deq_bits_tl_state_source;
  wire [2:0]       _Queue8_BundleMap_22_io_deq_bits_extra_id;
  wire             _Queue8_BundleMap_21_io_enq_ready;
  wire             _Queue8_BundleMap_21_io_deq_valid;
  wire [3:0]       _Queue8_BundleMap_21_io_deq_bits_tl_state_size;
  wire [6:0]       _Queue8_BundleMap_21_io_deq_bits_tl_state_source;
  wire [2:0]       _Queue8_BundleMap_21_io_deq_bits_extra_id;
  wire             _Queue8_BundleMap_20_io_enq_ready;
  wire             _Queue8_BundleMap_20_io_deq_valid;
  wire [3:0]       _Queue8_BundleMap_20_io_deq_bits_tl_state_size;
  wire [6:0]       _Queue8_BundleMap_20_io_deq_bits_tl_state_source;
  wire [2:0]       _Queue8_BundleMap_20_io_deq_bits_extra_id;
  wire             _Queue8_BundleMap_19_io_enq_ready;
  wire             _Queue8_BundleMap_19_io_deq_valid;
  wire [3:0]       _Queue8_BundleMap_19_io_deq_bits_tl_state_size;
  wire [6:0]       _Queue8_BundleMap_19_io_deq_bits_tl_state_source;
  wire [2:0]       _Queue8_BundleMap_19_io_deq_bits_extra_id;
  wire             _Queue8_BundleMap_18_io_enq_ready;
  wire             _Queue8_BundleMap_18_io_deq_valid;
  wire [3:0]       _Queue8_BundleMap_18_io_deq_bits_tl_state_size;
  wire [6:0]       _Queue8_BundleMap_18_io_deq_bits_tl_state_source;
  wire [2:0]       _Queue8_BundleMap_18_io_deq_bits_extra_id;
  wire             _Queue8_BundleMap_17_io_enq_ready;
  wire             _Queue8_BundleMap_17_io_deq_valid;
  wire [3:0]       _Queue8_BundleMap_17_io_deq_bits_tl_state_size;
  wire [6:0]       _Queue8_BundleMap_17_io_deq_bits_tl_state_source;
  wire [2:0]       _Queue8_BundleMap_17_io_deq_bits_extra_id;
  wire             _Queue8_BundleMap_16_io_enq_ready;
  wire             _Queue8_BundleMap_16_io_deq_valid;
  wire [3:0]       _Queue8_BundleMap_16_io_deq_bits_tl_state_size;
  wire [6:0]       _Queue8_BundleMap_16_io_deq_bits_tl_state_source;
  wire [2:0]       _Queue8_BundleMap_16_io_deq_bits_extra_id;
  wire             _Queue8_BundleMap_15_io_enq_ready;
  wire             _Queue8_BundleMap_15_io_deq_valid;
  wire [3:0]       _Queue8_BundleMap_15_io_deq_bits_tl_state_size;
  wire [6:0]       _Queue8_BundleMap_15_io_deq_bits_tl_state_source;
  wire [2:0]       _Queue8_BundleMap_15_io_deq_bits_extra_id;
  wire             _Queue8_BundleMap_14_io_enq_ready;
  wire             _Queue8_BundleMap_14_io_deq_valid;
  wire [3:0]       _Queue8_BundleMap_14_io_deq_bits_tl_state_size;
  wire [6:0]       _Queue8_BundleMap_14_io_deq_bits_tl_state_source;
  wire [2:0]       _Queue8_BundleMap_14_io_deq_bits_extra_id;
  wire             _Queue8_BundleMap_13_io_enq_ready;
  wire             _Queue8_BundleMap_13_io_deq_valid;
  wire [3:0]       _Queue8_BundleMap_13_io_deq_bits_tl_state_size;
  wire [6:0]       _Queue8_BundleMap_13_io_deq_bits_tl_state_source;
  wire [2:0]       _Queue8_BundleMap_13_io_deq_bits_extra_id;
  wire             _Queue8_BundleMap_12_io_enq_ready;
  wire             _Queue8_BundleMap_12_io_deq_valid;
  wire [3:0]       _Queue8_BundleMap_12_io_deq_bits_tl_state_size;
  wire [6:0]       _Queue8_BundleMap_12_io_deq_bits_tl_state_source;
  wire [2:0]       _Queue8_BundleMap_12_io_deq_bits_extra_id;
  wire             _Queue8_BundleMap_11_io_enq_ready;
  wire             _Queue8_BundleMap_11_io_deq_valid;
  wire [3:0]       _Queue8_BundleMap_11_io_deq_bits_tl_state_size;
  wire [6:0]       _Queue8_BundleMap_11_io_deq_bits_tl_state_source;
  wire [2:0]       _Queue8_BundleMap_11_io_deq_bits_extra_id;
  wire             _Queue8_BundleMap_10_io_enq_ready;
  wire             _Queue8_BundleMap_10_io_deq_valid;
  wire [3:0]       _Queue8_BundleMap_10_io_deq_bits_tl_state_size;
  wire [6:0]       _Queue8_BundleMap_10_io_deq_bits_tl_state_source;
  wire [2:0]       _Queue8_BundleMap_10_io_deq_bits_extra_id;
  wire             _Queue8_BundleMap_9_io_enq_ready;
  wire             _Queue8_BundleMap_9_io_deq_valid;
  wire [3:0]       _Queue8_BundleMap_9_io_deq_bits_tl_state_size;
  wire [6:0]       _Queue8_BundleMap_9_io_deq_bits_tl_state_source;
  wire [2:0]       _Queue8_BundleMap_9_io_deq_bits_extra_id;
  wire             _Queue8_BundleMap_8_io_enq_ready;
  wire             _Queue8_BundleMap_8_io_deq_valid;
  wire [3:0]       _Queue8_BundleMap_8_io_deq_bits_tl_state_size;
  wire [6:0]       _Queue8_BundleMap_8_io_deq_bits_tl_state_source;
  wire [2:0]       _Queue8_BundleMap_8_io_deq_bits_extra_id;
  wire             _Queue8_BundleMap_7_io_enq_ready;
  wire             _Queue8_BundleMap_7_io_deq_valid;
  wire [3:0]       _Queue8_BundleMap_7_io_deq_bits_tl_state_size;
  wire [6:0]       _Queue8_BundleMap_7_io_deq_bits_tl_state_source;
  wire [2:0]       _Queue8_BundleMap_7_io_deq_bits_extra_id;
  wire             _Queue8_BundleMap_6_io_enq_ready;
  wire             _Queue8_BundleMap_6_io_deq_valid;
  wire [3:0]       _Queue8_BundleMap_6_io_deq_bits_tl_state_size;
  wire [6:0]       _Queue8_BundleMap_6_io_deq_bits_tl_state_source;
  wire [2:0]       _Queue8_BundleMap_6_io_deq_bits_extra_id;
  wire             _Queue8_BundleMap_5_io_enq_ready;
  wire             _Queue8_BundleMap_5_io_deq_valid;
  wire [3:0]       _Queue8_BundleMap_5_io_deq_bits_tl_state_size;
  wire [6:0]       _Queue8_BundleMap_5_io_deq_bits_tl_state_source;
  wire [2:0]       _Queue8_BundleMap_5_io_deq_bits_extra_id;
  wire             _Queue8_BundleMap_4_io_enq_ready;
  wire             _Queue8_BundleMap_4_io_deq_valid;
  wire [3:0]       _Queue8_BundleMap_4_io_deq_bits_tl_state_size;
  wire [6:0]       _Queue8_BundleMap_4_io_deq_bits_tl_state_source;
  wire [2:0]       _Queue8_BundleMap_4_io_deq_bits_extra_id;
  wire             _Queue8_BundleMap_3_io_enq_ready;
  wire             _Queue8_BundleMap_3_io_deq_valid;
  wire [3:0]       _Queue8_BundleMap_3_io_deq_bits_tl_state_size;
  wire [6:0]       _Queue8_BundleMap_3_io_deq_bits_tl_state_source;
  wire [2:0]       _Queue8_BundleMap_3_io_deq_bits_extra_id;
  wire             _Queue8_BundleMap_2_io_enq_ready;
  wire             _Queue8_BundleMap_2_io_deq_valid;
  wire [3:0]       _Queue8_BundleMap_2_io_deq_bits_tl_state_size;
  wire [6:0]       _Queue8_BundleMap_2_io_deq_bits_tl_state_source;
  wire [2:0]       _Queue8_BundleMap_2_io_deq_bits_extra_id;
  wire             _Queue8_BundleMap_1_io_enq_ready;
  wire             _Queue8_BundleMap_1_io_deq_valid;
  wire [3:0]       _Queue8_BundleMap_1_io_deq_bits_tl_state_size;
  wire [6:0]       _Queue8_BundleMap_1_io_deq_bits_tl_state_source;
  wire [2:0]       _Queue8_BundleMap_1_io_deq_bits_extra_id;
  wire             _Queue8_BundleMap_io_enq_ready;
  wire             _Queue8_BundleMap_io_deq_valid;
  wire [3:0]       _Queue8_BundleMap_io_deq_bits_tl_state_size;
  wire [6:0]       _Queue8_BundleMap_io_deq_bits_tl_state_source;
  wire [2:0]       _Queue8_BundleMap_io_deq_bits_extra_id;
  wire [15:0]      _GEN =
    {{_Queue8_BundleMap_15_io_enq_ready},
     {_Queue8_BundleMap_14_io_enq_ready},
     {_Queue8_BundleMap_13_io_enq_ready},
     {_Queue8_BundleMap_12_io_enq_ready},
     {_Queue8_BundleMap_11_io_enq_ready},
     {_Queue8_BundleMap_10_io_enq_ready},
     {_Queue8_BundleMap_9_io_enq_ready},
     {_Queue8_BundleMap_8_io_enq_ready},
     {_Queue8_BundleMap_7_io_enq_ready},
     {_Queue8_BundleMap_6_io_enq_ready},
     {_Queue8_BundleMap_5_io_enq_ready},
     {_Queue8_BundleMap_4_io_enq_ready},
     {_Queue8_BundleMap_3_io_enq_ready},
     {_Queue8_BundleMap_2_io_enq_ready},
     {_Queue8_BundleMap_1_io_enq_ready},
     {_Queue8_BundleMap_io_enq_ready}};
  wire [15:0][3:0] _GEN_0 =
    {{_Queue8_BundleMap_15_io_deq_bits_tl_state_size},
     {_Queue8_BundleMap_14_io_deq_bits_tl_state_size},
     {_Queue8_BundleMap_13_io_deq_bits_tl_state_size},
     {_Queue8_BundleMap_12_io_deq_bits_tl_state_size},
     {_Queue8_BundleMap_11_io_deq_bits_tl_state_size},
     {_Queue8_BundleMap_10_io_deq_bits_tl_state_size},
     {_Queue8_BundleMap_9_io_deq_bits_tl_state_size},
     {_Queue8_BundleMap_8_io_deq_bits_tl_state_size},
     {_Queue8_BundleMap_7_io_deq_bits_tl_state_size},
     {_Queue8_BundleMap_6_io_deq_bits_tl_state_size},
     {_Queue8_BundleMap_5_io_deq_bits_tl_state_size},
     {_Queue8_BundleMap_4_io_deq_bits_tl_state_size},
     {_Queue8_BundleMap_3_io_deq_bits_tl_state_size},
     {_Queue8_BundleMap_2_io_deq_bits_tl_state_size},
     {_Queue8_BundleMap_1_io_deq_bits_tl_state_size},
     {_Queue8_BundleMap_io_deq_bits_tl_state_size}};
  wire [15:0][6:0] _GEN_1 =
    {{_Queue8_BundleMap_15_io_deq_bits_tl_state_source},
     {_Queue8_BundleMap_14_io_deq_bits_tl_state_source},
     {_Queue8_BundleMap_13_io_deq_bits_tl_state_source},
     {_Queue8_BundleMap_12_io_deq_bits_tl_state_source},
     {_Queue8_BundleMap_11_io_deq_bits_tl_state_source},
     {_Queue8_BundleMap_10_io_deq_bits_tl_state_source},
     {_Queue8_BundleMap_9_io_deq_bits_tl_state_source},
     {_Queue8_BundleMap_8_io_deq_bits_tl_state_source},
     {_Queue8_BundleMap_7_io_deq_bits_tl_state_source},
     {_Queue8_BundleMap_6_io_deq_bits_tl_state_source},
     {_Queue8_BundleMap_5_io_deq_bits_tl_state_source},
     {_Queue8_BundleMap_4_io_deq_bits_tl_state_source},
     {_Queue8_BundleMap_3_io_deq_bits_tl_state_source},
     {_Queue8_BundleMap_2_io_deq_bits_tl_state_source},
     {_Queue8_BundleMap_1_io_deq_bits_tl_state_source},
     {_Queue8_BundleMap_io_deq_bits_tl_state_source}};
  wire [15:0][2:0] _GEN_2 =
    {{_Queue8_BundleMap_15_io_deq_bits_extra_id},
     {_Queue8_BundleMap_14_io_deq_bits_extra_id},
     {_Queue8_BundleMap_13_io_deq_bits_extra_id},
     {_Queue8_BundleMap_12_io_deq_bits_extra_id},
     {_Queue8_BundleMap_11_io_deq_bits_extra_id},
     {_Queue8_BundleMap_10_io_deq_bits_extra_id},
     {_Queue8_BundleMap_9_io_deq_bits_extra_id},
     {_Queue8_BundleMap_8_io_deq_bits_extra_id},
     {_Queue8_BundleMap_7_io_deq_bits_extra_id},
     {_Queue8_BundleMap_6_io_deq_bits_extra_id},
     {_Queue8_BundleMap_5_io_deq_bits_extra_id},
     {_Queue8_BundleMap_4_io_deq_bits_extra_id},
     {_Queue8_BundleMap_3_io_deq_bits_extra_id},
     {_Queue8_BundleMap_2_io_deq_bits_extra_id},
     {_Queue8_BundleMap_1_io_deq_bits_extra_id},
     {_Queue8_BundleMap_io_deq_bits_extra_id}};
  wire             _GEN_3 = auto_out_r_valid & auto_in_r_ready;
  wire             _GEN_4 = auto_in_ar_valid & auto_out_ar_ready;
  wire [15:0]      _GEN_5 =
    {{_Queue8_BundleMap_31_io_enq_ready},
     {_Queue8_BundleMap_30_io_enq_ready},
     {_Queue8_BundleMap_29_io_enq_ready},
     {_Queue8_BundleMap_28_io_enq_ready},
     {_Queue8_BundleMap_27_io_enq_ready},
     {_Queue8_BundleMap_26_io_enq_ready},
     {_Queue8_BundleMap_25_io_enq_ready},
     {_Queue8_BundleMap_24_io_enq_ready},
     {_Queue8_BundleMap_23_io_enq_ready},
     {_Queue8_BundleMap_22_io_enq_ready},
     {_Queue8_BundleMap_21_io_enq_ready},
     {_Queue8_BundleMap_20_io_enq_ready},
     {_Queue8_BundleMap_19_io_enq_ready},
     {_Queue8_BundleMap_18_io_enq_ready},
     {_Queue8_BundleMap_17_io_enq_ready},
     {_Queue8_BundleMap_16_io_enq_ready}};
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      automatic logic [15:0] _GEN_6 =
        {{_Queue8_BundleMap_15_io_deq_valid},
         {_Queue8_BundleMap_14_io_deq_valid},
         {_Queue8_BundleMap_13_io_deq_valid},
         {_Queue8_BundleMap_12_io_deq_valid},
         {_Queue8_BundleMap_11_io_deq_valid},
         {_Queue8_BundleMap_10_io_deq_valid},
         {_Queue8_BundleMap_9_io_deq_valid},
         {_Queue8_BundleMap_8_io_deq_valid},
         {_Queue8_BundleMap_7_io_deq_valid},
         {_Queue8_BundleMap_6_io_deq_valid},
         {_Queue8_BundleMap_5_io_deq_valid},
         {_Queue8_BundleMap_4_io_deq_valid},
         {_Queue8_BundleMap_3_io_deq_valid},
         {_Queue8_BundleMap_2_io_deq_valid},
         {_Queue8_BundleMap_1_io_deq_valid},
         {_Queue8_BundleMap_io_deq_valid}};
      automatic logic [15:0] _GEN_7 =
        {{_Queue8_BundleMap_31_io_deq_valid},
         {_Queue8_BundleMap_30_io_deq_valid},
         {_Queue8_BundleMap_29_io_deq_valid},
         {_Queue8_BundleMap_28_io_deq_valid},
         {_Queue8_BundleMap_27_io_deq_valid},
         {_Queue8_BundleMap_26_io_deq_valid},
         {_Queue8_BundleMap_25_io_deq_valid},
         {_Queue8_BundleMap_24_io_deq_valid},
         {_Queue8_BundleMap_23_io_deq_valid},
         {_Queue8_BundleMap_22_io_deq_valid},
         {_Queue8_BundleMap_21_io_deq_valid},
         {_Queue8_BundleMap_20_io_deq_valid},
         {_Queue8_BundleMap_19_io_deq_valid},
         {_Queue8_BundleMap_18_io_deq_valid},
         {_Queue8_BundleMap_17_io_deq_valid},
         {_Queue8_BundleMap_16_io_deq_valid}};
      if (~reset & ~(~auto_out_r_valid | _GEN_6[auto_out_r_bits_id])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at UserYanker.scala:69 assert (!out.r.valid || r_valid) // Q must be ready faster than the response\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~auto_out_b_valid | _GEN_7[auto_out_b_bits_id])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at UserYanker.scala:98 assert (!out.b.valid || b_valid) // Q must be ready faster than the response\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  wire [15:0][3:0] _GEN_8 =
    {{_Queue8_BundleMap_31_io_deq_bits_tl_state_size},
     {_Queue8_BundleMap_30_io_deq_bits_tl_state_size},
     {_Queue8_BundleMap_29_io_deq_bits_tl_state_size},
     {_Queue8_BundleMap_28_io_deq_bits_tl_state_size},
     {_Queue8_BundleMap_27_io_deq_bits_tl_state_size},
     {_Queue8_BundleMap_26_io_deq_bits_tl_state_size},
     {_Queue8_BundleMap_25_io_deq_bits_tl_state_size},
     {_Queue8_BundleMap_24_io_deq_bits_tl_state_size},
     {_Queue8_BundleMap_23_io_deq_bits_tl_state_size},
     {_Queue8_BundleMap_22_io_deq_bits_tl_state_size},
     {_Queue8_BundleMap_21_io_deq_bits_tl_state_size},
     {_Queue8_BundleMap_20_io_deq_bits_tl_state_size},
     {_Queue8_BundleMap_19_io_deq_bits_tl_state_size},
     {_Queue8_BundleMap_18_io_deq_bits_tl_state_size},
     {_Queue8_BundleMap_17_io_deq_bits_tl_state_size},
     {_Queue8_BundleMap_16_io_deq_bits_tl_state_size}};
  wire [15:0][6:0] _GEN_9 =
    {{_Queue8_BundleMap_31_io_deq_bits_tl_state_source},
     {_Queue8_BundleMap_30_io_deq_bits_tl_state_source},
     {_Queue8_BundleMap_29_io_deq_bits_tl_state_source},
     {_Queue8_BundleMap_28_io_deq_bits_tl_state_source},
     {_Queue8_BundleMap_27_io_deq_bits_tl_state_source},
     {_Queue8_BundleMap_26_io_deq_bits_tl_state_source},
     {_Queue8_BundleMap_25_io_deq_bits_tl_state_source},
     {_Queue8_BundleMap_24_io_deq_bits_tl_state_source},
     {_Queue8_BundleMap_23_io_deq_bits_tl_state_source},
     {_Queue8_BundleMap_22_io_deq_bits_tl_state_source},
     {_Queue8_BundleMap_21_io_deq_bits_tl_state_source},
     {_Queue8_BundleMap_20_io_deq_bits_tl_state_source},
     {_Queue8_BundleMap_19_io_deq_bits_tl_state_source},
     {_Queue8_BundleMap_18_io_deq_bits_tl_state_source},
     {_Queue8_BundleMap_17_io_deq_bits_tl_state_source},
     {_Queue8_BundleMap_16_io_deq_bits_tl_state_source}};
  wire [15:0][2:0] _GEN_10 =
    {{_Queue8_BundleMap_31_io_deq_bits_extra_id},
     {_Queue8_BundleMap_30_io_deq_bits_extra_id},
     {_Queue8_BundleMap_29_io_deq_bits_extra_id},
     {_Queue8_BundleMap_28_io_deq_bits_extra_id},
     {_Queue8_BundleMap_27_io_deq_bits_extra_id},
     {_Queue8_BundleMap_26_io_deq_bits_extra_id},
     {_Queue8_BundleMap_25_io_deq_bits_extra_id},
     {_Queue8_BundleMap_24_io_deq_bits_extra_id},
     {_Queue8_BundleMap_23_io_deq_bits_extra_id},
     {_Queue8_BundleMap_22_io_deq_bits_extra_id},
     {_Queue8_BundleMap_21_io_deq_bits_extra_id},
     {_Queue8_BundleMap_20_io_deq_bits_extra_id},
     {_Queue8_BundleMap_19_io_deq_bits_extra_id},
     {_Queue8_BundleMap_18_io_deq_bits_extra_id},
     {_Queue8_BundleMap_17_io_deq_bits_extra_id},
     {_Queue8_BundleMap_16_io_deq_bits_extra_id}};
  wire             _GEN_11 = auto_out_b_valid & auto_in_b_ready;
  wire             _GEN_12 = auto_in_aw_valid & auto_out_aw_ready;
  Queue8_BundleMap_4 Queue8_BundleMap (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_GEN_4 & auto_in_ar_bits_id == 4'h0),
    .io_enq_bits_tl_state_size   (auto_in_ar_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_ar_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_ar_bits_echo_extra_id),
    .io_deq_ready
      (_GEN_3 & auto_out_r_bits_id == 4'h0 & auto_out_r_bits_last),
    .io_enq_ready                (_Queue8_BundleMap_io_enq_ready),
    .io_deq_valid                (_Queue8_BundleMap_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue8_BundleMap_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue8_BundleMap_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue8_BundleMap_io_deq_bits_extra_id)
  );
  Queue8_BundleMap_4 Queue8_BundleMap_1 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_GEN_4 & auto_in_ar_bits_id == 4'h1),
    .io_enq_bits_tl_state_size   (auto_in_ar_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_ar_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_ar_bits_echo_extra_id),
    .io_deq_ready
      (_GEN_3 & auto_out_r_bits_id == 4'h1 & auto_out_r_bits_last),
    .io_enq_ready                (_Queue8_BundleMap_1_io_enq_ready),
    .io_deq_valid                (_Queue8_BundleMap_1_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue8_BundleMap_1_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue8_BundleMap_1_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue8_BundleMap_1_io_deq_bits_extra_id)
  );
  Queue8_BundleMap_4 Queue8_BundleMap_2 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_GEN_4 & auto_in_ar_bits_id == 4'h2),
    .io_enq_bits_tl_state_size   (auto_in_ar_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_ar_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_ar_bits_echo_extra_id),
    .io_deq_ready
      (_GEN_3 & auto_out_r_bits_id == 4'h2 & auto_out_r_bits_last),
    .io_enq_ready                (_Queue8_BundleMap_2_io_enq_ready),
    .io_deq_valid                (_Queue8_BundleMap_2_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue8_BundleMap_2_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue8_BundleMap_2_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue8_BundleMap_2_io_deq_bits_extra_id)
  );
  Queue8_BundleMap_4 Queue8_BundleMap_3 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_GEN_4 & auto_in_ar_bits_id == 4'h3),
    .io_enq_bits_tl_state_size   (auto_in_ar_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_ar_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_ar_bits_echo_extra_id),
    .io_deq_ready
      (_GEN_3 & auto_out_r_bits_id == 4'h3 & auto_out_r_bits_last),
    .io_enq_ready                (_Queue8_BundleMap_3_io_enq_ready),
    .io_deq_valid                (_Queue8_BundleMap_3_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue8_BundleMap_3_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue8_BundleMap_3_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue8_BundleMap_3_io_deq_bits_extra_id)
  );
  Queue8_BundleMap_4 Queue8_BundleMap_4 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_GEN_4 & auto_in_ar_bits_id == 4'h4),
    .io_enq_bits_tl_state_size   (auto_in_ar_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_ar_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_ar_bits_echo_extra_id),
    .io_deq_ready
      (_GEN_3 & auto_out_r_bits_id == 4'h4 & auto_out_r_bits_last),
    .io_enq_ready                (_Queue8_BundleMap_4_io_enq_ready),
    .io_deq_valid                (_Queue8_BundleMap_4_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue8_BundleMap_4_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue8_BundleMap_4_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue8_BundleMap_4_io_deq_bits_extra_id)
  );
  Queue8_BundleMap_4 Queue8_BundleMap_5 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_GEN_4 & auto_in_ar_bits_id == 4'h5),
    .io_enq_bits_tl_state_size   (auto_in_ar_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_ar_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_ar_bits_echo_extra_id),
    .io_deq_ready
      (_GEN_3 & auto_out_r_bits_id == 4'h5 & auto_out_r_bits_last),
    .io_enq_ready                (_Queue8_BundleMap_5_io_enq_ready),
    .io_deq_valid                (_Queue8_BundleMap_5_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue8_BundleMap_5_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue8_BundleMap_5_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue8_BundleMap_5_io_deq_bits_extra_id)
  );
  Queue8_BundleMap_4 Queue8_BundleMap_6 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_GEN_4 & auto_in_ar_bits_id == 4'h6),
    .io_enq_bits_tl_state_size   (auto_in_ar_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_ar_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_ar_bits_echo_extra_id),
    .io_deq_ready
      (_GEN_3 & auto_out_r_bits_id == 4'h6 & auto_out_r_bits_last),
    .io_enq_ready                (_Queue8_BundleMap_6_io_enq_ready),
    .io_deq_valid                (_Queue8_BundleMap_6_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue8_BundleMap_6_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue8_BundleMap_6_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue8_BundleMap_6_io_deq_bits_extra_id)
  );
  Queue8_BundleMap_4 Queue8_BundleMap_7 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_GEN_4 & auto_in_ar_bits_id == 4'h7),
    .io_enq_bits_tl_state_size   (auto_in_ar_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_ar_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_ar_bits_echo_extra_id),
    .io_deq_ready
      (_GEN_3 & auto_out_r_bits_id == 4'h7 & auto_out_r_bits_last),
    .io_enq_ready                (_Queue8_BundleMap_7_io_enq_ready),
    .io_deq_valid                (_Queue8_BundleMap_7_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue8_BundleMap_7_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue8_BundleMap_7_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue8_BundleMap_7_io_deq_bits_extra_id)
  );
  Queue8_BundleMap_4 Queue8_BundleMap_8 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_GEN_4 & auto_in_ar_bits_id == 4'h8),
    .io_enq_bits_tl_state_size   (auto_in_ar_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_ar_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_ar_bits_echo_extra_id),
    .io_deq_ready
      (_GEN_3 & auto_out_r_bits_id == 4'h8 & auto_out_r_bits_last),
    .io_enq_ready                (_Queue8_BundleMap_8_io_enq_ready),
    .io_deq_valid                (_Queue8_BundleMap_8_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue8_BundleMap_8_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue8_BundleMap_8_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue8_BundleMap_8_io_deq_bits_extra_id)
  );
  Queue8_BundleMap_4 Queue8_BundleMap_9 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_GEN_4 & auto_in_ar_bits_id == 4'h9),
    .io_enq_bits_tl_state_size   (auto_in_ar_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_ar_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_ar_bits_echo_extra_id),
    .io_deq_ready
      (_GEN_3 & auto_out_r_bits_id == 4'h9 & auto_out_r_bits_last),
    .io_enq_ready                (_Queue8_BundleMap_9_io_enq_ready),
    .io_deq_valid                (_Queue8_BundleMap_9_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue8_BundleMap_9_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue8_BundleMap_9_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue8_BundleMap_9_io_deq_bits_extra_id)
  );
  Queue8_BundleMap_4 Queue8_BundleMap_10 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_GEN_4 & auto_in_ar_bits_id == 4'hA),
    .io_enq_bits_tl_state_size   (auto_in_ar_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_ar_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_ar_bits_echo_extra_id),
    .io_deq_ready
      (_GEN_3 & auto_out_r_bits_id == 4'hA & auto_out_r_bits_last),
    .io_enq_ready                (_Queue8_BundleMap_10_io_enq_ready),
    .io_deq_valid                (_Queue8_BundleMap_10_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue8_BundleMap_10_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue8_BundleMap_10_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue8_BundleMap_10_io_deq_bits_extra_id)
  );
  Queue8_BundleMap_4 Queue8_BundleMap_11 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_GEN_4 & auto_in_ar_bits_id == 4'hB),
    .io_enq_bits_tl_state_size   (auto_in_ar_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_ar_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_ar_bits_echo_extra_id),
    .io_deq_ready
      (_GEN_3 & auto_out_r_bits_id == 4'hB & auto_out_r_bits_last),
    .io_enq_ready                (_Queue8_BundleMap_11_io_enq_ready),
    .io_deq_valid                (_Queue8_BundleMap_11_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue8_BundleMap_11_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue8_BundleMap_11_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue8_BundleMap_11_io_deq_bits_extra_id)
  );
  Queue8_BundleMap_4 Queue8_BundleMap_12 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_GEN_4 & auto_in_ar_bits_id == 4'hC),
    .io_enq_bits_tl_state_size   (auto_in_ar_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_ar_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_ar_bits_echo_extra_id),
    .io_deq_ready
      (_GEN_3 & auto_out_r_bits_id == 4'hC & auto_out_r_bits_last),
    .io_enq_ready                (_Queue8_BundleMap_12_io_enq_ready),
    .io_deq_valid                (_Queue8_BundleMap_12_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue8_BundleMap_12_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue8_BundleMap_12_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue8_BundleMap_12_io_deq_bits_extra_id)
  );
  Queue8_BundleMap_4 Queue8_BundleMap_13 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_GEN_4 & auto_in_ar_bits_id == 4'hD),
    .io_enq_bits_tl_state_size   (auto_in_ar_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_ar_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_ar_bits_echo_extra_id),
    .io_deq_ready
      (_GEN_3 & auto_out_r_bits_id == 4'hD & auto_out_r_bits_last),
    .io_enq_ready                (_Queue8_BundleMap_13_io_enq_ready),
    .io_deq_valid                (_Queue8_BundleMap_13_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue8_BundleMap_13_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue8_BundleMap_13_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue8_BundleMap_13_io_deq_bits_extra_id)
  );
  Queue8_BundleMap_4 Queue8_BundleMap_14 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_GEN_4 & auto_in_ar_bits_id == 4'hE),
    .io_enq_bits_tl_state_size   (auto_in_ar_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_ar_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_ar_bits_echo_extra_id),
    .io_deq_ready
      (_GEN_3 & auto_out_r_bits_id == 4'hE & auto_out_r_bits_last),
    .io_enq_ready                (_Queue8_BundleMap_14_io_enq_ready),
    .io_deq_valid                (_Queue8_BundleMap_14_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue8_BundleMap_14_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue8_BundleMap_14_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue8_BundleMap_14_io_deq_bits_extra_id)
  );
  Queue8_BundleMap_4 Queue8_BundleMap_15 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_GEN_4 & (&auto_in_ar_bits_id)),
    .io_enq_bits_tl_state_size   (auto_in_ar_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_ar_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_ar_bits_echo_extra_id),
    .io_deq_ready                (_GEN_3 & (&auto_out_r_bits_id) & auto_out_r_bits_last),
    .io_enq_ready                (_Queue8_BundleMap_15_io_enq_ready),
    .io_deq_valid                (_Queue8_BundleMap_15_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue8_BundleMap_15_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue8_BundleMap_15_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue8_BundleMap_15_io_deq_bits_extra_id)
  );
  Queue8_BundleMap_4 Queue8_BundleMap_16 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_GEN_12 & auto_in_aw_bits_id == 4'h0),
    .io_enq_bits_tl_state_size   (auto_in_aw_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_aw_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_aw_bits_echo_extra_id),
    .io_deq_ready                (_GEN_11 & auto_out_b_bits_id == 4'h0),
    .io_enq_ready                (_Queue8_BundleMap_16_io_enq_ready),
    .io_deq_valid                (_Queue8_BundleMap_16_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue8_BundleMap_16_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue8_BundleMap_16_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue8_BundleMap_16_io_deq_bits_extra_id)
  );
  Queue8_BundleMap_4 Queue8_BundleMap_17 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_GEN_12 & auto_in_aw_bits_id == 4'h1),
    .io_enq_bits_tl_state_size   (auto_in_aw_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_aw_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_aw_bits_echo_extra_id),
    .io_deq_ready                (_GEN_11 & auto_out_b_bits_id == 4'h1),
    .io_enq_ready                (_Queue8_BundleMap_17_io_enq_ready),
    .io_deq_valid                (_Queue8_BundleMap_17_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue8_BundleMap_17_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue8_BundleMap_17_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue8_BundleMap_17_io_deq_bits_extra_id)
  );
  Queue8_BundleMap_4 Queue8_BundleMap_18 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_GEN_12 & auto_in_aw_bits_id == 4'h2),
    .io_enq_bits_tl_state_size   (auto_in_aw_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_aw_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_aw_bits_echo_extra_id),
    .io_deq_ready                (_GEN_11 & auto_out_b_bits_id == 4'h2),
    .io_enq_ready                (_Queue8_BundleMap_18_io_enq_ready),
    .io_deq_valid                (_Queue8_BundleMap_18_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue8_BundleMap_18_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue8_BundleMap_18_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue8_BundleMap_18_io_deq_bits_extra_id)
  );
  Queue8_BundleMap_4 Queue8_BundleMap_19 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_GEN_12 & auto_in_aw_bits_id == 4'h3),
    .io_enq_bits_tl_state_size   (auto_in_aw_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_aw_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_aw_bits_echo_extra_id),
    .io_deq_ready                (_GEN_11 & auto_out_b_bits_id == 4'h3),
    .io_enq_ready                (_Queue8_BundleMap_19_io_enq_ready),
    .io_deq_valid                (_Queue8_BundleMap_19_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue8_BundleMap_19_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue8_BundleMap_19_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue8_BundleMap_19_io_deq_bits_extra_id)
  );
  Queue8_BundleMap_4 Queue8_BundleMap_20 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_GEN_12 & auto_in_aw_bits_id == 4'h4),
    .io_enq_bits_tl_state_size   (auto_in_aw_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_aw_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_aw_bits_echo_extra_id),
    .io_deq_ready                (_GEN_11 & auto_out_b_bits_id == 4'h4),
    .io_enq_ready                (_Queue8_BundleMap_20_io_enq_ready),
    .io_deq_valid                (_Queue8_BundleMap_20_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue8_BundleMap_20_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue8_BundleMap_20_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue8_BundleMap_20_io_deq_bits_extra_id)
  );
  Queue8_BundleMap_4 Queue8_BundleMap_21 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_GEN_12 & auto_in_aw_bits_id == 4'h5),
    .io_enq_bits_tl_state_size   (auto_in_aw_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_aw_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_aw_bits_echo_extra_id),
    .io_deq_ready                (_GEN_11 & auto_out_b_bits_id == 4'h5),
    .io_enq_ready                (_Queue8_BundleMap_21_io_enq_ready),
    .io_deq_valid                (_Queue8_BundleMap_21_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue8_BundleMap_21_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue8_BundleMap_21_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue8_BundleMap_21_io_deq_bits_extra_id)
  );
  Queue8_BundleMap_4 Queue8_BundleMap_22 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_GEN_12 & auto_in_aw_bits_id == 4'h6),
    .io_enq_bits_tl_state_size   (auto_in_aw_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_aw_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_aw_bits_echo_extra_id),
    .io_deq_ready                (_GEN_11 & auto_out_b_bits_id == 4'h6),
    .io_enq_ready                (_Queue8_BundleMap_22_io_enq_ready),
    .io_deq_valid                (_Queue8_BundleMap_22_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue8_BundleMap_22_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue8_BundleMap_22_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue8_BundleMap_22_io_deq_bits_extra_id)
  );
  Queue8_BundleMap_4 Queue8_BundleMap_23 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_GEN_12 & auto_in_aw_bits_id == 4'h7),
    .io_enq_bits_tl_state_size   (auto_in_aw_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_aw_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_aw_bits_echo_extra_id),
    .io_deq_ready                (_GEN_11 & auto_out_b_bits_id == 4'h7),
    .io_enq_ready                (_Queue8_BundleMap_23_io_enq_ready),
    .io_deq_valid                (_Queue8_BundleMap_23_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue8_BundleMap_23_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue8_BundleMap_23_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue8_BundleMap_23_io_deq_bits_extra_id)
  );
  Queue8_BundleMap_4 Queue8_BundleMap_24 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_GEN_12 & auto_in_aw_bits_id == 4'h8),
    .io_enq_bits_tl_state_size   (auto_in_aw_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_aw_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_aw_bits_echo_extra_id),
    .io_deq_ready                (_GEN_11 & auto_out_b_bits_id == 4'h8),
    .io_enq_ready                (_Queue8_BundleMap_24_io_enq_ready),
    .io_deq_valid                (_Queue8_BundleMap_24_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue8_BundleMap_24_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue8_BundleMap_24_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue8_BundleMap_24_io_deq_bits_extra_id)
  );
  Queue8_BundleMap_4 Queue8_BundleMap_25 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_GEN_12 & auto_in_aw_bits_id == 4'h9),
    .io_enq_bits_tl_state_size   (auto_in_aw_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_aw_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_aw_bits_echo_extra_id),
    .io_deq_ready                (_GEN_11 & auto_out_b_bits_id == 4'h9),
    .io_enq_ready                (_Queue8_BundleMap_25_io_enq_ready),
    .io_deq_valid                (_Queue8_BundleMap_25_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue8_BundleMap_25_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue8_BundleMap_25_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue8_BundleMap_25_io_deq_bits_extra_id)
  );
  Queue8_BundleMap_4 Queue8_BundleMap_26 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_GEN_12 & auto_in_aw_bits_id == 4'hA),
    .io_enq_bits_tl_state_size   (auto_in_aw_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_aw_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_aw_bits_echo_extra_id),
    .io_deq_ready                (_GEN_11 & auto_out_b_bits_id == 4'hA),
    .io_enq_ready                (_Queue8_BundleMap_26_io_enq_ready),
    .io_deq_valid                (_Queue8_BundleMap_26_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue8_BundleMap_26_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue8_BundleMap_26_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue8_BundleMap_26_io_deq_bits_extra_id)
  );
  Queue8_BundleMap_4 Queue8_BundleMap_27 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_GEN_12 & auto_in_aw_bits_id == 4'hB),
    .io_enq_bits_tl_state_size   (auto_in_aw_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_aw_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_aw_bits_echo_extra_id),
    .io_deq_ready                (_GEN_11 & auto_out_b_bits_id == 4'hB),
    .io_enq_ready                (_Queue8_BundleMap_27_io_enq_ready),
    .io_deq_valid                (_Queue8_BundleMap_27_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue8_BundleMap_27_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue8_BundleMap_27_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue8_BundleMap_27_io_deq_bits_extra_id)
  );
  Queue8_BundleMap_4 Queue8_BundleMap_28 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_GEN_12 & auto_in_aw_bits_id == 4'hC),
    .io_enq_bits_tl_state_size   (auto_in_aw_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_aw_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_aw_bits_echo_extra_id),
    .io_deq_ready                (_GEN_11 & auto_out_b_bits_id == 4'hC),
    .io_enq_ready                (_Queue8_BundleMap_28_io_enq_ready),
    .io_deq_valid                (_Queue8_BundleMap_28_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue8_BundleMap_28_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue8_BundleMap_28_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue8_BundleMap_28_io_deq_bits_extra_id)
  );
  Queue8_BundleMap_4 Queue8_BundleMap_29 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_GEN_12 & auto_in_aw_bits_id == 4'hD),
    .io_enq_bits_tl_state_size   (auto_in_aw_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_aw_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_aw_bits_echo_extra_id),
    .io_deq_ready                (_GEN_11 & auto_out_b_bits_id == 4'hD),
    .io_enq_ready                (_Queue8_BundleMap_29_io_enq_ready),
    .io_deq_valid                (_Queue8_BundleMap_29_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue8_BundleMap_29_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue8_BundleMap_29_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue8_BundleMap_29_io_deq_bits_extra_id)
  );
  Queue8_BundleMap_4 Queue8_BundleMap_30 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_GEN_12 & auto_in_aw_bits_id == 4'hE),
    .io_enq_bits_tl_state_size   (auto_in_aw_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_aw_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_aw_bits_echo_extra_id),
    .io_deq_ready                (_GEN_11 & auto_out_b_bits_id == 4'hE),
    .io_enq_ready                (_Queue8_BundleMap_30_io_enq_ready),
    .io_deq_valid                (_Queue8_BundleMap_30_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue8_BundleMap_30_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue8_BundleMap_30_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue8_BundleMap_30_io_deq_bits_extra_id)
  );
  Queue8_BundleMap_4 Queue8_BundleMap_31 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_GEN_12 & (&auto_in_aw_bits_id)),
    .io_enq_bits_tl_state_size   (auto_in_aw_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_aw_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_aw_bits_echo_extra_id),
    .io_deq_ready                (_GEN_11 & (&auto_out_b_bits_id)),
    .io_enq_ready                (_Queue8_BundleMap_31_io_enq_ready),
    .io_deq_valid                (_Queue8_BundleMap_31_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue8_BundleMap_31_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue8_BundleMap_31_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue8_BundleMap_31_io_deq_bits_extra_id)
  );
  assign auto_in_aw_ready = auto_out_aw_ready & _GEN_5[auto_in_aw_bits_id];
  assign auto_in_w_ready = auto_out_w_ready;
  assign auto_in_b_valid = auto_out_b_valid;
  assign auto_in_b_bits_id = auto_out_b_bits_id;
  assign auto_in_b_bits_resp = auto_out_b_bits_resp;
  assign auto_in_b_bits_echo_tl_state_size = _GEN_8[auto_out_b_bits_id];
  assign auto_in_b_bits_echo_tl_state_source = _GEN_9[auto_out_b_bits_id];
  assign auto_in_b_bits_echo_extra_id = _GEN_10[auto_out_b_bits_id];
  assign auto_in_ar_ready = auto_out_ar_ready & _GEN[auto_in_ar_bits_id];
  assign auto_in_r_valid = auto_out_r_valid;
  assign auto_in_r_bits_id = auto_out_r_bits_id;
  assign auto_in_r_bits_data = auto_out_r_bits_data;
  assign auto_in_r_bits_resp = auto_out_r_bits_resp;
  assign auto_in_r_bits_echo_tl_state_size = _GEN_0[auto_out_r_bits_id];
  assign auto_in_r_bits_echo_tl_state_source = _GEN_1[auto_out_r_bits_id];
  assign auto_in_r_bits_echo_extra_id = _GEN_2[auto_out_r_bits_id];
  assign auto_in_r_bits_last = auto_out_r_bits_last;
  assign auto_out_aw_valid = auto_in_aw_valid & _GEN_5[auto_in_aw_bits_id];
  assign auto_out_aw_bits_id = auto_in_aw_bits_id;
  assign auto_out_aw_bits_addr = auto_in_aw_bits_addr;
  assign auto_out_aw_bits_len = auto_in_aw_bits_len;
  assign auto_out_aw_bits_size = auto_in_aw_bits_size;
  assign auto_out_aw_bits_burst = auto_in_aw_bits_burst;
  assign auto_out_aw_bits_lock = auto_in_aw_bits_lock;
  assign auto_out_aw_bits_cache = auto_in_aw_bits_cache;
  assign auto_out_aw_bits_prot = auto_in_aw_bits_prot;
  assign auto_out_aw_bits_qos = auto_in_aw_bits_qos;
  assign auto_out_w_valid = auto_in_w_valid;
  assign auto_out_w_bits_data = auto_in_w_bits_data;
  assign auto_out_w_bits_strb = auto_in_w_bits_strb;
  assign auto_out_w_bits_last = auto_in_w_bits_last;
  assign auto_out_b_ready = auto_in_b_ready;
  assign auto_out_ar_valid = auto_in_ar_valid & _GEN[auto_in_ar_bits_id];
  assign auto_out_ar_bits_id = auto_in_ar_bits_id;
  assign auto_out_ar_bits_addr = auto_in_ar_bits_addr;
  assign auto_out_ar_bits_len = auto_in_ar_bits_len;
  assign auto_out_ar_bits_size = auto_in_ar_bits_size;
  assign auto_out_ar_bits_burst = auto_in_ar_bits_burst;
  assign auto_out_ar_bits_lock = auto_in_ar_bits_lock;
  assign auto_out_ar_bits_cache = auto_in_ar_bits_cache;
  assign auto_out_ar_bits_prot = auto_in_ar_bits_prot;
  assign auto_out_ar_bits_qos = auto_in_ar_bits_qos;
  assign auto_out_r_ready = auto_in_r_ready;
endmodule

module AXI4IdIndexer_2(
  input         auto_in_aw_valid,
  input  [6:0]  auto_in_aw_bits_id,
  input  [31:0] auto_in_aw_bits_addr,
  input  [7:0]  auto_in_aw_bits_len,
  input  [2:0]  auto_in_aw_bits_size,
  input  [1:0]  auto_in_aw_bits_burst,
  input         auto_in_aw_bits_lock,
  input  [3:0]  auto_in_aw_bits_cache,
  input  [2:0]  auto_in_aw_bits_prot,
  input  [3:0]  auto_in_aw_bits_qos,
                auto_in_aw_bits_echo_tl_state_size,
  input  [6:0]  auto_in_aw_bits_echo_tl_state_source,
  input         auto_in_w_valid,
  input  [63:0] auto_in_w_bits_data,
  input  [7:0]  auto_in_w_bits_strb,
  input         auto_in_w_bits_last,
                auto_in_b_ready,
                auto_in_ar_valid,
  input  [6:0]  auto_in_ar_bits_id,
  input  [31:0] auto_in_ar_bits_addr,
  input  [7:0]  auto_in_ar_bits_len,
  input  [2:0]  auto_in_ar_bits_size,
  input  [1:0]  auto_in_ar_bits_burst,
  input         auto_in_ar_bits_lock,
  input  [3:0]  auto_in_ar_bits_cache,
  input  [2:0]  auto_in_ar_bits_prot,
  input  [3:0]  auto_in_ar_bits_qos,
                auto_in_ar_bits_echo_tl_state_size,
  input  [6:0]  auto_in_ar_bits_echo_tl_state_source,
  input         auto_in_r_ready,
                auto_out_aw_ready,
                auto_out_w_ready,
                auto_out_b_valid,
  input  [3:0]  auto_out_b_bits_id,
  input  [1:0]  auto_out_b_bits_resp,
  input  [3:0]  auto_out_b_bits_echo_tl_state_size,
  input  [6:0]  auto_out_b_bits_echo_tl_state_source,
  input  [2:0]  auto_out_b_bits_echo_extra_id,
  input         auto_out_ar_ready,
                auto_out_r_valid,
  input  [3:0]  auto_out_r_bits_id,
  input  [63:0] auto_out_r_bits_data,
  input  [1:0]  auto_out_r_bits_resp,
  input  [3:0]  auto_out_r_bits_echo_tl_state_size,
  input  [6:0]  auto_out_r_bits_echo_tl_state_source,
  input  [2:0]  auto_out_r_bits_echo_extra_id,
  input         auto_out_r_bits_last,
  output        auto_in_aw_ready,
                auto_in_w_ready,
                auto_in_b_valid,
  output [6:0]  auto_in_b_bits_id,
  output [1:0]  auto_in_b_bits_resp,
  output [3:0]  auto_in_b_bits_echo_tl_state_size,
  output [6:0]  auto_in_b_bits_echo_tl_state_source,
  output        auto_in_ar_ready,
                auto_in_r_valid,
  output [6:0]  auto_in_r_bits_id,
  output [63:0] auto_in_r_bits_data,
  output [1:0]  auto_in_r_bits_resp,
  output [3:0]  auto_in_r_bits_echo_tl_state_size,
  output [6:0]  auto_in_r_bits_echo_tl_state_source,
  output        auto_in_r_bits_last,
                auto_out_aw_valid,
  output [3:0]  auto_out_aw_bits_id,
  output [31:0] auto_out_aw_bits_addr,
  output [7:0]  auto_out_aw_bits_len,
  output [2:0]  auto_out_aw_bits_size,
  output [1:0]  auto_out_aw_bits_burst,
  output        auto_out_aw_bits_lock,
  output [3:0]  auto_out_aw_bits_cache,
  output [2:0]  auto_out_aw_bits_prot,
  output [3:0]  auto_out_aw_bits_qos,
                auto_out_aw_bits_echo_tl_state_size,
  output [6:0]  auto_out_aw_bits_echo_tl_state_source,
  output [2:0]  auto_out_aw_bits_echo_extra_id,
  output        auto_out_w_valid,
  output [63:0] auto_out_w_bits_data,
  output [7:0]  auto_out_w_bits_strb,
  output        auto_out_w_bits_last,
                auto_out_b_ready,
                auto_out_ar_valid,
  output [3:0]  auto_out_ar_bits_id,
  output [31:0] auto_out_ar_bits_addr,
  output [7:0]  auto_out_ar_bits_len,
  output [2:0]  auto_out_ar_bits_size,
  output [1:0]  auto_out_ar_bits_burst,
  output        auto_out_ar_bits_lock,
  output [3:0]  auto_out_ar_bits_cache,
  output [2:0]  auto_out_ar_bits_prot,
  output [3:0]  auto_out_ar_bits_qos,
                auto_out_ar_bits_echo_tl_state_size,
  output [6:0]  auto_out_ar_bits_echo_tl_state_source,
  output [2:0]  auto_out_ar_bits_echo_extra_id,
  output        auto_out_r_ready
);

  assign auto_in_aw_ready = auto_out_aw_ready;
  assign auto_in_w_ready = auto_out_w_ready;
  assign auto_in_b_valid = auto_out_b_valid;
  assign auto_in_b_bits_id = {auto_out_b_bits_echo_extra_id, auto_out_b_bits_id};
  assign auto_in_b_bits_resp = auto_out_b_bits_resp;
  assign auto_in_b_bits_echo_tl_state_size = auto_out_b_bits_echo_tl_state_size;
  assign auto_in_b_bits_echo_tl_state_source = auto_out_b_bits_echo_tl_state_source;
  assign auto_in_ar_ready = auto_out_ar_ready;
  assign auto_in_r_valid = auto_out_r_valid;
  assign auto_in_r_bits_id = {auto_out_r_bits_echo_extra_id, auto_out_r_bits_id};
  assign auto_in_r_bits_data = auto_out_r_bits_data;
  assign auto_in_r_bits_resp = auto_out_r_bits_resp;
  assign auto_in_r_bits_echo_tl_state_size = auto_out_r_bits_echo_tl_state_size;
  assign auto_in_r_bits_echo_tl_state_source = auto_out_r_bits_echo_tl_state_source;
  assign auto_in_r_bits_last = auto_out_r_bits_last;
  assign auto_out_aw_valid = auto_in_aw_valid;
  assign auto_out_aw_bits_id = auto_in_aw_bits_id[3:0];
  assign auto_out_aw_bits_addr = auto_in_aw_bits_addr;
  assign auto_out_aw_bits_len = auto_in_aw_bits_len;
  assign auto_out_aw_bits_size = auto_in_aw_bits_size;
  assign auto_out_aw_bits_burst = auto_in_aw_bits_burst;
  assign auto_out_aw_bits_lock = auto_in_aw_bits_lock;
  assign auto_out_aw_bits_cache = auto_in_aw_bits_cache;
  assign auto_out_aw_bits_prot = auto_in_aw_bits_prot;
  assign auto_out_aw_bits_qos = auto_in_aw_bits_qos;
  assign auto_out_aw_bits_echo_tl_state_size = auto_in_aw_bits_echo_tl_state_size;
  assign auto_out_aw_bits_echo_tl_state_source = auto_in_aw_bits_echo_tl_state_source;
  assign auto_out_aw_bits_echo_extra_id = auto_in_aw_bits_id[6:4];
  assign auto_out_w_valid = auto_in_w_valid;
  assign auto_out_w_bits_data = auto_in_w_bits_data;
  assign auto_out_w_bits_strb = auto_in_w_bits_strb;
  assign auto_out_w_bits_last = auto_in_w_bits_last;
  assign auto_out_b_ready = auto_in_b_ready;
  assign auto_out_ar_valid = auto_in_ar_valid;
  assign auto_out_ar_bits_id = auto_in_ar_bits_id[3:0];
  assign auto_out_ar_bits_addr = auto_in_ar_bits_addr;
  assign auto_out_ar_bits_len = auto_in_ar_bits_len;
  assign auto_out_ar_bits_size = auto_in_ar_bits_size;
  assign auto_out_ar_bits_burst = auto_in_ar_bits_burst;
  assign auto_out_ar_bits_lock = auto_in_ar_bits_lock;
  assign auto_out_ar_bits_cache = auto_in_ar_bits_cache;
  assign auto_out_ar_bits_prot = auto_in_ar_bits_prot;
  assign auto_out_ar_bits_qos = auto_in_ar_bits_qos;
  assign auto_out_ar_bits_echo_tl_state_size = auto_in_ar_bits_echo_tl_state_size;
  assign auto_out_ar_bits_echo_tl_state_source = auto_in_ar_bits_echo_tl_state_source;
  assign auto_out_ar_bits_echo_extra_id = auto_in_ar_bits_id[6:4];
  assign auto_out_r_ready = auto_in_r_ready;
endmodule

module TLMonitor_19(
  input        clock,
               reset,
               io_in_a_ready,
               io_in_a_valid,
  input [2:0]  io_in_a_bits_opcode,
               io_in_a_bits_param,
               io_in_a_bits_size,
  input [6:0]  io_in_a_bits_source,
  input [31:0] io_in_a_bits_address,
  input [7:0]  io_in_a_bits_mask,
  input        io_in_d_ready,
               io_in_d_valid,
  input [2:0]  io_in_d_bits_opcode,
               io_in_d_bits_size,
  input [6:0]  io_in_d_bits_source,
  input        io_in_d_bits_denied,
               io_in_d_bits_corrupt
);

  wire [31:0]  _plusarg_reader_1_out;
  wire [31:0]  _plusarg_reader_out;
  wire [12:0]  _GEN = 13'h3F << io_in_a_bits_size;
  wire         _GEN_0 = io_in_a_ready & io_in_a_valid;
  reg  [2:0]   a_first_counter;
  reg  [2:0]   opcode;
  reg  [2:0]   param;
  reg  [2:0]   size;
  reg  [6:0]   source;
  reg  [31:0]  address;
  reg  [2:0]   d_first_counter;
  reg  [2:0]   opcode_1;
  reg  [1:0]   param_1;
  reg  [2:0]   size_1;
  reg  [6:0]   source_1;
  reg          sink;
  reg          denied;
  reg  [127:0] inflight;
  reg  [511:0] inflight_opcodes;
  reg  [511:0] inflight_sizes;
  reg  [2:0]   a_first_counter_1;
  wire         a_first_1 = a_first_counter_1 == 3'h0;
  reg  [2:0]   d_first_counter_1;
  wire         d_first_1 = d_first_counter_1 == 3'h0;
  wire [127:0] _GEN_1 = {121'h0, io_in_a_bits_source};
  wire [127:0] _GEN_2 = 128'h1 << _GEN_1;
  wire         _GEN_3 = _GEN_0 & a_first_1;
  wire         d_release_ack = io_in_d_bits_opcode == 3'h6;
  wire [127:0] _GEN_4 = {121'h0, io_in_d_bits_source};
  wire [127:0] _GEN_5 = 128'h1 << _GEN_4;
  reg  [31:0]  watchdog;
  reg  [127:0] inflight_1;
  reg  [511:0] inflight_sizes_1;
  reg  [2:0]   d_first_counter_2;
  wire         d_first_2 = d_first_counter_2 == 3'h0;
  reg  [31:0]  watchdog_1;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      automatic logic [7:0][2:0] _GEN_6 =
        '{3'h4, 3'h5, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic [7:0][2:0] _GEN_7 =
        '{3'h4, 3'h4, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic [5:0]      _GEN_8 = io_in_a_bits_address[5:0] & ~(_GEN[5:0]);
      automatic logic            _GEN_9 = io_in_a_bits_size > 3'h2;
      automatic logic            mask_size = io_in_a_bits_size[1:0] == 2'h2;
      automatic logic            mask_acc =
        _GEN_9 | mask_size & ~(io_in_a_bits_address[2]);
      automatic logic            mask_acc_1 =
        _GEN_9 | mask_size & io_in_a_bits_address[2];
      automatic logic            mask_size_1 = io_in_a_bits_size[1:0] == 2'h1;
      automatic logic            mask_eq_2 =
        ~(io_in_a_bits_address[2]) & ~(io_in_a_bits_address[1]);
      automatic logic            mask_acc_2 = mask_acc | mask_size_1 & mask_eq_2;
      automatic logic            mask_eq_3 =
        ~(io_in_a_bits_address[2]) & io_in_a_bits_address[1];
      automatic logic            mask_acc_3 = mask_acc | mask_size_1 & mask_eq_3;
      automatic logic            mask_eq_4 =
        io_in_a_bits_address[2] & ~(io_in_a_bits_address[1]);
      automatic logic            mask_acc_4 = mask_acc_1 | mask_size_1 & mask_eq_4;
      automatic logic            mask_eq_5 =
        io_in_a_bits_address[2] & io_in_a_bits_address[1];
      automatic logic            mask_acc_5 = mask_acc_1 | mask_size_1 & mask_eq_5;
      automatic logic [7:0]      mask =
        {mask_acc_5 | mask_eq_5 & io_in_a_bits_address[0],
         mask_acc_5 | mask_eq_5 & ~(io_in_a_bits_address[0]),
         mask_acc_4 | mask_eq_4 & io_in_a_bits_address[0],
         mask_acc_4 | mask_eq_4 & ~(io_in_a_bits_address[0]),
         mask_acc_3 | mask_eq_3 & io_in_a_bits_address[0],
         mask_acc_3 | mask_eq_3 & ~(io_in_a_bits_address[0]),
         mask_acc_2 | mask_eq_2 & io_in_a_bits_address[0],
         mask_acc_2 | mask_eq_2 & ~(io_in_a_bits_address[0])};
      automatic logic            _GEN_10 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_11 = io_in_a_bits_param > 3'h2;
      automatic logic            _GEN_12 = io_in_a_bits_mask != 8'hFF;
      automatic logic            _GEN_13 =
        io_in_a_valid & (&io_in_a_bits_opcode) & ~reset;
      automatic logic            _GEN_14 =
        io_in_a_bits_size != 3'h7 & io_in_a_bits_address[31:28] == 4'h8;
      automatic logic            _GEN_15 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_16 = io_in_a_bits_mask != mask;
      automatic logic            _GEN_17 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_18 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_19 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_20 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h3 & ~reset;
      automatic logic            _GEN_21 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h5 & ~reset;
      automatic logic            _GEN_22 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_23 = io_in_d_bits_size < 3'h3;
      automatic logic            _GEN_24 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_25 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h5 & ~reset;
      automatic logic            _GEN_26 = ~io_in_d_bits_denied | io_in_d_bits_corrupt;
      automatic logic            _GEN_27 = io_in_a_valid & (|a_first_counter) & ~reset;
      automatic logic            _GEN_28 = io_in_d_valid & (|d_first_counter) & ~reset;
      automatic logic [511:0]    _GEN_29 = {503'h0, io_in_d_bits_source, 2'h0};
      automatic logic [511:0]    _GEN_30 = inflight_opcodes >> _GEN_29;
      automatic logic            _GEN_31 = io_in_a_valid & a_first_1;
      automatic logic [127:0]    a_set_wo_ready = _GEN_31 ? _GEN_2 : 128'h0;
      automatic logic            _GEN_32 = io_in_d_valid & d_first_1;
      automatic logic            _GEN_33 = _GEN_32 & ~d_release_ack;
      automatic logic            _GEN_34 = io_in_a_bits_source == io_in_d_bits_source;
      automatic logic            same_cycle_resp = _GEN_31 & _GEN_34;
      automatic logic            _GEN_35 = _GEN_33 & same_cycle_resp & ~reset;
      automatic logic            _GEN_36 = _GEN_33 & ~same_cycle_resp & ~reset;
      automatic logic            _GEN_37 =
        io_in_d_valid & d_first_2 & d_release_ack & ~reset;
      automatic logic [127:0]    _GEN_38 = inflight >> _GEN_1;
      automatic logic [127:0]    _GEN_39 = inflight >> _GEN_4;
      automatic logic [511:0]    _GEN_40 = inflight_sizes >> _GEN_29;
      automatic logic [127:0]    _GEN_41 = inflight_1 >> _GEN_4;
      automatic logic [511:0]    _GEN_42 = inflight_sizes_1 >> _GEN_29;
      if (_GEN_10) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_10 & ~_GEN_9) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_10 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_10 & _GEN_11) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock carries invalid grow param (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_10 & _GEN_12) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_13) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_13 & ~_GEN_9) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_13 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_13 & _GEN_11) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm carries invalid grow param (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_13 & ~(|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_13 & _GEN_12) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & ~_GEN_14) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get address not aligned to size (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get carries invalid param (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & _GEN_16) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get contains invalid mask (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & ~_GEN_14) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull address not aligned to size (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull carries invalid param (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & _GEN_16) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull contains invalid mask (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & ~_GEN_14) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial address not aligned to size (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial carries invalid param (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & (|(io_in_a_bits_mask & ~mask))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial contains invalid mask (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & io_in_a_bits_param > 3'h4) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & _GEN_16) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical address not aligned to size (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & io_in_a_bits_param[2]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical carries invalid opcode param (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & _GEN_16) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical contains invalid mask (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_21) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_21 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint address not aligned to size (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_21 & (|(io_in_a_bits_param[2:1]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint carries invalid opcode param (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_21 & _GEN_16) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint contains invalid mask (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & ~reset & (&io_in_d_bits_opcode)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel has invalid opcode (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & _GEN_23) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck is corrupt (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & io_in_d_bits_denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck is denied (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_24) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid sink ID (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_24 & _GEN_23) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant smaller than a beat (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_24 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant is corrupt (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid sink ID (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25 & _GEN_23) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData smaller than a beat (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25 & ~_GEN_26) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData is denied but not corrupt (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & io_in_d_bits_opcode == 3'h0 & ~reset
          & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck is corrupt (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & io_in_d_bits_opcode == 3'h1 & ~reset & ~_GEN_26) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData is denied but not corrupt (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & io_in_d_bits_opcode == 3'h2 & ~reset
          & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck is corrupt (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & io_in_a_bits_opcode != opcode) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel opcode changed within multibeat operation (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & io_in_a_bits_param != param) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel param changed within multibeat operation (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & io_in_a_bits_size != size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel size changed within multibeat operation (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & io_in_a_bits_source != source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel source changed within multibeat operation (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & io_in_a_bits_address != address) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel address changed with multibeat operation (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & io_in_d_bits_opcode != opcode_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel opcode changed within multibeat operation (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & (|param_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel param changed within multibeat operation (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & io_in_d_bits_size != size_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel size changed within multibeat operation (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & io_in_d_bits_source != source_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel source changed within multibeat operation (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & sink) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel sink changed with multibeat operation (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & io_in_d_bits_denied != denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel denied changed with multibeat operation (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_3 & ~reset & _GEN_38[0]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel re-used a source ID (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_33 & ~reset & ~(_GEN_39[0] | same_cycle_resp)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_35
          & ~(io_in_d_bits_opcode == _GEN_7[io_in_a_bits_opcode]
              | io_in_d_bits_opcode == _GEN_6[io_in_a_bits_opcode])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_35 & io_in_a_bits_size != io_in_d_bits_size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_36
          & ~(io_in_d_bits_opcode == _GEN_7[_GEN_30[3:1]]
              | io_in_d_bits_opcode == _GEN_6[_GEN_30[3:1]])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_36 & io_in_d_bits_size != _GEN_40[3:1]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & a_first_1 & io_in_a_valid & _GEN_34 & ~d_release_ack & ~reset
          & ~(~io_in_d_ready | io_in_a_ready)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ready check\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(a_set_wo_ready != (_GEN_33 ? _GEN_5 : 128'h0)
              | a_set_wo_ready == 128'h0)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' and 'D' concurrent, despite minlatency > 0 (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight == 128'h0 | _plusarg_reader_out == 32'h0
              | watchdog < _plusarg_reader_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & ~(_GEN_41[0])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & io_in_d_bits_size != _GEN_42[3:1]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight_1 == 128'h0 | _plusarg_reader_1_out == 32'h0
              | watchdog_1 < _plusarg_reader_1_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/subsystem/Ports.scala:112:9)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    automatic logic _GEN_43;
    automatic logic _GEN_44;
    _GEN_43 = io_in_d_ready & io_in_d_valid;
    _GEN_44 = _GEN_43 & ~(|d_first_counter);
    if (reset) begin
      a_first_counter <= 3'h0;
      d_first_counter <= 3'h0;
      inflight <= 128'h0;
      inflight_opcodes <= 512'h0;
      inflight_sizes <= 512'h0;
      a_first_counter_1 <= 3'h0;
      d_first_counter_1 <= 3'h0;
      watchdog <= 32'h0;
      inflight_1 <= 128'h0;
      inflight_sizes_1 <= 512'h0;
      d_first_counter_2 <= 3'h0;
      watchdog_1 <= 32'h0;
    end
    else begin
      automatic logic [1026:0] _GEN_45 = {1018'h0, io_in_a_bits_source, 2'h0};
      automatic logic          _GEN_46;
      automatic logic [1038:0] _GEN_47 = 1039'hF << {1030'h0, io_in_d_bits_source, 2'h0};
      automatic logic [511:0]  d_sizes_clr;
      automatic logic          _GEN_48;
      automatic logic [1026:0] _GEN_49 =
        {1023'h0, _GEN_3 ? {io_in_a_bits_opcode, 1'h1} : 4'h0} << _GEN_45;
      automatic logic [1026:0] _GEN_50 =
        {1023'h0, _GEN_3 ? {io_in_a_bits_size, 1'h1} : 4'h0} << _GEN_45;
      _GEN_46 = _GEN_43 & d_first_1 & ~d_release_ack;
      d_sizes_clr = _GEN_46 ? _GEN_47[511:0] : 512'h0;
      _GEN_48 = _GEN_43 & d_first_2 & d_release_ack;
      if (_GEN_0) begin
        if (|a_first_counter)
          a_first_counter <= a_first_counter - 3'h1;
        else if (io_in_a_bits_opcode[2])
          a_first_counter <= 3'h0;
        else
          a_first_counter <= ~(_GEN[5:3]);
        if (a_first_1) begin
          if (io_in_a_bits_opcode[2])
            a_first_counter_1 <= 3'h0;
          else
            a_first_counter_1 <= ~(_GEN[5:3]);
        end
        else
          a_first_counter_1 <= a_first_counter_1 - 3'h1;
      end
      if (_GEN_43) begin
        automatic logic [12:0] _GEN_51 = 13'h3F << io_in_d_bits_size;
        if (|d_first_counter)
          d_first_counter <= d_first_counter - 3'h1;
        else if (io_in_d_bits_opcode[0])
          d_first_counter <= ~(_GEN_51[5:3]);
        else
          d_first_counter <= 3'h0;
        if (d_first_1) begin
          if (io_in_d_bits_opcode[0])
            d_first_counter_1 <= ~(_GEN_51[5:3]);
          else
            d_first_counter_1 <= 3'h0;
        end
        else
          d_first_counter_1 <= d_first_counter_1 - 3'h1;
        if (d_first_2) begin
          if (io_in_d_bits_opcode[0])
            d_first_counter_2 <= ~(_GEN_51[5:3]);
          else
            d_first_counter_2 <= 3'h0;
        end
        else
          d_first_counter_2 <= d_first_counter_2 - 3'h1;
        watchdog_1 <= 32'h0;
      end
      else
        watchdog_1 <= watchdog_1 + 32'h1;
      inflight <= (inflight | (_GEN_3 ? _GEN_2 : 128'h0)) & ~(_GEN_46 ? _GEN_5 : 128'h0);
      inflight_opcodes <=
        (inflight_opcodes | (_GEN_3 ? _GEN_49[511:0] : 512'h0)) & ~d_sizes_clr;
      inflight_sizes <=
        (inflight_sizes | (_GEN_3 ? _GEN_50[511:0] : 512'h0)) & ~d_sizes_clr;
      if (_GEN_0 | _GEN_43)
        watchdog <= 32'h0;
      else
        watchdog <= watchdog + 32'h1;
      inflight_1 <= inflight_1 & ~(_GEN_48 ? _GEN_5 : 128'h0);
      inflight_sizes_1 <= inflight_sizes_1 & ~(_GEN_48 ? _GEN_47[511:0] : 512'h0);
    end
    if (_GEN_0 & ~(|a_first_counter)) begin
      opcode <= io_in_a_bits_opcode;
      param <= io_in_a_bits_param;
      size <= io_in_a_bits_size;
      source <= io_in_a_bits_source;
      address <= io_in_a_bits_address;
    end
    if (_GEN_44) begin
      opcode_1 <= io_in_d_bits_opcode;
      param_1 <= 2'h0;
      size_1 <= io_in_d_bits_size;
      source_1 <= io_in_d_bits_source;
      denied <= io_in_d_bits_denied;
    end
    sink <= ~_GEN_44 & sink;
  end // always @(posedge)
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader (
    .out (_plusarg_reader_out)
  );
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader_1 (
    .out (_plusarg_reader_1_out)
  );
endmodule

module Queue1_AXI4BundleARW_1(
  input         clock,
                reset,
                io_enq_valid,
  input  [6:0]  io_enq_bits_id,
  input  [31:0] io_enq_bits_addr,
  input  [7:0]  io_enq_bits_len,
  input  [2:0]  io_enq_bits_size,
  input  [3:0]  io_enq_bits_cache,
  input  [2:0]  io_enq_bits_prot,
  input  [3:0]  io_enq_bits_echo_tl_state_size,
  input  [6:0]  io_enq_bits_echo_tl_state_source,
  input         io_enq_bits_wen,
                io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
  output [6:0]  io_deq_bits_id,
  output [31:0] io_deq_bits_addr,
  output [7:0]  io_deq_bits_len,
  output [2:0]  io_deq_bits_size,
  output [1:0]  io_deq_bits_burst,
  output        io_deq_bits_lock,
  output [3:0]  io_deq_bits_cache,
  output [2:0]  io_deq_bits_prot,
  output [3:0]  io_deq_bits_qos,
                io_deq_bits_echo_tl_state_size,
  output [6:0]  io_deq_bits_echo_tl_state_source,
  output        io_deq_bits_wen
);

  reg  [75:0] ram;
  reg         full;
  wire        _io_deq_valid_output = io_enq_valid | full;
  wire        do_enq = ~(~full & io_deq_ready) & ~full & io_enq_valid;
  always @(posedge clock) begin
    if (do_enq)
      ram <=
        {io_enq_bits_wen,
         io_enq_bits_echo_tl_state_source,
         io_enq_bits_echo_tl_state_size,
         4'h0,
         io_enq_bits_prot,
         io_enq_bits_cache,
         3'h1,
         io_enq_bits_size,
         io_enq_bits_len,
         io_enq_bits_addr,
         io_enq_bits_id};
    if (reset)
      full <= 1'h0;
    else if (do_enq != (full & io_deq_ready & _io_deq_valid_output))
      full <= do_enq;
  end // always @(posedge)
  assign io_enq_ready = ~full;
  assign io_deq_valid = _io_deq_valid_output;
  assign io_deq_bits_id = full ? ram[6:0] : io_enq_bits_id;
  assign io_deq_bits_addr = full ? ram[38:7] : io_enq_bits_addr;
  assign io_deq_bits_len = full ? ram[46:39] : io_enq_bits_len;
  assign io_deq_bits_size = full ? ram[49:47] : io_enq_bits_size;
  assign io_deq_bits_burst = full ? ram[51:50] : 2'h1;
  assign io_deq_bits_lock = full & ram[52];
  assign io_deq_bits_cache = full ? ram[56:53] : io_enq_bits_cache;
  assign io_deq_bits_prot = full ? ram[59:57] : io_enq_bits_prot;
  assign io_deq_bits_qos = full ? ram[63:60] : 4'h0;
  assign io_deq_bits_echo_tl_state_size =
    full ? ram[67:64] : io_enq_bits_echo_tl_state_size;
  assign io_deq_bits_echo_tl_state_source =
    full ? ram[74:68] : io_enq_bits_echo_tl_state_source;
  assign io_deq_bits_wen = full ? ram[75] : io_enq_bits_wen;
endmodule

module TLToAXI4_1(
  input         clock,
                reset,
                auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
                auto_in_a_bits_param,
                auto_in_a_bits_size,
  input  [6:0]  auto_in_a_bits_source,
  input  [31:0] auto_in_a_bits_address,
  input         auto_in_a_bits_user_amba_prot_bufferable,
                auto_in_a_bits_user_amba_prot_modifiable,
                auto_in_a_bits_user_amba_prot_readalloc,
                auto_in_a_bits_user_amba_prot_writealloc,
                auto_in_a_bits_user_amba_prot_privileged,
                auto_in_a_bits_user_amba_prot_secure,
                auto_in_a_bits_user_amba_prot_fetch,
  input  [7:0]  auto_in_a_bits_mask,
  input  [63:0] auto_in_a_bits_data,
  input         auto_in_d_ready,
                auto_out_aw_ready,
                auto_out_w_ready,
                auto_out_b_valid,
  input  [6:0]  auto_out_b_bits_id,
  input  [1:0]  auto_out_b_bits_resp,
  input  [3:0]  auto_out_b_bits_echo_tl_state_size,
  input  [6:0]  auto_out_b_bits_echo_tl_state_source,
  input         auto_out_ar_ready,
                auto_out_r_valid,
  input  [6:0]  auto_out_r_bits_id,
  input  [63:0] auto_out_r_bits_data,
  input  [1:0]  auto_out_r_bits_resp,
  input  [3:0]  auto_out_r_bits_echo_tl_state_size,
  input  [6:0]  auto_out_r_bits_echo_tl_state_source,
  input         auto_out_r_bits_last,
  output        auto_in_a_ready,
                auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
                auto_in_d_bits_size,
  output [6:0]  auto_in_d_bits_source,
  output        auto_in_d_bits_denied,
  output [63:0] auto_in_d_bits_data,
  output        auto_in_d_bits_corrupt,
                auto_out_aw_valid,
  output [6:0]  auto_out_aw_bits_id,
  output [31:0] auto_out_aw_bits_addr,
  output [7:0]  auto_out_aw_bits_len,
  output [2:0]  auto_out_aw_bits_size,
  output [1:0]  auto_out_aw_bits_burst,
  output        auto_out_aw_bits_lock,
  output [3:0]  auto_out_aw_bits_cache,
  output [2:0]  auto_out_aw_bits_prot,
  output [3:0]  auto_out_aw_bits_qos,
                auto_out_aw_bits_echo_tl_state_size,
  output [6:0]  auto_out_aw_bits_echo_tl_state_source,
  output        auto_out_w_valid,
  output [63:0] auto_out_w_bits_data,
  output [7:0]  auto_out_w_bits_strb,
  output        auto_out_w_bits_last,
                auto_out_b_ready,
                auto_out_ar_valid,
  output [6:0]  auto_out_ar_bits_id,
  output [31:0] auto_out_ar_bits_addr,
  output [7:0]  auto_out_ar_bits_len,
  output [2:0]  auto_out_ar_bits_size,
  output [1:0]  auto_out_ar_bits_burst,
  output        auto_out_ar_bits_lock,
  output [3:0]  auto_out_ar_bits_cache,
  output [2:0]  auto_out_ar_bits_prot,
  output [3:0]  auto_out_ar_bits_qos,
                auto_out_ar_bits_echo_tl_state_size,
  output [6:0]  auto_out_ar_bits_echo_tl_state_source,
  output        auto_out_r_ready
);

  reg               count_128;
  reg               count_127;
  reg               count_126;
  reg               count_125;
  reg               count_124;
  reg               count_123;
  reg               count_122;
  reg               count_121;
  reg               count_120;
  reg               count_119;
  reg               count_118;
  reg               count_117;
  reg               count_116;
  reg               count_115;
  reg               count_114;
  reg               count_113;
  reg               count_112;
  reg               count_111;
  reg               count_110;
  reg               count_109;
  reg               count_108;
  reg               count_107;
  reg               count_106;
  reg               count_105;
  reg               count_104;
  reg               count_103;
  reg               count_102;
  reg               count_101;
  reg               count_100;
  reg               count_99;
  reg               count_98;
  reg               count_97;
  reg               count_96;
  reg               count_95;
  reg               count_94;
  reg               count_93;
  reg               count_92;
  reg               count_91;
  reg               count_90;
  reg               count_89;
  reg               count_88;
  reg               count_87;
  reg               count_86;
  reg               count_85;
  reg               count_84;
  reg               count_83;
  reg               count_82;
  reg               count_81;
  reg               count_80;
  reg               count_79;
  reg               count_78;
  reg               count_77;
  reg               count_76;
  reg               count_75;
  reg               count_74;
  reg               count_73;
  reg               count_72;
  reg               count_71;
  reg               count_70;
  reg               count_69;
  reg               count_68;
  reg               count_67;
  reg               count_66;
  reg               count_65;
  reg               count_64;
  reg               count_63;
  reg               count_62;
  reg               count_61;
  reg               count_60;
  reg               count_59;
  reg               count_58;
  reg               count_57;
  reg               count_56;
  reg               count_55;
  reg               count_54;
  reg               count_53;
  reg               count_52;
  reg               count_51;
  reg               count_50;
  reg               count_49;
  reg               count_48;
  reg               count_47;
  reg               count_46;
  reg               count_45;
  reg               count_44;
  reg               count_43;
  reg               count_42;
  reg               count_41;
  reg               count_40;
  reg               count_39;
  reg               count_38;
  reg               count_37;
  reg               count_36;
  reg               count_35;
  reg               count_34;
  reg               count_33;
  reg               count_32;
  reg               count_31;
  reg               count_30;
  reg               count_29;
  reg               count_28;
  reg               count_27;
  reg               count_26;
  reg               count_25;
  reg               count_24;
  reg               count_23;
  reg               count_22;
  reg               count_21;
  reg               count_20;
  reg               count_19;
  reg               count_18;
  reg               count_17;
  reg               count_16;
  reg               count_15;
  reg               count_14;
  reg               count_13;
  reg               count_12;
  reg               count_11;
  reg               count_10;
  reg               count_9;
  reg               count_8;
  reg               count_7;
  reg               count_6;
  reg               count_5;
  reg               count_4;
  reg               count_3;
  reg               count_2;
  reg               count_1;
  wire              _queue_arw_deq_q_io_enq_ready;
  wire              _queue_arw_deq_q_io_deq_valid;
  wire [6:0]        _queue_arw_deq_q_io_deq_bits_id;
  wire [31:0]       _queue_arw_deq_q_io_deq_bits_addr;
  wire [7:0]        _queue_arw_deq_q_io_deq_bits_len;
  wire [2:0]        _queue_arw_deq_q_io_deq_bits_size;
  wire [1:0]        _queue_arw_deq_q_io_deq_bits_burst;
  wire              _queue_arw_deq_q_io_deq_bits_lock;
  wire [3:0]        _queue_arw_deq_q_io_deq_bits_cache;
  wire [2:0]        _queue_arw_deq_q_io_deq_bits_prot;
  wire [3:0]        _queue_arw_deq_q_io_deq_bits_qos;
  wire [3:0]        _queue_arw_deq_q_io_deq_bits_echo_tl_state_size;
  wire [6:0]        _queue_arw_deq_q_io_deq_bits_echo_tl_state_source;
  wire              _queue_arw_deq_q_io_deq_bits_wen;
  wire              _nodeOut_w_deq_q_io_enq_ready;
  wire [127:0][6:0] _GEN =
    '{7'h7F,
      7'h7E,
      7'h7D,
      7'h7C,
      7'h7B,
      7'h7A,
      7'h79,
      7'h78,
      7'h77,
      7'h76,
      7'h75,
      7'h74,
      7'h73,
      7'h72,
      7'h71,
      7'h70,
      7'h6F,
      7'h6E,
      7'h6D,
      7'h6C,
      7'h6B,
      7'h6A,
      7'h69,
      7'h68,
      7'h67,
      7'h66,
      7'h65,
      7'h64,
      7'h63,
      7'h62,
      7'h61,
      7'h60,
      7'h5F,
      7'h5E,
      7'h5D,
      7'h5C,
      7'h5B,
      7'h5A,
      7'h59,
      7'h58,
      7'h57,
      7'h56,
      7'h55,
      7'h54,
      7'h53,
      7'h52,
      7'h51,
      7'h50,
      7'h4F,
      7'h4E,
      7'h4D,
      7'h4C,
      7'h4B,
      7'h4A,
      7'h49,
      7'h48,
      7'h47,
      7'h46,
      7'h45,
      7'h44,
      7'h43,
      7'h42,
      7'h41,
      7'h40,
      7'h3F,
      7'h3E,
      7'h3D,
      7'h3C,
      7'h3B,
      7'h3A,
      7'h39,
      7'h38,
      7'h37,
      7'h36,
      7'h35,
      7'h34,
      7'h33,
      7'h32,
      7'h31,
      7'h30,
      7'h2F,
      7'h2E,
      7'h2D,
      7'h2C,
      7'h2B,
      7'h2A,
      7'h29,
      7'h28,
      7'h27,
      7'h26,
      7'h25,
      7'h24,
      7'h23,
      7'h22,
      7'h21,
      7'h20,
      7'h1F,
      7'h1E,
      7'h1D,
      7'h1C,
      7'h1B,
      7'h1A,
      7'h19,
      7'h18,
      7'h17,
      7'h16,
      7'h15,
      7'h14,
      7'h13,
      7'h12,
      7'h11,
      7'h10,
      7'hF,
      7'hE,
      7'hD,
      7'hC,
      7'hB,
      7'hA,
      7'h9,
      7'h8,
      7'h7,
      7'h6,
      7'h5,
      7'h4,
      7'h3,
      7'h2,
      7'h1,
      7'h0};
  wire [12:0]       _GEN_0 = 13'h3F << auto_in_a_bits_size;
  reg  [2:0]        counter;
  wire              a_first = counter == 3'h0;
  wire              out_w_bits_last =
    counter == 3'h1 | (auto_in_a_bits_opcode[2] ? 3'h0 : ~(_GEN_0[5:3])) == 3'h0;
  reg               doneAW;
  wire [17:0]       _GEN_1 = 18'h7FF << auto_in_a_bits_size;
  wire [127:0]      _GEN_2 =
    {{count_128},
     {count_127},
     {count_126},
     {count_125},
     {count_124},
     {count_123},
     {count_122},
     {count_121},
     {count_120},
     {count_119},
     {count_118},
     {count_117},
     {count_116},
     {count_115},
     {count_114},
     {count_113},
     {count_112},
     {count_111},
     {count_110},
     {count_109},
     {count_108},
     {count_107},
     {count_106},
     {count_105},
     {count_104},
     {count_103},
     {count_102},
     {count_101},
     {count_100},
     {count_99},
     {count_98},
     {count_97},
     {count_96},
     {count_95},
     {count_94},
     {count_93},
     {count_92},
     {count_91},
     {count_90},
     {count_89},
     {count_88},
     {count_87},
     {count_86},
     {count_85},
     {count_84},
     {count_83},
     {count_82},
     {count_81},
     {count_80},
     {count_79},
     {count_78},
     {count_77},
     {count_76},
     {count_75},
     {count_74},
     {count_73},
     {count_72},
     {count_71},
     {count_70},
     {count_69},
     {count_68},
     {count_67},
     {count_66},
     {count_65},
     {count_64},
     {count_63},
     {count_62},
     {count_61},
     {count_60},
     {count_59},
     {count_58},
     {count_57},
     {count_56},
     {count_55},
     {count_54},
     {count_53},
     {count_52},
     {count_51},
     {count_50},
     {count_49},
     {count_48},
     {count_47},
     {count_46},
     {count_45},
     {count_44},
     {count_43},
     {count_42},
     {count_41},
     {count_40},
     {count_39},
     {count_38},
     {count_37},
     {count_36},
     {count_35},
     {count_34},
     {count_33},
     {count_32},
     {count_31},
     {count_30},
     {count_29},
     {count_28},
     {count_27},
     {count_26},
     {count_25},
     {count_24},
     {count_23},
     {count_22},
     {count_21},
     {count_20},
     {count_19},
     {count_18},
     {count_17},
     {count_16},
     {count_15},
     {count_14},
     {count_13},
     {count_12},
     {count_11},
     {count_10},
     {count_9},
     {count_8},
     {count_7},
     {count_6},
     {count_5},
     {count_4},
     {count_3},
     {count_2},
     {count_1}};
  wire              stall = _GEN_2[auto_in_a_bits_source] & a_first;
  wire              _GEN_3 = doneAW | _queue_arw_deq_q_io_enq_ready;
  wire              nodeIn_a_ready =
    ~stall
    & (auto_in_a_bits_opcode[2]
         ? _queue_arw_deq_q_io_enq_ready
         : _GEN_3 & _nodeOut_w_deq_q_io_enq_ready);
  wire              _GEN_4 = ~stall & auto_in_a_valid;
  wire              out_arw_valid =
    _GEN_4 & (auto_in_a_bits_opcode[2] | ~doneAW & _nodeOut_w_deq_q_io_enq_ready);
  reg               r_holds_d;
  reg  [2:0]        b_delay;
  wire              r_wins = auto_out_r_valid & b_delay != 3'h7 | r_holds_d;
  wire              nodeOut_r_ready = auto_in_d_ready & r_wins;
  wire              nodeOut_b_ready = auto_in_d_ready & ~r_wins;
  wire              nodeIn_d_valid = r_wins ? auto_out_r_valid : auto_out_b_valid;
  reg               r_first;
  reg               r_denied_r;
  wire              r_d_denied = r_first ? (&auto_out_r_bits_resp) : r_denied_r;
  wire [2:0]        nodeIn_d_bits_opcode = {2'h0, r_wins};
  wire [2:0]        nodeIn_d_bits_size =
    r_wins
      ? auto_out_r_bits_echo_tl_state_size[2:0]
      : auto_out_b_bits_echo_tl_state_size[2:0];
  wire [6:0]        nodeIn_d_bits_source =
    r_wins ? auto_out_r_bits_echo_tl_state_source : auto_out_b_bits_echo_tl_state_source;
  wire              nodeIn_d_bits_denied = r_wins ? r_d_denied : (|auto_out_b_bits_resp);
  wire              nodeIn_d_bits_corrupt =
    r_wins & ((|auto_out_r_bits_resp) | r_d_denied);
  wire [6:0]        d_sel_shiftAmount = r_wins ? auto_out_r_bits_id : auto_out_b_bits_id;
  wire              d_last = ~r_wins | auto_out_r_bits_last;
  wire              _GEN_5 = _queue_arw_deq_q_io_enq_ready & out_arw_valid;
  wire              inc = _GEN[auto_in_a_bits_source] == 7'h0 & _GEN_5;
  wire              _GEN_6 = auto_in_d_ready & nodeIn_d_valid;
  wire              dec = d_sel_shiftAmount == 7'h0 & d_last & _GEN_6;
  wire              inc_1 = _GEN[auto_in_a_bits_source] == 7'h1 & _GEN_5;
  wire              dec_1 = d_sel_shiftAmount == 7'h1 & d_last & _GEN_6;
  wire              inc_2 = _GEN[auto_in_a_bits_source] == 7'h2 & _GEN_5;
  wire              dec_2 = d_sel_shiftAmount == 7'h2 & d_last & _GEN_6;
  wire              inc_3 = _GEN[auto_in_a_bits_source] == 7'h3 & _GEN_5;
  wire              dec_3 = d_sel_shiftAmount == 7'h3 & d_last & _GEN_6;
  wire              inc_4 = _GEN[auto_in_a_bits_source] == 7'h4 & _GEN_5;
  wire              dec_4 = d_sel_shiftAmount == 7'h4 & d_last & _GEN_6;
  wire              inc_5 = _GEN[auto_in_a_bits_source] == 7'h5 & _GEN_5;
  wire              dec_5 = d_sel_shiftAmount == 7'h5 & d_last & _GEN_6;
  wire              inc_6 = _GEN[auto_in_a_bits_source] == 7'h6 & _GEN_5;
  wire              dec_6 = d_sel_shiftAmount == 7'h6 & d_last & _GEN_6;
  wire              inc_7 = _GEN[auto_in_a_bits_source] == 7'h7 & _GEN_5;
  wire              dec_7 = d_sel_shiftAmount == 7'h7 & d_last & _GEN_6;
  wire              inc_8 = _GEN[auto_in_a_bits_source] == 7'h8 & _GEN_5;
  wire              dec_8 = d_sel_shiftAmount == 7'h8 & d_last & _GEN_6;
  wire              inc_9 = _GEN[auto_in_a_bits_source] == 7'h9 & _GEN_5;
  wire              dec_9 = d_sel_shiftAmount == 7'h9 & d_last & _GEN_6;
  wire              inc_10 = _GEN[auto_in_a_bits_source] == 7'hA & _GEN_5;
  wire              dec_10 = d_sel_shiftAmount == 7'hA & d_last & _GEN_6;
  wire              inc_11 = _GEN[auto_in_a_bits_source] == 7'hB & _GEN_5;
  wire              dec_11 = d_sel_shiftAmount == 7'hB & d_last & _GEN_6;
  wire              inc_12 = _GEN[auto_in_a_bits_source] == 7'hC & _GEN_5;
  wire              dec_12 = d_sel_shiftAmount == 7'hC & d_last & _GEN_6;
  wire              inc_13 = _GEN[auto_in_a_bits_source] == 7'hD & _GEN_5;
  wire              dec_13 = d_sel_shiftAmount == 7'hD & d_last & _GEN_6;
  wire              inc_14 = _GEN[auto_in_a_bits_source] == 7'hE & _GEN_5;
  wire              dec_14 = d_sel_shiftAmount == 7'hE & d_last & _GEN_6;
  wire              inc_15 = _GEN[auto_in_a_bits_source] == 7'hF & _GEN_5;
  wire              dec_15 = d_sel_shiftAmount == 7'hF & d_last & _GEN_6;
  wire              inc_16 = _GEN[auto_in_a_bits_source] == 7'h10 & _GEN_5;
  wire              dec_16 = d_sel_shiftAmount == 7'h10 & d_last & _GEN_6;
  wire              inc_17 = _GEN[auto_in_a_bits_source] == 7'h11 & _GEN_5;
  wire              dec_17 = d_sel_shiftAmount == 7'h11 & d_last & _GEN_6;
  wire              inc_18 = _GEN[auto_in_a_bits_source] == 7'h12 & _GEN_5;
  wire              dec_18 = d_sel_shiftAmount == 7'h12 & d_last & _GEN_6;
  wire              inc_19 = _GEN[auto_in_a_bits_source] == 7'h13 & _GEN_5;
  wire              dec_19 = d_sel_shiftAmount == 7'h13 & d_last & _GEN_6;
  wire              inc_20 = _GEN[auto_in_a_bits_source] == 7'h14 & _GEN_5;
  wire              dec_20 = d_sel_shiftAmount == 7'h14 & d_last & _GEN_6;
  wire              inc_21 = _GEN[auto_in_a_bits_source] == 7'h15 & _GEN_5;
  wire              dec_21 = d_sel_shiftAmount == 7'h15 & d_last & _GEN_6;
  wire              inc_22 = _GEN[auto_in_a_bits_source] == 7'h16 & _GEN_5;
  wire              dec_22 = d_sel_shiftAmount == 7'h16 & d_last & _GEN_6;
  wire              inc_23 = _GEN[auto_in_a_bits_source] == 7'h17 & _GEN_5;
  wire              dec_23 = d_sel_shiftAmount == 7'h17 & d_last & _GEN_6;
  wire              inc_24 = _GEN[auto_in_a_bits_source] == 7'h18 & _GEN_5;
  wire              dec_24 = d_sel_shiftAmount == 7'h18 & d_last & _GEN_6;
  wire              inc_25 = _GEN[auto_in_a_bits_source] == 7'h19 & _GEN_5;
  wire              dec_25 = d_sel_shiftAmount == 7'h19 & d_last & _GEN_6;
  wire              inc_26 = _GEN[auto_in_a_bits_source] == 7'h1A & _GEN_5;
  wire              dec_26 = d_sel_shiftAmount == 7'h1A & d_last & _GEN_6;
  wire              inc_27 = _GEN[auto_in_a_bits_source] == 7'h1B & _GEN_5;
  wire              dec_27 = d_sel_shiftAmount == 7'h1B & d_last & _GEN_6;
  wire              inc_28 = _GEN[auto_in_a_bits_source] == 7'h1C & _GEN_5;
  wire              dec_28 = d_sel_shiftAmount == 7'h1C & d_last & _GEN_6;
  wire              inc_29 = _GEN[auto_in_a_bits_source] == 7'h1D & _GEN_5;
  wire              dec_29 = d_sel_shiftAmount == 7'h1D & d_last & _GEN_6;
  wire              inc_30 = _GEN[auto_in_a_bits_source] == 7'h1E & _GEN_5;
  wire              dec_30 = d_sel_shiftAmount == 7'h1E & d_last & _GEN_6;
  wire              inc_31 = _GEN[auto_in_a_bits_source] == 7'h1F & _GEN_5;
  wire              dec_31 = d_sel_shiftAmount == 7'h1F & d_last & _GEN_6;
  wire              inc_32 = _GEN[auto_in_a_bits_source] == 7'h20 & _GEN_5;
  wire              dec_32 = d_sel_shiftAmount == 7'h20 & d_last & _GEN_6;
  wire              inc_33 = _GEN[auto_in_a_bits_source] == 7'h21 & _GEN_5;
  wire              dec_33 = d_sel_shiftAmount == 7'h21 & d_last & _GEN_6;
  wire              inc_34 = _GEN[auto_in_a_bits_source] == 7'h22 & _GEN_5;
  wire              dec_34 = d_sel_shiftAmount == 7'h22 & d_last & _GEN_6;
  wire              inc_35 = _GEN[auto_in_a_bits_source] == 7'h23 & _GEN_5;
  wire              dec_35 = d_sel_shiftAmount == 7'h23 & d_last & _GEN_6;
  wire              inc_36 = _GEN[auto_in_a_bits_source] == 7'h24 & _GEN_5;
  wire              dec_36 = d_sel_shiftAmount == 7'h24 & d_last & _GEN_6;
  wire              inc_37 = _GEN[auto_in_a_bits_source] == 7'h25 & _GEN_5;
  wire              dec_37 = d_sel_shiftAmount == 7'h25 & d_last & _GEN_6;
  wire              inc_38 = _GEN[auto_in_a_bits_source] == 7'h26 & _GEN_5;
  wire              dec_38 = d_sel_shiftAmount == 7'h26 & d_last & _GEN_6;
  wire              inc_39 = _GEN[auto_in_a_bits_source] == 7'h27 & _GEN_5;
  wire              dec_39 = d_sel_shiftAmount == 7'h27 & d_last & _GEN_6;
  wire              inc_40 = _GEN[auto_in_a_bits_source] == 7'h28 & _GEN_5;
  wire              dec_40 = d_sel_shiftAmount == 7'h28 & d_last & _GEN_6;
  wire              inc_41 = _GEN[auto_in_a_bits_source] == 7'h29 & _GEN_5;
  wire              dec_41 = d_sel_shiftAmount == 7'h29 & d_last & _GEN_6;
  wire              inc_42 = _GEN[auto_in_a_bits_source] == 7'h2A & _GEN_5;
  wire              dec_42 = d_sel_shiftAmount == 7'h2A & d_last & _GEN_6;
  wire              inc_43 = _GEN[auto_in_a_bits_source] == 7'h2B & _GEN_5;
  wire              dec_43 = d_sel_shiftAmount == 7'h2B & d_last & _GEN_6;
  wire              inc_44 = _GEN[auto_in_a_bits_source] == 7'h2C & _GEN_5;
  wire              dec_44 = d_sel_shiftAmount == 7'h2C & d_last & _GEN_6;
  wire              inc_45 = _GEN[auto_in_a_bits_source] == 7'h2D & _GEN_5;
  wire              dec_45 = d_sel_shiftAmount == 7'h2D & d_last & _GEN_6;
  wire              inc_46 = _GEN[auto_in_a_bits_source] == 7'h2E & _GEN_5;
  wire              dec_46 = d_sel_shiftAmount == 7'h2E & d_last & _GEN_6;
  wire              inc_47 = _GEN[auto_in_a_bits_source] == 7'h2F & _GEN_5;
  wire              dec_47 = d_sel_shiftAmount == 7'h2F & d_last & _GEN_6;
  wire              inc_48 = _GEN[auto_in_a_bits_source] == 7'h30 & _GEN_5;
  wire              dec_48 = d_sel_shiftAmount == 7'h30 & d_last & _GEN_6;
  wire              inc_49 = _GEN[auto_in_a_bits_source] == 7'h31 & _GEN_5;
  wire              dec_49 = d_sel_shiftAmount == 7'h31 & d_last & _GEN_6;
  wire              inc_50 = _GEN[auto_in_a_bits_source] == 7'h32 & _GEN_5;
  wire              dec_50 = d_sel_shiftAmount == 7'h32 & d_last & _GEN_6;
  wire              inc_51 = _GEN[auto_in_a_bits_source] == 7'h33 & _GEN_5;
  wire              dec_51 = d_sel_shiftAmount == 7'h33 & d_last & _GEN_6;
  wire              inc_52 = _GEN[auto_in_a_bits_source] == 7'h34 & _GEN_5;
  wire              dec_52 = d_sel_shiftAmount == 7'h34 & d_last & _GEN_6;
  wire              inc_53 = _GEN[auto_in_a_bits_source] == 7'h35 & _GEN_5;
  wire              dec_53 = d_sel_shiftAmount == 7'h35 & d_last & _GEN_6;
  wire              inc_54 = _GEN[auto_in_a_bits_source] == 7'h36 & _GEN_5;
  wire              dec_54 = d_sel_shiftAmount == 7'h36 & d_last & _GEN_6;
  wire              inc_55 = _GEN[auto_in_a_bits_source] == 7'h37 & _GEN_5;
  wire              dec_55 = d_sel_shiftAmount == 7'h37 & d_last & _GEN_6;
  wire              inc_56 = _GEN[auto_in_a_bits_source] == 7'h38 & _GEN_5;
  wire              dec_56 = d_sel_shiftAmount == 7'h38 & d_last & _GEN_6;
  wire              inc_57 = _GEN[auto_in_a_bits_source] == 7'h39 & _GEN_5;
  wire              dec_57 = d_sel_shiftAmount == 7'h39 & d_last & _GEN_6;
  wire              inc_58 = _GEN[auto_in_a_bits_source] == 7'h3A & _GEN_5;
  wire              dec_58 = d_sel_shiftAmount == 7'h3A & d_last & _GEN_6;
  wire              inc_59 = _GEN[auto_in_a_bits_source] == 7'h3B & _GEN_5;
  wire              dec_59 = d_sel_shiftAmount == 7'h3B & d_last & _GEN_6;
  wire              inc_60 = _GEN[auto_in_a_bits_source] == 7'h3C & _GEN_5;
  wire              dec_60 = d_sel_shiftAmount == 7'h3C & d_last & _GEN_6;
  wire              inc_61 = _GEN[auto_in_a_bits_source] == 7'h3D & _GEN_5;
  wire              dec_61 = d_sel_shiftAmount == 7'h3D & d_last & _GEN_6;
  wire              inc_62 = _GEN[auto_in_a_bits_source] == 7'h3E & _GEN_5;
  wire              dec_62 = d_sel_shiftAmount == 7'h3E & d_last & _GEN_6;
  wire              inc_63 = _GEN[auto_in_a_bits_source] == 7'h3F & _GEN_5;
  wire              dec_63 = d_sel_shiftAmount == 7'h3F & d_last & _GEN_6;
  wire              inc_64 = _GEN[auto_in_a_bits_source] == 7'h40 & _GEN_5;
  wire              dec_64 = d_sel_shiftAmount == 7'h40 & d_last & _GEN_6;
  wire              inc_65 = _GEN[auto_in_a_bits_source] == 7'h41 & _GEN_5;
  wire              dec_65 = d_sel_shiftAmount == 7'h41 & d_last & _GEN_6;
  wire              inc_66 = _GEN[auto_in_a_bits_source] == 7'h42 & _GEN_5;
  wire              dec_66 = d_sel_shiftAmount == 7'h42 & d_last & _GEN_6;
  wire              inc_67 = _GEN[auto_in_a_bits_source] == 7'h43 & _GEN_5;
  wire              dec_67 = d_sel_shiftAmount == 7'h43 & d_last & _GEN_6;
  wire              inc_68 = _GEN[auto_in_a_bits_source] == 7'h44 & _GEN_5;
  wire              dec_68 = d_sel_shiftAmount == 7'h44 & d_last & _GEN_6;
  wire              inc_69 = _GEN[auto_in_a_bits_source] == 7'h45 & _GEN_5;
  wire              dec_69 = d_sel_shiftAmount == 7'h45 & d_last & _GEN_6;
  wire              inc_70 = _GEN[auto_in_a_bits_source] == 7'h46 & _GEN_5;
  wire              dec_70 = d_sel_shiftAmount == 7'h46 & d_last & _GEN_6;
  wire              inc_71 = _GEN[auto_in_a_bits_source] == 7'h47 & _GEN_5;
  wire              dec_71 = d_sel_shiftAmount == 7'h47 & d_last & _GEN_6;
  wire              inc_72 = _GEN[auto_in_a_bits_source] == 7'h48 & _GEN_5;
  wire              dec_72 = d_sel_shiftAmount == 7'h48 & d_last & _GEN_6;
  wire              inc_73 = _GEN[auto_in_a_bits_source] == 7'h49 & _GEN_5;
  wire              dec_73 = d_sel_shiftAmount == 7'h49 & d_last & _GEN_6;
  wire              inc_74 = _GEN[auto_in_a_bits_source] == 7'h4A & _GEN_5;
  wire              dec_74 = d_sel_shiftAmount == 7'h4A & d_last & _GEN_6;
  wire              inc_75 = _GEN[auto_in_a_bits_source] == 7'h4B & _GEN_5;
  wire              dec_75 = d_sel_shiftAmount == 7'h4B & d_last & _GEN_6;
  wire              inc_76 = _GEN[auto_in_a_bits_source] == 7'h4C & _GEN_5;
  wire              dec_76 = d_sel_shiftAmount == 7'h4C & d_last & _GEN_6;
  wire              inc_77 = _GEN[auto_in_a_bits_source] == 7'h4D & _GEN_5;
  wire              dec_77 = d_sel_shiftAmount == 7'h4D & d_last & _GEN_6;
  wire              inc_78 = _GEN[auto_in_a_bits_source] == 7'h4E & _GEN_5;
  wire              dec_78 = d_sel_shiftAmount == 7'h4E & d_last & _GEN_6;
  wire              inc_79 = _GEN[auto_in_a_bits_source] == 7'h4F & _GEN_5;
  wire              dec_79 = d_sel_shiftAmount == 7'h4F & d_last & _GEN_6;
  wire              inc_80 = _GEN[auto_in_a_bits_source] == 7'h50 & _GEN_5;
  wire              dec_80 = d_sel_shiftAmount == 7'h50 & d_last & _GEN_6;
  wire              inc_81 = _GEN[auto_in_a_bits_source] == 7'h51 & _GEN_5;
  wire              dec_81 = d_sel_shiftAmount == 7'h51 & d_last & _GEN_6;
  wire              inc_82 = _GEN[auto_in_a_bits_source] == 7'h52 & _GEN_5;
  wire              dec_82 = d_sel_shiftAmount == 7'h52 & d_last & _GEN_6;
  wire              inc_83 = _GEN[auto_in_a_bits_source] == 7'h53 & _GEN_5;
  wire              dec_83 = d_sel_shiftAmount == 7'h53 & d_last & _GEN_6;
  wire              inc_84 = _GEN[auto_in_a_bits_source] == 7'h54 & _GEN_5;
  wire              dec_84 = d_sel_shiftAmount == 7'h54 & d_last & _GEN_6;
  wire              inc_85 = _GEN[auto_in_a_bits_source] == 7'h55 & _GEN_5;
  wire              dec_85 = d_sel_shiftAmount == 7'h55 & d_last & _GEN_6;
  wire              inc_86 = _GEN[auto_in_a_bits_source] == 7'h56 & _GEN_5;
  wire              dec_86 = d_sel_shiftAmount == 7'h56 & d_last & _GEN_6;
  wire              inc_87 = _GEN[auto_in_a_bits_source] == 7'h57 & _GEN_5;
  wire              dec_87 = d_sel_shiftAmount == 7'h57 & d_last & _GEN_6;
  wire              inc_88 = _GEN[auto_in_a_bits_source] == 7'h58 & _GEN_5;
  wire              dec_88 = d_sel_shiftAmount == 7'h58 & d_last & _GEN_6;
  wire              inc_89 = _GEN[auto_in_a_bits_source] == 7'h59 & _GEN_5;
  wire              dec_89 = d_sel_shiftAmount == 7'h59 & d_last & _GEN_6;
  wire              inc_90 = _GEN[auto_in_a_bits_source] == 7'h5A & _GEN_5;
  wire              dec_90 = d_sel_shiftAmount == 7'h5A & d_last & _GEN_6;
  wire              inc_91 = _GEN[auto_in_a_bits_source] == 7'h5B & _GEN_5;
  wire              dec_91 = d_sel_shiftAmount == 7'h5B & d_last & _GEN_6;
  wire              inc_92 = _GEN[auto_in_a_bits_source] == 7'h5C & _GEN_5;
  wire              dec_92 = d_sel_shiftAmount == 7'h5C & d_last & _GEN_6;
  wire              inc_93 = _GEN[auto_in_a_bits_source] == 7'h5D & _GEN_5;
  wire              dec_93 = d_sel_shiftAmount == 7'h5D & d_last & _GEN_6;
  wire              inc_94 = _GEN[auto_in_a_bits_source] == 7'h5E & _GEN_5;
  wire              dec_94 = d_sel_shiftAmount == 7'h5E & d_last & _GEN_6;
  wire              inc_95 = _GEN[auto_in_a_bits_source] == 7'h5F & _GEN_5;
  wire              dec_95 = d_sel_shiftAmount == 7'h5F & d_last & _GEN_6;
  wire              inc_96 = _GEN[auto_in_a_bits_source] == 7'h60 & _GEN_5;
  wire              dec_96 = d_sel_shiftAmount == 7'h60 & d_last & _GEN_6;
  wire              inc_97 = _GEN[auto_in_a_bits_source] == 7'h61 & _GEN_5;
  wire              dec_97 = d_sel_shiftAmount == 7'h61 & d_last & _GEN_6;
  wire              inc_98 = _GEN[auto_in_a_bits_source] == 7'h62 & _GEN_5;
  wire              dec_98 = d_sel_shiftAmount == 7'h62 & d_last & _GEN_6;
  wire              inc_99 = _GEN[auto_in_a_bits_source] == 7'h63 & _GEN_5;
  wire              dec_99 = d_sel_shiftAmount == 7'h63 & d_last & _GEN_6;
  wire              inc_100 = _GEN[auto_in_a_bits_source] == 7'h64 & _GEN_5;
  wire              dec_100 = d_sel_shiftAmount == 7'h64 & d_last & _GEN_6;
  wire              inc_101 = _GEN[auto_in_a_bits_source] == 7'h65 & _GEN_5;
  wire              dec_101 = d_sel_shiftAmount == 7'h65 & d_last & _GEN_6;
  wire              inc_102 = _GEN[auto_in_a_bits_source] == 7'h66 & _GEN_5;
  wire              dec_102 = d_sel_shiftAmount == 7'h66 & d_last & _GEN_6;
  wire              inc_103 = _GEN[auto_in_a_bits_source] == 7'h67 & _GEN_5;
  wire              dec_103 = d_sel_shiftAmount == 7'h67 & d_last & _GEN_6;
  wire              inc_104 = _GEN[auto_in_a_bits_source] == 7'h68 & _GEN_5;
  wire              dec_104 = d_sel_shiftAmount == 7'h68 & d_last & _GEN_6;
  wire              inc_105 = _GEN[auto_in_a_bits_source] == 7'h69 & _GEN_5;
  wire              dec_105 = d_sel_shiftAmount == 7'h69 & d_last & _GEN_6;
  wire              inc_106 = _GEN[auto_in_a_bits_source] == 7'h6A & _GEN_5;
  wire              dec_106 = d_sel_shiftAmount == 7'h6A & d_last & _GEN_6;
  wire              inc_107 = _GEN[auto_in_a_bits_source] == 7'h6B & _GEN_5;
  wire              dec_107 = d_sel_shiftAmount == 7'h6B & d_last & _GEN_6;
  wire              inc_108 = _GEN[auto_in_a_bits_source] == 7'h6C & _GEN_5;
  wire              dec_108 = d_sel_shiftAmount == 7'h6C & d_last & _GEN_6;
  wire              inc_109 = _GEN[auto_in_a_bits_source] == 7'h6D & _GEN_5;
  wire              dec_109 = d_sel_shiftAmount == 7'h6D & d_last & _GEN_6;
  wire              inc_110 = _GEN[auto_in_a_bits_source] == 7'h6E & _GEN_5;
  wire              dec_110 = d_sel_shiftAmount == 7'h6E & d_last & _GEN_6;
  wire              inc_111 = _GEN[auto_in_a_bits_source] == 7'h6F & _GEN_5;
  wire              dec_111 = d_sel_shiftAmount == 7'h6F & d_last & _GEN_6;
  wire              inc_112 = _GEN[auto_in_a_bits_source] == 7'h70 & _GEN_5;
  wire              dec_112 = d_sel_shiftAmount == 7'h70 & d_last & _GEN_6;
  wire              inc_113 = _GEN[auto_in_a_bits_source] == 7'h71 & _GEN_5;
  wire              dec_113 = d_sel_shiftAmount == 7'h71 & d_last & _GEN_6;
  wire              inc_114 = _GEN[auto_in_a_bits_source] == 7'h72 & _GEN_5;
  wire              dec_114 = d_sel_shiftAmount == 7'h72 & d_last & _GEN_6;
  wire              inc_115 = _GEN[auto_in_a_bits_source] == 7'h73 & _GEN_5;
  wire              dec_115 = d_sel_shiftAmount == 7'h73 & d_last & _GEN_6;
  wire              inc_116 = _GEN[auto_in_a_bits_source] == 7'h74 & _GEN_5;
  wire              dec_116 = d_sel_shiftAmount == 7'h74 & d_last & _GEN_6;
  wire              inc_117 = _GEN[auto_in_a_bits_source] == 7'h75 & _GEN_5;
  wire              dec_117 = d_sel_shiftAmount == 7'h75 & d_last & _GEN_6;
  wire              inc_118 = _GEN[auto_in_a_bits_source] == 7'h76 & _GEN_5;
  wire              dec_118 = d_sel_shiftAmount == 7'h76 & d_last & _GEN_6;
  wire              inc_119 = _GEN[auto_in_a_bits_source] == 7'h77 & _GEN_5;
  wire              dec_119 = d_sel_shiftAmount == 7'h77 & d_last & _GEN_6;
  wire              inc_120 = _GEN[auto_in_a_bits_source] == 7'h78 & _GEN_5;
  wire              dec_120 = d_sel_shiftAmount == 7'h78 & d_last & _GEN_6;
  wire              inc_121 = _GEN[auto_in_a_bits_source] == 7'h79 & _GEN_5;
  wire              dec_121 = d_sel_shiftAmount == 7'h79 & d_last & _GEN_6;
  wire              inc_122 = _GEN[auto_in_a_bits_source] == 7'h7A & _GEN_5;
  wire              dec_122 = d_sel_shiftAmount == 7'h7A & d_last & _GEN_6;
  wire              inc_123 = _GEN[auto_in_a_bits_source] == 7'h7B & _GEN_5;
  wire              dec_123 = d_sel_shiftAmount == 7'h7B & d_last & _GEN_6;
  wire              inc_124 = _GEN[auto_in_a_bits_source] == 7'h7C & _GEN_5;
  wire              dec_124 = d_sel_shiftAmount == 7'h7C & d_last & _GEN_6;
  wire              inc_125 = _GEN[auto_in_a_bits_source] == 7'h7D & _GEN_5;
  wire              dec_125 = d_sel_shiftAmount == 7'h7D & d_last & _GEN_6;
  wire              inc_126 = _GEN[auto_in_a_bits_source] == 7'h7E & _GEN_5;
  wire              dec_126 = d_sel_shiftAmount == 7'h7E & d_last & _GEN_6;
  wire              inc_127 = (&_GEN[auto_in_a_bits_source]) & _GEN_5;
  wire              dec_127 = (&d_sel_shiftAmount) & d_last & _GEN_6;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (~reset & ~(~dec | count_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc | ~count_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_1 | count_2)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_1 | ~count_2)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_2 | count_3)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_2 | ~count_3)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_3 | count_4)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_3 | ~count_4)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_4 | count_5)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_4 | ~count_5)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_5 | count_6)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_5 | ~count_6)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_6 | count_7)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_6 | ~count_7)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_7 | count_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_7 | ~count_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_8 | count_9)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_8 | ~count_9)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_9 | count_10)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_9 | ~count_10)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_10 | count_11)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_10 | ~count_11)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_11 | count_12)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_11 | ~count_12)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_12 | count_13)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_12 | ~count_13)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_13 | count_14)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_13 | ~count_14)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_14 | count_15)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_14 | ~count_15)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_15 | count_16)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_15 | ~count_16)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_16 | count_17)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_16 | ~count_17)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_17 | count_18)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_17 | ~count_18)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_18 | count_19)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_18 | ~count_19)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_19 | count_20)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_19 | ~count_20)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_20 | count_21)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_20 | ~count_21)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_21 | count_22)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_21 | ~count_22)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_22 | count_23)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_22 | ~count_23)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_23 | count_24)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_23 | ~count_24)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_24 | count_25)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_24 | ~count_25)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_25 | count_26)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_25 | ~count_26)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_26 | count_27)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_26 | ~count_27)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_27 | count_28)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_27 | ~count_28)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_28 | count_29)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_28 | ~count_29)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_29 | count_30)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_29 | ~count_30)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_30 | count_31)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_30 | ~count_31)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_31 | count_32)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_31 | ~count_32)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_32 | count_33)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_32 | ~count_33)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_33 | count_34)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_33 | ~count_34)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_34 | count_35)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_34 | ~count_35)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_35 | count_36)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_35 | ~count_36)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_36 | count_37)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_36 | ~count_37)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_37 | count_38)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_37 | ~count_38)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_38 | count_39)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_38 | ~count_39)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_39 | count_40)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_39 | ~count_40)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_40 | count_41)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_40 | ~count_41)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_41 | count_42)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_41 | ~count_42)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_42 | count_43)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_42 | ~count_43)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_43 | count_44)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_43 | ~count_44)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_44 | count_45)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_44 | ~count_45)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_45 | count_46)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_45 | ~count_46)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_46 | count_47)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_46 | ~count_47)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_47 | count_48)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_47 | ~count_48)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_48 | count_49)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_48 | ~count_49)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_49 | count_50)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_49 | ~count_50)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_50 | count_51)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_50 | ~count_51)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_51 | count_52)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_51 | ~count_52)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_52 | count_53)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_52 | ~count_53)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_53 | count_54)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_53 | ~count_54)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_54 | count_55)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_54 | ~count_55)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_55 | count_56)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_55 | ~count_56)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_56 | count_57)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_56 | ~count_57)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_57 | count_58)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_57 | ~count_58)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_58 | count_59)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_58 | ~count_59)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_59 | count_60)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_59 | ~count_60)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_60 | count_61)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_60 | ~count_61)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_61 | count_62)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_61 | ~count_62)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_62 | count_63)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_62 | ~count_63)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_63 | count_64)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_63 | ~count_64)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_64 | count_65)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_64 | ~count_65)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_65 | count_66)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_65 | ~count_66)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_66 | count_67)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_66 | ~count_67)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_67 | count_68)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_67 | ~count_68)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_68 | count_69)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_68 | ~count_69)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_69 | count_70)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_69 | ~count_70)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_70 | count_71)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_70 | ~count_71)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_71 | count_72)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_71 | ~count_72)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_72 | count_73)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_72 | ~count_73)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_73 | count_74)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_73 | ~count_74)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_74 | count_75)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_74 | ~count_75)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_75 | count_76)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_75 | ~count_76)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_76 | count_77)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_76 | ~count_77)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_77 | count_78)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_77 | ~count_78)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_78 | count_79)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_78 | ~count_79)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_79 | count_80)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_79 | ~count_80)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_80 | count_81)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_80 | ~count_81)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_81 | count_82)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_81 | ~count_82)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_82 | count_83)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_82 | ~count_83)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_83 | count_84)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_83 | ~count_84)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_84 | count_85)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_84 | ~count_85)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_85 | count_86)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_85 | ~count_86)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_86 | count_87)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_86 | ~count_87)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_87 | count_88)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_87 | ~count_88)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_88 | count_89)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_88 | ~count_89)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_89 | count_90)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_89 | ~count_90)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_90 | count_91)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_90 | ~count_91)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_91 | count_92)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_91 | ~count_92)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_92 | count_93)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_92 | ~count_93)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_93 | count_94)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_93 | ~count_94)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_94 | count_95)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_94 | ~count_95)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_95 | count_96)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_95 | ~count_96)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_96 | count_97)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_96 | ~count_97)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_97 | count_98)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_97 | ~count_98)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_98 | count_99)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_98 | ~count_99)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_99 | count_100)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_99 | ~count_100)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_100 | count_101)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_100 | ~count_101)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_101 | count_102)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_101 | ~count_102)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_102 | count_103)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_102 | ~count_103)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_103 | count_104)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_103 | ~count_104)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_104 | count_105)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_104 | ~count_105)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_105 | count_106)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_105 | ~count_106)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_106 | count_107)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_106 | ~count_107)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_107 | count_108)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_107 | ~count_108)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_108 | count_109)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_108 | ~count_109)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_109 | count_110)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_109 | ~count_110)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_110 | count_111)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_110 | ~count_111)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_111 | count_112)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_111 | ~count_112)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_112 | count_113)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_112 | ~count_113)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_113 | count_114)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_113 | ~count_114)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_114 | count_115)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_114 | ~count_115)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_115 | count_116)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_115 | ~count_116)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_116 | count_117)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_116 | ~count_117)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_117 | count_118)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_117 | ~count_118)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_118 | count_119)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_118 | ~count_119)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_119 | count_120)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_119 | ~count_120)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_120 | count_121)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_120 | ~count_121)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_121 | count_122)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_121 | ~count_122)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_122 | count_123)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_122 | ~count_123)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_123 | count_124)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_123 | ~count_124)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_124 | count_125)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_124 | ~count_125)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_125 | count_126)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_125 | ~count_126)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_126 | count_127)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_126 | ~count_127)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_127 | count_128)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:280 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_127 | ~count_128)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:281 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    if (reset) begin
      counter <= 3'h0;
      doneAW <= 1'h0;
      r_holds_d <= 1'h0;
      r_first <= 1'h1;
      count_1 <= 1'h0;
      count_2 <= 1'h0;
      count_3 <= 1'h0;
      count_4 <= 1'h0;
      count_5 <= 1'h0;
      count_6 <= 1'h0;
      count_7 <= 1'h0;
      count_8 <= 1'h0;
      count_9 <= 1'h0;
      count_10 <= 1'h0;
      count_11 <= 1'h0;
      count_12 <= 1'h0;
      count_13 <= 1'h0;
      count_14 <= 1'h0;
      count_15 <= 1'h0;
      count_16 <= 1'h0;
      count_17 <= 1'h0;
      count_18 <= 1'h0;
      count_19 <= 1'h0;
      count_20 <= 1'h0;
      count_21 <= 1'h0;
      count_22 <= 1'h0;
      count_23 <= 1'h0;
      count_24 <= 1'h0;
      count_25 <= 1'h0;
      count_26 <= 1'h0;
      count_27 <= 1'h0;
      count_28 <= 1'h0;
      count_29 <= 1'h0;
      count_30 <= 1'h0;
      count_31 <= 1'h0;
      count_32 <= 1'h0;
      count_33 <= 1'h0;
      count_34 <= 1'h0;
      count_35 <= 1'h0;
      count_36 <= 1'h0;
      count_37 <= 1'h0;
      count_38 <= 1'h0;
      count_39 <= 1'h0;
      count_40 <= 1'h0;
      count_41 <= 1'h0;
      count_42 <= 1'h0;
      count_43 <= 1'h0;
      count_44 <= 1'h0;
      count_45 <= 1'h0;
      count_46 <= 1'h0;
      count_47 <= 1'h0;
      count_48 <= 1'h0;
      count_49 <= 1'h0;
      count_50 <= 1'h0;
      count_51 <= 1'h0;
      count_52 <= 1'h0;
      count_53 <= 1'h0;
      count_54 <= 1'h0;
      count_55 <= 1'h0;
      count_56 <= 1'h0;
      count_57 <= 1'h0;
      count_58 <= 1'h0;
      count_59 <= 1'h0;
      count_60 <= 1'h0;
      count_61 <= 1'h0;
      count_62 <= 1'h0;
      count_63 <= 1'h0;
      count_64 <= 1'h0;
      count_65 <= 1'h0;
      count_66 <= 1'h0;
      count_67 <= 1'h0;
      count_68 <= 1'h0;
      count_69 <= 1'h0;
      count_70 <= 1'h0;
      count_71 <= 1'h0;
      count_72 <= 1'h0;
      count_73 <= 1'h0;
      count_74 <= 1'h0;
      count_75 <= 1'h0;
      count_76 <= 1'h0;
      count_77 <= 1'h0;
      count_78 <= 1'h0;
      count_79 <= 1'h0;
      count_80 <= 1'h0;
      count_81 <= 1'h0;
      count_82 <= 1'h0;
      count_83 <= 1'h0;
      count_84 <= 1'h0;
      count_85 <= 1'h0;
      count_86 <= 1'h0;
      count_87 <= 1'h0;
      count_88 <= 1'h0;
      count_89 <= 1'h0;
      count_90 <= 1'h0;
      count_91 <= 1'h0;
      count_92 <= 1'h0;
      count_93 <= 1'h0;
      count_94 <= 1'h0;
      count_95 <= 1'h0;
      count_96 <= 1'h0;
      count_97 <= 1'h0;
      count_98 <= 1'h0;
      count_99 <= 1'h0;
      count_100 <= 1'h0;
      count_101 <= 1'h0;
      count_102 <= 1'h0;
      count_103 <= 1'h0;
      count_104 <= 1'h0;
      count_105 <= 1'h0;
      count_106 <= 1'h0;
      count_107 <= 1'h0;
      count_108 <= 1'h0;
      count_109 <= 1'h0;
      count_110 <= 1'h0;
      count_111 <= 1'h0;
      count_112 <= 1'h0;
      count_113 <= 1'h0;
      count_114 <= 1'h0;
      count_115 <= 1'h0;
      count_116 <= 1'h0;
      count_117 <= 1'h0;
      count_118 <= 1'h0;
      count_119 <= 1'h0;
      count_120 <= 1'h0;
      count_121 <= 1'h0;
      count_122 <= 1'h0;
      count_123 <= 1'h0;
      count_124 <= 1'h0;
      count_125 <= 1'h0;
      count_126 <= 1'h0;
      count_127 <= 1'h0;
      count_128 <= 1'h0;
    end
    else begin
      if (nodeIn_a_ready & auto_in_a_valid) begin
        if (a_first) begin
          if (auto_in_a_bits_opcode[2])
            counter <= 3'h0;
          else
            counter <= ~(_GEN_0[5:3]);
        end
        else
          counter <= counter - 3'h1;
        doneAW <= ~out_w_bits_last;
      end
      if (nodeOut_r_ready & auto_out_r_valid) begin
        r_holds_d <= ~auto_out_r_bits_last;
        r_first <= auto_out_r_bits_last;
      end
      count_1 <= count_1 + inc - dec;
      count_2 <= count_2 + inc_1 - dec_1;
      count_3 <= count_3 + inc_2 - dec_2;
      count_4 <= count_4 + inc_3 - dec_3;
      count_5 <= count_5 + inc_4 - dec_4;
      count_6 <= count_6 + inc_5 - dec_5;
      count_7 <= count_7 + inc_6 - dec_6;
      count_8 <= count_8 + inc_7 - dec_7;
      count_9 <= count_9 + inc_8 - dec_8;
      count_10 <= count_10 + inc_9 - dec_9;
      count_11 <= count_11 + inc_10 - dec_10;
      count_12 <= count_12 + inc_11 - dec_11;
      count_13 <= count_13 + inc_12 - dec_12;
      count_14 <= count_14 + inc_13 - dec_13;
      count_15 <= count_15 + inc_14 - dec_14;
      count_16 <= count_16 + inc_15 - dec_15;
      count_17 <= count_17 + inc_16 - dec_16;
      count_18 <= count_18 + inc_17 - dec_17;
      count_19 <= count_19 + inc_18 - dec_18;
      count_20 <= count_20 + inc_19 - dec_19;
      count_21 <= count_21 + inc_20 - dec_20;
      count_22 <= count_22 + inc_21 - dec_21;
      count_23 <= count_23 + inc_22 - dec_22;
      count_24 <= count_24 + inc_23 - dec_23;
      count_25 <= count_25 + inc_24 - dec_24;
      count_26 <= count_26 + inc_25 - dec_25;
      count_27 <= count_27 + inc_26 - dec_26;
      count_28 <= count_28 + inc_27 - dec_27;
      count_29 <= count_29 + inc_28 - dec_28;
      count_30 <= count_30 + inc_29 - dec_29;
      count_31 <= count_31 + inc_30 - dec_30;
      count_32 <= count_32 + inc_31 - dec_31;
      count_33 <= count_33 + inc_32 - dec_32;
      count_34 <= count_34 + inc_33 - dec_33;
      count_35 <= count_35 + inc_34 - dec_34;
      count_36 <= count_36 + inc_35 - dec_35;
      count_37 <= count_37 + inc_36 - dec_36;
      count_38 <= count_38 + inc_37 - dec_37;
      count_39 <= count_39 + inc_38 - dec_38;
      count_40 <= count_40 + inc_39 - dec_39;
      count_41 <= count_41 + inc_40 - dec_40;
      count_42 <= count_42 + inc_41 - dec_41;
      count_43 <= count_43 + inc_42 - dec_42;
      count_44 <= count_44 + inc_43 - dec_43;
      count_45 <= count_45 + inc_44 - dec_44;
      count_46 <= count_46 + inc_45 - dec_45;
      count_47 <= count_47 + inc_46 - dec_46;
      count_48 <= count_48 + inc_47 - dec_47;
      count_49 <= count_49 + inc_48 - dec_48;
      count_50 <= count_50 + inc_49 - dec_49;
      count_51 <= count_51 + inc_50 - dec_50;
      count_52 <= count_52 + inc_51 - dec_51;
      count_53 <= count_53 + inc_52 - dec_52;
      count_54 <= count_54 + inc_53 - dec_53;
      count_55 <= count_55 + inc_54 - dec_54;
      count_56 <= count_56 + inc_55 - dec_55;
      count_57 <= count_57 + inc_56 - dec_56;
      count_58 <= count_58 + inc_57 - dec_57;
      count_59 <= count_59 + inc_58 - dec_58;
      count_60 <= count_60 + inc_59 - dec_59;
      count_61 <= count_61 + inc_60 - dec_60;
      count_62 <= count_62 + inc_61 - dec_61;
      count_63 <= count_63 + inc_62 - dec_62;
      count_64 <= count_64 + inc_63 - dec_63;
      count_65 <= count_65 + inc_64 - dec_64;
      count_66 <= count_66 + inc_65 - dec_65;
      count_67 <= count_67 + inc_66 - dec_66;
      count_68 <= count_68 + inc_67 - dec_67;
      count_69 <= count_69 + inc_68 - dec_68;
      count_70 <= count_70 + inc_69 - dec_69;
      count_71 <= count_71 + inc_70 - dec_70;
      count_72 <= count_72 + inc_71 - dec_71;
      count_73 <= count_73 + inc_72 - dec_72;
      count_74 <= count_74 + inc_73 - dec_73;
      count_75 <= count_75 + inc_74 - dec_74;
      count_76 <= count_76 + inc_75 - dec_75;
      count_77 <= count_77 + inc_76 - dec_76;
      count_78 <= count_78 + inc_77 - dec_77;
      count_79 <= count_79 + inc_78 - dec_78;
      count_80 <= count_80 + inc_79 - dec_79;
      count_81 <= count_81 + inc_80 - dec_80;
      count_82 <= count_82 + inc_81 - dec_81;
      count_83 <= count_83 + inc_82 - dec_82;
      count_84 <= count_84 + inc_83 - dec_83;
      count_85 <= count_85 + inc_84 - dec_84;
      count_86 <= count_86 + inc_85 - dec_85;
      count_87 <= count_87 + inc_86 - dec_86;
      count_88 <= count_88 + inc_87 - dec_87;
      count_89 <= count_89 + inc_88 - dec_88;
      count_90 <= count_90 + inc_89 - dec_89;
      count_91 <= count_91 + inc_90 - dec_90;
      count_92 <= count_92 + inc_91 - dec_91;
      count_93 <= count_93 + inc_92 - dec_92;
      count_94 <= count_94 + inc_93 - dec_93;
      count_95 <= count_95 + inc_94 - dec_94;
      count_96 <= count_96 + inc_95 - dec_95;
      count_97 <= count_97 + inc_96 - dec_96;
      count_98 <= count_98 + inc_97 - dec_97;
      count_99 <= count_99 + inc_98 - dec_98;
      count_100 <= count_100 + inc_99 - dec_99;
      count_101 <= count_101 + inc_100 - dec_100;
      count_102 <= count_102 + inc_101 - dec_101;
      count_103 <= count_103 + inc_102 - dec_102;
      count_104 <= count_104 + inc_103 - dec_103;
      count_105 <= count_105 + inc_104 - dec_104;
      count_106 <= count_106 + inc_105 - dec_105;
      count_107 <= count_107 + inc_106 - dec_106;
      count_108 <= count_108 + inc_107 - dec_107;
      count_109 <= count_109 + inc_108 - dec_108;
      count_110 <= count_110 + inc_109 - dec_109;
      count_111 <= count_111 + inc_110 - dec_110;
      count_112 <= count_112 + inc_111 - dec_111;
      count_113 <= count_113 + inc_112 - dec_112;
      count_114 <= count_114 + inc_113 - dec_113;
      count_115 <= count_115 + inc_114 - dec_114;
      count_116 <= count_116 + inc_115 - dec_115;
      count_117 <= count_117 + inc_116 - dec_116;
      count_118 <= count_118 + inc_117 - dec_117;
      count_119 <= count_119 + inc_118 - dec_118;
      count_120 <= count_120 + inc_119 - dec_119;
      count_121 <= count_121 + inc_120 - dec_120;
      count_122 <= count_122 + inc_121 - dec_121;
      count_123 <= count_123 + inc_122 - dec_122;
      count_124 <= count_124 + inc_123 - dec_123;
      count_125 <= count_125 + inc_124 - dec_124;
      count_126 <= count_126 + inc_125 - dec_125;
      count_127 <= count_127 + inc_126 - dec_126;
      count_128 <= count_128 + inc_127 - dec_127;
    end
    if (auto_out_b_valid & ~nodeOut_b_ready)
      b_delay <= b_delay + 3'h1;
    else
      b_delay <= 3'h0;
    if (r_first)
      r_denied_r <= &auto_out_r_bits_resp;
  end // always @(posedge)
  TLMonitor_19 monitor (
    .clock                (clock),
    .reset                (reset),
    .io_in_a_ready        (nodeIn_a_ready),
    .io_in_a_valid        (auto_in_a_valid),
    .io_in_a_bits_opcode  (auto_in_a_bits_opcode),
    .io_in_a_bits_param   (auto_in_a_bits_param),
    .io_in_a_bits_size    (auto_in_a_bits_size),
    .io_in_a_bits_source  (auto_in_a_bits_source),
    .io_in_a_bits_address (auto_in_a_bits_address),
    .io_in_a_bits_mask    (auto_in_a_bits_mask),
    .io_in_d_ready        (auto_in_d_ready),
    .io_in_d_valid        (nodeIn_d_valid),
    .io_in_d_bits_opcode  (nodeIn_d_bits_opcode),
    .io_in_d_bits_size    (nodeIn_d_bits_size),
    .io_in_d_bits_source  (nodeIn_d_bits_source),
    .io_in_d_bits_denied  (nodeIn_d_bits_denied),
    .io_in_d_bits_corrupt (nodeIn_d_bits_corrupt)
  );
  Queue1_AXI4BundleW nodeOut_w_deq_q (
    .clock            (clock),
    .reset            (reset),
    .io_enq_valid     (_GEN_4 & ~(auto_in_a_bits_opcode[2]) & _GEN_3),
    .io_enq_bits_data (auto_in_a_bits_data),
    .io_enq_bits_strb (auto_in_a_bits_mask),
    .io_enq_bits_last (out_w_bits_last),
    .io_deq_ready     (auto_out_w_ready),
    .io_enq_ready     (_nodeOut_w_deq_q_io_enq_ready),
    .io_deq_valid     (auto_out_w_valid),
    .io_deq_bits_data (auto_out_w_bits_data),
    .io_deq_bits_strb (auto_out_w_bits_strb),
    .io_deq_bits_last (auto_out_w_bits_last)
  );
  Queue1_AXI4BundleARW_1 queue_arw_deq_q (
    .clock                            (clock),
    .reset                            (reset),
    .io_enq_valid                     (out_arw_valid),
    .io_enq_bits_id                   (_GEN[auto_in_a_bits_source]),
    .io_enq_bits_addr                 (auto_in_a_bits_address),
    .io_enq_bits_len                  (~(_GEN_1[10:3])),
    .io_enq_bits_size
      (auto_in_a_bits_size > 3'h2 ? 3'h3 : auto_in_a_bits_size),
    .io_enq_bits_cache
      ({auto_in_a_bits_user_amba_prot_writealloc,
        auto_in_a_bits_user_amba_prot_readalloc,
        auto_in_a_bits_user_amba_prot_modifiable,
        auto_in_a_bits_user_amba_prot_bufferable}),
    .io_enq_bits_prot
      ({auto_in_a_bits_user_amba_prot_fetch,
        ~auto_in_a_bits_user_amba_prot_secure,
        auto_in_a_bits_user_amba_prot_privileged}),
    .io_enq_bits_echo_tl_state_size   ({1'h0, auto_in_a_bits_size}),
    .io_enq_bits_echo_tl_state_source (auto_in_a_bits_source),
    .io_enq_bits_wen                  (~(auto_in_a_bits_opcode[2])),
    .io_deq_ready
      (_queue_arw_deq_q_io_deq_bits_wen ? auto_out_aw_ready : auto_out_ar_ready),
    .io_enq_ready                     (_queue_arw_deq_q_io_enq_ready),
    .io_deq_valid                     (_queue_arw_deq_q_io_deq_valid),
    .io_deq_bits_id                   (_queue_arw_deq_q_io_deq_bits_id),
    .io_deq_bits_addr                 (_queue_arw_deq_q_io_deq_bits_addr),
    .io_deq_bits_len                  (_queue_arw_deq_q_io_deq_bits_len),
    .io_deq_bits_size                 (_queue_arw_deq_q_io_deq_bits_size),
    .io_deq_bits_burst                (_queue_arw_deq_q_io_deq_bits_burst),
    .io_deq_bits_lock                 (_queue_arw_deq_q_io_deq_bits_lock),
    .io_deq_bits_cache                (_queue_arw_deq_q_io_deq_bits_cache),
    .io_deq_bits_prot                 (_queue_arw_deq_q_io_deq_bits_prot),
    .io_deq_bits_qos                  (_queue_arw_deq_q_io_deq_bits_qos),
    .io_deq_bits_echo_tl_state_size   (_queue_arw_deq_q_io_deq_bits_echo_tl_state_size),
    .io_deq_bits_echo_tl_state_source (_queue_arw_deq_q_io_deq_bits_echo_tl_state_source),
    .io_deq_bits_wen                  (_queue_arw_deq_q_io_deq_bits_wen)
  );
  assign auto_in_a_ready = nodeIn_a_ready;
  assign auto_in_d_valid = nodeIn_d_valid;
  assign auto_in_d_bits_opcode = nodeIn_d_bits_opcode;
  assign auto_in_d_bits_size = nodeIn_d_bits_size;
  assign auto_in_d_bits_source = nodeIn_d_bits_source;
  assign auto_in_d_bits_denied = nodeIn_d_bits_denied;
  assign auto_in_d_bits_data = auto_out_r_bits_data;
  assign auto_in_d_bits_corrupt = nodeIn_d_bits_corrupt;
  assign auto_out_aw_valid =
    _queue_arw_deq_q_io_deq_valid & _queue_arw_deq_q_io_deq_bits_wen;
  assign auto_out_aw_bits_id = _queue_arw_deq_q_io_deq_bits_id;
  assign auto_out_aw_bits_addr = _queue_arw_deq_q_io_deq_bits_addr;
  assign auto_out_aw_bits_len = _queue_arw_deq_q_io_deq_bits_len;
  assign auto_out_aw_bits_size = _queue_arw_deq_q_io_deq_bits_size;
  assign auto_out_aw_bits_burst = _queue_arw_deq_q_io_deq_bits_burst;
  assign auto_out_aw_bits_lock = _queue_arw_deq_q_io_deq_bits_lock;
  assign auto_out_aw_bits_cache = _queue_arw_deq_q_io_deq_bits_cache;
  assign auto_out_aw_bits_prot = _queue_arw_deq_q_io_deq_bits_prot;
  assign auto_out_aw_bits_qos = _queue_arw_deq_q_io_deq_bits_qos;
  assign auto_out_aw_bits_echo_tl_state_size =
    _queue_arw_deq_q_io_deq_bits_echo_tl_state_size;
  assign auto_out_aw_bits_echo_tl_state_source =
    _queue_arw_deq_q_io_deq_bits_echo_tl_state_source;
  assign auto_out_b_ready = nodeOut_b_ready;
  assign auto_out_ar_valid =
    _queue_arw_deq_q_io_deq_valid & ~_queue_arw_deq_q_io_deq_bits_wen;
  assign auto_out_ar_bits_id = _queue_arw_deq_q_io_deq_bits_id;
  assign auto_out_ar_bits_addr = _queue_arw_deq_q_io_deq_bits_addr;
  assign auto_out_ar_bits_len = _queue_arw_deq_q_io_deq_bits_len;
  assign auto_out_ar_bits_size = _queue_arw_deq_q_io_deq_bits_size;
  assign auto_out_ar_bits_burst = _queue_arw_deq_q_io_deq_bits_burst;
  assign auto_out_ar_bits_lock = _queue_arw_deq_q_io_deq_bits_lock;
  assign auto_out_ar_bits_cache = _queue_arw_deq_q_io_deq_bits_cache;
  assign auto_out_ar_bits_prot = _queue_arw_deq_q_io_deq_bits_prot;
  assign auto_out_ar_bits_qos = _queue_arw_deq_q_io_deq_bits_qos;
  assign auto_out_ar_bits_echo_tl_state_size =
    _queue_arw_deq_q_io_deq_bits_echo_tl_state_size;
  assign auto_out_ar_bits_echo_tl_state_source =
    _queue_arw_deq_q_io_deq_bits_echo_tl_state_source;
  assign auto_out_r_ready = nodeOut_r_ready;
endmodule

module TLInterconnectCoupler_mbus_to_memory_controller_port_named_axi4(
  input         clock,
                reset,
                auto_widget_anon_in_a_valid,
  input  [2:0]  auto_widget_anon_in_a_bits_opcode,
                auto_widget_anon_in_a_bits_param,
                auto_widget_anon_in_a_bits_size,
  input  [6:0]  auto_widget_anon_in_a_bits_source,
  input  [31:0] auto_widget_anon_in_a_bits_address,
  input         auto_widget_anon_in_a_bits_user_amba_prot_bufferable,
                auto_widget_anon_in_a_bits_user_amba_prot_modifiable,
                auto_widget_anon_in_a_bits_user_amba_prot_readalloc,
                auto_widget_anon_in_a_bits_user_amba_prot_writealloc,
                auto_widget_anon_in_a_bits_user_amba_prot_privileged,
                auto_widget_anon_in_a_bits_user_amba_prot_secure,
                auto_widget_anon_in_a_bits_user_amba_prot_fetch,
  input  [7:0]  auto_widget_anon_in_a_bits_mask,
  input  [63:0] auto_widget_anon_in_a_bits_data,
  input         auto_widget_anon_in_d_ready,
                auto_axi4yank_out_aw_ready,
                auto_axi4yank_out_w_ready,
                auto_axi4yank_out_b_valid,
  input  [3:0]  auto_axi4yank_out_b_bits_id,
  input  [1:0]  auto_axi4yank_out_b_bits_resp,
  input         auto_axi4yank_out_ar_ready,
                auto_axi4yank_out_r_valid,
  input  [3:0]  auto_axi4yank_out_r_bits_id,
  input  [63:0] auto_axi4yank_out_r_bits_data,
  input  [1:0]  auto_axi4yank_out_r_bits_resp,
  input         auto_axi4yank_out_r_bits_last,
                auto_tl_in_a_valid,
  input  [2:0]  auto_tl_in_a_bits_opcode,
                auto_tl_in_a_bits_param,
                auto_tl_in_a_bits_size,
  input  [6:0]  auto_tl_in_a_bits_source,
  input  [31:0] auto_tl_in_a_bits_address,
  input         auto_tl_in_a_bits_user_amba_prot_bufferable,
                auto_tl_in_a_bits_user_amba_prot_modifiable,
                auto_tl_in_a_bits_user_amba_prot_readalloc,
                auto_tl_in_a_bits_user_amba_prot_writealloc,
                auto_tl_in_a_bits_user_amba_prot_privileged,
                auto_tl_in_a_bits_user_amba_prot_secure,
                auto_tl_in_a_bits_user_amba_prot_fetch,
  input  [7:0]  auto_tl_in_a_bits_mask,
  input  [63:0] auto_tl_in_a_bits_data,
  input         auto_tl_in_d_ready,
                auto_tl_out_a_ready,
                auto_tl_out_d_valid,
  input  [2:0]  auto_tl_out_d_bits_opcode,
                auto_tl_out_d_bits_size,
  input  [6:0]  auto_tl_out_d_bits_source,
  input         auto_tl_out_d_bits_denied,
  input  [63:0] auto_tl_out_d_bits_data,
  input         auto_tl_out_d_bits_corrupt,
  output        auto_widget_anon_in_a_ready,
                auto_widget_anon_in_d_valid,
  output [2:0]  auto_widget_anon_in_d_bits_opcode,
                auto_widget_anon_in_d_bits_size,
  output [6:0]  auto_widget_anon_in_d_bits_source,
  output        auto_widget_anon_in_d_bits_denied,
  output [63:0] auto_widget_anon_in_d_bits_data,
  output        auto_widget_anon_in_d_bits_corrupt,
                auto_axi4yank_out_aw_valid,
  output [3:0]  auto_axi4yank_out_aw_bits_id,
  output [31:0] auto_axi4yank_out_aw_bits_addr,
  output [7:0]  auto_axi4yank_out_aw_bits_len,
  output [2:0]  auto_axi4yank_out_aw_bits_size,
  output [1:0]  auto_axi4yank_out_aw_bits_burst,
  output        auto_axi4yank_out_aw_bits_lock,
  output [3:0]  auto_axi4yank_out_aw_bits_cache,
  output [2:0]  auto_axi4yank_out_aw_bits_prot,
  output [3:0]  auto_axi4yank_out_aw_bits_qos,
  output        auto_axi4yank_out_w_valid,
  output [63:0] auto_axi4yank_out_w_bits_data,
  output [7:0]  auto_axi4yank_out_w_bits_strb,
  output        auto_axi4yank_out_w_bits_last,
                auto_axi4yank_out_b_ready,
                auto_axi4yank_out_ar_valid,
  output [3:0]  auto_axi4yank_out_ar_bits_id,
  output [31:0] auto_axi4yank_out_ar_bits_addr,
  output [7:0]  auto_axi4yank_out_ar_bits_len,
  output [2:0]  auto_axi4yank_out_ar_bits_size,
  output [1:0]  auto_axi4yank_out_ar_bits_burst,
  output        auto_axi4yank_out_ar_bits_lock,
  output [3:0]  auto_axi4yank_out_ar_bits_cache,
  output [2:0]  auto_axi4yank_out_ar_bits_prot,
  output [3:0]  auto_axi4yank_out_ar_bits_qos,
  output        auto_axi4yank_out_r_ready,
                auto_tl_in_a_ready,
                auto_tl_in_d_valid,
  output [2:0]  auto_tl_in_d_bits_opcode,
                auto_tl_in_d_bits_size,
  output [6:0]  auto_tl_in_d_bits_source,
  output        auto_tl_in_d_bits_denied,
  output [63:0] auto_tl_in_d_bits_data,
  output        auto_tl_in_d_bits_corrupt,
                auto_tl_out_a_valid,
  output [2:0]  auto_tl_out_a_bits_opcode,
                auto_tl_out_a_bits_param,
                auto_tl_out_a_bits_size,
  output [6:0]  auto_tl_out_a_bits_source,
  output [31:0] auto_tl_out_a_bits_address,
  output        auto_tl_out_a_bits_user_amba_prot_bufferable,
                auto_tl_out_a_bits_user_amba_prot_modifiable,
                auto_tl_out_a_bits_user_amba_prot_readalloc,
                auto_tl_out_a_bits_user_amba_prot_writealloc,
                auto_tl_out_a_bits_user_amba_prot_privileged,
                auto_tl_out_a_bits_user_amba_prot_secure,
                auto_tl_out_a_bits_user_amba_prot_fetch,
  output [7:0]  auto_tl_out_a_bits_mask,
  output [63:0] auto_tl_out_a_bits_data,
  output        auto_tl_out_d_ready
);

  wire        _tl2axi4_auto_out_aw_valid;
  wire [6:0]  _tl2axi4_auto_out_aw_bits_id;
  wire [31:0] _tl2axi4_auto_out_aw_bits_addr;
  wire [7:0]  _tl2axi4_auto_out_aw_bits_len;
  wire [2:0]  _tl2axi4_auto_out_aw_bits_size;
  wire [1:0]  _tl2axi4_auto_out_aw_bits_burst;
  wire        _tl2axi4_auto_out_aw_bits_lock;
  wire [3:0]  _tl2axi4_auto_out_aw_bits_cache;
  wire [2:0]  _tl2axi4_auto_out_aw_bits_prot;
  wire [3:0]  _tl2axi4_auto_out_aw_bits_qos;
  wire [3:0]  _tl2axi4_auto_out_aw_bits_echo_tl_state_size;
  wire [6:0]  _tl2axi4_auto_out_aw_bits_echo_tl_state_source;
  wire        _tl2axi4_auto_out_w_valid;
  wire [63:0] _tl2axi4_auto_out_w_bits_data;
  wire [7:0]  _tl2axi4_auto_out_w_bits_strb;
  wire        _tl2axi4_auto_out_w_bits_last;
  wire        _tl2axi4_auto_out_b_ready;
  wire        _tl2axi4_auto_out_ar_valid;
  wire [6:0]  _tl2axi4_auto_out_ar_bits_id;
  wire [31:0] _tl2axi4_auto_out_ar_bits_addr;
  wire [7:0]  _tl2axi4_auto_out_ar_bits_len;
  wire [2:0]  _tl2axi4_auto_out_ar_bits_size;
  wire [1:0]  _tl2axi4_auto_out_ar_bits_burst;
  wire        _tl2axi4_auto_out_ar_bits_lock;
  wire [3:0]  _tl2axi4_auto_out_ar_bits_cache;
  wire [2:0]  _tl2axi4_auto_out_ar_bits_prot;
  wire [3:0]  _tl2axi4_auto_out_ar_bits_qos;
  wire [3:0]  _tl2axi4_auto_out_ar_bits_echo_tl_state_size;
  wire [6:0]  _tl2axi4_auto_out_ar_bits_echo_tl_state_source;
  wire        _tl2axi4_auto_out_r_ready;
  wire        _axi4index_auto_in_aw_ready;
  wire        _axi4index_auto_in_w_ready;
  wire        _axi4index_auto_in_b_valid;
  wire [6:0]  _axi4index_auto_in_b_bits_id;
  wire [1:0]  _axi4index_auto_in_b_bits_resp;
  wire [3:0]  _axi4index_auto_in_b_bits_echo_tl_state_size;
  wire [6:0]  _axi4index_auto_in_b_bits_echo_tl_state_source;
  wire        _axi4index_auto_in_ar_ready;
  wire        _axi4index_auto_in_r_valid;
  wire [6:0]  _axi4index_auto_in_r_bits_id;
  wire [63:0] _axi4index_auto_in_r_bits_data;
  wire [1:0]  _axi4index_auto_in_r_bits_resp;
  wire [3:0]  _axi4index_auto_in_r_bits_echo_tl_state_size;
  wire [6:0]  _axi4index_auto_in_r_bits_echo_tl_state_source;
  wire        _axi4index_auto_in_r_bits_last;
  wire        _axi4index_auto_out_aw_valid;
  wire [3:0]  _axi4index_auto_out_aw_bits_id;
  wire [31:0] _axi4index_auto_out_aw_bits_addr;
  wire [7:0]  _axi4index_auto_out_aw_bits_len;
  wire [2:0]  _axi4index_auto_out_aw_bits_size;
  wire [1:0]  _axi4index_auto_out_aw_bits_burst;
  wire        _axi4index_auto_out_aw_bits_lock;
  wire [3:0]  _axi4index_auto_out_aw_bits_cache;
  wire [2:0]  _axi4index_auto_out_aw_bits_prot;
  wire [3:0]  _axi4index_auto_out_aw_bits_qos;
  wire [3:0]  _axi4index_auto_out_aw_bits_echo_tl_state_size;
  wire [6:0]  _axi4index_auto_out_aw_bits_echo_tl_state_source;
  wire [2:0]  _axi4index_auto_out_aw_bits_echo_extra_id;
  wire        _axi4index_auto_out_w_valid;
  wire [63:0] _axi4index_auto_out_w_bits_data;
  wire [7:0]  _axi4index_auto_out_w_bits_strb;
  wire        _axi4index_auto_out_w_bits_last;
  wire        _axi4index_auto_out_b_ready;
  wire        _axi4index_auto_out_ar_valid;
  wire [3:0]  _axi4index_auto_out_ar_bits_id;
  wire [31:0] _axi4index_auto_out_ar_bits_addr;
  wire [7:0]  _axi4index_auto_out_ar_bits_len;
  wire [2:0]  _axi4index_auto_out_ar_bits_size;
  wire [1:0]  _axi4index_auto_out_ar_bits_burst;
  wire        _axi4index_auto_out_ar_bits_lock;
  wire [3:0]  _axi4index_auto_out_ar_bits_cache;
  wire [2:0]  _axi4index_auto_out_ar_bits_prot;
  wire [3:0]  _axi4index_auto_out_ar_bits_qos;
  wire [3:0]  _axi4index_auto_out_ar_bits_echo_tl_state_size;
  wire [6:0]  _axi4index_auto_out_ar_bits_echo_tl_state_source;
  wire [2:0]  _axi4index_auto_out_ar_bits_echo_extra_id;
  wire        _axi4index_auto_out_r_ready;
  wire        _axi4yank_auto_in_aw_ready;
  wire        _axi4yank_auto_in_w_ready;
  wire        _axi4yank_auto_in_b_valid;
  wire [3:0]  _axi4yank_auto_in_b_bits_id;
  wire [1:0]  _axi4yank_auto_in_b_bits_resp;
  wire [3:0]  _axi4yank_auto_in_b_bits_echo_tl_state_size;
  wire [6:0]  _axi4yank_auto_in_b_bits_echo_tl_state_source;
  wire [2:0]  _axi4yank_auto_in_b_bits_echo_extra_id;
  wire        _axi4yank_auto_in_ar_ready;
  wire        _axi4yank_auto_in_r_valid;
  wire [3:0]  _axi4yank_auto_in_r_bits_id;
  wire [63:0] _axi4yank_auto_in_r_bits_data;
  wire [1:0]  _axi4yank_auto_in_r_bits_resp;
  wire [3:0]  _axi4yank_auto_in_r_bits_echo_tl_state_size;
  wire [6:0]  _axi4yank_auto_in_r_bits_echo_tl_state_source;
  wire [2:0]  _axi4yank_auto_in_r_bits_echo_extra_id;
  wire        _axi4yank_auto_in_r_bits_last;
  AXI4UserYanker_2 axi4yank (
    .clock                                (clock),
    .reset                                (reset),
    .auto_in_aw_valid                     (_axi4index_auto_out_aw_valid),
    .auto_in_aw_bits_id                   (_axi4index_auto_out_aw_bits_id),
    .auto_in_aw_bits_addr                 (_axi4index_auto_out_aw_bits_addr),
    .auto_in_aw_bits_len                  (_axi4index_auto_out_aw_bits_len),
    .auto_in_aw_bits_size                 (_axi4index_auto_out_aw_bits_size),
    .auto_in_aw_bits_burst                (_axi4index_auto_out_aw_bits_burst),
    .auto_in_aw_bits_lock                 (_axi4index_auto_out_aw_bits_lock),
    .auto_in_aw_bits_cache                (_axi4index_auto_out_aw_bits_cache),
    .auto_in_aw_bits_prot                 (_axi4index_auto_out_aw_bits_prot),
    .auto_in_aw_bits_qos                  (_axi4index_auto_out_aw_bits_qos),
    .auto_in_aw_bits_echo_tl_state_size
      (_axi4index_auto_out_aw_bits_echo_tl_state_size),
    .auto_in_aw_bits_echo_tl_state_source
      (_axi4index_auto_out_aw_bits_echo_tl_state_source),
    .auto_in_aw_bits_echo_extra_id        (_axi4index_auto_out_aw_bits_echo_extra_id),
    .auto_in_w_valid                      (_axi4index_auto_out_w_valid),
    .auto_in_w_bits_data                  (_axi4index_auto_out_w_bits_data),
    .auto_in_w_bits_strb                  (_axi4index_auto_out_w_bits_strb),
    .auto_in_w_bits_last                  (_axi4index_auto_out_w_bits_last),
    .auto_in_b_ready                      (_axi4index_auto_out_b_ready),
    .auto_in_ar_valid                     (_axi4index_auto_out_ar_valid),
    .auto_in_ar_bits_id                   (_axi4index_auto_out_ar_bits_id),
    .auto_in_ar_bits_addr                 (_axi4index_auto_out_ar_bits_addr),
    .auto_in_ar_bits_len                  (_axi4index_auto_out_ar_bits_len),
    .auto_in_ar_bits_size                 (_axi4index_auto_out_ar_bits_size),
    .auto_in_ar_bits_burst                (_axi4index_auto_out_ar_bits_burst),
    .auto_in_ar_bits_lock                 (_axi4index_auto_out_ar_bits_lock),
    .auto_in_ar_bits_cache                (_axi4index_auto_out_ar_bits_cache),
    .auto_in_ar_bits_prot                 (_axi4index_auto_out_ar_bits_prot),
    .auto_in_ar_bits_qos                  (_axi4index_auto_out_ar_bits_qos),
    .auto_in_ar_bits_echo_tl_state_size
      (_axi4index_auto_out_ar_bits_echo_tl_state_size),
    .auto_in_ar_bits_echo_tl_state_source
      (_axi4index_auto_out_ar_bits_echo_tl_state_source),
    .auto_in_ar_bits_echo_extra_id        (_axi4index_auto_out_ar_bits_echo_extra_id),
    .auto_in_r_ready                      (_axi4index_auto_out_r_ready),
    .auto_out_aw_ready                    (auto_axi4yank_out_aw_ready),
    .auto_out_w_ready                     (auto_axi4yank_out_w_ready),
    .auto_out_b_valid                     (auto_axi4yank_out_b_valid),
    .auto_out_b_bits_id                   (auto_axi4yank_out_b_bits_id),
    .auto_out_b_bits_resp                 (auto_axi4yank_out_b_bits_resp),
    .auto_out_ar_ready                    (auto_axi4yank_out_ar_ready),
    .auto_out_r_valid                     (auto_axi4yank_out_r_valid),
    .auto_out_r_bits_id                   (auto_axi4yank_out_r_bits_id),
    .auto_out_r_bits_data                 (auto_axi4yank_out_r_bits_data),
    .auto_out_r_bits_resp                 (auto_axi4yank_out_r_bits_resp),
    .auto_out_r_bits_last                 (auto_axi4yank_out_r_bits_last),
    .auto_in_aw_ready                     (_axi4yank_auto_in_aw_ready),
    .auto_in_w_ready                      (_axi4yank_auto_in_w_ready),
    .auto_in_b_valid                      (_axi4yank_auto_in_b_valid),
    .auto_in_b_bits_id                    (_axi4yank_auto_in_b_bits_id),
    .auto_in_b_bits_resp                  (_axi4yank_auto_in_b_bits_resp),
    .auto_in_b_bits_echo_tl_state_size    (_axi4yank_auto_in_b_bits_echo_tl_state_size),
    .auto_in_b_bits_echo_tl_state_source  (_axi4yank_auto_in_b_bits_echo_tl_state_source),
    .auto_in_b_bits_echo_extra_id         (_axi4yank_auto_in_b_bits_echo_extra_id),
    .auto_in_ar_ready                     (_axi4yank_auto_in_ar_ready),
    .auto_in_r_valid                      (_axi4yank_auto_in_r_valid),
    .auto_in_r_bits_id                    (_axi4yank_auto_in_r_bits_id),
    .auto_in_r_bits_data                  (_axi4yank_auto_in_r_bits_data),
    .auto_in_r_bits_resp                  (_axi4yank_auto_in_r_bits_resp),
    .auto_in_r_bits_echo_tl_state_size    (_axi4yank_auto_in_r_bits_echo_tl_state_size),
    .auto_in_r_bits_echo_tl_state_source  (_axi4yank_auto_in_r_bits_echo_tl_state_source),
    .auto_in_r_bits_echo_extra_id         (_axi4yank_auto_in_r_bits_echo_extra_id),
    .auto_in_r_bits_last                  (_axi4yank_auto_in_r_bits_last),
    .auto_out_aw_valid                    (auto_axi4yank_out_aw_valid),
    .auto_out_aw_bits_id                  (auto_axi4yank_out_aw_bits_id),
    .auto_out_aw_bits_addr                (auto_axi4yank_out_aw_bits_addr),
    .auto_out_aw_bits_len                 (auto_axi4yank_out_aw_bits_len),
    .auto_out_aw_bits_size                (auto_axi4yank_out_aw_bits_size),
    .auto_out_aw_bits_burst               (auto_axi4yank_out_aw_bits_burst),
    .auto_out_aw_bits_lock                (auto_axi4yank_out_aw_bits_lock),
    .auto_out_aw_bits_cache               (auto_axi4yank_out_aw_bits_cache),
    .auto_out_aw_bits_prot                (auto_axi4yank_out_aw_bits_prot),
    .auto_out_aw_bits_qos                 (auto_axi4yank_out_aw_bits_qos),
    .auto_out_w_valid                     (auto_axi4yank_out_w_valid),
    .auto_out_w_bits_data                 (auto_axi4yank_out_w_bits_data),
    .auto_out_w_bits_strb                 (auto_axi4yank_out_w_bits_strb),
    .auto_out_w_bits_last                 (auto_axi4yank_out_w_bits_last),
    .auto_out_b_ready                     (auto_axi4yank_out_b_ready),
    .auto_out_ar_valid                    (auto_axi4yank_out_ar_valid),
    .auto_out_ar_bits_id                  (auto_axi4yank_out_ar_bits_id),
    .auto_out_ar_bits_addr                (auto_axi4yank_out_ar_bits_addr),
    .auto_out_ar_bits_len                 (auto_axi4yank_out_ar_bits_len),
    .auto_out_ar_bits_size                (auto_axi4yank_out_ar_bits_size),
    .auto_out_ar_bits_burst               (auto_axi4yank_out_ar_bits_burst),
    .auto_out_ar_bits_lock                (auto_axi4yank_out_ar_bits_lock),
    .auto_out_ar_bits_cache               (auto_axi4yank_out_ar_bits_cache),
    .auto_out_ar_bits_prot                (auto_axi4yank_out_ar_bits_prot),
    .auto_out_ar_bits_qos                 (auto_axi4yank_out_ar_bits_qos),
    .auto_out_r_ready                     (auto_axi4yank_out_r_ready)
  );
  AXI4IdIndexer_2 axi4index (
    .auto_in_aw_valid                      (_tl2axi4_auto_out_aw_valid),
    .auto_in_aw_bits_id                    (_tl2axi4_auto_out_aw_bits_id),
    .auto_in_aw_bits_addr                  (_tl2axi4_auto_out_aw_bits_addr),
    .auto_in_aw_bits_len                   (_tl2axi4_auto_out_aw_bits_len),
    .auto_in_aw_bits_size                  (_tl2axi4_auto_out_aw_bits_size),
    .auto_in_aw_bits_burst                 (_tl2axi4_auto_out_aw_bits_burst),
    .auto_in_aw_bits_lock                  (_tl2axi4_auto_out_aw_bits_lock),
    .auto_in_aw_bits_cache                 (_tl2axi4_auto_out_aw_bits_cache),
    .auto_in_aw_bits_prot                  (_tl2axi4_auto_out_aw_bits_prot),
    .auto_in_aw_bits_qos                   (_tl2axi4_auto_out_aw_bits_qos),
    .auto_in_aw_bits_echo_tl_state_size    (_tl2axi4_auto_out_aw_bits_echo_tl_state_size),
    .auto_in_aw_bits_echo_tl_state_source
      (_tl2axi4_auto_out_aw_bits_echo_tl_state_source),
    .auto_in_w_valid                       (_tl2axi4_auto_out_w_valid),
    .auto_in_w_bits_data                   (_tl2axi4_auto_out_w_bits_data),
    .auto_in_w_bits_strb                   (_tl2axi4_auto_out_w_bits_strb),
    .auto_in_w_bits_last                   (_tl2axi4_auto_out_w_bits_last),
    .auto_in_b_ready                       (_tl2axi4_auto_out_b_ready),
    .auto_in_ar_valid                      (_tl2axi4_auto_out_ar_valid),
    .auto_in_ar_bits_id                    (_tl2axi4_auto_out_ar_bits_id),
    .auto_in_ar_bits_addr                  (_tl2axi4_auto_out_ar_bits_addr),
    .auto_in_ar_bits_len                   (_tl2axi4_auto_out_ar_bits_len),
    .auto_in_ar_bits_size                  (_tl2axi4_auto_out_ar_bits_size),
    .auto_in_ar_bits_burst                 (_tl2axi4_auto_out_ar_bits_burst),
    .auto_in_ar_bits_lock                  (_tl2axi4_auto_out_ar_bits_lock),
    .auto_in_ar_bits_cache                 (_tl2axi4_auto_out_ar_bits_cache),
    .auto_in_ar_bits_prot                  (_tl2axi4_auto_out_ar_bits_prot),
    .auto_in_ar_bits_qos                   (_tl2axi4_auto_out_ar_bits_qos),
    .auto_in_ar_bits_echo_tl_state_size    (_tl2axi4_auto_out_ar_bits_echo_tl_state_size),
    .auto_in_ar_bits_echo_tl_state_source
      (_tl2axi4_auto_out_ar_bits_echo_tl_state_source),
    .auto_in_r_ready                       (_tl2axi4_auto_out_r_ready),
    .auto_out_aw_ready                     (_axi4yank_auto_in_aw_ready),
    .auto_out_w_ready                      (_axi4yank_auto_in_w_ready),
    .auto_out_b_valid                      (_axi4yank_auto_in_b_valid),
    .auto_out_b_bits_id                    (_axi4yank_auto_in_b_bits_id),
    .auto_out_b_bits_resp                  (_axi4yank_auto_in_b_bits_resp),
    .auto_out_b_bits_echo_tl_state_size    (_axi4yank_auto_in_b_bits_echo_tl_state_size),
    .auto_out_b_bits_echo_tl_state_source
      (_axi4yank_auto_in_b_bits_echo_tl_state_source),
    .auto_out_b_bits_echo_extra_id         (_axi4yank_auto_in_b_bits_echo_extra_id),
    .auto_out_ar_ready                     (_axi4yank_auto_in_ar_ready),
    .auto_out_r_valid                      (_axi4yank_auto_in_r_valid),
    .auto_out_r_bits_id                    (_axi4yank_auto_in_r_bits_id),
    .auto_out_r_bits_data                  (_axi4yank_auto_in_r_bits_data),
    .auto_out_r_bits_resp                  (_axi4yank_auto_in_r_bits_resp),
    .auto_out_r_bits_echo_tl_state_size    (_axi4yank_auto_in_r_bits_echo_tl_state_size),
    .auto_out_r_bits_echo_tl_state_source
      (_axi4yank_auto_in_r_bits_echo_tl_state_source),
    .auto_out_r_bits_echo_extra_id         (_axi4yank_auto_in_r_bits_echo_extra_id),
    .auto_out_r_bits_last                  (_axi4yank_auto_in_r_bits_last),
    .auto_in_aw_ready                      (_axi4index_auto_in_aw_ready),
    .auto_in_w_ready                       (_axi4index_auto_in_w_ready),
    .auto_in_b_valid                       (_axi4index_auto_in_b_valid),
    .auto_in_b_bits_id                     (_axi4index_auto_in_b_bits_id),
    .auto_in_b_bits_resp                   (_axi4index_auto_in_b_bits_resp),
    .auto_in_b_bits_echo_tl_state_size     (_axi4index_auto_in_b_bits_echo_tl_state_size),
    .auto_in_b_bits_echo_tl_state_source
      (_axi4index_auto_in_b_bits_echo_tl_state_source),
    .auto_in_ar_ready                      (_axi4index_auto_in_ar_ready),
    .auto_in_r_valid                       (_axi4index_auto_in_r_valid),
    .auto_in_r_bits_id                     (_axi4index_auto_in_r_bits_id),
    .auto_in_r_bits_data                   (_axi4index_auto_in_r_bits_data),
    .auto_in_r_bits_resp                   (_axi4index_auto_in_r_bits_resp),
    .auto_in_r_bits_echo_tl_state_size     (_axi4index_auto_in_r_bits_echo_tl_state_size),
    .auto_in_r_bits_echo_tl_state_source
      (_axi4index_auto_in_r_bits_echo_tl_state_source),
    .auto_in_r_bits_last                   (_axi4index_auto_in_r_bits_last),
    .auto_out_aw_valid                     (_axi4index_auto_out_aw_valid),
    .auto_out_aw_bits_id                   (_axi4index_auto_out_aw_bits_id),
    .auto_out_aw_bits_addr                 (_axi4index_auto_out_aw_bits_addr),
    .auto_out_aw_bits_len                  (_axi4index_auto_out_aw_bits_len),
    .auto_out_aw_bits_size                 (_axi4index_auto_out_aw_bits_size),
    .auto_out_aw_bits_burst                (_axi4index_auto_out_aw_bits_burst),
    .auto_out_aw_bits_lock                 (_axi4index_auto_out_aw_bits_lock),
    .auto_out_aw_bits_cache                (_axi4index_auto_out_aw_bits_cache),
    .auto_out_aw_bits_prot                 (_axi4index_auto_out_aw_bits_prot),
    .auto_out_aw_bits_qos                  (_axi4index_auto_out_aw_bits_qos),
    .auto_out_aw_bits_echo_tl_state_size
      (_axi4index_auto_out_aw_bits_echo_tl_state_size),
    .auto_out_aw_bits_echo_tl_state_source
      (_axi4index_auto_out_aw_bits_echo_tl_state_source),
    .auto_out_aw_bits_echo_extra_id        (_axi4index_auto_out_aw_bits_echo_extra_id),
    .auto_out_w_valid                      (_axi4index_auto_out_w_valid),
    .auto_out_w_bits_data                  (_axi4index_auto_out_w_bits_data),
    .auto_out_w_bits_strb                  (_axi4index_auto_out_w_bits_strb),
    .auto_out_w_bits_last                  (_axi4index_auto_out_w_bits_last),
    .auto_out_b_ready                      (_axi4index_auto_out_b_ready),
    .auto_out_ar_valid                     (_axi4index_auto_out_ar_valid),
    .auto_out_ar_bits_id                   (_axi4index_auto_out_ar_bits_id),
    .auto_out_ar_bits_addr                 (_axi4index_auto_out_ar_bits_addr),
    .auto_out_ar_bits_len                  (_axi4index_auto_out_ar_bits_len),
    .auto_out_ar_bits_size                 (_axi4index_auto_out_ar_bits_size),
    .auto_out_ar_bits_burst                (_axi4index_auto_out_ar_bits_burst),
    .auto_out_ar_bits_lock                 (_axi4index_auto_out_ar_bits_lock),
    .auto_out_ar_bits_cache                (_axi4index_auto_out_ar_bits_cache),
    .auto_out_ar_bits_prot                 (_axi4index_auto_out_ar_bits_prot),
    .auto_out_ar_bits_qos                  (_axi4index_auto_out_ar_bits_qos),
    .auto_out_ar_bits_echo_tl_state_size
      (_axi4index_auto_out_ar_bits_echo_tl_state_size),
    .auto_out_ar_bits_echo_tl_state_source
      (_axi4index_auto_out_ar_bits_echo_tl_state_source),
    .auto_out_ar_bits_echo_extra_id        (_axi4index_auto_out_ar_bits_echo_extra_id),
    .auto_out_r_ready                      (_axi4index_auto_out_r_ready)
  );
  TLToAXI4_1 tl2axi4 (
    .clock                                    (clock),
    .reset                                    (reset),
    .auto_in_a_valid                          (auto_widget_anon_in_a_valid),
    .auto_in_a_bits_opcode                    (auto_widget_anon_in_a_bits_opcode),
    .auto_in_a_bits_param                     (auto_widget_anon_in_a_bits_param),
    .auto_in_a_bits_size                      (auto_widget_anon_in_a_bits_size),
    .auto_in_a_bits_source                    (auto_widget_anon_in_a_bits_source),
    .auto_in_a_bits_address                   (auto_widget_anon_in_a_bits_address),
    .auto_in_a_bits_user_amba_prot_bufferable
      (auto_widget_anon_in_a_bits_user_amba_prot_bufferable),
    .auto_in_a_bits_user_amba_prot_modifiable
      (auto_widget_anon_in_a_bits_user_amba_prot_modifiable),
    .auto_in_a_bits_user_amba_prot_readalloc
      (auto_widget_anon_in_a_bits_user_amba_prot_readalloc),
    .auto_in_a_bits_user_amba_prot_writealloc
      (auto_widget_anon_in_a_bits_user_amba_prot_writealloc),
    .auto_in_a_bits_user_amba_prot_privileged
      (auto_widget_anon_in_a_bits_user_amba_prot_privileged),
    .auto_in_a_bits_user_amba_prot_secure
      (auto_widget_anon_in_a_bits_user_amba_prot_secure),
    .auto_in_a_bits_user_amba_prot_fetch
      (auto_widget_anon_in_a_bits_user_amba_prot_fetch),
    .auto_in_a_bits_mask                      (auto_widget_anon_in_a_bits_mask),
    .auto_in_a_bits_data                      (auto_widget_anon_in_a_bits_data),
    .auto_in_d_ready                          (auto_widget_anon_in_d_ready),
    .auto_out_aw_ready                        (_axi4index_auto_in_aw_ready),
    .auto_out_w_ready                         (_axi4index_auto_in_w_ready),
    .auto_out_b_valid                         (_axi4index_auto_in_b_valid),
    .auto_out_b_bits_id                       (_axi4index_auto_in_b_bits_id),
    .auto_out_b_bits_resp                     (_axi4index_auto_in_b_bits_resp),
    .auto_out_b_bits_echo_tl_state_size
      (_axi4index_auto_in_b_bits_echo_tl_state_size),
    .auto_out_b_bits_echo_tl_state_source
      (_axi4index_auto_in_b_bits_echo_tl_state_source),
    .auto_out_ar_ready                        (_axi4index_auto_in_ar_ready),
    .auto_out_r_valid                         (_axi4index_auto_in_r_valid),
    .auto_out_r_bits_id                       (_axi4index_auto_in_r_bits_id),
    .auto_out_r_bits_data                     (_axi4index_auto_in_r_bits_data),
    .auto_out_r_bits_resp                     (_axi4index_auto_in_r_bits_resp),
    .auto_out_r_bits_echo_tl_state_size
      (_axi4index_auto_in_r_bits_echo_tl_state_size),
    .auto_out_r_bits_echo_tl_state_source
      (_axi4index_auto_in_r_bits_echo_tl_state_source),
    .auto_out_r_bits_last                     (_axi4index_auto_in_r_bits_last),
    .auto_in_a_ready                          (auto_widget_anon_in_a_ready),
    .auto_in_d_valid                          (auto_widget_anon_in_d_valid),
    .auto_in_d_bits_opcode                    (auto_widget_anon_in_d_bits_opcode),
    .auto_in_d_bits_size                      (auto_widget_anon_in_d_bits_size),
    .auto_in_d_bits_source                    (auto_widget_anon_in_d_bits_source),
    .auto_in_d_bits_denied                    (auto_widget_anon_in_d_bits_denied),
    .auto_in_d_bits_data                      (auto_widget_anon_in_d_bits_data),
    .auto_in_d_bits_corrupt                   (auto_widget_anon_in_d_bits_corrupt),
    .auto_out_aw_valid                        (_tl2axi4_auto_out_aw_valid),
    .auto_out_aw_bits_id                      (_tl2axi4_auto_out_aw_bits_id),
    .auto_out_aw_bits_addr                    (_tl2axi4_auto_out_aw_bits_addr),
    .auto_out_aw_bits_len                     (_tl2axi4_auto_out_aw_bits_len),
    .auto_out_aw_bits_size                    (_tl2axi4_auto_out_aw_bits_size),
    .auto_out_aw_bits_burst                   (_tl2axi4_auto_out_aw_bits_burst),
    .auto_out_aw_bits_lock                    (_tl2axi4_auto_out_aw_bits_lock),
    .auto_out_aw_bits_cache                   (_tl2axi4_auto_out_aw_bits_cache),
    .auto_out_aw_bits_prot                    (_tl2axi4_auto_out_aw_bits_prot),
    .auto_out_aw_bits_qos                     (_tl2axi4_auto_out_aw_bits_qos),
    .auto_out_aw_bits_echo_tl_state_size
      (_tl2axi4_auto_out_aw_bits_echo_tl_state_size),
    .auto_out_aw_bits_echo_tl_state_source
      (_tl2axi4_auto_out_aw_bits_echo_tl_state_source),
    .auto_out_w_valid                         (_tl2axi4_auto_out_w_valid),
    .auto_out_w_bits_data                     (_tl2axi4_auto_out_w_bits_data),
    .auto_out_w_bits_strb                     (_tl2axi4_auto_out_w_bits_strb),
    .auto_out_w_bits_last                     (_tl2axi4_auto_out_w_bits_last),
    .auto_out_b_ready                         (_tl2axi4_auto_out_b_ready),
    .auto_out_ar_valid                        (_tl2axi4_auto_out_ar_valid),
    .auto_out_ar_bits_id                      (_tl2axi4_auto_out_ar_bits_id),
    .auto_out_ar_bits_addr                    (_tl2axi4_auto_out_ar_bits_addr),
    .auto_out_ar_bits_len                     (_tl2axi4_auto_out_ar_bits_len),
    .auto_out_ar_bits_size                    (_tl2axi4_auto_out_ar_bits_size),
    .auto_out_ar_bits_burst                   (_tl2axi4_auto_out_ar_bits_burst),
    .auto_out_ar_bits_lock                    (_tl2axi4_auto_out_ar_bits_lock),
    .auto_out_ar_bits_cache                   (_tl2axi4_auto_out_ar_bits_cache),
    .auto_out_ar_bits_prot                    (_tl2axi4_auto_out_ar_bits_prot),
    .auto_out_ar_bits_qos                     (_tl2axi4_auto_out_ar_bits_qos),
    .auto_out_ar_bits_echo_tl_state_size
      (_tl2axi4_auto_out_ar_bits_echo_tl_state_size),
    .auto_out_ar_bits_echo_tl_state_source
      (_tl2axi4_auto_out_ar_bits_echo_tl_state_source),
    .auto_out_r_ready                         (_tl2axi4_auto_out_r_ready)
  );
  assign auto_tl_in_a_ready = auto_tl_out_a_ready;
  assign auto_tl_in_d_valid = auto_tl_out_d_valid;
  assign auto_tl_in_d_bits_opcode = auto_tl_out_d_bits_opcode;
  assign auto_tl_in_d_bits_size = auto_tl_out_d_bits_size;
  assign auto_tl_in_d_bits_source = auto_tl_out_d_bits_source;
  assign auto_tl_in_d_bits_denied = auto_tl_out_d_bits_denied;
  assign auto_tl_in_d_bits_data = auto_tl_out_d_bits_data;
  assign auto_tl_in_d_bits_corrupt = auto_tl_out_d_bits_corrupt;
  assign auto_tl_out_a_valid = auto_tl_in_a_valid;
  assign auto_tl_out_a_bits_opcode = auto_tl_in_a_bits_opcode;
  assign auto_tl_out_a_bits_param = auto_tl_in_a_bits_param;
  assign auto_tl_out_a_bits_size = auto_tl_in_a_bits_size;
  assign auto_tl_out_a_bits_source = auto_tl_in_a_bits_source;
  assign auto_tl_out_a_bits_address = auto_tl_in_a_bits_address;
  assign auto_tl_out_a_bits_user_amba_prot_bufferable =
    auto_tl_in_a_bits_user_amba_prot_bufferable;
  assign auto_tl_out_a_bits_user_amba_prot_modifiable =
    auto_tl_in_a_bits_user_amba_prot_modifiable;
  assign auto_tl_out_a_bits_user_amba_prot_readalloc =
    auto_tl_in_a_bits_user_amba_prot_readalloc;
  assign auto_tl_out_a_bits_user_amba_prot_writealloc =
    auto_tl_in_a_bits_user_amba_prot_writealloc;
  assign auto_tl_out_a_bits_user_amba_prot_privileged =
    auto_tl_in_a_bits_user_amba_prot_privileged;
  assign auto_tl_out_a_bits_user_amba_prot_secure =
    auto_tl_in_a_bits_user_amba_prot_secure;
  assign auto_tl_out_a_bits_user_amba_prot_fetch = auto_tl_in_a_bits_user_amba_prot_fetch;
  assign auto_tl_out_a_bits_mask = auto_tl_in_a_bits_mask;
  assign auto_tl_out_a_bits_data = auto_tl_in_a_bits_data;
  assign auto_tl_out_d_ready = auto_tl_in_d_ready;
endmodule

module MemoryBus(
  input         auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_ready,
                auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_ready,
                auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_b_valid,
  input  [3:0]  auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_b_bits_id,
  input  [1:0]  auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_b_bits_resp,
  input         auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_ready,
                auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_valid,
  input  [3:0]  auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_bits_id,
  input  [63:0] auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_bits_data,
  input  [1:0]  auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_bits_resp,
  input         auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_bits_last,
                auto_mbus_clock_groups_in_member_mbus_0_clock,
                auto_mbus_clock_groups_in_member_mbus_0_reset,
                auto_bus_xing_in_a_valid,
  input  [2:0]  auto_bus_xing_in_a_bits_opcode,
                auto_bus_xing_in_a_bits_param,
                auto_bus_xing_in_a_bits_size,
  input  [6:0]  auto_bus_xing_in_a_bits_source,
  input  [31:0] auto_bus_xing_in_a_bits_address,
  input         auto_bus_xing_in_a_bits_user_amba_prot_bufferable,
                auto_bus_xing_in_a_bits_user_amba_prot_modifiable,
                auto_bus_xing_in_a_bits_user_amba_prot_readalloc,
                auto_bus_xing_in_a_bits_user_amba_prot_writealloc,
                auto_bus_xing_in_a_bits_user_amba_prot_privileged,
                auto_bus_xing_in_a_bits_user_amba_prot_secure,
                auto_bus_xing_in_a_bits_user_amba_prot_fetch,
  input  [7:0]  auto_bus_xing_in_a_bits_mask,
  input  [63:0] auto_bus_xing_in_a_bits_data,
  input         auto_bus_xing_in_d_ready,
  output        auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_valid,
  output [3:0]  auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_id,
  output [31:0] auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_addr,
  output [7:0]  auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_len,
  output [2:0]  auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_size,
  output [1:0]  auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_burst,
  output        auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_lock,
  output [3:0]  auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_cache,
  output [2:0]  auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_prot,
  output [3:0]  auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_qos,
  output        auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_valid,
  output [63:0] auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_bits_data,
  output [7:0]  auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_bits_strb,
  output        auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_bits_last,
                auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_b_ready,
                auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_valid,
  output [3:0]  auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_id,
  output [31:0] auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_addr,
  output [7:0]  auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_len,
  output [2:0]  auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_size,
  output [1:0]  auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_burst,
  output        auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_lock,
  output [3:0]  auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_cache,
  output [2:0]  auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_prot,
  output [3:0]  auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_qos,
  output        auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_ready,
                auto_bus_xing_in_a_ready,
                auto_bus_xing_in_d_valid,
  output [2:0]  auto_bus_xing_in_d_bits_opcode,
                auto_bus_xing_in_d_bits_size,
  output [6:0]  auto_bus_xing_in_d_bits_source,
  output        auto_bus_xing_in_d_bits_denied,
  output [63:0] auto_bus_xing_in_d_bits_data,
  output        auto_bus_xing_in_d_bits_corrupt
);

  wire        _coupler_to_memory_controller_port_named_axi4_auto_widget_anon_in_a_ready;
  wire        _coupler_to_memory_controller_port_named_axi4_auto_widget_anon_in_d_valid;
  wire [2:0]
    _coupler_to_memory_controller_port_named_axi4_auto_widget_anon_in_d_bits_opcode;
  wire [2:0]
    _coupler_to_memory_controller_port_named_axi4_auto_widget_anon_in_d_bits_size;
  wire [6:0]
    _coupler_to_memory_controller_port_named_axi4_auto_widget_anon_in_d_bits_source;
  wire
    _coupler_to_memory_controller_port_named_axi4_auto_widget_anon_in_d_bits_denied;
  wire [63:0]
    _coupler_to_memory_controller_port_named_axi4_auto_widget_anon_in_d_bits_data;
  wire
    _coupler_to_memory_controller_port_named_axi4_auto_widget_anon_in_d_bits_corrupt;
  wire        _coupler_to_memory_controller_port_named_axi4_auto_tl_in_a_ready;
  wire        _coupler_to_memory_controller_port_named_axi4_auto_tl_in_d_valid;
  wire [2:0]  _coupler_to_memory_controller_port_named_axi4_auto_tl_in_d_bits_opcode;
  wire [2:0]  _coupler_to_memory_controller_port_named_axi4_auto_tl_in_d_bits_size;
  wire [6:0]  _coupler_to_memory_controller_port_named_axi4_auto_tl_in_d_bits_source;
  wire        _coupler_to_memory_controller_port_named_axi4_auto_tl_in_d_bits_denied;
  wire [63:0] _coupler_to_memory_controller_port_named_axi4_auto_tl_in_d_bits_data;
  wire        _coupler_to_memory_controller_port_named_axi4_auto_tl_in_d_bits_corrupt;
  wire        _coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_valid;
  wire [2:0]  _coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_opcode;
  wire [2:0]  _coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_param;
  wire [2:0]  _coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_size;
  wire [6:0]  _coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_source;
  wire [31:0] _coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_address;
  wire
    _coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_user_amba_prot_bufferable;
  wire
    _coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_user_amba_prot_modifiable;
  wire
    _coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_user_amba_prot_readalloc;
  wire
    _coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_user_amba_prot_writealloc;
  wire
    _coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_user_amba_prot_privileged;
  wire
    _coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_user_amba_prot_secure;
  wire
    _coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_user_amba_prot_fetch;
  wire [7:0]  _coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_mask;
  wire [63:0] _coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_data;
  wire        _coupler_to_memory_controller_port_named_axi4_auto_tl_out_d_ready;
  wire        _picker_auto_out_a_valid;
  wire [2:0]  _picker_auto_out_a_bits_opcode;
  wire [2:0]  _picker_auto_out_a_bits_param;
  wire [2:0]  _picker_auto_out_a_bits_size;
  wire [6:0]  _picker_auto_out_a_bits_source;
  wire [31:0] _picker_auto_out_a_bits_address;
  wire        _picker_auto_out_a_bits_user_amba_prot_bufferable;
  wire        _picker_auto_out_a_bits_user_amba_prot_modifiable;
  wire        _picker_auto_out_a_bits_user_amba_prot_readalloc;
  wire        _picker_auto_out_a_bits_user_amba_prot_writealloc;
  wire        _picker_auto_out_a_bits_user_amba_prot_privileged;
  wire        _picker_auto_out_a_bits_user_amba_prot_secure;
  wire        _picker_auto_out_a_bits_user_amba_prot_fetch;
  wire [7:0]  _picker_auto_out_a_bits_mask;
  wire [63:0] _picker_auto_out_a_bits_data;
  wire        _picker_auto_out_d_ready;
  ProbePicker picker (
    .clock
      (auto_mbus_clock_groups_in_member_mbus_0_clock),
    .reset
      (auto_mbus_clock_groups_in_member_mbus_0_reset),
    .auto_in_a_valid                           (auto_bus_xing_in_a_valid),
    .auto_in_a_bits_opcode                     (auto_bus_xing_in_a_bits_opcode),
    .auto_in_a_bits_param                      (auto_bus_xing_in_a_bits_param),
    .auto_in_a_bits_size                       (auto_bus_xing_in_a_bits_size),
    .auto_in_a_bits_source                     (auto_bus_xing_in_a_bits_source),
    .auto_in_a_bits_address                    (auto_bus_xing_in_a_bits_address),
    .auto_in_a_bits_user_amba_prot_bufferable
      (auto_bus_xing_in_a_bits_user_amba_prot_bufferable),
    .auto_in_a_bits_user_amba_prot_modifiable
      (auto_bus_xing_in_a_bits_user_amba_prot_modifiable),
    .auto_in_a_bits_user_amba_prot_readalloc
      (auto_bus_xing_in_a_bits_user_amba_prot_readalloc),
    .auto_in_a_bits_user_amba_prot_writealloc
      (auto_bus_xing_in_a_bits_user_amba_prot_writealloc),
    .auto_in_a_bits_user_amba_prot_privileged
      (auto_bus_xing_in_a_bits_user_amba_prot_privileged),
    .auto_in_a_bits_user_amba_prot_secure
      (auto_bus_xing_in_a_bits_user_amba_prot_secure),
    .auto_in_a_bits_user_amba_prot_fetch
      (auto_bus_xing_in_a_bits_user_amba_prot_fetch),
    .auto_in_a_bits_mask                       (auto_bus_xing_in_a_bits_mask),
    .auto_in_a_bits_data                       (auto_bus_xing_in_a_bits_data),
    .auto_in_d_ready                           (auto_bus_xing_in_d_ready),
    .auto_out_a_ready
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_in_a_ready),
    .auto_out_d_valid
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_in_d_valid),
    .auto_out_d_bits_opcode
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_in_d_bits_opcode),
    .auto_out_d_bits_size
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_in_d_bits_size),
    .auto_out_d_bits_source
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_in_d_bits_source),
    .auto_out_d_bits_denied
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_in_d_bits_denied),
    .auto_out_d_bits_data
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_in_d_bits_data),
    .auto_out_d_bits_corrupt
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_in_d_bits_corrupt),
    .auto_in_a_ready                           (auto_bus_xing_in_a_ready),
    .auto_in_d_valid                           (auto_bus_xing_in_d_valid),
    .auto_in_d_bits_opcode                     (auto_bus_xing_in_d_bits_opcode),
    .auto_in_d_bits_size                       (auto_bus_xing_in_d_bits_size),
    .auto_in_d_bits_source                     (auto_bus_xing_in_d_bits_source),
    .auto_in_d_bits_denied                     (auto_bus_xing_in_d_bits_denied),
    .auto_in_d_bits_data                       (auto_bus_xing_in_d_bits_data),
    .auto_in_d_bits_corrupt                    (auto_bus_xing_in_d_bits_corrupt),
    .auto_out_a_valid                          (_picker_auto_out_a_valid),
    .auto_out_a_bits_opcode                    (_picker_auto_out_a_bits_opcode),
    .auto_out_a_bits_param                     (_picker_auto_out_a_bits_param),
    .auto_out_a_bits_size                      (_picker_auto_out_a_bits_size),
    .auto_out_a_bits_source                    (_picker_auto_out_a_bits_source),
    .auto_out_a_bits_address                   (_picker_auto_out_a_bits_address),
    .auto_out_a_bits_user_amba_prot_bufferable
      (_picker_auto_out_a_bits_user_amba_prot_bufferable),
    .auto_out_a_bits_user_amba_prot_modifiable
      (_picker_auto_out_a_bits_user_amba_prot_modifiable),
    .auto_out_a_bits_user_amba_prot_readalloc
      (_picker_auto_out_a_bits_user_amba_prot_readalloc),
    .auto_out_a_bits_user_amba_prot_writealloc
      (_picker_auto_out_a_bits_user_amba_prot_writealloc),
    .auto_out_a_bits_user_amba_prot_privileged
      (_picker_auto_out_a_bits_user_amba_prot_privileged),
    .auto_out_a_bits_user_amba_prot_secure
      (_picker_auto_out_a_bits_user_amba_prot_secure),
    .auto_out_a_bits_user_amba_prot_fetch
      (_picker_auto_out_a_bits_user_amba_prot_fetch),
    .auto_out_a_bits_mask                      (_picker_auto_out_a_bits_mask),
    .auto_out_a_bits_data                      (_picker_auto_out_a_bits_data),
    .auto_out_d_ready                          (_picker_auto_out_d_ready)
  );
  TLInterconnectCoupler_mbus_to_memory_controller_port_named_axi4 coupler_to_memory_controller_port_named_axi4 (
    .clock
      (auto_mbus_clock_groups_in_member_mbus_0_clock),
    .reset
      (auto_mbus_clock_groups_in_member_mbus_0_reset),
    .auto_widget_anon_in_a_valid
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_valid),
    .auto_widget_anon_in_a_bits_opcode
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_opcode),
    .auto_widget_anon_in_a_bits_param
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_param),
    .auto_widget_anon_in_a_bits_size
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_size),
    .auto_widget_anon_in_a_bits_source
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_source),
    .auto_widget_anon_in_a_bits_address
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_address),
    .auto_widget_anon_in_a_bits_user_amba_prot_bufferable
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_user_amba_prot_bufferable),
    .auto_widget_anon_in_a_bits_user_amba_prot_modifiable
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_user_amba_prot_modifiable),
    .auto_widget_anon_in_a_bits_user_amba_prot_readalloc
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_user_amba_prot_readalloc),
    .auto_widget_anon_in_a_bits_user_amba_prot_writealloc
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_user_amba_prot_writealloc),
    .auto_widget_anon_in_a_bits_user_amba_prot_privileged
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_user_amba_prot_privileged),
    .auto_widget_anon_in_a_bits_user_amba_prot_secure
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_user_amba_prot_secure),
    .auto_widget_anon_in_a_bits_user_amba_prot_fetch
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_user_amba_prot_fetch),
    .auto_widget_anon_in_a_bits_mask
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_mask),
    .auto_widget_anon_in_a_bits_data
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_data),
    .auto_widget_anon_in_d_ready
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_out_d_ready),
    .auto_axi4yank_out_aw_ready
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_ready),
    .auto_axi4yank_out_w_ready
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_ready),
    .auto_axi4yank_out_b_valid
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_b_valid),
    .auto_axi4yank_out_b_bits_id
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_b_bits_id),
    .auto_axi4yank_out_b_bits_resp
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_b_bits_resp),
    .auto_axi4yank_out_ar_ready
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_ready),
    .auto_axi4yank_out_r_valid
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_valid),
    .auto_axi4yank_out_r_bits_id
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_bits_id),
    .auto_axi4yank_out_r_bits_data
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_bits_data),
    .auto_axi4yank_out_r_bits_resp
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_bits_resp),
    .auto_axi4yank_out_r_bits_last
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_bits_last),
    .auto_tl_in_a_valid                                   (_picker_auto_out_a_valid),
    .auto_tl_in_a_bits_opcode
      (_picker_auto_out_a_bits_opcode),
    .auto_tl_in_a_bits_param                              (_picker_auto_out_a_bits_param),
    .auto_tl_in_a_bits_size                               (_picker_auto_out_a_bits_size),
    .auto_tl_in_a_bits_source
      (_picker_auto_out_a_bits_source),
    .auto_tl_in_a_bits_address
      (_picker_auto_out_a_bits_address),
    .auto_tl_in_a_bits_user_amba_prot_bufferable
      (_picker_auto_out_a_bits_user_amba_prot_bufferable),
    .auto_tl_in_a_bits_user_amba_prot_modifiable
      (_picker_auto_out_a_bits_user_amba_prot_modifiable),
    .auto_tl_in_a_bits_user_amba_prot_readalloc
      (_picker_auto_out_a_bits_user_amba_prot_readalloc),
    .auto_tl_in_a_bits_user_amba_prot_writealloc
      (_picker_auto_out_a_bits_user_amba_prot_writealloc),
    .auto_tl_in_a_bits_user_amba_prot_privileged
      (_picker_auto_out_a_bits_user_amba_prot_privileged),
    .auto_tl_in_a_bits_user_amba_prot_secure
      (_picker_auto_out_a_bits_user_amba_prot_secure),
    .auto_tl_in_a_bits_user_amba_prot_fetch
      (_picker_auto_out_a_bits_user_amba_prot_fetch),
    .auto_tl_in_a_bits_mask                               (_picker_auto_out_a_bits_mask),
    .auto_tl_in_a_bits_data                               (_picker_auto_out_a_bits_data),
    .auto_tl_in_d_ready                                   (_picker_auto_out_d_ready),
    .auto_tl_out_a_ready
      (_coupler_to_memory_controller_port_named_axi4_auto_widget_anon_in_a_ready),
    .auto_tl_out_d_valid
      (_coupler_to_memory_controller_port_named_axi4_auto_widget_anon_in_d_valid),
    .auto_tl_out_d_bits_opcode
      (_coupler_to_memory_controller_port_named_axi4_auto_widget_anon_in_d_bits_opcode),
    .auto_tl_out_d_bits_size
      (_coupler_to_memory_controller_port_named_axi4_auto_widget_anon_in_d_bits_size),
    .auto_tl_out_d_bits_source
      (_coupler_to_memory_controller_port_named_axi4_auto_widget_anon_in_d_bits_source),
    .auto_tl_out_d_bits_denied
      (_coupler_to_memory_controller_port_named_axi4_auto_widget_anon_in_d_bits_denied),
    .auto_tl_out_d_bits_data
      (_coupler_to_memory_controller_port_named_axi4_auto_widget_anon_in_d_bits_data),
    .auto_tl_out_d_bits_corrupt
      (_coupler_to_memory_controller_port_named_axi4_auto_widget_anon_in_d_bits_corrupt),
    .auto_widget_anon_in_a_ready
      (_coupler_to_memory_controller_port_named_axi4_auto_widget_anon_in_a_ready),
    .auto_widget_anon_in_d_valid
      (_coupler_to_memory_controller_port_named_axi4_auto_widget_anon_in_d_valid),
    .auto_widget_anon_in_d_bits_opcode
      (_coupler_to_memory_controller_port_named_axi4_auto_widget_anon_in_d_bits_opcode),
    .auto_widget_anon_in_d_bits_size
      (_coupler_to_memory_controller_port_named_axi4_auto_widget_anon_in_d_bits_size),
    .auto_widget_anon_in_d_bits_source
      (_coupler_to_memory_controller_port_named_axi4_auto_widget_anon_in_d_bits_source),
    .auto_widget_anon_in_d_bits_denied
      (_coupler_to_memory_controller_port_named_axi4_auto_widget_anon_in_d_bits_denied),
    .auto_widget_anon_in_d_bits_data
      (_coupler_to_memory_controller_port_named_axi4_auto_widget_anon_in_d_bits_data),
    .auto_widget_anon_in_d_bits_corrupt
      (_coupler_to_memory_controller_port_named_axi4_auto_widget_anon_in_d_bits_corrupt),
    .auto_axi4yank_out_aw_valid
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_valid),
    .auto_axi4yank_out_aw_bits_id
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_id),
    .auto_axi4yank_out_aw_bits_addr
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_addr),
    .auto_axi4yank_out_aw_bits_len
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_len),
    .auto_axi4yank_out_aw_bits_size
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_size),
    .auto_axi4yank_out_aw_bits_burst
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_burst),
    .auto_axi4yank_out_aw_bits_lock
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_lock),
    .auto_axi4yank_out_aw_bits_cache
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_cache),
    .auto_axi4yank_out_aw_bits_prot
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_prot),
    .auto_axi4yank_out_aw_bits_qos
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_qos),
    .auto_axi4yank_out_w_valid
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_valid),
    .auto_axi4yank_out_w_bits_data
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_bits_data),
    .auto_axi4yank_out_w_bits_strb
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_bits_strb),
    .auto_axi4yank_out_w_bits_last
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_bits_last),
    .auto_axi4yank_out_b_ready
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_b_ready),
    .auto_axi4yank_out_ar_valid
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_valid),
    .auto_axi4yank_out_ar_bits_id
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_id),
    .auto_axi4yank_out_ar_bits_addr
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_addr),
    .auto_axi4yank_out_ar_bits_len
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_len),
    .auto_axi4yank_out_ar_bits_size
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_size),
    .auto_axi4yank_out_ar_bits_burst
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_burst),
    .auto_axi4yank_out_ar_bits_lock
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_lock),
    .auto_axi4yank_out_ar_bits_cache
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_cache),
    .auto_axi4yank_out_ar_bits_prot
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_prot),
    .auto_axi4yank_out_ar_bits_qos
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_qos),
    .auto_axi4yank_out_r_ready
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_ready),
    .auto_tl_in_a_ready
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_in_a_ready),
    .auto_tl_in_d_valid
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_in_d_valid),
    .auto_tl_in_d_bits_opcode
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_in_d_bits_opcode),
    .auto_tl_in_d_bits_size
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_in_d_bits_size),
    .auto_tl_in_d_bits_source
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_in_d_bits_source),
    .auto_tl_in_d_bits_denied
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_in_d_bits_denied),
    .auto_tl_in_d_bits_data
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_in_d_bits_data),
    .auto_tl_in_d_bits_corrupt
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_in_d_bits_corrupt),
    .auto_tl_out_a_valid
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_valid),
    .auto_tl_out_a_bits_opcode
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_opcode),
    .auto_tl_out_a_bits_param
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_param),
    .auto_tl_out_a_bits_size
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_size),
    .auto_tl_out_a_bits_source
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_source),
    .auto_tl_out_a_bits_address
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_address),
    .auto_tl_out_a_bits_user_amba_prot_bufferable
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_user_amba_prot_bufferable),
    .auto_tl_out_a_bits_user_amba_prot_modifiable
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_user_amba_prot_modifiable),
    .auto_tl_out_a_bits_user_amba_prot_readalloc
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_user_amba_prot_readalloc),
    .auto_tl_out_a_bits_user_amba_prot_writealloc
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_user_amba_prot_writealloc),
    .auto_tl_out_a_bits_user_amba_prot_privileged
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_user_amba_prot_privileged),
    .auto_tl_out_a_bits_user_amba_prot_secure
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_user_amba_prot_secure),
    .auto_tl_out_a_bits_user_amba_prot_fetch
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_user_amba_prot_fetch),
    .auto_tl_out_a_bits_mask
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_mask),
    .auto_tl_out_a_bits_data
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_data),
    .auto_tl_out_d_ready
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_out_d_ready)
  );
endmodule

module TLMonitor_20(
  input        clock,
               reset,
               io_in_a_ready,
               io_in_a_valid,
  input [2:0]  io_in_a_bits_opcode,
               io_in_a_bits_param,
               io_in_a_bits_size,
  input [4:0]  io_in_a_bits_source,
  input [31:0] io_in_a_bits_address,
  input [7:0]  io_in_a_bits_mask,
  input        io_in_a_bits_corrupt,
               io_in_b_ready,
               io_in_b_valid,
  input [1:0]  io_in_b_bits_param,
  input [31:0] io_in_b_bits_address,
  input        io_in_c_ready,
               io_in_c_valid,
  input [2:0]  io_in_c_bits_opcode,
               io_in_c_bits_param,
               io_in_c_bits_size,
  input [4:0]  io_in_c_bits_source,
  input [31:0] io_in_c_bits_address,
  input        io_in_c_bits_corrupt,
               io_in_d_ready,
               io_in_d_valid,
  input [2:0]  io_in_d_bits_opcode,
  input [1:0]  io_in_d_bits_param,
  input [2:0]  io_in_d_bits_size,
  input [4:0]  io_in_d_bits_source,
  input [1:0]  io_in_d_bits_sink,
  input        io_in_d_bits_denied,
               io_in_d_bits_corrupt,
               io_in_e_valid,
  input [1:0]  io_in_e_bits_sink
);

  wire [31:0] _plusarg_reader_1_out;
  wire [31:0] _plusarg_reader_out;
  wire [12:0] _GEN = 13'h3F << io_in_a_bits_size;
  wire [12:0] _GEN_0 = 13'h3F << io_in_c_bits_size;
  wire        _GEN_1 = io_in_a_ready & io_in_a_valid;
  reg  [2:0]  a_first_counter;
  reg  [2:0]  opcode;
  reg  [2:0]  param;
  reg  [2:0]  size;
  reg  [4:0]  source;
  reg  [31:0] address;
  wire        _GEN_2 = io_in_d_ready & io_in_d_valid;
  reg  [2:0]  d_first_counter;
  reg  [2:0]  opcode_1;
  reg  [1:0]  param_1;
  reg  [2:0]  size_1;
  reg  [4:0]  source_1;
  reg  [1:0]  sink;
  reg         denied;
  reg  [2:0]  b_first_counter;
  reg  [2:0]  opcode_2;
  reg  [1:0]  param_2;
  reg  [2:0]  size_2;
  reg  [4:0]  source_2;
  reg  [31:0] address_1;
  wire        _GEN_3 = io_in_c_ready & io_in_c_valid;
  reg  [2:0]  c_first_counter;
  reg  [2:0]  opcode_3;
  reg  [2:0]  param_3;
  reg  [2:0]  size_3;
  reg  [4:0]  source_3;
  reg  [31:0] address_2;
  reg  [18:0] inflight;
  reg  [75:0] inflight_opcodes;
  reg  [75:0] inflight_sizes;
  reg  [2:0]  a_first_counter_1;
  wire        a_first_1 = a_first_counter_1 == 3'h0;
  reg  [2:0]  d_first_counter_1;
  wire        d_first_1 = d_first_counter_1 == 3'h0;
  wire [31:0] _GEN_4 = 32'h1 << io_in_a_bits_source;
  wire        _GEN_5 = _GEN_1 & a_first_1;
  wire        d_release_ack = io_in_d_bits_opcode == 3'h6;
  wire [31:0] _GEN_6 = 32'h1 << io_in_d_bits_source;
  reg  [31:0] watchdog;
  reg  [18:0] inflight_1;
  reg  [75:0] inflight_sizes_1;
  reg  [2:0]  c_first_counter_1;
  wire        c_first_1 = c_first_counter_1 == 3'h0;
  reg  [2:0]  d_first_counter_2;
  wire        d_first_2 = d_first_counter_2 == 3'h0;
  wire        _GEN_7 = io_in_c_bits_opcode[2] & io_in_c_bits_opcode[1];
  wire [31:0] _GEN_8 = 32'h1 << io_in_c_bits_source;
  wire        _GEN_9 = _GEN_3 & c_first_1 & _GEN_7;
  reg  [31:0] watchdog_1;
  reg  [3:0]  inflight_2;
  reg  [2:0]  d_first_counter_3;
  wire        d_first_3 = d_first_counter_3 == 3'h0;
  wire        _GEN_10 =
    _GEN_2 & d_first_3 & io_in_d_bits_opcode[2] & ~(io_in_d_bits_opcode[1]);
  wire [3:0]  _GEN_11 = {2'h0, io_in_d_bits_sink};
  wire [3:0]  _GEN_12 = {2'h0, io_in_e_bits_sink};
  wire [3:0]  _GEN_13 = (_GEN_10 ? 4'h1 << _GEN_11 : 4'h0) | inflight_2;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      automatic logic [7:0][2:0] _GEN_14 =
        '{3'h4, 3'h5, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic [7:0][2:0] _GEN_15 =
        '{3'h4, 3'h4, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic            _GEN_16 = io_in_a_bits_source[4:3] == 2'h0;
      automatic logic            _GEN_17 = io_in_a_bits_source[4:3] == 2'h1;
      automatic logic            _GEN_18 = io_in_a_bits_source == 5'h10;
      automatic logic            _GEN_19 = io_in_a_bits_source == 5'h11;
      automatic logic            _GEN_20 = io_in_a_bits_source == 5'h12;
      automatic logic            source_ok =
        _GEN_16 | _GEN_17 | _GEN_18 | _GEN_19 | _GEN_20;
      automatic logic [5:0]      _GEN_21 = io_in_a_bits_address[5:0] & ~(_GEN[5:0]);
      automatic logic            _GEN_22 = io_in_a_bits_size > 3'h2;
      automatic logic            mask_size = io_in_a_bits_size[1:0] == 2'h2;
      automatic logic            mask_acc =
        _GEN_22 | mask_size & ~(io_in_a_bits_address[2]);
      automatic logic            mask_acc_1 =
        _GEN_22 | mask_size & io_in_a_bits_address[2];
      automatic logic            mask_size_1 = io_in_a_bits_size[1:0] == 2'h1;
      automatic logic            mask_eq_2 =
        ~(io_in_a_bits_address[2]) & ~(io_in_a_bits_address[1]);
      automatic logic            mask_acc_2 = mask_acc | mask_size_1 & mask_eq_2;
      automatic logic            mask_eq_3 =
        ~(io_in_a_bits_address[2]) & io_in_a_bits_address[1];
      automatic logic            mask_acc_3 = mask_acc | mask_size_1 & mask_eq_3;
      automatic logic            mask_eq_4 =
        io_in_a_bits_address[2] & ~(io_in_a_bits_address[1]);
      automatic logic            mask_acc_4 = mask_acc_1 | mask_size_1 & mask_eq_4;
      automatic logic            mask_eq_5 =
        io_in_a_bits_address[2] & io_in_a_bits_address[1];
      automatic logic            mask_acc_5 = mask_acc_1 | mask_size_1 & mask_eq_5;
      automatic logic [7:0]      mask =
        {mask_acc_5 | mask_eq_5 & io_in_a_bits_address[0],
         mask_acc_5 | mask_eq_5 & ~(io_in_a_bits_address[0]),
         mask_acc_4 | mask_eq_4 & io_in_a_bits_address[0],
         mask_acc_4 | mask_eq_4 & ~(io_in_a_bits_address[0]),
         mask_acc_3 | mask_eq_3 & io_in_a_bits_address[0],
         mask_acc_3 | mask_eq_3 & ~(io_in_a_bits_address[0]),
         mask_acc_2 | mask_eq_2 & io_in_a_bits_address[0],
         mask_acc_2 | mask_eq_2 & ~(io_in_a_bits_address[0])};
      automatic logic            _GEN_23 =
        _GEN_16 | _GEN_17 | _GEN_18 | _GEN_19 | _GEN_20;
      automatic logic            _GEN_24 = io_in_a_bits_address[31:28] == 4'h8;
      automatic logic            _GEN_25 = io_in_a_bits_size != 3'h7 & _GEN_24;
      automatic logic            _GEN_26 = _GEN_23 & _GEN_25;
      automatic logic            _GEN_27 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_28 = _GEN_18 & io_in_a_bits_size == 3'h6 & _GEN_24;
      automatic logic            _GEN_29 = io_in_a_bits_param > 3'h2;
      automatic logic            _GEN_30 = io_in_a_bits_mask != 8'hFF;
      automatic logic            _GEN_31 =
        io_in_a_valid & (&io_in_a_bits_opcode) & ~reset;
      automatic logic            _GEN_32 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_33 = io_in_a_bits_mask != mask;
      automatic logic            _GEN_34 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_35 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_36 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_37 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h3 & ~reset;
      automatic logic            _GEN_38 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h5 & ~reset;
      automatic logic            source_ok_1 =
        io_in_d_bits_source[4:3] == 2'h0 | io_in_d_bits_source[4:3] == 2'h1
        | io_in_d_bits_source == 5'h10 | io_in_d_bits_source == 5'h11
        | io_in_d_bits_source == 5'h12;
      automatic logic            _GEN_39 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_40 = io_in_d_bits_size < 3'h3;
      automatic logic            _GEN_41 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_42 = io_in_d_bits_param == 2'h2;
      automatic logic            _GEN_43 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h5 & ~reset;
      automatic logic            _GEN_44 = ~io_in_d_bits_denied | io_in_d_bits_corrupt;
      automatic logic            _GEN_45 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_46 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_47 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_48 = io_in_b_valid & ~reset;
      automatic logic            _GEN_49 = io_in_c_bits_source[4:3] == 2'h0;
      automatic logic            _GEN_50 = io_in_c_bits_source[4:3] == 2'h1;
      automatic logic            _GEN_51 = io_in_c_bits_source == 5'h10;
      automatic logic            _GEN_52 = io_in_c_bits_source == 5'h11;
      automatic logic            _GEN_53 = io_in_c_bits_source == 5'h12;
      automatic logic            source_ok_2 =
        _GEN_49 | _GEN_50 | _GEN_51 | _GEN_52 | _GEN_53;
      automatic logic [5:0]      _GEN_54 = io_in_c_bits_address[5:0] & ~(_GEN_0[5:0]);
      automatic logic            _GEN_55 = io_in_c_bits_address[31:28] == 4'h8;
      automatic logic            _GEN_56 = io_in_c_bits_opcode == 3'h4;
      automatic logic            _GEN_57 = io_in_c_valid & _GEN_56 & ~reset;
      automatic logic            _GEN_58 = io_in_c_bits_size < 3'h3;
      automatic logic            _GEN_59 = io_in_c_bits_opcode == 3'h5;
      automatic logic            _GEN_60 = io_in_c_valid & _GEN_59 & ~reset;
      automatic logic            _GEN_61 =
        (_GEN_49 | _GEN_50 | _GEN_51 | _GEN_52 | _GEN_53) & io_in_c_bits_size != 3'h7
        & _GEN_55;
      automatic logic            _GEN_62 =
        io_in_c_valid & io_in_c_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_63 = _GEN_51 & io_in_c_bits_size == 3'h6 & _GEN_55;
      automatic logic            _GEN_64 =
        io_in_c_valid & (&io_in_c_bits_opcode) & ~reset;
      automatic logic            _GEN_65 =
        io_in_c_valid & io_in_c_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_66 =
        io_in_c_valid & io_in_c_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_67 =
        io_in_c_valid & io_in_c_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_68 = io_in_a_valid & (|a_first_counter) & ~reset;
      automatic logic            _GEN_69 = io_in_d_valid & (|d_first_counter) & ~reset;
      automatic logic            _GEN_70 = io_in_b_valid & (|b_first_counter) & ~reset;
      automatic logic            _GEN_71 = io_in_c_valid & (|c_first_counter) & ~reset;
      automatic logic [75:0]     _GEN_72 = {69'h0, io_in_d_bits_source, 2'h0};
      automatic logic [75:0]     _GEN_73 = inflight_opcodes >> _GEN_72;
      automatic logic            _GEN_74 = io_in_a_valid & a_first_1;
      automatic logic [18:0]     a_set_wo_ready = _GEN_74 ? _GEN_4[18:0] : 19'h0;
      automatic logic            _GEN_75 = io_in_d_valid & d_first_1;
      automatic logic            _GEN_76 = _GEN_75 & ~d_release_ack;
      automatic logic            _GEN_77 = io_in_a_bits_source == io_in_d_bits_source;
      automatic logic            same_cycle_resp = _GEN_74 & _GEN_77;
      automatic logic [18:0]     _GEN_78 = {14'h0, io_in_d_bits_source};
      automatic logic            _GEN_79 = _GEN_76 & same_cycle_resp & ~reset;
      automatic logic            _GEN_80 = _GEN_76 & ~same_cycle_resp & ~reset;
      automatic logic            _GEN_81 = io_in_c_valid & c_first_1 & _GEN_7;
      automatic logic [18:0]     c_set_wo_ready = _GEN_81 ? _GEN_8[18:0] : 19'h0;
      automatic logic            _GEN_82 = io_in_d_valid & d_first_2;
      automatic logic            _GEN_83 = _GEN_82 & d_release_ack;
      automatic logic            _GEN_84 = io_in_c_bits_source == io_in_d_bits_source;
      automatic logic            same_cycle_resp_1 = _GEN_81 & _GEN_84;
      automatic logic [18:0]     _GEN_85 = inflight >> io_in_a_bits_source;
      automatic logic [18:0]     _GEN_86 = inflight >> _GEN_78;
      automatic logic [75:0]     _GEN_87 = inflight_sizes >> _GEN_72;
      automatic logic [18:0]     _GEN_88 = inflight_1 >> io_in_c_bits_source;
      automatic logic [18:0]     _GEN_89 = inflight_1 >> _GEN_78;
      automatic logic [75:0]     _GEN_90 = inflight_sizes_1 >> _GEN_72;
      automatic logic [3:0]      _GEN_91 = inflight_2 >> _GEN_11;
      automatic logic [3:0]      _GEN_92 = _GEN_13 >> _GEN_12;
      if (_GEN_27 & ~_GEN_26) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & ~_GEN_28) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock carries invalid source ID (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & ~_GEN_22) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & (|_GEN_21)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & _GEN_29) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock carries invalid grow param (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & _GEN_30) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock is corrupt (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & ~_GEN_26) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & ~_GEN_28) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm carries invalid source ID (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & ~_GEN_22) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & (|_GEN_21)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & _GEN_29) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm carries invalid grow param (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & ~(|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & _GEN_30) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm is corrupt (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & ~_GEN_23) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & ~_GEN_25) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get carries invalid source ID (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & (|_GEN_21)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get address not aligned to size (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get carries invalid param (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & _GEN_33) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get contains invalid mask (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get is corrupt (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_34 & ~_GEN_26) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_34 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull carries invalid source ID (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_34 & (|_GEN_21)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull address not aligned to size (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_34 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull carries invalid param (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_34 & _GEN_33) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull contains invalid mask (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_35 & ~_GEN_26) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_35 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_35 & (|_GEN_21)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial address not aligned to size (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_35 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial carries invalid param (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_35 & (|(io_in_a_bits_mask & ~mask))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial contains invalid mask (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_36) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_36 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_36 & (|_GEN_21)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_36 & io_in_a_bits_param > 3'h4) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_36 & _GEN_33) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical carries invalid source ID (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & (|_GEN_21)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical address not aligned to size (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & io_in_a_bits_param[2]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical carries invalid opcode param (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & _GEN_33) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical contains invalid mask (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_38) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_38 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint carries invalid source ID (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_38 & (|_GEN_21)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint address not aligned to size (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_38 & (|(io_in_a_bits_param[2:1]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint carries invalid opcode param (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_38 & _GEN_33) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint contains invalid mask (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_38 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint is corrupt (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & ~reset & (&io_in_d_bits_opcode)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel has invalid opcode (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_39 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_39 & _GEN_40) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_39 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_39 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck is corrupt (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_39 & io_in_d_bits_denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck is denied (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_41 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid source ID (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_41 & _GEN_40) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant smaller than a beat (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_41 & (&io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid cap param (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_41 & _GEN_42) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries toN param (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_41 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant is corrupt (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid source ID (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & _GEN_40) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData smaller than a beat (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & (&io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid cap param (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & _GEN_42) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries toN param (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & ~_GEN_44) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData is denied but not corrupt (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_45 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_45 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck carries invalid param (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_45 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck is corrupt (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_46 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_46 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData carries invalid param (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_46 & ~_GEN_44) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData is denied but not corrupt (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_47 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck carries invalid source ID (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_47 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck carries invalid param (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_47 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck is corrupt (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_48 & io_in_b_bits_address[31:28] != 4'h8) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel carries Probe type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel Probe carries unmanaged address (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_48 & (|(io_in_b_bits_address[5:0]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel Probe address not aligned to size (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_48 & (&io_in_b_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel Probe carries invalid cap param (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_57 & ~_GEN_55) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ProbeAck carries unmanaged address (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_57 & ~source_ok_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ProbeAck carries invalid source ID (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_57 & _GEN_58) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ProbeAck smaller than a beat (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_57 & (|_GEN_54)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ProbeAck address not aligned to size (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_57 & (&(io_in_c_bits_param[2:1]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ProbeAck carries invalid report param (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_57 & io_in_c_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ProbeAck is corrupt (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_60 & ~_GEN_55) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ProbeAckData carries unmanaged address (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_60 & ~source_ok_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ProbeAckData carries invalid source ID (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_60 & _GEN_58) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ProbeAckData smaller than a beat (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_60 & (|_GEN_54)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ProbeAckData address not aligned to size (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_60 & (&(io_in_c_bits_param[2:1]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ProbeAckData carries invalid report param (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_62 & ~_GEN_61) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel carries Release type unsupported by manager (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_62 & ~_GEN_63) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel carries Release from a client which does not support Probe (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_62 & ~source_ok_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel Release carries invalid source ID (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_62 & _GEN_58) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel Release smaller than a beat (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_62 & (|_GEN_54)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel Release address not aligned to size (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_62 & (&(io_in_c_bits_param[2:1]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel Release carries invalid report param (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_62 & io_in_c_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel Release is corrupt (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_64 & ~_GEN_61) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel carries ReleaseData type unsupported by manager (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_64 & ~_GEN_63) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel carries Release from a client which does not support Probe (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_64 & ~source_ok_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ReleaseData carries invalid source ID (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_64 & _GEN_58) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ReleaseData smaller than a beat (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_64 & (|_GEN_54)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ReleaseData address not aligned to size (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_64 & (&(io_in_c_bits_param[2:1]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ReleaseData carries invalid report param (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_65 & ~_GEN_55) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel AccessAck carries unmanaged address (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_65 & ~source_ok_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel AccessAck carries invalid source ID (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_65 & (|_GEN_54)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel AccessAck address not aligned to size (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_65 & (|io_in_c_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel AccessAck carries invalid param (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_65 & io_in_c_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel AccessAck is corrupt (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_66 & ~_GEN_55) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel AccessAckData carries unmanaged address (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_66 & ~source_ok_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel AccessAckData carries invalid source ID (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_66 & (|_GEN_54)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel AccessAckData address not aligned to size (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_66 & (|io_in_c_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel AccessAckData carries invalid param (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_67 & ~_GEN_55) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel HintAck carries unmanaged address (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_67 & ~source_ok_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel HintAck carries invalid source ID (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_67 & (|_GEN_54)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel HintAck address not aligned to size (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_67 & (|io_in_c_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel HintAck carries invalid param (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_67 & io_in_c_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel HintAck is corrupt (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_68 & io_in_a_bits_opcode != opcode) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel opcode changed within multibeat operation (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_68 & io_in_a_bits_param != param) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel param changed within multibeat operation (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_68 & io_in_a_bits_size != size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel size changed within multibeat operation (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_68 & io_in_a_bits_source != source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel source changed within multibeat operation (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_68 & io_in_a_bits_address != address) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel address changed with multibeat operation (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_69 & io_in_d_bits_opcode != opcode_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel opcode changed within multibeat operation (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_69 & io_in_d_bits_param != param_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel param changed within multibeat operation (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_69 & io_in_d_bits_size != size_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel size changed within multibeat operation (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_69 & io_in_d_bits_source != source_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel source changed within multibeat operation (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_69 & io_in_d_bits_sink != sink) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel sink changed with multibeat operation (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_69 & io_in_d_bits_denied != denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel denied changed with multibeat operation (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_70 & opcode_2 != 3'h6) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel opcode changed within multibeat operation (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_70 & io_in_b_bits_param != param_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel param changed within multibeat operation (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_70 & size_2 != 3'h6) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel size changed within multibeat operation (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_70 & source_2 != 5'h10) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel source changed within multibeat operation (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_70 & io_in_b_bits_address != address_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel addresss changed with multibeat operation (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_71 & io_in_c_bits_opcode != opcode_3) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel opcode changed within multibeat operation (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_71 & io_in_c_bits_param != param_3) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel param changed within multibeat operation (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_71 & io_in_c_bits_size != size_3) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel size changed within multibeat operation (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_71 & io_in_c_bits_source != source_3) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel source changed within multibeat operation (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_71 & io_in_c_bits_address != address_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel address changed with multibeat operation (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_5 & ~reset & _GEN_85[0]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel re-used a source ID (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_76 & ~reset & ~(_GEN_86[0] | same_cycle_resp)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_79
          & ~(io_in_d_bits_opcode == _GEN_15[io_in_a_bits_opcode]
              | io_in_d_bits_opcode == _GEN_14[io_in_a_bits_opcode])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_79 & io_in_a_bits_size != io_in_d_bits_size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_80
          & ~(io_in_d_bits_opcode == _GEN_15[_GEN_73[3:1]]
              | io_in_d_bits_opcode == _GEN_14[_GEN_73[3:1]])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_80 & io_in_d_bits_size != _GEN_87[3:1]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_75 & a_first_1 & io_in_a_valid & _GEN_77 & ~d_release_ack & ~reset
          & ~(~io_in_d_ready | io_in_a_ready)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ready check\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(a_set_wo_ready != (_GEN_76 ? _GEN_6[18:0] : 19'h0)
              | a_set_wo_ready == 19'h0)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' and 'D' concurrent, despite minlatency > 0 (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight == 19'h0 | _plusarg_reader_out == 32'h0
              | watchdog < _plusarg_reader_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_9 & ~reset & _GEN_88[0]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel re-used a source ID (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_83 & ~reset & ~(_GEN_89[0] | same_cycle_resp_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_83 & same_cycle_resp_1 & ~reset
          & io_in_d_bits_size != io_in_c_bits_size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_83 & ~same_cycle_resp_1 & ~reset & io_in_d_bits_size != _GEN_90[3:1]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_82 & c_first_1 & io_in_c_valid & _GEN_84 & d_release_ack
          & ~(_GEN_56 | _GEN_59) & ~reset & ~(~io_in_d_ready | io_in_c_ready)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ready check\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if ((|c_set_wo_ready) & ~reset
          & c_set_wo_ready == (_GEN_83 ? _GEN_6[18:0] : 19'h0)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' and 'D' concurrent, despite minlatency > 0 (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight_1 == 19'h0 | _plusarg_reader_1_out == 32'h0
              | watchdog_1 < _plusarg_reader_1_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_10 & ~reset & _GEN_91[0]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel re-used a sink ID (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_e_valid & ~reset & ~(_GEN_92[0])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'E' channel acknowledged for nothing inflight (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:69:27)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    automatic logic b_first_done;
    b_first_done = io_in_b_ready & io_in_b_valid;
    if (reset) begin
      a_first_counter <= 3'h0;
      d_first_counter <= 3'h0;
      b_first_counter <= 3'h0;
      c_first_counter <= 3'h0;
      inflight <= 19'h0;
      inflight_opcodes <= 76'h0;
      inflight_sizes <= 76'h0;
      a_first_counter_1 <= 3'h0;
      d_first_counter_1 <= 3'h0;
      watchdog <= 32'h0;
      inflight_1 <= 19'h0;
      inflight_sizes_1 <= 76'h0;
      c_first_counter_1 <= 3'h0;
      d_first_counter_2 <= 3'h0;
      watchdog_1 <= 32'h0;
      inflight_2 <= 4'h0;
      d_first_counter_3 <= 3'h0;
    end
    else begin
      automatic logic [258:0] _GEN_93 = {252'h0, io_in_a_bits_source, 2'h0};
      automatic logic         _GEN_94 = _GEN_2 & d_first_1 & ~d_release_ack;
      automatic logic [270:0] _GEN_95 = 271'hF << {264'h0, io_in_d_bits_source, 2'h0};
      automatic logic [75:0]  d_sizes_clr = _GEN_94 ? _GEN_95[75:0] : 76'h0;
      automatic logic         _GEN_96 = _GEN_2 & d_first_2 & d_release_ack;
      automatic logic [258:0] _GEN_97 =
        {255'h0, _GEN_5 ? {io_in_a_bits_opcode, 1'h1} : 4'h0} << _GEN_93;
      automatic logic [258:0] _GEN_98 =
        {255'h0, _GEN_5 ? {io_in_a_bits_size, 1'h1} : 4'h0} << _GEN_93;
      automatic logic [258:0] _GEN_99 =
        {255'h0, _GEN_9 ? {io_in_c_bits_size, 1'h1} : 4'h0}
        << {252'h0, io_in_c_bits_source, 2'h0};
      if (_GEN_1) begin
        if (|a_first_counter)
          a_first_counter <= a_first_counter - 3'h1;
        else if (io_in_a_bits_opcode[2])
          a_first_counter <= 3'h0;
        else
          a_first_counter <= ~(_GEN[5:3]);
        if (a_first_1) begin
          if (io_in_a_bits_opcode[2])
            a_first_counter_1 <= 3'h0;
          else
            a_first_counter_1 <= ~(_GEN[5:3]);
        end
        else
          a_first_counter_1 <= a_first_counter_1 - 3'h1;
      end
      if (_GEN_2) begin
        automatic logic [12:0] _GEN_100 = 13'h3F << io_in_d_bits_size;
        if (|d_first_counter)
          d_first_counter <= d_first_counter - 3'h1;
        else if (io_in_d_bits_opcode[0])
          d_first_counter <= ~(_GEN_100[5:3]);
        else
          d_first_counter <= 3'h0;
        if (d_first_1) begin
          if (io_in_d_bits_opcode[0])
            d_first_counter_1 <= ~(_GEN_100[5:3]);
          else
            d_first_counter_1 <= 3'h0;
        end
        else
          d_first_counter_1 <= d_first_counter_1 - 3'h1;
        if (d_first_2) begin
          if (io_in_d_bits_opcode[0])
            d_first_counter_2 <= ~(_GEN_100[5:3]);
          else
            d_first_counter_2 <= 3'h0;
        end
        else
          d_first_counter_2 <= d_first_counter_2 - 3'h1;
        if (d_first_3) begin
          if (io_in_d_bits_opcode[0])
            d_first_counter_3 <= ~(_GEN_100[5:3]);
          else
            d_first_counter_3 <= 3'h0;
        end
        else
          d_first_counter_3 <= d_first_counter_3 - 3'h1;
      end
      if (b_first_done) begin
        if (|b_first_counter)
          b_first_counter <= b_first_counter - 3'h1;
        else
          b_first_counter <= 3'h0;
      end
      if (_GEN_3) begin
        if (|c_first_counter)
          c_first_counter <= c_first_counter - 3'h1;
        else if (io_in_c_bits_opcode[0])
          c_first_counter <= ~(_GEN_0[5:3]);
        else
          c_first_counter <= 3'h0;
        if (c_first_1) begin
          if (io_in_c_bits_opcode[0])
            c_first_counter_1 <= ~(_GEN_0[5:3]);
          else
            c_first_counter_1 <= 3'h0;
        end
        else
          c_first_counter_1 <= c_first_counter_1 - 3'h1;
      end
      inflight <=
        (inflight | (_GEN_5 ? _GEN_4[18:0] : 19'h0)) & ~(_GEN_94 ? _GEN_6[18:0] : 19'h0);
      inflight_opcodes <=
        (inflight_opcodes | (_GEN_5 ? _GEN_97[75:0] : 76'h0)) & ~d_sizes_clr;
      inflight_sizes <=
        (inflight_sizes | (_GEN_5 ? _GEN_98[75:0] : 76'h0)) & ~d_sizes_clr;
      if (_GEN_1 | _GEN_2)
        watchdog <= 32'h0;
      else
        watchdog <= watchdog + 32'h1;
      inflight_1 <=
        (inflight_1 | (_GEN_9 ? _GEN_8[18:0] : 19'h0))
        & ~(_GEN_96 ? _GEN_6[18:0] : 19'h0);
      inflight_sizes_1 <=
        (inflight_sizes_1 | (_GEN_9 ? _GEN_99[75:0] : 76'h0))
        & ~(_GEN_96 ? _GEN_95[75:0] : 76'h0);
      if (_GEN_3 | _GEN_2)
        watchdog_1 <= 32'h0;
      else
        watchdog_1 <= watchdog_1 + 32'h1;
      inflight_2 <= _GEN_13 & ~(io_in_e_valid ? 4'h1 << _GEN_12 : 4'h0);
    end
    if (_GEN_1 & ~(|a_first_counter)) begin
      opcode <= io_in_a_bits_opcode;
      param <= io_in_a_bits_param;
      size <= io_in_a_bits_size;
      source <= io_in_a_bits_source;
      address <= io_in_a_bits_address;
    end
    if (_GEN_2 & ~(|d_first_counter)) begin
      opcode_1 <= io_in_d_bits_opcode;
      param_1 <= io_in_d_bits_param;
      size_1 <= io_in_d_bits_size;
      source_1 <= io_in_d_bits_source;
      sink <= io_in_d_bits_sink;
      denied <= io_in_d_bits_denied;
    end
    if (b_first_done & ~(|b_first_counter)) begin
      opcode_2 <= 3'h6;
      param_2 <= io_in_b_bits_param;
      size_2 <= 3'h6;
      source_2 <= 5'h10;
      address_1 <= io_in_b_bits_address;
    end
    if (_GEN_3 & ~(|c_first_counter)) begin
      opcode_3 <= io_in_c_bits_opcode;
      param_3 <= io_in_c_bits_param;
      size_3 <= io_in_c_bits_size;
      source_3 <= io_in_c_bits_source;
      address_2 <= io_in_c_bits_address;
    end
  end // always @(posedge)
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader (
    .out (_plusarg_reader_out)
  );
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader_1 (
    .out (_plusarg_reader_1_out)
  );
endmodule

module BroadcastFilter(
  input         io_request_valid,
  input  [1:0]  io_request_bits_mshr,
  input  [31:0] io_request_bits_address,
  input         io_request_bits_allocOH,
                io_request_bits_needT,
                io_response_ready,
  output        io_request_ready,
                io_response_valid,
  output [1:0]  io_response_bits_mshr,
  output [31:0] io_response_bits_address,
  output        io_response_bits_allocOH,
                io_response_bits_needT
);

  assign io_request_ready = io_response_ready;
  assign io_response_valid = io_request_valid;
  assign io_response_bits_mshr = io_request_bits_mshr;
  assign io_response_bits_address = io_request_bits_address;
  assign io_response_bits_allocOH = io_request_bits_allocOH;
  assign io_response_bits_needT = io_request_bits_needT;
endmodule

module Queue8_TLBroadcastData(
  input         clock,
                reset,
                io_enq_valid,
  input  [7:0]  io_enq_bits_mask,
  input  [63:0] io_enq_bits_data,
  input         io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
  output [7:0]  io_deq_bits_mask,
  output [63:0] io_deq_bits_data
);

  wire [71:0] _ram_ext_R0_data;
  reg  [2:0]  enq_ptr_value;
  reg  [2:0]  deq_ptr_value;
  reg         maybe_full;
  wire        ptr_match = enq_ptr_value == deq_ptr_value;
  wire        empty = ptr_match & ~maybe_full;
  wire        full = ptr_match & maybe_full;
  wire        do_enq = ~full & io_enq_valid;
  always @(posedge clock) begin
    if (reset) begin
      enq_ptr_value <= 3'h0;
      deq_ptr_value <= 3'h0;
      maybe_full <= 1'h0;
    end
    else begin
      automatic logic do_deq = io_deq_ready & ~empty;
      if (do_enq)
        enq_ptr_value <= enq_ptr_value + 3'h1;
      if (do_deq)
        deq_ptr_value <= deq_ptr_value + 3'h1;
      if (do_enq != do_deq)
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_combMem_9 ram_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data ({io_enq_bits_data, io_enq_bits_mask}),
    .R0_data (_ram_ext_R0_data)
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
  assign io_deq_bits_mask = _ram_ext_R0_data[7:0];
  assign io_deq_bits_data = _ram_ext_R0_data[71:8];
endmodule

module TLBroadcastTracker(
  input         clock,
                reset,
                io_in_a_first,
                io_in_a_valid,
  input  [2:0]  io_in_a_bits_opcode,
                io_in_a_bits_param,
                io_in_a_bits_size,
  input  [4:0]  io_in_a_bits_source,
  input  [31:0] io_in_a_bits_address,
  input         io_in_a_bits_user_amba_prot_bufferable,
                io_in_a_bits_user_amba_prot_modifiable,
                io_in_a_bits_user_amba_prot_readalloc,
                io_in_a_bits_user_amba_prot_writealloc,
                io_in_a_bits_user_amba_prot_privileged,
                io_in_a_bits_user_amba_prot_secure,
                io_in_a_bits_user_amba_prot_fetch,
  input  [7:0]  io_in_a_bits_mask,
  input  [63:0] io_in_a_bits_data,
  input         io_out_a_ready,
                io_probe_valid,
                io_probe_bits_count,
                io_probenack,
                io_probedack,
                io_probesack,
                io_d_last,
                io_e_last,
  output        io_in_a_ready,
                io_out_a_valid,
  output [2:0]  io_out_a_bits_opcode,
                io_out_a_bits_param,
                io_out_a_bits_size,
  output [6:0]  io_out_a_bits_source,
  output [31:0] io_out_a_bits_address,
  output        io_out_a_bits_user_amba_prot_bufferable,
                io_out_a_bits_user_amba_prot_modifiable,
                io_out_a_bits_user_amba_prot_readalloc,
                io_out_a_bits_user_amba_prot_writealloc,
                io_out_a_bits_user_amba_prot_privileged,
                io_out_a_bits_user_amba_prot_secure,
                io_out_a_bits_user_amba_prot_fetch,
  output [7:0]  io_out_a_bits_mask,
  output [63:0] io_out_a_bits_data,
  output [4:0]  io_source,
  output [25:0] io_line,
  output        io_idle,
                io_need_d
);

  wire        _io_in_a_ready_output;
  wire        _o_data_q_io_enq_ready;
  wire        _o_data_q_io_deq_valid;
  reg         got_e;
  reg         sent_d;
  reg         shared;
  reg  [2:0]  opcode;
  reg  [2:0]  param;
  reg  [2:0]  size;
  reg  [4:0]  source;
  reg         user_amba_prot_bufferable;
  reg         user_amba_prot_modifiable;
  reg         user_amba_prot_readalloc;
  reg         user_amba_prot_writealloc;
  reg         user_amba_prot_privileged;
  reg         user_amba_prot_secure;
  reg         user_amba_prot_fetch;
  reg  [31:0] address;
  reg         count;
  wire        idle = got_e & sent_d;
  wire        _GEN = _io_in_a_ready_output & io_in_a_valid & io_in_a_first;
  wire        _GEN_0 = io_probenack | io_probedack;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (_GEN & ~reset & ~idle) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Broadcast.scala:446 assert (idle)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_d_last & ~reset & sent_d) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Broadcast.scala:467 assert (!sent_d)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_e_last & ~reset & got_e) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Broadcast.scala:471 assert (!got_e)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_0 & ~reset & ~count) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Broadcast.scala:476 assert (count > 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  wire        _GEN_1 = idle | ~io_in_a_first;
  assign _io_in_a_ready_output = _GEN_1 & _o_data_q_io_enq_ready;
  wire        acquire = opcode == 3'h6 | (&opcode);
  always @(posedge clock) begin
    if (reset) begin
      got_e <= 1'h1;
      sent_d <= 1'h1;
      address <= 32'h0;
    end
    else begin
      got_e <=
        io_e_last
        | (_GEN ? io_in_a_bits_opcode != 3'h6 & io_in_a_bits_opcode != 3'h7 : got_e);
      sent_d <= io_d_last | ~_GEN & sent_d;
      if (_GEN)
        address <= io_in_a_bits_address;
    end
    if (io_probesack)
      shared <= 1'h1;
    else
      shared <= ~_GEN & shared;
    if (_GEN) begin
      opcode <= io_in_a_bits_opcode;
      param <= io_in_a_bits_param;
      size <= io_in_a_bits_size;
      source <= io_in_a_bits_source;
      user_amba_prot_bufferable <= io_in_a_bits_user_amba_prot_bufferable;
      user_amba_prot_modifiable <= io_in_a_bits_user_amba_prot_modifiable;
      user_amba_prot_readalloc <= io_in_a_bits_user_amba_prot_readalloc;
      user_amba_prot_writealloc <= io_in_a_bits_user_amba_prot_writealloc;
      user_amba_prot_privileged <= io_in_a_bits_user_amba_prot_privileged;
      user_amba_prot_secure <= io_in_a_bits_user_amba_prot_secure;
      user_amba_prot_fetch <= io_in_a_bits_user_amba_prot_fetch;
    end
    if (_GEN_0)
      count <= count - ~(io_probenack & io_probedack);
    else if (io_probe_valid)
      count <= io_probe_bits_count;
    else
      count <= _GEN | count;
  end // always @(posedge)
  Queue8_TLBroadcastData o_data_q (
    .clock            (clock),
    .reset            (reset),
    .io_enq_valid     (_GEN_1 & io_in_a_valid),
    .io_enq_bits_mask (io_in_a_bits_mask),
    .io_enq_bits_data (io_in_a_bits_data),
    .io_deq_ready     (io_out_a_ready & ~count),
    .io_enq_ready     (_o_data_q_io_enq_ready),
    .io_deq_valid     (_o_data_q_io_deq_valid),
    .io_deq_bits_mask (io_out_a_bits_mask),
    .io_deq_bits_data (io_out_a_bits_data)
  );
  assign io_in_a_ready = _io_in_a_ready_output;
  assign io_out_a_valid = _o_data_q_io_deq_valid & ~count;
  assign io_out_a_bits_opcode = acquire ? 3'h4 : opcode;
  assign io_out_a_bits_param = acquire ? 3'h0 : param;
  assign io_out_a_bits_size = size;
  assign io_out_a_bits_source = {acquire ? {1'h1, ~shared} : 2'h0, source};
  assign io_out_a_bits_address = address;
  assign io_out_a_bits_user_amba_prot_bufferable = user_amba_prot_bufferable;
  assign io_out_a_bits_user_amba_prot_modifiable = user_amba_prot_modifiable;
  assign io_out_a_bits_user_amba_prot_readalloc = user_amba_prot_readalloc;
  assign io_out_a_bits_user_amba_prot_writealloc = user_amba_prot_writealloc;
  assign io_out_a_bits_user_amba_prot_privileged = user_amba_prot_privileged;
  assign io_out_a_bits_user_amba_prot_secure = user_amba_prot_secure;
  assign io_out_a_bits_user_amba_prot_fetch = user_amba_prot_fetch;
  assign io_source = source;
  assign io_line = address[31:6];
  assign io_idle = idle;
  assign io_need_d = ~sent_d;
endmodule

module TLBroadcastTracker_1(
  input         clock,
                reset,
                io_in_a_first,
                io_in_a_valid,
  input  [2:0]  io_in_a_bits_opcode,
                io_in_a_bits_param,
                io_in_a_bits_size,
  input  [4:0]  io_in_a_bits_source,
  input  [31:0] io_in_a_bits_address,
  input         io_in_a_bits_user_amba_prot_bufferable,
                io_in_a_bits_user_amba_prot_modifiable,
                io_in_a_bits_user_amba_prot_readalloc,
                io_in_a_bits_user_amba_prot_writealloc,
                io_in_a_bits_user_amba_prot_privileged,
                io_in_a_bits_user_amba_prot_secure,
                io_in_a_bits_user_amba_prot_fetch,
  input  [7:0]  io_in_a_bits_mask,
  input  [63:0] io_in_a_bits_data,
  input         io_out_a_ready,
                io_probe_valid,
                io_probe_bits_count,
                io_probenack,
                io_probedack,
                io_probesack,
                io_d_last,
                io_e_last,
  output        io_in_a_ready,
                io_out_a_valid,
  output [2:0]  io_out_a_bits_opcode,
                io_out_a_bits_param,
                io_out_a_bits_size,
  output [6:0]  io_out_a_bits_source,
  output [31:0] io_out_a_bits_address,
  output        io_out_a_bits_user_amba_prot_bufferable,
                io_out_a_bits_user_amba_prot_modifiable,
                io_out_a_bits_user_amba_prot_readalloc,
                io_out_a_bits_user_amba_prot_writealloc,
                io_out_a_bits_user_amba_prot_privileged,
                io_out_a_bits_user_amba_prot_secure,
                io_out_a_bits_user_amba_prot_fetch,
  output [7:0]  io_out_a_bits_mask,
  output [63:0] io_out_a_bits_data,
  output [4:0]  io_source,
  output [25:0] io_line,
  output        io_idle,
                io_need_d
);

  wire        _io_in_a_ready_output;
  wire        _o_data_q_io_enq_ready;
  wire        _o_data_q_io_deq_valid;
  reg         got_e;
  reg         sent_d;
  reg         shared;
  reg  [2:0]  opcode;
  reg  [2:0]  param;
  reg  [2:0]  size;
  reg  [4:0]  source;
  reg         user_amba_prot_bufferable;
  reg         user_amba_prot_modifiable;
  reg         user_amba_prot_readalloc;
  reg         user_amba_prot_writealloc;
  reg         user_amba_prot_privileged;
  reg         user_amba_prot_secure;
  reg         user_amba_prot_fetch;
  reg  [31:0] address;
  reg         count;
  wire        idle = got_e & sent_d;
  wire        _GEN = _io_in_a_ready_output & io_in_a_valid & io_in_a_first;
  wire        _GEN_0 = io_probenack | io_probedack;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (_GEN & ~reset & ~idle) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Broadcast.scala:446 assert (idle)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_d_last & ~reset & sent_d) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Broadcast.scala:467 assert (!sent_d)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_e_last & ~reset & got_e) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Broadcast.scala:471 assert (!got_e)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_0 & ~reset & ~count) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Broadcast.scala:476 assert (count > 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  wire        _GEN_1 = idle | ~io_in_a_first;
  assign _io_in_a_ready_output = _GEN_1 & _o_data_q_io_enq_ready;
  wire        acquire = opcode == 3'h6 | (&opcode);
  always @(posedge clock) begin
    if (reset) begin
      got_e <= 1'h1;
      sent_d <= 1'h1;
      address <= 32'h40;
    end
    else begin
      got_e <=
        io_e_last
        | (_GEN ? io_in_a_bits_opcode != 3'h6 & io_in_a_bits_opcode != 3'h7 : got_e);
      sent_d <= io_d_last | ~_GEN & sent_d;
      if (_GEN)
        address <= io_in_a_bits_address;
    end
    if (io_probesack)
      shared <= 1'h1;
    else
      shared <= ~_GEN & shared;
    if (_GEN) begin
      opcode <= io_in_a_bits_opcode;
      param <= io_in_a_bits_param;
      size <= io_in_a_bits_size;
      source <= io_in_a_bits_source;
      user_amba_prot_bufferable <= io_in_a_bits_user_amba_prot_bufferable;
      user_amba_prot_modifiable <= io_in_a_bits_user_amba_prot_modifiable;
      user_amba_prot_readalloc <= io_in_a_bits_user_amba_prot_readalloc;
      user_amba_prot_writealloc <= io_in_a_bits_user_amba_prot_writealloc;
      user_amba_prot_privileged <= io_in_a_bits_user_amba_prot_privileged;
      user_amba_prot_secure <= io_in_a_bits_user_amba_prot_secure;
      user_amba_prot_fetch <= io_in_a_bits_user_amba_prot_fetch;
    end
    if (_GEN_0)
      count <= count - ~(io_probenack & io_probedack);
    else if (io_probe_valid)
      count <= io_probe_bits_count;
    else
      count <= _GEN | count;
  end // always @(posedge)
  Queue8_TLBroadcastData o_data_q (
    .clock            (clock),
    .reset            (reset),
    .io_enq_valid     (_GEN_1 & io_in_a_valid),
    .io_enq_bits_mask (io_in_a_bits_mask),
    .io_enq_bits_data (io_in_a_bits_data),
    .io_deq_ready     (io_out_a_ready & ~count),
    .io_enq_ready     (_o_data_q_io_enq_ready),
    .io_deq_valid     (_o_data_q_io_deq_valid),
    .io_deq_bits_mask (io_out_a_bits_mask),
    .io_deq_bits_data (io_out_a_bits_data)
  );
  assign io_in_a_ready = _io_in_a_ready_output;
  assign io_out_a_valid = _o_data_q_io_deq_valid & ~count;
  assign io_out_a_bits_opcode = acquire ? 3'h4 : opcode;
  assign io_out_a_bits_param = acquire ? 3'h0 : param;
  assign io_out_a_bits_size = size;
  assign io_out_a_bits_source = {acquire ? {1'h1, ~shared} : 2'h0, source};
  assign io_out_a_bits_address = address;
  assign io_out_a_bits_user_amba_prot_bufferable = user_amba_prot_bufferable;
  assign io_out_a_bits_user_amba_prot_modifiable = user_amba_prot_modifiable;
  assign io_out_a_bits_user_amba_prot_readalloc = user_amba_prot_readalloc;
  assign io_out_a_bits_user_amba_prot_writealloc = user_amba_prot_writealloc;
  assign io_out_a_bits_user_amba_prot_privileged = user_amba_prot_privileged;
  assign io_out_a_bits_user_amba_prot_secure = user_amba_prot_secure;
  assign io_out_a_bits_user_amba_prot_fetch = user_amba_prot_fetch;
  assign io_source = source;
  assign io_line = address[31:6];
  assign io_idle = idle;
  assign io_need_d = ~sent_d;
endmodule

module TLBroadcastTracker_2(
  input         clock,
                reset,
                io_in_a_first,
                io_in_a_valid,
  input  [2:0]  io_in_a_bits_opcode,
                io_in_a_bits_param,
                io_in_a_bits_size,
  input  [4:0]  io_in_a_bits_source,
  input  [31:0] io_in_a_bits_address,
  input         io_in_a_bits_user_amba_prot_bufferable,
                io_in_a_bits_user_amba_prot_modifiable,
                io_in_a_bits_user_amba_prot_readalloc,
                io_in_a_bits_user_amba_prot_writealloc,
                io_in_a_bits_user_amba_prot_privileged,
                io_in_a_bits_user_amba_prot_secure,
                io_in_a_bits_user_amba_prot_fetch,
  input  [7:0]  io_in_a_bits_mask,
  input  [63:0] io_in_a_bits_data,
  input         io_out_a_ready,
                io_probe_valid,
                io_probe_bits_count,
                io_probenack,
                io_probedack,
                io_probesack,
                io_d_last,
                io_e_last,
  output        io_in_a_ready,
                io_out_a_valid,
  output [2:0]  io_out_a_bits_opcode,
                io_out_a_bits_param,
                io_out_a_bits_size,
  output [6:0]  io_out_a_bits_source,
  output [31:0] io_out_a_bits_address,
  output        io_out_a_bits_user_amba_prot_bufferable,
                io_out_a_bits_user_amba_prot_modifiable,
                io_out_a_bits_user_amba_prot_readalloc,
                io_out_a_bits_user_amba_prot_writealloc,
                io_out_a_bits_user_amba_prot_privileged,
                io_out_a_bits_user_amba_prot_secure,
                io_out_a_bits_user_amba_prot_fetch,
  output [7:0]  io_out_a_bits_mask,
  output [63:0] io_out_a_bits_data,
  output [4:0]  io_source,
  output [25:0] io_line,
  output        io_idle,
                io_need_d
);

  wire        _io_in_a_ready_output;
  wire        _o_data_q_io_enq_ready;
  wire        _o_data_q_io_deq_valid;
  reg         got_e;
  reg         sent_d;
  reg         shared;
  reg  [2:0]  opcode;
  reg  [2:0]  param;
  reg  [2:0]  size;
  reg  [4:0]  source;
  reg         user_amba_prot_bufferable;
  reg         user_amba_prot_modifiable;
  reg         user_amba_prot_readalloc;
  reg         user_amba_prot_writealloc;
  reg         user_amba_prot_privileged;
  reg         user_amba_prot_secure;
  reg         user_amba_prot_fetch;
  reg  [31:0] address;
  reg         count;
  wire        idle = got_e & sent_d;
  wire        _GEN = _io_in_a_ready_output & io_in_a_valid & io_in_a_first;
  wire        _GEN_0 = io_probenack | io_probedack;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (_GEN & ~reset & ~idle) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Broadcast.scala:446 assert (idle)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_d_last & ~reset & sent_d) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Broadcast.scala:467 assert (!sent_d)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_e_last & ~reset & got_e) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Broadcast.scala:471 assert (!got_e)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_0 & ~reset & ~count) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Broadcast.scala:476 assert (count > 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  wire        _GEN_1 = idle | ~io_in_a_first;
  assign _io_in_a_ready_output = _GEN_1 & _o_data_q_io_enq_ready;
  wire        acquire = opcode == 3'h6 | (&opcode);
  always @(posedge clock) begin
    if (reset) begin
      got_e <= 1'h1;
      sent_d <= 1'h1;
      address <= 32'h80;
    end
    else begin
      got_e <=
        io_e_last
        | (_GEN ? io_in_a_bits_opcode != 3'h6 & io_in_a_bits_opcode != 3'h7 : got_e);
      sent_d <= io_d_last | ~_GEN & sent_d;
      if (_GEN)
        address <= io_in_a_bits_address;
    end
    if (io_probesack)
      shared <= 1'h1;
    else
      shared <= ~_GEN & shared;
    if (_GEN) begin
      opcode <= io_in_a_bits_opcode;
      param <= io_in_a_bits_param;
      size <= io_in_a_bits_size;
      source <= io_in_a_bits_source;
      user_amba_prot_bufferable <= io_in_a_bits_user_amba_prot_bufferable;
      user_amba_prot_modifiable <= io_in_a_bits_user_amba_prot_modifiable;
      user_amba_prot_readalloc <= io_in_a_bits_user_amba_prot_readalloc;
      user_amba_prot_writealloc <= io_in_a_bits_user_amba_prot_writealloc;
      user_amba_prot_privileged <= io_in_a_bits_user_amba_prot_privileged;
      user_amba_prot_secure <= io_in_a_bits_user_amba_prot_secure;
      user_amba_prot_fetch <= io_in_a_bits_user_amba_prot_fetch;
    end
    if (_GEN_0)
      count <= count - ~(io_probenack & io_probedack);
    else if (io_probe_valid)
      count <= io_probe_bits_count;
    else
      count <= _GEN | count;
  end // always @(posedge)
  Queue8_TLBroadcastData o_data_q (
    .clock            (clock),
    .reset            (reset),
    .io_enq_valid     (_GEN_1 & io_in_a_valid),
    .io_enq_bits_mask (io_in_a_bits_mask),
    .io_enq_bits_data (io_in_a_bits_data),
    .io_deq_ready     (io_out_a_ready & ~count),
    .io_enq_ready     (_o_data_q_io_enq_ready),
    .io_deq_valid     (_o_data_q_io_deq_valid),
    .io_deq_bits_mask (io_out_a_bits_mask),
    .io_deq_bits_data (io_out_a_bits_data)
  );
  assign io_in_a_ready = _io_in_a_ready_output;
  assign io_out_a_valid = _o_data_q_io_deq_valid & ~count;
  assign io_out_a_bits_opcode = acquire ? 3'h4 : opcode;
  assign io_out_a_bits_param = acquire ? 3'h0 : param;
  assign io_out_a_bits_size = size;
  assign io_out_a_bits_source = {acquire ? {1'h1, ~shared} : 2'h0, source};
  assign io_out_a_bits_address = address;
  assign io_out_a_bits_user_amba_prot_bufferable = user_amba_prot_bufferable;
  assign io_out_a_bits_user_amba_prot_modifiable = user_amba_prot_modifiable;
  assign io_out_a_bits_user_amba_prot_readalloc = user_amba_prot_readalloc;
  assign io_out_a_bits_user_amba_prot_writealloc = user_amba_prot_writealloc;
  assign io_out_a_bits_user_amba_prot_privileged = user_amba_prot_privileged;
  assign io_out_a_bits_user_amba_prot_secure = user_amba_prot_secure;
  assign io_out_a_bits_user_amba_prot_fetch = user_amba_prot_fetch;
  assign io_source = source;
  assign io_line = address[31:6];
  assign io_idle = idle;
  assign io_need_d = ~sent_d;
endmodule

module TLBroadcastTracker_3(
  input         clock,
                reset,
                io_in_a_first,
                io_in_a_valid,
  input  [2:0]  io_in_a_bits_opcode,
                io_in_a_bits_param,
                io_in_a_bits_size,
  input  [4:0]  io_in_a_bits_source,
  input  [31:0] io_in_a_bits_address,
  input         io_in_a_bits_user_amba_prot_bufferable,
                io_in_a_bits_user_amba_prot_modifiable,
                io_in_a_bits_user_amba_prot_readalloc,
                io_in_a_bits_user_amba_prot_writealloc,
                io_in_a_bits_user_amba_prot_privileged,
                io_in_a_bits_user_amba_prot_secure,
                io_in_a_bits_user_amba_prot_fetch,
  input  [7:0]  io_in_a_bits_mask,
  input  [63:0] io_in_a_bits_data,
  input         io_out_a_ready,
                io_probe_valid,
                io_probe_bits_count,
                io_probenack,
                io_probedack,
                io_probesack,
                io_d_last,
                io_e_last,
  output        io_in_a_ready,
                io_out_a_valid,
  output [2:0]  io_out_a_bits_opcode,
                io_out_a_bits_param,
                io_out_a_bits_size,
  output [6:0]  io_out_a_bits_source,
  output [31:0] io_out_a_bits_address,
  output        io_out_a_bits_user_amba_prot_bufferable,
                io_out_a_bits_user_amba_prot_modifiable,
                io_out_a_bits_user_amba_prot_readalloc,
                io_out_a_bits_user_amba_prot_writealloc,
                io_out_a_bits_user_amba_prot_privileged,
                io_out_a_bits_user_amba_prot_secure,
                io_out_a_bits_user_amba_prot_fetch,
  output [7:0]  io_out_a_bits_mask,
  output [63:0] io_out_a_bits_data,
  output [4:0]  io_source,
  output [25:0] io_line,
  output        io_idle,
                io_need_d
);

  wire        _io_in_a_ready_output;
  wire        _o_data_q_io_enq_ready;
  wire        _o_data_q_io_deq_valid;
  reg         got_e;
  reg         sent_d;
  reg         shared;
  reg  [2:0]  opcode;
  reg  [2:0]  param;
  reg  [2:0]  size;
  reg  [4:0]  source;
  reg         user_amba_prot_bufferable;
  reg         user_amba_prot_modifiable;
  reg         user_amba_prot_readalloc;
  reg         user_amba_prot_writealloc;
  reg         user_amba_prot_privileged;
  reg         user_amba_prot_secure;
  reg         user_amba_prot_fetch;
  reg  [31:0] address;
  reg         count;
  wire        idle = got_e & sent_d;
  wire        _GEN = _io_in_a_ready_output & io_in_a_valid & io_in_a_first;
  wire        _GEN_0 = io_probenack | io_probedack;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (_GEN & ~reset & ~idle) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Broadcast.scala:446 assert (idle)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_d_last & ~reset & sent_d) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Broadcast.scala:467 assert (!sent_d)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_e_last & ~reset & got_e) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Broadcast.scala:471 assert (!got_e)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_0 & ~reset & ~count) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Broadcast.scala:476 assert (count > 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  wire        _GEN_1 = idle | ~io_in_a_first;
  assign _io_in_a_ready_output = _GEN_1 & _o_data_q_io_enq_ready;
  wire        acquire = opcode == 3'h6 | (&opcode);
  always @(posedge clock) begin
    if (reset) begin
      got_e <= 1'h1;
      sent_d <= 1'h1;
      address <= 32'hC0;
    end
    else begin
      got_e <=
        io_e_last
        | (_GEN ? io_in_a_bits_opcode != 3'h6 & io_in_a_bits_opcode != 3'h7 : got_e);
      sent_d <= io_d_last | ~_GEN & sent_d;
      if (_GEN)
        address <= io_in_a_bits_address;
    end
    if (io_probesack)
      shared <= 1'h1;
    else
      shared <= ~_GEN & shared;
    if (_GEN) begin
      opcode <= io_in_a_bits_opcode;
      param <= io_in_a_bits_param;
      size <= io_in_a_bits_size;
      source <= io_in_a_bits_source;
      user_amba_prot_bufferable <= io_in_a_bits_user_amba_prot_bufferable;
      user_amba_prot_modifiable <= io_in_a_bits_user_amba_prot_modifiable;
      user_amba_prot_readalloc <= io_in_a_bits_user_amba_prot_readalloc;
      user_amba_prot_writealloc <= io_in_a_bits_user_amba_prot_writealloc;
      user_amba_prot_privileged <= io_in_a_bits_user_amba_prot_privileged;
      user_amba_prot_secure <= io_in_a_bits_user_amba_prot_secure;
      user_amba_prot_fetch <= io_in_a_bits_user_amba_prot_fetch;
    end
    if (_GEN_0)
      count <= count - ~(io_probenack & io_probedack);
    else if (io_probe_valid)
      count <= io_probe_bits_count;
    else
      count <= _GEN | count;
  end // always @(posedge)
  Queue8_TLBroadcastData o_data_q (
    .clock            (clock),
    .reset            (reset),
    .io_enq_valid     (_GEN_1 & io_in_a_valid),
    .io_enq_bits_mask (io_in_a_bits_mask),
    .io_enq_bits_data (io_in_a_bits_data),
    .io_deq_ready     (io_out_a_ready & ~count),
    .io_enq_ready     (_o_data_q_io_enq_ready),
    .io_deq_valid     (_o_data_q_io_deq_valid),
    .io_deq_bits_mask (io_out_a_bits_mask),
    .io_deq_bits_data (io_out_a_bits_data)
  );
  assign io_in_a_ready = _io_in_a_ready_output;
  assign io_out_a_valid = _o_data_q_io_deq_valid & ~count;
  assign io_out_a_bits_opcode = acquire ? 3'h4 : opcode;
  assign io_out_a_bits_param = acquire ? 3'h0 : param;
  assign io_out_a_bits_size = size;
  assign io_out_a_bits_source = {acquire ? {1'h1, ~shared} : 2'h0, source};
  assign io_out_a_bits_address = address;
  assign io_out_a_bits_user_amba_prot_bufferable = user_amba_prot_bufferable;
  assign io_out_a_bits_user_amba_prot_modifiable = user_amba_prot_modifiable;
  assign io_out_a_bits_user_amba_prot_readalloc = user_amba_prot_readalloc;
  assign io_out_a_bits_user_amba_prot_writealloc = user_amba_prot_writealloc;
  assign io_out_a_bits_user_amba_prot_privileged = user_amba_prot_privileged;
  assign io_out_a_bits_user_amba_prot_secure = user_amba_prot_secure;
  assign io_out_a_bits_user_amba_prot_fetch = user_amba_prot_fetch;
  assign io_source = source;
  assign io_line = address[31:6];
  assign io_idle = idle;
  assign io_need_d = ~sent_d;
endmodule

module TLBroadcast(
  input         clock,
                reset,
                auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
                auto_in_a_bits_param,
                auto_in_a_bits_size,
  input  [4:0]  auto_in_a_bits_source,
  input  [31:0] auto_in_a_bits_address,
  input         auto_in_a_bits_user_amba_prot_bufferable,
                auto_in_a_bits_user_amba_prot_modifiable,
                auto_in_a_bits_user_amba_prot_readalloc,
                auto_in_a_bits_user_amba_prot_writealloc,
                auto_in_a_bits_user_amba_prot_privileged,
                auto_in_a_bits_user_amba_prot_secure,
                auto_in_a_bits_user_amba_prot_fetch,
  input  [7:0]  auto_in_a_bits_mask,
  input  [63:0] auto_in_a_bits_data,
  input         auto_in_a_bits_corrupt,
                auto_in_b_ready,
                auto_in_c_valid,
  input  [2:0]  auto_in_c_bits_opcode,
                auto_in_c_bits_param,
                auto_in_c_bits_size,
  input  [4:0]  auto_in_c_bits_source,
  input  [31:0] auto_in_c_bits_address,
  input  [63:0] auto_in_c_bits_data,
  input         auto_in_c_bits_corrupt,
                auto_in_d_ready,
                auto_in_e_valid,
  input  [1:0]  auto_in_e_bits_sink,
  input         auto_out_a_ready,
                auto_out_d_valid,
  input  [2:0]  auto_out_d_bits_opcode,
                auto_out_d_bits_size,
  input  [6:0]  auto_out_d_bits_source,
  input         auto_out_d_bits_denied,
  input  [63:0] auto_out_d_bits_data,
  input         auto_out_d_bits_corrupt,
  output        auto_in_a_ready,
                auto_in_b_valid,
  output [1:0]  auto_in_b_bits_param,
  output [31:0] auto_in_b_bits_address,
  output        auto_in_c_ready,
                auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
  output [1:0]  auto_in_d_bits_param,
  output [2:0]  auto_in_d_bits_size,
  output [4:0]  auto_in_d_bits_source,
  output [1:0]  auto_in_d_bits_sink,
  output        auto_in_d_bits_denied,
  output [63:0] auto_in_d_bits_data,
  output        auto_in_d_bits_corrupt,
                auto_out_a_valid,
  output [2:0]  auto_out_a_bits_opcode,
                auto_out_a_bits_param,
                auto_out_a_bits_size,
  output [6:0]  auto_out_a_bits_source,
  output [31:0] auto_out_a_bits_address,
  output        auto_out_a_bits_user_amba_prot_bufferable,
                auto_out_a_bits_user_amba_prot_modifiable,
                auto_out_a_bits_user_amba_prot_readalloc,
                auto_out_a_bits_user_amba_prot_writealloc,
                auto_out_a_bits_user_amba_prot_privileged,
                auto_out_a_bits_user_amba_prot_secure,
                auto_out_a_bits_user_amba_prot_fetch,
  output [7:0]  auto_out_a_bits_mask,
  output [63:0] auto_out_a_bits_data,
  output        auto_out_d_ready
);

  reg  [2:0]  a_first_counter;
  reg         probe_todo;
  wire        putfull_ready;
  wire        d_normal_ready;
  wire        releaseack_ready;
  wire        nodeIn_c_ready;
  wire [2:0]  d_normal_bits_opcode;
  wire [4:0]  d_normal_bits_source;
  wire        d_normal_valid;
  wire        _TLBroadcastTracker_3_io_in_a_ready;
  wire        _TLBroadcastTracker_3_io_out_a_valid;
  wire [2:0]  _TLBroadcastTracker_3_io_out_a_bits_opcode;
  wire [2:0]  _TLBroadcastTracker_3_io_out_a_bits_param;
  wire [2:0]  _TLBroadcastTracker_3_io_out_a_bits_size;
  wire [6:0]  _TLBroadcastTracker_3_io_out_a_bits_source;
  wire [31:0] _TLBroadcastTracker_3_io_out_a_bits_address;
  wire        _TLBroadcastTracker_3_io_out_a_bits_user_amba_prot_bufferable;
  wire        _TLBroadcastTracker_3_io_out_a_bits_user_amba_prot_modifiable;
  wire        _TLBroadcastTracker_3_io_out_a_bits_user_amba_prot_readalloc;
  wire        _TLBroadcastTracker_3_io_out_a_bits_user_amba_prot_writealloc;
  wire        _TLBroadcastTracker_3_io_out_a_bits_user_amba_prot_privileged;
  wire        _TLBroadcastTracker_3_io_out_a_bits_user_amba_prot_secure;
  wire        _TLBroadcastTracker_3_io_out_a_bits_user_amba_prot_fetch;
  wire [7:0]  _TLBroadcastTracker_3_io_out_a_bits_mask;
  wire [63:0] _TLBroadcastTracker_3_io_out_a_bits_data;
  wire [4:0]  _TLBroadcastTracker_3_io_source;
  wire [25:0] _TLBroadcastTracker_3_io_line;
  wire        _TLBroadcastTracker_3_io_idle;
  wire        _TLBroadcastTracker_3_io_need_d;
  wire        _TLBroadcastTracker_2_io_in_a_ready;
  wire        _TLBroadcastTracker_2_io_out_a_valid;
  wire [2:0]  _TLBroadcastTracker_2_io_out_a_bits_opcode;
  wire [2:0]  _TLBroadcastTracker_2_io_out_a_bits_param;
  wire [2:0]  _TLBroadcastTracker_2_io_out_a_bits_size;
  wire [6:0]  _TLBroadcastTracker_2_io_out_a_bits_source;
  wire [31:0] _TLBroadcastTracker_2_io_out_a_bits_address;
  wire        _TLBroadcastTracker_2_io_out_a_bits_user_amba_prot_bufferable;
  wire        _TLBroadcastTracker_2_io_out_a_bits_user_amba_prot_modifiable;
  wire        _TLBroadcastTracker_2_io_out_a_bits_user_amba_prot_readalloc;
  wire        _TLBroadcastTracker_2_io_out_a_bits_user_amba_prot_writealloc;
  wire        _TLBroadcastTracker_2_io_out_a_bits_user_amba_prot_privileged;
  wire        _TLBroadcastTracker_2_io_out_a_bits_user_amba_prot_secure;
  wire        _TLBroadcastTracker_2_io_out_a_bits_user_amba_prot_fetch;
  wire [7:0]  _TLBroadcastTracker_2_io_out_a_bits_mask;
  wire [63:0] _TLBroadcastTracker_2_io_out_a_bits_data;
  wire [4:0]  _TLBroadcastTracker_2_io_source;
  wire [25:0] _TLBroadcastTracker_2_io_line;
  wire        _TLBroadcastTracker_2_io_idle;
  wire        _TLBroadcastTracker_2_io_need_d;
  wire        _TLBroadcastTracker_1_io_in_a_ready;
  wire        _TLBroadcastTracker_1_io_out_a_valid;
  wire [2:0]  _TLBroadcastTracker_1_io_out_a_bits_opcode;
  wire [2:0]  _TLBroadcastTracker_1_io_out_a_bits_param;
  wire [2:0]  _TLBroadcastTracker_1_io_out_a_bits_size;
  wire [6:0]  _TLBroadcastTracker_1_io_out_a_bits_source;
  wire [31:0] _TLBroadcastTracker_1_io_out_a_bits_address;
  wire        _TLBroadcastTracker_1_io_out_a_bits_user_amba_prot_bufferable;
  wire        _TLBroadcastTracker_1_io_out_a_bits_user_amba_prot_modifiable;
  wire        _TLBroadcastTracker_1_io_out_a_bits_user_amba_prot_readalloc;
  wire        _TLBroadcastTracker_1_io_out_a_bits_user_amba_prot_writealloc;
  wire        _TLBroadcastTracker_1_io_out_a_bits_user_amba_prot_privileged;
  wire        _TLBroadcastTracker_1_io_out_a_bits_user_amba_prot_secure;
  wire        _TLBroadcastTracker_1_io_out_a_bits_user_amba_prot_fetch;
  wire [7:0]  _TLBroadcastTracker_1_io_out_a_bits_mask;
  wire [63:0] _TLBroadcastTracker_1_io_out_a_bits_data;
  wire [4:0]  _TLBroadcastTracker_1_io_source;
  wire [25:0] _TLBroadcastTracker_1_io_line;
  wire        _TLBroadcastTracker_1_io_idle;
  wire        _TLBroadcastTracker_1_io_need_d;
  wire        _TLBroadcastTracker_io_in_a_ready;
  wire        _TLBroadcastTracker_io_out_a_valid;
  wire [2:0]  _TLBroadcastTracker_io_out_a_bits_opcode;
  wire [2:0]  _TLBroadcastTracker_io_out_a_bits_param;
  wire [2:0]  _TLBroadcastTracker_io_out_a_bits_size;
  wire [6:0]  _TLBroadcastTracker_io_out_a_bits_source;
  wire [31:0] _TLBroadcastTracker_io_out_a_bits_address;
  wire        _TLBroadcastTracker_io_out_a_bits_user_amba_prot_bufferable;
  wire        _TLBroadcastTracker_io_out_a_bits_user_amba_prot_modifiable;
  wire        _TLBroadcastTracker_io_out_a_bits_user_amba_prot_readalloc;
  wire        _TLBroadcastTracker_io_out_a_bits_user_amba_prot_writealloc;
  wire        _TLBroadcastTracker_io_out_a_bits_user_amba_prot_privileged;
  wire        _TLBroadcastTracker_io_out_a_bits_user_amba_prot_secure;
  wire        _TLBroadcastTracker_io_out_a_bits_user_amba_prot_fetch;
  wire [7:0]  _TLBroadcastTracker_io_out_a_bits_mask;
  wire [63:0] _TLBroadcastTracker_io_out_a_bits_data;
  wire [4:0]  _TLBroadcastTracker_io_source;
  wire [25:0] _TLBroadcastTracker_io_line;
  wire        _TLBroadcastTracker_io_idle;
  wire        _TLBroadcastTracker_io_need_d;
  wire        _filter_io_request_ready;
  wire        _filter_io_response_valid;
  wire [1:0]  _filter_io_response_bits_mshr;
  wire [31:0] _filter_io_response_bits_address;
  wire        _filter_io_response_bits_allocOH;
  wire        _filter_io_response_bits_needT;
  wire        d_drop = auto_out_d_bits_source[6:5] == 2'h1;
  wire        _GEN = d_normal_ready & d_normal_valid;
  wire [12:0] _GEN_0 = 13'h3F << auto_out_d_bits_size;
  reg  [2:0]  counter;
  wire        d_first = counter == 3'h0;
  wire        d_last =
    counter == 3'h1 | (d_normal_bits_opcode[0] ? ~(_GEN_0[5:3]) : 3'h0) == 3'h0;
  wire [3:0]  _GEN_1 =
    {_TLBroadcastTracker_3_io_need_d
       & _TLBroadcastTracker_3_io_source == d_normal_bits_source,
     _TLBroadcastTracker_2_io_need_d
       & _TLBroadcastTracker_2_io_source == d_normal_bits_source,
     _TLBroadcastTracker_1_io_need_d
       & _TLBroadcastTracker_1_io_source == d_normal_bits_source,
     _TLBroadcastTracker_io_need_d
       & _TLBroadcastTracker_io_source == d_normal_bits_source};
  reg  [3:0]  d_trackerOH_r;
  wire [3:0]  d_trackerOH = d_first ? _GEN_1 : d_trackerOH_r;
  wire        nodeOut_d_ready = d_normal_ready | d_drop;
  assign d_normal_valid = auto_out_d_valid & ~d_drop;
  assign d_normal_bits_source = auto_out_d_bits_source[4:0];
  assign d_normal_bits_opcode =
    auto_out_d_bits_source[6]
      ? (auto_out_d_bits_opcode[0] ? 3'h5 : 3'h6)
      : auto_out_d_bits_opcode;
  wire        d_response = auto_out_d_bits_opcode[0] | ~(auto_out_d_bits_source[6]);
  wire        _GEN_2 = nodeOut_d_ready & auto_out_d_valid;
  wire        c_probeack = auto_in_c_bits_opcode == 3'h4;
  wire        c_probeackdata = auto_in_c_bits_opcode == 3'h5;
  wire        c_release = auto_in_c_bits_opcode == 3'h6;
  wire        c_trackerOH_0 = _TLBroadcastTracker_io_line == auto_in_c_bits_address[31:6];
  wire        c_trackerOH_1 =
    _TLBroadcastTracker_1_io_line == auto_in_c_bits_address[31:6];
  wire        c_trackerOH_2 =
    _TLBroadcastTracker_2_io_line == auto_in_c_bits_address[31:6];
  wire        c_trackerOH_3 =
    _TLBroadcastTracker_3_io_line == auto_in_c_bits_address[31:6];
  wire        _GEN_3 = nodeIn_c_ready & auto_in_c_valid;
  wire        _GEN_4 = c_probeack | c_probeackdata;
  wire        _GEN_5 = _GEN_3 & c_probeack;
  wire        _GEN_6 = auto_in_c_bits_param == 3'h0 | auto_in_c_bits_param == 3'h4;
  assign nodeIn_c_ready = c_probeack | (c_release ? releaseack_ready : putfull_ready);
  wire        winner_0 = auto_in_c_valid & c_release;
  wire        winner_1_0 = auto_in_c_valid & (c_probeackdata | (&auto_in_c_bits_opcode));
  wire        _GEN_7 = auto_in_c_bits_size > 3'h2;
  wire        putfull_bits_a_mask_size = auto_in_c_bits_size[1:0] == 2'h2;
  wire        putfull_bits_a_mask_acc =
    _GEN_7 | putfull_bits_a_mask_size & ~(auto_in_c_bits_address[2]);
  wire        putfull_bits_a_mask_acc_1 =
    _GEN_7 | putfull_bits_a_mask_size & auto_in_c_bits_address[2];
  wire        putfull_bits_a_mask_size_1 = auto_in_c_bits_size[1:0] == 2'h1;
  wire        putfull_bits_a_mask_eq_2 =
    ~(auto_in_c_bits_address[2]) & ~(auto_in_c_bits_address[1]);
  wire        putfull_bits_a_mask_acc_2 =
    putfull_bits_a_mask_acc | putfull_bits_a_mask_size_1 & putfull_bits_a_mask_eq_2;
  wire        putfull_bits_a_mask_eq_3 =
    ~(auto_in_c_bits_address[2]) & auto_in_c_bits_address[1];
  wire        putfull_bits_a_mask_acc_3 =
    putfull_bits_a_mask_acc | putfull_bits_a_mask_size_1 & putfull_bits_a_mask_eq_3;
  wire        putfull_bits_a_mask_eq_4 =
    auto_in_c_bits_address[2] & ~(auto_in_c_bits_address[1]);
  wire        putfull_bits_a_mask_acc_4 =
    putfull_bits_a_mask_acc_1 | putfull_bits_a_mask_size_1 & putfull_bits_a_mask_eq_4;
  wire        putfull_bits_a_mask_eq_5 =
    auto_in_c_bits_address[2] & auto_in_c_bits_address[1];
  wire        putfull_bits_a_mask_acc_5 =
    putfull_bits_a_mask_acc_1 | putfull_bits_a_mask_size_1 & putfull_bits_a_mask_eq_5;
  reg  [2:0]  beatsLeft;
  wire        idle = beatsLeft == 3'h0;
  wire        winner_1 = ~winner_0 & d_normal_valid;
  wire        _GEN_8 = winner_0 | d_normal_valid;
  reg         state_0;
  reg         state_1;
  wire        muxState_0 = idle ? winner_0 : state_0;
  wire        muxState_1 = idle ? winner_1 : state_1;
  assign releaseack_ready = auto_in_d_ready & (idle | state_0);
  assign d_normal_ready = auto_in_d_ready & (idle ? ~winner_0 : state_1);
  wire        nodeIn_d_valid =
    idle ? _GEN_8 : state_0 & winner_0 | state_1 & d_normal_valid;
  wire        nodeIn_d_bits_corrupt = muxState_1 & auto_out_d_bits_corrupt;
  wire        nodeIn_d_bits_denied = muxState_1 & auto_out_d_bits_denied;
  wire [1:0]  nodeIn_d_bits_sink =
    muxState_1 ? {|(d_trackerOH[3:2]), d_trackerOH[3] | d_trackerOH[1]} : 2'h0;
  wire [4:0]  nodeIn_d_bits_source =
    (muxState_0 ? auto_in_c_bits_source : 5'h0)
    | (muxState_1 ? d_normal_bits_source : 5'h0);
  wire [2:0]  nodeIn_d_bits_size =
    (muxState_0 ? auto_in_c_bits_size : 3'h0)
    | (muxState_1 ? auto_out_d_bits_size : 3'h0);
  wire [1:0]  nodeIn_d_bits_param =
    muxState_1 & auto_out_d_bits_source[6] & auto_out_d_bits_opcode[0]
      ? {1'h0, ~(auto_out_d_bits_source[5])}
      : 2'h0;
  wire [2:0]  nodeIn_d_bits_opcode =
    (muxState_0 ? 3'h6 : 3'h0) | (muxState_1 ? d_normal_bits_opcode : 3'h0);
  reg  [2:0]  beatsLeft_1;
  wire        idle_1 = beatsLeft_1 == 3'h0;
  wire        _GEN_9 = _TLBroadcastTracker_io_out_a_valid | winner_1_0;
  wire        _GEN_10 =
    _TLBroadcastTracker_2_io_out_a_valid | _TLBroadcastTracker_1_io_out_a_valid | _GEN_9;
  wire        _GEN_11 =
    _TLBroadcastTracker_1_io_out_a_valid | _TLBroadcastTracker_io_out_a_valid
    | winner_1_0;
  wire        winner_1_1 = ~winner_1_0 & _TLBroadcastTracker_io_out_a_valid;
  wire        winner_1_2 = ~_GEN_9 & _TLBroadcastTracker_1_io_out_a_valid;
  wire        winner_1_3 = ~_GEN_11 & _TLBroadcastTracker_2_io_out_a_valid;
  wire        winner_1_4 = ~_GEN_10 & _TLBroadcastTracker_3_io_out_a_valid;
  wire        _GEN_12 =
    winner_1_0 | _TLBroadcastTracker_io_out_a_valid | _TLBroadcastTracker_1_io_out_a_valid
    | _TLBroadcastTracker_2_io_out_a_valid | _TLBroadcastTracker_3_io_out_a_valid;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      automatic logic prefixOR_2 = winner_1_0 | winner_1_1;
      automatic logic prefixOR_3 = prefixOR_2 | winner_1_2;
      if (~reset & ~(~auto_out_d_valid | ~d_drop | auto_out_d_bits_opcode == 3'h0)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Broadcast.scala:132 assert (!out.d.valid || !d_drop || out.d.bits.opcode === TLMessages.AccessAck)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(~d_normal_valid | (|d_trackerOH) | d_normal_bits_opcode == 3'h6)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Broadcast.scala:144 assert (!d_normal.valid || (d_trackerOH.orR || d_normal.bits.opcode === TLMessages.ReleaseAck))\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~winner_0 | ~winner_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Arbiter.scala:77 assert((prefixOR zip winner) map { case (p,w) => !p || !w } reduce {_ && _})\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_GEN_8 | winner_0 | winner_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Arbiter.scala:79 assert (!valids.reduce(_||_) || winner.reduce(_||_))\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~((~winner_1_0 | ~winner_1_1) & (~prefixOR_2 | ~winner_1_2)
              & (~prefixOR_3 | ~winner_1_3)
              & (~(prefixOR_3 | winner_1_3) | ~winner_1_4))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Arbiter.scala:77 assert((prefixOR zip winner) map { case (p,w) => !p || !w } reduce {_ && _})\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(~_GEN_12 | winner_1_0 | winner_1_1 | winner_1_2 | winner_1_3
              | winner_1_4)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Arbiter.scala:79 assert (!valids.reduce(_||_) || winner.reduce(_||_))\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  reg         state_1_0;
  reg         state_1_1;
  reg         state_1_2;
  reg         state_1_3;
  reg         state_1_4;
  wire        muxState_1_0 = idle_1 ? winner_1_0 : state_1_0;
  wire        muxState_1_1 = idle_1 ? winner_1_1 : state_1_1;
  wire        muxState_1_2 = idle_1 ? winner_1_2 : state_1_2;
  wire        muxState_1_3 = idle_1 ? winner_1_3 : state_1_3;
  wire        muxState_1_4 = idle_1 ? winner_1_4 : state_1_4;
  assign putfull_ready = auto_out_a_ready & (idle_1 | state_1_0);
  wire        nodeOut_a_valid =
    idle_1
      ? _GEN_12
      : state_1_0 & winner_1_0 | state_1_1 & _TLBroadcastTracker_io_out_a_valid
        | state_1_2 & _TLBroadcastTracker_1_io_out_a_valid | state_1_3
        & _TLBroadcastTracker_2_io_out_a_valid | state_1_4
        & _TLBroadcastTracker_3_io_out_a_valid;
  reg  [25:0] probe_line;
  reg  [1:0]  probe_perms;
  wire [31:0] nodeIn_b_bits_b_address = {probe_line, 6'h0};
  wire        _GEN_13 = _TLBroadcastTracker_io_line == auto_in_a_bits_address[31:6];
  wire        _GEN_14 = _TLBroadcastTracker_1_io_line == auto_in_a_bits_address[31:6];
  wire        _GEN_15 = _TLBroadcastTracker_2_io_line == auto_in_a_bits_address[31:6];
  wire        _GEN_16 = _TLBroadcastTracker_3_io_line == auto_in_a_bits_address[31:6];
  wire [3:0]  filter_io_request_bits_mshr_lo =
    (|{_GEN_16, _GEN_15, _GEN_14, _GEN_13})
      ? {_GEN_16, _GEN_15, _GEN_14, _GEN_13}
      : {~(_TLBroadcastTracker_2_io_idle | _TLBroadcastTracker_1_io_idle
           | _TLBroadcastTracker_io_idle),
         ~(_TLBroadcastTracker_1_io_idle | _TLBroadcastTracker_io_idle),
         ~_TLBroadcastTracker_io_idle,
         1'h1}
        & {_TLBroadcastTracker_3_io_idle,
           _TLBroadcastTracker_2_io_idle,
           _TLBroadcastTracker_1_io_idle,
           _TLBroadcastTracker_io_idle};
  wire [3:0]  _GEN_17 =
    filter_io_request_bits_mshr_lo
    & {_TLBroadcastTracker_3_io_in_a_ready,
       _TLBroadcastTracker_2_io_in_a_ready,
       _TLBroadcastTracker_1_io_in_a_ready,
       _TLBroadcastTracker_io_in_a_ready};
  wire        _GEN_18 = (|a_first_counter) | _filter_io_request_ready;
  wire        nodeIn_a_ready = _GEN_18 & (|_GEN_17);
  wire        _GEN_19 = auto_in_a_bits_param == 3'h1;
  wire        _GEN_20 = ~probe_todo & _filter_io_response_valid;
  always @(posedge clock) begin
    if (reset) begin
      counter <= 3'h0;
      beatsLeft <= 3'h0;
      state_0 <= 1'h0;
      state_1 <= 1'h0;
      beatsLeft_1 <= 3'h0;
      state_1_0 <= 1'h0;
      state_1_1 <= 1'h0;
      state_1_2 <= 1'h0;
      state_1_3 <= 1'h0;
      state_1_4 <= 1'h0;
      probe_todo <= 1'h0;
      a_first_counter <= 3'h0;
    end
    else begin
      if (_GEN) begin
        if (d_first) begin
          if (d_normal_bits_opcode[0])
            counter <= ~(_GEN_0[5:3]);
          else
            counter <= 3'h0;
        end
        else
          counter <= counter - 3'h1;
      end
      if (idle & auto_in_d_ready) begin
        if (winner_1 & d_normal_bits_opcode[0])
          beatsLeft <= ~(_GEN_0[5:3]);
        else
          beatsLeft <= 3'h0;
      end
      else
        beatsLeft <= beatsLeft - {2'h0, auto_in_d_ready & nodeIn_d_valid};
      if (idle) begin
        state_0 <= winner_0;
        state_1 <= winner_1;
      end
      if (idle_1 & auto_out_a_ready) begin
        automatic logic [12:0] _GEN_21 =
          13'h3F << _TLBroadcastTracker_3_io_out_a_bits_size;
        automatic logic [12:0] _GEN_22 =
          13'h3F << _TLBroadcastTracker_2_io_out_a_bits_size;
        automatic logic [12:0] _GEN_23 =
          13'h3F << _TLBroadcastTracker_1_io_out_a_bits_size;
        automatic logic [12:0] _GEN_24 = 13'h3F << _TLBroadcastTracker_io_out_a_bits_size;
        automatic logic [12:0] _GEN_25 = 13'h3F << auto_in_c_bits_size;
        beatsLeft_1 <=
          (winner_1_0 ? ~(_GEN_25[5:3]) : 3'h0)
          | (winner_1_1 & ~(_TLBroadcastTracker_io_out_a_bits_opcode[2])
               ? ~(_GEN_24[5:3])
               : 3'h0)
          | (winner_1_2 & ~(_TLBroadcastTracker_1_io_out_a_bits_opcode[2])
               ? ~(_GEN_23[5:3])
               : 3'h0)
          | (winner_1_3 & ~(_TLBroadcastTracker_2_io_out_a_bits_opcode[2])
               ? ~(_GEN_22[5:3])
               : 3'h0)
          | (winner_1_4 & ~(_TLBroadcastTracker_3_io_out_a_bits_opcode[2])
               ? ~(_GEN_21[5:3])
               : 3'h0);
      end
      else
        beatsLeft_1 <= beatsLeft_1 - {2'h0, auto_out_a_ready & nodeOut_a_valid};
      if (idle_1) begin
        state_1_0 <= winner_1_0;
        state_1_1 <= winner_1_1;
        state_1_2 <= winner_1_2;
        state_1_3 <= winner_1_3;
        state_1_4 <= winner_1_4;
      end
      if (_GEN_20)
        probe_todo <= ~_filter_io_response_bits_allocOH;
      else
        probe_todo <= ~(auto_in_b_ready & probe_todo) & probe_todo;
      if (nodeIn_a_ready & auto_in_a_valid) begin
        if (|a_first_counter)
          a_first_counter <= a_first_counter - 3'h1;
        else if (auto_in_a_bits_opcode[2])
          a_first_counter <= 3'h0;
        else begin
          automatic logic [12:0] _GEN_26 = 13'h3F << auto_in_a_bits_size;
          a_first_counter <= ~(_GEN_26[5:3]);
        end
      end
    end
    if (d_first)
      d_trackerOH_r <= _GEN_1;
    if (_GEN_20) begin
      probe_line <= _filter_io_response_bits_address[31:6];
      if (_filter_io_response_bits_needT)
        probe_perms <= 2'h2;
      else
        probe_perms <= 2'h1;
    end
  end // always @(posedge)
  TLMonitor_20 monitor (
    .clock                (clock),
    .reset                (reset),
    .io_in_a_ready        (nodeIn_a_ready),
    .io_in_a_valid        (auto_in_a_valid),
    .io_in_a_bits_opcode  (auto_in_a_bits_opcode),
    .io_in_a_bits_param   (auto_in_a_bits_param),
    .io_in_a_bits_size    (auto_in_a_bits_size),
    .io_in_a_bits_source  (auto_in_a_bits_source),
    .io_in_a_bits_address (auto_in_a_bits_address),
    .io_in_a_bits_mask    (auto_in_a_bits_mask),
    .io_in_a_bits_corrupt (auto_in_a_bits_corrupt),
    .io_in_b_ready        (auto_in_b_ready),
    .io_in_b_valid        (probe_todo),
    .io_in_b_bits_param   (probe_perms),
    .io_in_b_bits_address (nodeIn_b_bits_b_address),
    .io_in_c_ready        (nodeIn_c_ready),
    .io_in_c_valid        (auto_in_c_valid),
    .io_in_c_bits_opcode  (auto_in_c_bits_opcode),
    .io_in_c_bits_param   (auto_in_c_bits_param),
    .io_in_c_bits_size    (auto_in_c_bits_size),
    .io_in_c_bits_source  (auto_in_c_bits_source),
    .io_in_c_bits_address (auto_in_c_bits_address),
    .io_in_c_bits_corrupt (auto_in_c_bits_corrupt),
    .io_in_d_ready        (auto_in_d_ready),
    .io_in_d_valid        (nodeIn_d_valid),
    .io_in_d_bits_opcode  (nodeIn_d_bits_opcode),
    .io_in_d_bits_param   (nodeIn_d_bits_param),
    .io_in_d_bits_size    (nodeIn_d_bits_size),
    .io_in_d_bits_source  (nodeIn_d_bits_source),
    .io_in_d_bits_sink    (nodeIn_d_bits_sink),
    .io_in_d_bits_denied  (nodeIn_d_bits_denied),
    .io_in_d_bits_corrupt (nodeIn_d_bits_corrupt),
    .io_in_e_valid        (auto_in_e_valid),
    .io_in_e_bits_sink    (auto_in_e_bits_sink)
  );
  BroadcastFilter filter (
    .io_request_valid         (auto_in_a_valid & ~(|a_first_counter) & (|_GEN_17)),
    .io_request_bits_mshr
      ({|(filter_io_request_bits_mshr_lo[3:2]),
        filter_io_request_bits_mshr_lo[3] | filter_io_request_bits_mshr_lo[1]}),
    .io_request_bits_address  (auto_in_a_bits_address),
    .io_request_bits_allocOH  (auto_in_a_bits_source == 5'h10),
    .io_request_bits_needT
      ((&auto_in_a_bits_opcode) | auto_in_a_bits_opcode == 3'h6
         ? auto_in_a_bits_param == 3'h2 | _GEN_19
         : auto_in_a_bits_opcode == 3'h5 ? _GEN_19 : auto_in_a_bits_opcode != 3'h4),
    .io_response_ready        (~probe_todo),
    .io_request_ready         (_filter_io_request_ready),
    .io_response_valid        (_filter_io_response_valid),
    .io_response_bits_mshr    (_filter_io_response_bits_mshr),
    .io_response_bits_address (_filter_io_response_bits_address),
    .io_response_bits_allocOH (_filter_io_response_bits_allocOH),
    .io_response_bits_needT   (_filter_io_response_bits_needT)
  );
  TLBroadcastTracker TLBroadcastTracker (
    .clock                                   (clock),
    .reset                                   (reset),
    .io_in_a_first                           (~(|a_first_counter)),
    .io_in_a_valid
      (auto_in_a_valid & filter_io_request_bits_mshr_lo[0] & _GEN_18),
    .io_in_a_bits_opcode                     (auto_in_a_bits_opcode),
    .io_in_a_bits_param                      (auto_in_a_bits_param),
    .io_in_a_bits_size                       (auto_in_a_bits_size),
    .io_in_a_bits_source                     (auto_in_a_bits_source),
    .io_in_a_bits_address                    (auto_in_a_bits_address),
    .io_in_a_bits_user_amba_prot_bufferable  (auto_in_a_bits_user_amba_prot_bufferable),
    .io_in_a_bits_user_amba_prot_modifiable  (auto_in_a_bits_user_amba_prot_modifiable),
    .io_in_a_bits_user_amba_prot_readalloc   (auto_in_a_bits_user_amba_prot_readalloc),
    .io_in_a_bits_user_amba_prot_writealloc  (auto_in_a_bits_user_amba_prot_writealloc),
    .io_in_a_bits_user_amba_prot_privileged  (auto_in_a_bits_user_amba_prot_privileged),
    .io_in_a_bits_user_amba_prot_secure      (auto_in_a_bits_user_amba_prot_secure),
    .io_in_a_bits_user_amba_prot_fetch       (auto_in_a_bits_user_amba_prot_fetch),
    .io_in_a_bits_mask                       (auto_in_a_bits_mask),
    .io_in_a_bits_data                       (auto_in_a_bits_data),
    .io_out_a_ready
      (auto_out_a_ready & (idle_1 ? ~winner_1_0 : state_1_1)),
    .io_probe_valid
      (_GEN_20 & _filter_io_response_bits_mshr == 2'h0),
    .io_probe_bits_count                     (~_filter_io_response_bits_allocOH),
    .io_probenack                            (_GEN_5 & c_trackerOH_0),
    .io_probedack                            (d_trackerOH[0] & _GEN_2 & d_drop),
    .io_probesack                            (_GEN_3 & c_trackerOH_0 & _GEN_4 & _GEN_6),
    .io_d_last
      (d_trackerOH[0] & _GEN & d_response & d_last),
    .io_e_last
      (auto_in_e_bits_sink == 2'h0 & auto_in_e_valid),
    .io_in_a_ready                           (_TLBroadcastTracker_io_in_a_ready),
    .io_out_a_valid                          (_TLBroadcastTracker_io_out_a_valid),
    .io_out_a_bits_opcode                    (_TLBroadcastTracker_io_out_a_bits_opcode),
    .io_out_a_bits_param                     (_TLBroadcastTracker_io_out_a_bits_param),
    .io_out_a_bits_size                      (_TLBroadcastTracker_io_out_a_bits_size),
    .io_out_a_bits_source                    (_TLBroadcastTracker_io_out_a_bits_source),
    .io_out_a_bits_address                   (_TLBroadcastTracker_io_out_a_bits_address),
    .io_out_a_bits_user_amba_prot_bufferable
      (_TLBroadcastTracker_io_out_a_bits_user_amba_prot_bufferable),
    .io_out_a_bits_user_amba_prot_modifiable
      (_TLBroadcastTracker_io_out_a_bits_user_amba_prot_modifiable),
    .io_out_a_bits_user_amba_prot_readalloc
      (_TLBroadcastTracker_io_out_a_bits_user_amba_prot_readalloc),
    .io_out_a_bits_user_amba_prot_writealloc
      (_TLBroadcastTracker_io_out_a_bits_user_amba_prot_writealloc),
    .io_out_a_bits_user_amba_prot_privileged
      (_TLBroadcastTracker_io_out_a_bits_user_amba_prot_privileged),
    .io_out_a_bits_user_amba_prot_secure
      (_TLBroadcastTracker_io_out_a_bits_user_amba_prot_secure),
    .io_out_a_bits_user_amba_prot_fetch
      (_TLBroadcastTracker_io_out_a_bits_user_amba_prot_fetch),
    .io_out_a_bits_mask                      (_TLBroadcastTracker_io_out_a_bits_mask),
    .io_out_a_bits_data                      (_TLBroadcastTracker_io_out_a_bits_data),
    .io_source                               (_TLBroadcastTracker_io_source),
    .io_line                                 (_TLBroadcastTracker_io_line),
    .io_idle                                 (_TLBroadcastTracker_io_idle),
    .io_need_d                               (_TLBroadcastTracker_io_need_d)
  );
  TLBroadcastTracker_1 TLBroadcastTracker_1 (
    .clock                                   (clock),
    .reset                                   (reset),
    .io_in_a_first                           (~(|a_first_counter)),
    .io_in_a_valid
      (auto_in_a_valid & filter_io_request_bits_mshr_lo[1] & _GEN_18),
    .io_in_a_bits_opcode                     (auto_in_a_bits_opcode),
    .io_in_a_bits_param                      (auto_in_a_bits_param),
    .io_in_a_bits_size                       (auto_in_a_bits_size),
    .io_in_a_bits_source                     (auto_in_a_bits_source),
    .io_in_a_bits_address                    (auto_in_a_bits_address),
    .io_in_a_bits_user_amba_prot_bufferable  (auto_in_a_bits_user_amba_prot_bufferable),
    .io_in_a_bits_user_amba_prot_modifiable  (auto_in_a_bits_user_amba_prot_modifiable),
    .io_in_a_bits_user_amba_prot_readalloc   (auto_in_a_bits_user_amba_prot_readalloc),
    .io_in_a_bits_user_amba_prot_writealloc  (auto_in_a_bits_user_amba_prot_writealloc),
    .io_in_a_bits_user_amba_prot_privileged  (auto_in_a_bits_user_amba_prot_privileged),
    .io_in_a_bits_user_amba_prot_secure      (auto_in_a_bits_user_amba_prot_secure),
    .io_in_a_bits_user_amba_prot_fetch       (auto_in_a_bits_user_amba_prot_fetch),
    .io_in_a_bits_mask                       (auto_in_a_bits_mask),
    .io_in_a_bits_data                       (auto_in_a_bits_data),
    .io_out_a_ready
      (auto_out_a_ready & (idle_1 ? ~_GEN_9 : state_1_2)),
    .io_probe_valid
      (_GEN_20 & _filter_io_response_bits_mshr == 2'h1),
    .io_probe_bits_count                     (~_filter_io_response_bits_allocOH),
    .io_probenack                            (_GEN_5 & c_trackerOH_1),
    .io_probedack                            (d_trackerOH[1] & _GEN_2 & d_drop),
    .io_probesack                            (_GEN_3 & c_trackerOH_1 & _GEN_4 & _GEN_6),
    .io_d_last
      (d_trackerOH[1] & _GEN & d_response & d_last),
    .io_e_last
      (auto_in_e_bits_sink == 2'h1 & auto_in_e_valid),
    .io_in_a_ready                           (_TLBroadcastTracker_1_io_in_a_ready),
    .io_out_a_valid                          (_TLBroadcastTracker_1_io_out_a_valid),
    .io_out_a_bits_opcode                    (_TLBroadcastTracker_1_io_out_a_bits_opcode),
    .io_out_a_bits_param                     (_TLBroadcastTracker_1_io_out_a_bits_param),
    .io_out_a_bits_size                      (_TLBroadcastTracker_1_io_out_a_bits_size),
    .io_out_a_bits_source                    (_TLBroadcastTracker_1_io_out_a_bits_source),
    .io_out_a_bits_address
      (_TLBroadcastTracker_1_io_out_a_bits_address),
    .io_out_a_bits_user_amba_prot_bufferable
      (_TLBroadcastTracker_1_io_out_a_bits_user_amba_prot_bufferable),
    .io_out_a_bits_user_amba_prot_modifiable
      (_TLBroadcastTracker_1_io_out_a_bits_user_amba_prot_modifiable),
    .io_out_a_bits_user_amba_prot_readalloc
      (_TLBroadcastTracker_1_io_out_a_bits_user_amba_prot_readalloc),
    .io_out_a_bits_user_amba_prot_writealloc
      (_TLBroadcastTracker_1_io_out_a_bits_user_amba_prot_writealloc),
    .io_out_a_bits_user_amba_prot_privileged
      (_TLBroadcastTracker_1_io_out_a_bits_user_amba_prot_privileged),
    .io_out_a_bits_user_amba_prot_secure
      (_TLBroadcastTracker_1_io_out_a_bits_user_amba_prot_secure),
    .io_out_a_bits_user_amba_prot_fetch
      (_TLBroadcastTracker_1_io_out_a_bits_user_amba_prot_fetch),
    .io_out_a_bits_mask                      (_TLBroadcastTracker_1_io_out_a_bits_mask),
    .io_out_a_bits_data                      (_TLBroadcastTracker_1_io_out_a_bits_data),
    .io_source                               (_TLBroadcastTracker_1_io_source),
    .io_line                                 (_TLBroadcastTracker_1_io_line),
    .io_idle                                 (_TLBroadcastTracker_1_io_idle),
    .io_need_d                               (_TLBroadcastTracker_1_io_need_d)
  );
  TLBroadcastTracker_2 TLBroadcastTracker_2 (
    .clock                                   (clock),
    .reset                                   (reset),
    .io_in_a_first                           (~(|a_first_counter)),
    .io_in_a_valid
      (auto_in_a_valid & filter_io_request_bits_mshr_lo[2] & _GEN_18),
    .io_in_a_bits_opcode                     (auto_in_a_bits_opcode),
    .io_in_a_bits_param                      (auto_in_a_bits_param),
    .io_in_a_bits_size                       (auto_in_a_bits_size),
    .io_in_a_bits_source                     (auto_in_a_bits_source),
    .io_in_a_bits_address                    (auto_in_a_bits_address),
    .io_in_a_bits_user_amba_prot_bufferable  (auto_in_a_bits_user_amba_prot_bufferable),
    .io_in_a_bits_user_amba_prot_modifiable  (auto_in_a_bits_user_amba_prot_modifiable),
    .io_in_a_bits_user_amba_prot_readalloc   (auto_in_a_bits_user_amba_prot_readalloc),
    .io_in_a_bits_user_amba_prot_writealloc  (auto_in_a_bits_user_amba_prot_writealloc),
    .io_in_a_bits_user_amba_prot_privileged  (auto_in_a_bits_user_amba_prot_privileged),
    .io_in_a_bits_user_amba_prot_secure      (auto_in_a_bits_user_amba_prot_secure),
    .io_in_a_bits_user_amba_prot_fetch       (auto_in_a_bits_user_amba_prot_fetch),
    .io_in_a_bits_mask                       (auto_in_a_bits_mask),
    .io_in_a_bits_data                       (auto_in_a_bits_data),
    .io_out_a_ready
      (auto_out_a_ready & (idle_1 ? ~_GEN_11 : state_1_3)),
    .io_probe_valid
      (_GEN_20 & _filter_io_response_bits_mshr == 2'h2),
    .io_probe_bits_count                     (~_filter_io_response_bits_allocOH),
    .io_probenack                            (_GEN_5 & c_trackerOH_2),
    .io_probedack                            (d_trackerOH[2] & _GEN_2 & d_drop),
    .io_probesack                            (_GEN_3 & c_trackerOH_2 & _GEN_4 & _GEN_6),
    .io_d_last
      (d_trackerOH[2] & _GEN & d_response & d_last),
    .io_e_last
      (auto_in_e_bits_sink == 2'h2 & auto_in_e_valid),
    .io_in_a_ready                           (_TLBroadcastTracker_2_io_in_a_ready),
    .io_out_a_valid                          (_TLBroadcastTracker_2_io_out_a_valid),
    .io_out_a_bits_opcode                    (_TLBroadcastTracker_2_io_out_a_bits_opcode),
    .io_out_a_bits_param                     (_TLBroadcastTracker_2_io_out_a_bits_param),
    .io_out_a_bits_size                      (_TLBroadcastTracker_2_io_out_a_bits_size),
    .io_out_a_bits_source                    (_TLBroadcastTracker_2_io_out_a_bits_source),
    .io_out_a_bits_address
      (_TLBroadcastTracker_2_io_out_a_bits_address),
    .io_out_a_bits_user_amba_prot_bufferable
      (_TLBroadcastTracker_2_io_out_a_bits_user_amba_prot_bufferable),
    .io_out_a_bits_user_amba_prot_modifiable
      (_TLBroadcastTracker_2_io_out_a_bits_user_amba_prot_modifiable),
    .io_out_a_bits_user_amba_prot_readalloc
      (_TLBroadcastTracker_2_io_out_a_bits_user_amba_prot_readalloc),
    .io_out_a_bits_user_amba_prot_writealloc
      (_TLBroadcastTracker_2_io_out_a_bits_user_amba_prot_writealloc),
    .io_out_a_bits_user_amba_prot_privileged
      (_TLBroadcastTracker_2_io_out_a_bits_user_amba_prot_privileged),
    .io_out_a_bits_user_amba_prot_secure
      (_TLBroadcastTracker_2_io_out_a_bits_user_amba_prot_secure),
    .io_out_a_bits_user_amba_prot_fetch
      (_TLBroadcastTracker_2_io_out_a_bits_user_amba_prot_fetch),
    .io_out_a_bits_mask                      (_TLBroadcastTracker_2_io_out_a_bits_mask),
    .io_out_a_bits_data                      (_TLBroadcastTracker_2_io_out_a_bits_data),
    .io_source                               (_TLBroadcastTracker_2_io_source),
    .io_line                                 (_TLBroadcastTracker_2_io_line),
    .io_idle                                 (_TLBroadcastTracker_2_io_idle),
    .io_need_d                               (_TLBroadcastTracker_2_io_need_d)
  );
  TLBroadcastTracker_3 TLBroadcastTracker_3 (
    .clock                                   (clock),
    .reset                                   (reset),
    .io_in_a_first                           (~(|a_first_counter)),
    .io_in_a_valid
      (auto_in_a_valid & filter_io_request_bits_mshr_lo[3] & _GEN_18),
    .io_in_a_bits_opcode                     (auto_in_a_bits_opcode),
    .io_in_a_bits_param                      (auto_in_a_bits_param),
    .io_in_a_bits_size                       (auto_in_a_bits_size),
    .io_in_a_bits_source                     (auto_in_a_bits_source),
    .io_in_a_bits_address                    (auto_in_a_bits_address),
    .io_in_a_bits_user_amba_prot_bufferable  (auto_in_a_bits_user_amba_prot_bufferable),
    .io_in_a_bits_user_amba_prot_modifiable  (auto_in_a_bits_user_amba_prot_modifiable),
    .io_in_a_bits_user_amba_prot_readalloc   (auto_in_a_bits_user_amba_prot_readalloc),
    .io_in_a_bits_user_amba_prot_writealloc  (auto_in_a_bits_user_amba_prot_writealloc),
    .io_in_a_bits_user_amba_prot_privileged  (auto_in_a_bits_user_amba_prot_privileged),
    .io_in_a_bits_user_amba_prot_secure      (auto_in_a_bits_user_amba_prot_secure),
    .io_in_a_bits_user_amba_prot_fetch       (auto_in_a_bits_user_amba_prot_fetch),
    .io_in_a_bits_mask                       (auto_in_a_bits_mask),
    .io_in_a_bits_data                       (auto_in_a_bits_data),
    .io_out_a_ready
      (auto_out_a_ready & (idle_1 ? ~_GEN_10 : state_1_4)),
    .io_probe_valid                          (_GEN_20 & (&_filter_io_response_bits_mshr)),
    .io_probe_bits_count                     (~_filter_io_response_bits_allocOH),
    .io_probenack                            (_GEN_5 & c_trackerOH_3),
    .io_probedack                            (d_trackerOH[3] & _GEN_2 & d_drop),
    .io_probesack                            (_GEN_3 & c_trackerOH_3 & _GEN_4 & _GEN_6),
    .io_d_last
      (d_trackerOH[3] & _GEN & d_response & d_last),
    .io_e_last                               ((&auto_in_e_bits_sink) & auto_in_e_valid),
    .io_in_a_ready                           (_TLBroadcastTracker_3_io_in_a_ready),
    .io_out_a_valid                          (_TLBroadcastTracker_3_io_out_a_valid),
    .io_out_a_bits_opcode                    (_TLBroadcastTracker_3_io_out_a_bits_opcode),
    .io_out_a_bits_param                     (_TLBroadcastTracker_3_io_out_a_bits_param),
    .io_out_a_bits_size                      (_TLBroadcastTracker_3_io_out_a_bits_size),
    .io_out_a_bits_source                    (_TLBroadcastTracker_3_io_out_a_bits_source),
    .io_out_a_bits_address
      (_TLBroadcastTracker_3_io_out_a_bits_address),
    .io_out_a_bits_user_amba_prot_bufferable
      (_TLBroadcastTracker_3_io_out_a_bits_user_amba_prot_bufferable),
    .io_out_a_bits_user_amba_prot_modifiable
      (_TLBroadcastTracker_3_io_out_a_bits_user_amba_prot_modifiable),
    .io_out_a_bits_user_amba_prot_readalloc
      (_TLBroadcastTracker_3_io_out_a_bits_user_amba_prot_readalloc),
    .io_out_a_bits_user_amba_prot_writealloc
      (_TLBroadcastTracker_3_io_out_a_bits_user_amba_prot_writealloc),
    .io_out_a_bits_user_amba_prot_privileged
      (_TLBroadcastTracker_3_io_out_a_bits_user_amba_prot_privileged),
    .io_out_a_bits_user_amba_prot_secure
      (_TLBroadcastTracker_3_io_out_a_bits_user_amba_prot_secure),
    .io_out_a_bits_user_amba_prot_fetch
      (_TLBroadcastTracker_3_io_out_a_bits_user_amba_prot_fetch),
    .io_out_a_bits_mask                      (_TLBroadcastTracker_3_io_out_a_bits_mask),
    .io_out_a_bits_data                      (_TLBroadcastTracker_3_io_out_a_bits_data),
    .io_source                               (_TLBroadcastTracker_3_io_source),
    .io_line                                 (_TLBroadcastTracker_3_io_line),
    .io_idle                                 (_TLBroadcastTracker_3_io_idle),
    .io_need_d                               (_TLBroadcastTracker_3_io_need_d)
  );
  assign auto_in_a_ready = nodeIn_a_ready;
  assign auto_in_b_valid = probe_todo;
  assign auto_in_b_bits_param = probe_perms;
  assign auto_in_b_bits_address = nodeIn_b_bits_b_address;
  assign auto_in_c_ready = nodeIn_c_ready;
  assign auto_in_d_valid = nodeIn_d_valid;
  assign auto_in_d_bits_opcode = nodeIn_d_bits_opcode;
  assign auto_in_d_bits_param = nodeIn_d_bits_param;
  assign auto_in_d_bits_size = nodeIn_d_bits_size;
  assign auto_in_d_bits_source = nodeIn_d_bits_source;
  assign auto_in_d_bits_sink = nodeIn_d_bits_sink;
  assign auto_in_d_bits_denied = nodeIn_d_bits_denied;
  assign auto_in_d_bits_data = muxState_1 ? auto_out_d_bits_data : 64'h0;
  assign auto_in_d_bits_corrupt = nodeIn_d_bits_corrupt;
  assign auto_out_a_valid = nodeOut_a_valid;
  assign auto_out_a_bits_opcode =
    (muxState_1_1 ? _TLBroadcastTracker_io_out_a_bits_opcode : 3'h0)
    | (muxState_1_2 ? _TLBroadcastTracker_1_io_out_a_bits_opcode : 3'h0)
    | (muxState_1_3 ? _TLBroadcastTracker_2_io_out_a_bits_opcode : 3'h0)
    | (muxState_1_4 ? _TLBroadcastTracker_3_io_out_a_bits_opcode : 3'h0);
  assign auto_out_a_bits_param =
    (muxState_1_1 ? _TLBroadcastTracker_io_out_a_bits_param : 3'h0)
    | (muxState_1_2 ? _TLBroadcastTracker_1_io_out_a_bits_param : 3'h0)
    | (muxState_1_3 ? _TLBroadcastTracker_2_io_out_a_bits_param : 3'h0)
    | (muxState_1_4 ? _TLBroadcastTracker_3_io_out_a_bits_param : 3'h0);
  assign auto_out_a_bits_size =
    (muxState_1_0 ? auto_in_c_bits_size : 3'h0)
    | (muxState_1_1 ? _TLBroadcastTracker_io_out_a_bits_size : 3'h0)
    | (muxState_1_2 ? _TLBroadcastTracker_1_io_out_a_bits_size : 3'h0)
    | (muxState_1_3 ? _TLBroadcastTracker_2_io_out_a_bits_size : 3'h0)
    | (muxState_1_4 ? _TLBroadcastTracker_3_io_out_a_bits_size : 3'h0);
  assign auto_out_a_bits_source =
    (muxState_1_0
       ? {(&auto_in_c_bits_opcode) ? 2'h2 : 2'h1,
          (&auto_in_c_bits_opcode)
            ? auto_in_c_bits_source
            : (c_trackerOH_0 ? _TLBroadcastTracker_io_source : 5'h0)
              | (c_trackerOH_1 ? _TLBroadcastTracker_1_io_source : 5'h0)
              | (c_trackerOH_2 ? _TLBroadcastTracker_2_io_source : 5'h0)
              | (c_trackerOH_3 ? _TLBroadcastTracker_3_io_source : 5'h0)}
       : 7'h0) | (muxState_1_1 ? _TLBroadcastTracker_io_out_a_bits_source : 7'h0)
    | (muxState_1_2 ? _TLBroadcastTracker_1_io_out_a_bits_source : 7'h0)
    | (muxState_1_3 ? _TLBroadcastTracker_2_io_out_a_bits_source : 7'h0)
    | (muxState_1_4 ? _TLBroadcastTracker_3_io_out_a_bits_source : 7'h0);
  assign auto_out_a_bits_address =
    (muxState_1_0 ? auto_in_c_bits_address : 32'h0)
    | (muxState_1_1 ? _TLBroadcastTracker_io_out_a_bits_address : 32'h0)
    | (muxState_1_2 ? _TLBroadcastTracker_1_io_out_a_bits_address : 32'h0)
    | (muxState_1_3 ? _TLBroadcastTracker_2_io_out_a_bits_address : 32'h0)
    | (muxState_1_4 ? _TLBroadcastTracker_3_io_out_a_bits_address : 32'h0);
  assign auto_out_a_bits_user_amba_prot_bufferable =
    muxState_1_0 | muxState_1_1
    & _TLBroadcastTracker_io_out_a_bits_user_amba_prot_bufferable | muxState_1_2
    & _TLBroadcastTracker_1_io_out_a_bits_user_amba_prot_bufferable | muxState_1_3
    & _TLBroadcastTracker_2_io_out_a_bits_user_amba_prot_bufferable | muxState_1_4
    & _TLBroadcastTracker_3_io_out_a_bits_user_amba_prot_bufferable;
  assign auto_out_a_bits_user_amba_prot_modifiable =
    muxState_1_0 | muxState_1_1
    & _TLBroadcastTracker_io_out_a_bits_user_amba_prot_modifiable | muxState_1_2
    & _TLBroadcastTracker_1_io_out_a_bits_user_amba_prot_modifiable | muxState_1_3
    & _TLBroadcastTracker_2_io_out_a_bits_user_amba_prot_modifiable | muxState_1_4
    & _TLBroadcastTracker_3_io_out_a_bits_user_amba_prot_modifiable;
  assign auto_out_a_bits_user_amba_prot_readalloc =
    muxState_1_0 | muxState_1_1
    & _TLBroadcastTracker_io_out_a_bits_user_amba_prot_readalloc | muxState_1_2
    & _TLBroadcastTracker_1_io_out_a_bits_user_amba_prot_readalloc | muxState_1_3
    & _TLBroadcastTracker_2_io_out_a_bits_user_amba_prot_readalloc | muxState_1_4
    & _TLBroadcastTracker_3_io_out_a_bits_user_amba_prot_readalloc;
  assign auto_out_a_bits_user_amba_prot_writealloc =
    muxState_1_0 | muxState_1_1
    & _TLBroadcastTracker_io_out_a_bits_user_amba_prot_writealloc | muxState_1_2
    & _TLBroadcastTracker_1_io_out_a_bits_user_amba_prot_writealloc | muxState_1_3
    & _TLBroadcastTracker_2_io_out_a_bits_user_amba_prot_writealloc | muxState_1_4
    & _TLBroadcastTracker_3_io_out_a_bits_user_amba_prot_writealloc;
  assign auto_out_a_bits_user_amba_prot_privileged =
    muxState_1_0 | muxState_1_1
    & _TLBroadcastTracker_io_out_a_bits_user_amba_prot_privileged | muxState_1_2
    & _TLBroadcastTracker_1_io_out_a_bits_user_amba_prot_privileged | muxState_1_3
    & _TLBroadcastTracker_2_io_out_a_bits_user_amba_prot_privileged | muxState_1_4
    & _TLBroadcastTracker_3_io_out_a_bits_user_amba_prot_privileged;
  assign auto_out_a_bits_user_amba_prot_secure =
    muxState_1_0 | muxState_1_1 & _TLBroadcastTracker_io_out_a_bits_user_amba_prot_secure
    | muxState_1_2 & _TLBroadcastTracker_1_io_out_a_bits_user_amba_prot_secure
    | muxState_1_3 & _TLBroadcastTracker_2_io_out_a_bits_user_amba_prot_secure
    | muxState_1_4 & _TLBroadcastTracker_3_io_out_a_bits_user_amba_prot_secure;
  assign auto_out_a_bits_user_amba_prot_fetch =
    muxState_1_1 & _TLBroadcastTracker_io_out_a_bits_user_amba_prot_fetch | muxState_1_2
    & _TLBroadcastTracker_1_io_out_a_bits_user_amba_prot_fetch | muxState_1_3
    & _TLBroadcastTracker_2_io_out_a_bits_user_amba_prot_fetch | muxState_1_4
    & _TLBroadcastTracker_3_io_out_a_bits_user_amba_prot_fetch;
  assign auto_out_a_bits_mask =
    (muxState_1_0
       ? {putfull_bits_a_mask_acc_5 | putfull_bits_a_mask_eq_5
            & auto_in_c_bits_address[0],
          putfull_bits_a_mask_acc_5 | putfull_bits_a_mask_eq_5
            & ~(auto_in_c_bits_address[0]),
          putfull_bits_a_mask_acc_4 | putfull_bits_a_mask_eq_4
            & auto_in_c_bits_address[0],
          putfull_bits_a_mask_acc_4 | putfull_bits_a_mask_eq_4
            & ~(auto_in_c_bits_address[0]),
          putfull_bits_a_mask_acc_3 | putfull_bits_a_mask_eq_3
            & auto_in_c_bits_address[0],
          putfull_bits_a_mask_acc_3 | putfull_bits_a_mask_eq_3
            & ~(auto_in_c_bits_address[0]),
          putfull_bits_a_mask_acc_2 | putfull_bits_a_mask_eq_2
            & auto_in_c_bits_address[0],
          putfull_bits_a_mask_acc_2 | putfull_bits_a_mask_eq_2
            & ~(auto_in_c_bits_address[0])}
       : 8'h0) | (muxState_1_1 ? _TLBroadcastTracker_io_out_a_bits_mask : 8'h0)
    | (muxState_1_2 ? _TLBroadcastTracker_1_io_out_a_bits_mask : 8'h0)
    | (muxState_1_3 ? _TLBroadcastTracker_2_io_out_a_bits_mask : 8'h0)
    | (muxState_1_4 ? _TLBroadcastTracker_3_io_out_a_bits_mask : 8'h0);
  assign auto_out_a_bits_data =
    (muxState_1_0 ? auto_in_c_bits_data : 64'h0)
    | (muxState_1_1 ? _TLBroadcastTracker_io_out_a_bits_data : 64'h0)
    | (muxState_1_2 ? _TLBroadcastTracker_1_io_out_a_bits_data : 64'h0)
    | (muxState_1_3 ? _TLBroadcastTracker_2_io_out_a_bits_data : 64'h0)
    | (muxState_1_4 ? _TLBroadcastTracker_3_io_out_a_bits_data : 64'h0);
  assign auto_out_d_ready = nodeOut_d_ready;
endmodule

module TLMonitor_21(
  input        clock,
               reset,
               io_in_a_ready,
               io_in_a_valid,
  input [2:0]  io_in_a_bits_opcode,
               io_in_a_bits_param,
               io_in_a_bits_size,
  input [6:0]  io_in_a_bits_source,
  input [31:0] io_in_a_bits_address,
  input [7:0]  io_in_a_bits_mask,
  input        io_in_d_ready,
               io_in_d_valid,
  input [2:0]  io_in_d_bits_opcode,
               io_in_d_bits_size,
  input [6:0]  io_in_d_bits_source,
  input        io_in_d_bits_denied,
               io_in_d_bits_corrupt
);

  wire [31:0]  _plusarg_reader_1_out;
  wire [31:0]  _plusarg_reader_out;
  wire [12:0]  _GEN = 13'h3F << io_in_a_bits_size;
  wire         _GEN_0 = io_in_a_ready & io_in_a_valid;
  reg  [2:0]   a_first_counter;
  reg  [2:0]   opcode;
  reg  [2:0]   param;
  reg  [2:0]   size;
  reg  [6:0]   source;
  reg  [31:0]  address;
  reg  [2:0]   d_first_counter;
  reg  [2:0]   opcode_1;
  reg  [1:0]   param_1;
  reg  [2:0]   size_1;
  reg  [6:0]   source_1;
  reg          sink;
  reg          denied;
  reg  [127:0] inflight;
  reg  [511:0] inflight_opcodes;
  reg  [511:0] inflight_sizes;
  reg  [2:0]   a_first_counter_1;
  wire         a_first_1 = a_first_counter_1 == 3'h0;
  reg  [2:0]   d_first_counter_1;
  wire         d_first_1 = d_first_counter_1 == 3'h0;
  wire [127:0] _GEN_1 = {121'h0, io_in_a_bits_source};
  wire [127:0] _GEN_2 = 128'h1 << _GEN_1;
  wire         _GEN_3 = _GEN_0 & a_first_1;
  wire         d_release_ack = io_in_d_bits_opcode == 3'h6;
  wire [127:0] _GEN_4 = {121'h0, io_in_d_bits_source};
  wire [127:0] _GEN_5 = 128'h1 << _GEN_4;
  reg  [31:0]  watchdog;
  reg  [127:0] inflight_1;
  reg  [511:0] inflight_sizes_1;
  reg  [2:0]   d_first_counter_2;
  wire         d_first_2 = d_first_counter_2 == 3'h0;
  reg  [31:0]  watchdog_1;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      automatic logic [7:0][2:0] _GEN_6 =
        '{3'h4, 3'h5, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic [7:0][2:0] _GEN_7 =
        '{3'h4, 3'h4, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic [5:0]      _GEN_8 = io_in_a_bits_address[5:0] & ~(_GEN[5:0]);
      automatic logic            _GEN_9 = io_in_a_bits_size > 3'h2;
      automatic logic            mask_size = io_in_a_bits_size[1:0] == 2'h2;
      automatic logic            mask_acc =
        _GEN_9 | mask_size & ~(io_in_a_bits_address[2]);
      automatic logic            mask_acc_1 =
        _GEN_9 | mask_size & io_in_a_bits_address[2];
      automatic logic            mask_size_1 = io_in_a_bits_size[1:0] == 2'h1;
      automatic logic            mask_eq_2 =
        ~(io_in_a_bits_address[2]) & ~(io_in_a_bits_address[1]);
      automatic logic            mask_acc_2 = mask_acc | mask_size_1 & mask_eq_2;
      automatic logic            mask_eq_3 =
        ~(io_in_a_bits_address[2]) & io_in_a_bits_address[1];
      automatic logic            mask_acc_3 = mask_acc | mask_size_1 & mask_eq_3;
      automatic logic            mask_eq_4 =
        io_in_a_bits_address[2] & ~(io_in_a_bits_address[1]);
      automatic logic            mask_acc_4 = mask_acc_1 | mask_size_1 & mask_eq_4;
      automatic logic            mask_eq_5 =
        io_in_a_bits_address[2] & io_in_a_bits_address[1];
      automatic logic            mask_acc_5 = mask_acc_1 | mask_size_1 & mask_eq_5;
      automatic logic [7:0]      mask =
        {mask_acc_5 | mask_eq_5 & io_in_a_bits_address[0],
         mask_acc_5 | mask_eq_5 & ~(io_in_a_bits_address[0]),
         mask_acc_4 | mask_eq_4 & io_in_a_bits_address[0],
         mask_acc_4 | mask_eq_4 & ~(io_in_a_bits_address[0]),
         mask_acc_3 | mask_eq_3 & io_in_a_bits_address[0],
         mask_acc_3 | mask_eq_3 & ~(io_in_a_bits_address[0]),
         mask_acc_2 | mask_eq_2 & io_in_a_bits_address[0],
         mask_acc_2 | mask_eq_2 & ~(io_in_a_bits_address[0])};
      automatic logic            _GEN_10 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_11 = io_in_a_bits_param > 3'h2;
      automatic logic            _GEN_12 = io_in_a_bits_mask != 8'hFF;
      automatic logic            _GEN_13 =
        io_in_a_valid & (&io_in_a_bits_opcode) & ~reset;
      automatic logic            _GEN_14 =
        io_in_a_bits_size != 3'h7 & io_in_a_bits_address[31:28] == 4'h8;
      automatic logic            _GEN_15 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_16 = io_in_a_bits_mask != mask;
      automatic logic            _GEN_17 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_18 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_19 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_20 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h3 & ~reset;
      automatic logic            _GEN_21 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h5 & ~reset;
      automatic logic            _GEN_22 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_23 = io_in_d_bits_size < 3'h3;
      automatic logic            _GEN_24 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_25 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h5 & ~reset;
      automatic logic            _GEN_26 = ~io_in_d_bits_denied | io_in_d_bits_corrupt;
      automatic logic            _GEN_27 = io_in_a_valid & (|a_first_counter) & ~reset;
      automatic logic            _GEN_28 = io_in_d_valid & (|d_first_counter) & ~reset;
      automatic logic [511:0]    _GEN_29 = {503'h0, io_in_d_bits_source, 2'h0};
      automatic logic [511:0]    _GEN_30 = inflight_opcodes >> _GEN_29;
      automatic logic            _GEN_31 = io_in_a_valid & a_first_1;
      automatic logic [127:0]    a_set_wo_ready = _GEN_31 ? _GEN_2 : 128'h0;
      automatic logic            _GEN_32 = io_in_d_valid & d_first_1;
      automatic logic            _GEN_33 = _GEN_32 & ~d_release_ack;
      automatic logic            _GEN_34 = io_in_a_bits_source == io_in_d_bits_source;
      automatic logic            same_cycle_resp = _GEN_31 & _GEN_34;
      automatic logic            _GEN_35 = _GEN_33 & same_cycle_resp & ~reset;
      automatic logic            _GEN_36 = _GEN_33 & ~same_cycle_resp & ~reset;
      automatic logic            _GEN_37 =
        io_in_d_valid & d_first_2 & d_release_ack & ~reset;
      automatic logic [127:0]    _GEN_38 = inflight >> _GEN_1;
      automatic logic [127:0]    _GEN_39 = inflight >> _GEN_4;
      automatic logic [511:0]    _GEN_40 = inflight_sizes >> _GEN_29;
      automatic logic [127:0]    _GEN_41 = inflight_1 >> _GEN_4;
      automatic logic [511:0]    _GEN_42 = inflight_sizes_1 >> _GEN_29;
      if (_GEN_10) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_10 & ~_GEN_9) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_10 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_10 & _GEN_11) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock carries invalid grow param (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_10 & _GEN_12) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_13) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_13 & ~_GEN_9) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_13 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_13 & _GEN_11) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm carries invalid grow param (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_13 & ~(|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_13 & _GEN_12) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & ~_GEN_14) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get address not aligned to size (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get carries invalid param (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & _GEN_16) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get contains invalid mask (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & ~_GEN_14) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull address not aligned to size (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull carries invalid param (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & _GEN_16) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull contains invalid mask (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & ~_GEN_14) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial address not aligned to size (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial carries invalid param (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & (|(io_in_a_bits_mask & ~mask))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial contains invalid mask (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & io_in_a_bits_param > 3'h4) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & _GEN_16) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical address not aligned to size (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & io_in_a_bits_param[2]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical carries invalid opcode param (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & _GEN_16) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical contains invalid mask (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_21) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_21 & (|_GEN_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint address not aligned to size (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_21 & (|(io_in_a_bits_param[2:1]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint carries invalid opcode param (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_21 & _GEN_16) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint contains invalid mask (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & ~reset & (&io_in_d_bits_opcode)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel has invalid opcode (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & _GEN_23) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck is corrupt (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & io_in_d_bits_denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck is denied (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_24) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid sink ID (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_24 & _GEN_23) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant smaller than a beat (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_24 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant is corrupt (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid sink ID (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25 & _GEN_23) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData smaller than a beat (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25 & ~_GEN_26) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData is denied but not corrupt (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & io_in_d_bits_opcode == 3'h0 & ~reset
          & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck is corrupt (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & io_in_d_bits_opcode == 3'h1 & ~reset & ~_GEN_26) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData is denied but not corrupt (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & io_in_d_bits_opcode == 3'h2 & ~reset
          & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck is corrupt (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & io_in_a_bits_opcode != opcode) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel opcode changed within multibeat operation (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & io_in_a_bits_param != param) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel param changed within multibeat operation (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & io_in_a_bits_size != size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel size changed within multibeat operation (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & io_in_a_bits_source != source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel source changed within multibeat operation (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & io_in_a_bits_address != address) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel address changed with multibeat operation (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & io_in_d_bits_opcode != opcode_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel opcode changed within multibeat operation (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & (|param_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel param changed within multibeat operation (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & io_in_d_bits_size != size_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel size changed within multibeat operation (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & io_in_d_bits_source != source_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel source changed within multibeat operation (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & sink) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel sink changed with multibeat operation (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & io_in_d_bits_denied != denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel denied changed with multibeat operation (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_3 & ~reset & _GEN_38[0]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel re-used a source ID (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_33 & ~reset & ~(_GEN_39[0] | same_cycle_resp)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_35
          & ~(io_in_d_bits_opcode == _GEN_7[io_in_a_bits_opcode]
              | io_in_d_bits_opcode == _GEN_6[io_in_a_bits_opcode])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_35 & io_in_a_bits_size != io_in_d_bits_size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_36
          & ~(io_in_d_bits_opcode == _GEN_7[_GEN_30[3:1]]
              | io_in_d_bits_opcode == _GEN_6[_GEN_30[3:1]])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_36 & io_in_d_bits_size != _GEN_40[3:1]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & a_first_1 & io_in_a_valid & _GEN_34 & ~d_release_ack & ~reset
          & ~(~io_in_d_ready | io_in_a_ready)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ready check\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(a_set_wo_ready != (_GEN_33 ? _GEN_5 : 128'h0)
              | a_set_wo_ready == 128'h0)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' and 'D' concurrent, despite minlatency > 0 (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight == 128'h0 | _plusarg_reader_out == 32'h0
              | watchdog < _plusarg_reader_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & ~(_GEN_41[0])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & io_in_d_bits_size != _GEN_42[3:1]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight_1 == 128'h0 | _plusarg_reader_1_out == 32'h0
              | watchdog_1 < _plusarg_reader_1_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/subsystem/BankedCoherenceParams.scala:74:103)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    automatic logic _GEN_43;
    automatic logic _GEN_44;
    _GEN_43 = io_in_d_ready & io_in_d_valid;
    _GEN_44 = _GEN_43 & ~(|d_first_counter);
    if (reset) begin
      a_first_counter <= 3'h0;
      d_first_counter <= 3'h0;
      inflight <= 128'h0;
      inflight_opcodes <= 512'h0;
      inflight_sizes <= 512'h0;
      a_first_counter_1 <= 3'h0;
      d_first_counter_1 <= 3'h0;
      watchdog <= 32'h0;
      inflight_1 <= 128'h0;
      inflight_sizes_1 <= 512'h0;
      d_first_counter_2 <= 3'h0;
      watchdog_1 <= 32'h0;
    end
    else begin
      automatic logic [1026:0] _GEN_45 = {1018'h0, io_in_a_bits_source, 2'h0};
      automatic logic          _GEN_46;
      automatic logic [1038:0] _GEN_47 = 1039'hF << {1030'h0, io_in_d_bits_source, 2'h0};
      automatic logic [511:0]  d_sizes_clr;
      automatic logic          _GEN_48;
      automatic logic [1026:0] _GEN_49 =
        {1023'h0, _GEN_3 ? {io_in_a_bits_opcode, 1'h1} : 4'h0} << _GEN_45;
      automatic logic [1026:0] _GEN_50 =
        {1023'h0, _GEN_3 ? {io_in_a_bits_size, 1'h1} : 4'h0} << _GEN_45;
      _GEN_46 = _GEN_43 & d_first_1 & ~d_release_ack;
      d_sizes_clr = _GEN_46 ? _GEN_47[511:0] : 512'h0;
      _GEN_48 = _GEN_43 & d_first_2 & d_release_ack;
      if (_GEN_0) begin
        if (|a_first_counter)
          a_first_counter <= a_first_counter - 3'h1;
        else if (io_in_a_bits_opcode[2])
          a_first_counter <= 3'h0;
        else
          a_first_counter <= ~(_GEN[5:3]);
        if (a_first_1) begin
          if (io_in_a_bits_opcode[2])
            a_first_counter_1 <= 3'h0;
          else
            a_first_counter_1 <= ~(_GEN[5:3]);
        end
        else
          a_first_counter_1 <= a_first_counter_1 - 3'h1;
      end
      if (_GEN_43) begin
        automatic logic [12:0] _GEN_51 = 13'h3F << io_in_d_bits_size;
        if (|d_first_counter)
          d_first_counter <= d_first_counter - 3'h1;
        else if (io_in_d_bits_opcode[0])
          d_first_counter <= ~(_GEN_51[5:3]);
        else
          d_first_counter <= 3'h0;
        if (d_first_1) begin
          if (io_in_d_bits_opcode[0])
            d_first_counter_1 <= ~(_GEN_51[5:3]);
          else
            d_first_counter_1 <= 3'h0;
        end
        else
          d_first_counter_1 <= d_first_counter_1 - 3'h1;
        if (d_first_2) begin
          if (io_in_d_bits_opcode[0])
            d_first_counter_2 <= ~(_GEN_51[5:3]);
          else
            d_first_counter_2 <= 3'h0;
        end
        else
          d_first_counter_2 <= d_first_counter_2 - 3'h1;
        watchdog_1 <= 32'h0;
      end
      else
        watchdog_1 <= watchdog_1 + 32'h1;
      inflight <= (inflight | (_GEN_3 ? _GEN_2 : 128'h0)) & ~(_GEN_46 ? _GEN_5 : 128'h0);
      inflight_opcodes <=
        (inflight_opcodes | (_GEN_3 ? _GEN_49[511:0] : 512'h0)) & ~d_sizes_clr;
      inflight_sizes <=
        (inflight_sizes | (_GEN_3 ? _GEN_50[511:0] : 512'h0)) & ~d_sizes_clr;
      if (_GEN_0 | _GEN_43)
        watchdog <= 32'h0;
      else
        watchdog <= watchdog + 32'h1;
      inflight_1 <= inflight_1 & ~(_GEN_48 ? _GEN_5 : 128'h0);
      inflight_sizes_1 <= inflight_sizes_1 & ~(_GEN_48 ? _GEN_47[511:0] : 512'h0);
    end
    if (_GEN_0 & ~(|a_first_counter)) begin
      opcode <= io_in_a_bits_opcode;
      param <= io_in_a_bits_param;
      size <= io_in_a_bits_size;
      source <= io_in_a_bits_source;
      address <= io_in_a_bits_address;
    end
    if (_GEN_44) begin
      opcode_1 <= io_in_d_bits_opcode;
      param_1 <= 2'h0;
      size_1 <= io_in_d_bits_size;
      source_1 <= io_in_d_bits_source;
      denied <= io_in_d_bits_denied;
    end
    sink <= ~_GEN_44 & sink;
  end // always @(posedge)
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader (
    .out (_plusarg_reader_out)
  );
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader_1 (
    .out (_plusarg_reader_1_out)
  );
endmodule

module BankBinder(
  input         clock,
                reset,
                auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
                auto_in_a_bits_param,
                auto_in_a_bits_size,
  input  [6:0]  auto_in_a_bits_source,
  input  [31:0] auto_in_a_bits_address,
  input         auto_in_a_bits_user_amba_prot_bufferable,
                auto_in_a_bits_user_amba_prot_modifiable,
                auto_in_a_bits_user_amba_prot_readalloc,
                auto_in_a_bits_user_amba_prot_writealloc,
                auto_in_a_bits_user_amba_prot_privileged,
                auto_in_a_bits_user_amba_prot_secure,
                auto_in_a_bits_user_amba_prot_fetch,
  input  [7:0]  auto_in_a_bits_mask,
  input  [63:0] auto_in_a_bits_data,
  input         auto_in_d_ready,
                auto_out_a_ready,
                auto_out_d_valid,
  input  [2:0]  auto_out_d_bits_opcode,
                auto_out_d_bits_size,
  input  [6:0]  auto_out_d_bits_source,
  input         auto_out_d_bits_denied,
  input  [63:0] auto_out_d_bits_data,
  input         auto_out_d_bits_corrupt,
  output        auto_in_a_ready,
                auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
                auto_in_d_bits_size,
  output [6:0]  auto_in_d_bits_source,
  output        auto_in_d_bits_denied,
  output [63:0] auto_in_d_bits_data,
  output        auto_in_d_bits_corrupt,
                auto_out_a_valid,
  output [2:0]  auto_out_a_bits_opcode,
                auto_out_a_bits_param,
                auto_out_a_bits_size,
  output [6:0]  auto_out_a_bits_source,
  output [31:0] auto_out_a_bits_address,
  output        auto_out_a_bits_user_amba_prot_bufferable,
                auto_out_a_bits_user_amba_prot_modifiable,
                auto_out_a_bits_user_amba_prot_readalloc,
                auto_out_a_bits_user_amba_prot_writealloc,
                auto_out_a_bits_user_amba_prot_privileged,
                auto_out_a_bits_user_amba_prot_secure,
                auto_out_a_bits_user_amba_prot_fetch,
  output [7:0]  auto_out_a_bits_mask,
  output [63:0] auto_out_a_bits_data,
  output        auto_out_d_ready
);

  TLMonitor_21 monitor (
    .clock                (clock),
    .reset                (reset),
    .io_in_a_ready        (auto_out_a_ready),
    .io_in_a_valid        (auto_in_a_valid),
    .io_in_a_bits_opcode  (auto_in_a_bits_opcode),
    .io_in_a_bits_param   (auto_in_a_bits_param),
    .io_in_a_bits_size    (auto_in_a_bits_size),
    .io_in_a_bits_source  (auto_in_a_bits_source),
    .io_in_a_bits_address (auto_in_a_bits_address),
    .io_in_a_bits_mask    (auto_in_a_bits_mask),
    .io_in_d_ready        (auto_in_d_ready),
    .io_in_d_valid        (auto_out_d_valid),
    .io_in_d_bits_opcode  (auto_out_d_bits_opcode),
    .io_in_d_bits_size    (auto_out_d_bits_size),
    .io_in_d_bits_source  (auto_out_d_bits_source),
    .io_in_d_bits_denied  (auto_out_d_bits_denied),
    .io_in_d_bits_corrupt (auto_out_d_bits_corrupt)
  );
  assign auto_in_a_ready = auto_out_a_ready;
  assign auto_in_d_valid = auto_out_d_valid;
  assign auto_in_d_bits_opcode = auto_out_d_bits_opcode;
  assign auto_in_d_bits_size = auto_out_d_bits_size;
  assign auto_in_d_bits_source = auto_out_d_bits_source;
  assign auto_in_d_bits_denied = auto_out_d_bits_denied;
  assign auto_in_d_bits_data = auto_out_d_bits_data;
  assign auto_in_d_bits_corrupt = auto_out_d_bits_corrupt;
  assign auto_out_a_valid = auto_in_a_valid;
  assign auto_out_a_bits_opcode = auto_in_a_bits_opcode;
  assign auto_out_a_bits_param = auto_in_a_bits_param;
  assign auto_out_a_bits_size = auto_in_a_bits_size;
  assign auto_out_a_bits_source = auto_in_a_bits_source;
  assign auto_out_a_bits_address = auto_in_a_bits_address;
  assign auto_out_a_bits_user_amba_prot_bufferable =
    auto_in_a_bits_user_amba_prot_bufferable;
  assign auto_out_a_bits_user_amba_prot_modifiable =
    auto_in_a_bits_user_amba_prot_modifiable;
  assign auto_out_a_bits_user_amba_prot_readalloc =
    auto_in_a_bits_user_amba_prot_readalloc;
  assign auto_out_a_bits_user_amba_prot_writealloc =
    auto_in_a_bits_user_amba_prot_writealloc;
  assign auto_out_a_bits_user_amba_prot_privileged =
    auto_in_a_bits_user_amba_prot_privileged;
  assign auto_out_a_bits_user_amba_prot_secure = auto_in_a_bits_user_amba_prot_secure;
  assign auto_out_a_bits_user_amba_prot_fetch = auto_in_a_bits_user_amba_prot_fetch;
  assign auto_out_a_bits_mask = auto_in_a_bits_mask;
  assign auto_out_a_bits_data = auto_in_a_bits_data;
  assign auto_out_d_ready = auto_in_d_ready;
endmodule

module CoherenceManagerWrapper(
  input         auto_coupler_to_bus_named_mbus_bus_xing_out_a_ready,
                auto_coupler_to_bus_named_mbus_bus_xing_out_d_valid,
  input  [2:0]  auto_coupler_to_bus_named_mbus_bus_xing_out_d_bits_opcode,
                auto_coupler_to_bus_named_mbus_bus_xing_out_d_bits_size,
  input  [6:0]  auto_coupler_to_bus_named_mbus_bus_xing_out_d_bits_source,
  input         auto_coupler_to_bus_named_mbus_bus_xing_out_d_bits_denied,
  input  [63:0] auto_coupler_to_bus_named_mbus_bus_xing_out_d_bits_data,
  input         auto_coupler_to_bus_named_mbus_bus_xing_out_d_bits_corrupt,
                auto_coherent_jbar_anon_in_a_valid,
  input  [2:0]  auto_coherent_jbar_anon_in_a_bits_opcode,
                auto_coherent_jbar_anon_in_a_bits_param,
                auto_coherent_jbar_anon_in_a_bits_size,
  input  [4:0]  auto_coherent_jbar_anon_in_a_bits_source,
  input  [31:0] auto_coherent_jbar_anon_in_a_bits_address,
  input         auto_coherent_jbar_anon_in_a_bits_user_amba_prot_bufferable,
                auto_coherent_jbar_anon_in_a_bits_user_amba_prot_modifiable,
                auto_coherent_jbar_anon_in_a_bits_user_amba_prot_readalloc,
                auto_coherent_jbar_anon_in_a_bits_user_amba_prot_writealloc,
                auto_coherent_jbar_anon_in_a_bits_user_amba_prot_privileged,
                auto_coherent_jbar_anon_in_a_bits_user_amba_prot_secure,
                auto_coherent_jbar_anon_in_a_bits_user_amba_prot_fetch,
  input  [7:0]  auto_coherent_jbar_anon_in_a_bits_mask,
  input  [63:0] auto_coherent_jbar_anon_in_a_bits_data,
  input         auto_coherent_jbar_anon_in_a_bits_corrupt,
                auto_coherent_jbar_anon_in_b_ready,
                auto_coherent_jbar_anon_in_c_valid,
  input  [2:0]  auto_coherent_jbar_anon_in_c_bits_opcode,
                auto_coherent_jbar_anon_in_c_bits_param,
                auto_coherent_jbar_anon_in_c_bits_size,
  input  [4:0]  auto_coherent_jbar_anon_in_c_bits_source,
  input  [31:0] auto_coherent_jbar_anon_in_c_bits_address,
  input  [63:0] auto_coherent_jbar_anon_in_c_bits_data,
  input         auto_coherent_jbar_anon_in_c_bits_corrupt,
                auto_coherent_jbar_anon_in_d_ready,
                auto_coherent_jbar_anon_in_e_valid,
  input  [1:0]  auto_coherent_jbar_anon_in_e_bits_sink,
  input         auto_coh_clock_groups_in_member_coh_1_clock,
                auto_coh_clock_groups_in_member_coh_1_reset,
                auto_coh_clock_groups_in_member_coh_0_clock,
                auto_coh_clock_groups_in_member_coh_0_reset,
  output        auto_coupler_to_bus_named_mbus_bus_xing_out_a_valid,
  output [2:0]  auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_opcode,
                auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_param,
                auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_size,
  output [6:0]  auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_source,
  output [31:0] auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_address,
  output        auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_user_amba_prot_bufferable,
                auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_user_amba_prot_modifiable,
                auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_user_amba_prot_readalloc,
                auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_user_amba_prot_writealloc,
                auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_user_amba_prot_privileged,
                auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_user_amba_prot_secure,
                auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_user_amba_prot_fetch,
  output [7:0]  auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_mask,
  output [63:0] auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_data,
  output        auto_coupler_to_bus_named_mbus_bus_xing_out_d_ready,
                auto_coherent_jbar_anon_in_a_ready,
                auto_coherent_jbar_anon_in_b_valid,
  output [1:0]  auto_coherent_jbar_anon_in_b_bits_param,
  output [31:0] auto_coherent_jbar_anon_in_b_bits_address,
  output        auto_coherent_jbar_anon_in_c_ready,
                auto_coherent_jbar_anon_in_d_valid,
  output [2:0]  auto_coherent_jbar_anon_in_d_bits_opcode,
  output [1:0]  auto_coherent_jbar_anon_in_d_bits_param,
  output [2:0]  auto_coherent_jbar_anon_in_d_bits_size,
  output [4:0]  auto_coherent_jbar_anon_in_d_bits_source,
  output [1:0]  auto_coherent_jbar_anon_in_d_bits_sink,
  output        auto_coherent_jbar_anon_in_d_bits_denied,
  output [63:0] auto_coherent_jbar_anon_in_d_bits_data,
  output        auto_coherent_jbar_anon_in_d_bits_corrupt,
                auto_coh_clock_groups_out_member_mbus_0_clock,
                auto_coh_clock_groups_out_member_mbus_0_reset
);

  wire        _binder_auto_in_a_ready;
  wire        _binder_auto_in_d_valid;
  wire [2:0]  _binder_auto_in_d_bits_opcode;
  wire [2:0]  _binder_auto_in_d_bits_size;
  wire [6:0]  _binder_auto_in_d_bits_source;
  wire        _binder_auto_in_d_bits_denied;
  wire [63:0] _binder_auto_in_d_bits_data;
  wire        _binder_auto_in_d_bits_corrupt;
  wire        _broadcast_1_auto_out_a_valid;
  wire [2:0]  _broadcast_1_auto_out_a_bits_opcode;
  wire [2:0]  _broadcast_1_auto_out_a_bits_param;
  wire [2:0]  _broadcast_1_auto_out_a_bits_size;
  wire [6:0]  _broadcast_1_auto_out_a_bits_source;
  wire [31:0] _broadcast_1_auto_out_a_bits_address;
  wire        _broadcast_1_auto_out_a_bits_user_amba_prot_bufferable;
  wire        _broadcast_1_auto_out_a_bits_user_amba_prot_modifiable;
  wire        _broadcast_1_auto_out_a_bits_user_amba_prot_readalloc;
  wire        _broadcast_1_auto_out_a_bits_user_amba_prot_writealloc;
  wire        _broadcast_1_auto_out_a_bits_user_amba_prot_privileged;
  wire        _broadcast_1_auto_out_a_bits_user_amba_prot_secure;
  wire        _broadcast_1_auto_out_a_bits_user_amba_prot_fetch;
  wire [7:0]  _broadcast_1_auto_out_a_bits_mask;
  wire [63:0] _broadcast_1_auto_out_a_bits_data;
  wire        _broadcast_1_auto_out_d_ready;
  TLBroadcast broadcast_1 (
    .clock
      (auto_coh_clock_groups_in_member_coh_0_clock),
    .reset
      (auto_coh_clock_groups_in_member_coh_0_reset),
    .auto_in_a_valid                           (auto_coherent_jbar_anon_in_a_valid),
    .auto_in_a_bits_opcode                     (auto_coherent_jbar_anon_in_a_bits_opcode),
    .auto_in_a_bits_param                      (auto_coherent_jbar_anon_in_a_bits_param),
    .auto_in_a_bits_size                       (auto_coherent_jbar_anon_in_a_bits_size),
    .auto_in_a_bits_source                     (auto_coherent_jbar_anon_in_a_bits_source),
    .auto_in_a_bits_address
      (auto_coherent_jbar_anon_in_a_bits_address),
    .auto_in_a_bits_user_amba_prot_bufferable
      (auto_coherent_jbar_anon_in_a_bits_user_amba_prot_bufferable),
    .auto_in_a_bits_user_amba_prot_modifiable
      (auto_coherent_jbar_anon_in_a_bits_user_amba_prot_modifiable),
    .auto_in_a_bits_user_amba_prot_readalloc
      (auto_coherent_jbar_anon_in_a_bits_user_amba_prot_readalloc),
    .auto_in_a_bits_user_amba_prot_writealloc
      (auto_coherent_jbar_anon_in_a_bits_user_amba_prot_writealloc),
    .auto_in_a_bits_user_amba_prot_privileged
      (auto_coherent_jbar_anon_in_a_bits_user_amba_prot_privileged),
    .auto_in_a_bits_user_amba_prot_secure
      (auto_coherent_jbar_anon_in_a_bits_user_amba_prot_secure),
    .auto_in_a_bits_user_amba_prot_fetch
      (auto_coherent_jbar_anon_in_a_bits_user_amba_prot_fetch),
    .auto_in_a_bits_mask                       (auto_coherent_jbar_anon_in_a_bits_mask),
    .auto_in_a_bits_data                       (auto_coherent_jbar_anon_in_a_bits_data),
    .auto_in_a_bits_corrupt
      (auto_coherent_jbar_anon_in_a_bits_corrupt),
    .auto_in_b_ready                           (auto_coherent_jbar_anon_in_b_ready),
    .auto_in_c_valid                           (auto_coherent_jbar_anon_in_c_valid),
    .auto_in_c_bits_opcode                     (auto_coherent_jbar_anon_in_c_bits_opcode),
    .auto_in_c_bits_param                      (auto_coherent_jbar_anon_in_c_bits_param),
    .auto_in_c_bits_size                       (auto_coherent_jbar_anon_in_c_bits_size),
    .auto_in_c_bits_source                     (auto_coherent_jbar_anon_in_c_bits_source),
    .auto_in_c_bits_address
      (auto_coherent_jbar_anon_in_c_bits_address),
    .auto_in_c_bits_data                       (auto_coherent_jbar_anon_in_c_bits_data),
    .auto_in_c_bits_corrupt
      (auto_coherent_jbar_anon_in_c_bits_corrupt),
    .auto_in_d_ready                           (auto_coherent_jbar_anon_in_d_ready),
    .auto_in_e_valid                           (auto_coherent_jbar_anon_in_e_valid),
    .auto_in_e_bits_sink                       (auto_coherent_jbar_anon_in_e_bits_sink),
    .auto_out_a_ready                          (_binder_auto_in_a_ready),
    .auto_out_d_valid                          (_binder_auto_in_d_valid),
    .auto_out_d_bits_opcode                    (_binder_auto_in_d_bits_opcode),
    .auto_out_d_bits_size                      (_binder_auto_in_d_bits_size),
    .auto_out_d_bits_source                    (_binder_auto_in_d_bits_source),
    .auto_out_d_bits_denied                    (_binder_auto_in_d_bits_denied),
    .auto_out_d_bits_data                      (_binder_auto_in_d_bits_data),
    .auto_out_d_bits_corrupt                   (_binder_auto_in_d_bits_corrupt),
    .auto_in_a_ready                           (auto_coherent_jbar_anon_in_a_ready),
    .auto_in_b_valid                           (auto_coherent_jbar_anon_in_b_valid),
    .auto_in_b_bits_param                      (auto_coherent_jbar_anon_in_b_bits_param),
    .auto_in_b_bits_address
      (auto_coherent_jbar_anon_in_b_bits_address),
    .auto_in_c_ready                           (auto_coherent_jbar_anon_in_c_ready),
    .auto_in_d_valid                           (auto_coherent_jbar_anon_in_d_valid),
    .auto_in_d_bits_opcode                     (auto_coherent_jbar_anon_in_d_bits_opcode),
    .auto_in_d_bits_param                      (auto_coherent_jbar_anon_in_d_bits_param),
    .auto_in_d_bits_size                       (auto_coherent_jbar_anon_in_d_bits_size),
    .auto_in_d_bits_source                     (auto_coherent_jbar_anon_in_d_bits_source),
    .auto_in_d_bits_sink                       (auto_coherent_jbar_anon_in_d_bits_sink),
    .auto_in_d_bits_denied                     (auto_coherent_jbar_anon_in_d_bits_denied),
    .auto_in_d_bits_data                       (auto_coherent_jbar_anon_in_d_bits_data),
    .auto_in_d_bits_corrupt
      (auto_coherent_jbar_anon_in_d_bits_corrupt),
    .auto_out_a_valid                          (_broadcast_1_auto_out_a_valid),
    .auto_out_a_bits_opcode                    (_broadcast_1_auto_out_a_bits_opcode),
    .auto_out_a_bits_param                     (_broadcast_1_auto_out_a_bits_param),
    .auto_out_a_bits_size                      (_broadcast_1_auto_out_a_bits_size),
    .auto_out_a_bits_source                    (_broadcast_1_auto_out_a_bits_source),
    .auto_out_a_bits_address                   (_broadcast_1_auto_out_a_bits_address),
    .auto_out_a_bits_user_amba_prot_bufferable
      (_broadcast_1_auto_out_a_bits_user_amba_prot_bufferable),
    .auto_out_a_bits_user_amba_prot_modifiable
      (_broadcast_1_auto_out_a_bits_user_amba_prot_modifiable),
    .auto_out_a_bits_user_amba_prot_readalloc
      (_broadcast_1_auto_out_a_bits_user_amba_prot_readalloc),
    .auto_out_a_bits_user_amba_prot_writealloc
      (_broadcast_1_auto_out_a_bits_user_amba_prot_writealloc),
    .auto_out_a_bits_user_amba_prot_privileged
      (_broadcast_1_auto_out_a_bits_user_amba_prot_privileged),
    .auto_out_a_bits_user_amba_prot_secure
      (_broadcast_1_auto_out_a_bits_user_amba_prot_secure),
    .auto_out_a_bits_user_amba_prot_fetch
      (_broadcast_1_auto_out_a_bits_user_amba_prot_fetch),
    .auto_out_a_bits_mask                      (_broadcast_1_auto_out_a_bits_mask),
    .auto_out_a_bits_data                      (_broadcast_1_auto_out_a_bits_data),
    .auto_out_d_ready                          (_broadcast_1_auto_out_d_ready)
  );
  BankBinder binder (
    .clock
      (auto_coh_clock_groups_in_member_coh_0_clock),
    .reset
      (auto_coh_clock_groups_in_member_coh_0_reset),
    .auto_in_a_valid                           (_broadcast_1_auto_out_a_valid),
    .auto_in_a_bits_opcode                     (_broadcast_1_auto_out_a_bits_opcode),
    .auto_in_a_bits_param                      (_broadcast_1_auto_out_a_bits_param),
    .auto_in_a_bits_size                       (_broadcast_1_auto_out_a_bits_size),
    .auto_in_a_bits_source                     (_broadcast_1_auto_out_a_bits_source),
    .auto_in_a_bits_address                    (_broadcast_1_auto_out_a_bits_address),
    .auto_in_a_bits_user_amba_prot_bufferable
      (_broadcast_1_auto_out_a_bits_user_amba_prot_bufferable),
    .auto_in_a_bits_user_amba_prot_modifiable
      (_broadcast_1_auto_out_a_bits_user_amba_prot_modifiable),
    .auto_in_a_bits_user_amba_prot_readalloc
      (_broadcast_1_auto_out_a_bits_user_amba_prot_readalloc),
    .auto_in_a_bits_user_amba_prot_writealloc
      (_broadcast_1_auto_out_a_bits_user_amba_prot_writealloc),
    .auto_in_a_bits_user_amba_prot_privileged
      (_broadcast_1_auto_out_a_bits_user_amba_prot_privileged),
    .auto_in_a_bits_user_amba_prot_secure
      (_broadcast_1_auto_out_a_bits_user_amba_prot_secure),
    .auto_in_a_bits_user_amba_prot_fetch
      (_broadcast_1_auto_out_a_bits_user_amba_prot_fetch),
    .auto_in_a_bits_mask                       (_broadcast_1_auto_out_a_bits_mask),
    .auto_in_a_bits_data                       (_broadcast_1_auto_out_a_bits_data),
    .auto_in_d_ready                           (_broadcast_1_auto_out_d_ready),
    .auto_out_a_ready
      (auto_coupler_to_bus_named_mbus_bus_xing_out_a_ready),
    .auto_out_d_valid
      (auto_coupler_to_bus_named_mbus_bus_xing_out_d_valid),
    .auto_out_d_bits_opcode
      (auto_coupler_to_bus_named_mbus_bus_xing_out_d_bits_opcode),
    .auto_out_d_bits_size
      (auto_coupler_to_bus_named_mbus_bus_xing_out_d_bits_size),
    .auto_out_d_bits_source
      (auto_coupler_to_bus_named_mbus_bus_xing_out_d_bits_source),
    .auto_out_d_bits_denied
      (auto_coupler_to_bus_named_mbus_bus_xing_out_d_bits_denied),
    .auto_out_d_bits_data
      (auto_coupler_to_bus_named_mbus_bus_xing_out_d_bits_data),
    .auto_out_d_bits_corrupt
      (auto_coupler_to_bus_named_mbus_bus_xing_out_d_bits_corrupt),
    .auto_in_a_ready                           (_binder_auto_in_a_ready),
    .auto_in_d_valid                           (_binder_auto_in_d_valid),
    .auto_in_d_bits_opcode                     (_binder_auto_in_d_bits_opcode),
    .auto_in_d_bits_size                       (_binder_auto_in_d_bits_size),
    .auto_in_d_bits_source                     (_binder_auto_in_d_bits_source),
    .auto_in_d_bits_denied                     (_binder_auto_in_d_bits_denied),
    .auto_in_d_bits_data                       (_binder_auto_in_d_bits_data),
    .auto_in_d_bits_corrupt                    (_binder_auto_in_d_bits_corrupt),
    .auto_out_a_valid
      (auto_coupler_to_bus_named_mbus_bus_xing_out_a_valid),
    .auto_out_a_bits_opcode
      (auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_opcode),
    .auto_out_a_bits_param
      (auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_param),
    .auto_out_a_bits_size
      (auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_size),
    .auto_out_a_bits_source
      (auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_source),
    .auto_out_a_bits_address
      (auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_address),
    .auto_out_a_bits_user_amba_prot_bufferable
      (auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_user_amba_prot_bufferable),
    .auto_out_a_bits_user_amba_prot_modifiable
      (auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_user_amba_prot_modifiable),
    .auto_out_a_bits_user_amba_prot_readalloc
      (auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_user_amba_prot_readalloc),
    .auto_out_a_bits_user_amba_prot_writealloc
      (auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_user_amba_prot_writealloc),
    .auto_out_a_bits_user_amba_prot_privileged
      (auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_user_amba_prot_privileged),
    .auto_out_a_bits_user_amba_prot_secure
      (auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_user_amba_prot_secure),
    .auto_out_a_bits_user_amba_prot_fetch
      (auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_user_amba_prot_fetch),
    .auto_out_a_bits_mask
      (auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_mask),
    .auto_out_a_bits_data
      (auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_data),
    .auto_out_d_ready
      (auto_coupler_to_bus_named_mbus_bus_xing_out_d_ready)
  );
  assign auto_coh_clock_groups_out_member_mbus_0_clock =
    auto_coh_clock_groups_in_member_coh_1_clock;
  assign auto_coh_clock_groups_out_member_mbus_0_reset =
    auto_coh_clock_groups_in_member_coh_1_reset;
endmodule

module TLMonitor_22(
  input        clock,
               reset,
               io_in_a_ready,
               io_in_a_valid,
  input [2:0]  io_in_a_bits_opcode,
               io_in_a_bits_param,
  input [3:0]  io_in_a_bits_size,
  input        io_in_a_bits_source,
  input [31:0] io_in_a_bits_address,
  input [7:0]  io_in_a_bits_mask,
  input        io_in_b_ready,
               io_in_b_valid,
  input [2:0]  io_in_b_bits_opcode,
  input [1:0]  io_in_b_bits_param,
  input [3:0]  io_in_b_bits_size,
  input        io_in_b_bits_source,
  input [31:0] io_in_b_bits_address,
  input [7:0]  io_in_b_bits_mask,
  input        io_in_b_bits_corrupt,
               io_in_c_ready,
               io_in_c_valid,
  input [2:0]  io_in_c_bits_opcode,
               io_in_c_bits_param,
  input [3:0]  io_in_c_bits_size,
  input        io_in_c_bits_source,
  input [31:0] io_in_c_bits_address,
  input        io_in_d_ready,
               io_in_d_valid,
  input [2:0]  io_in_d_bits_opcode,
  input [1:0]  io_in_d_bits_param,
  input [3:0]  io_in_d_bits_size,
  input        io_in_d_bits_source,
  input [1:0]  io_in_d_bits_sink,
  input        io_in_d_bits_denied,
               io_in_d_bits_corrupt,
               io_in_e_ready,
               io_in_e_valid,
  input [1:0]  io_in_e_bits_sink
);

  wire [31:0] _plusarg_reader_1_out;
  wire [31:0] _plusarg_reader_out;
  wire [26:0] _GEN = 27'hFFF << io_in_a_bits_size;
  wire [26:0] _GEN_0 = 27'hFFF << io_in_c_bits_size;
  wire        _GEN_1 = io_in_a_ready & io_in_a_valid;
  reg  [8:0]  a_first_counter;
  reg  [2:0]  opcode;
  reg  [2:0]  param;
  reg  [3:0]  size;
  reg         source;
  reg  [31:0] address;
  wire        _GEN_2 = io_in_d_ready & io_in_d_valid;
  reg  [8:0]  d_first_counter;
  reg  [2:0]  opcode_1;
  reg  [1:0]  param_1;
  reg  [3:0]  size_1;
  reg         source_1;
  reg  [1:0]  sink;
  reg         denied;
  reg  [8:0]  b_first_counter;
  reg  [2:0]  opcode_2;
  reg  [1:0]  param_2;
  reg  [3:0]  size_2;
  reg         source_2;
  reg  [31:0] address_1;
  wire        _GEN_3 = io_in_c_ready & io_in_c_valid;
  reg  [8:0]  c_first_counter;
  reg  [2:0]  opcode_3;
  reg  [2:0]  param_3;
  reg  [3:0]  size_3;
  reg         source_3;
  reg  [31:0] address_2;
  reg  [1:0]  inflight;
  reg  [7:0]  inflight_opcodes;
  reg  [15:0] inflight_sizes;
  reg  [8:0]  a_first_counter_1;
  wire        a_first_1 = a_first_counter_1 == 9'h0;
  reg  [8:0]  d_first_counter_1;
  wire        d_first_1 = d_first_counter_1 == 9'h0;
  wire [1:0]  _GEN_4 = {1'h0, io_in_a_bits_source};
  wire [1:0]  _GEN_5 = 2'h1 << _GEN_4;
  wire        _GEN_6 = _GEN_1 & a_first_1;
  wire        d_release_ack = io_in_d_bits_opcode == 3'h6;
  wire [1:0]  _GEN_7 = {1'h0, io_in_d_bits_source};
  wire [1:0]  _GEN_8 = 2'h1 << _GEN_7;
  reg  [31:0] watchdog;
  reg  [1:0]  inflight_1;
  reg  [15:0] inflight_sizes_1;
  reg  [8:0]  c_first_counter_1;
  wire        c_first_1 = c_first_counter_1 == 9'h0;
  reg  [8:0]  d_first_counter_2;
  wire        d_first_2 = d_first_counter_2 == 9'h0;
  wire        _GEN_9 = io_in_c_bits_opcode[2] & io_in_c_bits_opcode[1];
  wire [1:0]  _GEN_10 = {1'h0, io_in_c_bits_source};
  wire [1:0]  _GEN_11 = 2'h1 << _GEN_10;
  wire        _GEN_12 = _GEN_3 & c_first_1 & _GEN_9;
  reg  [31:0] watchdog_1;
  reg  [3:0]  inflight_2;
  reg  [8:0]  d_first_counter_3;
  wire        d_first_3 = d_first_counter_3 == 9'h0;
  wire        _GEN_13 =
    _GEN_2 & d_first_3 & io_in_d_bits_opcode[2] & ~(io_in_d_bits_opcode[1]);
  wire [3:0]  _GEN_14 = {2'h0, io_in_d_bits_sink};
  wire        _GEN_15 = io_in_e_ready & io_in_e_valid;
  wire [3:0]  _GEN_16 = {2'h0, io_in_e_bits_sink};
  wire [3:0]  _GEN_17 = (_GEN_13 ? 4'h1 << _GEN_14 : 4'h0) | inflight_2;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      automatic logic [7:0][2:0] _GEN_18 =
        '{3'h4, 3'h5, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic [7:0][2:0] _GEN_19 =
        '{3'h4, 3'h4, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic [11:0]     _GEN_20 = io_in_a_bits_address[11:0] & ~(_GEN[11:0]);
      automatic logic            _GEN_21 = io_in_a_bits_size > 4'h2;
      automatic logic            mask_size = io_in_a_bits_size[1:0] == 2'h2;
      automatic logic            mask_acc =
        _GEN_21 | mask_size & ~(io_in_a_bits_address[2]);
      automatic logic            mask_acc_1 =
        _GEN_21 | mask_size & io_in_a_bits_address[2];
      automatic logic            mask_size_1 = io_in_a_bits_size[1:0] == 2'h1;
      automatic logic            mask_eq_2 =
        ~(io_in_a_bits_address[2]) & ~(io_in_a_bits_address[1]);
      automatic logic            mask_acc_2 = mask_acc | mask_size_1 & mask_eq_2;
      automatic logic            mask_eq_3 =
        ~(io_in_a_bits_address[2]) & io_in_a_bits_address[1];
      automatic logic            mask_acc_3 = mask_acc | mask_size_1 & mask_eq_3;
      automatic logic            mask_eq_4 =
        io_in_a_bits_address[2] & ~(io_in_a_bits_address[1]);
      automatic logic            mask_acc_4 = mask_acc_1 | mask_size_1 & mask_eq_4;
      automatic logic            mask_eq_5 =
        io_in_a_bits_address[2] & io_in_a_bits_address[1];
      automatic logic            mask_acc_5 = mask_acc_1 | mask_size_1 & mask_eq_5;
      automatic logic [7:0]      mask =
        {mask_acc_5 | mask_eq_5 & io_in_a_bits_address[0],
         mask_acc_5 | mask_eq_5 & ~(io_in_a_bits_address[0]),
         mask_acc_4 | mask_eq_4 & io_in_a_bits_address[0],
         mask_acc_4 | mask_eq_4 & ~(io_in_a_bits_address[0]),
         mask_acc_3 | mask_eq_3 & io_in_a_bits_address[0],
         mask_acc_3 | mask_eq_3 & ~(io_in_a_bits_address[0]),
         mask_acc_2 | mask_eq_2 & io_in_a_bits_address[0],
         mask_acc_2 | mask_eq_2 & ~(io_in_a_bits_address[0])};
      automatic logic            _GEN_22 = io_in_a_bits_size < 4'hD;
      automatic logic            _GEN_23 = io_in_a_bits_size < 4'h7;
      automatic logic            _GEN_24 = io_in_a_bits_address[31:28] == 4'h8;
      automatic logic            _GEN_25 = _GEN_22 & _GEN_23 & _GEN_24;
      automatic logic            _GEN_26 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_27 = io_in_a_bits_address[31:12] == 20'h0;
      automatic logic            _GEN_28 =
        {io_in_a_bits_address[31:14], ~(io_in_a_bits_address[13:12])} == 20'h0;
      automatic logic            _GEN_29 =
        {io_in_a_bits_address[31:17], ~(io_in_a_bits_address[16])} == 16'h0;
      automatic logic            _GEN_30 =
        {io_in_a_bits_address[31:26], io_in_a_bits_address[25:16] ^ 10'h200} == 16'h0;
      automatic logic            _GEN_31 =
        {io_in_a_bits_address[31:28], ~(io_in_a_bits_address[27:26])} == 6'h0;
      automatic logic            _GEN_32 =
        {io_in_a_bits_address[31], ~(io_in_a_bits_address[30:29])} == 3'h0;
      automatic logic            _GEN_33 = _GEN_27 | _GEN_28;
      automatic logic            _GEN_34 =
        ~io_in_a_bits_source & io_in_a_bits_size == 4'h6 & _GEN_22
        & (_GEN_33 | _GEN_29 | _GEN_30 | _GEN_31 | _GEN_32 | _GEN_24);
      automatic logic            _GEN_35 = io_in_a_bits_param > 3'h2;
      automatic logic            _GEN_36 = io_in_a_bits_mask != 8'hFF;
      automatic logic            _GEN_37 =
        io_in_a_valid & (&io_in_a_bits_opcode) & ~reset;
      automatic logic            _GEN_38 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_39 = _GEN_22 & _GEN_28;
      automatic logic            _GEN_40 = io_in_a_bits_mask != mask;
      automatic logic            _GEN_41 =
        _GEN_22
        & (_GEN_39 | _GEN_23 & (_GEN_27 | _GEN_30 | _GEN_31 | _GEN_24)
           | io_in_a_bits_size < 4'h9 & _GEN_32);
      automatic logic            _GEN_42 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_43 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_44 =
        _GEN_22 & io_in_a_bits_size < 4'h4 & (_GEN_33 | _GEN_30 | _GEN_31);
      automatic logic            _GEN_45 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_46 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h3 & ~reset;
      automatic logic            _GEN_47 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h5 & ~reset;
      automatic logic            _GEN_48 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_49 = io_in_d_bits_size < 4'h3;
      automatic logic            _GEN_50 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_51 = io_in_d_bits_param == 2'h2;
      automatic logic            _GEN_52 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h5 & ~reset;
      automatic logic            _GEN_53 = ~io_in_d_bits_denied | io_in_d_bits_corrupt;
      automatic logic            _GEN_54 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_55 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_56 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_57 = io_in_b_bits_address[31:12] == 20'h0;
      automatic logic            _GEN_58 =
        {io_in_b_bits_address[31:14], ~(io_in_b_bits_address[13:12])} == 20'h0;
      automatic logic            _GEN_59 =
        {io_in_b_bits_address[31:17], ~(io_in_b_bits_address[16])} == 16'h0;
      automatic logic            _GEN_60 =
        {io_in_b_bits_address[31:26], io_in_b_bits_address[25:16] ^ 10'h200} == 16'h0;
      automatic logic            _GEN_61 =
        {io_in_b_bits_address[31:28], ~(io_in_b_bits_address[27:26])} == 6'h0;
      automatic logic            _GEN_62 =
        {io_in_b_bits_address[31], ~(io_in_b_bits_address[30:29])} == 3'h0;
      automatic logic            _GEN_63 = io_in_b_bits_address[31:28] == 4'h8;
      automatic logic            address_ok =
        _GEN_57 | _GEN_58 | _GEN_59 | _GEN_60 | _GEN_61 | _GEN_62 | _GEN_63;
      automatic logic [26:0]     _GEN_64 = 27'hFFF << io_in_b_bits_size;
      automatic logic [11:0]     _GEN_65 = io_in_b_bits_address[11:0] & ~(_GEN_64[11:0]);
      automatic logic            _GEN_66 = io_in_b_bits_size > 4'h2;
      automatic logic            mask_size_3 = io_in_b_bits_size[1:0] == 2'h2;
      automatic logic            mask_acc_14 =
        _GEN_66 | mask_size_3 & ~(io_in_b_bits_address[2]);
      automatic logic            mask_acc_15 =
        _GEN_66 | mask_size_3 & io_in_b_bits_address[2];
      automatic logic            mask_size_4 = io_in_b_bits_size[1:0] == 2'h1;
      automatic logic            mask_eq_16 =
        ~(io_in_b_bits_address[2]) & ~(io_in_b_bits_address[1]);
      automatic logic            mask_acc_16 = mask_acc_14 | mask_size_4 & mask_eq_16;
      automatic logic            mask_eq_17 =
        ~(io_in_b_bits_address[2]) & io_in_b_bits_address[1];
      automatic logic            mask_acc_17 = mask_acc_14 | mask_size_4 & mask_eq_17;
      automatic logic            mask_eq_18 =
        io_in_b_bits_address[2] & ~(io_in_b_bits_address[1]);
      automatic logic            mask_acc_18 = mask_acc_15 | mask_size_4 & mask_eq_18;
      automatic logic            mask_eq_19 =
        io_in_b_bits_address[2] & io_in_b_bits_address[1];
      automatic logic            mask_acc_19 = mask_acc_15 | mask_size_4 & mask_eq_19;
      automatic logic [7:0]      mask_1 =
        {mask_acc_19 | mask_eq_19 & io_in_b_bits_address[0],
         mask_acc_19 | mask_eq_19 & ~(io_in_b_bits_address[0]),
         mask_acc_18 | mask_eq_18 & io_in_b_bits_address[0],
         mask_acc_18 | mask_eq_18 & ~(io_in_b_bits_address[0]),
         mask_acc_17 | mask_eq_17 & io_in_b_bits_address[0],
         mask_acc_17 | mask_eq_17 & ~(io_in_b_bits_address[0]),
         mask_acc_16 | mask_eq_16 & io_in_b_bits_address[0],
         mask_acc_16 | mask_eq_16 & ~(io_in_b_bits_address[0])};
      automatic logic            _GEN_67 =
        io_in_b_valid & io_in_b_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_68 = io_in_b_bits_mask != mask_1;
      automatic logic            _GEN_69 =
        io_in_b_valid & io_in_b_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_70 =
        io_in_b_valid & io_in_b_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_71 =
        io_in_b_valid & io_in_b_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_72 =
        io_in_b_valid & io_in_b_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_73 =
        io_in_b_valid & io_in_b_bits_opcode == 3'h3 & ~reset;
      automatic logic            _GEN_74 =
        io_in_b_valid & io_in_b_bits_opcode == 3'h5 & ~reset;
      automatic logic [11:0]     _GEN_75 = io_in_c_bits_address[11:0] & ~(_GEN_0[11:0]);
      automatic logic            _GEN_76 = io_in_c_bits_address[31:12] == 20'h0;
      automatic logic            _GEN_77 =
        {io_in_c_bits_address[31:14], ~(io_in_c_bits_address[13:12])} == 20'h0;
      automatic logic            _GEN_78 =
        {io_in_c_bits_address[31:17], ~(io_in_c_bits_address[16])} == 16'h0;
      automatic logic            _GEN_79 =
        {io_in_c_bits_address[31:26], io_in_c_bits_address[25:16] ^ 10'h200} == 16'h0;
      automatic logic            _GEN_80 =
        {io_in_c_bits_address[31:28], ~(io_in_c_bits_address[27:26])} == 6'h0;
      automatic logic            _GEN_81 =
        {io_in_c_bits_address[31], ~(io_in_c_bits_address[30:29])} == 3'h0;
      automatic logic            _GEN_82 = io_in_c_bits_address[31:28] == 4'h8;
      automatic logic            address_ok_1 =
        _GEN_76 | _GEN_77 | _GEN_78 | _GEN_79 | _GEN_80 | _GEN_81 | _GEN_82;
      automatic logic            _GEN_83 = io_in_c_bits_opcode == 3'h4;
      automatic logic            _GEN_84 = io_in_c_valid & _GEN_83 & ~reset;
      automatic logic            _GEN_85 = io_in_c_bits_size < 4'h3;
      automatic logic            _GEN_86 = io_in_c_bits_opcode == 3'h5;
      automatic logic            _GEN_87 = io_in_c_valid & _GEN_86 & ~reset;
      automatic logic            _GEN_88 = io_in_c_bits_size < 4'hD;
      automatic logic            _GEN_89 = _GEN_88 & io_in_c_bits_size < 4'h7 & _GEN_82;
      automatic logic            _GEN_90 =
        io_in_c_valid & io_in_c_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_91 =
        ~io_in_c_bits_source & io_in_c_bits_size == 4'h6 & _GEN_88
        & (_GEN_76 | _GEN_77 | _GEN_78 | _GEN_79 | _GEN_80 | _GEN_81 | _GEN_82);
      automatic logic            _GEN_92 =
        io_in_c_valid & (&io_in_c_bits_opcode) & ~reset;
      automatic logic            _GEN_93 =
        io_in_c_valid & io_in_c_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_94 =
        io_in_c_valid & io_in_c_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_95 =
        io_in_c_valid & io_in_c_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_96 = io_in_a_valid & (|a_first_counter) & ~reset;
      automatic logic            _GEN_97 = io_in_d_valid & (|d_first_counter) & ~reset;
      automatic logic            _GEN_98 = io_in_b_valid & (|b_first_counter) & ~reset;
      automatic logic            _GEN_99 = io_in_c_valid & (|c_first_counter) & ~reset;
      automatic logic [7:0]      _GEN_100 =
        inflight_opcodes >> {5'h0, io_in_d_bits_source, 2'h0};
      automatic logic [15:0]     _GEN_101 = {12'h0, io_in_d_bits_source, 3'h0};
      automatic logic            _GEN_102 = io_in_a_valid & a_first_1;
      automatic logic [1:0]      a_set_wo_ready = _GEN_102 ? _GEN_5 : 2'h0;
      automatic logic            _GEN_103 = io_in_d_valid & d_first_1;
      automatic logic            _GEN_104 = _GEN_103 & ~d_release_ack;
      automatic logic            _GEN_105 = io_in_a_bits_source == io_in_d_bits_source;
      automatic logic            same_cycle_resp = _GEN_102 & _GEN_105;
      automatic logic            _GEN_106 = _GEN_104 & same_cycle_resp & ~reset;
      automatic logic            _GEN_107 = _GEN_104 & ~same_cycle_resp & ~reset;
      automatic logic [7:0]      _GEN_108 = {4'h0, io_in_d_bits_size};
      automatic logic            _GEN_109 = io_in_c_valid & c_first_1 & _GEN_9;
      automatic logic [1:0]      c_set_wo_ready = _GEN_109 ? _GEN_11 : 2'h0;
      automatic logic            _GEN_110 = io_in_d_valid & d_first_2;
      automatic logic            _GEN_111 = _GEN_110 & d_release_ack;
      automatic logic            _GEN_112 = io_in_c_bits_source == io_in_d_bits_source;
      automatic logic            same_cycle_resp_1 = _GEN_109 & _GEN_112;
      automatic logic [1:0]      _GEN_113 = inflight >> _GEN_4;
      automatic logic [1:0]      _GEN_114 = inflight >> _GEN_7;
      automatic logic [15:0]     _GEN_115 = inflight_sizes >> _GEN_101;
      automatic logic [1:0]      _GEN_116 = inflight_1 >> _GEN_10;
      automatic logic [1:0]      _GEN_117 = inflight_1 >> _GEN_7;
      automatic logic [15:0]     _GEN_118 = inflight_sizes_1 >> _GEN_101;
      automatic logic [3:0]      _GEN_119 = inflight_2 >> _GEN_14;
      automatic logic [3:0]      _GEN_120 = _GEN_17 >> _GEN_16;
      if (_GEN_26 & ~_GEN_25) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_26 & ~_GEN_34) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_26 & ~_GEN_21) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_26 & (|_GEN_20)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_26 & _GEN_35) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock carries invalid grow param (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_26 & _GEN_36) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & ~_GEN_25) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & ~_GEN_34) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & ~_GEN_21) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & (|_GEN_20)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & _GEN_35) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm carries invalid grow param (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & ~(|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_37 & _GEN_36) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_38 & ~_GEN_22) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_38
          & ~(_GEN_39 | _GEN_23
              & (_GEN_27 | _GEN_29 | _GEN_30 | _GEN_31 | _GEN_32 | _GEN_24))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_38 & (|_GEN_20)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get address not aligned to size (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_38 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get carries invalid param (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_38 & _GEN_40) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get contains invalid mask (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & ~_GEN_41) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & (|_GEN_20)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull address not aligned to size (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull carries invalid param (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_42 & _GEN_40) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull contains invalid mask (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & ~_GEN_41) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & (|_GEN_20)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial address not aligned to size (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial carries invalid param (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & (|(io_in_a_bits_mask & ~mask))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial contains invalid mask (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_45 & ~_GEN_44) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_45 & (|_GEN_20)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_45 & io_in_a_bits_param > 3'h4) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_45 & _GEN_40) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_46 & ~_GEN_44) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_46 & (|_GEN_20)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical address not aligned to size (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_46 & io_in_a_bits_param[2]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical carries invalid opcode param (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_46 & _GEN_40) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical contains invalid mask (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_47 & ~(_GEN_22 & _GEN_39)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_47 & (|_GEN_20)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint address not aligned to size (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_47 & (|(io_in_a_bits_param[2:1]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint carries invalid opcode param (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_47 & _GEN_40) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint contains invalid mask (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & ~reset & (&io_in_d_bits_opcode)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel has invalid opcode (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_48 & _GEN_49) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_48 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_48 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck is corrupt (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_48 & io_in_d_bits_denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck is denied (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_50 & _GEN_49) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant smaller than a beat (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_50 & (&io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid cap param (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_50 & _GEN_51) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries toN param (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_50 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant is corrupt (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_52 & _GEN_49) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData smaller than a beat (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_52 & (&io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid cap param (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_52 & _GEN_51) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries toN param (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_52 & ~_GEN_53) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData is denied but not corrupt (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_54 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck carries invalid param (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_54 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck is corrupt (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_55 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData carries invalid param (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_55 & ~_GEN_53) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData is denied but not corrupt (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_56 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck carries invalid param (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_56 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck is corrupt (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_b_valid & ~reset & (&io_in_b_bits_opcode)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel has invalid opcode (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_67
          & ~(~io_in_b_bits_source & io_in_b_bits_size == 4'h6 & io_in_b_bits_size < 4'hD
              & (_GEN_57 | _GEN_58 | _GEN_59 | _GEN_60 | _GEN_61 | _GEN_62
                 | _GEN_63))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel carries Probe type which is unexpected using diplomatic parameters (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_67 & ~address_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel Probe carries unmanaged address (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_67 & (|_GEN_65)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel Probe address not aligned to size (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_67 & (&io_in_b_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel Probe carries invalid cap param (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_67 & _GEN_68) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel Probe contains invalid mask (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_67 & io_in_b_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel Probe is corrupt (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_69) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel carries Get type which is unexpected using diplomatic parameters (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_69 & ~address_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel Get carries unmanaged address (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_69 & (|_GEN_65)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel Get address not aligned to size (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_69 & (|io_in_b_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel Get carries invalid param (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_69 & _GEN_68) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel Get contains invalid mask (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_69 & io_in_b_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel Get is corrupt (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_70) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel carries PutFull type which is unexpected using diplomatic parameters (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_70 & ~address_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel PutFull carries unmanaged address (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_70 & (|_GEN_65)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel PutFull address not aligned to size (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_70 & (|io_in_b_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel PutFull carries invalid param (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_70 & _GEN_68) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel PutFull contains invalid mask (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_71) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_71 & ~address_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel PutPartial carries unmanaged address (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_71 & (|_GEN_65)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel PutPartial address not aligned to size (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_71 & (|io_in_b_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel PutPartial carries invalid param (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_71 & (|(io_in_b_bits_mask & ~mask_1))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel PutPartial contains invalid mask (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_72) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel carries Arithmetic type unsupported by master (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_72 & ~address_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel Arithmetic carries unmanaged address (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_72 & (|_GEN_65)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel Arithmetic address not aligned to size (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_72 & _GEN_68) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel Arithmetic contains invalid mask (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_73) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel carries Logical type unsupported by client (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_73 & ~address_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel Logical carries unmanaged address (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_73 & (|_GEN_65)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel Logical address not aligned to size (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_73 & _GEN_68) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel Logical contains invalid mask (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_74) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel carries Hint type unsupported by client (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_74 & ~address_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel Hint carries unmanaged address (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_74 & (|_GEN_65)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel Hint address not aligned to size (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_74 & _GEN_68) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel Hint contains invalid mask (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_74 & io_in_b_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel Hint is corrupt (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_84 & ~address_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ProbeAck carries unmanaged address (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_84 & _GEN_85) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ProbeAck smaller than a beat (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_84 & (|_GEN_75)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ProbeAck address not aligned to size (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_84 & (&(io_in_c_bits_param[2:1]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ProbeAck carries invalid report param (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_87 & ~address_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ProbeAckData carries unmanaged address (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_87 & _GEN_85) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ProbeAckData smaller than a beat (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_87 & (|_GEN_75)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ProbeAckData address not aligned to size (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_87 & (&(io_in_c_bits_param[2:1]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ProbeAckData carries invalid report param (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_90 & ~_GEN_89) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel carries Release type unsupported by manager (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_90 & ~_GEN_91) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel carries Release from a client which does not support Probe (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_90 & _GEN_85) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel Release smaller than a beat (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_90 & (|_GEN_75)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel Release address not aligned to size (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_90 & (&(io_in_c_bits_param[2:1]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel Release carries invalid report param (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_92 & ~_GEN_89) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel carries ReleaseData type unsupported by manager (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_92 & ~_GEN_91) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel carries Release from a client which does not support Probe (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_92 & _GEN_85) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ReleaseData smaller than a beat (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_92 & (|_GEN_75)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ReleaseData address not aligned to size (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_92 & (&(io_in_c_bits_param[2:1]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ReleaseData carries invalid report param (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_93 & ~address_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel AccessAck carries unmanaged address (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_93 & (|_GEN_75)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel AccessAck address not aligned to size (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_93 & (|io_in_c_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel AccessAck carries invalid param (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_94 & ~address_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel AccessAckData carries unmanaged address (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_94 & (|_GEN_75)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel AccessAckData address not aligned to size (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_94 & (|io_in_c_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel AccessAckData carries invalid param (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_95 & ~address_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel HintAck carries unmanaged address (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_95 & (|_GEN_75)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel HintAck address not aligned to size (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_95 & (|io_in_c_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel HintAck carries invalid param (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_96 & io_in_a_bits_opcode != opcode) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel opcode changed within multibeat operation (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_96 & io_in_a_bits_param != param) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel param changed within multibeat operation (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_96 & io_in_a_bits_size != size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel size changed within multibeat operation (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_96 & io_in_a_bits_source != source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel source changed within multibeat operation (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_96 & io_in_a_bits_address != address) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel address changed with multibeat operation (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_97 & io_in_d_bits_opcode != opcode_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel opcode changed within multibeat operation (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_97 & io_in_d_bits_param != param_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel param changed within multibeat operation (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_97 & io_in_d_bits_size != size_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel size changed within multibeat operation (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_97 & io_in_d_bits_source != source_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel source changed within multibeat operation (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_97 & io_in_d_bits_sink != sink) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel sink changed with multibeat operation (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_97 & io_in_d_bits_denied != denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel denied changed with multibeat operation (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_98 & io_in_b_bits_opcode != opcode_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel opcode changed within multibeat operation (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_98 & io_in_b_bits_param != param_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel param changed within multibeat operation (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_98 & io_in_b_bits_size != size_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel size changed within multibeat operation (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_98 & io_in_b_bits_source != source_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel source changed within multibeat operation (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_98 & io_in_b_bits_address != address_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel addresss changed with multibeat operation (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_99 & io_in_c_bits_opcode != opcode_3) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel opcode changed within multibeat operation (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_99 & io_in_c_bits_param != param_3) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel param changed within multibeat operation (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_99 & io_in_c_bits_size != size_3) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel size changed within multibeat operation (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_99 & io_in_c_bits_source != source_3) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel source changed within multibeat operation (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_99 & io_in_c_bits_address != address_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel address changed with multibeat operation (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_6 & ~reset & _GEN_113[0]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel re-used a source ID (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_104 & ~reset & ~(_GEN_114[0] | same_cycle_resp)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_106
          & ~(io_in_d_bits_opcode == _GEN_19[io_in_a_bits_opcode]
              | io_in_d_bits_opcode == _GEN_18[io_in_a_bits_opcode])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_106 & io_in_a_bits_size != io_in_d_bits_size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_107
          & ~(io_in_d_bits_opcode == _GEN_19[_GEN_100[3:1]]
              | io_in_d_bits_opcode == _GEN_18[_GEN_100[3:1]])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_107 & _GEN_108 != {1'h0, _GEN_115[7:1]}) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_103 & a_first_1 & io_in_a_valid & _GEN_105 & ~d_release_ack & ~reset
          & ~(~io_in_d_ready | io_in_a_ready)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ready check\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(a_set_wo_ready != (_GEN_104 ? _GEN_8 : 2'h0)
              | a_set_wo_ready == 2'h0)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' and 'D' concurrent, despite minlatency > 0 (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight == 2'h0 | _plusarg_reader_out == 32'h0
              | watchdog < _plusarg_reader_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_12 & ~reset & _GEN_116[0]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel re-used a source ID (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_111 & ~reset & ~(_GEN_117[0] | same_cycle_resp_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_111 & same_cycle_resp_1 & ~reset
          & io_in_d_bits_size != io_in_c_bits_size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_111 & ~same_cycle_resp_1 & ~reset
          & _GEN_108 != {1'h0, _GEN_118[7:1]}) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_110 & c_first_1 & io_in_c_valid & _GEN_112 & d_release_ack
          & ~(_GEN_83 | _GEN_86) & ~reset & ~(~io_in_d_ready | io_in_c_ready)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ready check\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if ((|c_set_wo_ready) & ~reset & c_set_wo_ready == (_GEN_111 ? _GEN_8 : 2'h0)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' and 'D' concurrent, despite minlatency > 0 (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight_1 == 2'h0 | _plusarg_reader_1_out == 32'h0
              | watchdog_1 < _plusarg_reader_1_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_13 & ~reset & _GEN_119[0]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel re-used a sink ID (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & ~reset & ~(_GEN_120[0])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'E' channel acknowledged for nothing inflight (connected at src/main/scala/rocket/HellaCache.scala:280:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    automatic logic b_first_done;
    b_first_done = io_in_b_ready & io_in_b_valid;
    if (reset) begin
      a_first_counter <= 9'h0;
      d_first_counter <= 9'h0;
      b_first_counter <= 9'h0;
      c_first_counter <= 9'h0;
      inflight <= 2'h0;
      inflight_opcodes <= 8'h0;
      inflight_sizes <= 16'h0;
      a_first_counter_1 <= 9'h0;
      d_first_counter_1 <= 9'h0;
      watchdog <= 32'h0;
      inflight_1 <= 2'h0;
      inflight_sizes_1 <= 16'h0;
      c_first_counter_1 <= 9'h0;
      d_first_counter_2 <= 9'h0;
      watchdog_1 <= 32'h0;
      inflight_2 <= 4'h0;
      d_first_counter_3 <= 9'h0;
    end
    else begin
      automatic logic        _GEN_121 = _GEN_2 & d_first_1 & ~d_release_ack;
      automatic logic [30:0] _GEN_122 = 31'hFF << {27'h0, io_in_d_bits_source, 3'h0};
      automatic logic        _GEN_123 = _GEN_2 & d_first_2 & d_release_ack;
      automatic logic [30:0] _GEN_124 = 31'hF << {28'h0, io_in_d_bits_source, 2'h0};
      automatic logic [18:0] _GEN_125 =
        {15'h0, _GEN_6 ? {io_in_a_bits_opcode, 1'h1} : 4'h0}
        << {16'h0, io_in_a_bits_source, 2'h0};
      automatic logic [19:0] _GEN_126 =
        {15'h0, _GEN_6 ? {io_in_a_bits_size, 1'h1} : 5'h0}
        << {16'h0, io_in_a_bits_source, 3'h0};
      automatic logic [19:0] _GEN_127 =
        {15'h0, _GEN_12 ? {io_in_c_bits_size, 1'h1} : 5'h0}
        << {16'h0, io_in_c_bits_source, 3'h0};
      if (_GEN_1) begin
        if (|a_first_counter)
          a_first_counter <= a_first_counter - 9'h1;
        else if (io_in_a_bits_opcode[2])
          a_first_counter <= 9'h0;
        else
          a_first_counter <= ~(_GEN[11:3]);
        if (a_first_1) begin
          if (io_in_a_bits_opcode[2])
            a_first_counter_1 <= 9'h0;
          else
            a_first_counter_1 <= ~(_GEN[11:3]);
        end
        else
          a_first_counter_1 <= a_first_counter_1 - 9'h1;
      end
      if (_GEN_2) begin
        automatic logic [26:0] _GEN_128 = 27'hFFF << io_in_d_bits_size;
        if (|d_first_counter)
          d_first_counter <= d_first_counter - 9'h1;
        else if (io_in_d_bits_opcode[0])
          d_first_counter <= ~(_GEN_128[11:3]);
        else
          d_first_counter <= 9'h0;
        if (d_first_1) begin
          if (io_in_d_bits_opcode[0])
            d_first_counter_1 <= ~(_GEN_128[11:3]);
          else
            d_first_counter_1 <= 9'h0;
        end
        else
          d_first_counter_1 <= d_first_counter_1 - 9'h1;
        if (d_first_2) begin
          if (io_in_d_bits_opcode[0])
            d_first_counter_2 <= ~(_GEN_128[11:3]);
          else
            d_first_counter_2 <= 9'h0;
        end
        else
          d_first_counter_2 <= d_first_counter_2 - 9'h1;
        if (d_first_3) begin
          if (io_in_d_bits_opcode[0])
            d_first_counter_3 <= ~(_GEN_128[11:3]);
          else
            d_first_counter_3 <= 9'h0;
        end
        else
          d_first_counter_3 <= d_first_counter_3 - 9'h1;
      end
      if (b_first_done) begin
        if (|b_first_counter)
          b_first_counter <= b_first_counter - 9'h1;
        else
          b_first_counter <= 9'h0;
      end
      if (_GEN_3) begin
        if (|c_first_counter)
          c_first_counter <= c_first_counter - 9'h1;
        else if (io_in_c_bits_opcode[0])
          c_first_counter <= ~(_GEN_0[11:3]);
        else
          c_first_counter <= 9'h0;
        if (c_first_1) begin
          if (io_in_c_bits_opcode[0])
            c_first_counter_1 <= ~(_GEN_0[11:3]);
          else
            c_first_counter_1 <= 9'h0;
        end
        else
          c_first_counter_1 <= c_first_counter_1 - 9'h1;
      end
      inflight <= (inflight | (_GEN_6 ? _GEN_5 : 2'h0)) & ~(_GEN_121 ? _GEN_8 : 2'h0);
      inflight_opcodes <=
        (inflight_opcodes | (_GEN_6 ? _GEN_125[7:0] : 8'h0))
        & ~(_GEN_121 ? _GEN_124[7:0] : 8'h0);
      inflight_sizes <=
        (inflight_sizes | (_GEN_6 ? _GEN_126[15:0] : 16'h0))
        & ~(_GEN_121 ? _GEN_122[15:0] : 16'h0);
      if (_GEN_1 | _GEN_2)
        watchdog <= 32'h0;
      else
        watchdog <= watchdog + 32'h1;
      inflight_1 <=
        (inflight_1 | (_GEN_12 ? _GEN_11 : 2'h0)) & ~(_GEN_123 ? _GEN_8 : 2'h0);
      inflight_sizes_1 <=
        (inflight_sizes_1 | (_GEN_12 ? _GEN_127[15:0] : 16'h0))
        & ~(_GEN_123 ? _GEN_122[15:0] : 16'h0);
      if (_GEN_3 | _GEN_2)
        watchdog_1 <= 32'h0;
      else
        watchdog_1 <= watchdog_1 + 32'h1;
      inflight_2 <= _GEN_17 & ~(_GEN_15 ? 4'h1 << _GEN_16 : 4'h0);
    end
    if (_GEN_1 & ~(|a_first_counter)) begin
      opcode <= io_in_a_bits_opcode;
      param <= io_in_a_bits_param;
      size <= io_in_a_bits_size;
      source <= io_in_a_bits_source;
      address <= io_in_a_bits_address;
    end
    if (_GEN_2 & ~(|d_first_counter)) begin
      opcode_1 <= io_in_d_bits_opcode;
      param_1 <= io_in_d_bits_param;
      size_1 <= io_in_d_bits_size;
      source_1 <= io_in_d_bits_source;
      sink <= io_in_d_bits_sink;
      denied <= io_in_d_bits_denied;
    end
    if (b_first_done & ~(|b_first_counter)) begin
      opcode_2 <= io_in_b_bits_opcode;
      param_2 <= io_in_b_bits_param;
      size_2 <= io_in_b_bits_size;
      source_2 <= io_in_b_bits_source;
      address_1 <= io_in_b_bits_address;
    end
    if (_GEN_3 & ~(|c_first_counter)) begin
      opcode_3 <= io_in_c_bits_opcode;
      param_3 <= io_in_c_bits_param;
      size_3 <= io_in_c_bits_size;
      source_3 <= io_in_c_bits_source;
      address_2 <= io_in_c_bits_address;
    end
  end // always @(posedge)
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader (
    .out (_plusarg_reader_out)
  );
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader_1 (
    .out (_plusarg_reader_1_out)
  );
endmodule

module TLMonitor_23(
  input        clock,
               reset,
               io_in_a_ready,
               io_in_a_valid,
  input [31:0] io_in_a_bits_address,
  input        io_in_d_valid,
  input [2:0]  io_in_d_bits_opcode,
  input [1:0]  io_in_d_bits_param,
  input [3:0]  io_in_d_bits_size,
  input [1:0]  io_in_d_bits_sink,
  input        io_in_d_bits_denied,
               io_in_d_bits_corrupt
);

  wire [31:0] _plusarg_reader_1_out;
  wire [31:0] _plusarg_reader_out;
  wire        _GEN = io_in_a_ready & io_in_a_valid;
  reg  [8:0]  a_first_counter;
  reg  [2:0]  opcode;
  reg  [2:0]  param;
  reg  [3:0]  size;
  reg         source;
  reg  [31:0] address;
  reg  [8:0]  d_first_counter;
  reg  [2:0]  opcode_1;
  reg  [1:0]  param_1;
  reg  [3:0]  size_1;
  reg         source_1;
  reg  [1:0]  sink;
  reg         denied;
  reg  [1:0]  inflight;
  reg  [3:0]  inflight_opcodes;
  reg  [7:0]  inflight_sizes;
  reg  [8:0]  a_first_counter_1;
  wire        a_first_1 = a_first_counter_1 == 9'h0;
  reg  [8:0]  d_first_counter_1;
  wire        d_first_1 = d_first_counter_1 == 9'h0;
  wire        a_set = _GEN & a_first_1;
  wire        d_release_ack = io_in_d_bits_opcode == 3'h6;
  wire        _GEN_0 = io_in_d_valid & d_first_1;
  wire        d_clr_wo_ready = _GEN_0 & ~d_release_ack;
  reg  [31:0] watchdog;
  reg  [1:0]  inflight_1;
  reg  [7:0]  inflight_sizes_1;
  reg  [8:0]  d_first_counter_2;
  wire        d_first_2 = d_first_counter_2 == 9'h0;
  wire        d_clr_1 = io_in_d_valid & d_first_2 & d_release_ack;
  reg  [31:0] watchdog_1;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      automatic logic [7:0][2:0] _GEN_1 =
        '{3'h4, 3'h5, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic [7:0][2:0] _GEN_2 =
        '{3'h4, 3'h4, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic            _GEN_3 = io_in_a_valid & ~reset;
      automatic logic            _GEN_4 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_5 = io_in_d_bits_size < 4'h3;
      automatic logic            _GEN_6 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_7 = io_in_d_bits_param == 2'h2;
      automatic logic            _GEN_8 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h5 & ~reset;
      automatic logic            _GEN_9 = ~io_in_d_bits_denied | io_in_d_bits_corrupt;
      automatic logic            _GEN_10 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_11 = io_in_d_bits_opcode == 3'h1;
      automatic logic            _GEN_12 = io_in_d_valid & _GEN_11 & ~reset;
      automatic logic            _GEN_13 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_14 = io_in_a_valid & (|a_first_counter) & ~reset;
      automatic logic            _GEN_15 = io_in_d_valid & (|d_first_counter) & ~reset;
      automatic logic            a_set_wo_ready = io_in_a_valid & a_first_1;
      automatic logic            _GEN_16 = d_clr_wo_ready & a_set_wo_ready & ~reset;
      automatic logic            _GEN_17 = d_clr_wo_ready & ~a_set_wo_ready & ~reset;
      automatic logic [7:0]      _GEN_18 = {4'h0, io_in_d_bits_size};
      automatic logic            _GEN_19 = d_clr_1 & ~reset;
      if (_GEN_3
          & ~({io_in_a_bits_address[31:14], ~(io_in_a_bits_address[13:12])} == 20'h0
              | io_in_a_bits_address[31:12] == 20'h0
              | {io_in_a_bits_address[31:17], ~(io_in_a_bits_address[16])} == 16'h0
              | {io_in_a_bits_address[31:26],
                 io_in_a_bits_address[25:16] ^ 10'h200} == 16'h0
              | {io_in_a_bits_address[31:28], ~(io_in_a_bits_address[27:26])} == 6'h0
              | {io_in_a_bits_address[31], ~(io_in_a_bits_address[30:29])} == 3'h0
              | io_in_a_bits_address[31:28] == 4'h8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at src/main/scala/rocket/Frontend.scala:394:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_3 & (|(io_in_a_bits_address[5:0]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get address not aligned to size (connected at src/main/scala/rocket/Frontend.scala:394:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & ~reset & (&io_in_d_bits_opcode)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel has invalid opcode (connected at src/main/scala/rocket/Frontend.scala:394:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_4 & _GEN_5) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at src/main/scala/rocket/Frontend.scala:394:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_4 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at src/main/scala/rocket/Frontend.scala:394:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_4 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck is corrupt (connected at src/main/scala/rocket/Frontend.scala:394:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_4 & io_in_d_bits_denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck is denied (connected at src/main/scala/rocket/Frontend.scala:394:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_6 & _GEN_5) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant smaller than a beat (connected at src/main/scala/rocket/Frontend.scala:394:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_6 & (&io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid cap param (connected at src/main/scala/rocket/Frontend.scala:394:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_6 & _GEN_7) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries toN param (connected at src/main/scala/rocket/Frontend.scala:394:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_6 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant is corrupt (connected at src/main/scala/rocket/Frontend.scala:394:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_8 & _GEN_5) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData smaller than a beat (connected at src/main/scala/rocket/Frontend.scala:394:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_8 & (&io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid cap param (connected at src/main/scala/rocket/Frontend.scala:394:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_8 & _GEN_7) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries toN param (connected at src/main/scala/rocket/Frontend.scala:394:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_8 & ~_GEN_9) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData is denied but not corrupt (connected at src/main/scala/rocket/Frontend.scala:394:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_10 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck carries invalid param (connected at src/main/scala/rocket/Frontend.scala:394:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_10 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck is corrupt (connected at src/main/scala/rocket/Frontend.scala:394:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_12 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData carries invalid param (connected at src/main/scala/rocket/Frontend.scala:394:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_12 & ~_GEN_9) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData is denied but not corrupt (connected at src/main/scala/rocket/Frontend.scala:394:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_13 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck carries invalid param (connected at src/main/scala/rocket/Frontend.scala:394:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_13 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck is corrupt (connected at src/main/scala/rocket/Frontend.scala:394:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & opcode != 3'h4) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel opcode changed within multibeat operation (connected at src/main/scala/rocket/Frontend.scala:394:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & (|param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel param changed within multibeat operation (connected at src/main/scala/rocket/Frontend.scala:394:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & size != 4'h6) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel size changed within multibeat operation (connected at src/main/scala/rocket/Frontend.scala:394:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel source changed within multibeat operation (connected at src/main/scala/rocket/Frontend.scala:394:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & io_in_a_bits_address != address) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel address changed with multibeat operation (connected at src/main/scala/rocket/Frontend.scala:394:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & io_in_d_bits_opcode != opcode_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel opcode changed within multibeat operation (connected at src/main/scala/rocket/Frontend.scala:394:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & io_in_d_bits_param != param_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel param changed within multibeat operation (connected at src/main/scala/rocket/Frontend.scala:394:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & io_in_d_bits_size != size_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel size changed within multibeat operation (connected at src/main/scala/rocket/Frontend.scala:394:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & source_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel source changed within multibeat operation (connected at src/main/scala/rocket/Frontend.scala:394:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & io_in_d_bits_sink != sink) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel sink changed with multibeat operation (connected at src/main/scala/rocket/Frontend.scala:394:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & io_in_d_bits_denied != denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel denied changed with multibeat operation (connected at src/main/scala/rocket/Frontend.scala:394:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (a_set & ~reset & inflight[0]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel re-used a source ID (connected at src/main/scala/rocket/Frontend.scala:394:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (d_clr_wo_ready & ~reset & ~(inflight[0] | a_set_wo_ready)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/rocket/Frontend.scala:394:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16 & ~_GEN_11) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/rocket/Frontend.scala:394:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16 & io_in_d_bits_size != 4'h6) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/rocket/Frontend.scala:394:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17
          & ~(io_in_d_bits_opcode == _GEN_2[inflight_opcodes[3:1]]
              | io_in_d_bits_opcode == _GEN_1[inflight_opcodes[3:1]])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/rocket/Frontend.scala:394:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & _GEN_18 != {1'h0, inflight_sizes[7:1]}) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/rocket/Frontend.scala:394:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_0 & a_first_1 & io_in_a_valid & ~d_release_ack & ~reset
          & ~io_in_a_ready) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ready check\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(a_set_wo_ready != d_clr_wo_ready | ~a_set_wo_ready)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' and 'D' concurrent, despite minlatency > 0 (connected at src/main/scala/rocket/Frontend.scala:394:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight == 2'h0 | _plusarg_reader_out == 32'h0
              | watchdog < _plusarg_reader_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/rocket/Frontend.scala:394:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & ~(inflight_1[0])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/rocket/Frontend.scala:394:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & _GEN_18 != {1'h0, inflight_sizes_1[7:1]}) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/rocket/Frontend.scala:394:21)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight_1 == 2'h0 | _plusarg_reader_1_out == 32'h0
              | watchdog_1 < _plusarg_reader_1_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/rocket/Frontend.scala:394:21)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    automatic logic _GEN_20 = _GEN & ~(|a_first_counter);
    automatic logic _GEN_21 = io_in_d_valid & ~(|d_first_counter);
    if (reset) begin
      a_first_counter <= 9'h0;
      d_first_counter <= 9'h0;
      inflight <= 2'h0;
      inflight_opcodes <= 4'h0;
      inflight_sizes <= 8'h0;
      a_first_counter_1 <= 9'h0;
      d_first_counter_1 <= 9'h0;
      watchdog <= 32'h0;
      inflight_1 <= 2'h0;
      inflight_sizes_1 <= 8'h0;
      d_first_counter_2 <= 9'h0;
      watchdog_1 <= 32'h0;
    end
    else begin
      if (_GEN) begin
        if (|a_first_counter)
          a_first_counter <= a_first_counter - 9'h1;
        else
          a_first_counter <= 9'h0;
        if (a_first_1)
          a_first_counter_1 <= 9'h0;
        else
          a_first_counter_1 <= a_first_counter_1 - 9'h1;
      end
      if (io_in_d_valid) begin
        automatic logic [26:0] _GEN_22 = 27'hFFF << io_in_d_bits_size;
        if (|d_first_counter)
          d_first_counter <= d_first_counter - 9'h1;
        else if (io_in_d_bits_opcode[0])
          d_first_counter <= ~(_GEN_22[11:3]);
        else
          d_first_counter <= 9'h0;
        if (d_first_1) begin
          if (io_in_d_bits_opcode[0])
            d_first_counter_1 <= ~(_GEN_22[11:3]);
          else
            d_first_counter_1 <= 9'h0;
        end
        else
          d_first_counter_1 <= d_first_counter_1 - 9'h1;
        if (d_first_2) begin
          if (io_in_d_bits_opcode[0])
            d_first_counter_2 <= ~(_GEN_22[11:3]);
          else
            d_first_counter_2 <= 9'h0;
        end
        else
          d_first_counter_2 <= d_first_counter_2 - 9'h1;
        watchdog_1 <= 32'h0;
      end
      else
        watchdog_1 <= watchdog_1 + 32'h1;
      inflight <= {1'h0, (inflight[0] | a_set) & ~d_clr_wo_ready};
      inflight_opcodes <=
        (inflight_opcodes | (a_set ? 4'h9 : 4'h0)) & ~{4{d_clr_wo_ready}};
      inflight_sizes <=
        (inflight_sizes | (a_set ? {3'h0, a_set ? 5'hD : 5'h0} : 8'h0))
        & ~{8{d_clr_wo_ready}};
      if (_GEN | io_in_d_valid)
        watchdog <= 32'h0;
      else
        watchdog <= watchdog + 32'h1;
      inflight_1 <= {1'h0, inflight_1[0] & ~d_clr_1};
      inflight_sizes_1 <= inflight_sizes_1 & ~{8{d_clr_1}};
    end
    if (_GEN_20) begin
      opcode <= 3'h4;
      param <= 3'h0;
      size <= 4'h6;
      address <= io_in_a_bits_address;
    end
    source <= ~_GEN_20 & source;
    if (_GEN_21) begin
      opcode_1 <= io_in_d_bits_opcode;
      param_1 <= io_in_d_bits_param;
      size_1 <= io_in_d_bits_size;
      sink <= io_in_d_bits_sink;
      denied <= io_in_d_bits_denied;
    end
    source_1 <= ~_GEN_21 & source_1;
  end // always @(posedge)
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader (
    .out (_plusarg_reader_out)
  );
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader_1 (
    .out (_plusarg_reader_1_out)
  );
endmodule

module TLXbar_MasterXbar_RocketTile_i2_o1_a32d64s2k2z4c(
  input         clock,
                reset,
                auto_anon_in_1_a_valid,
  input  [31:0] auto_anon_in_1_a_bits_address,
  input         auto_anon_in_0_a_valid,
  input  [2:0]  auto_anon_in_0_a_bits_opcode,
                auto_anon_in_0_a_bits_param,
  input  [3:0]  auto_anon_in_0_a_bits_size,
  input         auto_anon_in_0_a_bits_source,
  input  [31:0] auto_anon_in_0_a_bits_address,
  input  [7:0]  auto_anon_in_0_a_bits_mask,
  input  [63:0] auto_anon_in_0_a_bits_data,
  input         auto_anon_in_0_b_ready,
                auto_anon_in_0_c_valid,
  input  [2:0]  auto_anon_in_0_c_bits_opcode,
                auto_anon_in_0_c_bits_param,
  input  [3:0]  auto_anon_in_0_c_bits_size,
  input         auto_anon_in_0_c_bits_source,
  input  [31:0] auto_anon_in_0_c_bits_address,
  input  [63:0] auto_anon_in_0_c_bits_data,
  input         auto_anon_in_0_d_ready,
                auto_anon_in_0_e_valid,
  input  [1:0]  auto_anon_in_0_e_bits_sink,
  input         auto_anon_out_a_ready,
                auto_anon_out_b_valid,
  input  [2:0]  auto_anon_out_b_bits_opcode,
  input  [1:0]  auto_anon_out_b_bits_param,
  input  [3:0]  auto_anon_out_b_bits_size,
  input  [1:0]  auto_anon_out_b_bits_source,
  input  [31:0] auto_anon_out_b_bits_address,
  input  [7:0]  auto_anon_out_b_bits_mask,
  input         auto_anon_out_b_bits_corrupt,
                auto_anon_out_c_ready,
                auto_anon_out_d_valid,
  input  [2:0]  auto_anon_out_d_bits_opcode,
  input  [1:0]  auto_anon_out_d_bits_param,
  input  [3:0]  auto_anon_out_d_bits_size,
  input  [1:0]  auto_anon_out_d_bits_source,
                auto_anon_out_d_bits_sink,
  input         auto_anon_out_d_bits_denied,
  input  [63:0] auto_anon_out_d_bits_data,
  input         auto_anon_out_d_bits_corrupt,
                auto_anon_out_e_ready,
  output        auto_anon_in_1_a_ready,
                auto_anon_in_1_d_valid,
  output [2:0]  auto_anon_in_1_d_bits_opcode,
  output [3:0]  auto_anon_in_1_d_bits_size,
  output [63:0] auto_anon_in_1_d_bits_data,
  output        auto_anon_in_1_d_bits_corrupt,
                auto_anon_in_0_a_ready,
                auto_anon_in_0_b_valid,
  output [1:0]  auto_anon_in_0_b_bits_param,
  output [3:0]  auto_anon_in_0_b_bits_size,
  output        auto_anon_in_0_b_bits_source,
  output [31:0] auto_anon_in_0_b_bits_address,
  output        auto_anon_in_0_c_ready,
                auto_anon_in_0_d_valid,
  output [2:0]  auto_anon_in_0_d_bits_opcode,
  output [1:0]  auto_anon_in_0_d_bits_param,
  output [3:0]  auto_anon_in_0_d_bits_size,
  output        auto_anon_in_0_d_bits_source,
  output [1:0]  auto_anon_in_0_d_bits_sink,
  output        auto_anon_in_0_d_bits_denied,
  output [63:0] auto_anon_in_0_d_bits_data,
  output        auto_anon_in_0_e_ready,
                auto_anon_out_a_valid,
  output [2:0]  auto_anon_out_a_bits_opcode,
                auto_anon_out_a_bits_param,
  output [3:0]  auto_anon_out_a_bits_size,
  output [1:0]  auto_anon_out_a_bits_source,
  output [31:0] auto_anon_out_a_bits_address,
  output [7:0]  auto_anon_out_a_bits_mask,
  output [63:0] auto_anon_out_a_bits_data,
  output        auto_anon_out_b_ready,
                auto_anon_out_c_valid,
  output [2:0]  auto_anon_out_c_bits_opcode,
                auto_anon_out_c_bits_param,
  output [3:0]  auto_anon_out_c_bits_size,
  output [1:0]  auto_anon_out_c_bits_source,
  output [31:0] auto_anon_out_c_bits_address,
  output [63:0] auto_anon_out_c_bits_data,
  output        auto_anon_out_d_ready,
                auto_anon_out_e_valid,
  output [1:0]  auto_anon_out_e_bits_sink
);

  wire       requestDOI_0_1 = auto_anon_out_d_bits_source == 2'h2;
  wire       portsBIO_filtered_0_valid =
    auto_anon_out_b_valid & ~(auto_anon_out_b_bits_source[1]);
  wire       portsDIO_filtered_0_valid =
    auto_anon_out_d_valid & ~(auto_anon_out_d_bits_source[1]);
  wire       portsDIO_filtered_1_valid = auto_anon_out_d_valid & requestDOI_0_1;
  reg  [8:0] beatsLeft;
  wire       idle = beatsLeft == 9'h0;
  wire [1:0] readys_valid = {auto_anon_in_1_a_valid, auto_anon_in_0_a_valid};
  reg  [1:0] readys_mask;
  wire [1:0] _GEN = readys_valid & ~readys_mask;
  wire [1:0] readys_readys =
    ~({readys_mask[1], _GEN[1] | readys_mask[0]}
      & ({_GEN[0], auto_anon_in_1_a_valid} | _GEN));
  wire       winner_0 = readys_readys[0] & auto_anon_in_0_a_valid;
  wire       winner_1 = readys_readys[1] & auto_anon_in_1_a_valid;
  wire       _GEN_0 = auto_anon_in_0_a_valid | auto_anon_in_1_a_valid;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (~reset & ~(~winner_0 | ~winner_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Arbiter.scala:77 assert((prefixOR zip winner) map { case (p,w) => !p || !w } reduce {_ && _})\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_GEN_0 | winner_0 | winner_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Arbiter.scala:79 assert (!valids.reduce(_||_) || winner.reduce(_||_))\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  reg        state_0;
  reg        state_1;
  wire       muxState_0 = idle ? winner_0 : state_0;
  wire       muxState_1 = idle ? winner_1 : state_1;
  wire       portsAOI_filtered_0_ready =
    auto_anon_out_a_ready & (idle ? readys_readys[0] : state_0);
  wire       portsAOI_filtered_1_0_ready =
    auto_anon_out_a_ready & (idle ? readys_readys[1] : state_1);
  wire       out_0_a_valid =
    idle ? _GEN_0 : state_0 & auto_anon_in_0_a_valid | state_1 & auto_anon_in_1_a_valid;
  always @(posedge clock) begin
    if (reset) begin
      beatsLeft <= 9'h0;
      readys_mask <= 2'h3;
      state_0 <= 1'h0;
      state_1 <= 1'h0;
    end
    else begin
      automatic logic latch = idle & auto_anon_out_a_ready;
      if (latch) begin
        if (winner_0 & ~(auto_anon_in_0_a_bits_opcode[2])) begin
          automatic logic [26:0] _GEN_1 = 27'hFFF << auto_anon_in_0_a_bits_size;
          beatsLeft <= ~(_GEN_1[11:3]);
        end
        else
          beatsLeft <= 9'h0;
      end
      else
        beatsLeft <= beatsLeft - {8'h0, auto_anon_out_a_ready & out_0_a_valid};
      if (latch & (|readys_valid)) begin
        automatic logic [1:0] _GEN_2 = readys_readys & readys_valid;
        readys_mask <= _GEN_2 | {_GEN_2[0], 1'h0};
      end
      if (idle) begin
        state_0 <= winner_0;
        state_1 <= winner_1;
      end
    end
  end // always @(posedge)
  TLMonitor_22 monitor (
    .clock                (clock),
    .reset                (reset),
    .io_in_a_ready        (portsAOI_filtered_0_ready),
    .io_in_a_valid        (auto_anon_in_0_a_valid),
    .io_in_a_bits_opcode  (auto_anon_in_0_a_bits_opcode),
    .io_in_a_bits_param   (auto_anon_in_0_a_bits_param),
    .io_in_a_bits_size    (auto_anon_in_0_a_bits_size),
    .io_in_a_bits_source  (auto_anon_in_0_a_bits_source),
    .io_in_a_bits_address (auto_anon_in_0_a_bits_address),
    .io_in_a_bits_mask    (auto_anon_in_0_a_bits_mask),
    .io_in_b_ready        (auto_anon_in_0_b_ready),
    .io_in_b_valid        (portsBIO_filtered_0_valid),
    .io_in_b_bits_opcode  (auto_anon_out_b_bits_opcode),
    .io_in_b_bits_param   (auto_anon_out_b_bits_param),
    .io_in_b_bits_size    (auto_anon_out_b_bits_size),
    .io_in_b_bits_source  (auto_anon_out_b_bits_source[0]),
    .io_in_b_bits_address (auto_anon_out_b_bits_address),
    .io_in_b_bits_mask    (auto_anon_out_b_bits_mask),
    .io_in_b_bits_corrupt (auto_anon_out_b_bits_corrupt),
    .io_in_c_ready        (auto_anon_out_c_ready),
    .io_in_c_valid        (auto_anon_in_0_c_valid),
    .io_in_c_bits_opcode  (auto_anon_in_0_c_bits_opcode),
    .io_in_c_bits_param   (auto_anon_in_0_c_bits_param),
    .io_in_c_bits_size    (auto_anon_in_0_c_bits_size),
    .io_in_c_bits_source  (auto_anon_in_0_c_bits_source),
    .io_in_c_bits_address (auto_anon_in_0_c_bits_address),
    .io_in_d_ready        (auto_anon_in_0_d_ready),
    .io_in_d_valid        (portsDIO_filtered_0_valid),
    .io_in_d_bits_opcode  (auto_anon_out_d_bits_opcode),
    .io_in_d_bits_param   (auto_anon_out_d_bits_param),
    .io_in_d_bits_size    (auto_anon_out_d_bits_size),
    .io_in_d_bits_source  (auto_anon_out_d_bits_source[0]),
    .io_in_d_bits_sink    (auto_anon_out_d_bits_sink),
    .io_in_d_bits_denied  (auto_anon_out_d_bits_denied),
    .io_in_d_bits_corrupt (auto_anon_out_d_bits_corrupt),
    .io_in_e_ready        (auto_anon_out_e_ready),
    .io_in_e_valid        (auto_anon_in_0_e_valid),
    .io_in_e_bits_sink    (auto_anon_in_0_e_bits_sink)
  );
  TLMonitor_23 monitor_1 (
    .clock                (clock),
    .reset                (reset),
    .io_in_a_ready        (portsAOI_filtered_1_0_ready),
    .io_in_a_valid        (auto_anon_in_1_a_valid),
    .io_in_a_bits_address (auto_anon_in_1_a_bits_address),
    .io_in_d_valid        (portsDIO_filtered_1_valid),
    .io_in_d_bits_opcode  (auto_anon_out_d_bits_opcode),
    .io_in_d_bits_param   (auto_anon_out_d_bits_param),
    .io_in_d_bits_size    (auto_anon_out_d_bits_size),
    .io_in_d_bits_sink    (auto_anon_out_d_bits_sink),
    .io_in_d_bits_denied  (auto_anon_out_d_bits_denied),
    .io_in_d_bits_corrupt (auto_anon_out_d_bits_corrupt)
  );
  assign auto_anon_in_1_a_ready = portsAOI_filtered_1_0_ready;
  assign auto_anon_in_1_d_valid = portsDIO_filtered_1_valid;
  assign auto_anon_in_1_d_bits_opcode = auto_anon_out_d_bits_opcode;
  assign auto_anon_in_1_d_bits_size = auto_anon_out_d_bits_size;
  assign auto_anon_in_1_d_bits_data = auto_anon_out_d_bits_data;
  assign auto_anon_in_1_d_bits_corrupt = auto_anon_out_d_bits_corrupt;
  assign auto_anon_in_0_a_ready = portsAOI_filtered_0_ready;
  assign auto_anon_in_0_b_valid = portsBIO_filtered_0_valid;
  assign auto_anon_in_0_b_bits_param = auto_anon_out_b_bits_param;
  assign auto_anon_in_0_b_bits_size = auto_anon_out_b_bits_size;
  assign auto_anon_in_0_b_bits_source = auto_anon_out_b_bits_source[0];
  assign auto_anon_in_0_b_bits_address = auto_anon_out_b_bits_address;
  assign auto_anon_in_0_c_ready = auto_anon_out_c_ready;
  assign auto_anon_in_0_d_valid = portsDIO_filtered_0_valid;
  assign auto_anon_in_0_d_bits_opcode = auto_anon_out_d_bits_opcode;
  assign auto_anon_in_0_d_bits_param = auto_anon_out_d_bits_param;
  assign auto_anon_in_0_d_bits_size = auto_anon_out_d_bits_size;
  assign auto_anon_in_0_d_bits_source = auto_anon_out_d_bits_source[0];
  assign auto_anon_in_0_d_bits_sink = auto_anon_out_d_bits_sink;
  assign auto_anon_in_0_d_bits_denied = auto_anon_out_d_bits_denied;
  assign auto_anon_in_0_d_bits_data = auto_anon_out_d_bits_data;
  assign auto_anon_in_0_e_ready = auto_anon_out_e_ready;
  assign auto_anon_out_a_valid = out_0_a_valid;
  assign auto_anon_out_a_bits_opcode =
    (muxState_0 ? auto_anon_in_0_a_bits_opcode : 3'h0) | {muxState_1, 2'h0};
  assign auto_anon_out_a_bits_param = muxState_0 ? auto_anon_in_0_a_bits_param : 3'h0;
  assign auto_anon_out_a_bits_size =
    (muxState_0 ? auto_anon_in_0_a_bits_size : 4'h0) | (muxState_1 ? 4'h6 : 4'h0);
  assign auto_anon_out_a_bits_source =
    (muxState_0 ? {1'h0, auto_anon_in_0_a_bits_source} : 2'h0) | {muxState_1, 1'h0};
  assign auto_anon_out_a_bits_address =
    (muxState_0 ? auto_anon_in_0_a_bits_address : 32'h0)
    | (muxState_1 ? auto_anon_in_1_a_bits_address : 32'h0);
  assign auto_anon_out_a_bits_mask =
    (muxState_0 ? auto_anon_in_0_a_bits_mask : 8'h0) | {8{muxState_1}};
  assign auto_anon_out_a_bits_data = muxState_0 ? auto_anon_in_0_a_bits_data : 64'h0;
  assign auto_anon_out_b_ready =
    ~(auto_anon_out_b_bits_source[1]) & auto_anon_in_0_b_ready;
  assign auto_anon_out_c_valid = auto_anon_in_0_c_valid;
  assign auto_anon_out_c_bits_opcode = auto_anon_in_0_c_bits_opcode;
  assign auto_anon_out_c_bits_param = auto_anon_in_0_c_bits_param;
  assign auto_anon_out_c_bits_size = auto_anon_in_0_c_bits_size;
  assign auto_anon_out_c_bits_source = {1'h0, auto_anon_in_0_c_bits_source};
  assign auto_anon_out_c_bits_address = auto_anon_in_0_c_bits_address;
  assign auto_anon_out_c_bits_data = auto_anon_in_0_c_bits_data;
  assign auto_anon_out_d_ready =
    ~(auto_anon_out_d_bits_source[1]) & auto_anon_in_0_d_ready | requestDOI_0_1;
  assign auto_anon_out_e_valid = auto_anon_in_0_e_valid;
  assign auto_anon_out_e_bits_sink = auto_anon_in_0_e_bits_sink;
endmodule

module IntXbar_i4_o1(
  input  auto_anon_in_3_0,
         auto_anon_in_2_0,
         auto_anon_in_1_0,
         auto_anon_in_1_1,
         auto_anon_in_0_0,
  output auto_anon_out_0,
         auto_anon_out_1,
         auto_anon_out_2,
         auto_anon_out_3,
         auto_anon_out_4
);

  assign auto_anon_out_0 = auto_anon_in_0_0;
  assign auto_anon_out_1 = auto_anon_in_1_0;
  assign auto_anon_out_2 = auto_anon_in_1_1;
  assign auto_anon_out_3 = auto_anon_in_2_0;
  assign auto_anon_out_4 = auto_anon_in_3_0;
endmodule

module OptimizationBarrier_TLBEntryData(
  input  [19:0] io_x_ppn,
  input         io_x_u,
                io_x_ae_ptw,
                io_x_ae_final,
                io_x_pf,
                io_x_gf,
                io_x_sw,
                io_x_sx,
                io_x_sr,
                io_x_pw,
                io_x_px,
                io_x_pr,
                io_x_ppp,
                io_x_pal,
                io_x_paa,
                io_x_eff,
                io_x_c,
  output [19:0] io_y_ppn,
  output        io_y_u,
                io_y_ae_ptw,
                io_y_ae_final,
                io_y_pf,
                io_y_gf,
                io_y_sw,
                io_y_sx,
                io_y_sr,
                io_y_pw,
                io_y_px,
                io_y_pr,
                io_y_ppp,
                io_y_pal,
                io_y_paa,
                io_y_eff,
                io_y_c
);

  assign io_y_ppn = io_x_ppn;
  assign io_y_u = io_x_u;
  assign io_y_ae_ptw = io_x_ae_ptw;
  assign io_y_ae_final = io_x_ae_final;
  assign io_y_pf = io_x_pf;
  assign io_y_gf = io_x_gf;
  assign io_y_sw = io_x_sw;
  assign io_y_sx = io_x_sx;
  assign io_y_sr = io_x_sr;
  assign io_y_pw = io_x_pw;
  assign io_y_px = io_x_px;
  assign io_y_pr = io_x_pr;
  assign io_y_ppp = io_x_ppp;
  assign io_y_pal = io_x_pal;
  assign io_y_paa = io_x_paa;
  assign io_y_eff = io_x_eff;
  assign io_y_c = io_x_c;
endmodule

module PMPChecker_s3(
  input  [1:0]  io_prv,
  input         io_pmp_0_cfg_l,
  input  [1:0]  io_pmp_0_cfg_a,
  input         io_pmp_0_cfg_x,
                io_pmp_0_cfg_w,
                io_pmp_0_cfg_r,
  input  [29:0] io_pmp_0_addr,
  input  [31:0] io_pmp_0_mask,
  input         io_pmp_1_cfg_l,
  input  [1:0]  io_pmp_1_cfg_a,
  input         io_pmp_1_cfg_x,
                io_pmp_1_cfg_w,
                io_pmp_1_cfg_r,
  input  [29:0] io_pmp_1_addr,
  input  [31:0] io_pmp_1_mask,
  input         io_pmp_2_cfg_l,
  input  [1:0]  io_pmp_2_cfg_a,
  input         io_pmp_2_cfg_x,
                io_pmp_2_cfg_w,
                io_pmp_2_cfg_r,
  input  [29:0] io_pmp_2_addr,
  input  [31:0] io_pmp_2_mask,
  input         io_pmp_3_cfg_l,
  input  [1:0]  io_pmp_3_cfg_a,
  input         io_pmp_3_cfg_x,
                io_pmp_3_cfg_w,
                io_pmp_3_cfg_r,
  input  [29:0] io_pmp_3_addr,
  input  [31:0] io_pmp_3_mask,
  input         io_pmp_4_cfg_l,
  input  [1:0]  io_pmp_4_cfg_a,
  input         io_pmp_4_cfg_x,
                io_pmp_4_cfg_w,
                io_pmp_4_cfg_r,
  input  [29:0] io_pmp_4_addr,
  input  [31:0] io_pmp_4_mask,
  input         io_pmp_5_cfg_l,
  input  [1:0]  io_pmp_5_cfg_a,
  input         io_pmp_5_cfg_x,
                io_pmp_5_cfg_w,
                io_pmp_5_cfg_r,
  input  [29:0] io_pmp_5_addr,
  input  [31:0] io_pmp_5_mask,
  input         io_pmp_6_cfg_l,
  input  [1:0]  io_pmp_6_cfg_a,
  input         io_pmp_6_cfg_x,
                io_pmp_6_cfg_w,
                io_pmp_6_cfg_r,
  input  [29:0] io_pmp_6_addr,
  input  [31:0] io_pmp_6_mask,
  input         io_pmp_7_cfg_l,
  input  [1:0]  io_pmp_7_cfg_a,
  input         io_pmp_7_cfg_x,
                io_pmp_7_cfg_w,
                io_pmp_7_cfg_r,
  input  [29:0] io_pmp_7_addr,
  input  [31:0] io_pmp_7_mask,
                io_addr,
  input  [1:0]  io_size,
  output        io_r,
                io_w,
                io_x
);

  wire [5:0]  _GEN = 6'h7 << io_size;
  wire [28:0] _GEN_0 = io_addr[31:3] ^ io_pmp_7_addr[29:1];
  wire [2:0]  _GEN_1 = {io_pmp_7_addr[0], 2'h0};
  wire [28:0] _GEN_2 = io_addr[31:3] ^ io_pmp_6_addr[29:1];
  wire [2:0]  _GEN_3 = io_addr[2:0] | ~(_GEN[2:0]);
  wire [2:0]  _GEN_4 = {io_pmp_6_addr[0], 2'h0};
  wire        res_hit =
    io_pmp_7_cfg_a[1]
      ? (_GEN_0 & ~(io_pmp_7_mask[31:3])) == 29'h0
        & ((io_addr[2:0] ^ _GEN_1) & ~(io_pmp_7_mask[2:0] | ~(_GEN[2:0]))) == 3'h0
      : io_pmp_7_cfg_a[0]
        & ~(io_addr[31:3] < io_pmp_6_addr[29:1] | ~(|_GEN_2) & _GEN_3 < _GEN_4)
        & (io_addr[31:3] < io_pmp_7_addr[29:1] | ~(|_GEN_0) & io_addr[2:0] < _GEN_1);
  wire        res_ignore = io_prv[1] & ~io_pmp_7_cfg_l;
  wire [2:0]  res_aligned_lsbMask = ~(_GEN[2:0]);
  wire        res_aligned =
    io_pmp_7_cfg_a[1]
      ? (res_aligned_lsbMask & ~(io_pmp_7_mask[2:0])) == 3'h0
      : ~(~(|_GEN_2) & io_pmp_6_addr[0] & ~(io_addr[2]) | ~(|_GEN_0) & io_pmp_7_addr[0]
          & (io_addr[2] | res_aligned_lsbMask[2]));
  wire [28:0] _GEN_5 = io_addr[31:3] ^ io_pmp_5_addr[29:1];
  wire [2:0]  _GEN_6 = {io_pmp_5_addr[0], 2'h0};
  wire        res_hit_1 =
    io_pmp_6_cfg_a[1]
      ? (_GEN_2 & ~(io_pmp_6_mask[31:3])) == 29'h0
        & ((io_addr[2:0] ^ _GEN_4) & ~(io_pmp_6_mask[2:0] | ~(_GEN[2:0]))) == 3'h0
      : io_pmp_6_cfg_a[0]
        & ~(io_addr[31:3] < io_pmp_5_addr[29:1] | ~(|_GEN_5) & _GEN_3 < _GEN_6)
        & (io_addr[31:3] < io_pmp_6_addr[29:1] | ~(|_GEN_2) & io_addr[2:0] < _GEN_4);
  wire        res_ignore_1 = io_prv[1] & ~io_pmp_6_cfg_l;
  wire [2:0]  res_aligned_lsbMask_1 = ~(_GEN[2:0]);
  wire        res_aligned_1 =
    io_pmp_6_cfg_a[1]
      ? (res_aligned_lsbMask_1 & ~(io_pmp_6_mask[2:0])) == 3'h0
      : ~(~(|_GEN_5) & io_pmp_5_addr[0] & ~(io_addr[2]) | ~(|_GEN_2) & io_pmp_6_addr[0]
          & (io_addr[2] | res_aligned_lsbMask_1[2]));
  wire [28:0] _GEN_7 = io_addr[31:3] ^ io_pmp_4_addr[29:1];
  wire [2:0]  _GEN_8 = {io_pmp_4_addr[0], 2'h0};
  wire        res_hit_2 =
    io_pmp_5_cfg_a[1]
      ? (_GEN_5 & ~(io_pmp_5_mask[31:3])) == 29'h0
        & ((io_addr[2:0] ^ _GEN_6) & ~(io_pmp_5_mask[2:0] | ~(_GEN[2:0]))) == 3'h0
      : io_pmp_5_cfg_a[0]
        & ~(io_addr[31:3] < io_pmp_4_addr[29:1] | ~(|_GEN_7) & _GEN_3 < _GEN_8)
        & (io_addr[31:3] < io_pmp_5_addr[29:1] | ~(|_GEN_5) & io_addr[2:0] < _GEN_6);
  wire        res_ignore_2 = io_prv[1] & ~io_pmp_5_cfg_l;
  wire [2:0]  res_aligned_lsbMask_2 = ~(_GEN[2:0]);
  wire        res_aligned_2 =
    io_pmp_5_cfg_a[1]
      ? (res_aligned_lsbMask_2 & ~(io_pmp_5_mask[2:0])) == 3'h0
      : ~(~(|_GEN_7) & io_pmp_4_addr[0] & ~(io_addr[2]) | ~(|_GEN_5) & io_pmp_5_addr[0]
          & (io_addr[2] | res_aligned_lsbMask_2[2]));
  wire [28:0] _GEN_9 = io_addr[31:3] ^ io_pmp_3_addr[29:1];
  wire [2:0]  _GEN_10 = {io_pmp_3_addr[0], 2'h0};
  wire        res_hit_3 =
    io_pmp_4_cfg_a[1]
      ? (_GEN_7 & ~(io_pmp_4_mask[31:3])) == 29'h0
        & ((io_addr[2:0] ^ _GEN_8) & ~(io_pmp_4_mask[2:0] | ~(_GEN[2:0]))) == 3'h0
      : io_pmp_4_cfg_a[0]
        & ~(io_addr[31:3] < io_pmp_3_addr[29:1] | ~(|_GEN_9) & _GEN_3 < _GEN_10)
        & (io_addr[31:3] < io_pmp_4_addr[29:1] | ~(|_GEN_7) & io_addr[2:0] < _GEN_8);
  wire        res_ignore_3 = io_prv[1] & ~io_pmp_4_cfg_l;
  wire [2:0]  res_aligned_lsbMask_3 = ~(_GEN[2:0]);
  wire        res_aligned_3 =
    io_pmp_4_cfg_a[1]
      ? (res_aligned_lsbMask_3 & ~(io_pmp_4_mask[2:0])) == 3'h0
      : ~(~(|_GEN_9) & io_pmp_3_addr[0] & ~(io_addr[2]) | ~(|_GEN_7) & io_pmp_4_addr[0]
          & (io_addr[2] | res_aligned_lsbMask_3[2]));
  wire [28:0] _GEN_11 = io_addr[31:3] ^ io_pmp_2_addr[29:1];
  wire [2:0]  _GEN_12 = {io_pmp_2_addr[0], 2'h0};
  wire        res_hit_4 =
    io_pmp_3_cfg_a[1]
      ? (_GEN_9 & ~(io_pmp_3_mask[31:3])) == 29'h0
        & ((io_addr[2:0] ^ _GEN_10) & ~(io_pmp_3_mask[2:0] | ~(_GEN[2:0]))) == 3'h0
      : io_pmp_3_cfg_a[0]
        & ~(io_addr[31:3] < io_pmp_2_addr[29:1] | ~(|_GEN_11) & _GEN_3 < _GEN_12)
        & (io_addr[31:3] < io_pmp_3_addr[29:1] | ~(|_GEN_9) & io_addr[2:0] < _GEN_10);
  wire        res_ignore_4 = io_prv[1] & ~io_pmp_3_cfg_l;
  wire [2:0]  res_aligned_lsbMask_4 = ~(_GEN[2:0]);
  wire        res_aligned_4 =
    io_pmp_3_cfg_a[1]
      ? (res_aligned_lsbMask_4 & ~(io_pmp_3_mask[2:0])) == 3'h0
      : ~(~(|_GEN_11) & io_pmp_2_addr[0] & ~(io_addr[2]) | ~(|_GEN_9) & io_pmp_3_addr[0]
          & (io_addr[2] | res_aligned_lsbMask_4[2]));
  wire [28:0] _GEN_13 = io_addr[31:3] ^ io_pmp_1_addr[29:1];
  wire [2:0]  _GEN_14 = {io_pmp_1_addr[0], 2'h0};
  wire        res_hit_5 =
    io_pmp_2_cfg_a[1]
      ? (_GEN_11 & ~(io_pmp_2_mask[31:3])) == 29'h0
        & ((io_addr[2:0] ^ _GEN_12) & ~(io_pmp_2_mask[2:0] | ~(_GEN[2:0]))) == 3'h0
      : io_pmp_2_cfg_a[0]
        & ~(io_addr[31:3] < io_pmp_1_addr[29:1] | ~(|_GEN_13) & _GEN_3 < _GEN_14)
        & (io_addr[31:3] < io_pmp_2_addr[29:1] | ~(|_GEN_11) & io_addr[2:0] < _GEN_12);
  wire        res_ignore_5 = io_prv[1] & ~io_pmp_2_cfg_l;
  wire [2:0]  res_aligned_lsbMask_5 = ~(_GEN[2:0]);
  wire        res_aligned_5 =
    io_pmp_2_cfg_a[1]
      ? (res_aligned_lsbMask_5 & ~(io_pmp_2_mask[2:0])) == 3'h0
      : ~(~(|_GEN_13) & io_pmp_1_addr[0] & ~(io_addr[2]) | ~(|_GEN_11) & io_pmp_2_addr[0]
          & (io_addr[2] | res_aligned_lsbMask_5[2]));
  wire [28:0] _GEN_15 = io_addr[31:3] ^ io_pmp_0_addr[29:1];
  wire [2:0]  _GEN_16 = {io_pmp_0_addr[0], 2'h0};
  wire        res_hit_6 =
    io_pmp_1_cfg_a[1]
      ? (_GEN_13 & ~(io_pmp_1_mask[31:3])) == 29'h0
        & ((io_addr[2:0] ^ _GEN_14) & ~(io_pmp_1_mask[2:0] | ~(_GEN[2:0]))) == 3'h0
      : io_pmp_1_cfg_a[0]
        & ~(io_addr[31:3] < io_pmp_0_addr[29:1] | ~(|_GEN_15) & _GEN_3 < _GEN_16)
        & (io_addr[31:3] < io_pmp_1_addr[29:1] | ~(|_GEN_13) & io_addr[2:0] < _GEN_14);
  wire        res_ignore_6 = io_prv[1] & ~io_pmp_1_cfg_l;
  wire [2:0]  res_aligned_lsbMask_6 = ~(_GEN[2:0]);
  wire        res_aligned_6 =
    io_pmp_1_cfg_a[1]
      ? (res_aligned_lsbMask_6 & ~(io_pmp_1_mask[2:0])) == 3'h0
      : ~(~(|_GEN_15) & io_pmp_0_addr[0] & ~(io_addr[2]) | ~(|_GEN_13) & io_pmp_1_addr[0]
          & (io_addr[2] | res_aligned_lsbMask_6[2]));
  wire        res_hit_7 =
    io_pmp_0_cfg_a[1]
      ? (_GEN_15 & ~(io_pmp_0_mask[31:3])) == 29'h0
        & ((io_addr[2:0] ^ _GEN_16) & ~(io_pmp_0_mask[2:0] | ~(_GEN[2:0]))) == 3'h0
      : io_pmp_0_cfg_a[0]
        & (io_addr[31:3] < io_pmp_0_addr[29:1] | ~(|_GEN_15) & io_addr[2:0] < _GEN_16);
  wire        res_ignore_7 = io_prv[1] & ~io_pmp_0_cfg_l;
  wire [2:0]  res_aligned_lsbMask_7 = ~(_GEN[2:0]);
  wire        res_aligned_7 =
    io_pmp_0_cfg_a[1]
      ? (res_aligned_lsbMask_7 & ~(io_pmp_0_mask[2:0])) == 3'h0
      : ~(~(|_GEN_15) & io_pmp_0_addr[0] & (io_addr[2] | res_aligned_lsbMask_7[2]));
  assign io_r =
    res_hit_7
      ? res_aligned_7 & (io_pmp_0_cfg_r | res_ignore_7)
      : res_hit_6
          ? res_aligned_6 & (io_pmp_1_cfg_r | res_ignore_6)
          : res_hit_5
              ? res_aligned_5 & (io_pmp_2_cfg_r | res_ignore_5)
              : res_hit_4
                  ? res_aligned_4 & (io_pmp_3_cfg_r | res_ignore_4)
                  : res_hit_3
                      ? res_aligned_3 & (io_pmp_4_cfg_r | res_ignore_3)
                      : res_hit_2
                          ? res_aligned_2 & (io_pmp_5_cfg_r | res_ignore_2)
                          : res_hit_1
                              ? res_aligned_1 & (io_pmp_6_cfg_r | res_ignore_1)
                              : res_hit
                                  ? res_aligned & (io_pmp_7_cfg_r | res_ignore)
                                  : io_prv[1];
  assign io_w =
    res_hit_7
      ? res_aligned_7 & (io_pmp_0_cfg_w | res_ignore_7)
      : res_hit_6
          ? res_aligned_6 & (io_pmp_1_cfg_w | res_ignore_6)
          : res_hit_5
              ? res_aligned_5 & (io_pmp_2_cfg_w | res_ignore_5)
              : res_hit_4
                  ? res_aligned_4 & (io_pmp_3_cfg_w | res_ignore_4)
                  : res_hit_3
                      ? res_aligned_3 & (io_pmp_4_cfg_w | res_ignore_3)
                      : res_hit_2
                          ? res_aligned_2 & (io_pmp_5_cfg_w | res_ignore_2)
                          : res_hit_1
                              ? res_aligned_1 & (io_pmp_6_cfg_w | res_ignore_1)
                              : res_hit
                                  ? res_aligned & (io_pmp_7_cfg_w | res_ignore)
                                  : io_prv[1];
  assign io_x =
    res_hit_7
      ? res_aligned_7 & (io_pmp_0_cfg_x | res_ignore_7)
      : res_hit_6
          ? res_aligned_6 & (io_pmp_1_cfg_x | res_ignore_6)
          : res_hit_5
              ? res_aligned_5 & (io_pmp_2_cfg_x | res_ignore_5)
              : res_hit_4
                  ? res_aligned_4 & (io_pmp_3_cfg_x | res_ignore_4)
                  : res_hit_3
                      ? res_aligned_3 & (io_pmp_4_cfg_x | res_ignore_3)
                      : res_hit_2
                          ? res_aligned_2 & (io_pmp_5_cfg_x | res_ignore_2)
                          : res_hit_1
                              ? res_aligned_1 & (io_pmp_6_cfg_x | res_ignore_1)
                              : res_hit
                                  ? res_aligned & (io_pmp_7_cfg_x | res_ignore)
                                  : io_prv[1];
endmodule

module PMAChecker(
  input  [39:0] io_paddr,
  output        io_resp_cacheable,
                io_resp_r,
                io_resp_w,
                io_resp_pp,
                io_resp_al,
                io_resp_aa,
                io_resp_x,
                io_resp_eff
);

  wire [9:0] _GEN = io_paddr[25:16] ^ 10'h200;
  wire [3:0] _GEN_0 = io_paddr[31:28] ^ 4'h8;
  wire       legal_address =
    io_paddr[39:12] == 28'h0 | {io_paddr[39:14], ~(io_paddr[13:12])} == 28'h0
    | {io_paddr[39:17], ~(io_paddr[16])} == 24'h0 | {io_paddr[39:26], _GEN} == 24'h0
    | {io_paddr[39:28], ~(io_paddr[27:26])} == 14'h0
    | {io_paddr[39:31], ~(io_paddr[30:29])} == 11'h0 | {io_paddr[39:32], _GEN_0} == 12'h0;
  wire       _GEN_1 = {io_paddr[31:30], ~(io_paddr[27])} == 3'h0;
  wire       _GEN_2 = {io_paddr[31], ~(io_paddr[30])} == 2'h0;
  wire       _GEN_3 = _GEN_0[3:2] == 2'h0;
  wire       _GEN_4 = {io_paddr[31:30], io_paddr[27], io_paddr[16]} == 4'h0 | _GEN_1;
  wire       _GEN_5 = legal_address & (_GEN_4 | _GEN_2 | _GEN_3);
  wire       _GEN_6 = legal_address & _GEN_4;
  assign io_resp_cacheable = legal_address & ~(_GEN_0[3]);
  assign io_resp_r = legal_address;
  assign io_resp_w = _GEN_5;
  assign io_resp_pp = _GEN_5;
  assign io_resp_al = _GEN_6;
  assign io_resp_aa = _GEN_6;
  assign io_resp_x =
    legal_address
    & ({io_paddr[31:30], io_paddr[27], io_paddr[25]} == 4'h0 | _GEN_2 | _GEN_3);
  assign io_resp_eff =
    legal_address
    & ({io_paddr[31:30], io_paddr[27], io_paddr[25], io_paddr[16], io_paddr[13]} == 6'h0
       | {io_paddr[31:30], io_paddr[27], _GEN[9], io_paddr[16]} == 5'h0 | _GEN_1
       | _GEN_2);
endmodule

module MaxPeriodFibonacciLFSR(
  input  clock,
         reset,
         io_increment,
  output io_out_0,
         io_out_1,
         io_out_2,
         io_out_3,
         io_out_4,
         io_out_5,
         io_out_6,
         io_out_7,
         io_out_8,
         io_out_9,
         io_out_10,
         io_out_11,
         io_out_12,
         io_out_13,
         io_out_14,
         io_out_15
);

  reg state_0;
  reg state_1;
  reg state_2;
  reg state_3;
  reg state_4;
  reg state_5;
  reg state_6;
  reg state_7;
  reg state_8;
  reg state_9;
  reg state_10;
  reg state_11;
  reg state_12;
  reg state_13;
  reg state_14;
  reg state_15;
  always @(posedge clock) begin
    if (reset) begin
      state_0 <= 1'h1;
      state_1 <= 1'h0;
      state_2 <= 1'h0;
      state_3 <= 1'h0;
      state_4 <= 1'h0;
      state_5 <= 1'h0;
      state_6 <= 1'h0;
      state_7 <= 1'h0;
      state_8 <= 1'h0;
      state_9 <= 1'h0;
      state_10 <= 1'h0;
      state_11 <= 1'h0;
      state_12 <= 1'h0;
      state_13 <= 1'h0;
      state_14 <= 1'h0;
      state_15 <= 1'h0;
    end
    else if (io_increment) begin
      state_0 <= state_15 ^ state_13 ^ state_12 ^ state_10;
      state_1 <= state_0;
      state_2 <= state_1;
      state_3 <= state_2;
      state_4 <= state_3;
      state_5 <= state_4;
      state_6 <= state_5;
      state_7 <= state_6;
      state_8 <= state_7;
      state_9 <= state_8;
      state_10 <= state_9;
      state_11 <= state_10;
      state_12 <= state_11;
      state_13 <= state_12;
      state_14 <= state_13;
      state_15 <= state_14;
    end
  end // always @(posedge)
  assign io_out_0 = state_0;
  assign io_out_1 = state_1;
  assign io_out_2 = state_2;
  assign io_out_3 = state_3;
  assign io_out_4 = state_4;
  assign io_out_5 = state_5;
  assign io_out_6 = state_6;
  assign io_out_7 = state_7;
  assign io_out_8 = state_8;
  assign io_out_9 = state_9;
  assign io_out_10 = state_10;
  assign io_out_11 = state_11;
  assign io_out_12 = state_12;
  assign io_out_13 = state_13;
  assign io_out_14 = state_14;
  assign io_out_15 = state_15;
endmodule

module DCacheDataArray(
  input         clock,
                io_req_valid,
  input  [11:0] io_req_bits_addr,
  input         io_req_bits_write,
  input  [63:0] io_req_bits_wdata,
  input  [7:0]  io_req_bits_eccMask,
  input  [3:0]  io_req_bits_way_en,
  output [63:0] io_resp_0,
                io_resp_1,
                io_resp_2,
                io_resp_3
);

  wire         rockettile_dcache_data_arrays_0_rdata_data_en;
  wire         rockettile_dcache_data_arrays_0_rdata_MPORT_en;
  wire [255:0] _rockettile_dcache_data_arrays_0_ext_RW0_rdata;
  assign rockettile_dcache_data_arrays_0_rdata_MPORT_en =
    io_req_valid & io_req_bits_write;
  assign rockettile_dcache_data_arrays_0_rdata_data_en =
    io_req_valid & ~io_req_bits_write;
  rockettile_dcache_data_arrays_0_combMem rockettile_dcache_data_arrays_0_ext (
    .RW0_addr  (io_req_bits_addr[11:3]),
    .RW0_en
      (rockettile_dcache_data_arrays_0_rdata_data_en
       | rockettile_dcache_data_arrays_0_rdata_MPORT_en),
    .RW0_clk   (clock),
    .RW0_wmode (io_req_bits_write),
    .RW0_wdata ({4{io_req_bits_wdata}}),
    .RW0_wmask
      ({io_req_bits_eccMask[7] & io_req_bits_way_en[3],
        io_req_bits_eccMask[6] & io_req_bits_way_en[3],
        io_req_bits_eccMask[5] & io_req_bits_way_en[3],
        io_req_bits_eccMask[4] & io_req_bits_way_en[3],
        io_req_bits_eccMask[3] & io_req_bits_way_en[3],
        io_req_bits_eccMask[2] & io_req_bits_way_en[3],
        io_req_bits_eccMask[1] & io_req_bits_way_en[3],
        io_req_bits_eccMask[0] & io_req_bits_way_en[3],
        io_req_bits_eccMask[7] & io_req_bits_way_en[2],
        io_req_bits_eccMask[6] & io_req_bits_way_en[2],
        io_req_bits_eccMask[5] & io_req_bits_way_en[2],
        io_req_bits_eccMask[4] & io_req_bits_way_en[2],
        io_req_bits_eccMask[3] & io_req_bits_way_en[2],
        io_req_bits_eccMask[2] & io_req_bits_way_en[2],
        io_req_bits_eccMask[1] & io_req_bits_way_en[2],
        io_req_bits_eccMask[0] & io_req_bits_way_en[2],
        io_req_bits_eccMask[7] & io_req_bits_way_en[1],
        io_req_bits_eccMask[6] & io_req_bits_way_en[1],
        io_req_bits_eccMask[5] & io_req_bits_way_en[1],
        io_req_bits_eccMask[4] & io_req_bits_way_en[1],
        io_req_bits_eccMask[3] & io_req_bits_way_en[1],
        io_req_bits_eccMask[2] & io_req_bits_way_en[1],
        io_req_bits_eccMask[1] & io_req_bits_way_en[1],
        io_req_bits_eccMask[0] & io_req_bits_way_en[1],
        io_req_bits_eccMask[7] & io_req_bits_way_en[0],
        io_req_bits_eccMask[6] & io_req_bits_way_en[0],
        io_req_bits_eccMask[5] & io_req_bits_way_en[0],
        io_req_bits_eccMask[4] & io_req_bits_way_en[0],
        io_req_bits_eccMask[3] & io_req_bits_way_en[0],
        io_req_bits_eccMask[2] & io_req_bits_way_en[0],
        io_req_bits_eccMask[1] & io_req_bits_way_en[0],
        io_req_bits_eccMask[0] & io_req_bits_way_en[0]}),
    .RW0_rdata (_rockettile_dcache_data_arrays_0_ext_RW0_rdata)
  );
  assign io_resp_0 = _rockettile_dcache_data_arrays_0_ext_RW0_rdata[63:0];
  assign io_resp_1 = _rockettile_dcache_data_arrays_0_ext_RW0_rdata[127:64];
  assign io_resp_2 = _rockettile_dcache_data_arrays_0_ext_RW0_rdata[191:128];
  assign io_resp_3 = _rockettile_dcache_data_arrays_0_ext_RW0_rdata[255:192];
endmodule

module AMOALU(
  input  [7:0]  io_mask,
  input  [4:0]  io_cmd,
  input  [63:0] io_lhs,
                io_rhs,
  output [63:0] io_out
);

  wire        _GEN = io_cmd == 5'hA;
  wire        logic_and = _GEN | io_cmd == 5'hB;
  wire        logic_xor = io_cmd == 5'h9 | _GEN;
  wire [63:0] adder_out_mask = {32'hFFFFFFFF, io_mask[3], 31'h7FFFFFFF};
  wire        _GEN_0 = io_lhs[31:0] < io_rhs[31:0];
  wire [63:0] wmask =
    {{8{io_mask[7]}},
     {8{io_mask[6]}},
     {8{io_mask[5]}},
     {8{io_mask[4]}},
     {8{io_mask[3]}},
     {8{io_mask[2]}},
     {8{io_mask[1]}},
     {8{io_mask[0]}}};
  assign io_out =
    wmask
    & (io_cmd == 5'h8
         ? (io_lhs & adder_out_mask) + (io_rhs & adder_out_mask)
         : logic_and | logic_xor
             ? (logic_and ? io_lhs & io_rhs : 64'h0)
               | (logic_xor ? io_lhs ^ io_rhs : 64'h0)
             : ((io_mask[4]
                   ? (io_lhs[63] == io_rhs[63]
                        ? io_lhs[63:32] < io_rhs[63:32] | io_lhs[63:32] == io_rhs[63:32]
                          & _GEN_0
                        : io_cmd[1] ? io_rhs[63] : io_lhs[63])
                   : io_lhs[31] == io_rhs[31]
                       ? _GEN_0
                       : io_cmd[1] ? io_rhs[31] : io_lhs[31])
                  ? io_cmd == 5'hC | io_cmd == 5'hE
                  : io_cmd == 5'hD | io_cmd == 5'hF)
                 ? io_lhs
                 : io_rhs) | ~wmask & io_lhs;
endmodule

module DCache(
  input         clock,
                reset,
                auto_out_a_ready,
                auto_out_b_valid,
  input  [1:0]  auto_out_b_bits_param,
  input  [3:0]  auto_out_b_bits_size,
  input         auto_out_b_bits_source,
  input  [31:0] auto_out_b_bits_address,
  input         auto_out_c_ready,
                auto_out_d_valid,
  input  [2:0]  auto_out_d_bits_opcode,
  input  [1:0]  auto_out_d_bits_param,
  input  [3:0]  auto_out_d_bits_size,
  input         auto_out_d_bits_source,
  input  [1:0]  auto_out_d_bits_sink,
  input         auto_out_d_bits_denied,
  input  [63:0] auto_out_d_bits_data,
  input         auto_out_e_ready,
                io_cpu_req_valid,
  input  [39:0] io_cpu_req_bits_addr,
  input  [6:0]  io_cpu_req_bits_tag,
  input  [4:0]  io_cpu_req_bits_cmd,
  input  [1:0]  io_cpu_req_bits_size,
  input         io_cpu_req_bits_signed,
  input  [1:0]  io_cpu_req_bits_dprv,
  input         io_cpu_req_bits_dv,
                io_cpu_req_bits_phys,
                io_cpu_s1_kill,
  input  [63:0] io_cpu_s1_data_data,
  input  [7:0]  io_cpu_s1_data_mask,
  input         io_ptw_req_ready,
                io_ptw_resp_valid,
                io_ptw_resp_bits_ae_ptw,
                io_ptw_resp_bits_ae_final,
                io_ptw_resp_bits_pf,
                io_ptw_resp_bits_gf,
                io_ptw_resp_bits_hr,
                io_ptw_resp_bits_hw,
                io_ptw_resp_bits_hx,
  input  [43:0] io_ptw_resp_bits_pte_ppn,
  input         io_ptw_resp_bits_pte_d,
                io_ptw_resp_bits_pte_a,
                io_ptw_resp_bits_pte_g,
                io_ptw_resp_bits_pte_u,
                io_ptw_resp_bits_pte_x,
                io_ptw_resp_bits_pte_w,
                io_ptw_resp_bits_pte_r,
                io_ptw_resp_bits_pte_v,
  input  [1:0]  io_ptw_resp_bits_level,
  input         io_ptw_resp_bits_homogeneous,
                io_ptw_resp_bits_gpa_is_pte,
  input  [3:0]  io_ptw_ptbr_mode,
  input         io_ptw_status_debug,
                io_ptw_status_mxr,
                io_ptw_status_sum,
                io_ptw_pmp_0_cfg_l,
  input  [1:0]  io_ptw_pmp_0_cfg_a,
  input         io_ptw_pmp_0_cfg_x,
                io_ptw_pmp_0_cfg_w,
                io_ptw_pmp_0_cfg_r,
  input  [29:0] io_ptw_pmp_0_addr,
  input  [31:0] io_ptw_pmp_0_mask,
  input         io_ptw_pmp_1_cfg_l,
  input  [1:0]  io_ptw_pmp_1_cfg_a,
  input         io_ptw_pmp_1_cfg_x,
                io_ptw_pmp_1_cfg_w,
                io_ptw_pmp_1_cfg_r,
  input  [29:0] io_ptw_pmp_1_addr,
  input  [31:0] io_ptw_pmp_1_mask,
  input         io_ptw_pmp_2_cfg_l,
  input  [1:0]  io_ptw_pmp_2_cfg_a,
  input         io_ptw_pmp_2_cfg_x,
                io_ptw_pmp_2_cfg_w,
                io_ptw_pmp_2_cfg_r,
  input  [29:0] io_ptw_pmp_2_addr,
  input  [31:0] io_ptw_pmp_2_mask,
  input         io_ptw_pmp_3_cfg_l,
  input  [1:0]  io_ptw_pmp_3_cfg_a,
  input         io_ptw_pmp_3_cfg_x,
                io_ptw_pmp_3_cfg_w,
                io_ptw_pmp_3_cfg_r,
  input  [29:0] io_ptw_pmp_3_addr,
  input  [31:0] io_ptw_pmp_3_mask,
  input         io_ptw_pmp_4_cfg_l,
  input  [1:0]  io_ptw_pmp_4_cfg_a,
  input         io_ptw_pmp_4_cfg_x,
                io_ptw_pmp_4_cfg_w,
                io_ptw_pmp_4_cfg_r,
  input  [29:0] io_ptw_pmp_4_addr,
  input  [31:0] io_ptw_pmp_4_mask,
  input         io_ptw_pmp_5_cfg_l,
  input  [1:0]  io_ptw_pmp_5_cfg_a,
  input         io_ptw_pmp_5_cfg_x,
                io_ptw_pmp_5_cfg_w,
                io_ptw_pmp_5_cfg_r,
  input  [29:0] io_ptw_pmp_5_addr,
  input  [31:0] io_ptw_pmp_5_mask,
  input         io_ptw_pmp_6_cfg_l,
  input  [1:0]  io_ptw_pmp_6_cfg_a,
  input         io_ptw_pmp_6_cfg_x,
                io_ptw_pmp_6_cfg_w,
                io_ptw_pmp_6_cfg_r,
  input  [29:0] io_ptw_pmp_6_addr,
  input  [31:0] io_ptw_pmp_6_mask,
  input         io_ptw_pmp_7_cfg_l,
  input  [1:0]  io_ptw_pmp_7_cfg_a,
  input         io_ptw_pmp_7_cfg_x,
                io_ptw_pmp_7_cfg_w,
                io_ptw_pmp_7_cfg_r,
  input  [29:0] io_ptw_pmp_7_addr,
  input  [31:0] io_ptw_pmp_7_mask,
  output        auto_out_a_valid,
  output [2:0]  auto_out_a_bits_opcode,
                auto_out_a_bits_param,
  output [3:0]  auto_out_a_bits_size,
  output        auto_out_a_bits_source,
  output [31:0] auto_out_a_bits_address,
  output [7:0]  auto_out_a_bits_mask,
  output [63:0] auto_out_a_bits_data,
  output        auto_out_b_ready,
                auto_out_c_valid,
  output [2:0]  auto_out_c_bits_opcode,
                auto_out_c_bits_param,
  output [3:0]  auto_out_c_bits_size,
  output        auto_out_c_bits_source,
  output [31:0] auto_out_c_bits_address,
  output [63:0] auto_out_c_bits_data,
  output        auto_out_d_ready,
                auto_out_e_valid,
  output [1:0]  auto_out_e_bits_sink,
  output        io_cpu_req_ready,
                io_cpu_s2_nack,
                io_cpu_resp_valid,
  output [39:0] io_cpu_resp_bits_addr,
  output [6:0]  io_cpu_resp_bits_tag,
  output [4:0]  io_cpu_resp_bits_cmd,
  output [1:0]  io_cpu_resp_bits_size,
  output        io_cpu_resp_bits_signed,
  output [1:0]  io_cpu_resp_bits_dprv,
  output        io_cpu_resp_bits_dv,
  output [63:0] io_cpu_resp_bits_data,
  output [7:0]  io_cpu_resp_bits_mask,
  output        io_cpu_resp_bits_replay,
                io_cpu_resp_bits_has_data,
  output [63:0] io_cpu_resp_bits_data_word_bypass,
                io_cpu_resp_bits_data_raw,
                io_cpu_resp_bits_store_data,
  output        io_cpu_replay_next,
                io_cpu_s2_xcpt_ma_ld,
                io_cpu_s2_xcpt_ma_st,
                io_cpu_s2_xcpt_pf_ld,
                io_cpu_s2_xcpt_pf_st,
                io_cpu_s2_xcpt_gf_ld,
                io_cpu_s2_xcpt_gf_st,
                io_cpu_s2_xcpt_ae_ld,
                io_cpu_s2_xcpt_ae_st,
                io_cpu_ordered,
                io_cpu_perf_release,
                io_cpu_perf_grant,
                io_ptw_req_valid,
  output [26:0] io_ptw_req_bits_bits_addr,
  output        io_ptw_req_bits_bits_need_gpa,
                io_ptw_req_bits_bits_vstage1,
                io_ptw_req_bits_bits_stage2
);

  wire [5:0]       metaArb_io_in_5_bits_idx;
  wire             _io_cpu_s2_xcpt_ma_st_output;
  wire             _io_cpu_s2_xcpt_ma_ld_output;
  wire             _io_cpu_s2_xcpt_ae_st_output;
  wire             _io_cpu_s2_xcpt_ae_ld_output;
  wire             _io_cpu_s2_xcpt_gf_st_output;
  wire             _io_cpu_s2_xcpt_gf_ld_output;
  wire             _io_cpu_s2_xcpt_pf_st_output;
  wire             _io_cpu_s2_xcpt_pf_ld_output;
  wire [21:0]      metaArb_io_in_7_bits_data;
  wire             metaArb_io_in_4_valid;
  wire [11:0]      dataArb_io_in_2_bits_addr;
  wire             dataArb_io_in_2_valid;
  wire [3:0]       releaseWay;
  wire [3:0]       nodeOut_c_bits_size;
  wire [2:0]       nodeOut_c_bits_opcode;
  wire             nodeOut_c_valid;
  wire [5:0]       metaArb_io_in_6_bits_idx;
  wire             metaArb_io_in_6_valid;
  wire             s1_nack;
  wire             dataArb_io_in_1_bits_write;
  wire             dataArb_io_in_1_valid;
  wire             nodeOut_d_ready;
  wire [21:0]      metaArb_io_in_3_bits_data;
  wire             metaArb_io_in_3_valid;
  wire [11:0]      dataArb_io_in_1_bits_addr;
  wire [7:0]       dataArb_io_in_0_bits_eccMask;
  wire [63:0]      dataArb_io_in_0_bits_wdata;
  wire [3:0]       dataArb_io_in_0_bits_way_en;
  wire [11:0]      dataArb_io_in_0_bits_addr;
  wire             dataArb_io_in_0_valid;
  wire             dataArb_io_in_0_bits_write;
  wire [21:0]      metaArb_io_in_2_bits_data;
  wire [21:0]      metaArb_io_in_1_bits_data;
  wire [5:0]       metaArb_io_in_1_bits_idx;
  wire [5:0]       metaArb_io_in_3_bits_idx;
  wire [5:0]       metaArb_io_in_4_bits_idx;
  wire [3:0]       metaArb_io_in_1_bits_way_en;
  wire             metaArb_io_in_1_valid;
  wire             metaArb_io_in_2_valid;
  wire [3:0]       metaArb_io_in_2_bits_way_en;
  reg  [39:0]      s2_req_addr;
  wire             rockettile_dcache_tag_array_s1_meta_en;
  wire             rockettile_dcache_tag_array_MPORT_en;
  wire [5:0]       metaArb_io_in_7_bits_idx;
  wire [11:0]      dataArb_io_in_3_bits_addr;
  wire             dataArb_io_in_3_valid;
  reg  [3:0]       refill_way;
  reg              resetting;
  reg  [1:0]       s1_tlb_req_prv;
  reg              s1_tlb_req_passthrough;
  reg  [39:0]      s1_tlb_req_vaddr;
  wire [63:0]      _amoalus_0_io_out;
  wire [63:0]      _data_io_resp_0;
  wire [63:0]      _data_io_resp_1;
  wire [63:0]      _data_io_resp_2;
  wire [63:0]      _data_io_resp_3;
  wire [87:0]      _rockettile_dcache_tag_array_ext_RW0_rdata;
  wire             _lfsr_prng_io_out_0;
  wire             _lfsr_prng_io_out_1;
  wire [19:0]      _tlb_entries_barrier_12_io_y_ppn;
  wire             _tlb_entries_barrier_12_io_y_u;
  wire             _tlb_entries_barrier_12_io_y_ae_ptw;
  wire             _tlb_entries_barrier_12_io_y_ae_final;
  wire             _tlb_entries_barrier_12_io_y_pf;
  wire             _tlb_entries_barrier_12_io_y_gf;
  wire             _tlb_entries_barrier_12_io_y_sw;
  wire             _tlb_entries_barrier_12_io_y_sx;
  wire             _tlb_entries_barrier_12_io_y_sr;
  wire [19:0]      _tlb_entries_barrier_11_io_y_ppn;
  wire             _tlb_entries_barrier_11_io_y_u;
  wire             _tlb_entries_barrier_11_io_y_ae_ptw;
  wire             _tlb_entries_barrier_11_io_y_ae_final;
  wire             _tlb_entries_barrier_11_io_y_pf;
  wire             _tlb_entries_barrier_11_io_y_gf;
  wire             _tlb_entries_barrier_11_io_y_sw;
  wire             _tlb_entries_barrier_11_io_y_sx;
  wire             _tlb_entries_barrier_11_io_y_sr;
  wire             _tlb_entries_barrier_11_io_y_pw;
  wire             _tlb_entries_barrier_11_io_y_pr;
  wire             _tlb_entries_barrier_11_io_y_ppp;
  wire             _tlb_entries_barrier_11_io_y_pal;
  wire             _tlb_entries_barrier_11_io_y_paa;
  wire             _tlb_entries_barrier_11_io_y_eff;
  wire             _tlb_entries_barrier_11_io_y_c;
  wire [19:0]      _tlb_entries_barrier_10_io_y_ppn;
  wire             _tlb_entries_barrier_10_io_y_u;
  wire             _tlb_entries_barrier_10_io_y_ae_ptw;
  wire             _tlb_entries_barrier_10_io_y_ae_final;
  wire             _tlb_entries_barrier_10_io_y_pf;
  wire             _tlb_entries_barrier_10_io_y_gf;
  wire             _tlb_entries_barrier_10_io_y_sw;
  wire             _tlb_entries_barrier_10_io_y_sx;
  wire             _tlb_entries_barrier_10_io_y_sr;
  wire             _tlb_entries_barrier_10_io_y_pw;
  wire             _tlb_entries_barrier_10_io_y_pr;
  wire             _tlb_entries_barrier_10_io_y_ppp;
  wire             _tlb_entries_barrier_10_io_y_pal;
  wire             _tlb_entries_barrier_10_io_y_paa;
  wire             _tlb_entries_barrier_10_io_y_eff;
  wire             _tlb_entries_barrier_10_io_y_c;
  wire [19:0]      _tlb_entries_barrier_9_io_y_ppn;
  wire             _tlb_entries_barrier_9_io_y_u;
  wire             _tlb_entries_barrier_9_io_y_ae_ptw;
  wire             _tlb_entries_barrier_9_io_y_ae_final;
  wire             _tlb_entries_barrier_9_io_y_pf;
  wire             _tlb_entries_barrier_9_io_y_gf;
  wire             _tlb_entries_barrier_9_io_y_sw;
  wire             _tlb_entries_barrier_9_io_y_sx;
  wire             _tlb_entries_barrier_9_io_y_sr;
  wire             _tlb_entries_barrier_9_io_y_pw;
  wire             _tlb_entries_barrier_9_io_y_pr;
  wire             _tlb_entries_barrier_9_io_y_ppp;
  wire             _tlb_entries_barrier_9_io_y_pal;
  wire             _tlb_entries_barrier_9_io_y_paa;
  wire             _tlb_entries_barrier_9_io_y_eff;
  wire             _tlb_entries_barrier_9_io_y_c;
  wire [19:0]      _tlb_entries_barrier_8_io_y_ppn;
  wire             _tlb_entries_barrier_8_io_y_u;
  wire             _tlb_entries_barrier_8_io_y_ae_ptw;
  wire             _tlb_entries_barrier_8_io_y_ae_final;
  wire             _tlb_entries_barrier_8_io_y_pf;
  wire             _tlb_entries_barrier_8_io_y_gf;
  wire             _tlb_entries_barrier_8_io_y_sw;
  wire             _tlb_entries_barrier_8_io_y_sx;
  wire             _tlb_entries_barrier_8_io_y_sr;
  wire             _tlb_entries_barrier_8_io_y_pw;
  wire             _tlb_entries_barrier_8_io_y_pr;
  wire             _tlb_entries_barrier_8_io_y_ppp;
  wire             _tlb_entries_barrier_8_io_y_pal;
  wire             _tlb_entries_barrier_8_io_y_paa;
  wire             _tlb_entries_barrier_8_io_y_eff;
  wire             _tlb_entries_barrier_8_io_y_c;
  wire [19:0]      _tlb_entries_barrier_7_io_y_ppn;
  wire             _tlb_entries_barrier_7_io_y_u;
  wire             _tlb_entries_barrier_7_io_y_ae_ptw;
  wire             _tlb_entries_barrier_7_io_y_ae_final;
  wire             _tlb_entries_barrier_7_io_y_pf;
  wire             _tlb_entries_barrier_7_io_y_gf;
  wire             _tlb_entries_barrier_7_io_y_sw;
  wire             _tlb_entries_barrier_7_io_y_sx;
  wire             _tlb_entries_barrier_7_io_y_sr;
  wire             _tlb_entries_barrier_7_io_y_pw;
  wire             _tlb_entries_barrier_7_io_y_pr;
  wire             _tlb_entries_barrier_7_io_y_ppp;
  wire             _tlb_entries_barrier_7_io_y_pal;
  wire             _tlb_entries_barrier_7_io_y_paa;
  wire             _tlb_entries_barrier_7_io_y_eff;
  wire             _tlb_entries_barrier_7_io_y_c;
  wire [19:0]      _tlb_entries_barrier_6_io_y_ppn;
  wire             _tlb_entries_barrier_6_io_y_u;
  wire             _tlb_entries_barrier_6_io_y_ae_ptw;
  wire             _tlb_entries_barrier_6_io_y_ae_final;
  wire             _tlb_entries_barrier_6_io_y_pf;
  wire             _tlb_entries_barrier_6_io_y_gf;
  wire             _tlb_entries_barrier_6_io_y_sw;
  wire             _tlb_entries_barrier_6_io_y_sx;
  wire             _tlb_entries_barrier_6_io_y_sr;
  wire             _tlb_entries_barrier_6_io_y_pw;
  wire             _tlb_entries_barrier_6_io_y_pr;
  wire             _tlb_entries_barrier_6_io_y_ppp;
  wire             _tlb_entries_barrier_6_io_y_pal;
  wire             _tlb_entries_barrier_6_io_y_paa;
  wire             _tlb_entries_barrier_6_io_y_eff;
  wire             _tlb_entries_barrier_6_io_y_c;
  wire [19:0]      _tlb_entries_barrier_5_io_y_ppn;
  wire             _tlb_entries_barrier_5_io_y_u;
  wire             _tlb_entries_barrier_5_io_y_ae_ptw;
  wire             _tlb_entries_barrier_5_io_y_ae_final;
  wire             _tlb_entries_barrier_5_io_y_pf;
  wire             _tlb_entries_barrier_5_io_y_gf;
  wire             _tlb_entries_barrier_5_io_y_sw;
  wire             _tlb_entries_barrier_5_io_y_sx;
  wire             _tlb_entries_barrier_5_io_y_sr;
  wire             _tlb_entries_barrier_5_io_y_pw;
  wire             _tlb_entries_barrier_5_io_y_pr;
  wire             _tlb_entries_barrier_5_io_y_ppp;
  wire             _tlb_entries_barrier_5_io_y_pal;
  wire             _tlb_entries_barrier_5_io_y_paa;
  wire             _tlb_entries_barrier_5_io_y_eff;
  wire             _tlb_entries_barrier_5_io_y_c;
  wire [19:0]      _tlb_entries_barrier_4_io_y_ppn;
  wire             _tlb_entries_barrier_4_io_y_u;
  wire             _tlb_entries_barrier_4_io_y_ae_ptw;
  wire             _tlb_entries_barrier_4_io_y_ae_final;
  wire             _tlb_entries_barrier_4_io_y_pf;
  wire             _tlb_entries_barrier_4_io_y_gf;
  wire             _tlb_entries_barrier_4_io_y_sw;
  wire             _tlb_entries_barrier_4_io_y_sx;
  wire             _tlb_entries_barrier_4_io_y_sr;
  wire             _tlb_entries_barrier_4_io_y_pw;
  wire             _tlb_entries_barrier_4_io_y_pr;
  wire             _tlb_entries_barrier_4_io_y_ppp;
  wire             _tlb_entries_barrier_4_io_y_pal;
  wire             _tlb_entries_barrier_4_io_y_paa;
  wire             _tlb_entries_barrier_4_io_y_eff;
  wire             _tlb_entries_barrier_4_io_y_c;
  wire [19:0]      _tlb_entries_barrier_3_io_y_ppn;
  wire             _tlb_entries_barrier_3_io_y_u;
  wire             _tlb_entries_barrier_3_io_y_ae_ptw;
  wire             _tlb_entries_barrier_3_io_y_ae_final;
  wire             _tlb_entries_barrier_3_io_y_pf;
  wire             _tlb_entries_barrier_3_io_y_gf;
  wire             _tlb_entries_barrier_3_io_y_sw;
  wire             _tlb_entries_barrier_3_io_y_sx;
  wire             _tlb_entries_barrier_3_io_y_sr;
  wire             _tlb_entries_barrier_3_io_y_pw;
  wire             _tlb_entries_barrier_3_io_y_pr;
  wire             _tlb_entries_barrier_3_io_y_ppp;
  wire             _tlb_entries_barrier_3_io_y_pal;
  wire             _tlb_entries_barrier_3_io_y_paa;
  wire             _tlb_entries_barrier_3_io_y_eff;
  wire             _tlb_entries_barrier_3_io_y_c;
  wire [19:0]      _tlb_entries_barrier_2_io_y_ppn;
  wire             _tlb_entries_barrier_2_io_y_u;
  wire             _tlb_entries_barrier_2_io_y_ae_ptw;
  wire             _tlb_entries_barrier_2_io_y_ae_final;
  wire             _tlb_entries_barrier_2_io_y_pf;
  wire             _tlb_entries_barrier_2_io_y_gf;
  wire             _tlb_entries_barrier_2_io_y_sw;
  wire             _tlb_entries_barrier_2_io_y_sx;
  wire             _tlb_entries_barrier_2_io_y_sr;
  wire             _tlb_entries_barrier_2_io_y_pw;
  wire             _tlb_entries_barrier_2_io_y_pr;
  wire             _tlb_entries_barrier_2_io_y_ppp;
  wire             _tlb_entries_barrier_2_io_y_pal;
  wire             _tlb_entries_barrier_2_io_y_paa;
  wire             _tlb_entries_barrier_2_io_y_eff;
  wire             _tlb_entries_barrier_2_io_y_c;
  wire [19:0]      _tlb_entries_barrier_1_io_y_ppn;
  wire             _tlb_entries_barrier_1_io_y_u;
  wire             _tlb_entries_barrier_1_io_y_ae_ptw;
  wire             _tlb_entries_barrier_1_io_y_ae_final;
  wire             _tlb_entries_barrier_1_io_y_pf;
  wire             _tlb_entries_barrier_1_io_y_gf;
  wire             _tlb_entries_barrier_1_io_y_sw;
  wire             _tlb_entries_barrier_1_io_y_sx;
  wire             _tlb_entries_barrier_1_io_y_sr;
  wire             _tlb_entries_barrier_1_io_y_pw;
  wire             _tlb_entries_barrier_1_io_y_pr;
  wire             _tlb_entries_barrier_1_io_y_ppp;
  wire             _tlb_entries_barrier_1_io_y_pal;
  wire             _tlb_entries_barrier_1_io_y_paa;
  wire             _tlb_entries_barrier_1_io_y_eff;
  wire             _tlb_entries_barrier_1_io_y_c;
  wire [19:0]      _tlb_entries_barrier_io_y_ppn;
  wire             _tlb_entries_barrier_io_y_u;
  wire             _tlb_entries_barrier_io_y_ae_ptw;
  wire             _tlb_entries_barrier_io_y_ae_final;
  wire             _tlb_entries_barrier_io_y_pf;
  wire             _tlb_entries_barrier_io_y_gf;
  wire             _tlb_entries_barrier_io_y_sw;
  wire             _tlb_entries_barrier_io_y_sx;
  wire             _tlb_entries_barrier_io_y_sr;
  wire             _tlb_entries_barrier_io_y_pw;
  wire             _tlb_entries_barrier_io_y_pr;
  wire             _tlb_entries_barrier_io_y_ppp;
  wire             _tlb_entries_barrier_io_y_pal;
  wire             _tlb_entries_barrier_io_y_paa;
  wire             _tlb_entries_barrier_io_y_eff;
  wire             _tlb_entries_barrier_io_y_c;
  wire             _tlb__io_resp_cacheable;
  wire             _tlb__io_resp_r;
  wire             _tlb__io_resp_w;
  wire             _tlb__io_resp_pp;
  wire             _tlb__io_resp_al;
  wire             _tlb__io_resp_aa;
  wire             _tlb__io_resp_x;
  wire             _tlb__io_resp_eff;
  wire             _tlb_pmp_io_r;
  wire             _tlb_pmp_io_w;
  wire             _tlb_pmp_io_x;
  wire [19:0]      _tlb_mpu_ppn_barrier_io_y_ppn;
  reg  [26:0]      tlb_sectored_entries_0_0_tag_vpn;
  reg              tlb_;
  reg  [41:0]      tlb_sectored_entries_0_0_data_0;
  reg  [41:0]      tlb_sectored_entries_0_0_data_1;
  reg  [41:0]      tlb_sectored_entries_0_0_data_2;
  reg  [41:0]      tlb_sectored_entries_0_0_data_3;
  reg              tlb_sectored_entries_0_0_valid_0;
  reg              tlb_sectored_entries_0_0_valid_1;
  reg              tlb_sectored_entries_0_0_valid_2;
  reg              tlb_sectored_entries_0_0_valid_3;
  reg  [26:0]      tlb_sectored_entries_0_1_tag_vpn;
  reg              tlb__0;
  reg  [41:0]      tlb_sectored_entries_0_1_data_0;
  reg  [41:0]      tlb_sectored_entries_0_1_data_1;
  reg  [41:0]      tlb_sectored_entries_0_1_data_2;
  reg  [41:0]      tlb_sectored_entries_0_1_data_3;
  reg              tlb_sectored_entries_0_1_valid_0;
  reg              tlb_sectored_entries_0_1_valid_1;
  reg              tlb_sectored_entries_0_1_valid_2;
  reg              tlb_sectored_entries_0_1_valid_3;
  reg  [26:0]      tlb_sectored_entries_0_2_tag_vpn;
  reg              tlb__1;
  reg  [41:0]      tlb_sectored_entries_0_2_data_0;
  reg  [41:0]      tlb_sectored_entries_0_2_data_1;
  reg  [41:0]      tlb_sectored_entries_0_2_data_2;
  reg  [41:0]      tlb_sectored_entries_0_2_data_3;
  reg              tlb_sectored_entries_0_2_valid_0;
  reg              tlb_sectored_entries_0_2_valid_1;
  reg              tlb_sectored_entries_0_2_valid_2;
  reg              tlb_sectored_entries_0_2_valid_3;
  reg  [26:0]      tlb_sectored_entries_0_3_tag_vpn;
  reg              tlb__2;
  reg  [41:0]      tlb_sectored_entries_0_3_data_0;
  reg  [41:0]      tlb_sectored_entries_0_3_data_1;
  reg  [41:0]      tlb_sectored_entries_0_3_data_2;
  reg  [41:0]      tlb_sectored_entries_0_3_data_3;
  reg              tlb_sectored_entries_0_3_valid_0;
  reg              tlb_sectored_entries_0_3_valid_1;
  reg              tlb_sectored_entries_0_3_valid_2;
  reg              tlb_sectored_entries_0_3_valid_3;
  reg  [26:0]      tlb_sectored_entries_0_4_tag_vpn;
  reg              tlb__3;
  reg  [41:0]      tlb_sectored_entries_0_4_data_0;
  reg  [41:0]      tlb_sectored_entries_0_4_data_1;
  reg  [41:0]      tlb_sectored_entries_0_4_data_2;
  reg  [41:0]      tlb_sectored_entries_0_4_data_3;
  reg              tlb_sectored_entries_0_4_valid_0;
  reg              tlb_sectored_entries_0_4_valid_1;
  reg              tlb_sectored_entries_0_4_valid_2;
  reg              tlb_sectored_entries_0_4_valid_3;
  reg  [26:0]      tlb_sectored_entries_0_5_tag_vpn;
  reg              tlb__4;
  reg  [41:0]      tlb_sectored_entries_0_5_data_0;
  reg  [41:0]      tlb_sectored_entries_0_5_data_1;
  reg  [41:0]      tlb_sectored_entries_0_5_data_2;
  reg  [41:0]      tlb_sectored_entries_0_5_data_3;
  reg              tlb_sectored_entries_0_5_valid_0;
  reg              tlb_sectored_entries_0_5_valid_1;
  reg              tlb_sectored_entries_0_5_valid_2;
  reg              tlb_sectored_entries_0_5_valid_3;
  reg  [26:0]      tlb_sectored_entries_0_6_tag_vpn;
  reg              tlb__5;
  reg  [41:0]      tlb_sectored_entries_0_6_data_0;
  reg  [41:0]      tlb_sectored_entries_0_6_data_1;
  reg  [41:0]      tlb_sectored_entries_0_6_data_2;
  reg  [41:0]      tlb_sectored_entries_0_6_data_3;
  reg              tlb_sectored_entries_0_6_valid_0;
  reg              tlb_sectored_entries_0_6_valid_1;
  reg              tlb_sectored_entries_0_6_valid_2;
  reg              tlb_sectored_entries_0_6_valid_3;
  reg  [26:0]      tlb_sectored_entries_0_7_tag_vpn;
  reg              tlb__6;
  reg  [41:0]      tlb_sectored_entries_0_7_data_0;
  reg  [41:0]      tlb_sectored_entries_0_7_data_1;
  reg  [41:0]      tlb_sectored_entries_0_7_data_2;
  reg  [41:0]      tlb_sectored_entries_0_7_data_3;
  reg              tlb_sectored_entries_0_7_valid_0;
  reg              tlb_sectored_entries_0_7_valid_1;
  reg              tlb_sectored_entries_0_7_valid_2;
  reg              tlb_sectored_entries_0_7_valid_3;
  reg  [1:0]       tlb_superpage_entries_0_level;
  reg  [26:0]      tlb_superpage_entries_0_tag_vpn;
  reg              tlb__7;
  reg  [41:0]      tlb_superpage_entries_0_data_0;
  reg              tlb_superpage_entries_0_valid_0;
  reg  [1:0]       tlb_superpage_entries_1_level;
  reg  [26:0]      tlb_superpage_entries_1_tag_vpn;
  reg              tlb__8;
  reg  [41:0]      tlb_superpage_entries_1_data_0;
  reg              tlb_superpage_entries_1_valid_0;
  reg  [1:0]       tlb_superpage_entries_2_level;
  reg  [26:0]      tlb_superpage_entries_2_tag_vpn;
  reg              tlb__9;
  reg  [41:0]      tlb_superpage_entries_2_data_0;
  reg              tlb_superpage_entries_2_valid_0;
  reg  [1:0]       tlb_superpage_entries_3_level;
  reg  [26:0]      tlb_superpage_entries_3_tag_vpn;
  reg              tlb__10;
  reg  [41:0]      tlb_superpage_entries_3_data_0;
  reg              tlb_superpage_entries_3_valid_0;
  reg  [1:0]       tlb_special_entry_level;
  reg  [26:0]      tlb_special_entry_tag_vpn;
  reg              tlb__11;
  reg  [41:0]      tlb_special_entry_data_0;
  reg              tlb_special_entry_valid_0;
  reg  [1:0]       tlb_state;
  reg  [26:0]      tlb_r_refill_tag;
  reg  [1:0]       tlb_waddr;
  reg  [2:0]       tlb_r_sectored_repl_addr;
  reg              tlb_r_sectored_hit_valid;
  reg  [2:0]       tlb_r_sectored_hit_bits;
  reg              tlb_r_vstage1_en;
  reg              tlb_r_stage2_en;
  reg              tlb_r_need_gpa;
  wire             tlb__12 =
    io_ptw_ptbr_mode[3] & ~(s1_tlb_req_prv[1]) & ~s1_tlb_req_passthrough;
  wire             tlb_io_ptw_req_valid = tlb_state == 2'h1;
  wire             tlb__13 = tlb_special_entry_level == 2'h0;
  wire [8:0]       _GEN = tlb__13 ? s1_tlb_req_vaddr[29:21] : 9'h0;
  wire [8:0]       _GEN_0 = tlb_special_entry_level[1] ? 9'h0 : s1_tlb_req_vaddr[20:12];
  wire [27:0]      tlb_mpu_ppn =
    io_ptw_resp_valid
      ? {8'h0, io_ptw_resp_bits_pte_ppn[19:0]}
      : tlb__12
          ? {8'h0,
             _tlb_mpu_ppn_barrier_io_y_ppn[19:18],
             _GEN | _tlb_mpu_ppn_barrier_io_y_ppn[17:9],
             _GEN_0 | _tlb_mpu_ppn_barrier_io_y_ppn[8:0]}
          : s1_tlb_req_vaddr[39:12];
  wire [2:0]       tlb_mpu_priv =
    io_ptw_resp_valid | s1_tlb_req_passthrough
      ? 3'h1
      : {io_ptw_status_debug, s1_tlb_req_prv};
  wire [24:0]      tlb__14 =
    tlb_sectored_entries_0_0_tag_vpn[26:2] ^ s1_tlb_req_vaddr[38:14];
  wire             tlb__15 = tlb__14 == 25'h0 & ~tlb_;
  wire [24:0]      tlb__16 =
    tlb_sectored_entries_0_1_tag_vpn[26:2] ^ s1_tlb_req_vaddr[38:14];
  wire             tlb__17 = tlb__16 == 25'h0 & ~tlb__0;
  wire [24:0]      tlb__18 =
    tlb_sectored_entries_0_2_tag_vpn[26:2] ^ s1_tlb_req_vaddr[38:14];
  wire             tlb__19 = tlb__18 == 25'h0 & ~tlb__1;
  wire [24:0]      tlb__20 =
    tlb_sectored_entries_0_3_tag_vpn[26:2] ^ s1_tlb_req_vaddr[38:14];
  wire             tlb__21 = tlb__20 == 25'h0 & ~tlb__2;
  wire [24:0]      tlb__22 =
    tlb_sectored_entries_0_4_tag_vpn[26:2] ^ s1_tlb_req_vaddr[38:14];
  wire             tlb__23 = tlb__22 == 25'h0 & ~tlb__3;
  wire [24:0]      tlb__24 =
    tlb_sectored_entries_0_5_tag_vpn[26:2] ^ s1_tlb_req_vaddr[38:14];
  wire             tlb__25 = tlb__24 == 25'h0 & ~tlb__4;
  wire [24:0]      tlb__26 =
    tlb_sectored_entries_0_6_tag_vpn[26:2] ^ s1_tlb_req_vaddr[38:14];
  wire             tlb__27 = tlb__26 == 25'h0 & ~tlb__5;
  wire [24:0]      tlb__28 =
    tlb_sectored_entries_0_7_tag_vpn[26:2] ^ s1_tlb_req_vaddr[38:14];
  wire             tlb__29 = tlb__28 == 25'h0 & ~tlb__6;
  wire [17:0]      _GEN_1 =
    tlb_superpage_entries_0_tag_vpn[26:9] ^ s1_tlb_req_vaddr[38:21];
  wire             tlb__30 = _GEN_1[17:9] == 9'h0;
  wire             tlb__31 = tlb_superpage_entries_0_level == 2'h0;
  wire             tlb__32 = tlb__31 | _GEN_1[8:0] == 9'h0;
  wire [17:0]      _GEN_2 =
    tlb_superpage_entries_1_tag_vpn[26:9] ^ s1_tlb_req_vaddr[38:21];
  wire             tlb__33 = _GEN_2[17:9] == 9'h0;
  wire             tlb__34 = tlb_superpage_entries_1_level == 2'h0;
  wire             tlb__35 = tlb__34 | _GEN_2[8:0] == 9'h0;
  wire [17:0]      _GEN_3 =
    tlb_superpage_entries_2_tag_vpn[26:9] ^ s1_tlb_req_vaddr[38:21];
  wire             tlb__36 = _GEN_3[17:9] == 9'h0;
  wire             tlb__37 = tlb_superpage_entries_2_level == 2'h0;
  wire             tlb__38 = tlb__37 | _GEN_3[8:0] == 9'h0;
  wire [17:0]      _GEN_4 =
    tlb_superpage_entries_3_tag_vpn[26:9] ^ s1_tlb_req_vaddr[38:21];
  wire             tlb__39 = _GEN_4[17:9] == 9'h0;
  wire             tlb__40 = tlb_superpage_entries_3_level == 2'h0;
  wire             tlb__41 = tlb__40 | _GEN_4[8:0] == 9'h0;
  wire [3:0]       _GEN_5 =
    {{tlb_sectored_entries_0_0_valid_3},
     {tlb_sectored_entries_0_0_valid_2},
     {tlb_sectored_entries_0_0_valid_1},
     {tlb_sectored_entries_0_0_valid_0}};
  wire             tlb_hitsVec_0 = tlb__12 & _GEN_5[s1_tlb_req_vaddr[13:12]] & tlb__15;
  wire [3:0]       _GEN_6 =
    {{tlb_sectored_entries_0_1_valid_3},
     {tlb_sectored_entries_0_1_valid_2},
     {tlb_sectored_entries_0_1_valid_1},
     {tlb_sectored_entries_0_1_valid_0}};
  wire             tlb_hitsVec_1 = tlb__12 & _GEN_6[s1_tlb_req_vaddr[13:12]] & tlb__17;
  wire [3:0]       _GEN_7 =
    {{tlb_sectored_entries_0_2_valid_3},
     {tlb_sectored_entries_0_2_valid_2},
     {tlb_sectored_entries_0_2_valid_1},
     {tlb_sectored_entries_0_2_valid_0}};
  wire             tlb_hitsVec_2 = tlb__12 & _GEN_7[s1_tlb_req_vaddr[13:12]] & tlb__19;
  wire [3:0]       _GEN_8 =
    {{tlb_sectored_entries_0_3_valid_3},
     {tlb_sectored_entries_0_3_valid_2},
     {tlb_sectored_entries_0_3_valid_1},
     {tlb_sectored_entries_0_3_valid_0}};
  wire             tlb_hitsVec_3 = tlb__12 & _GEN_8[s1_tlb_req_vaddr[13:12]] & tlb__21;
  wire [3:0]       _GEN_9 =
    {{tlb_sectored_entries_0_4_valid_3},
     {tlb_sectored_entries_0_4_valid_2},
     {tlb_sectored_entries_0_4_valid_1},
     {tlb_sectored_entries_0_4_valid_0}};
  wire             tlb_hitsVec_4 = tlb__12 & _GEN_9[s1_tlb_req_vaddr[13:12]] & tlb__23;
  wire [3:0]       _GEN_10 =
    {{tlb_sectored_entries_0_5_valid_3},
     {tlb_sectored_entries_0_5_valid_2},
     {tlb_sectored_entries_0_5_valid_1},
     {tlb_sectored_entries_0_5_valid_0}};
  wire             tlb_hitsVec_5 = tlb__12 & _GEN_10[s1_tlb_req_vaddr[13:12]] & tlb__25;
  wire [3:0]       _GEN_11 =
    {{tlb_sectored_entries_0_6_valid_3},
     {tlb_sectored_entries_0_6_valid_2},
     {tlb_sectored_entries_0_6_valid_1},
     {tlb_sectored_entries_0_6_valid_0}};
  wire             tlb_hitsVec_6 = tlb__12 & _GEN_11[s1_tlb_req_vaddr[13:12]] & tlb__27;
  wire [3:0]       _GEN_12 =
    {{tlb_sectored_entries_0_7_valid_3},
     {tlb_sectored_entries_0_7_valid_2},
     {tlb_sectored_entries_0_7_valid_1},
     {tlb_sectored_entries_0_7_valid_0}};
  wire             tlb_hitsVec_7 = tlb__12 & _GEN_12[s1_tlb_req_vaddr[13:12]] & tlb__29;
  wire             tlb_hitsVec_8 =
    tlb__12 & tlb_superpage_entries_0_valid_0 & ~tlb__7 & tlb__30 & tlb__32;
  wire             tlb_hitsVec_9 =
    tlb__12 & tlb_superpage_entries_1_valid_0 & ~tlb__8 & tlb__33 & tlb__35;
  wire             tlb_hitsVec_10 =
    tlb__12 & tlb_superpage_entries_2_valid_0 & ~tlb__9 & tlb__36 & tlb__38;
  wire             tlb_hitsVec_11 =
    tlb__12 & tlb_superpage_entries_3_valid_0 & ~tlb__10 & tlb__39 & tlb__41;
  wire [26:0]      tlb__42 = tlb_special_entry_tag_vpn ^ s1_tlb_req_vaddr[38:12];
  wire             tlb__43 = tlb__42[26:18] == 9'h0;
  wire             tlb__44 = tlb__13 | tlb__42[17:9] == 9'h0;
  wire             tlb__45 = ~(tlb_special_entry_level[1]) | tlb__42[8:0] == 9'h0;
  wire             tlb_hitsVec_12 =
    tlb__12 & tlb_special_entry_valid_0 & ~tlb__11 & tlb__43 & tlb__44 & tlb__45;
  wire [12:0]      tlb__46 =
    {tlb_hitsVec_12,
     tlb_hitsVec_11,
     tlb_hitsVec_10,
     tlb_hitsVec_9,
     tlb_hitsVec_8,
     tlb_hitsVec_7,
     tlb_hitsVec_6,
     tlb_hitsVec_5,
     tlb_hitsVec_4,
     tlb_hitsVec_3,
     tlb_hitsVec_2,
     tlb_hitsVec_1,
     tlb_hitsVec_0};
  wire [3:0][41:0] _GEN_13 =
    {{tlb_sectored_entries_0_0_data_3},
     {tlb_sectored_entries_0_0_data_2},
     {tlb_sectored_entries_0_0_data_1},
     {tlb_sectored_entries_0_0_data_0}};
  wire [41:0]      tlb__47 = _GEN_13[s1_tlb_req_vaddr[13:12]];
  wire [3:0][41:0] _GEN_14 =
    {{tlb_sectored_entries_0_1_data_3},
     {tlb_sectored_entries_0_1_data_2},
     {tlb_sectored_entries_0_1_data_1},
     {tlb_sectored_entries_0_1_data_0}};
  wire [41:0]      tlb__48 = _GEN_14[s1_tlb_req_vaddr[13:12]];
  wire [3:0][41:0] _GEN_15 =
    {{tlb_sectored_entries_0_2_data_3},
     {tlb_sectored_entries_0_2_data_2},
     {tlb_sectored_entries_0_2_data_1},
     {tlb_sectored_entries_0_2_data_0}};
  wire [41:0]      tlb__49 = _GEN_15[s1_tlb_req_vaddr[13:12]];
  wire [3:0][41:0] _GEN_16 =
    {{tlb_sectored_entries_0_3_data_3},
     {tlb_sectored_entries_0_3_data_2},
     {tlb_sectored_entries_0_3_data_1},
     {tlb_sectored_entries_0_3_data_0}};
  wire [41:0]      tlb__50 = _GEN_16[s1_tlb_req_vaddr[13:12]];
  wire [3:0][41:0] _GEN_17 =
    {{tlb_sectored_entries_0_4_data_3},
     {tlb_sectored_entries_0_4_data_2},
     {tlb_sectored_entries_0_4_data_1},
     {tlb_sectored_entries_0_4_data_0}};
  wire [41:0]      tlb__51 = _GEN_17[s1_tlb_req_vaddr[13:12]];
  wire [3:0][41:0] _GEN_18 =
    {{tlb_sectored_entries_0_5_data_3},
     {tlb_sectored_entries_0_5_data_2},
     {tlb_sectored_entries_0_5_data_1},
     {tlb_sectored_entries_0_5_data_0}};
  wire [41:0]      tlb__52 = _GEN_18[s1_tlb_req_vaddr[13:12]];
  wire [3:0][41:0] _GEN_19 =
    {{tlb_sectored_entries_0_6_data_3},
     {tlb_sectored_entries_0_6_data_2},
     {tlb_sectored_entries_0_6_data_1},
     {tlb_sectored_entries_0_6_data_0}};
  wire [41:0]      tlb__53 = _GEN_19[s1_tlb_req_vaddr[13:12]];
  wire [3:0][41:0] _GEN_20 =
    {{tlb_sectored_entries_0_7_data_3},
     {tlb_sectored_entries_0_7_data_2},
     {tlb_sectored_entries_0_7_data_1},
     {tlb_sectored_entries_0_7_data_0}};
  wire [41:0]      tlb__54 = _GEN_20[s1_tlb_req_vaddr[13:12]];
  wire [19:0]      tlb_ppn =
    (tlb_hitsVec_0 ? _tlb_entries_barrier_io_y_ppn : 20'h0)
    | (tlb_hitsVec_1 ? _tlb_entries_barrier_1_io_y_ppn : 20'h0)
    | (tlb_hitsVec_2 ? _tlb_entries_barrier_2_io_y_ppn : 20'h0)
    | (tlb_hitsVec_3 ? _tlb_entries_barrier_3_io_y_ppn : 20'h0)
    | (tlb_hitsVec_4 ? _tlb_entries_barrier_4_io_y_ppn : 20'h0)
    | (tlb_hitsVec_5 ? _tlb_entries_barrier_5_io_y_ppn : 20'h0)
    | (tlb_hitsVec_6 ? _tlb_entries_barrier_6_io_y_ppn : 20'h0)
    | (tlb_hitsVec_7 ? _tlb_entries_barrier_7_io_y_ppn : 20'h0)
    | (tlb_hitsVec_8
         ? {_tlb_entries_barrier_8_io_y_ppn[19:18],
            (tlb__31 ? s1_tlb_req_vaddr[29:21] : 9'h0)
              | _tlb_entries_barrier_8_io_y_ppn[17:9],
            s1_tlb_req_vaddr[20:12] | _tlb_entries_barrier_8_io_y_ppn[8:0]}
         : 20'h0)
    | (tlb_hitsVec_9
         ? {_tlb_entries_barrier_9_io_y_ppn[19:18],
            (tlb__34 ? s1_tlb_req_vaddr[29:21] : 9'h0)
              | _tlb_entries_barrier_9_io_y_ppn[17:9],
            s1_tlb_req_vaddr[20:12] | _tlb_entries_barrier_9_io_y_ppn[8:0]}
         : 20'h0)
    | (tlb_hitsVec_10
         ? {_tlb_entries_barrier_10_io_y_ppn[19:18],
            (tlb__37 ? s1_tlb_req_vaddr[29:21] : 9'h0)
              | _tlb_entries_barrier_10_io_y_ppn[17:9],
            s1_tlb_req_vaddr[20:12] | _tlb_entries_barrier_10_io_y_ppn[8:0]}
         : 20'h0)
    | (tlb_hitsVec_11
         ? {_tlb_entries_barrier_11_io_y_ppn[19:18],
            (tlb__40 ? s1_tlb_req_vaddr[29:21] : 9'h0)
              | _tlb_entries_barrier_11_io_y_ppn[17:9],
            s1_tlb_req_vaddr[20:12] | _tlb_entries_barrier_11_io_y_ppn[8:0]}
         : 20'h0)
    | (tlb_hitsVec_12
         ? {_tlb_entries_barrier_12_io_y_ppn[19:18],
            _GEN | _tlb_entries_barrier_12_io_y_ppn[17:9],
            _GEN_0 | _tlb_entries_barrier_12_io_y_ppn[8:0]}
         : 20'h0) | (tlb__12 ? 20'h0 : s1_tlb_req_vaddr[31:12]);
  wire             tlb_bad_va =
    tlb__12 & io_ptw_ptbr_mode[3]
    & ~(s1_tlb_req_vaddr[39:38] == 2'h0 | (&(s1_tlb_req_vaddr[39:38])));
  wire             tlb_tlb_miss = tlb__12 & ~tlb_bad_va & tlb__46 == 13'h0;
  reg  [6:0]       tlb_state_vec_0;
  reg  [2:0]       tlb_state_reg_1;
  wire             tlb_multipleHits_rightOne_1 = tlb_hitsVec_1 | tlb_hitsVec_2;
  wire             tlb_multipleHits_leftOne_2 =
    tlb_hitsVec_0 | tlb_multipleHits_rightOne_1;
  wire             tlb_multipleHits_rightOne_3 = tlb_hitsVec_4 | tlb_hitsVec_5;
  wire             tlb_multipleHits_rightOne_4 =
    tlb_hitsVec_3 | tlb_multipleHits_rightOne_3;
  wire             tlb_multipleHits_rightOne_6 = tlb_hitsVec_7 | tlb_hitsVec_8;
  wire             tlb_multipleHits_leftOne_8 =
    tlb_hitsVec_6 | tlb_multipleHits_rightOne_6;
  wire             tlb_multipleHits_leftOne_10 = tlb_hitsVec_9 | tlb_hitsVec_10;
  wire             tlb_multipleHits_rightOne_9 = tlb_hitsVec_11 | tlb_hitsVec_12;
  wire             tlb_multipleHits_rightOne_10 =
    tlb_multipleHits_leftOne_10 | tlb_multipleHits_rightOne_9;
  wire             tlb_multipleHits =
    tlb_hitsVec_1 & tlb_hitsVec_2 | tlb_hitsVec_0 & tlb_multipleHits_rightOne_1
    | tlb_hitsVec_4 & tlb_hitsVec_5 | tlb_hitsVec_3 & tlb_multipleHits_rightOne_3
    | tlb_multipleHits_leftOne_2 & tlb_multipleHits_rightOne_4 | tlb_hitsVec_7
    & tlb_hitsVec_8 | tlb_hitsVec_6 & tlb_multipleHits_rightOne_6 | tlb_hitsVec_9
    & tlb_hitsVec_10 | tlb_hitsVec_11 & tlb_hitsVec_12 | tlb_multipleHits_leftOne_10
    & tlb_multipleHits_rightOne_9 | tlb_multipleHits_leftOne_8
    & tlb_multipleHits_rightOne_10
    | (tlb_multipleHits_leftOne_2 | tlb_multipleHits_rightOne_4)
    & (tlb_multipleHits_leftOne_8 | tlb_multipleHits_rightOne_10);
  wire             tlb_io_req_ready = tlb_state == 2'h0;
  wire             _GEN_21 = metaArb_io_in_2_valid | metaArb_io_in_3_valid;
  wire             metaArb_io_out_bits_write =
    resetting | metaArb_io_in_1_valid | metaArb_io_in_2_valid | metaArb_io_in_3_valid
    | metaArb_io_in_4_valid;
  wire             metaArb_ =
    resetting | metaArb_io_in_1_valid | metaArb_io_in_2_valid | metaArb_io_in_3_valid;
  wire             metaArb__0 = metaArb_ | metaArb_io_in_4_valid;
  wire             metaArb__1 = metaArb__0 | metaArb_io_in_6_valid;
  wire             metaArb_io_out_valid = metaArb__1 | io_cpu_req_valid;
  wire             dataArb_ = dataArb_io_in_0_valid | dataArb_io_in_1_valid;
  wire             dataArb__0 = dataArb_ | dataArb_io_in_2_valid;
  wire             dataArb_io_out_valid = dataArb__0 | dataArb_io_in_3_valid;
  reg              s1_valid;
  reg              s1_probe;
  reg  [1:0]       probe_bits_param;
  reg  [3:0]       probe_bits_size;
  reg              probe_bits_source;
  reg  [31:0]      probe_bits_address;
  wire             s1_valid_masked = s1_valid & ~io_cpu_s1_kill;
  reg  [39:0]      s1_vaddr;
  reg  [6:0]       s1_req_tag;
  reg  [4:0]       s1_req_cmd;
  reg  [1:0]       s1_req_size;
  reg              s1_req_signed;
  reg  [1:0]       s1_req_dprv;
  reg              s1_req_dv;
  reg              s1_req_phys;
  reg              s1_req_no_alloc;
  reg              s1_req_no_xcpt;
  reg  [7:0]       s1_req_mask;
  reg  [1:0]       s1_tlb_req_size;
  reg  [4:0]       s1_tlb_req_cmd;
  wire             _GEN_22 = s1_req_cmd == 5'h7;
  wire             _GEN_23 =
    s1_req_cmd == 5'h0 | s1_req_cmd == 5'h10 | s1_req_cmd == 5'h6 | _GEN_22;
  wire             _GEN_24 =
    s1_req_cmd == 5'h4 | s1_req_cmd == 5'h9 | s1_req_cmd == 5'hA | s1_req_cmd == 5'hB
    | s1_req_cmd == 5'h8 | s1_req_cmd == 5'hC | s1_req_cmd == 5'hD | s1_req_cmd == 5'hE
    | s1_req_cmd == 5'hF;
  wire             s1_read = _GEN_23 | _GEN_24;
  wire             _GEN_25 = s1_req_cmd == 5'h11;
  wire             _GEN_26 = s1_req_cmd == 5'h1 | _GEN_25 | _GEN_22;
  wire             s1_write = _GEN_26 | _GEN_24;
  wire             s1_sfence =
    s1_req_cmd == 5'h14 | s1_req_cmd == 5'h15 | s1_req_cmd == 5'h16;
  reg              s1_flush_valid;
  reg              cached_grant_wait;
  reg  [7:0]       flushCounter;
  reg              release_ack_wait;
  reg  [31:0]      release_ack_addr;
  reg  [3:0]       release_state;
  wire             _GEN_27 = release_state == 4'h1;
  wire             _GEN_28 = release_state == 4'h2;
  wire             inWriteback = _GEN_27 | _GEN_28;
  wire             _GEN_29 = ~(|release_state) & ~cached_grant_wait & ~s1_nack;
  reg              uncachedInFlight_0;
  reg  [39:0]      uncachedReqs_0_addr;
  reg  [6:0]       uncachedReqs_0_tag;
  reg  [1:0]       uncachedReqs_0_size;
  reg              uncachedReqs_0_signed;
  wire             _GEN_30 = io_cpu_req_bits_cmd == 5'h7;
  wire             _GEN_31 =
    io_cpu_req_bits_cmd == 5'h0 | io_cpu_req_bits_cmd == 5'h10
    | io_cpu_req_bits_cmd == 5'h6 | _GEN_30;
  wire             _GEN_32 =
    io_cpu_req_bits_cmd == 5'h4 | io_cpu_req_bits_cmd == 5'h9
    | io_cpu_req_bits_cmd == 5'hA | io_cpu_req_bits_cmd == 5'hB
    | io_cpu_req_bits_cmd == 5'h8 | io_cpu_req_bits_cmd == 5'hC
    | io_cpu_req_bits_cmd == 5'hD | io_cpu_req_bits_cmd == 5'hE
    | io_cpu_req_bits_cmd == 5'hF;
  wire             _GEN_33 = io_cpu_req_bits_cmd == 5'h1;
  wire             _GEN_34 = _GEN_33 | io_cpu_req_bits_cmd == 5'h3;
  wire             _GEN_35 = io_cpu_req_bits_cmd == 5'h11;
  wire             _GEN_36 =
    _GEN_31 | _GEN_32 | (_GEN_33 | _GEN_35 | _GEN_30 | _GEN_32) & _GEN_35;
  assign dataArb_io_in_3_valid = io_cpu_req_valid & ~_GEN_34;
  assign dataArb_io_in_3_bits_addr = io_cpu_req_bits_addr[11:0];
  wire             _GEN_37 = dataArb__0 & (_GEN_31 | _GEN_32);
  reg              s1_did_read;
  reg              s1_read_mask;
  assign metaArb_io_in_7_bits_idx = io_cpu_req_bits_addr[11:6];
  wire             s1_cmd_uses_tlb =
    s1_read | s1_write | s1_req_cmd == 5'h5 & s1_req_size[0] | s1_req_cmd == 5'h17;
  wire             _GEN_38 = s1_valid & ~io_cpu_s1_kill;
  wire             tlb_io_req_valid = _GEN_38 & s1_cmd_uses_tlb;
  wire             _GEN_39 =
    ~tlb_io_req_ready & ~io_ptw_resp_valid & ~io_cpu_req_bits_phys;
  wire             _GEN_40 =
    s1_valid & s1_cmd_uses_tlb & (io_ptw_resp_valid | tlb_tlb_miss | tlb_multipleHits);
  wire             tlb_io_sfence_valid = _GEN_38 & s1_sfence;
  assign rockettile_dcache_tag_array_MPORT_en =
    metaArb_io_out_valid & metaArb_io_out_bits_write;
  assign rockettile_dcache_tag_array_s1_meta_en =
    metaArb_io_out_valid & ~metaArb_io_out_bits_write;
  wire             _GEN_41 = _rockettile_dcache_tag_array_ext_RW0_rdata[19:0] == tlb_ppn;
  wire             _GEN_42 = _rockettile_dcache_tag_array_ext_RW0_rdata[41:22] == tlb_ppn;
  wire             _GEN_43 = _rockettile_dcache_tag_array_ext_RW0_rdata[63:44] == tlb_ppn;
  wire             _GEN_44 = _rockettile_dcache_tag_array_ext_RW0_rdata[85:66] == tlb_ppn;
  wire [3:0]       s1_hit_way =
    {(|(_rockettile_dcache_tag_array_ext_RW0_rdata[87:86])) & _GEN_44,
     (|(_rockettile_dcache_tag_array_ext_RW0_rdata[65:64])) & _GEN_43,
     (|(_rockettile_dcache_tag_array_ext_RW0_rdata[43:42])) & _GEN_42,
     (|(_rockettile_dcache_tag_array_ext_RW0_rdata[21:20])) & _GEN_41};
  wire [1:0]       _GEN_45 = {s1_vaddr[0] | (|s1_req_size), ~(s1_vaddr[0])};
  wire [3:0]       _GEN_46 =
    {(s1_vaddr[1] ? _GEN_45 : 2'h0) | {2{s1_req_size[1]}}, s1_vaddr[1] ? 2'h0 : _GEN_45};
  wire [7:0]       s1_mask_xwr =
    {(s1_vaddr[2] ? _GEN_46 : 4'h0) | {4{&s1_req_size}}, s1_vaddr[2] ? 4'h0 : _GEN_46};
  reg              s2_valid;
  wire             s2_valid_no_xcpt =
    s2_valid
    & {_io_cpu_s2_xcpt_ma_ld_output,
       _io_cpu_s2_xcpt_ma_st_output,
       _io_cpu_s2_xcpt_pf_ld_output,
       _io_cpu_s2_xcpt_pf_st_output,
       _io_cpu_s2_xcpt_gf_ld_output,
       _io_cpu_s2_xcpt_gf_st_output,
       _io_cpu_s2_xcpt_ae_ld_output,
       _io_cpu_s2_xcpt_ae_st_output} == 8'h0;
  reg              s2_probe;
  wire             releaseInFlight = s1_probe | s2_probe | (|release_state);
  reg              s2_not_nacked_in_s1;
  wire             s2_valid_masked = s2_valid_no_xcpt & s2_not_nacked_in_s1;
  reg  [6:0]       s2_req_tag;
  reg  [4:0]       s2_req_cmd;
  reg  [1:0]       s2_req_size;
  reg              s2_req_signed;
  reg  [1:0]       s2_req_dprv;
  reg              s2_req_dv;
  reg              s2_req_no_alloc;
  reg              s2_req_no_xcpt;
  reg  [7:0]       s2_req_mask;
  reg              s2_tlb_xcpt_pf_ld;
  reg              s2_tlb_xcpt_pf_st;
  reg              s2_tlb_xcpt_gf_ld;
  reg              s2_tlb_xcpt_gf_st;
  reg              s2_tlb_xcpt_ae_ld;
  reg              s2_tlb_xcpt_ae_st;
  reg              s2_tlb_xcpt_ma_ld;
  reg              s2_tlb_xcpt_ma_st;
  reg              s2_pma_cacheable;
  reg              s2_pma_must_alloc;
  reg  [39:0]      s2_uncached_resp_addr;
  reg  [39:0]      s2_vaddr_r;
  wire             s2_lr = s2_req_cmd == 5'h6;
  wire             s2_sc = s2_req_cmd == 5'h7;
  wire             _GEN_47 = s2_req_cmd == 5'h4;
  wire             _GEN_48 = s2_req_cmd == 5'h9;
  wire             _GEN_49 = s2_req_cmd == 5'hA;
  wire             _GEN_50 = s2_req_cmd == 5'hB;
  wire             _GEN_51 = _GEN_47 | _GEN_48 | _GEN_49 | _GEN_50;
  wire             _GEN_52 = s2_req_cmd == 5'h8;
  wire             _GEN_53 = s2_req_cmd == 5'hC;
  wire             _GEN_54 = s2_req_cmd == 5'hD;
  wire             _GEN_55 = s2_req_cmd == 5'hE;
  wire             _GEN_56 = s2_req_cmd == 5'hF;
  wire             _GEN_57 = _GEN_52 | _GEN_53 | _GEN_54 | _GEN_55 | _GEN_56;
  wire             _GEN_58 = _GEN_51 | _GEN_57;
  wire             s2_read =
    s2_req_cmd == 5'h0 | s2_req_cmd == 5'h10 | s2_lr | s2_sc | _GEN_58;
  wire             _GEN_59 = s2_req_cmd == 5'h11;
  wire             _GEN_60 = s2_req_cmd == 5'h1 | _GEN_59 | s2_sc;
  wire             s2_write = _GEN_60 | _GEN_58;
  wire             s2_readwrite = s2_read | s2_write;
  reg              s2_flush_valid_pre_tag_ecc;
  reg              s2_meta_correctable_errors_r;
  reg              s2_meta_correctable_errors_r_1;
  reg              s2_meta_correctable_errors_r_2;
  reg              s2_meta_correctable_errors_r_3;
  reg              s2_meta_uncorrectable_errors_r;
  reg              s2_meta_uncorrectable_errors_r_1;
  reg              s2_meta_uncorrectable_errors_r_2;
  reg              s2_meta_uncorrectable_errors_r_3;
  wire [3:0]       s2_meta_uncorrectable_errors =
    {s2_meta_uncorrectable_errors_r_3,
     s2_meta_uncorrectable_errors_r_2,
     s2_meta_uncorrectable_errors_r_1,
     s2_meta_uncorrectable_errors_r};
  reg  [21:0]      s2_meta_corrected_r;
  reg  [21:0]      s2_meta_corrected_r_1;
  reg  [21:0]      s2_meta_corrected_r_2;
  reg  [21:0]      s2_meta_corrected_r_3;
  wire [3:0]       _GEN_61 =
    s2_meta_uncorrectable_errors
    | {s2_meta_correctable_errors_r_3,
       s2_meta_correctable_errors_r_2,
       s2_meta_correctable_errors_r_1,
       s2_meta_correctable_errors_r};
  wire             s2_flush_valid = s2_flush_valid_pre_tag_ecc & ~(|_GEN_61);
  reg  [63:0]      s2_data;
  reg  [3:0]       s2_probe_way;
  reg  [1:0]       s2_probe_state_state;
  reg  [3:0]       s2_hit_way;
  reg  [1:0]       s2_hit_state_state;
  reg              s2_waw_hazard;
  wire             _GEN_62 = _GEN_60 | _GEN_58;
  wire             _GEN_63 = _GEN_62 | s2_req_cmd == 5'h3 | s2_lr;
  wire [3:0]       _GEN_64 = {_GEN_62, _GEN_63, s2_hit_state_state};
  wire [1:0]       _GEN_65 = {1'h0, _GEN_64 == 4'hC};
  wire             s2_hit =
    _GEN_64 == 4'h3 | _GEN_64 == 4'h2 | _GEN_64 == 4'h1 | _GEN_64 == 4'h7
    | _GEN_64 == 4'h6 | (&_GEN_64) | _GEN_64 == 4'hE;
  wire [15:0][1:0] _GEN_66 =
    {{2'h3},
     {2'h3},
     {2'h2},
     {_GEN_65},
     {_GEN_65},
     {_GEN_65},
     {_GEN_65},
     {_GEN_65},
     {2'h3},
     {2'h2},
     {2'h2},
     {2'h1},
     {2'h3},
     {2'h2},
     {2'h1},
     {2'h0}};
  wire             _GEN_67 = s2_valid_masked & ~(|_GEN_61);
  wire             s2_valid_hit_maybe_flush_pre_data_ecc_and_waw = _GEN_67 & s2_hit;
  wire             s2_valid_hit_pre_data_ecc_and_waw =
    s2_valid_hit_maybe_flush_pre_data_ecc_and_waw & s2_readwrite;
  wire             s2_valid_flush_line =
    s2_valid_hit_maybe_flush_pre_data_ecc_and_waw & s2_req_cmd == 5'h5 & s2_req_size[0];
  wire             s2_valid_hit = s2_valid_hit_pre_data_ecc_and_waw & ~s2_waw_hazard;
  wire             s2_valid_miss = s2_valid_masked & s2_readwrite & ~(|_GEN_61) & ~s2_hit;
  wire             s2_uncached =
    ~s2_pma_cacheable | s2_req_no_alloc & ~s2_pma_must_alloc & ~(|s2_hit_state_state);
  wire             s2_valid_cached_miss =
    s2_valid_miss & ~s2_uncached & ~uncachedInFlight_0;
  wire             s2_want_victimize =
    s2_valid_cached_miss | s2_valid_flush_line | s2_flush_valid;
  wire             s2_valid_uncached_pending =
    s2_valid_miss & s2_uncached & ~uncachedInFlight_0;
  reg  [1:0]       s2_victim_way_r;
  wire [3:0]       s2_victim_way = 4'h1 << s2_victim_way_r;
  assign metaArb_io_in_2_bits_way_en = (|s2_hit_state_state) ? s2_hit_way : s2_victim_way;
  wire             _GEN_68 = s2_victim_way_r == 2'h0;
  wire             _GEN_69 = s2_victim_way_r == 2'h1;
  wire             _GEN_70 = s2_victim_way_r == 2'h2;
  wire [1:0]       s2_victim_state_state =
    (|s2_hit_state_state)
      ? s2_hit_state_state
      : (_GEN_68 ? s2_meta_corrected_r[21:20] : 2'h0)
        | (_GEN_69 ? s2_meta_corrected_r_1[21:20] : 2'h0)
        | (_GEN_70 ? s2_meta_corrected_r_2[21:20] : 2'h0)
        | ((&s2_victim_way_r) ? s2_meta_corrected_r_3[21:20] : 2'h0);
  wire [3:0]       _GEN_71 = {probe_bits_param, s2_probe_state_state};
  wire             _GEN_72 = _GEN_71 == 4'hB;
  wire             _GEN_73 = _GEN_71 == 4'h4;
  wire             _GEN_74 = _GEN_71 == 4'h5;
  wire             _GEN_75 = _GEN_71 == 4'h6;
  wire             _GEN_76 = _GEN_71 == 4'h7;
  wire             _GEN_77 = _GEN_71 == 4'h0;
  wire             _GEN_78 = _GEN_71 == 4'h1;
  wire             _GEN_79 = _GEN_71 == 4'h2;
  wire             _GEN_80 = _GEN_71 == 4'h3;
  wire             s2_prb_ack_data =
    _GEN_80 | ~(_GEN_79 | _GEN_78 | _GEN_77)
    & (_GEN_76 | ~(_GEN_75 | _GEN_74 | _GEN_73) & _GEN_72);
  wire             _GEN_81 = _GEN_80 | _GEN_79;
  wire             s2_victim_dirty = &s2_victim_state_state;
  wire             _io_cpu_s2_nack_output =
    s2_valid_no_xcpt & ~(s2_valid_uncached_pending & auto_out_a_ready)
    & ~(_GEN_67 & s2_req_cmd == 5'h17) & ~s2_valid_hit;
  assign metaArb_io_in_2_valid =
    s2_valid_hit_pre_data_ecc_and_waw & s2_hit_state_state != _GEN_66[_GEN_64];
  wire             _GEN_82 = _io_cpu_s2_nack_output | metaArb_io_in_2_valid;
  assign metaArb_io_in_1_valid =
    (|_GEN_61) & (s2_valid_masked | s2_flush_valid_pre_tag_ecc | s2_probe);
  assign metaArb_io_in_1_bits_way_en =
    s2_meta_uncorrectable_errors
    | ((|s2_meta_uncorrectable_errors)
         ? 4'h0
         : s2_meta_correctable_errors_r
             ? 4'h1
             : s2_meta_correctable_errors_r_1
                 ? 4'h2
                 : s2_meta_correctable_errors_r_2
                     ? 4'h4
                     : {s2_meta_correctable_errors_r_3, 3'h0});
  assign metaArb_io_in_4_bits_idx = probe_bits_address[11:6];
  assign metaArb_io_in_3_bits_idx = s2_req_addr[11:6];
  assign metaArb_io_in_1_bits_idx =
    s2_probe ? metaArb_io_in_4_bits_idx : metaArb_io_in_3_bits_idx;
  assign metaArb_io_in_1_bits_data =
    {(|s2_meta_uncorrectable_errors)
       ? 2'h0
       : s2_meta_correctable_errors_r
           ? s2_meta_corrected_r[21:20]
           : s2_meta_correctable_errors_r_1
               ? s2_meta_corrected_r_1[21:20]
               : s2_meta_correctable_errors_r_2
                   ? s2_meta_corrected_r_2[21:20]
                   : s2_meta_corrected_r_3[21:20],
     s2_meta_correctable_errors_r
       ? s2_meta_corrected_r[19:0]
       : s2_meta_correctable_errors_r_1
           ? s2_meta_corrected_r_1[19:0]
           : s2_meta_correctable_errors_r_2
               ? s2_meta_corrected_r_2[19:0]
               : s2_meta_corrected_r_3[19:0]};
  assign metaArb_io_in_2_bits_data = {_GEN_66[_GEN_64], s2_req_addr[31:12]};
  reg  [6:0]       lrscCount;
  reg  [33:0]      lrscAddr;
  wire             s2_sc_fail =
    s2_sc & ~((|(lrscCount[6:2])) & lrscAddr == s2_req_addr[39:6]);
  reg  [4:0]       pstore1_cmd;
  reg  [39:0]      pstore1_addr;
  reg  [63:0]      pstore1_data;
  reg  [3:0]       pstore1_way;
  reg  [7:0]       pstore1_mask;
  reg              pstore1_rmw;
  wire             _GEN_83 = s2_valid_hit & s2_write;
  reg              pstore2_valid;
  reg              pstore_drain_on_miss_REG;
  reg              pstore1_held;
  wire             pstore1_valid_likely = s2_valid & s2_write | pstore1_held;
  wire             _GEN_84 = _GEN_83 & ~s2_sc_fail;
  wire             pstore1_valid = _GEN_84 | pstore1_held;
  wire             pstore_drain_structural =
    pstore1_valid_likely & pstore2_valid & (s1_valid & s1_write | pstore1_rmw);
  wire             _GEN_85 = _GEN_83 | pstore1_held;
  wire             _GEN_86 =
    (_GEN_85 & ~pstore1_rmw | pstore2_valid)
    & (~(io_cpu_req_valid & ~_GEN_34) | releaseInFlight | pstore_drain_on_miss_REG);
  assign dataArb_io_in_0_bits_write = pstore_drain_structural | _GEN_86;
  reg  [39:0]      pstore2_addr;
  reg  [3:0]       pstore2_way;
  reg  [7:0]       pstore2_storegen_data_r;
  reg  [7:0]       pstore2_storegen_data_r_1;
  reg  [7:0]       pstore2_storegen_data_r_2;
  reg  [7:0]       pstore2_storegen_data_r_3;
  reg  [7:0]       pstore2_storegen_data_r_4;
  reg  [7:0]       pstore2_storegen_data_r_5;
  reg  [7:0]       pstore2_storegen_data_r_6;
  reg  [7:0]       pstore2_storegen_data_r_7;
  reg  [7:0]       pstore2_storegen_mask;
  assign dataArb_io_in_0_valid = pstore_drain_structural | _GEN_86;
  assign dataArb_io_in_0_bits_addr =
    pstore2_valid ? pstore2_addr[11:0] : pstore1_addr[11:0];
  assign dataArb_io_in_0_bits_way_en = pstore2_valid ? pstore2_way : pstore1_way;
  assign dataArb_io_in_0_bits_wdata =
    pstore2_valid
      ? {pstore2_storegen_data_r_7,
         pstore2_storegen_data_r_6,
         pstore2_storegen_data_r_5,
         pstore2_storegen_data_r_4,
         pstore2_storegen_data_r_3,
         pstore2_storegen_data_r_2,
         pstore2_storegen_data_r_1,
         pstore2_storegen_data_r}
      : pstore1_data;
  assign dataArb_io_in_0_bits_eccMask =
    pstore2_valid ? pstore2_storegen_mask : pstore1_mask;
  wire             _GEN_87 =
    s1_valid & s1_read
    & (pstore1_valid_likely & pstore1_addr[11:3] == s1_vaddr[11:3]
       & (|(pstore1_mask & s1_mask_xwr)) | pstore2_valid
       & pstore2_addr[11:3] == s1_vaddr[11:3] & (|(pstore2_storegen_mask & s1_mask_xwr)));
  wire             get_a_mask_size = s2_req_size == 2'h2;
  wire             get_a_mask_acc = (&s2_req_size) | get_a_mask_size & ~(s2_req_addr[2]);
  wire             get_a_mask_acc_1 = (&s2_req_size) | get_a_mask_size & s2_req_addr[2];
  wire             get_a_mask_size_1 = s2_req_size == 2'h1;
  wire             get_a_mask_eq_2 = ~(s2_req_addr[2]) & ~(s2_req_addr[1]);
  wire             get_a_mask_acc_2 =
    get_a_mask_acc | get_a_mask_size_1 & get_a_mask_eq_2;
  wire             get_a_mask_eq_3 = ~(s2_req_addr[2]) & s2_req_addr[1];
  wire             get_a_mask_acc_3 =
    get_a_mask_acc | get_a_mask_size_1 & get_a_mask_eq_3;
  wire             get_a_mask_eq_4 = s2_req_addr[2] & ~(s2_req_addr[1]);
  wire             get_a_mask_acc_4 =
    get_a_mask_acc_1 | get_a_mask_size_1 & get_a_mask_eq_4;
  wire             get_a_mask_eq_5 = s2_req_addr[2] & s2_req_addr[1];
  wire             get_a_mask_acc_5 =
    get_a_mask_acc_1 | get_a_mask_size_1 & get_a_mask_eq_5;
  wire             put_a_mask_size = s2_req_size == 2'h2;
  wire             put_a_mask_acc = (&s2_req_size) | put_a_mask_size & ~(s2_req_addr[2]);
  wire             put_a_mask_acc_1 = (&s2_req_size) | put_a_mask_size & s2_req_addr[2];
  wire             put_a_mask_size_1 = s2_req_size == 2'h1;
  wire             put_a_mask_eq_2 = ~(s2_req_addr[2]) & ~(s2_req_addr[1]);
  wire             put_a_mask_acc_2 =
    put_a_mask_acc | put_a_mask_size_1 & put_a_mask_eq_2;
  wire             put_a_mask_eq_3 = ~(s2_req_addr[2]) & s2_req_addr[1];
  wire             put_a_mask_acc_3 =
    put_a_mask_acc | put_a_mask_size_1 & put_a_mask_eq_3;
  wire             put_a_mask_eq_4 = s2_req_addr[2] & ~(s2_req_addr[1]);
  wire             put_a_mask_acc_4 =
    put_a_mask_acc_1 | put_a_mask_size_1 & put_a_mask_eq_4;
  wire             put_a_mask_eq_5 = s2_req_addr[2] & s2_req_addr[1];
  wire             put_a_mask_acc_5 =
    put_a_mask_acc_1 | put_a_mask_size_1 & put_a_mask_eq_5;
  wire             atomics_a_mask_size = s2_req_size == 2'h2;
  wire             atomics_a_mask_acc =
    (&s2_req_size) | atomics_a_mask_size & ~(s2_req_addr[2]);
  wire             atomics_a_mask_acc_1 =
    (&s2_req_size) | atomics_a_mask_size & s2_req_addr[2];
  wire             atomics_a_mask_size_1 = s2_req_size == 2'h1;
  wire             atomics_a_mask_eq_2 = ~(s2_req_addr[2]) & ~(s2_req_addr[1]);
  wire             atomics_a_mask_acc_2 =
    atomics_a_mask_acc | atomics_a_mask_size_1 & atomics_a_mask_eq_2;
  wire             atomics_a_mask_eq_3 = ~(s2_req_addr[2]) & s2_req_addr[1];
  wire             atomics_a_mask_acc_3 =
    atomics_a_mask_acc | atomics_a_mask_size_1 & atomics_a_mask_eq_3;
  wire             atomics_a_mask_eq_4 = s2_req_addr[2] & ~(s2_req_addr[1]);
  wire             atomics_a_mask_acc_4 =
    atomics_a_mask_acc_1 | atomics_a_mask_size_1 & atomics_a_mask_eq_4;
  wire             atomics_a_mask_eq_5 = s2_req_addr[2] & s2_req_addr[1];
  wire             atomics_a_mask_acc_5 =
    atomics_a_mask_acc_1 | atomics_a_mask_size_1 & atomics_a_mask_eq_5;
  wire             atomics_a_mask_size_3 = s2_req_size == 2'h2;
  wire             atomics_a_mask_acc_14 =
    (&s2_req_size) | atomics_a_mask_size_3 & ~(s2_req_addr[2]);
  wire             atomics_a_mask_acc_15 =
    (&s2_req_size) | atomics_a_mask_size_3 & s2_req_addr[2];
  wire             atomics_a_mask_size_4 = s2_req_size == 2'h1;
  wire             atomics_a_mask_eq_16 = ~(s2_req_addr[2]) & ~(s2_req_addr[1]);
  wire             atomics_a_mask_acc_16 =
    atomics_a_mask_acc_14 | atomics_a_mask_size_4 & atomics_a_mask_eq_16;
  wire             atomics_a_mask_eq_17 = ~(s2_req_addr[2]) & s2_req_addr[1];
  wire             atomics_a_mask_acc_17 =
    atomics_a_mask_acc_14 | atomics_a_mask_size_4 & atomics_a_mask_eq_17;
  wire             atomics_a_mask_eq_18 = s2_req_addr[2] & ~(s2_req_addr[1]);
  wire             atomics_a_mask_acc_18 =
    atomics_a_mask_acc_15 | atomics_a_mask_size_4 & atomics_a_mask_eq_18;
  wire             atomics_a_mask_eq_19 = s2_req_addr[2] & s2_req_addr[1];
  wire             atomics_a_mask_acc_19 =
    atomics_a_mask_acc_15 | atomics_a_mask_size_4 & atomics_a_mask_eq_19;
  wire             atomics_a_mask_size_6 = s2_req_size == 2'h2;
  wire             atomics_a_mask_acc_28 =
    (&s2_req_size) | atomics_a_mask_size_6 & ~(s2_req_addr[2]);
  wire             atomics_a_mask_acc_29 =
    (&s2_req_size) | atomics_a_mask_size_6 & s2_req_addr[2];
  wire             atomics_a_mask_size_7 = s2_req_size == 2'h1;
  wire             atomics_a_mask_eq_30 = ~(s2_req_addr[2]) & ~(s2_req_addr[1]);
  wire             atomics_a_mask_acc_30 =
    atomics_a_mask_acc_28 | atomics_a_mask_size_7 & atomics_a_mask_eq_30;
  wire             atomics_a_mask_eq_31 = ~(s2_req_addr[2]) & s2_req_addr[1];
  wire             atomics_a_mask_acc_31 =
    atomics_a_mask_acc_28 | atomics_a_mask_size_7 & atomics_a_mask_eq_31;
  wire             atomics_a_mask_eq_32 = s2_req_addr[2] & ~(s2_req_addr[1]);
  wire             atomics_a_mask_acc_32 =
    atomics_a_mask_acc_29 | atomics_a_mask_size_7 & atomics_a_mask_eq_32;
  wire             atomics_a_mask_eq_33 = s2_req_addr[2] & s2_req_addr[1];
  wire             atomics_a_mask_acc_33 =
    atomics_a_mask_acc_29 | atomics_a_mask_size_7 & atomics_a_mask_eq_33;
  wire             atomics_a_mask_size_9 = s2_req_size == 2'h2;
  wire             atomics_a_mask_acc_42 =
    (&s2_req_size) | atomics_a_mask_size_9 & ~(s2_req_addr[2]);
  wire             atomics_a_mask_acc_43 =
    (&s2_req_size) | atomics_a_mask_size_9 & s2_req_addr[2];
  wire             atomics_a_mask_size_10 = s2_req_size == 2'h1;
  wire             atomics_a_mask_eq_44 = ~(s2_req_addr[2]) & ~(s2_req_addr[1]);
  wire             atomics_a_mask_acc_44 =
    atomics_a_mask_acc_42 | atomics_a_mask_size_10 & atomics_a_mask_eq_44;
  wire             atomics_a_mask_eq_45 = ~(s2_req_addr[2]) & s2_req_addr[1];
  wire             atomics_a_mask_acc_45 =
    atomics_a_mask_acc_42 | atomics_a_mask_size_10 & atomics_a_mask_eq_45;
  wire             atomics_a_mask_eq_46 = s2_req_addr[2] & ~(s2_req_addr[1]);
  wire             atomics_a_mask_acc_46 =
    atomics_a_mask_acc_43 | atomics_a_mask_size_10 & atomics_a_mask_eq_46;
  wire             atomics_a_mask_eq_47 = s2_req_addr[2] & s2_req_addr[1];
  wire             atomics_a_mask_acc_47 =
    atomics_a_mask_acc_43 | atomics_a_mask_size_10 & atomics_a_mask_eq_47;
  wire             atomics_a_mask_size_12 = s2_req_size == 2'h2;
  wire             atomics_a_mask_acc_56 =
    (&s2_req_size) | atomics_a_mask_size_12 & ~(s2_req_addr[2]);
  wire             atomics_a_mask_acc_57 =
    (&s2_req_size) | atomics_a_mask_size_12 & s2_req_addr[2];
  wire             atomics_a_mask_size_13 = s2_req_size == 2'h1;
  wire             atomics_a_mask_eq_58 = ~(s2_req_addr[2]) & ~(s2_req_addr[1]);
  wire             atomics_a_mask_acc_58 =
    atomics_a_mask_acc_56 | atomics_a_mask_size_13 & atomics_a_mask_eq_58;
  wire             atomics_a_mask_eq_59 = ~(s2_req_addr[2]) & s2_req_addr[1];
  wire             atomics_a_mask_acc_59 =
    atomics_a_mask_acc_56 | atomics_a_mask_size_13 & atomics_a_mask_eq_59;
  wire             atomics_a_mask_eq_60 = s2_req_addr[2] & ~(s2_req_addr[1]);
  wire             atomics_a_mask_acc_60 =
    atomics_a_mask_acc_57 | atomics_a_mask_size_13 & atomics_a_mask_eq_60;
  wire             atomics_a_mask_eq_61 = s2_req_addr[2] & s2_req_addr[1];
  wire             atomics_a_mask_acc_61 =
    atomics_a_mask_acc_57 | atomics_a_mask_size_13 & atomics_a_mask_eq_61;
  wire             atomics_a_mask_size_15 = s2_req_size == 2'h2;
  wire             atomics_a_mask_acc_70 =
    (&s2_req_size) | atomics_a_mask_size_15 & ~(s2_req_addr[2]);
  wire             atomics_a_mask_acc_71 =
    (&s2_req_size) | atomics_a_mask_size_15 & s2_req_addr[2];
  wire             atomics_a_mask_size_16 = s2_req_size == 2'h1;
  wire             atomics_a_mask_eq_72 = ~(s2_req_addr[2]) & ~(s2_req_addr[1]);
  wire             atomics_a_mask_acc_72 =
    atomics_a_mask_acc_70 | atomics_a_mask_size_16 & atomics_a_mask_eq_72;
  wire             atomics_a_mask_eq_73 = ~(s2_req_addr[2]) & s2_req_addr[1];
  wire             atomics_a_mask_acc_73 =
    atomics_a_mask_acc_70 | atomics_a_mask_size_16 & atomics_a_mask_eq_73;
  wire             atomics_a_mask_eq_74 = s2_req_addr[2] & ~(s2_req_addr[1]);
  wire             atomics_a_mask_acc_74 =
    atomics_a_mask_acc_71 | atomics_a_mask_size_16 & atomics_a_mask_eq_74;
  wire             atomics_a_mask_eq_75 = s2_req_addr[2] & s2_req_addr[1];
  wire             atomics_a_mask_acc_75 =
    atomics_a_mask_acc_71 | atomics_a_mask_size_16 & atomics_a_mask_eq_75;
  wire             atomics_a_mask_size_18 = s2_req_size == 2'h2;
  wire             atomics_a_mask_acc_84 =
    (&s2_req_size) | atomics_a_mask_size_18 & ~(s2_req_addr[2]);
  wire             atomics_a_mask_acc_85 =
    (&s2_req_size) | atomics_a_mask_size_18 & s2_req_addr[2];
  wire             atomics_a_mask_size_19 = s2_req_size == 2'h1;
  wire             atomics_a_mask_eq_86 = ~(s2_req_addr[2]) & ~(s2_req_addr[1]);
  wire             atomics_a_mask_acc_86 =
    atomics_a_mask_acc_84 | atomics_a_mask_size_19 & atomics_a_mask_eq_86;
  wire             atomics_a_mask_eq_87 = ~(s2_req_addr[2]) & s2_req_addr[1];
  wire             atomics_a_mask_acc_87 =
    atomics_a_mask_acc_84 | atomics_a_mask_size_19 & atomics_a_mask_eq_87;
  wire             atomics_a_mask_eq_88 = s2_req_addr[2] & ~(s2_req_addr[1]);
  wire             atomics_a_mask_acc_88 =
    atomics_a_mask_acc_85 | atomics_a_mask_size_19 & atomics_a_mask_eq_88;
  wire             atomics_a_mask_eq_89 = s2_req_addr[2] & s2_req_addr[1];
  wire             atomics_a_mask_acc_89 =
    atomics_a_mask_acc_85 | atomics_a_mask_size_19 & atomics_a_mask_eq_89;
  wire             atomics_a_mask_size_21 = s2_req_size == 2'h2;
  wire             atomics_a_mask_acc_98 =
    (&s2_req_size) | atomics_a_mask_size_21 & ~(s2_req_addr[2]);
  wire             atomics_a_mask_acc_99 =
    (&s2_req_size) | atomics_a_mask_size_21 & s2_req_addr[2];
  wire             atomics_a_mask_size_22 = s2_req_size == 2'h1;
  wire             atomics_a_mask_eq_100 = ~(s2_req_addr[2]) & ~(s2_req_addr[1]);
  wire             atomics_a_mask_acc_100 =
    atomics_a_mask_acc_98 | atomics_a_mask_size_22 & atomics_a_mask_eq_100;
  wire             atomics_a_mask_eq_101 = ~(s2_req_addr[2]) & s2_req_addr[1];
  wire             atomics_a_mask_acc_101 =
    atomics_a_mask_acc_98 | atomics_a_mask_size_22 & atomics_a_mask_eq_101;
  wire             atomics_a_mask_eq_102 = s2_req_addr[2] & ~(s2_req_addr[1]);
  wire             atomics_a_mask_acc_102 =
    atomics_a_mask_acc_99 | atomics_a_mask_size_22 & atomics_a_mask_eq_102;
  wire             atomics_a_mask_eq_103 = s2_req_addr[2] & s2_req_addr[1];
  wire             atomics_a_mask_acc_103 =
    atomics_a_mask_acc_99 | atomics_a_mask_size_22 & atomics_a_mask_eq_103;
  wire             atomics_a_mask_size_24 = s2_req_size == 2'h2;
  wire             atomics_a_mask_acc_112 =
    (&s2_req_size) | atomics_a_mask_size_24 & ~(s2_req_addr[2]);
  wire             atomics_a_mask_acc_113 =
    (&s2_req_size) | atomics_a_mask_size_24 & s2_req_addr[2];
  wire             atomics_a_mask_size_25 = s2_req_size == 2'h1;
  wire             atomics_a_mask_eq_114 = ~(s2_req_addr[2]) & ~(s2_req_addr[1]);
  wire             atomics_a_mask_acc_114 =
    atomics_a_mask_acc_112 | atomics_a_mask_size_25 & atomics_a_mask_eq_114;
  wire             atomics_a_mask_eq_115 = ~(s2_req_addr[2]) & s2_req_addr[1];
  wire             atomics_a_mask_acc_115 =
    atomics_a_mask_acc_112 | atomics_a_mask_size_25 & atomics_a_mask_eq_115;
  wire             atomics_a_mask_eq_116 = s2_req_addr[2] & ~(s2_req_addr[1]);
  wire             atomics_a_mask_acc_116 =
    atomics_a_mask_acc_113 | atomics_a_mask_size_25 & atomics_a_mask_eq_116;
  wire             atomics_a_mask_eq_117 = s2_req_addr[2] & s2_req_addr[1];
  wire             atomics_a_mask_acc_117 =
    atomics_a_mask_acc_113 | atomics_a_mask_size_25 & atomics_a_mask_eq_117;
  wire [7:0]       atomics_mask =
    _GEN_56
      ? {atomics_a_mask_acc_117 | atomics_a_mask_eq_117 & s2_req_addr[0],
         atomics_a_mask_acc_117 | atomics_a_mask_eq_117 & ~(s2_req_addr[0]),
         atomics_a_mask_acc_116 | atomics_a_mask_eq_116 & s2_req_addr[0],
         atomics_a_mask_acc_116 | atomics_a_mask_eq_116 & ~(s2_req_addr[0]),
         atomics_a_mask_acc_115 | atomics_a_mask_eq_115 & s2_req_addr[0],
         atomics_a_mask_acc_115 | atomics_a_mask_eq_115 & ~(s2_req_addr[0]),
         atomics_a_mask_acc_114 | atomics_a_mask_eq_114 & s2_req_addr[0],
         atomics_a_mask_acc_114 | atomics_a_mask_eq_114 & ~(s2_req_addr[0])}
      : _GEN_55
          ? {atomics_a_mask_acc_103 | atomics_a_mask_eq_103 & s2_req_addr[0],
             atomics_a_mask_acc_103 | atomics_a_mask_eq_103 & ~(s2_req_addr[0]),
             atomics_a_mask_acc_102 | atomics_a_mask_eq_102 & s2_req_addr[0],
             atomics_a_mask_acc_102 | atomics_a_mask_eq_102 & ~(s2_req_addr[0]),
             atomics_a_mask_acc_101 | atomics_a_mask_eq_101 & s2_req_addr[0],
             atomics_a_mask_acc_101 | atomics_a_mask_eq_101 & ~(s2_req_addr[0]),
             atomics_a_mask_acc_100 | atomics_a_mask_eq_100 & s2_req_addr[0],
             atomics_a_mask_acc_100 | atomics_a_mask_eq_100 & ~(s2_req_addr[0])}
          : _GEN_54
              ? {atomics_a_mask_acc_89 | atomics_a_mask_eq_89 & s2_req_addr[0],
                 atomics_a_mask_acc_89 | atomics_a_mask_eq_89 & ~(s2_req_addr[0]),
                 atomics_a_mask_acc_88 | atomics_a_mask_eq_88 & s2_req_addr[0],
                 atomics_a_mask_acc_88 | atomics_a_mask_eq_88 & ~(s2_req_addr[0]),
                 atomics_a_mask_acc_87 | atomics_a_mask_eq_87 & s2_req_addr[0],
                 atomics_a_mask_acc_87 | atomics_a_mask_eq_87 & ~(s2_req_addr[0]),
                 atomics_a_mask_acc_86 | atomics_a_mask_eq_86 & s2_req_addr[0],
                 atomics_a_mask_acc_86 | atomics_a_mask_eq_86 & ~(s2_req_addr[0])}
              : _GEN_53
                  ? {atomics_a_mask_acc_75 | atomics_a_mask_eq_75 & s2_req_addr[0],
                     atomics_a_mask_acc_75 | atomics_a_mask_eq_75 & ~(s2_req_addr[0]),
                     atomics_a_mask_acc_74 | atomics_a_mask_eq_74 & s2_req_addr[0],
                     atomics_a_mask_acc_74 | atomics_a_mask_eq_74 & ~(s2_req_addr[0]),
                     atomics_a_mask_acc_73 | atomics_a_mask_eq_73 & s2_req_addr[0],
                     atomics_a_mask_acc_73 | atomics_a_mask_eq_73 & ~(s2_req_addr[0]),
                     atomics_a_mask_acc_72 | atomics_a_mask_eq_72 & s2_req_addr[0],
                     atomics_a_mask_acc_72 | atomics_a_mask_eq_72 & ~(s2_req_addr[0])}
                  : _GEN_52
                      ? {atomics_a_mask_acc_61 | atomics_a_mask_eq_61 & s2_req_addr[0],
                         atomics_a_mask_acc_61 | atomics_a_mask_eq_61 & ~(s2_req_addr[0]),
                         atomics_a_mask_acc_60 | atomics_a_mask_eq_60 & s2_req_addr[0],
                         atomics_a_mask_acc_60 | atomics_a_mask_eq_60 & ~(s2_req_addr[0]),
                         atomics_a_mask_acc_59 | atomics_a_mask_eq_59 & s2_req_addr[0],
                         atomics_a_mask_acc_59 | atomics_a_mask_eq_59 & ~(s2_req_addr[0]),
                         atomics_a_mask_acc_58 | atomics_a_mask_eq_58 & s2_req_addr[0],
                         atomics_a_mask_acc_58 | atomics_a_mask_eq_58 & ~(s2_req_addr[0])}
                      : _GEN_50
                          ? {atomics_a_mask_acc_47 | atomics_a_mask_eq_47
                               & s2_req_addr[0],
                             atomics_a_mask_acc_47 | atomics_a_mask_eq_47
                               & ~(s2_req_addr[0]),
                             atomics_a_mask_acc_46 | atomics_a_mask_eq_46
                               & s2_req_addr[0],
                             atomics_a_mask_acc_46 | atomics_a_mask_eq_46
                               & ~(s2_req_addr[0]),
                             atomics_a_mask_acc_45 | atomics_a_mask_eq_45
                               & s2_req_addr[0],
                             atomics_a_mask_acc_45 | atomics_a_mask_eq_45
                               & ~(s2_req_addr[0]),
                             atomics_a_mask_acc_44 | atomics_a_mask_eq_44
                               & s2_req_addr[0],
                             atomics_a_mask_acc_44 | atomics_a_mask_eq_44
                               & ~(s2_req_addr[0])}
                          : _GEN_49
                              ? {atomics_a_mask_acc_33 | atomics_a_mask_eq_33
                                   & s2_req_addr[0],
                                 atomics_a_mask_acc_33 | atomics_a_mask_eq_33
                                   & ~(s2_req_addr[0]),
                                 atomics_a_mask_acc_32 | atomics_a_mask_eq_32
                                   & s2_req_addr[0],
                                 atomics_a_mask_acc_32 | atomics_a_mask_eq_32
                                   & ~(s2_req_addr[0]),
                                 atomics_a_mask_acc_31 | atomics_a_mask_eq_31
                                   & s2_req_addr[0],
                                 atomics_a_mask_acc_31 | atomics_a_mask_eq_31
                                   & ~(s2_req_addr[0]),
                                 atomics_a_mask_acc_30 | atomics_a_mask_eq_30
                                   & s2_req_addr[0],
                                 atomics_a_mask_acc_30 | atomics_a_mask_eq_30
                                   & ~(s2_req_addr[0])}
                              : _GEN_48
                                  ? {atomics_a_mask_acc_19 | atomics_a_mask_eq_19
                                       & s2_req_addr[0],
                                     atomics_a_mask_acc_19 | atomics_a_mask_eq_19
                                       & ~(s2_req_addr[0]),
                                     atomics_a_mask_acc_18 | atomics_a_mask_eq_18
                                       & s2_req_addr[0],
                                     atomics_a_mask_acc_18 | atomics_a_mask_eq_18
                                       & ~(s2_req_addr[0]),
                                     atomics_a_mask_acc_17 | atomics_a_mask_eq_17
                                       & s2_req_addr[0],
                                     atomics_a_mask_acc_17 | atomics_a_mask_eq_17
                                       & ~(s2_req_addr[0]),
                                     atomics_a_mask_acc_16 | atomics_a_mask_eq_16
                                       & s2_req_addr[0],
                                     atomics_a_mask_acc_16 | atomics_a_mask_eq_16
                                       & ~(s2_req_addr[0])}
                                  : _GEN_47
                                      ? {atomics_a_mask_acc_5 | atomics_a_mask_eq_5
                                           & s2_req_addr[0],
                                         atomics_a_mask_acc_5 | atomics_a_mask_eq_5
                                           & ~(s2_req_addr[0]),
                                         atomics_a_mask_acc_4 | atomics_a_mask_eq_4
                                           & s2_req_addr[0],
                                         atomics_a_mask_acc_4 | atomics_a_mask_eq_4
                                           & ~(s2_req_addr[0]),
                                         atomics_a_mask_acc_3 | atomics_a_mask_eq_3
                                           & s2_req_addr[0],
                                         atomics_a_mask_acc_3 | atomics_a_mask_eq_3
                                           & ~(s2_req_addr[0]),
                                         atomics_a_mask_acc_2 | atomics_a_mask_eq_2
                                           & s2_req_addr[0],
                                         atomics_a_mask_acc_2 | atomics_a_mask_eq_2
                                           & ~(s2_req_addr[0])}
                                      : 8'h0;
  wire             nodeOut_a_deq_valid =
    s2_valid_uncached_pending | s2_valid_cached_miss
    & ~(release_ack_wait & (s2_req_addr[20:6] ^ release_ack_addr[20:6]) == 15'h0)
    & ~s2_victim_dirty;
  wire             _GEN_88 =
    ~s2_write | _GEN_59 | ~s2_read | _GEN_56 | _GEN_55 | _GEN_54 | _GEN_53 | _GEN_52
    | _GEN_50 | _GEN_49 | _GEN_48 | _GEN_47;
  wire             _GEN_89 = nodeOut_d_ready & auto_out_d_valid;
  wire [26:0]      _GEN_90 = 27'hFFF << auto_out_d_bits_size;
  wire [8:0]       beats1 = auto_out_d_bits_opcode[0] ? ~(_GEN_90[11:3]) : 9'h0;
  reg  [8:0]       counter;
  wire [8:0]       counter1 = counter - 9'h1;
  wire             d_last = counter == 9'h1 | beats1 == 9'h0;
  wire [8:0]       count = beats1 & ~counter1;
  wire             grantIsUncachedData = auto_out_d_bits_opcode == 3'h1;
  wire             grantIsUncached =
    grantIsUncachedData | auto_out_d_bits_opcode == 3'h0 | auto_out_d_bits_opcode == 3'h2;
  wire             grantIsRefill = auto_out_d_bits_opcode == 3'h5;
  wire             grantIsCached = auto_out_d_bits_opcode == 3'h4 | grantIsRefill;
  wire             grantIsVoluntary = auto_out_d_bits_opcode == 3'h6;
  reg              grantInProgress;
  reg  [2:0]       blockProbeAfterGrantCount;
  wire             _GEN_91 = release_state == 4'h6;
  wire             _GEN_92 = release_state == 4'h9;
  wire             _GEN_93 = _GEN_27 | _GEN_91 | _GEN_92;
  wire             _GEN_94 = _GEN_89 & grantIsCached;
  wire             _GEN_95 = auto_out_d_bits_source & d_last;
  wire             _GEN_96 =
    ~_GEN_89 | grantIsCached | ~(grantIsUncached & grantIsUncachedData);
  wire             _GEN_97 = grantIsRefill & dataArb_io_in_0_valid;
  wire             nodeOut_e_valid =
    ~_GEN_97 & auto_out_d_valid & ~(|counter) & grantIsCached & ~_GEN_93;
  assign dataArb_io_in_1_bits_addr = {s2_req_addr[11:6] | count[8:3], count[2:0], 3'h0};
  assign metaArb_io_in_3_valid =
    grantIsCached & d_last & _GEN_89 & ~auto_out_d_bits_denied;
  wire [3:0]       _GEN_98 = {_GEN_62, _GEN_63, auto_out_d_bits_param};
  assign metaArb_io_in_3_bits_data =
    {_GEN_98 == 4'hC
       ? 2'h3
       : _GEN_98 == 4'h4 | _GEN_98 == 4'h0 ? 2'h2 : {1'h0, _GEN_98 == 4'h1},
     s2_req_addr[31:12]};
  reg              blockUncachedGrant;
  wire             _GEN_99 = grantIsUncachedData & (blockUncachedGrant | s1_valid);
  assign nodeOut_d_ready =
    ~(_GEN_99 | _GEN_97) & (~grantIsCached | ((|counter) | auto_out_e_ready) & ~_GEN_93);
  wire             _io_cpu_req_ready_output =
    _GEN_99
      ? ~(auto_out_d_valid | _GEN_39 | metaArb__1 | _GEN_37) & _GEN_29
      : ~(_GEN_39 | metaArb__1 | _GEN_37) & _GEN_29;
  wire             _GEN_100 = _GEN_99 & auto_out_d_valid;
  assign dataArb_io_in_1_valid = _GEN_100 | auto_out_d_valid & grantIsRefill & ~_GEN_93;
  assign dataArb_io_in_1_bits_write = ~_GEN_99 | ~auto_out_d_valid;
  wire             block_probe_for_core_progress =
    (|blockProbeAfterGrantCount) | (|(lrscCount[6:2]));
  wire             nodeOut_b_ready =
    ~metaArb__0
    & ~(block_probe_for_core_progress | releaseInFlight | release_ack_wait
        & (auto_out_b_bits_address[20:6] ^ release_ack_addr[20:6]) == 15'h0
        | grantInProgress | s1_valid | s2_valid);
  wire             _GEN_101 = auto_out_c_ready & nodeOut_c_valid;
  wire [26:0]      _GEN_102 = 27'hFFF << nodeOut_c_bits_size;
  wire [8:0]       beats1_1 = nodeOut_c_bits_opcode[0] ? ~(_GEN_102[11:3]) : 9'h0;
  reg  [8:0]       counter_1;
  wire [8:0]       counter1_1 = counter_1 - 9'h1;
  wire             c_first = counter_1 == 9'h0;
  wire             releaseDone = (counter_1 == 9'h1 | beats1_1 == 9'h0) & _GEN_101;
  reg              s1_release_data_valid;
  reg              s2_release_data_valid;
  wire             releaseRejected = s2_release_data_valid & ~_GEN_101;
  wire [9:0]       releaseDataBeat =
    {1'h0, beats1_1 & ~counter1_1}
    + {8'h0,
       releaseRejected
         ? 2'h0
         : {1'h0, s1_release_data_valid} + {1'h0, s2_release_data_valid}};
  wire             _GEN_103 = (|_GEN_61) | s2_prb_ack_data;
  assign s1_nack =
    s2_probe
      ? _GEN_103 | (|s2_probe_state_state) | ~releaseDone | _GEN_87 | _GEN_82 | _GEN_40
      : _GEN_87 | _GEN_82 | _GEN_40;
  wire             _GEN_104 = release_state == 4'h4;
  assign metaArb_io_in_6_valid =
    _GEN_104 | auto_out_b_valid
    & (~block_probe_for_core_progress | (|lrscCount) & ~(|(lrscCount[6:2])));
  assign metaArb_io_in_6_bits_idx =
    _GEN_104 ? metaArb_io_in_4_bits_idx : auto_out_b_bits_address[11:6];
  wire             _GEN_105 = release_state == 4'h5;
  wire             _GEN_106 = release_state == 4'h3;
  assign nodeOut_c_valid =
    _GEN_106 | _GEN_105 | s2_probe & ~_GEN_103 | s2_release_data_valid
    & ~(c_first & release_ack_wait);
  assign nodeOut_c_bits_opcode = _GEN_93 ? {2'h3, ~_GEN_92} : {2'h2, _GEN_28};
  assign nodeOut_c_bits_size = _GEN_93 ? 4'h6 : probe_bits_size;
  assign releaseWay = _GEN_93 ? metaArb_io_in_2_bits_way_en : s2_probe_way;
  assign dataArb_io_in_2_valid = inWriteback & releaseDataBeat < 10'h8;
  assign dataArb_io_in_2_bits_addr =
    {metaArb_io_in_4_bits_idx, releaseDataBeat[2:0], 3'h0};
  assign metaArb_io_in_4_valid = _GEN_91 | release_state == 4'h7;
  assign metaArb_io_in_7_bits_data =
    {_GEN_93
       ? 2'h0
       : _GEN_81
           ? 2'h2
           : _GEN_78 ? 2'h1 : _GEN_77 ? 2'h0 : {1'h0, _GEN_76 | _GEN_75 | _GEN_74},
     probe_bits_address[31:12]};
  reg              io_cpu_s2_xcpt_REG;
  assign _io_cpu_s2_xcpt_pf_ld_output = io_cpu_s2_xcpt_REG & s2_tlb_xcpt_pf_ld;
  assign _io_cpu_s2_xcpt_pf_st_output = io_cpu_s2_xcpt_REG & s2_tlb_xcpt_pf_st;
  assign _io_cpu_s2_xcpt_gf_ld_output = io_cpu_s2_xcpt_REG & s2_tlb_xcpt_gf_ld;
  assign _io_cpu_s2_xcpt_gf_st_output = io_cpu_s2_xcpt_REG & s2_tlb_xcpt_gf_st;
  assign _io_cpu_s2_xcpt_ae_ld_output = io_cpu_s2_xcpt_REG & s2_tlb_xcpt_ae_ld;
  assign _io_cpu_s2_xcpt_ae_st_output = io_cpu_s2_xcpt_REG & s2_tlb_xcpt_ae_st;
  assign _io_cpu_s2_xcpt_ma_ld_output = io_cpu_s2_xcpt_REG & s2_tlb_xcpt_ma_ld;
  assign _io_cpu_s2_xcpt_ma_st_output = io_cpu_s2_xcpt_REG & s2_tlb_xcpt_ma_st;
  reg              doUncachedResp;
  wire             _io_cpu_replay_next_output = _GEN_89 & grantIsUncachedData;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      automatic logic _GEN_107 = _GEN_89 & ~grantIsCached;
      if (tlb_io_sfence_valid & ~reset
          & ~(~(s1_req_size[0]) | s1_vaddr[38:12] == s1_tlb_req_vaddr[38:12])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at TLB.scala:719 assert(!io.sfence.bits.rs1 || (io.sfence.bits.addr >> pgIdxBits) === vpn)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_GEN_36 | ~_GEN_34)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at DCache.scala:1186 assert(!needsRead(req) || res)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(~(s1_valid_masked & _GEN_25)
              | (&(s1_mask_xwr | ~io_cpu_s1_data_mask)))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at DCache.scala:329 assert(!(s1_valid_masked && s1_req.cmd === M_PWR) || (s1_mask_xwr | ~io.cpu.s1_data.mask).andR)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_GEN_36 | ~_GEN_34)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at DCache.scala:1186 assert(!needsRead(req) || res)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(pstore1_rmw | _GEN_85 == pstore1_valid)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at DCache.scala:510 assert(pstore1_rmw || pstore1_valid_not_rmw(io.cpu.s2_kill) === pstore1_valid)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_94 & ~reset & ~cached_grant_wait) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: A GrantData was unexpected by the dcache.\n    at DCache.scala:677 assert(cached_grant_wait, \"A GrantData was unexpected by the dcache.\")\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_107 & grantIsUncached & _GEN_95 & ~reset & ~uncachedInFlight_0) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: An AccessAck was unexpected by the dcache.\n    at DCache.scala:687 assert(f, \"An AccessAck was unexpected by the dcache.\") // TODO must handle Ack coming back on same cycle!\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_107 & ~grantIsUncached & grantIsVoluntary & ~reset
          & ~release_ack_wait) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: A ReleaseAck was unexpected by the dcache.\n    at DCache.scala:708 assert(release_ack_wait, \"A ReleaseAck was unexpected by the dcache.\") // TODO should handle Ack coming back on same cycle!\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & (auto_out_e_ready
             & nodeOut_e_valid) != (_GEN_89 & ~(|counter) & grantIsCached)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at DCache.scala:716 assert(tl_out.e.fire === (tl_out.d.fire && d_first && grantIsCached))\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (s2_want_victimize & ~reset
          & ~(s2_valid_flush_line | s2_flush_valid | _io_cpu_s2_nack_output)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at DCache.scala:817 assert(s2_valid_flush_line || s2_flush_valid || io.cpu.s2_nack)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (doUncachedResp & ~reset & s2_valid_hit) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at DCache.scala:952 assert(!s2_valid_hit)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  wire [31:0]      io_cpu_resp_bits_data_zeroed =
    s2_req_addr[2] ? s2_data[63:32] : s2_data[31:0];
  wire             _GEN_108 = s2_req_size == 2'h2;
  wire [15:0]      io_cpu_resp_bits_data_zeroed_1 =
    s2_req_addr[1]
      ? io_cpu_resp_bits_data_zeroed[31:16]
      : io_cpu_resp_bits_data_zeroed[15:0];
  wire [7:0]       io_cpu_resp_bits_data_zeroed_2 =
    s2_sc
      ? 8'h0
      : s2_req_addr[0]
          ? io_cpu_resp_bits_data_zeroed_1[15:8]
          : io_cpu_resp_bits_data_zeroed_1[7:0];
  wire [31:0]      io_cpu_resp_bits_data_word_bypass_zeroed =
    s2_req_addr[2] ? s2_data[63:32] : s2_data[31:0];
  reg              REG;
  assign metaArb_io_in_5_bits_idx = flushCounter[5:0];
  reg  [8:0]       io_cpu_perf_release_counter;
  always @(posedge clock) begin
    automatic logic        tlb_invalidate_refill =
      tlb_io_ptw_req_valid | (&tlb_state) | tlb_io_sfence_valid;
    automatic logic        tlb_deny_access_to_debug =
      ~(tlb_mpu_priv[2]) & tlb_mpu_ppn == 28'h0;
    automatic logic        tlb_newEntry_pr;
    automatic logic        tlb_newEntry_pw;
    automatic logic        tlb__55;
    automatic logic        tlb__56;
    automatic logic        tlb_sector_hits_1;
    automatic logic        tlb__57;
    automatic logic        tlb_sector_hits_2;
    automatic logic        tlb__58;
    automatic logic        tlb_sector_hits_3;
    automatic logic        tlb__59;
    automatic logic        tlb_sector_hits_4;
    automatic logic        tlb__60;
    automatic logic        tlb_sector_hits_5;
    automatic logic        tlb__61;
    automatic logic        tlb_sector_hits_6;
    automatic logic        tlb__62;
    automatic logic        tlb_sector_hits_7;
    automatic logic        tlb__63;
    automatic logic        tlb__64;
    automatic logic        tlb__65;
    automatic logic        tlb__66;
    automatic logic        tlb_refill_v;
    automatic logic        tlb__67 =
      io_ptw_resp_bits_pte_v
      & (io_ptw_resp_bits_pte_r | io_ptw_resp_bits_pte_x & ~io_ptw_resp_bits_pte_w)
      & io_ptw_resp_bits_pte_a;
    automatic logic        _GEN_109 = io_ptw_resp_valid & ~io_ptw_resp_bits_homogeneous;
    automatic logic        _GEN_110 = _GEN_109 | tlb_special_entry_valid_0;
    automatic logic [41:0] tlb__68;
    automatic logic        _GEN_111 =
      io_ptw_resp_valid & io_ptw_resp_bits_homogeneous & ~(io_ptw_resp_bits_level[1])
      & tlb_waddr == 2'h0;
    automatic logic [1:0]  _GEN_112;
    automatic logic        _GEN_113 =
      _GEN_111 ? ~tlb_invalidate_refill : tlb_superpage_entries_0_valid_0;
    automatic logic        _GEN_114 =
      io_ptw_resp_valid & io_ptw_resp_bits_homogeneous & ~(io_ptw_resp_bits_level[1])
      & tlb_waddr == 2'h1;
    automatic logic        _GEN_115 =
      _GEN_114 ? ~tlb_invalidate_refill : tlb_superpage_entries_1_valid_0;
    automatic logic        _GEN_116 =
      io_ptw_resp_valid & io_ptw_resp_bits_homogeneous & ~(io_ptw_resp_bits_level[1])
      & tlb_waddr == 2'h2;
    automatic logic        _GEN_117 =
      _GEN_116 ? ~tlb_invalidate_refill : tlb_superpage_entries_2_valid_0;
    automatic logic        _GEN_118 =
      io_ptw_resp_valid & io_ptw_resp_bits_homogeneous & ~(io_ptw_resp_bits_level[1])
      & (&tlb_waddr);
    automatic logic        _GEN_119 =
      _GEN_118 ? ~tlb_invalidate_refill : tlb_superpage_entries_3_valid_0;
    automatic logic [2:0]  tlb_waddr_1 =
      tlb_r_sectored_hit_valid ? tlb_r_sectored_hit_bits : tlb_r_sectored_repl_addr;
    automatic logic        tlb__69 = tlb_waddr_1 == 3'h0;
    automatic logic        _GEN_120 =
      ~io_ptw_resp_bits_homogeneous | ~(io_ptw_resp_bits_level[1]);
    automatic logic        _GEN_121 = ~io_ptw_resp_valid | _GEN_120 | ~tlb__69;
    automatic logic        _GEN_122 = tlb_r_refill_tag[1:0] == 2'h0;
    automatic logic        _GEN_123 = tlb_r_refill_tag[1:0] == 2'h1;
    automatic logic        _GEN_124 = tlb_r_refill_tag[1:0] == 2'h2;
    automatic logic        _GEN_125 =
      _GEN_121
        ? tlb_sectored_entries_0_0_valid_0
        : ~tlb_invalidate_refill
          & (_GEN_122 | tlb_r_sectored_hit_valid & tlb_sectored_entries_0_0_valid_0);
    automatic logic        _GEN_126 =
      _GEN_121
        ? tlb_sectored_entries_0_0_valid_1
        : ~tlb_invalidate_refill
          & (_GEN_123 | tlb_r_sectored_hit_valid & tlb_sectored_entries_0_0_valid_1);
    automatic logic        _GEN_127 =
      _GEN_121
        ? tlb_sectored_entries_0_0_valid_2
        : ~tlb_invalidate_refill
          & (_GEN_124 | tlb_r_sectored_hit_valid & tlb_sectored_entries_0_0_valid_2);
    automatic logic        _GEN_128 =
      _GEN_121
        ? tlb_sectored_entries_0_0_valid_3
        : ~tlb_invalidate_refill
          & ((&(tlb_r_refill_tag[1:0])) | tlb_r_sectored_hit_valid
             & tlb_sectored_entries_0_0_valid_3);
    automatic logic        tlb__70 = tlb_waddr_1 == 3'h1;
    automatic logic        _GEN_129 = ~io_ptw_resp_valid | _GEN_120 | ~tlb__70;
    automatic logic        _GEN_130 = tlb_r_refill_tag[1:0] == 2'h0;
    automatic logic        _GEN_131 = tlb_r_refill_tag[1:0] == 2'h1;
    automatic logic        _GEN_132 = tlb_r_refill_tag[1:0] == 2'h2;
    automatic logic        _GEN_133 =
      _GEN_129
        ? tlb_sectored_entries_0_1_valid_0
        : ~tlb_invalidate_refill
          & (_GEN_130 | tlb_r_sectored_hit_valid & tlb_sectored_entries_0_1_valid_0);
    automatic logic        _GEN_134 =
      _GEN_129
        ? tlb_sectored_entries_0_1_valid_1
        : ~tlb_invalidate_refill
          & (_GEN_131 | tlb_r_sectored_hit_valid & tlb_sectored_entries_0_1_valid_1);
    automatic logic        _GEN_135 =
      _GEN_129
        ? tlb_sectored_entries_0_1_valid_2
        : ~tlb_invalidate_refill
          & (_GEN_132 | tlb_r_sectored_hit_valid & tlb_sectored_entries_0_1_valid_2);
    automatic logic        _GEN_136 =
      _GEN_129
        ? tlb_sectored_entries_0_1_valid_3
        : ~tlb_invalidate_refill
          & ((&(tlb_r_refill_tag[1:0])) | tlb_r_sectored_hit_valid
             & tlb_sectored_entries_0_1_valid_3);
    automatic logic        tlb__71 = tlb_waddr_1 == 3'h2;
    automatic logic        _GEN_137 = ~io_ptw_resp_valid | _GEN_120 | ~tlb__71;
    automatic logic        _GEN_138 = tlb_r_refill_tag[1:0] == 2'h0;
    automatic logic        _GEN_139 = tlb_r_refill_tag[1:0] == 2'h1;
    automatic logic        _GEN_140 = tlb_r_refill_tag[1:0] == 2'h2;
    automatic logic        _GEN_141 =
      _GEN_137
        ? tlb_sectored_entries_0_2_valid_0
        : ~tlb_invalidate_refill
          & (_GEN_138 | tlb_r_sectored_hit_valid & tlb_sectored_entries_0_2_valid_0);
    automatic logic        _GEN_142 =
      _GEN_137
        ? tlb_sectored_entries_0_2_valid_1
        : ~tlb_invalidate_refill
          & (_GEN_139 | tlb_r_sectored_hit_valid & tlb_sectored_entries_0_2_valid_1);
    automatic logic        _GEN_143 =
      _GEN_137
        ? tlb_sectored_entries_0_2_valid_2
        : ~tlb_invalidate_refill
          & (_GEN_140 | tlb_r_sectored_hit_valid & tlb_sectored_entries_0_2_valid_2);
    automatic logic        _GEN_144 =
      _GEN_137
        ? tlb_sectored_entries_0_2_valid_3
        : ~tlb_invalidate_refill
          & ((&(tlb_r_refill_tag[1:0])) | tlb_r_sectored_hit_valid
             & tlb_sectored_entries_0_2_valid_3);
    automatic logic        tlb__72 = tlb_waddr_1 == 3'h3;
    automatic logic        _GEN_145 = ~io_ptw_resp_valid | _GEN_120 | ~tlb__72;
    automatic logic        _GEN_146 = tlb_r_refill_tag[1:0] == 2'h0;
    automatic logic        _GEN_147 = tlb_r_refill_tag[1:0] == 2'h1;
    automatic logic        _GEN_148 = tlb_r_refill_tag[1:0] == 2'h2;
    automatic logic        _GEN_149 =
      _GEN_145
        ? tlb_sectored_entries_0_3_valid_0
        : ~tlb_invalidate_refill
          & (_GEN_146 | tlb_r_sectored_hit_valid & tlb_sectored_entries_0_3_valid_0);
    automatic logic        _GEN_150 =
      _GEN_145
        ? tlb_sectored_entries_0_3_valid_1
        : ~tlb_invalidate_refill
          & (_GEN_147 | tlb_r_sectored_hit_valid & tlb_sectored_entries_0_3_valid_1);
    automatic logic        _GEN_151 =
      _GEN_145
        ? tlb_sectored_entries_0_3_valid_2
        : ~tlb_invalidate_refill
          & (_GEN_148 | tlb_r_sectored_hit_valid & tlb_sectored_entries_0_3_valid_2);
    automatic logic        _GEN_152 =
      _GEN_145
        ? tlb_sectored_entries_0_3_valid_3
        : ~tlb_invalidate_refill
          & ((&(tlb_r_refill_tag[1:0])) | tlb_r_sectored_hit_valid
             & tlb_sectored_entries_0_3_valid_3);
    automatic logic        tlb__73 = tlb_waddr_1 == 3'h4;
    automatic logic        _GEN_153 = ~io_ptw_resp_valid | _GEN_120 | ~tlb__73;
    automatic logic        _GEN_154 = tlb_r_refill_tag[1:0] == 2'h0;
    automatic logic        _GEN_155 = tlb_r_refill_tag[1:0] == 2'h1;
    automatic logic        _GEN_156 = tlb_r_refill_tag[1:0] == 2'h2;
    automatic logic        _GEN_157 =
      _GEN_153
        ? tlb_sectored_entries_0_4_valid_0
        : ~tlb_invalidate_refill
          & (_GEN_154 | tlb_r_sectored_hit_valid & tlb_sectored_entries_0_4_valid_0);
    automatic logic        _GEN_158 =
      _GEN_153
        ? tlb_sectored_entries_0_4_valid_1
        : ~tlb_invalidate_refill
          & (_GEN_155 | tlb_r_sectored_hit_valid & tlb_sectored_entries_0_4_valid_1);
    automatic logic        _GEN_159 =
      _GEN_153
        ? tlb_sectored_entries_0_4_valid_2
        : ~tlb_invalidate_refill
          & (_GEN_156 | tlb_r_sectored_hit_valid & tlb_sectored_entries_0_4_valid_2);
    automatic logic        _GEN_160 =
      _GEN_153
        ? tlb_sectored_entries_0_4_valid_3
        : ~tlb_invalidate_refill
          & ((&(tlb_r_refill_tag[1:0])) | tlb_r_sectored_hit_valid
             & tlb_sectored_entries_0_4_valid_3);
    automatic logic        tlb__74 = tlb_waddr_1 == 3'h5;
    automatic logic        _GEN_161 = ~io_ptw_resp_valid | _GEN_120 | ~tlb__74;
    automatic logic        _GEN_162 = tlb_r_refill_tag[1:0] == 2'h0;
    automatic logic        _GEN_163 = tlb_r_refill_tag[1:0] == 2'h1;
    automatic logic        _GEN_164 = tlb_r_refill_tag[1:0] == 2'h2;
    automatic logic        _GEN_165 =
      _GEN_161
        ? tlb_sectored_entries_0_5_valid_0
        : ~tlb_invalidate_refill
          & (_GEN_162 | tlb_r_sectored_hit_valid & tlb_sectored_entries_0_5_valid_0);
    automatic logic        _GEN_166 =
      _GEN_161
        ? tlb_sectored_entries_0_5_valid_1
        : ~tlb_invalidate_refill
          & (_GEN_163 | tlb_r_sectored_hit_valid & tlb_sectored_entries_0_5_valid_1);
    automatic logic        _GEN_167 =
      _GEN_161
        ? tlb_sectored_entries_0_5_valid_2
        : ~tlb_invalidate_refill
          & (_GEN_164 | tlb_r_sectored_hit_valid & tlb_sectored_entries_0_5_valid_2);
    automatic logic        _GEN_168 =
      _GEN_161
        ? tlb_sectored_entries_0_5_valid_3
        : ~tlb_invalidate_refill
          & ((&(tlb_r_refill_tag[1:0])) | tlb_r_sectored_hit_valid
             & tlb_sectored_entries_0_5_valid_3);
    automatic logic        tlb__75 = tlb_waddr_1 == 3'h6;
    automatic logic        _GEN_169 = ~io_ptw_resp_valid | _GEN_120 | ~tlb__75;
    automatic logic        _GEN_170 = tlb_r_refill_tag[1:0] == 2'h0;
    automatic logic        _GEN_171 = tlb_r_refill_tag[1:0] == 2'h1;
    automatic logic        _GEN_172 = tlb_r_refill_tag[1:0] == 2'h2;
    automatic logic        _GEN_173 =
      _GEN_169
        ? tlb_sectored_entries_0_6_valid_0
        : ~tlb_invalidate_refill
          & (_GEN_170 | tlb_r_sectored_hit_valid & tlb_sectored_entries_0_6_valid_0);
    automatic logic        _GEN_174 =
      _GEN_169
        ? tlb_sectored_entries_0_6_valid_1
        : ~tlb_invalidate_refill
          & (_GEN_171 | tlb_r_sectored_hit_valid & tlb_sectored_entries_0_6_valid_1);
    automatic logic        _GEN_175 =
      _GEN_169
        ? tlb_sectored_entries_0_6_valid_2
        : ~tlb_invalidate_refill
          & (_GEN_172 | tlb_r_sectored_hit_valid & tlb_sectored_entries_0_6_valid_2);
    automatic logic        _GEN_176 =
      _GEN_169
        ? tlb_sectored_entries_0_6_valid_3
        : ~tlb_invalidate_refill
          & ((&(tlb_r_refill_tag[1:0])) | tlb_r_sectored_hit_valid
             & tlb_sectored_entries_0_6_valid_3);
    automatic logic        _GEN_177 = ~io_ptw_resp_valid | _GEN_120 | ~(&tlb_waddr_1);
    automatic logic        _GEN_178 = tlb_r_refill_tag[1:0] == 2'h0;
    automatic logic        _GEN_179 = tlb_r_refill_tag[1:0] == 2'h1;
    automatic logic        _GEN_180 = tlb_r_refill_tag[1:0] == 2'h2;
    automatic logic        _GEN_181 =
      _GEN_177
        ? tlb_sectored_entries_0_7_valid_0
        : ~tlb_invalidate_refill
          & (_GEN_178 | tlb_r_sectored_hit_valid & tlb_sectored_entries_0_7_valid_0);
    automatic logic        _GEN_182 =
      _GEN_177
        ? tlb_sectored_entries_0_7_valid_1
        : ~tlb_invalidate_refill
          & (_GEN_179 | tlb_r_sectored_hit_valid & tlb_sectored_entries_0_7_valid_1);
    automatic logic        _GEN_183 =
      _GEN_177
        ? tlb_sectored_entries_0_7_valid_2
        : ~tlb_invalidate_refill
          & (_GEN_180 | tlb_r_sectored_hit_valid & tlb_sectored_entries_0_7_valid_2);
    automatic logic        _GEN_184 =
      _GEN_177
        ? tlb_sectored_entries_0_7_valid_3
        : ~tlb_invalidate_refill
          & ((&(tlb_r_refill_tag[1:0])) | tlb_r_sectored_hit_valid
             & tlb_sectored_entries_0_7_valid_3);
    automatic logic        tlb__76;
    automatic logic [2:0]  _GEN_185;
    automatic logic        tlb__77;
    automatic logic        tlb__78;
    automatic logic        tlb__79 = s1_tlb_req_vaddr[13:12] == 2'h0;
    automatic logic        _GEN_186 = tlb__15 & ~tlb_ & tlb__79;
    automatic logic        tlb__80 = s1_tlb_req_vaddr[13:12] == 2'h1;
    automatic logic        _GEN_187 = tlb__15 & ~tlb_ & tlb__80;
    automatic logic        tlb__81 = s1_tlb_req_vaddr[13:12] == 2'h2;
    automatic logic        _GEN_188 = tlb__15 & ~tlb_ & tlb__81;
    automatic logic        _GEN_189 = tlb__15 & ~tlb_ & (&(s1_tlb_req_vaddr[13:12]));
    automatic logic        tlb__82 = tlb__14[24:16] == 9'h0;
    automatic logic        _GEN_190 = tlb__17 & ~tlb__0 & tlb__79;
    automatic logic        _GEN_191 = tlb__17 & ~tlb__0 & tlb__80;
    automatic logic        _GEN_192 = tlb__17 & ~tlb__0 & tlb__81;
    automatic logic        _GEN_193 = tlb__17 & ~tlb__0 & (&(s1_tlb_req_vaddr[13:12]));
    automatic logic        tlb__83 = tlb__16[24:16] == 9'h0;
    automatic logic        _GEN_194 = tlb__19 & ~tlb__1 & tlb__79;
    automatic logic        _GEN_195 = tlb__19 & ~tlb__1 & tlb__80;
    automatic logic        _GEN_196 = tlb__19 & ~tlb__1 & tlb__81;
    automatic logic        _GEN_197 = tlb__19 & ~tlb__1 & (&(s1_tlb_req_vaddr[13:12]));
    automatic logic        tlb__84 = tlb__18[24:16] == 9'h0;
    automatic logic        _GEN_198 = tlb__21 & ~tlb__2 & tlb__79;
    automatic logic        _GEN_199 = tlb__21 & ~tlb__2 & tlb__80;
    automatic logic        _GEN_200 = tlb__21 & ~tlb__2 & tlb__81;
    automatic logic        _GEN_201 = tlb__21 & ~tlb__2 & (&(s1_tlb_req_vaddr[13:12]));
    automatic logic        tlb__85 = tlb__20[24:16] == 9'h0;
    automatic logic        _GEN_202 = tlb__23 & ~tlb__3 & tlb__79;
    automatic logic        _GEN_203 = tlb__23 & ~tlb__3 & tlb__80;
    automatic logic        _GEN_204 = tlb__23 & ~tlb__3 & tlb__81;
    automatic logic        _GEN_205 = tlb__23 & ~tlb__3 & (&(s1_tlb_req_vaddr[13:12]));
    automatic logic        tlb__86 = tlb__22[24:16] == 9'h0;
    automatic logic        _GEN_206 = tlb__25 & ~tlb__4 & tlb__79;
    automatic logic        _GEN_207 = tlb__25 & ~tlb__4 & tlb__80;
    automatic logic        _GEN_208 = tlb__25 & ~tlb__4 & tlb__81;
    automatic logic        _GEN_209 = tlb__25 & ~tlb__4 & (&(s1_tlb_req_vaddr[13:12]));
    automatic logic        tlb__87 = tlb__24[24:16] == 9'h0;
    automatic logic        _GEN_210 = tlb__27 & ~tlb__5 & tlb__79;
    automatic logic        _GEN_211 = tlb__27 & ~tlb__5 & tlb__80;
    automatic logic        _GEN_212 = tlb__27 & ~tlb__5 & tlb__81;
    automatic logic        _GEN_213 = tlb__27 & ~tlb__5 & (&(s1_tlb_req_vaddr[13:12]));
    automatic logic        tlb__88 = tlb__26[24:16] == 9'h0;
    automatic logic        _GEN_214 = tlb__29 & ~tlb__6 & tlb__79;
    automatic logic        _GEN_215 = tlb__29 & ~tlb__6 & tlb__80;
    automatic logic        _GEN_216 = tlb__29 & ~tlb__6 & tlb__81;
    automatic logic        _GEN_217 = tlb__29 & ~tlb__6 & (&(s1_tlb_req_vaddr[13:12]));
    automatic logic        tlb__89 = tlb__28[24:16] == 9'h0;
    automatic logic        tlb__90 =
      tlb_special_entry_valid_0 & ~tlb__11 & tlb__43 & tlb__44 & tlb__45;
    automatic logic        tlb__91 = tlb_multipleHits | reset;
    automatic logic        _GEN_218;
    automatic logic        s1_valid_not_nacked = s1_valid & ~s1_nack;
    automatic logic        s0_clk_en = metaArb_io_out_valid & ~metaArb_io_out_bits_write;
    automatic logic [1:0]  s1_hit_state_state;
    automatic logic        _GEN_219;
    automatic logic        s1_meta_clk_en;
    automatic logic        _GEN_220;
    automatic logic        advance_pstore1;
    automatic logic        _GEN_221;
    automatic logic        _GEN_222;
    automatic logic        _GEN_223;
    tlb_newEntry_pr = _tlb__io_resp_r & ~tlb_deny_access_to_debug & _tlb_pmp_io_r;
    tlb_newEntry_pw = _tlb__io_resp_w & ~tlb_deny_access_to_debug & _tlb_pmp_io_w;
    tlb__55 =
      tlb_sectored_entries_0_0_valid_0 | tlb_sectored_entries_0_0_valid_1
      | tlb_sectored_entries_0_0_valid_2 | tlb_sectored_entries_0_0_valid_3;
    tlb__56 =
      tlb_sectored_entries_0_1_valid_0 | tlb_sectored_entries_0_1_valid_1
      | tlb_sectored_entries_0_1_valid_2 | tlb_sectored_entries_0_1_valid_3;
    tlb_sector_hits_1 = tlb__56 & tlb__17;
    tlb__57 =
      tlb_sectored_entries_0_2_valid_0 | tlb_sectored_entries_0_2_valid_1
      | tlb_sectored_entries_0_2_valid_2 | tlb_sectored_entries_0_2_valid_3;
    tlb_sector_hits_2 = tlb__57 & tlb__19;
    tlb__58 =
      tlb_sectored_entries_0_3_valid_0 | tlb_sectored_entries_0_3_valid_1
      | tlb_sectored_entries_0_3_valid_2 | tlb_sectored_entries_0_3_valid_3;
    tlb_sector_hits_3 = tlb__58 & tlb__21;
    tlb__59 =
      tlb_sectored_entries_0_4_valid_0 | tlb_sectored_entries_0_4_valid_1
      | tlb_sectored_entries_0_4_valid_2 | tlb_sectored_entries_0_4_valid_3;
    tlb_sector_hits_4 = tlb__59 & tlb__23;
    tlb__60 =
      tlb_sectored_entries_0_5_valid_0 | tlb_sectored_entries_0_5_valid_1
      | tlb_sectored_entries_0_5_valid_2 | tlb_sectored_entries_0_5_valid_3;
    tlb_sector_hits_5 = tlb__60 & tlb__25;
    tlb__61 =
      tlb_sectored_entries_0_6_valid_0 | tlb_sectored_entries_0_6_valid_1
      | tlb_sectored_entries_0_6_valid_2 | tlb_sectored_entries_0_6_valid_3;
    tlb_sector_hits_6 = tlb__61 & tlb__27;
    tlb__62 =
      tlb_sectored_entries_0_7_valid_0 | tlb_sectored_entries_0_7_valid_1
      | tlb_sectored_entries_0_7_valid_2 | tlb_sectored_entries_0_7_valid_3;
    tlb_sector_hits_7 = tlb__62 & tlb__29;
    tlb__63 = tlb_superpage_entries_0_valid_0 & ~tlb__7 & tlb__30 & tlb__32;
    tlb__64 = tlb_superpage_entries_1_valid_0 & ~tlb__8 & tlb__33 & tlb__35;
    tlb__65 = tlb_superpage_entries_2_valid_0 & ~tlb__9 & tlb__36 & tlb__38;
    tlb__66 = tlb_superpage_entries_3_valid_0 & ~tlb__10 & tlb__39 & tlb__41;
    tlb_refill_v = tlb_r_vstage1_en | tlb_r_stage2_en;
    tlb__68 =
      {io_ptw_resp_bits_pte_ppn[19:0],
       io_ptw_resp_bits_pte_u,
       io_ptw_resp_bits_pte_g & io_ptw_resp_bits_pte_v,
       io_ptw_resp_bits_ae_ptw,
       io_ptw_resp_bits_ae_final,
       io_ptw_resp_bits_ae_final & io_ptw_resp_bits_gpa_is_pte & tlb_r_stage2_en,
       io_ptw_resp_bits_pf,
       io_ptw_resp_bits_gf,
       tlb__67 & io_ptw_resp_bits_pte_w & io_ptw_resp_bits_pte_d,
       tlb__67 & io_ptw_resp_bits_pte_x,
       tlb__67 & io_ptw_resp_bits_pte_r,
       io_ptw_resp_bits_hw,
       io_ptw_resp_bits_hx,
       io_ptw_resp_bits_hr,
       tlb_newEntry_pw,
       _tlb__io_resp_x & ~tlb_deny_access_to_debug & _tlb_pmp_io_x,
       tlb_newEntry_pr,
       _tlb__io_resp_pp,
       _tlb__io_resp_al,
       _tlb__io_resp_aa,
       _tlb__io_resp_eff,
       _tlb__io_resp_cacheable,
       1'h0};
    _GEN_112 = {1'h0, io_ptw_resp_bits_level[0]};
    tlb__76 =
      tlb__55 & tlb__15 | tlb_sector_hits_1 | tlb_sector_hits_2 | tlb_sector_hits_3
      | tlb_sector_hits_4 | tlb_sector_hits_5 | tlb_sector_hits_6 | tlb_sector_hits_7;
    _GEN_185 =
      {tlb_sector_hits_7, tlb_sector_hits_6, tlb_sector_hits_5}
      | {tlb_sector_hits_3, tlb_sector_hits_2, tlb_sector_hits_1};
    tlb__77 = _GEN_185[2] | _GEN_185[0];
    tlb__78 = tlb_io_req_ready & tlb_io_req_valid & tlb_tlb_miss;
    _GEN_218 = nodeOut_b_ready & auto_out_b_valid;
    s1_hit_state_state =
      (_GEN_41 & ~s1_flush_valid
         ? _rockettile_dcache_tag_array_ext_RW0_rdata[21:20]
         : 2'h0)
      | (_GEN_42 & ~s1_flush_valid
           ? _rockettile_dcache_tag_array_ext_RW0_rdata[43:42]
           : 2'h0)
      | (_GEN_43 & ~s1_flush_valid
           ? _rockettile_dcache_tag_array_ext_RW0_rdata[65:64]
           : 2'h0)
      | (_GEN_44 & ~s1_flush_valid
           ? _rockettile_dcache_tag_array_ext_RW0_rdata[87:86]
           : 2'h0);
    _GEN_219 = s1_valid_not_nacked | s1_flush_valid;
    s1_meta_clk_en = _GEN_219 | s1_probe;
    _GEN_220 = s2_valid_hit & s2_lr & ~cached_grant_wait | s2_valid_cached_miss;
    advance_pstore1 = pstore1_valid & pstore2_valid == dataArb_io_in_0_bits_write;
    _GEN_221 = auto_out_a_ready & nodeOut_a_deq_valid;
    _GEN_222 = _GEN_221 & s2_uncached;
    _GEN_223 = _GEN_93 & _GEN_101 & c_first;
    if (_GEN_121) begin
    end
    else begin
      tlb_sectored_entries_0_0_tag_vpn <= tlb_r_refill_tag;
      tlb_ <= tlb_refill_v;
    end
    if (~io_ptw_resp_valid | _GEN_120 | ~(tlb__69 & _GEN_122)) begin
    end
    else
      tlb_sectored_entries_0_0_data_0 <= tlb__68;
    if (~io_ptw_resp_valid | _GEN_120 | ~(tlb__69 & _GEN_123)) begin
    end
    else
      tlb_sectored_entries_0_0_data_1 <= tlb__68;
    if (~io_ptw_resp_valid | _GEN_120 | ~(tlb__69 & _GEN_124)) begin
    end
    else
      tlb_sectored_entries_0_0_data_2 <= tlb__68;
    if (~io_ptw_resp_valid | _GEN_120 | ~(tlb__69 & (&(tlb_r_refill_tag[1:0])))) begin
    end
    else
      tlb_sectored_entries_0_0_data_3 <= tlb__68;
    tlb_sectored_entries_0_0_valid_0 <=
      ~tlb__91
      & (tlb_io_sfence_valid
           ? (s1_req_size[0]
                ? (tlb__82
                     ? ~(~tlb_ & tlb_sectored_entries_0_0_data_0[0] | _GEN_186) & _GEN_125
                     : ~_GEN_186 & _GEN_125)
                : s1_req_size[1]
                    ? ~(~tlb_ & ~(tlb_sectored_entries_0_0_data_0[20])) & _GEN_125
                    : tlb_ & _GEN_125)
           : _GEN_125);
    tlb_sectored_entries_0_0_valid_1 <=
      ~tlb__91
      & (tlb_io_sfence_valid
           ? (s1_req_size[0]
                ? (tlb__82
                     ? ~(~tlb_ & tlb_sectored_entries_0_0_data_1[0] | _GEN_187) & _GEN_126
                     : ~_GEN_187 & _GEN_126)
                : s1_req_size[1]
                    ? ~(~tlb_ & ~(tlb_sectored_entries_0_0_data_1[20])) & _GEN_126
                    : tlb_ & _GEN_126)
           : _GEN_126);
    tlb_sectored_entries_0_0_valid_2 <=
      ~tlb__91
      & (tlb_io_sfence_valid
           ? (s1_req_size[0]
                ? (tlb__82
                     ? ~(~tlb_ & tlb_sectored_entries_0_0_data_2[0] | _GEN_188) & _GEN_127
                     : ~_GEN_188 & _GEN_127)
                : s1_req_size[1]
                    ? ~(~tlb_ & ~(tlb_sectored_entries_0_0_data_2[20])) & _GEN_127
                    : tlb_ & _GEN_127)
           : _GEN_127);
    tlb_sectored_entries_0_0_valid_3 <=
      ~tlb__91
      & (tlb_io_sfence_valid
           ? (s1_req_size[0]
                ? (tlb__82
                     ? ~(~tlb_ & tlb_sectored_entries_0_0_data_3[0] | _GEN_189) & _GEN_128
                     : ~_GEN_189 & _GEN_128)
                : s1_req_size[1]
                    ? ~(~tlb_ & ~(tlb_sectored_entries_0_0_data_3[20])) & _GEN_128
                    : tlb_ & _GEN_128)
           : _GEN_128);
    if (_GEN_129) begin
    end
    else begin
      tlb_sectored_entries_0_1_tag_vpn <= tlb_r_refill_tag;
      tlb__0 <= tlb_refill_v;
    end
    if (~io_ptw_resp_valid | _GEN_120 | ~(tlb__70 & _GEN_130)) begin
    end
    else
      tlb_sectored_entries_0_1_data_0 <= tlb__68;
    if (~io_ptw_resp_valid | _GEN_120 | ~(tlb__70 & _GEN_131)) begin
    end
    else
      tlb_sectored_entries_0_1_data_1 <= tlb__68;
    if (~io_ptw_resp_valid | _GEN_120 | ~(tlb__70 & _GEN_132)) begin
    end
    else
      tlb_sectored_entries_0_1_data_2 <= tlb__68;
    if (~io_ptw_resp_valid | _GEN_120 | ~(tlb__70 & (&(tlb_r_refill_tag[1:0])))) begin
    end
    else
      tlb_sectored_entries_0_1_data_3 <= tlb__68;
    tlb_sectored_entries_0_1_valid_0 <=
      ~tlb__91
      & (tlb_io_sfence_valid
           ? (s1_req_size[0]
                ? (tlb__83
                     ? ~(~tlb__0 & tlb_sectored_entries_0_1_data_0[0] | _GEN_190)
                       & _GEN_133
                     : ~_GEN_190 & _GEN_133)
                : s1_req_size[1]
                    ? ~(~tlb__0 & ~(tlb_sectored_entries_0_1_data_0[20])) & _GEN_133
                    : tlb__0 & _GEN_133)
           : _GEN_133);
    tlb_sectored_entries_0_1_valid_1 <=
      ~tlb__91
      & (tlb_io_sfence_valid
           ? (s1_req_size[0]
                ? (tlb__83
                     ? ~(~tlb__0 & tlb_sectored_entries_0_1_data_1[0] | _GEN_191)
                       & _GEN_134
                     : ~_GEN_191 & _GEN_134)
                : s1_req_size[1]
                    ? ~(~tlb__0 & ~(tlb_sectored_entries_0_1_data_1[20])) & _GEN_134
                    : tlb__0 & _GEN_134)
           : _GEN_134);
    tlb_sectored_entries_0_1_valid_2 <=
      ~tlb__91
      & (tlb_io_sfence_valid
           ? (s1_req_size[0]
                ? (tlb__83
                     ? ~(~tlb__0 & tlb_sectored_entries_0_1_data_2[0] | _GEN_192)
                       & _GEN_135
                     : ~_GEN_192 & _GEN_135)
                : s1_req_size[1]
                    ? ~(~tlb__0 & ~(tlb_sectored_entries_0_1_data_2[20])) & _GEN_135
                    : tlb__0 & _GEN_135)
           : _GEN_135);
    tlb_sectored_entries_0_1_valid_3 <=
      ~tlb__91
      & (tlb_io_sfence_valid
           ? (s1_req_size[0]
                ? (tlb__83
                     ? ~(~tlb__0 & tlb_sectored_entries_0_1_data_3[0] | _GEN_193)
                       & _GEN_136
                     : ~_GEN_193 & _GEN_136)
                : s1_req_size[1]
                    ? ~(~tlb__0 & ~(tlb_sectored_entries_0_1_data_3[20])) & _GEN_136
                    : tlb__0 & _GEN_136)
           : _GEN_136);
    if (_GEN_137) begin
    end
    else begin
      tlb_sectored_entries_0_2_tag_vpn <= tlb_r_refill_tag;
      tlb__1 <= tlb_refill_v;
    end
    if (~io_ptw_resp_valid | _GEN_120 | ~(tlb__71 & _GEN_138)) begin
    end
    else
      tlb_sectored_entries_0_2_data_0 <= tlb__68;
    if (~io_ptw_resp_valid | _GEN_120 | ~(tlb__71 & _GEN_139)) begin
    end
    else
      tlb_sectored_entries_0_2_data_1 <= tlb__68;
    if (~io_ptw_resp_valid | _GEN_120 | ~(tlb__71 & _GEN_140)) begin
    end
    else
      tlb_sectored_entries_0_2_data_2 <= tlb__68;
    if (~io_ptw_resp_valid | _GEN_120 | ~(tlb__71 & (&(tlb_r_refill_tag[1:0])))) begin
    end
    else
      tlb_sectored_entries_0_2_data_3 <= tlb__68;
    tlb_sectored_entries_0_2_valid_0 <=
      ~tlb__91
      & (tlb_io_sfence_valid
           ? (s1_req_size[0]
                ? (tlb__84
                     ? ~(~tlb__1 & tlb_sectored_entries_0_2_data_0[0] | _GEN_194)
                       & _GEN_141
                     : ~_GEN_194 & _GEN_141)
                : s1_req_size[1]
                    ? ~(~tlb__1 & ~(tlb_sectored_entries_0_2_data_0[20])) & _GEN_141
                    : tlb__1 & _GEN_141)
           : _GEN_141);
    tlb_sectored_entries_0_2_valid_1 <=
      ~tlb__91
      & (tlb_io_sfence_valid
           ? (s1_req_size[0]
                ? (tlb__84
                     ? ~(~tlb__1 & tlb_sectored_entries_0_2_data_1[0] | _GEN_195)
                       & _GEN_142
                     : ~_GEN_195 & _GEN_142)
                : s1_req_size[1]
                    ? ~(~tlb__1 & ~(tlb_sectored_entries_0_2_data_1[20])) & _GEN_142
                    : tlb__1 & _GEN_142)
           : _GEN_142);
    tlb_sectored_entries_0_2_valid_2 <=
      ~tlb__91
      & (tlb_io_sfence_valid
           ? (s1_req_size[0]
                ? (tlb__84
                     ? ~(~tlb__1 & tlb_sectored_entries_0_2_data_2[0] | _GEN_196)
                       & _GEN_143
                     : ~_GEN_196 & _GEN_143)
                : s1_req_size[1]
                    ? ~(~tlb__1 & ~(tlb_sectored_entries_0_2_data_2[20])) & _GEN_143
                    : tlb__1 & _GEN_143)
           : _GEN_143);
    tlb_sectored_entries_0_2_valid_3 <=
      ~tlb__91
      & (tlb_io_sfence_valid
           ? (s1_req_size[0]
                ? (tlb__84
                     ? ~(~tlb__1 & tlb_sectored_entries_0_2_data_3[0] | _GEN_197)
                       & _GEN_144
                     : ~_GEN_197 & _GEN_144)
                : s1_req_size[1]
                    ? ~(~tlb__1 & ~(tlb_sectored_entries_0_2_data_3[20])) & _GEN_144
                    : tlb__1 & _GEN_144)
           : _GEN_144);
    if (_GEN_145) begin
    end
    else begin
      tlb_sectored_entries_0_3_tag_vpn <= tlb_r_refill_tag;
      tlb__2 <= tlb_refill_v;
    end
    if (~io_ptw_resp_valid | _GEN_120 | ~(tlb__72 & _GEN_146)) begin
    end
    else
      tlb_sectored_entries_0_3_data_0 <= tlb__68;
    if (~io_ptw_resp_valid | _GEN_120 | ~(tlb__72 & _GEN_147)) begin
    end
    else
      tlb_sectored_entries_0_3_data_1 <= tlb__68;
    if (~io_ptw_resp_valid | _GEN_120 | ~(tlb__72 & _GEN_148)) begin
    end
    else
      tlb_sectored_entries_0_3_data_2 <= tlb__68;
    if (~io_ptw_resp_valid | _GEN_120 | ~(tlb__72 & (&(tlb_r_refill_tag[1:0])))) begin
    end
    else
      tlb_sectored_entries_0_3_data_3 <= tlb__68;
    tlb_sectored_entries_0_3_valid_0 <=
      ~tlb__91
      & (tlb_io_sfence_valid
           ? (s1_req_size[0]
                ? (tlb__85
                     ? ~(~tlb__2 & tlb_sectored_entries_0_3_data_0[0] | _GEN_198)
                       & _GEN_149
                     : ~_GEN_198 & _GEN_149)
                : s1_req_size[1]
                    ? ~(~tlb__2 & ~(tlb_sectored_entries_0_3_data_0[20])) & _GEN_149
                    : tlb__2 & _GEN_149)
           : _GEN_149);
    tlb_sectored_entries_0_3_valid_1 <=
      ~tlb__91
      & (tlb_io_sfence_valid
           ? (s1_req_size[0]
                ? (tlb__85
                     ? ~(~tlb__2 & tlb_sectored_entries_0_3_data_1[0] | _GEN_199)
                       & _GEN_150
                     : ~_GEN_199 & _GEN_150)
                : s1_req_size[1]
                    ? ~(~tlb__2 & ~(tlb_sectored_entries_0_3_data_1[20])) & _GEN_150
                    : tlb__2 & _GEN_150)
           : _GEN_150);
    tlb_sectored_entries_0_3_valid_2 <=
      ~tlb__91
      & (tlb_io_sfence_valid
           ? (s1_req_size[0]
                ? (tlb__85
                     ? ~(~tlb__2 & tlb_sectored_entries_0_3_data_2[0] | _GEN_200)
                       & _GEN_151
                     : ~_GEN_200 & _GEN_151)
                : s1_req_size[1]
                    ? ~(~tlb__2 & ~(tlb_sectored_entries_0_3_data_2[20])) & _GEN_151
                    : tlb__2 & _GEN_151)
           : _GEN_151);
    tlb_sectored_entries_0_3_valid_3 <=
      ~tlb__91
      & (tlb_io_sfence_valid
           ? (s1_req_size[0]
                ? (tlb__85
                     ? ~(~tlb__2 & tlb_sectored_entries_0_3_data_3[0] | _GEN_201)
                       & _GEN_152
                     : ~_GEN_201 & _GEN_152)
                : s1_req_size[1]
                    ? ~(~tlb__2 & ~(tlb_sectored_entries_0_3_data_3[20])) & _GEN_152
                    : tlb__2 & _GEN_152)
           : _GEN_152);
    if (_GEN_153) begin
    end
    else begin
      tlb_sectored_entries_0_4_tag_vpn <= tlb_r_refill_tag;
      tlb__3 <= tlb_refill_v;
    end
    if (~io_ptw_resp_valid | _GEN_120 | ~(tlb__73 & _GEN_154)) begin
    end
    else
      tlb_sectored_entries_0_4_data_0 <= tlb__68;
    if (~io_ptw_resp_valid | _GEN_120 | ~(tlb__73 & _GEN_155)) begin
    end
    else
      tlb_sectored_entries_0_4_data_1 <= tlb__68;
    if (~io_ptw_resp_valid | _GEN_120 | ~(tlb__73 & _GEN_156)) begin
    end
    else
      tlb_sectored_entries_0_4_data_2 <= tlb__68;
    if (~io_ptw_resp_valid | _GEN_120 | ~(tlb__73 & (&(tlb_r_refill_tag[1:0])))) begin
    end
    else
      tlb_sectored_entries_0_4_data_3 <= tlb__68;
    tlb_sectored_entries_0_4_valid_0 <=
      ~tlb__91
      & (tlb_io_sfence_valid
           ? (s1_req_size[0]
                ? (tlb__86
                     ? ~(~tlb__3 & tlb_sectored_entries_0_4_data_0[0] | _GEN_202)
                       & _GEN_157
                     : ~_GEN_202 & _GEN_157)
                : s1_req_size[1]
                    ? ~(~tlb__3 & ~(tlb_sectored_entries_0_4_data_0[20])) & _GEN_157
                    : tlb__3 & _GEN_157)
           : _GEN_157);
    tlb_sectored_entries_0_4_valid_1 <=
      ~tlb__91
      & (tlb_io_sfence_valid
           ? (s1_req_size[0]
                ? (tlb__86
                     ? ~(~tlb__3 & tlb_sectored_entries_0_4_data_1[0] | _GEN_203)
                       & _GEN_158
                     : ~_GEN_203 & _GEN_158)
                : s1_req_size[1]
                    ? ~(~tlb__3 & ~(tlb_sectored_entries_0_4_data_1[20])) & _GEN_158
                    : tlb__3 & _GEN_158)
           : _GEN_158);
    tlb_sectored_entries_0_4_valid_2 <=
      ~tlb__91
      & (tlb_io_sfence_valid
           ? (s1_req_size[0]
                ? (tlb__86
                     ? ~(~tlb__3 & tlb_sectored_entries_0_4_data_2[0] | _GEN_204)
                       & _GEN_159
                     : ~_GEN_204 & _GEN_159)
                : s1_req_size[1]
                    ? ~(~tlb__3 & ~(tlb_sectored_entries_0_4_data_2[20])) & _GEN_159
                    : tlb__3 & _GEN_159)
           : _GEN_159);
    tlb_sectored_entries_0_4_valid_3 <=
      ~tlb__91
      & (tlb_io_sfence_valid
           ? (s1_req_size[0]
                ? (tlb__86
                     ? ~(~tlb__3 & tlb_sectored_entries_0_4_data_3[0] | _GEN_205)
                       & _GEN_160
                     : ~_GEN_205 & _GEN_160)
                : s1_req_size[1]
                    ? ~(~tlb__3 & ~(tlb_sectored_entries_0_4_data_3[20])) & _GEN_160
                    : tlb__3 & _GEN_160)
           : _GEN_160);
    if (_GEN_161) begin
    end
    else begin
      tlb_sectored_entries_0_5_tag_vpn <= tlb_r_refill_tag;
      tlb__4 <= tlb_refill_v;
    end
    if (~io_ptw_resp_valid | _GEN_120 | ~(tlb__74 & _GEN_162)) begin
    end
    else
      tlb_sectored_entries_0_5_data_0 <= tlb__68;
    if (~io_ptw_resp_valid | _GEN_120 | ~(tlb__74 & _GEN_163)) begin
    end
    else
      tlb_sectored_entries_0_5_data_1 <= tlb__68;
    if (~io_ptw_resp_valid | _GEN_120 | ~(tlb__74 & _GEN_164)) begin
    end
    else
      tlb_sectored_entries_0_5_data_2 <= tlb__68;
    if (~io_ptw_resp_valid | _GEN_120 | ~(tlb__74 & (&(tlb_r_refill_tag[1:0])))) begin
    end
    else
      tlb_sectored_entries_0_5_data_3 <= tlb__68;
    tlb_sectored_entries_0_5_valid_0 <=
      ~tlb__91
      & (tlb_io_sfence_valid
           ? (s1_req_size[0]
                ? (tlb__87
                     ? ~(~tlb__4 & tlb_sectored_entries_0_5_data_0[0] | _GEN_206)
                       & _GEN_165
                     : ~_GEN_206 & _GEN_165)
                : s1_req_size[1]
                    ? ~(~tlb__4 & ~(tlb_sectored_entries_0_5_data_0[20])) & _GEN_165
                    : tlb__4 & _GEN_165)
           : _GEN_165);
    tlb_sectored_entries_0_5_valid_1 <=
      ~tlb__91
      & (tlb_io_sfence_valid
           ? (s1_req_size[0]
                ? (tlb__87
                     ? ~(~tlb__4 & tlb_sectored_entries_0_5_data_1[0] | _GEN_207)
                       & _GEN_166
                     : ~_GEN_207 & _GEN_166)
                : s1_req_size[1]
                    ? ~(~tlb__4 & ~(tlb_sectored_entries_0_5_data_1[20])) & _GEN_166
                    : tlb__4 & _GEN_166)
           : _GEN_166);
    tlb_sectored_entries_0_5_valid_2 <=
      ~tlb__91
      & (tlb_io_sfence_valid
           ? (s1_req_size[0]
                ? (tlb__87
                     ? ~(~tlb__4 & tlb_sectored_entries_0_5_data_2[0] | _GEN_208)
                       & _GEN_167
                     : ~_GEN_208 & _GEN_167)
                : s1_req_size[1]
                    ? ~(~tlb__4 & ~(tlb_sectored_entries_0_5_data_2[20])) & _GEN_167
                    : tlb__4 & _GEN_167)
           : _GEN_167);
    tlb_sectored_entries_0_5_valid_3 <=
      ~tlb__91
      & (tlb_io_sfence_valid
           ? (s1_req_size[0]
                ? (tlb__87
                     ? ~(~tlb__4 & tlb_sectored_entries_0_5_data_3[0] | _GEN_209)
                       & _GEN_168
                     : ~_GEN_209 & _GEN_168)
                : s1_req_size[1]
                    ? ~(~tlb__4 & ~(tlb_sectored_entries_0_5_data_3[20])) & _GEN_168
                    : tlb__4 & _GEN_168)
           : _GEN_168);
    if (_GEN_169) begin
    end
    else begin
      tlb_sectored_entries_0_6_tag_vpn <= tlb_r_refill_tag;
      tlb__5 <= tlb_refill_v;
    end
    if (~io_ptw_resp_valid | _GEN_120 | ~(tlb__75 & _GEN_170)) begin
    end
    else
      tlb_sectored_entries_0_6_data_0 <= tlb__68;
    if (~io_ptw_resp_valid | _GEN_120 | ~(tlb__75 & _GEN_171)) begin
    end
    else
      tlb_sectored_entries_0_6_data_1 <= tlb__68;
    if (~io_ptw_resp_valid | _GEN_120 | ~(tlb__75 & _GEN_172)) begin
    end
    else
      tlb_sectored_entries_0_6_data_2 <= tlb__68;
    if (~io_ptw_resp_valid | _GEN_120 | ~(tlb__75 & (&(tlb_r_refill_tag[1:0])))) begin
    end
    else
      tlb_sectored_entries_0_6_data_3 <= tlb__68;
    tlb_sectored_entries_0_6_valid_0 <=
      ~tlb__91
      & (tlb_io_sfence_valid
           ? (s1_req_size[0]
                ? (tlb__88
                     ? ~(~tlb__5 & tlb_sectored_entries_0_6_data_0[0] | _GEN_210)
                       & _GEN_173
                     : ~_GEN_210 & _GEN_173)
                : s1_req_size[1]
                    ? ~(~tlb__5 & ~(tlb_sectored_entries_0_6_data_0[20])) & _GEN_173
                    : tlb__5 & _GEN_173)
           : _GEN_173);
    tlb_sectored_entries_0_6_valid_1 <=
      ~tlb__91
      & (tlb_io_sfence_valid
           ? (s1_req_size[0]
                ? (tlb__88
                     ? ~(~tlb__5 & tlb_sectored_entries_0_6_data_1[0] | _GEN_211)
                       & _GEN_174
                     : ~_GEN_211 & _GEN_174)
                : s1_req_size[1]
                    ? ~(~tlb__5 & ~(tlb_sectored_entries_0_6_data_1[20])) & _GEN_174
                    : tlb__5 & _GEN_174)
           : _GEN_174);
    tlb_sectored_entries_0_6_valid_2 <=
      ~tlb__91
      & (tlb_io_sfence_valid
           ? (s1_req_size[0]
                ? (tlb__88
                     ? ~(~tlb__5 & tlb_sectored_entries_0_6_data_2[0] | _GEN_212)
                       & _GEN_175
                     : ~_GEN_212 & _GEN_175)
                : s1_req_size[1]
                    ? ~(~tlb__5 & ~(tlb_sectored_entries_0_6_data_2[20])) & _GEN_175
                    : tlb__5 & _GEN_175)
           : _GEN_175);
    tlb_sectored_entries_0_6_valid_3 <=
      ~tlb__91
      & (tlb_io_sfence_valid
           ? (s1_req_size[0]
                ? (tlb__88
                     ? ~(~tlb__5 & tlb_sectored_entries_0_6_data_3[0] | _GEN_213)
                       & _GEN_176
                     : ~_GEN_213 & _GEN_176)
                : s1_req_size[1]
                    ? ~(~tlb__5 & ~(tlb_sectored_entries_0_6_data_3[20])) & _GEN_176
                    : tlb__5 & _GEN_176)
           : _GEN_176);
    if (_GEN_177) begin
    end
    else begin
      tlb_sectored_entries_0_7_tag_vpn <= tlb_r_refill_tag;
      tlb__6 <= tlb_refill_v;
    end
    if (~io_ptw_resp_valid | _GEN_120 | ~((&tlb_waddr_1) & _GEN_178)) begin
    end
    else
      tlb_sectored_entries_0_7_data_0 <= tlb__68;
    if (~io_ptw_resp_valid | _GEN_120 | ~((&tlb_waddr_1) & _GEN_179)) begin
    end
    else
      tlb_sectored_entries_0_7_data_1 <= tlb__68;
    if (~io_ptw_resp_valid | _GEN_120 | ~((&tlb_waddr_1) & _GEN_180)) begin
    end
    else
      tlb_sectored_entries_0_7_data_2 <= tlb__68;
    if (~io_ptw_resp_valid | _GEN_120
        | ~((&tlb_waddr_1) & (&(tlb_r_refill_tag[1:0])))) begin
    end
    else
      tlb_sectored_entries_0_7_data_3 <= tlb__68;
    tlb_sectored_entries_0_7_valid_0 <=
      ~tlb__91
      & (tlb_io_sfence_valid
           ? (s1_req_size[0]
                ? (tlb__89
                     ? ~(~tlb__6 & tlb_sectored_entries_0_7_data_0[0] | _GEN_214)
                       & _GEN_181
                     : ~_GEN_214 & _GEN_181)
                : s1_req_size[1]
                    ? ~(~tlb__6 & ~(tlb_sectored_entries_0_7_data_0[20])) & _GEN_181
                    : tlb__6 & _GEN_181)
           : _GEN_181);
    tlb_sectored_entries_0_7_valid_1 <=
      ~tlb__91
      & (tlb_io_sfence_valid
           ? (s1_req_size[0]
                ? (tlb__89
                     ? ~(~tlb__6 & tlb_sectored_entries_0_7_data_1[0] | _GEN_215)
                       & _GEN_182
                     : ~_GEN_215 & _GEN_182)
                : s1_req_size[1]
                    ? ~(~tlb__6 & ~(tlb_sectored_entries_0_7_data_1[20])) & _GEN_182
                    : tlb__6 & _GEN_182)
           : _GEN_182);
    tlb_sectored_entries_0_7_valid_2 <=
      ~tlb__91
      & (tlb_io_sfence_valid
           ? (s1_req_size[0]
                ? (tlb__89
                     ? ~(~tlb__6 & tlb_sectored_entries_0_7_data_2[0] | _GEN_216)
                       & _GEN_183
                     : ~_GEN_216 & _GEN_183)
                : s1_req_size[1]
                    ? ~(~tlb__6 & ~(tlb_sectored_entries_0_7_data_2[20])) & _GEN_183
                    : tlb__6 & _GEN_183)
           : _GEN_183);
    tlb_sectored_entries_0_7_valid_3 <=
      ~tlb__91
      & (tlb_io_sfence_valid
           ? (s1_req_size[0]
                ? (tlb__89
                     ? ~(~tlb__6 & tlb_sectored_entries_0_7_data_3[0] | _GEN_217)
                       & _GEN_184
                     : ~_GEN_217 & _GEN_184)
                : s1_req_size[1]
                    ? ~(~tlb__6 & ~(tlb_sectored_entries_0_7_data_3[20])) & _GEN_184
                    : tlb__6 & _GEN_184)
           : _GEN_184);
    if (_GEN_111) begin
      tlb_superpage_entries_0_level <= _GEN_112;
      tlb_superpage_entries_0_tag_vpn <= tlb_r_refill_tag;
      tlb__7 <= tlb_refill_v;
      tlb_superpage_entries_0_data_0 <= tlb__68;
    end
    tlb_superpage_entries_0_valid_0 <=
      ~tlb__91
      & (tlb_io_sfence_valid
           ? (s1_req_size[0]
                ? (tlb__30
                     ? ~(~tlb__7 & tlb_superpage_entries_0_data_0[0] | tlb__63) & _GEN_113
                     : ~tlb__63 & _GEN_113)
                : s1_req_size[1]
                    ? ~(~tlb__7 & ~(tlb_superpage_entries_0_data_0[20])) & _GEN_113
                    : tlb__7 & _GEN_113)
           : _GEN_113);
    if (_GEN_114) begin
      tlb_superpage_entries_1_level <= _GEN_112;
      tlb_superpage_entries_1_tag_vpn <= tlb_r_refill_tag;
      tlb__8 <= tlb_refill_v;
      tlb_superpage_entries_1_data_0 <= tlb__68;
    end
    tlb_superpage_entries_1_valid_0 <=
      ~tlb__91
      & (tlb_io_sfence_valid
           ? (s1_req_size[0]
                ? (tlb__33
                     ? ~(~tlb__8 & tlb_superpage_entries_1_data_0[0] | tlb__64) & _GEN_115
                     : ~tlb__64 & _GEN_115)
                : s1_req_size[1]
                    ? ~(~tlb__8 & ~(tlb_superpage_entries_1_data_0[20])) & _GEN_115
                    : tlb__8 & _GEN_115)
           : _GEN_115);
    if (_GEN_116) begin
      tlb_superpage_entries_2_level <= _GEN_112;
      tlb_superpage_entries_2_tag_vpn <= tlb_r_refill_tag;
      tlb__9 <= tlb_refill_v;
      tlb_superpage_entries_2_data_0 <= tlb__68;
    end
    tlb_superpage_entries_2_valid_0 <=
      ~tlb__91
      & (tlb_io_sfence_valid
           ? (s1_req_size[0]
                ? (tlb__36
                     ? ~(~tlb__9 & tlb_superpage_entries_2_data_0[0] | tlb__65) & _GEN_117
                     : ~tlb__65 & _GEN_117)
                : s1_req_size[1]
                    ? ~(~tlb__9 & ~(tlb_superpage_entries_2_data_0[20])) & _GEN_117
                    : tlb__9 & _GEN_117)
           : _GEN_117);
    if (_GEN_118) begin
      tlb_superpage_entries_3_level <= _GEN_112;
      tlb_superpage_entries_3_tag_vpn <= tlb_r_refill_tag;
      tlb__10 <= tlb_refill_v;
      tlb_superpage_entries_3_data_0 <= tlb__68;
    end
    tlb_superpage_entries_3_valid_0 <=
      ~tlb__91
      & (tlb_io_sfence_valid
           ? (s1_req_size[0]
                ? (tlb__39
                     ? ~(~tlb__10 & tlb_superpage_entries_3_data_0[0] | tlb__66)
                       & _GEN_119
                     : ~tlb__66 & _GEN_119)
                : s1_req_size[1]
                    ? ~(~tlb__10 & ~(tlb_superpage_entries_3_data_0[20])) & _GEN_119
                    : tlb__10 & _GEN_119)
           : _GEN_119);
    if (_GEN_109) begin
      tlb_special_entry_level <= io_ptw_resp_bits_level;
      tlb_special_entry_tag_vpn <= tlb_r_refill_tag;
      tlb__11 <= tlb_refill_v;
      tlb_special_entry_data_0 <= tlb__68;
    end
    tlb_special_entry_valid_0 <=
      ~tlb__91
      & (tlb_io_sfence_valid
           ? (s1_req_size[0]
                ? (tlb__43
                     ? ~(~tlb__11 & tlb_special_entry_data_0[0] | tlb__90) & _GEN_110
                     : ~tlb__90 & _GEN_110)
                : s1_req_size[1]
                    ? ~(~tlb__11 & ~(tlb_special_entry_data_0[20])) & _GEN_110
                    : tlb__11 & _GEN_110)
           : _GEN_110);
    if (tlb__78) begin
      tlb_r_refill_tag <= s1_tlb_req_vaddr[38:12];
      if (&{tlb_superpage_entries_3_valid_0,
            tlb_superpage_entries_2_valid_0,
            tlb_superpage_entries_1_valid_0,
            tlb_superpage_entries_0_valid_0})
        tlb_waddr <=
          {tlb_state_reg_1[2],
           tlb_state_reg_1[2] ? tlb_state_reg_1[1] : tlb_state_reg_1[0]};
      else begin
        automatic logic [2:0] _GEN_224;
        _GEN_224 =
          ~{tlb_superpage_entries_2_valid_0,
            tlb_superpage_entries_1_valid_0,
            tlb_superpage_entries_0_valid_0};
        if (_GEN_224[0])
          tlb_waddr <= 2'h0;
        else if (_GEN_224[1])
          tlb_waddr <= 2'h1;
        else
          tlb_waddr <= {1'h1, ~(_GEN_224[2])};
      end
      if (&{tlb__62, tlb__61, tlb__60, tlb__59, tlb__58, tlb__57, tlb__56, tlb__55})
        tlb_r_sectored_repl_addr <=
          {tlb_state_vec_0[6],
           tlb_state_vec_0[6]
             ? {tlb_state_vec_0[5],
                tlb_state_vec_0[5] ? tlb_state_vec_0[4] : tlb_state_vec_0[3]}
             : {tlb_state_vec_0[2],
                tlb_state_vec_0[2] ? tlb_state_vec_0[1] : tlb_state_vec_0[0]}};
      else begin
        automatic logic [6:0] _GEN_225;
        _GEN_225 = ~{tlb__61, tlb__60, tlb__59, tlb__58, tlb__57, tlb__56, tlb__55};
        if (_GEN_225[0])
          tlb_r_sectored_repl_addr <= 3'h0;
        else if (_GEN_225[1])
          tlb_r_sectored_repl_addr <= 3'h1;
        else if (_GEN_225[2])
          tlb_r_sectored_repl_addr <= 3'h2;
        else if (_GEN_225[3])
          tlb_r_sectored_repl_addr <= 3'h3;
        else if (_GEN_225[4])
          tlb_r_sectored_repl_addr <= 3'h4;
        else if (_GEN_225[5])
          tlb_r_sectored_repl_addr <= 3'h5;
        else
          tlb_r_sectored_repl_addr <= {2'h3, ~(_GEN_225[6])};
      end
      tlb_r_sectored_hit_valid <= tlb__76;
      tlb_r_sectored_hit_bits <=
        {|{tlb_sector_hits_7, tlb_sector_hits_6, tlb_sector_hits_5, tlb_sector_hits_4},
         |(_GEN_185[2:1]),
         tlb__77};
      tlb_r_need_gpa <= |tlb__46;
    end
    tlb_r_vstage1_en <= ~tlb__78 & tlb_r_vstage1_en;
    tlb_r_stage2_en <= ~tlb__78 & tlb_r_stage2_en;
    if (s2_want_victimize) begin
      probe_bits_param <= 2'h0;
      probe_bits_size <= 4'h0;
      probe_bits_address <=
        {s2_valid_flush_line
           ? s2_req_addr[31:12]
           : (_GEN_68 ? s2_meta_corrected_r[19:0] : 20'h0)
             | (_GEN_69 ? s2_meta_corrected_r_1[19:0] : 20'h0)
             | (_GEN_70 ? s2_meta_corrected_r_2[19:0] : 20'h0)
             | ((&s2_victim_way_r) ? s2_meta_corrected_r_3[19:0] : 20'h0),
         s2_req_addr[11:6],
         6'h0};
    end
    else if (_GEN_218) begin
      probe_bits_param <= auto_out_b_bits_param;
      probe_bits_size <= auto_out_b_bits_size;
      probe_bits_address <= auto_out_b_bits_address;
    end
    probe_bits_source <=
      ~s2_want_victimize & (_GEN_218 ? auto_out_b_bits_source : probe_bits_source);
    if (s0_clk_en) begin
      automatic logic [39:0] s0_tlb_req_vaddr =
        {resetting
           ? {io_cpu_req_bits_addr[39:12], metaArb_io_in_5_bits_idx}
           : metaArb_io_in_1_valid
               ? {io_cpu_req_bits_addr[39:12], metaArb_io_in_1_bits_idx}
               : _GEN_21
                   ? {io_cpu_req_bits_addr[39:12], s2_req_addr[11:6]}
                   : metaArb_io_in_4_valid
                       ? {io_cpu_req_bits_addr[39:12], probe_bits_address[11:6]}
                       : metaArb_io_in_6_valid
                           ? {io_cpu_req_bits_addr[39:32],
                              _GEN_104
                                ? probe_bits_address[31:6]
                                : auto_out_b_bits_address[31:6]}
                           : io_cpu_req_bits_addr[39:6],
         io_cpu_req_bits_addr[5:0]};
      automatic logic        s0_tlb_req_passthrough = metaArb__1 | io_cpu_req_bits_phys;
      s1_vaddr <= s0_tlb_req_vaddr;
      s1_req_tag <= io_cpu_req_bits_tag;
      s1_req_cmd <= io_cpu_req_bits_cmd;
      s1_req_size <= io_cpu_req_bits_size;
      s1_req_signed <= io_cpu_req_bits_signed;
      s1_req_dprv <= io_cpu_req_bits_dprv;
      s1_req_dv <= io_cpu_req_bits_dv;
      s1_req_phys <= s0_tlb_req_passthrough;
      s1_req_mask <= 8'h0;
      s1_tlb_req_vaddr <= s0_tlb_req_vaddr;
      s1_tlb_req_passthrough <= s0_tlb_req_passthrough;
      s1_tlb_req_size <= io_cpu_req_bits_size;
      s1_tlb_req_cmd <= io_cpu_req_bits_cmd;
      s1_tlb_req_prv <= io_cpu_req_bits_dprv;
      s1_did_read <= ~dataArb__0 & io_cpu_req_valid & _GEN_36;
    end
    s1_req_no_alloc <= ~s0_clk_en & s1_req_no_alloc;
    s1_req_no_xcpt <= ~s0_clk_en & s1_req_no_xcpt;
    s1_flush_valid <= 1'h0;
    if (_GEN_223)
      release_ack_addr <= probe_bits_address;
    if (~_GEN_221 | s2_uncached) begin
    end
    else if (|s2_hit_state_state)
      refill_way <= s2_hit_way;
    else
      refill_way <= s2_victim_way;
    if (_GEN_222) begin
      uncachedReqs_0_addr <= s2_req_addr;
      uncachedReqs_0_tag <= s2_req_tag;
      uncachedReqs_0_size <= s2_req_size;
      uncachedReqs_0_signed <= s2_req_signed;
    end
    s1_read_mask <= s0_clk_en | s1_read_mask;
    s2_not_nacked_in_s1 <= ~s1_nack;
    if (_GEN_96) begin
      if (_GEN_219) begin
        s2_req_addr <= {8'h0, tlb_ppn, s1_vaddr[11:0]};
        s2_req_tag <= s1_req_tag;
        s2_req_cmd <= s1_req_cmd;
        s2_req_size <= s1_req_size;
        s2_req_signed <= s1_req_signed;
      end
    end
    else begin
      s2_req_addr <= {8'h0, tlb_ppn, s1_vaddr[11:3], uncachedReqs_0_addr[2:0]};
      s2_req_tag <= uncachedReqs_0_tag;
      s2_req_cmd <= 5'h0;
      s2_req_size <= uncachedReqs_0_size;
      s2_req_signed <= uncachedReqs_0_signed;
    end
    if (_GEN_219) begin
      automatic logic [13:0] tlb_hits =
        {~tlb__12,
         tlb_hitsVec_12,
         tlb_hitsVec_11,
         tlb_hitsVec_10,
         tlb_hitsVec_9,
         tlb_hitsVec_8,
         tlb_hitsVec_7,
         tlb_hitsVec_6,
         tlb_hitsVec_5,
         tlb_hitsVec_4,
         tlb_hitsVec_3,
         tlb_hitsVec_2,
         tlb_hitsVec_1,
         tlb_hitsVec_0};
      automatic logic [13:0] tlb_ptw_pf_array =
        {1'h0,
         _tlb_entries_barrier_12_io_y_pf,
         _tlb_entries_barrier_11_io_y_pf,
         _tlb_entries_barrier_10_io_y_pf,
         _tlb_entries_barrier_9_io_y_pf,
         _tlb_entries_barrier_8_io_y_pf,
         _tlb_entries_barrier_7_io_y_pf,
         _tlb_entries_barrier_6_io_y_pf,
         _tlb_entries_barrier_5_io_y_pf,
         _tlb_entries_barrier_4_io_y_pf,
         _tlb_entries_barrier_3_io_y_pf,
         _tlb_entries_barrier_2_io_y_pf,
         _tlb_entries_barrier_1_io_y_pf,
         _tlb_entries_barrier_io_y_pf};
      automatic logic [12:0] tlb__92 =
        {_tlb_entries_barrier_12_io_y_u,
         _tlb_entries_barrier_11_io_y_u,
         _tlb_entries_barrier_10_io_y_u,
         _tlb_entries_barrier_9_io_y_u,
         _tlb_entries_barrier_8_io_y_u,
         _tlb_entries_barrier_7_io_y_u,
         _tlb_entries_barrier_6_io_y_u,
         _tlb_entries_barrier_5_io_y_u,
         _tlb_entries_barrier_4_io_y_u,
         _tlb_entries_barrier_3_io_y_u,
         _tlb_entries_barrier_2_io_y_u,
         _tlb_entries_barrier_1_io_y_u,
         _tlb_entries_barrier_io_y_u};
      automatic logic [12:0] tlb_priv_rw_ok =
        (~(s1_tlb_req_prv[0]) | io_ptw_status_sum ? tlb__92 : 13'h0)
        | (s1_tlb_req_prv[0] ? ~tlb__92 : 13'h0);
      automatic logic [13:0] tlb__93 =
        {1'h1,
         ~(_tlb_entries_barrier_12_io_y_ae_ptw | _tlb_entries_barrier_12_io_y_ae_final),
         ~(_tlb_entries_barrier_11_io_y_ae_ptw | _tlb_entries_barrier_11_io_y_ae_final),
         ~(_tlb_entries_barrier_10_io_y_ae_ptw | _tlb_entries_barrier_10_io_y_ae_final),
         ~(_tlb_entries_barrier_9_io_y_ae_ptw | _tlb_entries_barrier_9_io_y_ae_final),
         ~(_tlb_entries_barrier_8_io_y_ae_ptw | _tlb_entries_barrier_8_io_y_ae_final),
         ~(_tlb_entries_barrier_7_io_y_ae_ptw | _tlb_entries_barrier_7_io_y_ae_final),
         ~(_tlb_entries_barrier_6_io_y_ae_ptw | _tlb_entries_barrier_6_io_y_ae_final),
         ~(_tlb_entries_barrier_5_io_y_ae_ptw | _tlb_entries_barrier_5_io_y_ae_final),
         ~(_tlb_entries_barrier_4_io_y_ae_ptw | _tlb_entries_barrier_4_io_y_ae_final),
         ~(_tlb_entries_barrier_3_io_y_ae_ptw | _tlb_entries_barrier_3_io_y_ae_final),
         ~(_tlb_entries_barrier_2_io_y_ae_ptw | _tlb_entries_barrier_2_io_y_ae_final),
         ~(_tlb_entries_barrier_1_io_y_ae_ptw | _tlb_entries_barrier_1_io_y_ae_final),
         ~(_tlb_entries_barrier_io_y_ae_ptw | _tlb_entries_barrier_io_y_ae_final)};
      automatic logic [13:0] tlb_lrscAllowed =
        {{2{_tlb__io_resp_cacheable}},
         _tlb_entries_barrier_11_io_y_c,
         _tlb_entries_barrier_10_io_y_c,
         _tlb_entries_barrier_9_io_y_c,
         _tlb_entries_barrier_8_io_y_c,
         _tlb_entries_barrier_7_io_y_c,
         _tlb_entries_barrier_6_io_y_c,
         _tlb_entries_barrier_5_io_y_c,
         _tlb_entries_barrier_4_io_y_c,
         _tlb_entries_barrier_3_io_y_c,
         _tlb_entries_barrier_2_io_y_c,
         _tlb_entries_barrier_1_io_y_c,
         _tlb_entries_barrier_io_y_c};
      automatic logic [13:0] tlb_ppp_array =
        {{2{_tlb__io_resp_pp}},
         _tlb_entries_barrier_11_io_y_ppp,
         _tlb_entries_barrier_10_io_y_ppp,
         _tlb_entries_barrier_9_io_y_ppp,
         _tlb_entries_barrier_8_io_y_ppp,
         _tlb_entries_barrier_7_io_y_ppp,
         _tlb_entries_barrier_6_io_y_ppp,
         _tlb_entries_barrier_5_io_y_ppp,
         _tlb_entries_barrier_4_io_y_ppp,
         _tlb_entries_barrier_3_io_y_ppp,
         _tlb_entries_barrier_2_io_y_ppp,
         _tlb_entries_barrier_1_io_y_ppp,
         _tlb_entries_barrier_io_y_ppp};
      automatic logic [13:0] tlb_paa_array =
        {{2{_tlb__io_resp_aa}},
         _tlb_entries_barrier_11_io_y_paa,
         _tlb_entries_barrier_10_io_y_paa,
         _tlb_entries_barrier_9_io_y_paa,
         _tlb_entries_barrier_8_io_y_paa,
         _tlb_entries_barrier_7_io_y_paa,
         _tlb_entries_barrier_6_io_y_paa,
         _tlb_entries_barrier_5_io_y_paa,
         _tlb_entries_barrier_4_io_y_paa,
         _tlb_entries_barrier_3_io_y_paa,
         _tlb_entries_barrier_2_io_y_paa,
         _tlb_entries_barrier_1_io_y_paa,
         _tlb_entries_barrier_io_y_paa};
      automatic logic [13:0] tlb_pal_array =
        {{2{_tlb__io_resp_al}},
         _tlb_entries_barrier_11_io_y_pal,
         _tlb_entries_barrier_10_io_y_pal,
         _tlb_entries_barrier_9_io_y_pal,
         _tlb_entries_barrier_8_io_y_pal,
         _tlb_entries_barrier_7_io_y_pal,
         _tlb_entries_barrier_6_io_y_pal,
         _tlb_entries_barrier_5_io_y_pal,
         _tlb_entries_barrier_4_io_y_pal,
         _tlb_entries_barrier_3_io_y_pal,
         _tlb_entries_barrier_2_io_y_pal,
         _tlb_entries_barrier_1_io_y_pal,
         _tlb_entries_barrier_io_y_pal};
      automatic logic [3:0]  _GEN_226 =
        s1_tlb_req_vaddr[3:0] & (4'h1 << s1_tlb_req_size) - 4'h1;
      automatic logic        tlb__94 = s1_tlb_req_cmd == 5'h6;
      automatic logic        tlb__95 = s1_tlb_req_cmd == 5'h7;
      automatic logic        tlb__96 = tlb__94 | tlb__95;
      automatic logic        tlb__97 =
        s1_tlb_req_cmd == 5'h4 | s1_tlb_req_cmd == 5'h9 | s1_tlb_req_cmd == 5'hA
        | s1_tlb_req_cmd == 5'hB;
      automatic logic        tlb__98 =
        s1_tlb_req_cmd == 5'h8 | s1_tlb_req_cmd == 5'hC | s1_tlb_req_cmd == 5'hD
        | s1_tlb_req_cmd == 5'hE | s1_tlb_req_cmd == 5'hF;
      automatic logic        tlb__99 = s1_tlb_req_cmd == 5'h11;
      automatic logic        tlb__100 = tlb__97 | tlb__98;
      automatic logic        tlb_cmd_read =
        s1_tlb_req_cmd == 5'h0 | s1_tlb_req_cmd == 5'h10 | tlb__94 | tlb__95 | tlb__100;
      automatic logic        tlb_cmd_write =
        s1_tlb_req_cmd == 5'h1 | tlb__99 | tlb__95 | tlb__100;
      automatic logic        tlb_cmd_write_perms =
        tlb_cmd_write | s1_tlb_req_cmd == 5'h5 | s1_tlb_req_cmd == 5'h17;
      automatic logic [13:0] tlb_ae_array =
        ((|_GEN_226)
           ? {{2{_tlb__io_resp_eff}},
              _tlb_entries_barrier_11_io_y_eff,
              _tlb_entries_barrier_10_io_y_eff,
              _tlb_entries_barrier_9_io_y_eff,
              _tlb_entries_barrier_8_io_y_eff,
              _tlb_entries_barrier_7_io_y_eff,
              _tlb_entries_barrier_6_io_y_eff,
              _tlb_entries_barrier_5_io_y_eff,
              _tlb_entries_barrier_4_io_y_eff,
              _tlb_entries_barrier_3_io_y_eff,
              _tlb_entries_barrier_2_io_y_eff,
              _tlb_entries_barrier_1_io_y_eff,
              _tlb_entries_barrier_io_y_eff}
           : 14'h0) | (tlb__96 ? ~tlb_lrscAllowed : 14'h0);
      automatic logic [13:0] tlb__101 =
        {1'h1,
         ~_tlb_entries_barrier_12_io_y_ae_ptw,
         ~_tlb_entries_barrier_11_io_y_ae_ptw,
         ~_tlb_entries_barrier_10_io_y_ae_ptw,
         ~_tlb_entries_barrier_9_io_y_ae_ptw,
         ~_tlb_entries_barrier_8_io_y_ae_ptw,
         ~_tlb_entries_barrier_7_io_y_ae_ptw,
         ~_tlb_entries_barrier_6_io_y_ae_ptw,
         ~_tlb_entries_barrier_5_io_y_ae_ptw,
         ~_tlb_entries_barrier_4_io_y_ae_ptw,
         ~_tlb_entries_barrier_3_io_y_ae_ptw,
         ~_tlb_entries_barrier_2_io_y_ae_ptw,
         ~_tlb_entries_barrier_1_io_y_ae_ptw,
         ~_tlb_entries_barrier_io_y_ae_ptw};
      automatic logic [13:0] tlb__102 =
        {1'h1,
         ~_tlb_entries_barrier_12_io_y_gf,
         ~_tlb_entries_barrier_11_io_y_gf,
         ~_tlb_entries_barrier_10_io_y_gf,
         ~_tlb_entries_barrier_9_io_y_gf,
         ~_tlb_entries_barrier_8_io_y_gf,
         ~_tlb_entries_barrier_7_io_y_gf,
         ~_tlb_entries_barrier_6_io_y_gf,
         ~_tlb_entries_barrier_5_io_y_gf,
         ~_tlb_entries_barrier_4_io_y_gf,
         ~_tlb_entries_barrier_3_io_y_gf,
         ~_tlb_entries_barrier_2_io_y_gf,
         ~_tlb_entries_barrier_1_io_y_gf,
         ~_tlb_entries_barrier_io_y_gf};
      s2_req_dprv <= s1_req_dprv;
      s2_req_dv <= s1_req_dv;
      s2_req_no_alloc <= s1_req_no_alloc;
      s2_req_no_xcpt <= s1_req_no_xcpt;
      s2_req_mask <= s1_req_mask;
      s2_tlb_xcpt_pf_ld <=
        tlb_bad_va & tlb_cmd_read
        | (|((tlb_cmd_read
                ? ({1'h0,
                    ~(tlb_priv_rw_ok
                      & ({_tlb_entries_barrier_12_io_y_sr,
                          _tlb_entries_barrier_11_io_y_sr,
                          _tlb_entries_barrier_10_io_y_sr,
                          _tlb_entries_barrier_9_io_y_sr,
                          _tlb_entries_barrier_8_io_y_sr,
                          _tlb_entries_barrier_7_io_y_sr,
                          _tlb_entries_barrier_6_io_y_sr,
                          _tlb_entries_barrier_5_io_y_sr,
                          _tlb_entries_barrier_4_io_y_sr,
                          _tlb_entries_barrier_3_io_y_sr,
                          _tlb_entries_barrier_2_io_y_sr,
                          _tlb_entries_barrier_1_io_y_sr,
                          _tlb_entries_barrier_io_y_sr}
                         | (io_ptw_status_mxr
                              ? {_tlb_entries_barrier_12_io_y_sx,
                                 _tlb_entries_barrier_11_io_y_sx,
                                 _tlb_entries_barrier_10_io_y_sx,
                                 _tlb_entries_barrier_9_io_y_sx,
                                 _tlb_entries_barrier_8_io_y_sx,
                                 _tlb_entries_barrier_7_io_y_sx,
                                 _tlb_entries_barrier_6_io_y_sx,
                                 _tlb_entries_barrier_5_io_y_sx,
                                 _tlb_entries_barrier_4_io_y_sx,
                                 _tlb_entries_barrier_3_io_y_sx,
                                 _tlb_entries_barrier_2_io_y_sx,
                                 _tlb_entries_barrier_1_io_y_sx,
                                 _tlb_entries_barrier_io_y_sx}
                              : 13'h0)))} & tlb__101 | tlb_ptw_pf_array) & tlb__102
                : 14'h0) & tlb_hits));
      s2_tlb_xcpt_pf_st <=
        tlb_bad_va & tlb_cmd_write_perms
        | (|((tlb_cmd_write_perms
                ? ({1'h0,
                    ~(tlb_priv_rw_ok
                      & {_tlb_entries_barrier_12_io_y_sw,
                         _tlb_entries_barrier_11_io_y_sw,
                         _tlb_entries_barrier_10_io_y_sw,
                         _tlb_entries_barrier_9_io_y_sw,
                         _tlb_entries_barrier_8_io_y_sw,
                         _tlb_entries_barrier_7_io_y_sw,
                         _tlb_entries_barrier_6_io_y_sw,
                         _tlb_entries_barrier_5_io_y_sw,
                         _tlb_entries_barrier_4_io_y_sw,
                         _tlb_entries_barrier_3_io_y_sw,
                         _tlb_entries_barrier_2_io_y_sw,
                         _tlb_entries_barrier_1_io_y_sw,
                         _tlb_entries_barrier_io_y_sw})} & tlb__101 | tlb_ptw_pf_array)
                  & tlb__102
                : 14'h0) & tlb_hits));
      s2_tlb_xcpt_ae_ld <=
        |((tlb_cmd_read
             ? tlb_ae_array
               | ~({{2{tlb_newEntry_pr}},
                    _tlb_entries_barrier_11_io_y_pr,
                    _tlb_entries_barrier_10_io_y_pr,
                    _tlb_entries_barrier_9_io_y_pr,
                    _tlb_entries_barrier_8_io_y_pr,
                    _tlb_entries_barrier_7_io_y_pr,
                    _tlb_entries_barrier_6_io_y_pr,
                    _tlb_entries_barrier_5_io_y_pr,
                    _tlb_entries_barrier_4_io_y_pr,
                    _tlb_entries_barrier_3_io_y_pr,
                    _tlb_entries_barrier_2_io_y_pr,
                    _tlb_entries_barrier_1_io_y_pr,
                    _tlb_entries_barrier_io_y_pr} & tlb__93)
             : 14'h0) & tlb_hits);
      s2_tlb_xcpt_ae_st <=
        |(((tlb_cmd_write_perms
              ? tlb_ae_array
                | ~({{2{tlb_newEntry_pw}},
                     _tlb_entries_barrier_11_io_y_pw,
                     _tlb_entries_barrier_10_io_y_pw,
                     _tlb_entries_barrier_9_io_y_pw,
                     _tlb_entries_barrier_8_io_y_pw,
                     _tlb_entries_barrier_7_io_y_pw,
                     _tlb_entries_barrier_6_io_y_pw,
                     _tlb_entries_barrier_5_io_y_pw,
                     _tlb_entries_barrier_4_io_y_pw,
                     _tlb_entries_barrier_3_io_y_pw,
                     _tlb_entries_barrier_2_io_y_pw,
                     _tlb_entries_barrier_1_io_y_pw,
                     _tlb_entries_barrier_io_y_pw} & tlb__93)
              : 14'h0) | (tlb__99 ? ~(tlb_ppp_array | tlb_lrscAllowed) : 14'h0)
           | (tlb__97 ? ~(tlb_pal_array | tlb_lrscAllowed) : 14'h0)
           | (tlb__98 ? ~(tlb_paa_array | tlb_lrscAllowed) : 14'h0)) & tlb_hits);
      s2_tlb_xcpt_ma_ld <= (|_GEN_226) & tlb_cmd_read;
      s2_tlb_xcpt_ma_st <= (|_GEN_226) & tlb_cmd_write;
      s2_pma_cacheable <= |(tlb_lrscAllowed & tlb_hits);
      s2_pma_must_alloc <=
        |(((tlb__99 ? ~tlb_ppp_array : 14'h0) | (tlb__97 ? ~tlb_pal_array : 14'h0)
           | (tlb__98 ? ~tlb_paa_array : 14'h0) | {14{tlb__96}}) & tlb_hits);
      s2_vaddr_r <= s1_vaddr;
      s2_hit_state_state <= s1_hit_state_state;
      s2_victim_way_r <= {_lfsr_prng_io_out_1, _lfsr_prng_io_out_0};
    end
    s2_tlb_xcpt_gf_ld <= ~_GEN_219 & s2_tlb_xcpt_gf_ld;
    s2_tlb_xcpt_gf_st <= ~_GEN_219 & s2_tlb_xcpt_gf_st;
    if (_GEN_96) begin
    end
    else
      s2_uncached_resp_addr <= uncachedReqs_0_addr;
    s2_flush_valid_pre_tag_ecc <= s1_flush_valid;
    s2_meta_correctable_errors_r <= ~s1_meta_clk_en & s2_meta_correctable_errors_r;
    s2_meta_correctable_errors_r_1 <= ~s1_meta_clk_en & s2_meta_correctable_errors_r_1;
    s2_meta_correctable_errors_r_2 <= ~s1_meta_clk_en & s2_meta_correctable_errors_r_2;
    s2_meta_correctable_errors_r_3 <= ~s1_meta_clk_en & s2_meta_correctable_errors_r_3;
    s2_meta_uncorrectable_errors_r <= ~s1_meta_clk_en & s2_meta_uncorrectable_errors_r;
    s2_meta_uncorrectable_errors_r_1 <=
      ~s1_meta_clk_en & s2_meta_uncorrectable_errors_r_1;
    s2_meta_uncorrectable_errors_r_2 <=
      ~s1_meta_clk_en & s2_meta_uncorrectable_errors_r_2;
    s2_meta_uncorrectable_errors_r_3 <=
      ~s1_meta_clk_en & s2_meta_uncorrectable_errors_r_3;
    if (s1_meta_clk_en) begin
      s2_meta_corrected_r <= _rockettile_dcache_tag_array_ext_RW0_rdata[21:0];
      s2_meta_corrected_r_1 <= _rockettile_dcache_tag_array_ext_RW0_rdata[43:22];
      s2_meta_corrected_r_2 <= _rockettile_dcache_tag_array_ext_RW0_rdata[65:44];
      s2_meta_corrected_r_3 <= _rockettile_dcache_tag_array_ext_RW0_rdata[87:66];
    end
    if (s1_valid | inWriteback | _io_cpu_replay_next_output) begin
      automatic logic [4:0] _GEN_227 =
        _io_cpu_replay_next_output | inWriteback | s1_did_read & s1_read_mask
          ? (_GEN_96 ? {1'h0, inWriteback ? releaseWay : s1_hit_way} : 5'h10)
          : 5'h0;
      s2_data <=
        (_GEN_227[0] ? _data_io_resp_0 : 64'h0) | (_GEN_227[1] ? _data_io_resp_1 : 64'h0)
        | (_GEN_227[2] ? _data_io_resp_2 : 64'h0)
        | (_GEN_227[3] ? _data_io_resp_3 : 64'h0)
        | (_GEN_227[4] ? auto_out_d_bits_data : 64'h0);
    end
    if (s1_probe) begin
      s2_probe_way <= s1_hit_way;
      s2_probe_state_state <= s1_hit_state_state;
    end
    if (s1_valid_not_nacked)
      s2_hit_way <= s1_hit_way;
    s2_waw_hazard <= ~s1_valid_not_nacked & s2_waw_hazard;
    if (_GEN_220)
      lrscAddr <= s2_req_addr[39:6];
    if (s1_valid_not_nacked & s1_write) begin
      pstore1_cmd <= s1_req_cmd;
      pstore1_addr <= s1_vaddr;
      pstore1_data <= io_cpu_s1_data_data;
      pstore1_way <= s1_hit_way;
      if (_GEN_25)
        pstore1_mask <= io_cpu_s1_data_mask;
      else
        pstore1_mask <= s1_mask_xwr;
      pstore1_rmw <= _GEN_23 | _GEN_24 | (_GEN_26 | _GEN_24) & _GEN_25;
    end
    pstore_drain_on_miss_REG <= _io_cpu_s2_nack_output;
    if (advance_pstore1) begin
      pstore2_addr <= pstore1_addr;
      pstore2_way <= pstore1_way;
      pstore2_storegen_data_r <= _amoalus_0_io_out[7:0];
      pstore2_storegen_data_r_1 <= _amoalus_0_io_out[15:8];
      pstore2_storegen_data_r_2 <= _amoalus_0_io_out[23:16];
      pstore2_storegen_data_r_3 <= _amoalus_0_io_out[31:24];
      pstore2_storegen_data_r_4 <= _amoalus_0_io_out[39:32];
      pstore2_storegen_data_r_5 <= _amoalus_0_io_out[47:40];
      pstore2_storegen_data_r_6 <= _amoalus_0_io_out[55:48];
      pstore2_storegen_data_r_7 <= _amoalus_0_io_out[63:56];
      pstore2_storegen_mask <= pstore1_mask;
    end
    if (_GEN_100)
      blockUncachedGrant <= dataArb_io_in_0_valid;
    else
      blockUncachedGrant <= dataArb_io_out_valid;
    s1_release_data_valid <= ~dataArb_ & dataArb_io_in_2_valid;
    s2_release_data_valid <= s1_release_data_valid & ~releaseRejected;
    io_cpu_s2_xcpt_REG <= tlb_io_req_valid & ~s1_req_no_xcpt & ~s1_nack;
    doUncachedResp <= _io_cpu_replay_next_output;
    REG <= reset;
    if (reset) begin
      tlb_state <= 2'h0;
      tlb_state_vec_0 <= 7'h0;
      tlb_state_reg_1 <= 3'h0;
      s1_valid <= 1'h0;
      s1_probe <= 1'h0;
      cached_grant_wait <= 1'h0;
      resetting <= 1'h0;
      flushCounter <= 8'hC0;
      release_ack_wait <= 1'h0;
      release_state <= 4'h0;
      uncachedInFlight_0 <= 1'h0;
      s2_valid <= 1'h0;
      s2_probe <= 1'h0;
      lrscCount <= 7'h0;
      pstore2_valid <= 1'h0;
      pstore1_held <= 1'h0;
      counter <= 9'h0;
      grantInProgress <= 1'h0;
      blockProbeAfterGrantCount <= 3'h0;
      counter_1 <= 9'h0;
      io_cpu_perf_release_counter <= 9'h0;
    end
    else begin
      automatic logic       tlb__103 = tlb_io_req_valid & tlb__12;
      automatic logic       _GEN_228 = _GEN_89 & grantIsCached & d_last;
      automatic logic       _GEN_229;
      automatic logic [8:0] flushCounterNext;
      _GEN_229 = _GEN_104 & ~metaArb__0;
      flushCounterNext = {1'h0, flushCounter} + 9'h1;
      if (io_ptw_resp_valid)
        tlb_state <= 2'h0;
      else if (tlb_state == 2'h2 & tlb_io_sfence_valid)
        tlb_state <= 2'h3;
      else if (tlb_io_ptw_req_valid) begin
        if (io_ptw_req_ready)
          tlb_state <= {1'h1, tlb_io_sfence_valid};
        else if (tlb_io_sfence_valid)
          tlb_state <= 2'h0;
        else if (tlb__78)
          tlb_state <= 2'h1;
      end
      else if (tlb__78)
        tlb_state <= 2'h1;
      if (tlb__103 & tlb__76) begin
        automatic logic [3:0] tlb_hi_1;
        tlb_hi_1 =
          {tlb_sector_hits_7, tlb_sector_hits_6, tlb_sector_hits_5, tlb_sector_hits_4};
        tlb_state_vec_0 <=
          {~(|tlb_hi_1),
           (|tlb_hi_1)
             ? {~(|(_GEN_185[2:1])),
                (|(_GEN_185[2:1])) ? ~tlb__77 : tlb_state_vec_0[4],
                (|(_GEN_185[2:1])) ? tlb_state_vec_0[3] : ~tlb__77}
             : tlb_state_vec_0[5:3],
           (|tlb_hi_1)
             ? tlb_state_vec_0[2:0]
             : {~(|(_GEN_185[2:1])),
                (|(_GEN_185[2:1])) ? ~tlb__77 : tlb_state_vec_0[1],
                (|(_GEN_185[2:1])) ? tlb_state_vec_0[0] : ~tlb__77}};
      end
      if (tlb__103 & (tlb__63 | tlb__64 | tlb__65 | tlb__66)) begin
        automatic logic [1:0] tlb_hi_4;
        automatic logic       tlb__104;
        tlb_hi_4 = {tlb__66, tlb__65};
        tlb__104 = tlb__66 | tlb__64;
        tlb_state_reg_1 <=
          {~(|tlb_hi_4),
           (|tlb_hi_4) ? ~tlb__104 : tlb_state_reg_1[1],
           (|tlb_hi_4) ? tlb_state_reg_1[0] : ~tlb__104};
      end
      s1_valid <= _io_cpu_req_ready_output & io_cpu_req_valid;
      s1_probe <= _GEN_229 | _GEN_218;
      cached_grant_wait <= ~_GEN_228 & (_GEN_221 & ~s2_uncached | cached_grant_wait);
      resetting <= ~(resetting & flushCounterNext[8:6] == 3'h4) & (REG | resetting);
      if (resetting)
        flushCounter <= flushCounterNext[7:0];
      release_ack_wait <=
        _GEN_223 | (~_GEN_89 | grantIsCached | grantIsUncached | ~grantIsVoluntary)
        & release_ack_wait;
      if (~metaArb_ & metaArb_io_in_4_valid)
        release_state <= 4'h0;
      else begin
        automatic logic       _GEN_230;
        automatic logic [3:0] _GEN_231;
        automatic logic       _GEN_232;
        automatic logic       _GEN_233;
        _GEN_230 = s2_victim_dirty & ~(s2_valid_flush_line & s2_req_size[1]);
        _GEN_231 = {1'h0, releaseDone, 2'h3};
        _GEN_232 = releaseDone | _GEN_229;
        _GEN_233 = _GEN_105 & releaseDone | _GEN_229;
        if (_GEN_93) begin
          if (releaseDone)
            release_state <= 4'h6;
          else if (_GEN_106) begin
            if (_GEN_105) begin
              if (_GEN_232)
                release_state <= 4'h0;
              else if (s2_probe) begin
                if (|_GEN_61)
                  release_state <= 4'h4;
                else if (s2_prb_ack_data)
                  release_state <= 4'h2;
                else if (|s2_probe_state_state)
                  release_state <= 4'h3;
                else
                  release_state <= 4'h5;
              end
              else if (s2_want_victimize) begin
                if (_GEN_230)
                  release_state <= 4'h1;
                else
                  release_state <= 4'h6;
              end
            end
            else if (_GEN_229)
              release_state <= 4'h0;
            else if (s2_probe) begin
              if (|_GEN_61)
                release_state <= 4'h4;
              else if (s2_prb_ack_data)
                release_state <= 4'h2;
              else if (|s2_probe_state_state)
                release_state <= 4'h3;
              else if (releaseDone)
                release_state <= 4'h0;
              else
                release_state <= 4'h5;
            end
            else if (s2_want_victimize) begin
              if (_GEN_230)
                release_state <= 4'h1;
              else
                release_state <= 4'h6;
            end
          end
          else if (_GEN_233)
            release_state <= 4'h0;
          else if (s2_probe) begin
            if (|_GEN_61)
              release_state <= 4'h4;
            else if (s2_prb_ack_data)
              release_state <= 4'h2;
            else if (|s2_probe_state_state)
              release_state <= _GEN_231;
            else if (releaseDone)
              release_state <= 4'h0;
            else
              release_state <= 4'h5;
          end
          else if (s2_want_victimize) begin
            if (_GEN_230)
              release_state <= 4'h1;
            else
              release_state <= 4'h6;
          end
        end
        else if (_GEN_28) begin
          if (releaseDone)
            release_state <= 4'h7;
          else if (_GEN_106) begin
            if (_GEN_105) begin
              if (_GEN_232)
                release_state <= 4'h0;
              else if (s2_probe) begin
                if (|_GEN_61)
                  release_state <= 4'h4;
                else if (s2_prb_ack_data)
                  release_state <= 4'h2;
                else if (|s2_probe_state_state)
                  release_state <= 4'h3;
                else
                  release_state <= 4'h5;
              end
              else if (s2_want_victimize) begin
                if (_GEN_230)
                  release_state <= 4'h1;
                else
                  release_state <= 4'h6;
              end
            end
            else if (_GEN_229)
              release_state <= 4'h0;
            else if (s2_probe) begin
              if (|_GEN_61)
                release_state <= 4'h4;
              else if (s2_prb_ack_data)
                release_state <= 4'h2;
              else if (|s2_probe_state_state)
                release_state <= 4'h3;
              else if (releaseDone)
                release_state <= 4'h0;
              else
                release_state <= 4'h5;
            end
            else if (s2_want_victimize) begin
              if (_GEN_230)
                release_state <= 4'h1;
              else
                release_state <= 4'h6;
            end
          end
          else if (_GEN_233)
            release_state <= 4'h0;
          else if (s2_probe) begin
            if (|_GEN_61)
              release_state <= 4'h4;
            else if (s2_prb_ack_data)
              release_state <= 4'h2;
            else if (|s2_probe_state_state)
              release_state <= _GEN_231;
            else if (releaseDone)
              release_state <= 4'h0;
            else
              release_state <= 4'h5;
          end
          else if (s2_want_victimize) begin
            if (_GEN_230)
              release_state <= 4'h1;
            else
              release_state <= 4'h6;
          end
        end
        else if (_GEN_106) begin
          if (releaseDone)
            release_state <= 4'h7;
          else if (_GEN_233)
            release_state <= 4'h0;
          else if (s2_probe) begin
            if (|_GEN_61)
              release_state <= 4'h4;
            else if (s2_prb_ack_data)
              release_state <= 4'h2;
            else if (|s2_probe_state_state)
              release_state <= 4'h3;
            else
              release_state <= 4'h5;
          end
          else if (s2_want_victimize) begin
            if (_GEN_230)
              release_state <= 4'h1;
            else
              release_state <= 4'h6;
          end
        end
        else if (_GEN_233)
          release_state <= 4'h0;
        else if (s2_probe) begin
          if (|_GEN_61)
            release_state <= 4'h4;
          else if (s2_prb_ack_data)
            release_state <= 4'h2;
          else if (|s2_probe_state_state)
            release_state <= _GEN_231;
          else if (releaseDone)
            release_state <= 4'h0;
          else
            release_state <= 4'h5;
        end
        else if (s2_want_victimize) begin
          if (_GEN_230)
            release_state <= 4'h1;
          else
            release_state <= 4'h6;
        end
      end
      uncachedInFlight_0 <=
        (~_GEN_89 | grantIsCached | ~(grantIsUncached & _GEN_95))
        & (_GEN_222 | uncachedInFlight_0);
      s2_valid <= s1_valid_masked & ~s1_sfence;
      s2_probe <= s1_probe;
      if (s1_probe)
        lrscCount <= 7'h0;
      else if (s2_valid_masked & (|(lrscCount[6:2])))
        lrscCount <= 7'h3;
      else if (|lrscCount)
        lrscCount <= lrscCount - 7'h1;
      else if (_GEN_220) begin
        if (s2_hit)
          lrscCount <= 7'h4F;
        else
          lrscCount <= 7'h0;
      end
      pstore2_valid <= pstore2_valid & ~dataArb_io_in_0_bits_write | advance_pstore1;
      pstore1_held <=
        (_GEN_84 | pstore1_held) & pstore2_valid & ~dataArb_io_in_0_bits_write;
      if (_GEN_89) begin
        if (|counter)
          counter <= counter1;
        else if (auto_out_d_bits_opcode[0])
          counter <= ~(_GEN_90[11:3]);
        else
          counter <= 9'h0;
      end
      if (_GEN_94)
        grantInProgress <= ~d_last;
      if (_GEN_228)
        blockProbeAfterGrantCount <= 3'h7;
      else if (|blockProbeAfterGrantCount)
        blockProbeAfterGrantCount <= blockProbeAfterGrantCount - 3'h1;
      if (_GEN_101) begin
        if (c_first) begin
          if (nodeOut_c_bits_opcode[0])
            counter_1 <= ~(_GEN_102[11:3]);
          else
            counter_1 <= 9'h0;
        end
        else
          counter_1 <= counter1_1;
        if (io_cpu_perf_release_counter == 9'h0) begin
          if (nodeOut_c_bits_opcode[0])
            io_cpu_perf_release_counter <= ~(_GEN_102[11:3]);
          else
            io_cpu_perf_release_counter <= 9'h0;
        end
        else
          io_cpu_perf_release_counter <= io_cpu_perf_release_counter - 9'h1;
      end
    end
  end // always @(posedge)
  OptimizationBarrier_TLBEntryData tlb_mpu_ppn_barrier (
    .io_x_ppn      (tlb_special_entry_data_0[41:22]),
    .io_x_u        (tlb_special_entry_data_0[21]),
    .io_x_ae_ptw   (tlb_special_entry_data_0[19]),
    .io_x_ae_final (tlb_special_entry_data_0[18]),
    .io_x_pf       (tlb_special_entry_data_0[16]),
    .io_x_gf       (tlb_special_entry_data_0[15]),
    .io_x_sw       (tlb_special_entry_data_0[14]),
    .io_x_sx       (tlb_special_entry_data_0[13]),
    .io_x_sr       (tlb_special_entry_data_0[12]),
    .io_x_pw       (tlb_special_entry_data_0[8]),
    .io_x_px       (tlb_special_entry_data_0[7]),
    .io_x_pr       (tlb_special_entry_data_0[6]),
    .io_x_ppp      (tlb_special_entry_data_0[5]),
    .io_x_pal      (tlb_special_entry_data_0[4]),
    .io_x_paa      (tlb_special_entry_data_0[3]),
    .io_x_eff      (tlb_special_entry_data_0[2]),
    .io_x_c        (tlb_special_entry_data_0[1]),
    .io_y_ppn      (_tlb_mpu_ppn_barrier_io_y_ppn),
    .io_y_u        (/* unused */),
    .io_y_ae_ptw   (/* unused */),
    .io_y_ae_final (/* unused */),
    .io_y_pf       (/* unused */),
    .io_y_gf       (/* unused */),
    .io_y_sw       (/* unused */),
    .io_y_sx       (/* unused */),
    .io_y_sr       (/* unused */),
    .io_y_pw       (/* unused */),
    .io_y_px       (/* unused */),
    .io_y_pr       (/* unused */),
    .io_y_ppp      (/* unused */),
    .io_y_pal      (/* unused */),
    .io_y_paa      (/* unused */),
    .io_y_eff      (/* unused */),
    .io_y_c        (/* unused */)
  );
  PMPChecker_s3 tlb_pmp (
    .io_prv         (tlb_mpu_priv[1:0]),
    .io_pmp_0_cfg_l (io_ptw_pmp_0_cfg_l),
    .io_pmp_0_cfg_a (io_ptw_pmp_0_cfg_a),
    .io_pmp_0_cfg_x (io_ptw_pmp_0_cfg_x),
    .io_pmp_0_cfg_w (io_ptw_pmp_0_cfg_w),
    .io_pmp_0_cfg_r (io_ptw_pmp_0_cfg_r),
    .io_pmp_0_addr  (io_ptw_pmp_0_addr),
    .io_pmp_0_mask  (io_ptw_pmp_0_mask),
    .io_pmp_1_cfg_l (io_ptw_pmp_1_cfg_l),
    .io_pmp_1_cfg_a (io_ptw_pmp_1_cfg_a),
    .io_pmp_1_cfg_x (io_ptw_pmp_1_cfg_x),
    .io_pmp_1_cfg_w (io_ptw_pmp_1_cfg_w),
    .io_pmp_1_cfg_r (io_ptw_pmp_1_cfg_r),
    .io_pmp_1_addr  (io_ptw_pmp_1_addr),
    .io_pmp_1_mask  (io_ptw_pmp_1_mask),
    .io_pmp_2_cfg_l (io_ptw_pmp_2_cfg_l),
    .io_pmp_2_cfg_a (io_ptw_pmp_2_cfg_a),
    .io_pmp_2_cfg_x (io_ptw_pmp_2_cfg_x),
    .io_pmp_2_cfg_w (io_ptw_pmp_2_cfg_w),
    .io_pmp_2_cfg_r (io_ptw_pmp_2_cfg_r),
    .io_pmp_2_addr  (io_ptw_pmp_2_addr),
    .io_pmp_2_mask  (io_ptw_pmp_2_mask),
    .io_pmp_3_cfg_l (io_ptw_pmp_3_cfg_l),
    .io_pmp_3_cfg_a (io_ptw_pmp_3_cfg_a),
    .io_pmp_3_cfg_x (io_ptw_pmp_3_cfg_x),
    .io_pmp_3_cfg_w (io_ptw_pmp_3_cfg_w),
    .io_pmp_3_cfg_r (io_ptw_pmp_3_cfg_r),
    .io_pmp_3_addr  (io_ptw_pmp_3_addr),
    .io_pmp_3_mask  (io_ptw_pmp_3_mask),
    .io_pmp_4_cfg_l (io_ptw_pmp_4_cfg_l),
    .io_pmp_4_cfg_a (io_ptw_pmp_4_cfg_a),
    .io_pmp_4_cfg_x (io_ptw_pmp_4_cfg_x),
    .io_pmp_4_cfg_w (io_ptw_pmp_4_cfg_w),
    .io_pmp_4_cfg_r (io_ptw_pmp_4_cfg_r),
    .io_pmp_4_addr  (io_ptw_pmp_4_addr),
    .io_pmp_4_mask  (io_ptw_pmp_4_mask),
    .io_pmp_5_cfg_l (io_ptw_pmp_5_cfg_l),
    .io_pmp_5_cfg_a (io_ptw_pmp_5_cfg_a),
    .io_pmp_5_cfg_x (io_ptw_pmp_5_cfg_x),
    .io_pmp_5_cfg_w (io_ptw_pmp_5_cfg_w),
    .io_pmp_5_cfg_r (io_ptw_pmp_5_cfg_r),
    .io_pmp_5_addr  (io_ptw_pmp_5_addr),
    .io_pmp_5_mask  (io_ptw_pmp_5_mask),
    .io_pmp_6_cfg_l (io_ptw_pmp_6_cfg_l),
    .io_pmp_6_cfg_a (io_ptw_pmp_6_cfg_a),
    .io_pmp_6_cfg_x (io_ptw_pmp_6_cfg_x),
    .io_pmp_6_cfg_w (io_ptw_pmp_6_cfg_w),
    .io_pmp_6_cfg_r (io_ptw_pmp_6_cfg_r),
    .io_pmp_6_addr  (io_ptw_pmp_6_addr),
    .io_pmp_6_mask  (io_ptw_pmp_6_mask),
    .io_pmp_7_cfg_l (io_ptw_pmp_7_cfg_l),
    .io_pmp_7_cfg_a (io_ptw_pmp_7_cfg_a),
    .io_pmp_7_cfg_x (io_ptw_pmp_7_cfg_x),
    .io_pmp_7_cfg_w (io_ptw_pmp_7_cfg_w),
    .io_pmp_7_cfg_r (io_ptw_pmp_7_cfg_r),
    .io_pmp_7_addr  (io_ptw_pmp_7_addr),
    .io_pmp_7_mask  (io_ptw_pmp_7_mask),
    .io_addr        ({tlb_mpu_ppn[19:0], s1_tlb_req_vaddr[11:0]}),
    .io_size        (s1_tlb_req_size),
    .io_r           (_tlb_pmp_io_r),
    .io_w           (_tlb_pmp_io_w),
    .io_x           (_tlb_pmp_io_x)
  );
  PMAChecker tlb__105 (
    .io_paddr          ({tlb_mpu_ppn, s1_tlb_req_vaddr[11:0]}),
    .io_resp_cacheable (_tlb__io_resp_cacheable),
    .io_resp_r         (_tlb__io_resp_r),
    .io_resp_w         (_tlb__io_resp_w),
    .io_resp_pp        (_tlb__io_resp_pp),
    .io_resp_al        (_tlb__io_resp_al),
    .io_resp_aa        (_tlb__io_resp_aa),
    .io_resp_x         (_tlb__io_resp_x),
    .io_resp_eff       (_tlb__io_resp_eff)
  );
  OptimizationBarrier_TLBEntryData tlb_entries_barrier (
    .io_x_ppn      (tlb__47[41:22]),
    .io_x_u        (tlb__47[21]),
    .io_x_ae_ptw   (tlb__47[19]),
    .io_x_ae_final (tlb__47[18]),
    .io_x_pf       (tlb__47[16]),
    .io_x_gf       (tlb__47[15]),
    .io_x_sw       (tlb__47[14]),
    .io_x_sx       (tlb__47[13]),
    .io_x_sr       (tlb__47[12]),
    .io_x_pw       (tlb__47[8]),
    .io_x_px       (tlb__47[7]),
    .io_x_pr       (tlb__47[6]),
    .io_x_ppp      (tlb__47[5]),
    .io_x_pal      (tlb__47[4]),
    .io_x_paa      (tlb__47[3]),
    .io_x_eff      (tlb__47[2]),
    .io_x_c        (tlb__47[1]),
    .io_y_ppn      (_tlb_entries_barrier_io_y_ppn),
    .io_y_u        (_tlb_entries_barrier_io_y_u),
    .io_y_ae_ptw   (_tlb_entries_barrier_io_y_ae_ptw),
    .io_y_ae_final (_tlb_entries_barrier_io_y_ae_final),
    .io_y_pf       (_tlb_entries_barrier_io_y_pf),
    .io_y_gf       (_tlb_entries_barrier_io_y_gf),
    .io_y_sw       (_tlb_entries_barrier_io_y_sw),
    .io_y_sx       (_tlb_entries_barrier_io_y_sx),
    .io_y_sr       (_tlb_entries_barrier_io_y_sr),
    .io_y_pw       (_tlb_entries_barrier_io_y_pw),
    .io_y_px       (/* unused */),
    .io_y_pr       (_tlb_entries_barrier_io_y_pr),
    .io_y_ppp      (_tlb_entries_barrier_io_y_ppp),
    .io_y_pal      (_tlb_entries_barrier_io_y_pal),
    .io_y_paa      (_tlb_entries_barrier_io_y_paa),
    .io_y_eff      (_tlb_entries_barrier_io_y_eff),
    .io_y_c        (_tlb_entries_barrier_io_y_c)
  );
  OptimizationBarrier_TLBEntryData tlb_entries_barrier_1 (
    .io_x_ppn      (tlb__48[41:22]),
    .io_x_u        (tlb__48[21]),
    .io_x_ae_ptw   (tlb__48[19]),
    .io_x_ae_final (tlb__48[18]),
    .io_x_pf       (tlb__48[16]),
    .io_x_gf       (tlb__48[15]),
    .io_x_sw       (tlb__48[14]),
    .io_x_sx       (tlb__48[13]),
    .io_x_sr       (tlb__48[12]),
    .io_x_pw       (tlb__48[8]),
    .io_x_px       (tlb__48[7]),
    .io_x_pr       (tlb__48[6]),
    .io_x_ppp      (tlb__48[5]),
    .io_x_pal      (tlb__48[4]),
    .io_x_paa      (tlb__48[3]),
    .io_x_eff      (tlb__48[2]),
    .io_x_c        (tlb__48[1]),
    .io_y_ppn      (_tlb_entries_barrier_1_io_y_ppn),
    .io_y_u        (_tlb_entries_barrier_1_io_y_u),
    .io_y_ae_ptw   (_tlb_entries_barrier_1_io_y_ae_ptw),
    .io_y_ae_final (_tlb_entries_barrier_1_io_y_ae_final),
    .io_y_pf       (_tlb_entries_barrier_1_io_y_pf),
    .io_y_gf       (_tlb_entries_barrier_1_io_y_gf),
    .io_y_sw       (_tlb_entries_barrier_1_io_y_sw),
    .io_y_sx       (_tlb_entries_barrier_1_io_y_sx),
    .io_y_sr       (_tlb_entries_barrier_1_io_y_sr),
    .io_y_pw       (_tlb_entries_barrier_1_io_y_pw),
    .io_y_px       (/* unused */),
    .io_y_pr       (_tlb_entries_barrier_1_io_y_pr),
    .io_y_ppp      (_tlb_entries_barrier_1_io_y_ppp),
    .io_y_pal      (_tlb_entries_barrier_1_io_y_pal),
    .io_y_paa      (_tlb_entries_barrier_1_io_y_paa),
    .io_y_eff      (_tlb_entries_barrier_1_io_y_eff),
    .io_y_c        (_tlb_entries_barrier_1_io_y_c)
  );
  OptimizationBarrier_TLBEntryData tlb_entries_barrier_2 (
    .io_x_ppn      (tlb__49[41:22]),
    .io_x_u        (tlb__49[21]),
    .io_x_ae_ptw   (tlb__49[19]),
    .io_x_ae_final (tlb__49[18]),
    .io_x_pf       (tlb__49[16]),
    .io_x_gf       (tlb__49[15]),
    .io_x_sw       (tlb__49[14]),
    .io_x_sx       (tlb__49[13]),
    .io_x_sr       (tlb__49[12]),
    .io_x_pw       (tlb__49[8]),
    .io_x_px       (tlb__49[7]),
    .io_x_pr       (tlb__49[6]),
    .io_x_ppp      (tlb__49[5]),
    .io_x_pal      (tlb__49[4]),
    .io_x_paa      (tlb__49[3]),
    .io_x_eff      (tlb__49[2]),
    .io_x_c        (tlb__49[1]),
    .io_y_ppn      (_tlb_entries_barrier_2_io_y_ppn),
    .io_y_u        (_tlb_entries_barrier_2_io_y_u),
    .io_y_ae_ptw   (_tlb_entries_barrier_2_io_y_ae_ptw),
    .io_y_ae_final (_tlb_entries_barrier_2_io_y_ae_final),
    .io_y_pf       (_tlb_entries_barrier_2_io_y_pf),
    .io_y_gf       (_tlb_entries_barrier_2_io_y_gf),
    .io_y_sw       (_tlb_entries_barrier_2_io_y_sw),
    .io_y_sx       (_tlb_entries_barrier_2_io_y_sx),
    .io_y_sr       (_tlb_entries_barrier_2_io_y_sr),
    .io_y_pw       (_tlb_entries_barrier_2_io_y_pw),
    .io_y_px       (/* unused */),
    .io_y_pr       (_tlb_entries_barrier_2_io_y_pr),
    .io_y_ppp      (_tlb_entries_barrier_2_io_y_ppp),
    .io_y_pal      (_tlb_entries_barrier_2_io_y_pal),
    .io_y_paa      (_tlb_entries_barrier_2_io_y_paa),
    .io_y_eff      (_tlb_entries_barrier_2_io_y_eff),
    .io_y_c        (_tlb_entries_barrier_2_io_y_c)
  );
  OptimizationBarrier_TLBEntryData tlb_entries_barrier_3 (
    .io_x_ppn      (tlb__50[41:22]),
    .io_x_u        (tlb__50[21]),
    .io_x_ae_ptw   (tlb__50[19]),
    .io_x_ae_final (tlb__50[18]),
    .io_x_pf       (tlb__50[16]),
    .io_x_gf       (tlb__50[15]),
    .io_x_sw       (tlb__50[14]),
    .io_x_sx       (tlb__50[13]),
    .io_x_sr       (tlb__50[12]),
    .io_x_pw       (tlb__50[8]),
    .io_x_px       (tlb__50[7]),
    .io_x_pr       (tlb__50[6]),
    .io_x_ppp      (tlb__50[5]),
    .io_x_pal      (tlb__50[4]),
    .io_x_paa      (tlb__50[3]),
    .io_x_eff      (tlb__50[2]),
    .io_x_c        (tlb__50[1]),
    .io_y_ppn      (_tlb_entries_barrier_3_io_y_ppn),
    .io_y_u        (_tlb_entries_barrier_3_io_y_u),
    .io_y_ae_ptw   (_tlb_entries_barrier_3_io_y_ae_ptw),
    .io_y_ae_final (_tlb_entries_barrier_3_io_y_ae_final),
    .io_y_pf       (_tlb_entries_barrier_3_io_y_pf),
    .io_y_gf       (_tlb_entries_barrier_3_io_y_gf),
    .io_y_sw       (_tlb_entries_barrier_3_io_y_sw),
    .io_y_sx       (_tlb_entries_barrier_3_io_y_sx),
    .io_y_sr       (_tlb_entries_barrier_3_io_y_sr),
    .io_y_pw       (_tlb_entries_barrier_3_io_y_pw),
    .io_y_px       (/* unused */),
    .io_y_pr       (_tlb_entries_barrier_3_io_y_pr),
    .io_y_ppp      (_tlb_entries_barrier_3_io_y_ppp),
    .io_y_pal      (_tlb_entries_barrier_3_io_y_pal),
    .io_y_paa      (_tlb_entries_barrier_3_io_y_paa),
    .io_y_eff      (_tlb_entries_barrier_3_io_y_eff),
    .io_y_c        (_tlb_entries_barrier_3_io_y_c)
  );
  OptimizationBarrier_TLBEntryData tlb_entries_barrier_4 (
    .io_x_ppn      (tlb__51[41:22]),
    .io_x_u        (tlb__51[21]),
    .io_x_ae_ptw   (tlb__51[19]),
    .io_x_ae_final (tlb__51[18]),
    .io_x_pf       (tlb__51[16]),
    .io_x_gf       (tlb__51[15]),
    .io_x_sw       (tlb__51[14]),
    .io_x_sx       (tlb__51[13]),
    .io_x_sr       (tlb__51[12]),
    .io_x_pw       (tlb__51[8]),
    .io_x_px       (tlb__51[7]),
    .io_x_pr       (tlb__51[6]),
    .io_x_ppp      (tlb__51[5]),
    .io_x_pal      (tlb__51[4]),
    .io_x_paa      (tlb__51[3]),
    .io_x_eff      (tlb__51[2]),
    .io_x_c        (tlb__51[1]),
    .io_y_ppn      (_tlb_entries_barrier_4_io_y_ppn),
    .io_y_u        (_tlb_entries_barrier_4_io_y_u),
    .io_y_ae_ptw   (_tlb_entries_barrier_4_io_y_ae_ptw),
    .io_y_ae_final (_tlb_entries_barrier_4_io_y_ae_final),
    .io_y_pf       (_tlb_entries_barrier_4_io_y_pf),
    .io_y_gf       (_tlb_entries_barrier_4_io_y_gf),
    .io_y_sw       (_tlb_entries_barrier_4_io_y_sw),
    .io_y_sx       (_tlb_entries_barrier_4_io_y_sx),
    .io_y_sr       (_tlb_entries_barrier_4_io_y_sr),
    .io_y_pw       (_tlb_entries_barrier_4_io_y_pw),
    .io_y_px       (/* unused */),
    .io_y_pr       (_tlb_entries_barrier_4_io_y_pr),
    .io_y_ppp      (_tlb_entries_barrier_4_io_y_ppp),
    .io_y_pal      (_tlb_entries_barrier_4_io_y_pal),
    .io_y_paa      (_tlb_entries_barrier_4_io_y_paa),
    .io_y_eff      (_tlb_entries_barrier_4_io_y_eff),
    .io_y_c        (_tlb_entries_barrier_4_io_y_c)
  );
  OptimizationBarrier_TLBEntryData tlb_entries_barrier_5 (
    .io_x_ppn      (tlb__52[41:22]),
    .io_x_u        (tlb__52[21]),
    .io_x_ae_ptw   (tlb__52[19]),
    .io_x_ae_final (tlb__52[18]),
    .io_x_pf       (tlb__52[16]),
    .io_x_gf       (tlb__52[15]),
    .io_x_sw       (tlb__52[14]),
    .io_x_sx       (tlb__52[13]),
    .io_x_sr       (tlb__52[12]),
    .io_x_pw       (tlb__52[8]),
    .io_x_px       (tlb__52[7]),
    .io_x_pr       (tlb__52[6]),
    .io_x_ppp      (tlb__52[5]),
    .io_x_pal      (tlb__52[4]),
    .io_x_paa      (tlb__52[3]),
    .io_x_eff      (tlb__52[2]),
    .io_x_c        (tlb__52[1]),
    .io_y_ppn      (_tlb_entries_barrier_5_io_y_ppn),
    .io_y_u        (_tlb_entries_barrier_5_io_y_u),
    .io_y_ae_ptw   (_tlb_entries_barrier_5_io_y_ae_ptw),
    .io_y_ae_final (_tlb_entries_barrier_5_io_y_ae_final),
    .io_y_pf       (_tlb_entries_barrier_5_io_y_pf),
    .io_y_gf       (_tlb_entries_barrier_5_io_y_gf),
    .io_y_sw       (_tlb_entries_barrier_5_io_y_sw),
    .io_y_sx       (_tlb_entries_barrier_5_io_y_sx),
    .io_y_sr       (_tlb_entries_barrier_5_io_y_sr),
    .io_y_pw       (_tlb_entries_barrier_5_io_y_pw),
    .io_y_px       (/* unused */),
    .io_y_pr       (_tlb_entries_barrier_5_io_y_pr),
    .io_y_ppp      (_tlb_entries_barrier_5_io_y_ppp),
    .io_y_pal      (_tlb_entries_barrier_5_io_y_pal),
    .io_y_paa      (_tlb_entries_barrier_5_io_y_paa),
    .io_y_eff      (_tlb_entries_barrier_5_io_y_eff),
    .io_y_c        (_tlb_entries_barrier_5_io_y_c)
  );
  OptimizationBarrier_TLBEntryData tlb_entries_barrier_6 (
    .io_x_ppn      (tlb__53[41:22]),
    .io_x_u        (tlb__53[21]),
    .io_x_ae_ptw   (tlb__53[19]),
    .io_x_ae_final (tlb__53[18]),
    .io_x_pf       (tlb__53[16]),
    .io_x_gf       (tlb__53[15]),
    .io_x_sw       (tlb__53[14]),
    .io_x_sx       (tlb__53[13]),
    .io_x_sr       (tlb__53[12]),
    .io_x_pw       (tlb__53[8]),
    .io_x_px       (tlb__53[7]),
    .io_x_pr       (tlb__53[6]),
    .io_x_ppp      (tlb__53[5]),
    .io_x_pal      (tlb__53[4]),
    .io_x_paa      (tlb__53[3]),
    .io_x_eff      (tlb__53[2]),
    .io_x_c        (tlb__53[1]),
    .io_y_ppn      (_tlb_entries_barrier_6_io_y_ppn),
    .io_y_u        (_tlb_entries_barrier_6_io_y_u),
    .io_y_ae_ptw   (_tlb_entries_barrier_6_io_y_ae_ptw),
    .io_y_ae_final (_tlb_entries_barrier_6_io_y_ae_final),
    .io_y_pf       (_tlb_entries_barrier_6_io_y_pf),
    .io_y_gf       (_tlb_entries_barrier_6_io_y_gf),
    .io_y_sw       (_tlb_entries_barrier_6_io_y_sw),
    .io_y_sx       (_tlb_entries_barrier_6_io_y_sx),
    .io_y_sr       (_tlb_entries_barrier_6_io_y_sr),
    .io_y_pw       (_tlb_entries_barrier_6_io_y_pw),
    .io_y_px       (/* unused */),
    .io_y_pr       (_tlb_entries_barrier_6_io_y_pr),
    .io_y_ppp      (_tlb_entries_barrier_6_io_y_ppp),
    .io_y_pal      (_tlb_entries_barrier_6_io_y_pal),
    .io_y_paa      (_tlb_entries_barrier_6_io_y_paa),
    .io_y_eff      (_tlb_entries_barrier_6_io_y_eff),
    .io_y_c        (_tlb_entries_barrier_6_io_y_c)
  );
  OptimizationBarrier_TLBEntryData tlb_entries_barrier_7 (
    .io_x_ppn      (tlb__54[41:22]),
    .io_x_u        (tlb__54[21]),
    .io_x_ae_ptw   (tlb__54[19]),
    .io_x_ae_final (tlb__54[18]),
    .io_x_pf       (tlb__54[16]),
    .io_x_gf       (tlb__54[15]),
    .io_x_sw       (tlb__54[14]),
    .io_x_sx       (tlb__54[13]),
    .io_x_sr       (tlb__54[12]),
    .io_x_pw       (tlb__54[8]),
    .io_x_px       (tlb__54[7]),
    .io_x_pr       (tlb__54[6]),
    .io_x_ppp      (tlb__54[5]),
    .io_x_pal      (tlb__54[4]),
    .io_x_paa      (tlb__54[3]),
    .io_x_eff      (tlb__54[2]),
    .io_x_c        (tlb__54[1]),
    .io_y_ppn      (_tlb_entries_barrier_7_io_y_ppn),
    .io_y_u        (_tlb_entries_barrier_7_io_y_u),
    .io_y_ae_ptw   (_tlb_entries_barrier_7_io_y_ae_ptw),
    .io_y_ae_final (_tlb_entries_barrier_7_io_y_ae_final),
    .io_y_pf       (_tlb_entries_barrier_7_io_y_pf),
    .io_y_gf       (_tlb_entries_barrier_7_io_y_gf),
    .io_y_sw       (_tlb_entries_barrier_7_io_y_sw),
    .io_y_sx       (_tlb_entries_barrier_7_io_y_sx),
    .io_y_sr       (_tlb_entries_barrier_7_io_y_sr),
    .io_y_pw       (_tlb_entries_barrier_7_io_y_pw),
    .io_y_px       (/* unused */),
    .io_y_pr       (_tlb_entries_barrier_7_io_y_pr),
    .io_y_ppp      (_tlb_entries_barrier_7_io_y_ppp),
    .io_y_pal      (_tlb_entries_barrier_7_io_y_pal),
    .io_y_paa      (_tlb_entries_barrier_7_io_y_paa),
    .io_y_eff      (_tlb_entries_barrier_7_io_y_eff),
    .io_y_c        (_tlb_entries_barrier_7_io_y_c)
  );
  OptimizationBarrier_TLBEntryData tlb_entries_barrier_8 (
    .io_x_ppn      (tlb_superpage_entries_0_data_0[41:22]),
    .io_x_u        (tlb_superpage_entries_0_data_0[21]),
    .io_x_ae_ptw   (tlb_superpage_entries_0_data_0[19]),
    .io_x_ae_final (tlb_superpage_entries_0_data_0[18]),
    .io_x_pf       (tlb_superpage_entries_0_data_0[16]),
    .io_x_gf       (tlb_superpage_entries_0_data_0[15]),
    .io_x_sw       (tlb_superpage_entries_0_data_0[14]),
    .io_x_sx       (tlb_superpage_entries_0_data_0[13]),
    .io_x_sr       (tlb_superpage_entries_0_data_0[12]),
    .io_x_pw       (tlb_superpage_entries_0_data_0[8]),
    .io_x_px       (tlb_superpage_entries_0_data_0[7]),
    .io_x_pr       (tlb_superpage_entries_0_data_0[6]),
    .io_x_ppp      (tlb_superpage_entries_0_data_0[5]),
    .io_x_pal      (tlb_superpage_entries_0_data_0[4]),
    .io_x_paa      (tlb_superpage_entries_0_data_0[3]),
    .io_x_eff      (tlb_superpage_entries_0_data_0[2]),
    .io_x_c        (tlb_superpage_entries_0_data_0[1]),
    .io_y_ppn      (_tlb_entries_barrier_8_io_y_ppn),
    .io_y_u        (_tlb_entries_barrier_8_io_y_u),
    .io_y_ae_ptw   (_tlb_entries_barrier_8_io_y_ae_ptw),
    .io_y_ae_final (_tlb_entries_barrier_8_io_y_ae_final),
    .io_y_pf       (_tlb_entries_barrier_8_io_y_pf),
    .io_y_gf       (_tlb_entries_barrier_8_io_y_gf),
    .io_y_sw       (_tlb_entries_barrier_8_io_y_sw),
    .io_y_sx       (_tlb_entries_barrier_8_io_y_sx),
    .io_y_sr       (_tlb_entries_barrier_8_io_y_sr),
    .io_y_pw       (_tlb_entries_barrier_8_io_y_pw),
    .io_y_px       (/* unused */),
    .io_y_pr       (_tlb_entries_barrier_8_io_y_pr),
    .io_y_ppp      (_tlb_entries_barrier_8_io_y_ppp),
    .io_y_pal      (_tlb_entries_barrier_8_io_y_pal),
    .io_y_paa      (_tlb_entries_barrier_8_io_y_paa),
    .io_y_eff      (_tlb_entries_barrier_8_io_y_eff),
    .io_y_c        (_tlb_entries_barrier_8_io_y_c)
  );
  OptimizationBarrier_TLBEntryData tlb_entries_barrier_9 (
    .io_x_ppn      (tlb_superpage_entries_1_data_0[41:22]),
    .io_x_u        (tlb_superpage_entries_1_data_0[21]),
    .io_x_ae_ptw   (tlb_superpage_entries_1_data_0[19]),
    .io_x_ae_final (tlb_superpage_entries_1_data_0[18]),
    .io_x_pf       (tlb_superpage_entries_1_data_0[16]),
    .io_x_gf       (tlb_superpage_entries_1_data_0[15]),
    .io_x_sw       (tlb_superpage_entries_1_data_0[14]),
    .io_x_sx       (tlb_superpage_entries_1_data_0[13]),
    .io_x_sr       (tlb_superpage_entries_1_data_0[12]),
    .io_x_pw       (tlb_superpage_entries_1_data_0[8]),
    .io_x_px       (tlb_superpage_entries_1_data_0[7]),
    .io_x_pr       (tlb_superpage_entries_1_data_0[6]),
    .io_x_ppp      (tlb_superpage_entries_1_data_0[5]),
    .io_x_pal      (tlb_superpage_entries_1_data_0[4]),
    .io_x_paa      (tlb_superpage_entries_1_data_0[3]),
    .io_x_eff      (tlb_superpage_entries_1_data_0[2]),
    .io_x_c        (tlb_superpage_entries_1_data_0[1]),
    .io_y_ppn      (_tlb_entries_barrier_9_io_y_ppn),
    .io_y_u        (_tlb_entries_barrier_9_io_y_u),
    .io_y_ae_ptw   (_tlb_entries_barrier_9_io_y_ae_ptw),
    .io_y_ae_final (_tlb_entries_barrier_9_io_y_ae_final),
    .io_y_pf       (_tlb_entries_barrier_9_io_y_pf),
    .io_y_gf       (_tlb_entries_barrier_9_io_y_gf),
    .io_y_sw       (_tlb_entries_barrier_9_io_y_sw),
    .io_y_sx       (_tlb_entries_barrier_9_io_y_sx),
    .io_y_sr       (_tlb_entries_barrier_9_io_y_sr),
    .io_y_pw       (_tlb_entries_barrier_9_io_y_pw),
    .io_y_px       (/* unused */),
    .io_y_pr       (_tlb_entries_barrier_9_io_y_pr),
    .io_y_ppp      (_tlb_entries_barrier_9_io_y_ppp),
    .io_y_pal      (_tlb_entries_barrier_9_io_y_pal),
    .io_y_paa      (_tlb_entries_barrier_9_io_y_paa),
    .io_y_eff      (_tlb_entries_barrier_9_io_y_eff),
    .io_y_c        (_tlb_entries_barrier_9_io_y_c)
  );
  OptimizationBarrier_TLBEntryData tlb_entries_barrier_10 (
    .io_x_ppn      (tlb_superpage_entries_2_data_0[41:22]),
    .io_x_u        (tlb_superpage_entries_2_data_0[21]),
    .io_x_ae_ptw   (tlb_superpage_entries_2_data_0[19]),
    .io_x_ae_final (tlb_superpage_entries_2_data_0[18]),
    .io_x_pf       (tlb_superpage_entries_2_data_0[16]),
    .io_x_gf       (tlb_superpage_entries_2_data_0[15]),
    .io_x_sw       (tlb_superpage_entries_2_data_0[14]),
    .io_x_sx       (tlb_superpage_entries_2_data_0[13]),
    .io_x_sr       (tlb_superpage_entries_2_data_0[12]),
    .io_x_pw       (tlb_superpage_entries_2_data_0[8]),
    .io_x_px       (tlb_superpage_entries_2_data_0[7]),
    .io_x_pr       (tlb_superpage_entries_2_data_0[6]),
    .io_x_ppp      (tlb_superpage_entries_2_data_0[5]),
    .io_x_pal      (tlb_superpage_entries_2_data_0[4]),
    .io_x_paa      (tlb_superpage_entries_2_data_0[3]),
    .io_x_eff      (tlb_superpage_entries_2_data_0[2]),
    .io_x_c        (tlb_superpage_entries_2_data_0[1]),
    .io_y_ppn      (_tlb_entries_barrier_10_io_y_ppn),
    .io_y_u        (_tlb_entries_barrier_10_io_y_u),
    .io_y_ae_ptw   (_tlb_entries_barrier_10_io_y_ae_ptw),
    .io_y_ae_final (_tlb_entries_barrier_10_io_y_ae_final),
    .io_y_pf       (_tlb_entries_barrier_10_io_y_pf),
    .io_y_gf       (_tlb_entries_barrier_10_io_y_gf),
    .io_y_sw       (_tlb_entries_barrier_10_io_y_sw),
    .io_y_sx       (_tlb_entries_barrier_10_io_y_sx),
    .io_y_sr       (_tlb_entries_barrier_10_io_y_sr),
    .io_y_pw       (_tlb_entries_barrier_10_io_y_pw),
    .io_y_px       (/* unused */),
    .io_y_pr       (_tlb_entries_barrier_10_io_y_pr),
    .io_y_ppp      (_tlb_entries_barrier_10_io_y_ppp),
    .io_y_pal      (_tlb_entries_barrier_10_io_y_pal),
    .io_y_paa      (_tlb_entries_barrier_10_io_y_paa),
    .io_y_eff      (_tlb_entries_barrier_10_io_y_eff),
    .io_y_c        (_tlb_entries_barrier_10_io_y_c)
  );
  OptimizationBarrier_TLBEntryData tlb_entries_barrier_11 (
    .io_x_ppn      (tlb_superpage_entries_3_data_0[41:22]),
    .io_x_u        (tlb_superpage_entries_3_data_0[21]),
    .io_x_ae_ptw   (tlb_superpage_entries_3_data_0[19]),
    .io_x_ae_final (tlb_superpage_entries_3_data_0[18]),
    .io_x_pf       (tlb_superpage_entries_3_data_0[16]),
    .io_x_gf       (tlb_superpage_entries_3_data_0[15]),
    .io_x_sw       (tlb_superpage_entries_3_data_0[14]),
    .io_x_sx       (tlb_superpage_entries_3_data_0[13]),
    .io_x_sr       (tlb_superpage_entries_3_data_0[12]),
    .io_x_pw       (tlb_superpage_entries_3_data_0[8]),
    .io_x_px       (tlb_superpage_entries_3_data_0[7]),
    .io_x_pr       (tlb_superpage_entries_3_data_0[6]),
    .io_x_ppp      (tlb_superpage_entries_3_data_0[5]),
    .io_x_pal      (tlb_superpage_entries_3_data_0[4]),
    .io_x_paa      (tlb_superpage_entries_3_data_0[3]),
    .io_x_eff      (tlb_superpage_entries_3_data_0[2]),
    .io_x_c        (tlb_superpage_entries_3_data_0[1]),
    .io_y_ppn      (_tlb_entries_barrier_11_io_y_ppn),
    .io_y_u        (_tlb_entries_barrier_11_io_y_u),
    .io_y_ae_ptw   (_tlb_entries_barrier_11_io_y_ae_ptw),
    .io_y_ae_final (_tlb_entries_barrier_11_io_y_ae_final),
    .io_y_pf       (_tlb_entries_barrier_11_io_y_pf),
    .io_y_gf       (_tlb_entries_barrier_11_io_y_gf),
    .io_y_sw       (_tlb_entries_barrier_11_io_y_sw),
    .io_y_sx       (_tlb_entries_barrier_11_io_y_sx),
    .io_y_sr       (_tlb_entries_barrier_11_io_y_sr),
    .io_y_pw       (_tlb_entries_barrier_11_io_y_pw),
    .io_y_px       (/* unused */),
    .io_y_pr       (_tlb_entries_barrier_11_io_y_pr),
    .io_y_ppp      (_tlb_entries_barrier_11_io_y_ppp),
    .io_y_pal      (_tlb_entries_barrier_11_io_y_pal),
    .io_y_paa      (_tlb_entries_barrier_11_io_y_paa),
    .io_y_eff      (_tlb_entries_barrier_11_io_y_eff),
    .io_y_c        (_tlb_entries_barrier_11_io_y_c)
  );
  OptimizationBarrier_TLBEntryData tlb_entries_barrier_12 (
    .io_x_ppn      (tlb_special_entry_data_0[41:22]),
    .io_x_u        (tlb_special_entry_data_0[21]),
    .io_x_ae_ptw   (tlb_special_entry_data_0[19]),
    .io_x_ae_final (tlb_special_entry_data_0[18]),
    .io_x_pf       (tlb_special_entry_data_0[16]),
    .io_x_gf       (tlb_special_entry_data_0[15]),
    .io_x_sw       (tlb_special_entry_data_0[14]),
    .io_x_sx       (tlb_special_entry_data_0[13]),
    .io_x_sr       (tlb_special_entry_data_0[12]),
    .io_x_pw       (tlb_special_entry_data_0[8]),
    .io_x_px       (tlb_special_entry_data_0[7]),
    .io_x_pr       (tlb_special_entry_data_0[6]),
    .io_x_ppp      (tlb_special_entry_data_0[5]),
    .io_x_pal      (tlb_special_entry_data_0[4]),
    .io_x_paa      (tlb_special_entry_data_0[3]),
    .io_x_eff      (tlb_special_entry_data_0[2]),
    .io_x_c        (tlb_special_entry_data_0[1]),
    .io_y_ppn      (_tlb_entries_barrier_12_io_y_ppn),
    .io_y_u        (_tlb_entries_barrier_12_io_y_u),
    .io_y_ae_ptw   (_tlb_entries_barrier_12_io_y_ae_ptw),
    .io_y_ae_final (_tlb_entries_barrier_12_io_y_ae_final),
    .io_y_pf       (_tlb_entries_barrier_12_io_y_pf),
    .io_y_gf       (_tlb_entries_barrier_12_io_y_gf),
    .io_y_sw       (_tlb_entries_barrier_12_io_y_sw),
    .io_y_sx       (_tlb_entries_barrier_12_io_y_sx),
    .io_y_sr       (_tlb_entries_barrier_12_io_y_sr),
    .io_y_pw       (/* unused */),
    .io_y_px       (/* unused */),
    .io_y_pr       (/* unused */),
    .io_y_ppp      (/* unused */),
    .io_y_pal      (/* unused */),
    .io_y_paa      (/* unused */),
    .io_y_eff      (/* unused */),
    .io_y_c        (/* unused */)
  );
  PMAChecker pma_checker_ (
    .io_paddr          (s1_vaddr),
    .io_resp_cacheable (/* unused */),
    .io_resp_r         (/* unused */),
    .io_resp_w         (/* unused */),
    .io_resp_pp        (/* unused */),
    .io_resp_al        (/* unused */),
    .io_resp_aa        (/* unused */),
    .io_resp_x         (/* unused */),
    .io_resp_eff       (/* unused */)
  );
  OptimizationBarrier_TLBEntryData pma_checker_entries_barrier (
    .io_x_ppn      (20'h0),
    .io_x_u        (1'h0),
    .io_x_ae_ptw   (1'h0),
    .io_x_ae_final (1'h0),
    .io_x_pf       (1'h0),
    .io_x_gf       (1'h0),
    .io_x_sw       (1'h0),
    .io_x_sx       (1'h0),
    .io_x_sr       (1'h0),
    .io_x_pw       (1'h0),
    .io_x_px       (1'h0),
    .io_x_pr       (1'h0),
    .io_x_ppp      (1'h0),
    .io_x_pal      (1'h0),
    .io_x_paa      (1'h0),
    .io_x_eff      (1'h0),
    .io_x_c        (1'h0),
    .io_y_ppn      (/* unused */),
    .io_y_u        (/* unused */),
    .io_y_ae_ptw   (/* unused */),
    .io_y_ae_final (/* unused */),
    .io_y_pf       (/* unused */),
    .io_y_gf       (/* unused */),
    .io_y_sw       (/* unused */),
    .io_y_sx       (/* unused */),
    .io_y_sr       (/* unused */),
    .io_y_pw       (/* unused */),
    .io_y_px       (/* unused */),
    .io_y_pr       (/* unused */),
    .io_y_ppp      (/* unused */),
    .io_y_pal      (/* unused */),
    .io_y_paa      (/* unused */),
    .io_y_eff      (/* unused */),
    .io_y_c        (/* unused */)
  );
  OptimizationBarrier_TLBEntryData pma_checker_entries_barrier_1 (
    .io_x_ppn      (20'h0),
    .io_x_u        (1'h0),
    .io_x_ae_ptw   (1'h0),
    .io_x_ae_final (1'h0),
    .io_x_pf       (1'h0),
    .io_x_gf       (1'h0),
    .io_x_sw       (1'h0),
    .io_x_sx       (1'h0),
    .io_x_sr       (1'h0),
    .io_x_pw       (1'h0),
    .io_x_px       (1'h0),
    .io_x_pr       (1'h0),
    .io_x_ppp      (1'h0),
    .io_x_pal      (1'h0),
    .io_x_paa      (1'h0),
    .io_x_eff      (1'h0),
    .io_x_c        (1'h0),
    .io_y_ppn      (/* unused */),
    .io_y_u        (/* unused */),
    .io_y_ae_ptw   (/* unused */),
    .io_y_ae_final (/* unused */),
    .io_y_pf       (/* unused */),
    .io_y_gf       (/* unused */),
    .io_y_sw       (/* unused */),
    .io_y_sx       (/* unused */),
    .io_y_sr       (/* unused */),
    .io_y_pw       (/* unused */),
    .io_y_px       (/* unused */),
    .io_y_pr       (/* unused */),
    .io_y_ppp      (/* unused */),
    .io_y_pal      (/* unused */),
    .io_y_paa      (/* unused */),
    .io_y_eff      (/* unused */),
    .io_y_c        (/* unused */)
  );
  OptimizationBarrier_TLBEntryData pma_checker_entries_barrier_2 (
    .io_x_ppn      (20'h0),
    .io_x_u        (1'h0),
    .io_x_ae_ptw   (1'h0),
    .io_x_ae_final (1'h0),
    .io_x_pf       (1'h0),
    .io_x_gf       (1'h0),
    .io_x_sw       (1'h0),
    .io_x_sx       (1'h0),
    .io_x_sr       (1'h0),
    .io_x_pw       (1'h0),
    .io_x_px       (1'h0),
    .io_x_pr       (1'h0),
    .io_x_ppp      (1'h0),
    .io_x_pal      (1'h0),
    .io_x_paa      (1'h0),
    .io_x_eff      (1'h0),
    .io_x_c        (1'h0),
    .io_y_ppn      (/* unused */),
    .io_y_u        (/* unused */),
    .io_y_ae_ptw   (/* unused */),
    .io_y_ae_final (/* unused */),
    .io_y_pf       (/* unused */),
    .io_y_gf       (/* unused */),
    .io_y_sw       (/* unused */),
    .io_y_sx       (/* unused */),
    .io_y_sr       (/* unused */),
    .io_y_pw       (/* unused */),
    .io_y_px       (/* unused */),
    .io_y_pr       (/* unused */),
    .io_y_ppp      (/* unused */),
    .io_y_pal      (/* unused */),
    .io_y_paa      (/* unused */),
    .io_y_eff      (/* unused */),
    .io_y_c        (/* unused */)
  );
  OptimizationBarrier_TLBEntryData pma_checker_entries_barrier_3 (
    .io_x_ppn      (20'h0),
    .io_x_u        (1'h0),
    .io_x_ae_ptw   (1'h0),
    .io_x_ae_final (1'h0),
    .io_x_pf       (1'h0),
    .io_x_gf       (1'h0),
    .io_x_sw       (1'h0),
    .io_x_sx       (1'h0),
    .io_x_sr       (1'h0),
    .io_x_pw       (1'h0),
    .io_x_px       (1'h0),
    .io_x_pr       (1'h0),
    .io_x_ppp      (1'h0),
    .io_x_pal      (1'h0),
    .io_x_paa      (1'h0),
    .io_x_eff      (1'h0),
    .io_x_c        (1'h0),
    .io_y_ppn      (/* unused */),
    .io_y_u        (/* unused */),
    .io_y_ae_ptw   (/* unused */),
    .io_y_ae_final (/* unused */),
    .io_y_pf       (/* unused */),
    .io_y_gf       (/* unused */),
    .io_y_sw       (/* unused */),
    .io_y_sx       (/* unused */),
    .io_y_sr       (/* unused */),
    .io_y_pw       (/* unused */),
    .io_y_px       (/* unused */),
    .io_y_pr       (/* unused */),
    .io_y_ppp      (/* unused */),
    .io_y_pal      (/* unused */),
    .io_y_paa      (/* unused */),
    .io_y_eff      (/* unused */),
    .io_y_c        (/* unused */)
  );
  OptimizationBarrier_TLBEntryData pma_checker_entries_barrier_4 (
    .io_x_ppn      (20'h0),
    .io_x_u        (1'h0),
    .io_x_ae_ptw   (1'h0),
    .io_x_ae_final (1'h0),
    .io_x_pf       (1'h0),
    .io_x_gf       (1'h0),
    .io_x_sw       (1'h0),
    .io_x_sx       (1'h0),
    .io_x_sr       (1'h0),
    .io_x_pw       (1'h0),
    .io_x_px       (1'h0),
    .io_x_pr       (1'h0),
    .io_x_ppp      (1'h0),
    .io_x_pal      (1'h0),
    .io_x_paa      (1'h0),
    .io_x_eff      (1'h0),
    .io_x_c        (1'h0),
    .io_y_ppn      (/* unused */),
    .io_y_u        (/* unused */),
    .io_y_ae_ptw   (/* unused */),
    .io_y_ae_final (/* unused */),
    .io_y_pf       (/* unused */),
    .io_y_gf       (/* unused */),
    .io_y_sw       (/* unused */),
    .io_y_sx       (/* unused */),
    .io_y_sr       (/* unused */),
    .io_y_pw       (/* unused */),
    .io_y_px       (/* unused */),
    .io_y_pr       (/* unused */),
    .io_y_ppp      (/* unused */),
    .io_y_pal      (/* unused */),
    .io_y_paa      (/* unused */),
    .io_y_eff      (/* unused */),
    .io_y_c        (/* unused */)
  );
  OptimizationBarrier_TLBEntryData pma_checker_entries_barrier_5 (
    .io_x_ppn      (20'h0),
    .io_x_u        (1'h0),
    .io_x_ae_ptw   (1'h0),
    .io_x_ae_final (1'h0),
    .io_x_pf       (1'h0),
    .io_x_gf       (1'h0),
    .io_x_sw       (1'h0),
    .io_x_sx       (1'h0),
    .io_x_sr       (1'h0),
    .io_x_pw       (1'h0),
    .io_x_px       (1'h0),
    .io_x_pr       (1'h0),
    .io_x_ppp      (1'h0),
    .io_x_pal      (1'h0),
    .io_x_paa      (1'h0),
    .io_x_eff      (1'h0),
    .io_x_c        (1'h0),
    .io_y_ppn      (/* unused */),
    .io_y_u        (/* unused */),
    .io_y_ae_ptw   (/* unused */),
    .io_y_ae_final (/* unused */),
    .io_y_pf       (/* unused */),
    .io_y_gf       (/* unused */),
    .io_y_sw       (/* unused */),
    .io_y_sx       (/* unused */),
    .io_y_sr       (/* unused */),
    .io_y_pw       (/* unused */),
    .io_y_px       (/* unused */),
    .io_y_pr       (/* unused */),
    .io_y_ppp      (/* unused */),
    .io_y_pal      (/* unused */),
    .io_y_paa      (/* unused */),
    .io_y_eff      (/* unused */),
    .io_y_c        (/* unused */)
  );
  OptimizationBarrier_TLBEntryData pma_checker_entries_barrier_6 (
    .io_x_ppn      (20'h0),
    .io_x_u        (1'h0),
    .io_x_ae_ptw   (1'h0),
    .io_x_ae_final (1'h0),
    .io_x_pf       (1'h0),
    .io_x_gf       (1'h0),
    .io_x_sw       (1'h0),
    .io_x_sx       (1'h0),
    .io_x_sr       (1'h0),
    .io_x_pw       (1'h0),
    .io_x_px       (1'h0),
    .io_x_pr       (1'h0),
    .io_x_ppp      (1'h0),
    .io_x_pal      (1'h0),
    .io_x_paa      (1'h0),
    .io_x_eff      (1'h0),
    .io_x_c        (1'h0),
    .io_y_ppn      (/* unused */),
    .io_y_u        (/* unused */),
    .io_y_ae_ptw   (/* unused */),
    .io_y_ae_final (/* unused */),
    .io_y_pf       (/* unused */),
    .io_y_gf       (/* unused */),
    .io_y_sw       (/* unused */),
    .io_y_sx       (/* unused */),
    .io_y_sr       (/* unused */),
    .io_y_pw       (/* unused */),
    .io_y_px       (/* unused */),
    .io_y_pr       (/* unused */),
    .io_y_ppp      (/* unused */),
    .io_y_pal      (/* unused */),
    .io_y_paa      (/* unused */),
    .io_y_eff      (/* unused */),
    .io_y_c        (/* unused */)
  );
  OptimizationBarrier_TLBEntryData pma_checker_entries_barrier_7 (
    .io_x_ppn      (20'h0),
    .io_x_u        (1'h0),
    .io_x_ae_ptw   (1'h0),
    .io_x_ae_final (1'h0),
    .io_x_pf       (1'h0),
    .io_x_gf       (1'h0),
    .io_x_sw       (1'h0),
    .io_x_sx       (1'h0),
    .io_x_sr       (1'h0),
    .io_x_pw       (1'h0),
    .io_x_px       (1'h0),
    .io_x_pr       (1'h0),
    .io_x_ppp      (1'h0),
    .io_x_pal      (1'h0),
    .io_x_paa      (1'h0),
    .io_x_eff      (1'h0),
    .io_x_c        (1'h0),
    .io_y_ppn      (/* unused */),
    .io_y_u        (/* unused */),
    .io_y_ae_ptw   (/* unused */),
    .io_y_ae_final (/* unused */),
    .io_y_pf       (/* unused */),
    .io_y_gf       (/* unused */),
    .io_y_sw       (/* unused */),
    .io_y_sx       (/* unused */),
    .io_y_sr       (/* unused */),
    .io_y_pw       (/* unused */),
    .io_y_px       (/* unused */),
    .io_y_pr       (/* unused */),
    .io_y_ppp      (/* unused */),
    .io_y_pal      (/* unused */),
    .io_y_paa      (/* unused */),
    .io_y_eff      (/* unused */),
    .io_y_c        (/* unused */)
  );
  OptimizationBarrier_TLBEntryData pma_checker_entries_barrier_8 (
    .io_x_ppn      (20'h0),
    .io_x_u        (1'h0),
    .io_x_ae_ptw   (1'h0),
    .io_x_ae_final (1'h0),
    .io_x_pf       (1'h0),
    .io_x_gf       (1'h0),
    .io_x_sw       (1'h0),
    .io_x_sx       (1'h0),
    .io_x_sr       (1'h0),
    .io_x_pw       (1'h0),
    .io_x_px       (1'h0),
    .io_x_pr       (1'h0),
    .io_x_ppp      (1'h0),
    .io_x_pal      (1'h0),
    .io_x_paa      (1'h0),
    .io_x_eff      (1'h0),
    .io_x_c        (1'h0),
    .io_y_ppn      (/* unused */),
    .io_y_u        (/* unused */),
    .io_y_ae_ptw   (/* unused */),
    .io_y_ae_final (/* unused */),
    .io_y_pf       (/* unused */),
    .io_y_gf       (/* unused */),
    .io_y_sw       (/* unused */),
    .io_y_sx       (/* unused */),
    .io_y_sr       (/* unused */),
    .io_y_pw       (/* unused */),
    .io_y_px       (/* unused */),
    .io_y_pr       (/* unused */),
    .io_y_ppp      (/* unused */),
    .io_y_pal      (/* unused */),
    .io_y_paa      (/* unused */),
    .io_y_eff      (/* unused */),
    .io_y_c        (/* unused */)
  );
  OptimizationBarrier_TLBEntryData pma_checker_entries_barrier_9 (
    .io_x_ppn      (20'h0),
    .io_x_u        (1'h0),
    .io_x_ae_ptw   (1'h0),
    .io_x_ae_final (1'h0),
    .io_x_pf       (1'h0),
    .io_x_gf       (1'h0),
    .io_x_sw       (1'h0),
    .io_x_sx       (1'h0),
    .io_x_sr       (1'h0),
    .io_x_pw       (1'h0),
    .io_x_px       (1'h0),
    .io_x_pr       (1'h0),
    .io_x_ppp      (1'h0),
    .io_x_pal      (1'h0),
    .io_x_paa      (1'h0),
    .io_x_eff      (1'h0),
    .io_x_c        (1'h0),
    .io_y_ppn      (/* unused */),
    .io_y_u        (/* unused */),
    .io_y_ae_ptw   (/* unused */),
    .io_y_ae_final (/* unused */),
    .io_y_pf       (/* unused */),
    .io_y_gf       (/* unused */),
    .io_y_sw       (/* unused */),
    .io_y_sx       (/* unused */),
    .io_y_sr       (/* unused */),
    .io_y_pw       (/* unused */),
    .io_y_px       (/* unused */),
    .io_y_pr       (/* unused */),
    .io_y_ppp      (/* unused */),
    .io_y_pal      (/* unused */),
    .io_y_paa      (/* unused */),
    .io_y_eff      (/* unused */),
    .io_y_c        (/* unused */)
  );
  OptimizationBarrier_TLBEntryData pma_checker_entries_barrier_10 (
    .io_x_ppn      (20'h0),
    .io_x_u        (1'h0),
    .io_x_ae_ptw   (1'h0),
    .io_x_ae_final (1'h0),
    .io_x_pf       (1'h0),
    .io_x_gf       (1'h0),
    .io_x_sw       (1'h0),
    .io_x_sx       (1'h0),
    .io_x_sr       (1'h0),
    .io_x_pw       (1'h0),
    .io_x_px       (1'h0),
    .io_x_pr       (1'h0),
    .io_x_ppp      (1'h0),
    .io_x_pal      (1'h0),
    .io_x_paa      (1'h0),
    .io_x_eff      (1'h0),
    .io_x_c        (1'h0),
    .io_y_ppn      (/* unused */),
    .io_y_u        (/* unused */),
    .io_y_ae_ptw   (/* unused */),
    .io_y_ae_final (/* unused */),
    .io_y_pf       (/* unused */),
    .io_y_gf       (/* unused */),
    .io_y_sw       (/* unused */),
    .io_y_sx       (/* unused */),
    .io_y_sr       (/* unused */),
    .io_y_pw       (/* unused */),
    .io_y_px       (/* unused */),
    .io_y_pr       (/* unused */),
    .io_y_ppp      (/* unused */),
    .io_y_pal      (/* unused */),
    .io_y_paa      (/* unused */),
    .io_y_eff      (/* unused */),
    .io_y_c        (/* unused */)
  );
  OptimizationBarrier_TLBEntryData pma_checker_entries_barrier_11 (
    .io_x_ppn      (20'h0),
    .io_x_u        (1'h0),
    .io_x_ae_ptw   (1'h0),
    .io_x_ae_final (1'h0),
    .io_x_pf       (1'h0),
    .io_x_gf       (1'h0),
    .io_x_sw       (1'h0),
    .io_x_sx       (1'h0),
    .io_x_sr       (1'h0),
    .io_x_pw       (1'h0),
    .io_x_px       (1'h0),
    .io_x_pr       (1'h0),
    .io_x_ppp      (1'h0),
    .io_x_pal      (1'h0),
    .io_x_paa      (1'h0),
    .io_x_eff      (1'h0),
    .io_x_c        (1'h0),
    .io_y_ppn      (/* unused */),
    .io_y_u        (/* unused */),
    .io_y_ae_ptw   (/* unused */),
    .io_y_ae_final (/* unused */),
    .io_y_pf       (/* unused */),
    .io_y_gf       (/* unused */),
    .io_y_sw       (/* unused */),
    .io_y_sx       (/* unused */),
    .io_y_sr       (/* unused */),
    .io_y_pw       (/* unused */),
    .io_y_px       (/* unused */),
    .io_y_pr       (/* unused */),
    .io_y_ppp      (/* unused */),
    .io_y_pal      (/* unused */),
    .io_y_paa      (/* unused */),
    .io_y_eff      (/* unused */),
    .io_y_c        (/* unused */)
  );
  MaxPeriodFibonacciLFSR lfsr_prng (
    .clock        (clock),
    .reset        (reset),
    .io_increment (_GEN_94 & d_last),
    .io_out_0     (_lfsr_prng_io_out_0),
    .io_out_1     (_lfsr_prng_io_out_1),
    .io_out_2     (/* unused */),
    .io_out_3     (/* unused */),
    .io_out_4     (/* unused */),
    .io_out_5     (/* unused */),
    .io_out_6     (/* unused */),
    .io_out_7     (/* unused */),
    .io_out_8     (/* unused */),
    .io_out_9     (/* unused */),
    .io_out_10    (/* unused */),
    .io_out_11    (/* unused */),
    .io_out_12    (/* unused */),
    .io_out_13    (/* unused */),
    .io_out_14    (/* unused */),
    .io_out_15    (/* unused */)
  );
  rockettile_dcache_tag_array_combMem rockettile_dcache_tag_array_ext (
    .RW0_addr
      (resetting
         ? metaArb_io_in_5_bits_idx
         : metaArb_io_in_1_valid
             ? metaArb_io_in_1_bits_idx
             : _GEN_21
                 ? metaArb_io_in_3_bits_idx
                 : metaArb_io_in_4_valid
                     ? metaArb_io_in_4_bits_idx
                     : metaArb_io_in_6_valid
                         ? metaArb_io_in_6_bits_idx
                         : metaArb_io_in_7_bits_idx),
    .RW0_en
      (rockettile_dcache_tag_array_s1_meta_en | rockettile_dcache_tag_array_MPORT_en),
    .RW0_clk   (clock),
    .RW0_wmode (metaArb_io_out_bits_write),
    .RW0_wdata
      ({4{resetting
            ? 22'h0
            : metaArb_io_in_1_valid
                ? metaArb_io_in_1_bits_data
                : metaArb_io_in_2_valid
                    ? metaArb_io_in_2_bits_data
                    : metaArb_io_in_3_valid
                        ? metaArb_io_in_3_bits_data
                        : metaArb_io_in_7_bits_data}}),
    .RW0_wmask
      (resetting
         ? 4'hF
         : metaArb_io_in_1_valid
             ? metaArb_io_in_1_bits_way_en
             : metaArb_io_in_2_valid
                 ? metaArb_io_in_2_bits_way_en
                 : metaArb_io_in_3_valid ? refill_way : releaseWay),
    .RW0_rdata (_rockettile_dcache_tag_array_ext_RW0_rdata)
  );
  DCacheDataArray data (
    .clock               (clock),
    .io_req_valid        (dataArb_io_out_valid),
    .io_req_bits_addr
      (dataArb_io_in_0_valid
         ? dataArb_io_in_0_bits_addr
         : dataArb_io_in_1_valid
             ? dataArb_io_in_1_bits_addr
             : dataArb_io_in_2_valid
                 ? dataArb_io_in_2_bits_addr
                 : dataArb_io_in_3_bits_addr),
    .io_req_bits_write
      (dataArb_io_in_0_valid
         ? dataArb_io_in_0_bits_write
         : dataArb_io_in_1_valid & dataArb_io_in_1_bits_write),
    .io_req_bits_wdata
      (dataArb_io_in_0_valid ? dataArb_io_in_0_bits_wdata : auto_out_d_bits_data),
    .io_req_bits_eccMask (dataArb_io_in_0_valid ? dataArb_io_in_0_bits_eccMask : 8'hFF),
    .io_req_bits_way_en
      (dataArb_io_in_0_valid
         ? dataArb_io_in_0_bits_way_en
         : dataArb_io_in_1_valid ? refill_way : 4'hF),
    .io_resp_0           (_data_io_resp_0),
    .io_resp_1           (_data_io_resp_1),
    .io_resp_2           (_data_io_resp_2),
    .io_resp_3           (_data_io_resp_3)
  );
  AMOALU amoalus_0 (
    .io_mask (pstore1_mask),
    .io_cmd  (pstore1_cmd),
    .io_lhs  (s2_data),
    .io_rhs  (pstore1_data),
    .io_out  (_amoalus_0_io_out)
  );
  assign auto_out_a_valid = nodeOut_a_deq_valid;
  assign auto_out_a_bits_opcode =
    s2_uncached
      ? (s2_write
           ? (_GEN_59 ? 3'h1 : s2_read ? (_GEN_57 ? 3'h2 : _GEN_51 ? 3'h3 : 3'h0) : 3'h0)
           : 3'h4)
      : 3'h6;
  assign auto_out_a_bits_param =
    s2_uncached
      ? (~s2_write | _GEN_59 | ~s2_read
           ? 3'h0
           : _GEN_56
               ? 3'h3
               : _GEN_55
                   ? 3'h2
                   : _GEN_54
                       ? 3'h1
                       : _GEN_53
                           ? 3'h0
                           : _GEN_52
                               ? 3'h4
                               : _GEN_50
                                   ? 3'h2
                                   : _GEN_49 ? 3'h1 : _GEN_48 | ~_GEN_47 ? 3'h0 : 3'h3)
      : {1'h0, _GEN_66[_GEN_64]};
  assign auto_out_a_bits_size =
    s2_uncached ? (_GEN_88 ? {2'h0, s2_req_size} : 4'h0) : 4'h6;
  assign auto_out_a_bits_source =
    s2_uncached
    & (~s2_write | _GEN_59 | ~s2_read | _GEN_56 | _GEN_55 | _GEN_54 | _GEN_53 | _GEN_52
       | _GEN_50 | _GEN_49 | _GEN_48 | _GEN_47);
  assign auto_out_a_bits_address =
    s2_uncached ? (_GEN_88 ? s2_req_addr[31:0] : 32'h0) : {s2_req_addr[31:6], 6'h0};
  assign auto_out_a_bits_mask =
    s2_uncached
      ? (s2_write
           ? (_GEN_59
                ? pstore1_mask
                : s2_read
                    ? atomics_mask
                    : {put_a_mask_acc_5 | put_a_mask_eq_5 & s2_req_addr[0],
                       put_a_mask_acc_5 | put_a_mask_eq_5 & ~(s2_req_addr[0]),
                       put_a_mask_acc_4 | put_a_mask_eq_4 & s2_req_addr[0],
                       put_a_mask_acc_4 | put_a_mask_eq_4 & ~(s2_req_addr[0]),
                       put_a_mask_acc_3 | put_a_mask_eq_3 & s2_req_addr[0],
                       put_a_mask_acc_3 | put_a_mask_eq_3 & ~(s2_req_addr[0]),
                       put_a_mask_acc_2 | put_a_mask_eq_2 & s2_req_addr[0],
                       put_a_mask_acc_2 | put_a_mask_eq_2 & ~(s2_req_addr[0])})
           : {get_a_mask_acc_5 | get_a_mask_eq_5 & s2_req_addr[0],
              get_a_mask_acc_5 | get_a_mask_eq_5 & ~(s2_req_addr[0]),
              get_a_mask_acc_4 | get_a_mask_eq_4 & s2_req_addr[0],
              get_a_mask_acc_4 | get_a_mask_eq_4 & ~(s2_req_addr[0]),
              get_a_mask_acc_3 | get_a_mask_eq_3 & s2_req_addr[0],
              get_a_mask_acc_3 | get_a_mask_eq_3 & ~(s2_req_addr[0]),
              get_a_mask_acc_2 | get_a_mask_eq_2 & s2_req_addr[0],
              get_a_mask_acc_2 | get_a_mask_eq_2 & ~(s2_req_addr[0])})
      : 8'hFF;
  assign auto_out_a_bits_data =
    s2_uncached & s2_write
    & (_GEN_59 | ~s2_read | _GEN_56 | _GEN_55 | _GEN_54 | _GEN_53 | _GEN_52 | _GEN_50
       | _GEN_49 | _GEN_48 | _GEN_47)
      ? pstore1_data
      : 64'h0;
  assign auto_out_b_ready = nodeOut_b_ready;
  assign auto_out_c_valid = nodeOut_c_valid;
  assign auto_out_c_bits_opcode = nodeOut_c_bits_opcode;
  assign auto_out_c_bits_param =
    _GEN_93
      ? ((&s2_victim_state_state) | s2_victim_state_state == 2'h2
           ? 3'h1
           : s2_victim_state_state == 2'h1
               ? 3'h2
               : s2_victim_state_state == 2'h0 ? 3'h5 : 3'h0)
      : _GEN_28 | _GEN_106 | ~(~s2_probe | _GEN_103 | ~(|s2_probe_state_state))
          ? (_GEN_81
               ? 3'h3
               : _GEN_78
                   ? 3'h4
                   : _GEN_77
                       ? 3'h5
                       : _GEN_76 | _GEN_75
                           ? 3'h0
                           : _GEN_74
                               ? 3'h4
                               : _GEN_73
                                   ? 3'h5
                                   : _GEN_72 | _GEN_71 == 4'hA
                                       ? 3'h1
                                       : _GEN_71 == 4'h9
                                           ? 3'h2
                                           : _GEN_71 == 4'h8 ? 3'h5 : 3'h0)
          : 3'h5;
  assign auto_out_c_bits_size = nodeOut_c_bits_size;
  assign auto_out_c_bits_source = probe_bits_source;
  assign auto_out_c_bits_address = probe_bits_address;
  assign auto_out_c_bits_data = s2_data;
  assign auto_out_d_ready = nodeOut_d_ready;
  assign auto_out_e_valid = nodeOut_e_valid;
  assign auto_out_e_bits_sink = auto_out_d_bits_sink;
  assign io_cpu_req_ready = _io_cpu_req_ready_output;
  assign io_cpu_s2_nack = _io_cpu_s2_nack_output;
  assign io_cpu_resp_valid = s2_valid_hit | doUncachedResp;
  assign io_cpu_resp_bits_addr = doUncachedResp ? s2_uncached_resp_addr : s2_req_addr;
  assign io_cpu_resp_bits_tag = s2_req_tag;
  assign io_cpu_resp_bits_cmd = s2_req_cmd;
  assign io_cpu_resp_bits_size = s2_req_size;
  assign io_cpu_resp_bits_signed = s2_req_signed;
  assign io_cpu_resp_bits_dprv = s2_req_dprv;
  assign io_cpu_resp_bits_dv = s2_req_dv;
  assign io_cpu_resp_bits_data =
    {s2_req_size == 2'h0 | s2_sc
       ? {56{s2_req_signed & io_cpu_resp_bits_data_zeroed_2[7]}}
       : {s2_req_size == 2'h1
            ? {48{s2_req_signed & io_cpu_resp_bits_data_zeroed_1[15]}}
            : {_GEN_108
                 ? {32{s2_req_signed & io_cpu_resp_bits_data_zeroed[31]}}
                 : s2_data[63:32],
               io_cpu_resp_bits_data_zeroed[31:16]},
          io_cpu_resp_bits_data_zeroed_1[15:8]},
     io_cpu_resp_bits_data_zeroed_2[7:1],
     io_cpu_resp_bits_data_zeroed_2[0] | s2_sc_fail};
  assign io_cpu_resp_bits_mask = s2_req_mask;
  assign io_cpu_resp_bits_replay = doUncachedResp;
  assign io_cpu_resp_bits_has_data = s2_read;
  assign io_cpu_resp_bits_data_word_bypass =
    {_GEN_108
       ? {32{s2_req_signed & io_cpu_resp_bits_data_word_bypass_zeroed[31]}}
       : s2_data[63:32],
     io_cpu_resp_bits_data_word_bypass_zeroed};
  assign io_cpu_resp_bits_data_raw = s2_data;
  assign io_cpu_resp_bits_store_data = pstore1_data;
  assign io_cpu_replay_next = _io_cpu_replay_next_output;
  assign io_cpu_s2_xcpt_ma_ld = _io_cpu_s2_xcpt_ma_ld_output;
  assign io_cpu_s2_xcpt_ma_st = _io_cpu_s2_xcpt_ma_st_output;
  assign io_cpu_s2_xcpt_pf_ld = _io_cpu_s2_xcpt_pf_ld_output;
  assign io_cpu_s2_xcpt_pf_st = _io_cpu_s2_xcpt_pf_st_output;
  assign io_cpu_s2_xcpt_gf_ld = _io_cpu_s2_xcpt_gf_ld_output;
  assign io_cpu_s2_xcpt_gf_st = _io_cpu_s2_xcpt_gf_st_output;
  assign io_cpu_s2_xcpt_ae_ld = _io_cpu_s2_xcpt_ae_ld_output;
  assign io_cpu_s2_xcpt_ae_st = _io_cpu_s2_xcpt_ae_st_output;
  assign io_cpu_ordered =
    ~(s1_valid & ~s1_req_no_xcpt | s2_valid & ~s2_req_no_xcpt | cached_grant_wait
      | uncachedInFlight_0);
  assign io_cpu_perf_release =
    (io_cpu_perf_release_counter == 9'h1
     | (nodeOut_c_bits_opcode[0] ? ~(_GEN_102[11:3]) : 9'h0) == 9'h0) & _GEN_101;
  assign io_cpu_perf_grant = auto_out_d_valid & d_last;
  assign io_ptw_req_valid = tlb_io_ptw_req_valid;
  assign io_ptw_req_bits_bits_addr = tlb_r_refill_tag;
  assign io_ptw_req_bits_bits_need_gpa = tlb_r_need_gpa;
  assign io_ptw_req_bits_bits_vstage1 = tlb_r_vstage1_en;
  assign io_ptw_req_bits_bits_stage2 = tlb_r_stage2_en;
endmodule

module ICache(
  input         clock,
                reset,
                auto_master_out_a_ready,
                auto_master_out_d_valid,
  input  [2:0]  auto_master_out_d_bits_opcode,
  input  [3:0]  auto_master_out_d_bits_size,
  input  [63:0] auto_master_out_d_bits_data,
  input         auto_master_out_d_bits_corrupt,
                io_req_valid,
  input  [38:0] io_req_bits_addr,
  input  [31:0] io_s1_paddr,
  input         io_s1_kill,
                io_s2_kill,
                io_invalidate,
  output        auto_master_out_a_valid,
  output [31:0] auto_master_out_a_bits_address,
  output        io_resp_valid,
  output [31:0] io_resp_bits_data,
  output        io_resp_bits_replay,
                io_resp_bits_ae
);

  wire         rockettile_icache_data_arrays_1_dout_1_en;
  wire [31:0]  rockettile_icache_data_arrays_1_MPORT_2_data_3;
  wire         rockettile_icache_data_arrays_1_MPORT_2_en;
  wire         rockettile_icache_data_arrays_0_dout_en;
  wire [31:0]  rockettile_icache_data_arrays_0_MPORT_1_data_3;
  wire         rockettile_icache_data_arrays_0_MPORT_1_en;
  wire         s1_tag_hit_3;
  wire         s1_tag_hit_2;
  wire         s1_tag_hit_1;
  wire         s1_tag_hit_0;
  wire         rockettile_icache_data_arrays_1_MPORT_2_mask_3;
  wire         rockettile_icache_data_arrays_1_MPORT_2_mask_2;
  wire         rockettile_icache_data_arrays_1_MPORT_2_mask_1;
  wire         rockettile_icache_data_arrays_1_MPORT_2_mask_0;
  wire         refillError;
  wire         rockettile_icache_tag_array_tag_rdata_en;
  wire [5:0]   rockettile_icache_tag_array_tag_rdata_addr;
  wire         _GEN;
  wire         masterNodeOut_a_valid;
  wire [127:0] _rockettile_icache_data_arrays_1_ext_RW0_rdata;
  wire [127:0] _rockettile_icache_data_arrays_0_ext_RW0_rdata;
  wire [83:0]  _rockettile_icache_tag_array_ext_RW0_rdata;
  wire         _repl_way_v0_prng_io_out_0;
  wire         _repl_way_v0_prng_io_out_1;
  wire         s0_valid = _GEN & io_req_valid;
  reg          s1_valid;
  wire         s1_hit = s1_tag_hit_0 | s1_tag_hit_1 | s1_tag_hit_2 | s1_tag_hit_3;
  reg          s2_valid;
  reg          s2_hit;
  reg          invalidated;
  reg          refill_valid;
  wire         _GEN_0 = auto_master_out_a_ready & masterNodeOut_a_valid;
  wire         s2_miss = s2_valid & ~s2_hit & ~io_s2_kill;
  reg          s2_request_refill_REG;
  assign masterNodeOut_a_valid = s2_miss & s2_request_refill_REG;
  reg  [31:0]  refill_paddr;
  wire         refill_one_beat =
    auto_master_out_d_valid & auto_master_out_d_bits_opcode[0];
  assign _GEN = ~refill_one_beat;
  wire [26:0]  _GEN_1 = 27'hFFF << auto_master_out_d_bits_size;
  wire [8:0]   beats1 = auto_master_out_d_bits_opcode[0] ? ~(_GEN_1[11:3]) : 9'h0;
  reg  [8:0]   counter;
  wire [8:0]   counter1 = counter - 9'h1;
  wire [8:0]   refill_cnt = beats1 & ~counter1;
  wire         rockettile_icache_tag_array_MPORT_en =
    refill_one_beat & (counter == 9'h1 | beats1 == 9'h0) & auto_master_out_d_valid;
  wire [1:0]   way = {_repl_way_v0_prng_io_out_1, _repl_way_v0_prng_io_out_0};
  wire [3:0]   _GEN_2 =
    {rockettile_icache_data_arrays_1_MPORT_2_mask_3,
     rockettile_icache_data_arrays_1_MPORT_2_mask_2,
     rockettile_icache_data_arrays_1_MPORT_2_mask_1,
     rockettile_icache_data_arrays_1_MPORT_2_mask_0};
  assign rockettile_icache_tag_array_tag_rdata_addr = io_req_bits_addr[11:6];
  assign rockettile_icache_tag_array_tag_rdata_en =
    ~rockettile_icache_tag_array_MPORT_en & s0_valid;
  reg          accruedRefillError;
  assign refillError =
    auto_master_out_d_bits_corrupt | (|refill_cnt) & accruedRefillError;
  assign rockettile_icache_data_arrays_1_MPORT_2_mask_0 = way == 2'h0;
  assign rockettile_icache_data_arrays_1_MPORT_2_mask_1 = way == 2'h1;
  assign rockettile_icache_data_arrays_1_MPORT_2_mask_2 = way == 2'h2;
  assign rockettile_icache_data_arrays_1_MPORT_2_mask_3 = &way;
  reg  [255:0] vb_array;
  wire [255:0] _GEN_3 = vb_array >> io_s1_paddr[11:6];
  assign s1_tag_hit_0 =
    _GEN_3[0] & _rockettile_icache_tag_array_ext_RW0_rdata[19:0] == io_s1_paddr[31:12];
  wire [255:0] _GEN_4 = vb_array >> {250'h1, io_s1_paddr[11:6]};
  assign s1_tag_hit_1 =
    _GEN_4[0] & _rockettile_icache_tag_array_ext_RW0_rdata[40:21] == io_s1_paddr[31:12];
  wire [255:0] _GEN_5 = vb_array >> {250'h2, io_s1_paddr[11:6]};
  assign s1_tag_hit_2 =
    _GEN_5[0] & _rockettile_icache_tag_array_ext_RW0_rdata[61:42] == io_s1_paddr[31:12];
  wire [255:0] _GEN_6 = vb_array >> {250'h3, io_s1_paddr[11:6]};
  assign s1_tag_hit_3 =
    _GEN_6[0] & _rockettile_icache_tag_array_ext_RW0_rdata[82:63] == io_s1_paddr[31:12];
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (~reset
          & ~(~s1_valid | {1'h0, {1'h0, s1_tag_hit_0} + {1'h0, s1_tag_hit_1}}
              + {1'h0, {1'h0, s1_tag_hit_2} + {1'h0, s1_tag_hit_3}} < 3'h2)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ICache.scala:521 assert(!(s1_valid || s1_slaveValid) || PopCount(s1_tag_hit zip s1_tag_disparity map { case (h, d) => h && !d }) <= 1.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  assign rockettile_icache_data_arrays_0_MPORT_1_en = refill_one_beat & ~invalidated;
  wire [8:0]   _GEN_7 = {refill_paddr[11:6], 3'h0} | refill_cnt;
  assign rockettile_icache_data_arrays_0_MPORT_1_data_3 =
    auto_master_out_d_bits_data[31:0];
  assign rockettile_icache_data_arrays_0_dout_en =
    ~rockettile_icache_data_arrays_0_MPORT_1_en & s0_valid & ~(io_req_bits_addr[2]);
  assign rockettile_icache_data_arrays_1_MPORT_2_en = refill_one_beat & ~invalidated;
  assign rockettile_icache_data_arrays_1_MPORT_2_data_3 =
    auto_master_out_d_bits_data[63:32];
  assign rockettile_icache_data_arrays_1_dout_1_en =
    ~rockettile_icache_data_arrays_1_MPORT_2_en & s0_valid & io_req_bits_addr[2];
  reg          s2_tag_hit_0;
  reg          s2_tag_hit_1;
  reg          s2_tag_hit_2;
  reg          s2_tag_hit_3;
  reg  [31:0]  s2_dout_0;
  reg  [31:0]  s2_dout_1;
  reg  [31:0]  s2_dout_2;
  reg  [31:0]  s2_dout_3;
  reg          s2_tag_disparity_r_0;
  reg          s2_tag_disparity_r_1;
  reg          s2_tag_disparity_r_2;
  reg          s2_tag_disparity_r_3;
  wire [3:0]   _GEN_8 =
    {s2_tag_disparity_r_3,
     s2_tag_disparity_r_2,
     s2_tag_disparity_r_1,
     s2_tag_disparity_r_0};
  reg          s2_tl_error;
  wire         invalidate = s2_valid & (|_GEN_8) | io_invalidate;
  always @(posedge clock) begin
    automatic logic _GEN_9 = s2_miss | refill_valid;
    if (reset) begin
      s1_valid <= 1'h0;
      s2_valid <= 1'h0;
      refill_valid <= 1'h0;
      counter <= 9'h0;
      vb_array <= 256'h0;
    end
    else begin
      s1_valid <= s0_valid;
      s2_valid <= s1_valid & ~io_s1_kill;
      refill_valid <= ~rockettile_icache_tag_array_MPORT_en & (_GEN_0 | refill_valid);
      if (auto_master_out_d_valid) begin
        if (counter == 9'h0) begin
          if (auto_master_out_d_bits_opcode[0])
            counter <= ~(_GEN_1[11:3]);
          else
            counter <= 9'h0;
        end
        else
          counter <= counter1;
      end
      if (invalidate)
        vb_array <= 256'h0;
      else if (refill_one_beat) begin
        automatic logic [255:0] _GEN_10;
        _GEN_10 =
          256'h1
          << {248'h0,
              _repl_way_v0_prng_io_out_1,
              _repl_way_v0_prng_io_out_0,
              refill_paddr[11:6]};
        if (rockettile_icache_tag_array_MPORT_en & ~invalidated)
          vb_array <= vb_array | _GEN_10;
        else
          vb_array <= ~(~vb_array | _GEN_10);
      end
    end
    s2_hit <= s1_hit;
    invalidated <= refill_valid & (invalidate | invalidated);
    s2_request_refill_REG <= ~_GEN_9;
    if (s1_valid & ~_GEN_9)
      refill_paddr <= io_s1_paddr;
    if (refill_one_beat)
      accruedRefillError <= refillError;
    if (s1_valid) begin
      s2_tag_hit_0 <= s1_tag_hit_0;
      s2_tag_hit_1 <= s1_tag_hit_1;
      s2_tag_hit_2 <= s1_tag_hit_2;
      s2_tag_hit_3 <= s1_tag_hit_3;
      if (io_s1_paddr[2]) begin
        s2_dout_0 <= _rockettile_icache_data_arrays_1_ext_RW0_rdata[31:0];
        s2_dout_1 <= _rockettile_icache_data_arrays_1_ext_RW0_rdata[63:32];
        s2_dout_2 <= _rockettile_icache_data_arrays_1_ext_RW0_rdata[95:64];
        s2_dout_3 <= _rockettile_icache_data_arrays_1_ext_RW0_rdata[127:96];
      end
      else begin
        s2_dout_0 <= _rockettile_icache_data_arrays_0_ext_RW0_rdata[31:0];
        s2_dout_1 <= _rockettile_icache_data_arrays_0_ext_RW0_rdata[63:32];
        s2_dout_2 <= _rockettile_icache_data_arrays_0_ext_RW0_rdata[95:64];
        s2_dout_3 <= _rockettile_icache_data_arrays_0_ext_RW0_rdata[127:96];
      end
      s2_tl_error <=
        |{s1_tag_hit_3 & _rockettile_icache_tag_array_ext_RW0_rdata[83],
          s1_tag_hit_2 & _rockettile_icache_tag_array_ext_RW0_rdata[62],
          s1_tag_hit_1 & _rockettile_icache_tag_array_ext_RW0_rdata[41],
          s1_tag_hit_0 & _rockettile_icache_tag_array_ext_RW0_rdata[20]};
    end
    s2_tag_disparity_r_0 <= ~s1_valid & s2_tag_disparity_r_0;
    s2_tag_disparity_r_1 <= ~s1_valid & s2_tag_disparity_r_1;
    s2_tag_disparity_r_2 <= ~s1_valid & s2_tag_disparity_r_2;
    s2_tag_disparity_r_3 <= ~s1_valid & s2_tag_disparity_r_3;
  end // always @(posedge)
  MaxPeriodFibonacciLFSR repl_way_v0_prng (
    .clock        (clock),
    .reset        (reset),
    .io_increment (_GEN_0),
    .io_out_0     (_repl_way_v0_prng_io_out_0),
    .io_out_1     (_repl_way_v0_prng_io_out_1),
    .io_out_2     (/* unused */),
    .io_out_3     (/* unused */),
    .io_out_4     (/* unused */),
    .io_out_5     (/* unused */),
    .io_out_6     (/* unused */),
    .io_out_7     (/* unused */),
    .io_out_8     (/* unused */),
    .io_out_9     (/* unused */),
    .io_out_10    (/* unused */),
    .io_out_11    (/* unused */),
    .io_out_12    (/* unused */),
    .io_out_13    (/* unused */),
    .io_out_14    (/* unused */),
    .io_out_15    (/* unused */)
  );
  rockettile_icache_tag_array_combMem rockettile_icache_tag_array_ext (
    .RW0_addr
      (rockettile_icache_tag_array_MPORT_en
         ? refill_paddr[11:6]
         : rockettile_icache_tag_array_tag_rdata_addr),
    .RW0_en
      (rockettile_icache_tag_array_tag_rdata_en | rockettile_icache_tag_array_MPORT_en),
    .RW0_clk   (clock),
    .RW0_wmode (rockettile_icache_tag_array_MPORT_en),
    .RW0_wdata
      ({refillError,
        refill_paddr[31:12],
        refillError,
        refill_paddr[31:12],
        refillError,
        refill_paddr[31:12],
        refillError,
        refill_paddr[31:12]}),
    .RW0_wmask (_GEN_2),
    .RW0_rdata (_rockettile_icache_tag_array_ext_RW0_rdata)
  );
  rockettile_icache_data_arrays_0_combMem rockettile_icache_data_arrays_0_ext (
    .RW0_addr  (refill_one_beat ? _GEN_7 : io_req_bits_addr[11:3]),
    .RW0_en
      (rockettile_icache_data_arrays_0_dout_en
       | rockettile_icache_data_arrays_0_MPORT_1_en),
    .RW0_clk   (clock),
    .RW0_wmode (rockettile_icache_data_arrays_0_MPORT_1_en),
    .RW0_wdata ({4{rockettile_icache_data_arrays_0_MPORT_1_data_3}}),
    .RW0_wmask (_GEN_2),
    .RW0_rdata (_rockettile_icache_data_arrays_0_ext_RW0_rdata)
  );
  rockettile_icache_data_arrays_0_combMem rockettile_icache_data_arrays_1_ext (
    .RW0_addr  (refill_one_beat ? _GEN_7 : io_req_bits_addr[11:3]),
    .RW0_en
      (rockettile_icache_data_arrays_1_dout_1_en
       | rockettile_icache_data_arrays_1_MPORT_2_en),
    .RW0_clk   (clock),
    .RW0_wmode (rockettile_icache_data_arrays_1_MPORT_2_en),
    .RW0_wdata ({4{rockettile_icache_data_arrays_1_MPORT_2_data_3}}),
    .RW0_wmask (_GEN_2),
    .RW0_rdata (_rockettile_icache_data_arrays_1_ext_RW0_rdata)
  );
  assign auto_master_out_a_valid = masterNodeOut_a_valid;
  assign auto_master_out_a_bits_address = {refill_paddr[31:6], 6'h0};
  assign io_resp_valid = s2_valid & s2_hit;
  assign io_resp_bits_data =
    (s2_tag_hit_0 ? s2_dout_0 : 32'h0) | (s2_tag_hit_1 ? s2_dout_1 : 32'h0)
    | (s2_tag_hit_2 ? s2_dout_2 : 32'h0) | (s2_tag_hit_3 ? s2_dout_3 : 32'h0);
  assign io_resp_bits_replay = |_GEN_8;
  assign io_resp_bits_ae = s2_tl_error;
endmodule

module ShiftQueue(
  input         clock,
                reset,
                io_enq_valid,
                io_enq_bits_btb_taken,
                io_enq_bits_btb_bridx,
  input  [4:0]  io_enq_bits_btb_entry,
  input  [7:0]  io_enq_bits_btb_bht_history,
  input  [39:0] io_enq_bits_pc,
  input  [31:0] io_enq_bits_data,
  input         io_enq_bits_xcpt_pf_inst,
                io_enq_bits_xcpt_gf_inst,
                io_enq_bits_xcpt_ae_inst,
                io_enq_bits_replay,
                io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
                io_deq_bits_btb_taken,
                io_deq_bits_btb_bridx,
  output [4:0]  io_deq_bits_btb_entry,
  output [7:0]  io_deq_bits_btb_bht_history,
  output [39:0] io_deq_bits_pc,
  output [31:0] io_deq_bits_data,
  output        io_deq_bits_xcpt_pf_inst,
                io_deq_bits_xcpt_gf_inst,
                io_deq_bits_xcpt_ae_inst,
                io_deq_bits_replay,
  output [4:0]  io_mask
);

  reg        valid_0;
  reg        valid_1;
  reg        valid_2;
  reg        valid_3;
  reg        valid_4;
  reg        elts_0_btb_taken;
  reg        elts_0_btb_bridx;
  reg [4:0]  elts_0_btb_entry;
  reg [7:0]  elts_0_btb_bht_history;
  reg [39:0] elts_0_pc;
  reg [31:0] elts_0_data;
  reg        elts_0_xcpt_pf_inst;
  reg        elts_0_xcpt_gf_inst;
  reg        elts_0_xcpt_ae_inst;
  reg        elts_0_replay;
  reg        elts_1_btb_taken;
  reg        elts_1_btb_bridx;
  reg [4:0]  elts_1_btb_entry;
  reg [7:0]  elts_1_btb_bht_history;
  reg [39:0] elts_1_pc;
  reg [31:0] elts_1_data;
  reg        elts_1_xcpt_pf_inst;
  reg        elts_1_xcpt_gf_inst;
  reg        elts_1_xcpt_ae_inst;
  reg        elts_1_replay;
  reg        elts_2_btb_taken;
  reg        elts_2_btb_bridx;
  reg [4:0]  elts_2_btb_entry;
  reg [7:0]  elts_2_btb_bht_history;
  reg [39:0] elts_2_pc;
  reg [31:0] elts_2_data;
  reg        elts_2_xcpt_pf_inst;
  reg        elts_2_xcpt_gf_inst;
  reg        elts_2_xcpt_ae_inst;
  reg        elts_2_replay;
  reg        elts_3_btb_taken;
  reg        elts_3_btb_bridx;
  reg [4:0]  elts_3_btb_entry;
  reg [7:0]  elts_3_btb_bht_history;
  reg [39:0] elts_3_pc;
  reg [31:0] elts_3_data;
  reg        elts_3_xcpt_pf_inst;
  reg        elts_3_xcpt_gf_inst;
  reg        elts_3_xcpt_ae_inst;
  reg        elts_3_replay;
  reg        elts_4_btb_taken;
  reg        elts_4_btb_bridx;
  reg [4:0]  elts_4_btb_entry;
  reg [7:0]  elts_4_btb_bht_history;
  reg [39:0] elts_4_pc;
  reg [31:0] elts_4_data;
  reg        elts_4_xcpt_pf_inst;
  reg        elts_4_xcpt_gf_inst;
  reg        elts_4_xcpt_ae_inst;
  reg        elts_4_replay;
  always @(posedge clock) begin
    automatic logic _GEN;
    automatic logic _GEN_0;
    automatic logic _GEN_1;
    automatic logic _GEN_2;
    automatic logic _GEN_3;
    automatic logic _GEN_4;
    automatic logic _GEN_5;
    automatic logic _GEN_6;
    automatic logic _GEN_7;
    automatic logic _GEN_8;
    _GEN = ~valid_4 & io_enq_valid;
    _GEN_0 = _GEN & valid_0;
    _GEN_1 = valid_1 | _GEN_0;
    _GEN_2 = _GEN & valid_1;
    _GEN_3 = valid_2 | _GEN_2;
    _GEN_4 = _GEN & valid_2;
    _GEN_5 = valid_3 | _GEN_4;
    _GEN_6 = _GEN & valid_3;
    _GEN_7 = valid_4 | _GEN_6;
    _GEN_8 = _GEN & valid_4;
    if (reset) begin
      valid_0 <= 1'h0;
      valid_1 <= 1'h0;
      valid_2 <= 1'h0;
      valid_3 <= 1'h0;
      valid_4 <= 1'h0;
    end
    else if (io_deq_ready) begin
      valid_0 <= _GEN_1;
      valid_1 <= _GEN_3;
      valid_2 <= _GEN_5;
      valid_3 <= _GEN_7;
      valid_4 <= _GEN_8;
    end
    else begin
      valid_0 <= _GEN | valid_0;
      valid_1 <= _GEN_1;
      valid_2 <= _GEN_3;
      valid_3 <= _GEN_5;
      valid_4 <= _GEN_7;
    end
    if (io_deq_ready ? _GEN_1 : _GEN & ~valid_0) begin
      if (valid_1) begin
        elts_0_btb_taken <= elts_1_btb_taken;
        elts_0_btb_bridx <= elts_1_btb_bridx;
        elts_0_btb_entry <= elts_1_btb_entry;
        elts_0_btb_bht_history <= elts_1_btb_bht_history;
        elts_0_pc <= elts_1_pc;
        elts_0_data <= elts_1_data;
        elts_0_xcpt_pf_inst <= elts_1_xcpt_pf_inst;
        elts_0_xcpt_gf_inst <= elts_1_xcpt_gf_inst;
        elts_0_xcpt_ae_inst <= elts_1_xcpt_ae_inst;
        elts_0_replay <= elts_1_replay;
      end
      else begin
        elts_0_btb_taken <= io_enq_bits_btb_taken;
        elts_0_btb_bridx <= io_enq_bits_btb_bridx;
        elts_0_btb_entry <= io_enq_bits_btb_entry;
        elts_0_btb_bht_history <= io_enq_bits_btb_bht_history;
        elts_0_pc <= io_enq_bits_pc;
        elts_0_data <= io_enq_bits_data;
        elts_0_xcpt_pf_inst <= io_enq_bits_xcpt_pf_inst;
        elts_0_xcpt_gf_inst <= io_enq_bits_xcpt_gf_inst;
        elts_0_xcpt_ae_inst <= io_enq_bits_xcpt_ae_inst;
        elts_0_replay <= io_enq_bits_replay;
      end
    end
    if (io_deq_ready ? _GEN_3 : _GEN_0 & ~valid_1) begin
      if (valid_2) begin
        elts_1_btb_taken <= elts_2_btb_taken;
        elts_1_btb_bridx <= elts_2_btb_bridx;
        elts_1_btb_entry <= elts_2_btb_entry;
        elts_1_btb_bht_history <= elts_2_btb_bht_history;
        elts_1_pc <= elts_2_pc;
        elts_1_data <= elts_2_data;
        elts_1_xcpt_pf_inst <= elts_2_xcpt_pf_inst;
        elts_1_xcpt_gf_inst <= elts_2_xcpt_gf_inst;
        elts_1_xcpt_ae_inst <= elts_2_xcpt_ae_inst;
        elts_1_replay <= elts_2_replay;
      end
      else begin
        elts_1_btb_taken <= io_enq_bits_btb_taken;
        elts_1_btb_bridx <= io_enq_bits_btb_bridx;
        elts_1_btb_entry <= io_enq_bits_btb_entry;
        elts_1_btb_bht_history <= io_enq_bits_btb_bht_history;
        elts_1_pc <= io_enq_bits_pc;
        elts_1_data <= io_enq_bits_data;
        elts_1_xcpt_pf_inst <= io_enq_bits_xcpt_pf_inst;
        elts_1_xcpt_gf_inst <= io_enq_bits_xcpt_gf_inst;
        elts_1_xcpt_ae_inst <= io_enq_bits_xcpt_ae_inst;
        elts_1_replay <= io_enq_bits_replay;
      end
    end
    if (io_deq_ready ? _GEN_5 : _GEN_2 & ~valid_2) begin
      if (valid_3) begin
        elts_2_btb_taken <= elts_3_btb_taken;
        elts_2_btb_bridx <= elts_3_btb_bridx;
        elts_2_btb_entry <= elts_3_btb_entry;
        elts_2_btb_bht_history <= elts_3_btb_bht_history;
        elts_2_pc <= elts_3_pc;
        elts_2_data <= elts_3_data;
        elts_2_xcpt_pf_inst <= elts_3_xcpt_pf_inst;
        elts_2_xcpt_gf_inst <= elts_3_xcpt_gf_inst;
        elts_2_xcpt_ae_inst <= elts_3_xcpt_ae_inst;
        elts_2_replay <= elts_3_replay;
      end
      else begin
        elts_2_btb_taken <= io_enq_bits_btb_taken;
        elts_2_btb_bridx <= io_enq_bits_btb_bridx;
        elts_2_btb_entry <= io_enq_bits_btb_entry;
        elts_2_btb_bht_history <= io_enq_bits_btb_bht_history;
        elts_2_pc <= io_enq_bits_pc;
        elts_2_data <= io_enq_bits_data;
        elts_2_xcpt_pf_inst <= io_enq_bits_xcpt_pf_inst;
        elts_2_xcpt_gf_inst <= io_enq_bits_xcpt_gf_inst;
        elts_2_xcpt_ae_inst <= io_enq_bits_xcpt_ae_inst;
        elts_2_replay <= io_enq_bits_replay;
      end
    end
    if (io_deq_ready ? _GEN_7 : _GEN_4 & ~valid_3) begin
      if (valid_4) begin
        elts_3_btb_taken <= elts_4_btb_taken;
        elts_3_btb_bridx <= elts_4_btb_bridx;
        elts_3_btb_entry <= elts_4_btb_entry;
        elts_3_btb_bht_history <= elts_4_btb_bht_history;
        elts_3_pc <= elts_4_pc;
        elts_3_data <= elts_4_data;
        elts_3_xcpt_pf_inst <= elts_4_xcpt_pf_inst;
        elts_3_xcpt_gf_inst <= elts_4_xcpt_gf_inst;
        elts_3_xcpt_ae_inst <= elts_4_xcpt_ae_inst;
        elts_3_replay <= elts_4_replay;
      end
      else begin
        elts_3_btb_taken <= io_enq_bits_btb_taken;
        elts_3_btb_bridx <= io_enq_bits_btb_bridx;
        elts_3_btb_entry <= io_enq_bits_btb_entry;
        elts_3_btb_bht_history <= io_enq_bits_btb_bht_history;
        elts_3_pc <= io_enq_bits_pc;
        elts_3_data <= io_enq_bits_data;
        elts_3_xcpt_pf_inst <= io_enq_bits_xcpt_pf_inst;
        elts_3_xcpt_gf_inst <= io_enq_bits_xcpt_gf_inst;
        elts_3_xcpt_ae_inst <= io_enq_bits_xcpt_ae_inst;
        elts_3_replay <= io_enq_bits_replay;
      end
    end
    if (io_deq_ready ? _GEN_8 : _GEN_6 & ~valid_4) begin
      elts_4_btb_taken <= io_enq_bits_btb_taken;
      elts_4_btb_bridx <= io_enq_bits_btb_bridx;
      elts_4_btb_entry <= io_enq_bits_btb_entry;
      elts_4_btb_bht_history <= io_enq_bits_btb_bht_history;
      elts_4_pc <= io_enq_bits_pc;
      elts_4_data <= io_enq_bits_data;
      elts_4_xcpt_pf_inst <= io_enq_bits_xcpt_pf_inst;
      elts_4_xcpt_gf_inst <= io_enq_bits_xcpt_gf_inst;
      elts_4_xcpt_ae_inst <= io_enq_bits_xcpt_ae_inst;
      elts_4_replay <= io_enq_bits_replay;
    end
  end // always @(posedge)
  assign io_enq_ready = ~valid_4;
  assign io_deq_valid = io_enq_valid | valid_0;
  assign io_deq_bits_btb_taken = valid_0 ? elts_0_btb_taken : io_enq_bits_btb_taken;
  assign io_deq_bits_btb_bridx = valid_0 ? elts_0_btb_bridx : io_enq_bits_btb_bridx;
  assign io_deq_bits_btb_entry = valid_0 ? elts_0_btb_entry : io_enq_bits_btb_entry;
  assign io_deq_bits_btb_bht_history =
    valid_0 ? elts_0_btb_bht_history : io_enq_bits_btb_bht_history;
  assign io_deq_bits_pc = valid_0 ? elts_0_pc : io_enq_bits_pc;
  assign io_deq_bits_data = valid_0 ? elts_0_data : io_enq_bits_data;
  assign io_deq_bits_xcpt_pf_inst =
    valid_0 ? elts_0_xcpt_pf_inst : io_enq_bits_xcpt_pf_inst;
  assign io_deq_bits_xcpt_gf_inst =
    valid_0 ? elts_0_xcpt_gf_inst : io_enq_bits_xcpt_gf_inst;
  assign io_deq_bits_xcpt_ae_inst =
    valid_0 ? elts_0_xcpt_ae_inst : io_enq_bits_xcpt_ae_inst;
  assign io_deq_bits_replay = valid_0 ? elts_0_replay : io_enq_bits_replay;
  assign io_mask = {valid_4, valid_3, valid_2, valid_1, valid_0};
endmodule

module PMPChecker_s2(
  input  [1:0]  io_prv,
  input         io_pmp_0_cfg_l,
  input  [1:0]  io_pmp_0_cfg_a,
  input         io_pmp_0_cfg_x,
                io_pmp_0_cfg_w,
                io_pmp_0_cfg_r,
  input  [29:0] io_pmp_0_addr,
  input  [31:0] io_pmp_0_mask,
  input         io_pmp_1_cfg_l,
  input  [1:0]  io_pmp_1_cfg_a,
  input         io_pmp_1_cfg_x,
                io_pmp_1_cfg_w,
                io_pmp_1_cfg_r,
  input  [29:0] io_pmp_1_addr,
  input  [31:0] io_pmp_1_mask,
  input         io_pmp_2_cfg_l,
  input  [1:0]  io_pmp_2_cfg_a,
  input         io_pmp_2_cfg_x,
                io_pmp_2_cfg_w,
                io_pmp_2_cfg_r,
  input  [29:0] io_pmp_2_addr,
  input  [31:0] io_pmp_2_mask,
  input         io_pmp_3_cfg_l,
  input  [1:0]  io_pmp_3_cfg_a,
  input         io_pmp_3_cfg_x,
                io_pmp_3_cfg_w,
                io_pmp_3_cfg_r,
  input  [29:0] io_pmp_3_addr,
  input  [31:0] io_pmp_3_mask,
  input         io_pmp_4_cfg_l,
  input  [1:0]  io_pmp_4_cfg_a,
  input         io_pmp_4_cfg_x,
                io_pmp_4_cfg_w,
                io_pmp_4_cfg_r,
  input  [29:0] io_pmp_4_addr,
  input  [31:0] io_pmp_4_mask,
  input         io_pmp_5_cfg_l,
  input  [1:0]  io_pmp_5_cfg_a,
  input         io_pmp_5_cfg_x,
                io_pmp_5_cfg_w,
                io_pmp_5_cfg_r,
  input  [29:0] io_pmp_5_addr,
  input  [31:0] io_pmp_5_mask,
  input         io_pmp_6_cfg_l,
  input  [1:0]  io_pmp_6_cfg_a,
  input         io_pmp_6_cfg_x,
                io_pmp_6_cfg_w,
                io_pmp_6_cfg_r,
  input  [29:0] io_pmp_6_addr,
  input  [31:0] io_pmp_6_mask,
  input         io_pmp_7_cfg_l,
  input  [1:0]  io_pmp_7_cfg_a,
  input         io_pmp_7_cfg_x,
                io_pmp_7_cfg_w,
                io_pmp_7_cfg_r,
  input  [29:0] io_pmp_7_addr,
  input  [31:0] io_pmp_7_mask,
                io_addr,
  output        io_r,
                io_w,
                io_x
);

  wire [31:0] _GEN = {io_pmp_7_addr, 2'h0};
  wire [31:0] _GEN_0 = {io_pmp_6_addr, 2'h0};
  wire        _GEN_1 = io_addr < _GEN_0;
  wire        res_hit =
    io_pmp_7_cfg_a[1]
      ? ((io_addr ^ _GEN) & ~io_pmp_7_mask) == 32'h0
      : io_pmp_7_cfg_a[0] & ~_GEN_1 & io_addr < _GEN;
  wire        res_ignore = io_prv[1] & ~io_pmp_7_cfg_l;
  wire [31:0] _GEN_2 = {io_pmp_5_addr, 2'h0};
  wire        _GEN_3 = io_addr < _GEN_2;
  wire        res_hit_1 =
    io_pmp_6_cfg_a[1]
      ? ((io_addr ^ _GEN_0) & ~io_pmp_6_mask) == 32'h0
      : io_pmp_6_cfg_a[0] & ~_GEN_3 & _GEN_1;
  wire        res_ignore_1 = io_prv[1] & ~io_pmp_6_cfg_l;
  wire [31:0] _GEN_4 = {io_pmp_4_addr, 2'h0};
  wire        _GEN_5 = io_addr < _GEN_4;
  wire        res_hit_2 =
    io_pmp_5_cfg_a[1]
      ? ((io_addr ^ _GEN_2) & ~io_pmp_5_mask) == 32'h0
      : io_pmp_5_cfg_a[0] & ~_GEN_5 & _GEN_3;
  wire        res_ignore_2 = io_prv[1] & ~io_pmp_5_cfg_l;
  wire [31:0] _GEN_6 = {io_pmp_3_addr, 2'h0};
  wire        _GEN_7 = io_addr < _GEN_6;
  wire        res_hit_3 =
    io_pmp_4_cfg_a[1]
      ? ((io_addr ^ _GEN_4) & ~io_pmp_4_mask) == 32'h0
      : io_pmp_4_cfg_a[0] & ~_GEN_7 & _GEN_5;
  wire        res_ignore_3 = io_prv[1] & ~io_pmp_4_cfg_l;
  wire [31:0] _GEN_8 = {io_pmp_2_addr, 2'h0};
  wire        _GEN_9 = io_addr < _GEN_8;
  wire        res_hit_4 =
    io_pmp_3_cfg_a[1]
      ? ((io_addr ^ _GEN_6) & ~io_pmp_3_mask) == 32'h0
      : io_pmp_3_cfg_a[0] & ~_GEN_9 & _GEN_7;
  wire        res_ignore_4 = io_prv[1] & ~io_pmp_3_cfg_l;
  wire [31:0] _GEN_10 = {io_pmp_1_addr, 2'h0};
  wire        _GEN_11 = io_addr < _GEN_10;
  wire        res_hit_5 =
    io_pmp_2_cfg_a[1]
      ? ((io_addr ^ _GEN_8) & ~io_pmp_2_mask) == 32'h0
      : io_pmp_2_cfg_a[0] & ~_GEN_11 & _GEN_9;
  wire        res_ignore_5 = io_prv[1] & ~io_pmp_2_cfg_l;
  wire [31:0] _GEN_12 = {io_pmp_0_addr, 2'h0};
  wire        _GEN_13 = io_addr < _GEN_12;
  wire        res_hit_6 =
    io_pmp_1_cfg_a[1]
      ? ((io_addr ^ _GEN_10) & ~io_pmp_1_mask) == 32'h0
      : io_pmp_1_cfg_a[0] & ~_GEN_13 & _GEN_11;
  wire        res_ignore_6 = io_prv[1] & ~io_pmp_1_cfg_l;
  wire        res_hit_7 =
    io_pmp_0_cfg_a[1]
      ? ((io_addr ^ _GEN_12) & ~io_pmp_0_mask) == 32'h0
      : io_pmp_0_cfg_a[0] & _GEN_13;
  wire        res_ignore_7 = io_prv[1] & ~io_pmp_0_cfg_l;
  assign io_r =
    res_hit_7
      ? io_pmp_0_cfg_r | res_ignore_7
      : res_hit_6
          ? io_pmp_1_cfg_r | res_ignore_6
          : res_hit_5
              ? io_pmp_2_cfg_r | res_ignore_5
              : res_hit_4
                  ? io_pmp_3_cfg_r | res_ignore_4
                  : res_hit_3
                      ? io_pmp_4_cfg_r | res_ignore_3
                      : res_hit_2
                          ? io_pmp_5_cfg_r | res_ignore_2
                          : res_hit_1
                              ? io_pmp_6_cfg_r | res_ignore_1
                              : res_hit ? io_pmp_7_cfg_r | res_ignore : io_prv[1];
  assign io_w =
    res_hit_7
      ? io_pmp_0_cfg_w | res_ignore_7
      : res_hit_6
          ? io_pmp_1_cfg_w | res_ignore_6
          : res_hit_5
              ? io_pmp_2_cfg_w | res_ignore_5
              : res_hit_4
                  ? io_pmp_3_cfg_w | res_ignore_4
                  : res_hit_3
                      ? io_pmp_4_cfg_w | res_ignore_3
                      : res_hit_2
                          ? io_pmp_5_cfg_w | res_ignore_2
                          : res_hit_1
                              ? io_pmp_6_cfg_w | res_ignore_1
                              : res_hit ? io_pmp_7_cfg_w | res_ignore : io_prv[1];
  assign io_x =
    res_hit_7
      ? io_pmp_0_cfg_x | res_ignore_7
      : res_hit_6
          ? io_pmp_1_cfg_x | res_ignore_6
          : res_hit_5
              ? io_pmp_2_cfg_x | res_ignore_5
              : res_hit_4
                  ? io_pmp_3_cfg_x | res_ignore_4
                  : res_hit_3
                      ? io_pmp_4_cfg_x | res_ignore_3
                      : res_hit_2
                          ? io_pmp_5_cfg_x | res_ignore_2
                          : res_hit_1
                              ? io_pmp_6_cfg_x | res_ignore_1
                              : res_hit ? io_pmp_7_cfg_x | res_ignore : io_prv[1];
endmodule

module ITLB(
  input         clock,
                reset,
                io_req_valid,
  input  [39:0] io_req_bits_vaddr,
  input  [1:0]  io_req_bits_prv,
  input         io_sfence_valid,
                io_sfence_bits_rs1,
                io_sfence_bits_rs2,
  input  [38:0] io_sfence_bits_addr,
  input         io_ptw_req_ready,
                io_ptw_resp_valid,
                io_ptw_resp_bits_ae_ptw,
                io_ptw_resp_bits_ae_final,
                io_ptw_resp_bits_pf,
                io_ptw_resp_bits_gf,
                io_ptw_resp_bits_hr,
                io_ptw_resp_bits_hw,
                io_ptw_resp_bits_hx,
  input  [43:0] io_ptw_resp_bits_pte_ppn,
  input         io_ptw_resp_bits_pte_d,
                io_ptw_resp_bits_pte_a,
                io_ptw_resp_bits_pte_g,
                io_ptw_resp_bits_pte_u,
                io_ptw_resp_bits_pte_x,
                io_ptw_resp_bits_pte_w,
                io_ptw_resp_bits_pte_r,
                io_ptw_resp_bits_pte_v,
  input  [1:0]  io_ptw_resp_bits_level,
  input         io_ptw_resp_bits_homogeneous,
                io_ptw_resp_bits_gpa_is_pte,
  input  [3:0]  io_ptw_ptbr_mode,
  input         io_ptw_status_debug,
                io_ptw_pmp_0_cfg_l,
  input  [1:0]  io_ptw_pmp_0_cfg_a,
  input         io_ptw_pmp_0_cfg_x,
                io_ptw_pmp_0_cfg_w,
                io_ptw_pmp_0_cfg_r,
  input  [29:0] io_ptw_pmp_0_addr,
  input  [31:0] io_ptw_pmp_0_mask,
  input         io_ptw_pmp_1_cfg_l,
  input  [1:0]  io_ptw_pmp_1_cfg_a,
  input         io_ptw_pmp_1_cfg_x,
                io_ptw_pmp_1_cfg_w,
                io_ptw_pmp_1_cfg_r,
  input  [29:0] io_ptw_pmp_1_addr,
  input  [31:0] io_ptw_pmp_1_mask,
  input         io_ptw_pmp_2_cfg_l,
  input  [1:0]  io_ptw_pmp_2_cfg_a,
  input         io_ptw_pmp_2_cfg_x,
                io_ptw_pmp_2_cfg_w,
                io_ptw_pmp_2_cfg_r,
  input  [29:0] io_ptw_pmp_2_addr,
  input  [31:0] io_ptw_pmp_2_mask,
  input         io_ptw_pmp_3_cfg_l,
  input  [1:0]  io_ptw_pmp_3_cfg_a,
  input         io_ptw_pmp_3_cfg_x,
                io_ptw_pmp_3_cfg_w,
                io_ptw_pmp_3_cfg_r,
  input  [29:0] io_ptw_pmp_3_addr,
  input  [31:0] io_ptw_pmp_3_mask,
  input         io_ptw_pmp_4_cfg_l,
  input  [1:0]  io_ptw_pmp_4_cfg_a,
  input         io_ptw_pmp_4_cfg_x,
                io_ptw_pmp_4_cfg_w,
                io_ptw_pmp_4_cfg_r,
  input  [29:0] io_ptw_pmp_4_addr,
  input  [31:0] io_ptw_pmp_4_mask,
  input         io_ptw_pmp_5_cfg_l,
  input  [1:0]  io_ptw_pmp_5_cfg_a,
  input         io_ptw_pmp_5_cfg_x,
                io_ptw_pmp_5_cfg_w,
                io_ptw_pmp_5_cfg_r,
  input  [29:0] io_ptw_pmp_5_addr,
  input  [31:0] io_ptw_pmp_5_mask,
  input         io_ptw_pmp_6_cfg_l,
  input  [1:0]  io_ptw_pmp_6_cfg_a,
  input         io_ptw_pmp_6_cfg_x,
                io_ptw_pmp_6_cfg_w,
                io_ptw_pmp_6_cfg_r,
  input  [29:0] io_ptw_pmp_6_addr,
  input  [31:0] io_ptw_pmp_6_mask,
  input         io_ptw_pmp_7_cfg_l,
  input  [1:0]  io_ptw_pmp_7_cfg_a,
  input         io_ptw_pmp_7_cfg_x,
                io_ptw_pmp_7_cfg_w,
                io_ptw_pmp_7_cfg_r,
  input  [29:0] io_ptw_pmp_7_addr,
  input  [31:0] io_ptw_pmp_7_mask,
  input         io_kill,
  output        io_resp_miss,
  output [31:0] io_resp_paddr,
  output        io_resp_pf_inst,
                io_resp_ae_inst,
                io_resp_cacheable,
                io_ptw_req_valid,
                io_ptw_req_bits_valid,
  output [26:0] io_ptw_req_bits_bits_addr,
  output        io_ptw_req_bits_bits_need_gpa,
                io_ptw_req_bits_bits_vstage1,
                io_ptw_req_bits_bits_stage2
);

  wire [19:0]      _entries_barrier_12_io_y_ppn;
  wire             _entries_barrier_12_io_y_u;
  wire             _entries_barrier_12_io_y_ae_ptw;
  wire             _entries_barrier_12_io_y_ae_final;
  wire             _entries_barrier_12_io_y_pf;
  wire             _entries_barrier_12_io_y_gf;
  wire             _entries_barrier_12_io_y_sx;
  wire [19:0]      _entries_barrier_11_io_y_ppn;
  wire             _entries_barrier_11_io_y_u;
  wire             _entries_barrier_11_io_y_ae_ptw;
  wire             _entries_barrier_11_io_y_ae_final;
  wire             _entries_barrier_11_io_y_pf;
  wire             _entries_barrier_11_io_y_gf;
  wire             _entries_barrier_11_io_y_sx;
  wire             _entries_barrier_11_io_y_px;
  wire             _entries_barrier_11_io_y_c;
  wire [19:0]      _entries_barrier_10_io_y_ppn;
  wire             _entries_barrier_10_io_y_u;
  wire             _entries_barrier_10_io_y_ae_ptw;
  wire             _entries_barrier_10_io_y_ae_final;
  wire             _entries_barrier_10_io_y_pf;
  wire             _entries_barrier_10_io_y_gf;
  wire             _entries_barrier_10_io_y_sx;
  wire             _entries_barrier_10_io_y_px;
  wire             _entries_barrier_10_io_y_c;
  wire [19:0]      _entries_barrier_9_io_y_ppn;
  wire             _entries_barrier_9_io_y_u;
  wire             _entries_barrier_9_io_y_ae_ptw;
  wire             _entries_barrier_9_io_y_ae_final;
  wire             _entries_barrier_9_io_y_pf;
  wire             _entries_barrier_9_io_y_gf;
  wire             _entries_barrier_9_io_y_sx;
  wire             _entries_barrier_9_io_y_px;
  wire             _entries_barrier_9_io_y_c;
  wire [19:0]      _entries_barrier_8_io_y_ppn;
  wire             _entries_barrier_8_io_y_u;
  wire             _entries_barrier_8_io_y_ae_ptw;
  wire             _entries_barrier_8_io_y_ae_final;
  wire             _entries_barrier_8_io_y_pf;
  wire             _entries_barrier_8_io_y_gf;
  wire             _entries_barrier_8_io_y_sx;
  wire             _entries_barrier_8_io_y_px;
  wire             _entries_barrier_8_io_y_c;
  wire [19:0]      _entries_barrier_7_io_y_ppn;
  wire             _entries_barrier_7_io_y_u;
  wire             _entries_barrier_7_io_y_ae_ptw;
  wire             _entries_barrier_7_io_y_ae_final;
  wire             _entries_barrier_7_io_y_pf;
  wire             _entries_barrier_7_io_y_gf;
  wire             _entries_barrier_7_io_y_sx;
  wire             _entries_barrier_7_io_y_px;
  wire             _entries_barrier_7_io_y_c;
  wire [19:0]      _entries_barrier_6_io_y_ppn;
  wire             _entries_barrier_6_io_y_u;
  wire             _entries_barrier_6_io_y_ae_ptw;
  wire             _entries_barrier_6_io_y_ae_final;
  wire             _entries_barrier_6_io_y_pf;
  wire             _entries_barrier_6_io_y_gf;
  wire             _entries_barrier_6_io_y_sx;
  wire             _entries_barrier_6_io_y_px;
  wire             _entries_barrier_6_io_y_c;
  wire [19:0]      _entries_barrier_5_io_y_ppn;
  wire             _entries_barrier_5_io_y_u;
  wire             _entries_barrier_5_io_y_ae_ptw;
  wire             _entries_barrier_5_io_y_ae_final;
  wire             _entries_barrier_5_io_y_pf;
  wire             _entries_barrier_5_io_y_gf;
  wire             _entries_barrier_5_io_y_sx;
  wire             _entries_barrier_5_io_y_px;
  wire             _entries_barrier_5_io_y_c;
  wire [19:0]      _entries_barrier_4_io_y_ppn;
  wire             _entries_barrier_4_io_y_u;
  wire             _entries_barrier_4_io_y_ae_ptw;
  wire             _entries_barrier_4_io_y_ae_final;
  wire             _entries_barrier_4_io_y_pf;
  wire             _entries_barrier_4_io_y_gf;
  wire             _entries_barrier_4_io_y_sx;
  wire             _entries_barrier_4_io_y_px;
  wire             _entries_barrier_4_io_y_c;
  wire [19:0]      _entries_barrier_3_io_y_ppn;
  wire             _entries_barrier_3_io_y_u;
  wire             _entries_barrier_3_io_y_ae_ptw;
  wire             _entries_barrier_3_io_y_ae_final;
  wire             _entries_barrier_3_io_y_pf;
  wire             _entries_barrier_3_io_y_gf;
  wire             _entries_barrier_3_io_y_sx;
  wire             _entries_barrier_3_io_y_px;
  wire             _entries_barrier_3_io_y_c;
  wire [19:0]      _entries_barrier_2_io_y_ppn;
  wire             _entries_barrier_2_io_y_u;
  wire             _entries_barrier_2_io_y_ae_ptw;
  wire             _entries_barrier_2_io_y_ae_final;
  wire             _entries_barrier_2_io_y_pf;
  wire             _entries_barrier_2_io_y_gf;
  wire             _entries_barrier_2_io_y_sx;
  wire             _entries_barrier_2_io_y_px;
  wire             _entries_barrier_2_io_y_c;
  wire [19:0]      _entries_barrier_1_io_y_ppn;
  wire             _entries_barrier_1_io_y_u;
  wire             _entries_barrier_1_io_y_ae_ptw;
  wire             _entries_barrier_1_io_y_ae_final;
  wire             _entries_barrier_1_io_y_pf;
  wire             _entries_barrier_1_io_y_gf;
  wire             _entries_barrier_1_io_y_sx;
  wire             _entries_barrier_1_io_y_px;
  wire             _entries_barrier_1_io_y_c;
  wire [19:0]      _entries_barrier_io_y_ppn;
  wire             _entries_barrier_io_y_u;
  wire             _entries_barrier_io_y_ae_ptw;
  wire             _entries_barrier_io_y_ae_final;
  wire             _entries_barrier_io_y_pf;
  wire             _entries_barrier_io_y_gf;
  wire             _entries_barrier_io_y_sx;
  wire             _entries_barrier_io_y_px;
  wire             _entries_barrier_io_y_c;
  wire             _pma_io_resp_cacheable;
  wire             _pma_io_resp_r;
  wire             _pma_io_resp_w;
  wire             _pma_io_resp_pp;
  wire             _pma_io_resp_al;
  wire             _pma_io_resp_aa;
  wire             _pma_io_resp_x;
  wire             _pma_io_resp_eff;
  wire             _pmp_io_r;
  wire             _pmp_io_w;
  wire             _pmp_io_x;
  wire [19:0]      _mpu_ppn_barrier_io_y_ppn;
  reg  [26:0]      sectored_entries_0_0_tag_vpn;
  reg              sectored_entries_0_0_tag_v;
  reg  [41:0]      sectored_entries_0_0_data_0;
  reg  [41:0]      sectored_entries_0_0_data_1;
  reg  [41:0]      sectored_entries_0_0_data_2;
  reg  [41:0]      sectored_entries_0_0_data_3;
  reg              sectored_entries_0_0_valid_0;
  reg              sectored_entries_0_0_valid_1;
  reg              sectored_entries_0_0_valid_2;
  reg              sectored_entries_0_0_valid_3;
  reg  [26:0]      sectored_entries_0_1_tag_vpn;
  reg              sectored_entries_0_1_tag_v;
  reg  [41:0]      sectored_entries_0_1_data_0;
  reg  [41:0]      sectored_entries_0_1_data_1;
  reg  [41:0]      sectored_entries_0_1_data_2;
  reg  [41:0]      sectored_entries_0_1_data_3;
  reg              sectored_entries_0_1_valid_0;
  reg              sectored_entries_0_1_valid_1;
  reg              sectored_entries_0_1_valid_2;
  reg              sectored_entries_0_1_valid_3;
  reg  [26:0]      sectored_entries_0_2_tag_vpn;
  reg              sectored_entries_0_2_tag_v;
  reg  [41:0]      sectored_entries_0_2_data_0;
  reg  [41:0]      sectored_entries_0_2_data_1;
  reg  [41:0]      sectored_entries_0_2_data_2;
  reg  [41:0]      sectored_entries_0_2_data_3;
  reg              sectored_entries_0_2_valid_0;
  reg              sectored_entries_0_2_valid_1;
  reg              sectored_entries_0_2_valid_2;
  reg              sectored_entries_0_2_valid_3;
  reg  [26:0]      sectored_entries_0_3_tag_vpn;
  reg              sectored_entries_0_3_tag_v;
  reg  [41:0]      sectored_entries_0_3_data_0;
  reg  [41:0]      sectored_entries_0_3_data_1;
  reg  [41:0]      sectored_entries_0_3_data_2;
  reg  [41:0]      sectored_entries_0_3_data_3;
  reg              sectored_entries_0_3_valid_0;
  reg              sectored_entries_0_3_valid_1;
  reg              sectored_entries_0_3_valid_2;
  reg              sectored_entries_0_3_valid_3;
  reg  [26:0]      sectored_entries_0_4_tag_vpn;
  reg              sectored_entries_0_4_tag_v;
  reg  [41:0]      sectored_entries_0_4_data_0;
  reg  [41:0]      sectored_entries_0_4_data_1;
  reg  [41:0]      sectored_entries_0_4_data_2;
  reg  [41:0]      sectored_entries_0_4_data_3;
  reg              sectored_entries_0_4_valid_0;
  reg              sectored_entries_0_4_valid_1;
  reg              sectored_entries_0_4_valid_2;
  reg              sectored_entries_0_4_valid_3;
  reg  [26:0]      sectored_entries_0_5_tag_vpn;
  reg              sectored_entries_0_5_tag_v;
  reg  [41:0]      sectored_entries_0_5_data_0;
  reg  [41:0]      sectored_entries_0_5_data_1;
  reg  [41:0]      sectored_entries_0_5_data_2;
  reg  [41:0]      sectored_entries_0_5_data_3;
  reg              sectored_entries_0_5_valid_0;
  reg              sectored_entries_0_5_valid_1;
  reg              sectored_entries_0_5_valid_2;
  reg              sectored_entries_0_5_valid_3;
  reg  [26:0]      sectored_entries_0_6_tag_vpn;
  reg              sectored_entries_0_6_tag_v;
  reg  [41:0]      sectored_entries_0_6_data_0;
  reg  [41:0]      sectored_entries_0_6_data_1;
  reg  [41:0]      sectored_entries_0_6_data_2;
  reg  [41:0]      sectored_entries_0_6_data_3;
  reg              sectored_entries_0_6_valid_0;
  reg              sectored_entries_0_6_valid_1;
  reg              sectored_entries_0_6_valid_2;
  reg              sectored_entries_0_6_valid_3;
  reg  [26:0]      sectored_entries_0_7_tag_vpn;
  reg              sectored_entries_0_7_tag_v;
  reg  [41:0]      sectored_entries_0_7_data_0;
  reg  [41:0]      sectored_entries_0_7_data_1;
  reg  [41:0]      sectored_entries_0_7_data_2;
  reg  [41:0]      sectored_entries_0_7_data_3;
  reg              sectored_entries_0_7_valid_0;
  reg              sectored_entries_0_7_valid_1;
  reg              sectored_entries_0_7_valid_2;
  reg              sectored_entries_0_7_valid_3;
  reg  [1:0]       superpage_entries_0_level;
  reg  [26:0]      superpage_entries_0_tag_vpn;
  reg              superpage_entries_0_tag_v;
  reg  [41:0]      superpage_entries_0_data_0;
  reg              superpage_entries_0_valid_0;
  reg  [1:0]       superpage_entries_1_level;
  reg  [26:0]      superpage_entries_1_tag_vpn;
  reg              superpage_entries_1_tag_v;
  reg  [41:0]      superpage_entries_1_data_0;
  reg              superpage_entries_1_valid_0;
  reg  [1:0]       superpage_entries_2_level;
  reg  [26:0]      superpage_entries_2_tag_vpn;
  reg              superpage_entries_2_tag_v;
  reg  [41:0]      superpage_entries_2_data_0;
  reg              superpage_entries_2_valid_0;
  reg  [1:0]       superpage_entries_3_level;
  reg  [26:0]      superpage_entries_3_tag_vpn;
  reg              superpage_entries_3_tag_v;
  reg  [41:0]      superpage_entries_3_data_0;
  reg              superpage_entries_3_valid_0;
  reg  [1:0]       special_entry_level;
  reg  [26:0]      special_entry_tag_vpn;
  reg              special_entry_tag_v;
  reg  [41:0]      special_entry_data_0;
  reg              special_entry_valid_0;
  reg  [1:0]       state;
  reg  [26:0]      r_refill_tag;
  reg  [1:0]       waddr;
  reg  [2:0]       r_sectored_repl_addr;
  reg              r_sectored_hit_valid;
  reg  [2:0]       r_sectored_hit_bits;
  reg              r_vstage1_en;
  reg              r_stage2_en;
  reg              r_need_gpa;
  wire             _GEN = io_ptw_ptbr_mode[3] & ~(io_req_bits_prv[1]);
  wire             _GEN_0 = state == 2'h1;
  wire             ignore_13 = special_entry_level == 2'h0;
  wire [8:0]       _GEN_1 = ignore_13 ? io_req_bits_vaddr[29:21] : 9'h0;
  wire [8:0]       _GEN_2 = special_entry_level[1] ? 9'h0 : io_req_bits_vaddr[20:12];
  wire [27:0]      mpu_ppn =
    io_ptw_resp_valid
      ? {8'h0, io_ptw_resp_bits_pte_ppn[19:0]}
      : _GEN
          ? {8'h0,
             _mpu_ppn_barrier_io_y_ppn[19:18],
             _GEN_1 | _mpu_ppn_barrier_io_y_ppn[17:9],
             _GEN_2 | _mpu_ppn_barrier_io_y_ppn[8:0]}
          : io_req_bits_vaddr[39:12];
  wire [2:0]       mpu_priv =
    io_ptw_resp_valid ? 3'h1 : {io_ptw_status_debug, io_req_bits_prv};
  wire             deny_access_to_debug = ~(mpu_priv[2]) & mpu_ppn == 28'h0;
  wire             newEntry_px = _pma_io_resp_x & ~deny_access_to_debug & _pmp_io_x;
  wire [24:0]      _GEN_3 = sectored_entries_0_0_tag_vpn[26:2] ^ io_req_bits_vaddr[38:14];
  wire             _GEN_4 = _GEN_3 == 25'h0 & ~sectored_entries_0_0_tag_v;
  wire [24:0]      _GEN_5 = sectored_entries_0_1_tag_vpn[26:2] ^ io_req_bits_vaddr[38:14];
  wire             _GEN_6 = _GEN_5 == 25'h0 & ~sectored_entries_0_1_tag_v;
  wire [24:0]      _GEN_7 = sectored_entries_0_2_tag_vpn[26:2] ^ io_req_bits_vaddr[38:14];
  wire             _GEN_8 = _GEN_7 == 25'h0 & ~sectored_entries_0_2_tag_v;
  wire [24:0]      _GEN_9 = sectored_entries_0_3_tag_vpn[26:2] ^ io_req_bits_vaddr[38:14];
  wire             _GEN_10 = _GEN_9 == 25'h0 & ~sectored_entries_0_3_tag_v;
  wire [24:0]      _GEN_11 =
    sectored_entries_0_4_tag_vpn[26:2] ^ io_req_bits_vaddr[38:14];
  wire             _GEN_12 = _GEN_11 == 25'h0 & ~sectored_entries_0_4_tag_v;
  wire [24:0]      _GEN_13 =
    sectored_entries_0_5_tag_vpn[26:2] ^ io_req_bits_vaddr[38:14];
  wire             _GEN_14 = _GEN_13 == 25'h0 & ~sectored_entries_0_5_tag_v;
  wire [24:0]      _GEN_15 =
    sectored_entries_0_6_tag_vpn[26:2] ^ io_req_bits_vaddr[38:14];
  wire             _GEN_16 = _GEN_15 == 25'h0 & ~sectored_entries_0_6_tag_v;
  wire [24:0]      _GEN_17 =
    sectored_entries_0_7_tag_vpn[26:2] ^ io_req_bits_vaddr[38:14];
  wire             _GEN_18 = _GEN_17 == 25'h0 & ~sectored_entries_0_7_tag_v;
  wire [17:0]      _GEN_19 = superpage_entries_0_tag_vpn[26:9] ^ io_req_bits_vaddr[38:21];
  wire             _GEN_20 = _GEN_19[17:9] == 9'h0;
  wire             ignore_1 = superpage_entries_0_level == 2'h0;
  wire             _GEN_21 = ignore_1 | _GEN_19[8:0] == 9'h0;
  wire [17:0]      _GEN_22 = superpage_entries_1_tag_vpn[26:9] ^ io_req_bits_vaddr[38:21];
  wire             _GEN_23 = _GEN_22[17:9] == 9'h0;
  wire             ignore_4 = superpage_entries_1_level == 2'h0;
  wire             _GEN_24 = ignore_4 | _GEN_22[8:0] == 9'h0;
  wire [17:0]      _GEN_25 = superpage_entries_2_tag_vpn[26:9] ^ io_req_bits_vaddr[38:21];
  wire             _GEN_26 = _GEN_25[17:9] == 9'h0;
  wire             ignore_7 = superpage_entries_2_level == 2'h0;
  wire             _GEN_27 = ignore_7 | _GEN_25[8:0] == 9'h0;
  wire [17:0]      _GEN_28 = superpage_entries_3_tag_vpn[26:9] ^ io_req_bits_vaddr[38:21];
  wire             _GEN_29 = _GEN_28[17:9] == 9'h0;
  wire             ignore_10 = superpage_entries_3_level == 2'h0;
  wire             _GEN_30 = ignore_10 | _GEN_28[8:0] == 9'h0;
  wire [3:0]       _GEN_31 =
    {{sectored_entries_0_0_valid_3},
     {sectored_entries_0_0_valid_2},
     {sectored_entries_0_0_valid_1},
     {sectored_entries_0_0_valid_0}};
  wire             hitsVec_0 = _GEN & _GEN_31[io_req_bits_vaddr[13:12]] & _GEN_4;
  wire [3:0]       _GEN_32 =
    {{sectored_entries_0_1_valid_3},
     {sectored_entries_0_1_valid_2},
     {sectored_entries_0_1_valid_1},
     {sectored_entries_0_1_valid_0}};
  wire             hitsVec_1 = _GEN & _GEN_32[io_req_bits_vaddr[13:12]] & _GEN_6;
  wire [3:0]       _GEN_33 =
    {{sectored_entries_0_2_valid_3},
     {sectored_entries_0_2_valid_2},
     {sectored_entries_0_2_valid_1},
     {sectored_entries_0_2_valid_0}};
  wire             hitsVec_2 = _GEN & _GEN_33[io_req_bits_vaddr[13:12]] & _GEN_8;
  wire [3:0]       _GEN_34 =
    {{sectored_entries_0_3_valid_3},
     {sectored_entries_0_3_valid_2},
     {sectored_entries_0_3_valid_1},
     {sectored_entries_0_3_valid_0}};
  wire             hitsVec_3 = _GEN & _GEN_34[io_req_bits_vaddr[13:12]] & _GEN_10;
  wire [3:0]       _GEN_35 =
    {{sectored_entries_0_4_valid_3},
     {sectored_entries_0_4_valid_2},
     {sectored_entries_0_4_valid_1},
     {sectored_entries_0_4_valid_0}};
  wire             hitsVec_4 = _GEN & _GEN_35[io_req_bits_vaddr[13:12]] & _GEN_12;
  wire [3:0]       _GEN_36 =
    {{sectored_entries_0_5_valid_3},
     {sectored_entries_0_5_valid_2},
     {sectored_entries_0_5_valid_1},
     {sectored_entries_0_5_valid_0}};
  wire             hitsVec_5 = _GEN & _GEN_36[io_req_bits_vaddr[13:12]] & _GEN_14;
  wire [3:0]       _GEN_37 =
    {{sectored_entries_0_6_valid_3},
     {sectored_entries_0_6_valid_2},
     {sectored_entries_0_6_valid_1},
     {sectored_entries_0_6_valid_0}};
  wire             hitsVec_6 = _GEN & _GEN_37[io_req_bits_vaddr[13:12]] & _GEN_16;
  wire [3:0]       _GEN_38 =
    {{sectored_entries_0_7_valid_3},
     {sectored_entries_0_7_valid_2},
     {sectored_entries_0_7_valid_1},
     {sectored_entries_0_7_valid_0}};
  wire             hitsVec_7 = _GEN & _GEN_38[io_req_bits_vaddr[13:12]] & _GEN_18;
  wire             hitsVec_8 =
    _GEN & superpage_entries_0_valid_0 & ~superpage_entries_0_tag_v & _GEN_20 & _GEN_21;
  wire             hitsVec_9 =
    _GEN & superpage_entries_1_valid_0 & ~superpage_entries_1_tag_v & _GEN_23 & _GEN_24;
  wire             hitsVec_10 =
    _GEN & superpage_entries_2_valid_0 & ~superpage_entries_2_tag_v & _GEN_26 & _GEN_27;
  wire             hitsVec_11 =
    _GEN & superpage_entries_3_valid_0 & ~superpage_entries_3_tag_v & _GEN_29 & _GEN_30;
  wire [26:0]      _GEN_39 = special_entry_tag_vpn ^ io_req_bits_vaddr[38:12];
  wire             _GEN_40 = _GEN_39[26:18] == 9'h0;
  wire             _GEN_41 = ignore_13 | _GEN_39[17:9] == 9'h0;
  wire             _GEN_42 = ~(special_entry_level[1]) | _GEN_39[8:0] == 9'h0;
  wire             hitsVec_12 =
    _GEN & special_entry_valid_0 & ~special_entry_tag_v & _GEN_40 & _GEN_41 & _GEN_42;
  wire [12:0]      real_hits =
    {hitsVec_12,
     hitsVec_11,
     hitsVec_10,
     hitsVec_9,
     hitsVec_8,
     hitsVec_7,
     hitsVec_6,
     hitsVec_5,
     hitsVec_4,
     hitsVec_3,
     hitsVec_2,
     hitsVec_1,
     hitsVec_0};
  wire [13:0]      hits =
    {~_GEN,
     hitsVec_12,
     hitsVec_11,
     hitsVec_10,
     hitsVec_9,
     hitsVec_8,
     hitsVec_7,
     hitsVec_6,
     hitsVec_5,
     hitsVec_4,
     hitsVec_3,
     hitsVec_2,
     hitsVec_1,
     hitsVec_0};
  wire [3:0][41:0] _GEN_43 =
    {{sectored_entries_0_0_data_3},
     {sectored_entries_0_0_data_2},
     {sectored_entries_0_0_data_1},
     {sectored_entries_0_0_data_0}};
  wire [41:0]      _GEN_44 = _GEN_43[io_req_bits_vaddr[13:12]];
  wire [3:0][41:0] _GEN_45 =
    {{sectored_entries_0_1_data_3},
     {sectored_entries_0_1_data_2},
     {sectored_entries_0_1_data_1},
     {sectored_entries_0_1_data_0}};
  wire [41:0]      _GEN_46 = _GEN_45[io_req_bits_vaddr[13:12]];
  wire [3:0][41:0] _GEN_47 =
    {{sectored_entries_0_2_data_3},
     {sectored_entries_0_2_data_2},
     {sectored_entries_0_2_data_1},
     {sectored_entries_0_2_data_0}};
  wire [41:0]      _GEN_48 = _GEN_47[io_req_bits_vaddr[13:12]];
  wire [3:0][41:0] _GEN_49 =
    {{sectored_entries_0_3_data_3},
     {sectored_entries_0_3_data_2},
     {sectored_entries_0_3_data_1},
     {sectored_entries_0_3_data_0}};
  wire [41:0]      _GEN_50 = _GEN_49[io_req_bits_vaddr[13:12]];
  wire [3:0][41:0] _GEN_51 =
    {{sectored_entries_0_4_data_3},
     {sectored_entries_0_4_data_2},
     {sectored_entries_0_4_data_1},
     {sectored_entries_0_4_data_0}};
  wire [41:0]      _GEN_52 = _GEN_51[io_req_bits_vaddr[13:12]];
  wire [3:0][41:0] _GEN_53 =
    {{sectored_entries_0_5_data_3},
     {sectored_entries_0_5_data_2},
     {sectored_entries_0_5_data_1},
     {sectored_entries_0_5_data_0}};
  wire [41:0]      _GEN_54 = _GEN_53[io_req_bits_vaddr[13:12]];
  wire [3:0][41:0] _GEN_55 =
    {{sectored_entries_0_6_data_3},
     {sectored_entries_0_6_data_2},
     {sectored_entries_0_6_data_1},
     {sectored_entries_0_6_data_0}};
  wire [41:0]      _GEN_56 = _GEN_55[io_req_bits_vaddr[13:12]];
  wire [3:0][41:0] _GEN_57 =
    {{sectored_entries_0_7_data_3},
     {sectored_entries_0_7_data_2},
     {sectored_entries_0_7_data_1},
     {sectored_entries_0_7_data_0}};
  wire [41:0]      _GEN_58 = _GEN_57[io_req_bits_vaddr[13:12]];
  wire             bad_va =
    _GEN & io_ptw_ptbr_mode[3]
    & ~(io_req_bits_vaddr[39:38] == 2'h0 | (&(io_req_bits_vaddr[39:38])));
  wire             tlb_miss = _GEN & ~bad_va & real_hits == 13'h0;
  reg  [6:0]       state_vec_0;
  reg  [2:0]       state_reg_1;
  wire             multipleHits_rightOne_1 = hitsVec_1 | hitsVec_2;
  wire             multipleHits_leftOne_2 = hitsVec_0 | multipleHits_rightOne_1;
  wire             multipleHits_rightOne_3 = hitsVec_4 | hitsVec_5;
  wire             multipleHits_rightOne_4 = hitsVec_3 | multipleHits_rightOne_3;
  wire             multipleHits_rightOne_6 = hitsVec_7 | hitsVec_8;
  wire             multipleHits_leftOne_8 = hitsVec_6 | multipleHits_rightOne_6;
  wire             multipleHits_leftOne_10 = hitsVec_9 | hitsVec_10;
  wire             multipleHits_rightOne_9 = hitsVec_11 | hitsVec_12;
  wire             multipleHits_rightOne_10 =
    multipleHits_leftOne_10 | multipleHits_rightOne_9;
  wire             multipleHits =
    hitsVec_1 & hitsVec_2 | hitsVec_0 & multipleHits_rightOne_1 | hitsVec_4 & hitsVec_5
    | hitsVec_3 & multipleHits_rightOne_3 | multipleHits_leftOne_2
    & multipleHits_rightOne_4 | hitsVec_7 & hitsVec_8 | hitsVec_6
    & multipleHits_rightOne_6 | hitsVec_9 & hitsVec_10 | hitsVec_11 & hitsVec_12
    | multipleHits_leftOne_10 & multipleHits_rightOne_9 | multipleHits_leftOne_8
    & multipleHits_rightOne_10 | (multipleHits_leftOne_2 | multipleHits_rightOne_4)
    & (multipleHits_leftOne_8 | multipleHits_rightOne_10);
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (io_sfence_valid & ~reset
          & ~(~io_sfence_bits_rs1
              | io_sfence_bits_addr[38:12] == io_req_bits_vaddr[38:12])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at TLB.scala:719 assert(!io.sfence.bits.rs1 || (io.sfence.bits.addr >> pgIdxBits) === vpn)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    automatic logic        invalidate_refill = _GEN_0 | (&state) | io_sfence_valid;
    automatic logic        _GEN_59;
    automatic logic        _GEN_60;
    automatic logic        sector_hits_1;
    automatic logic        _GEN_61;
    automatic logic        sector_hits_2;
    automatic logic        _GEN_62;
    automatic logic        sector_hits_3;
    automatic logic        _GEN_63;
    automatic logic        sector_hits_4;
    automatic logic        _GEN_64;
    automatic logic        sector_hits_5;
    automatic logic        _GEN_65;
    automatic logic        sector_hits_6;
    automatic logic        _GEN_66;
    automatic logic        sector_hits_7;
    automatic logic        refill_v;
    automatic logic        _GEN_67 =
      io_ptw_resp_bits_pte_v
      & (io_ptw_resp_bits_pte_r | io_ptw_resp_bits_pte_x & ~io_ptw_resp_bits_pte_w)
      & io_ptw_resp_bits_pte_a;
    automatic logic        _GEN_68 = io_ptw_resp_valid & ~io_ptw_resp_bits_homogeneous;
    automatic logic        _GEN_69 = _GEN_68 | special_entry_valid_0;
    automatic logic [41:0] _GEN_70;
    automatic logic        _GEN_71 =
      io_ptw_resp_valid & io_ptw_resp_bits_homogeneous & ~(io_ptw_resp_bits_level[1])
      & waddr == 2'h0;
    automatic logic [1:0]  _GEN_72;
    automatic logic        _GEN_73 =
      _GEN_71 ? ~invalidate_refill : superpage_entries_0_valid_0;
    automatic logic        _GEN_74 =
      io_ptw_resp_valid & io_ptw_resp_bits_homogeneous & ~(io_ptw_resp_bits_level[1])
      & waddr == 2'h1;
    automatic logic        _GEN_75 =
      _GEN_74 ? ~invalidate_refill : superpage_entries_1_valid_0;
    automatic logic        _GEN_76 =
      io_ptw_resp_valid & io_ptw_resp_bits_homogeneous & ~(io_ptw_resp_bits_level[1])
      & waddr == 2'h2;
    automatic logic        _GEN_77 =
      _GEN_76 ? ~invalidate_refill : superpage_entries_2_valid_0;
    automatic logic        _GEN_78 =
      io_ptw_resp_valid & io_ptw_resp_bits_homogeneous & ~(io_ptw_resp_bits_level[1])
      & (&waddr);
    automatic logic        _GEN_79 =
      _GEN_78 ? ~invalidate_refill : superpage_entries_3_valid_0;
    automatic logic [2:0]  waddr_1 =
      r_sectored_hit_valid ? r_sectored_hit_bits : r_sectored_repl_addr;
    automatic logic        _GEN_80 = waddr_1 == 3'h0;
    automatic logic        _GEN_81 =
      ~io_ptw_resp_bits_homogeneous | ~(io_ptw_resp_bits_level[1]);
    automatic logic        _GEN_82 = ~io_ptw_resp_valid | _GEN_81 | ~_GEN_80;
    automatic logic        _GEN_83 = r_refill_tag[1:0] == 2'h0;
    automatic logic        _GEN_84 = r_refill_tag[1:0] == 2'h1;
    automatic logic        _GEN_85 = r_refill_tag[1:0] == 2'h2;
    automatic logic        _GEN_86 =
      _GEN_82
        ? sectored_entries_0_0_valid_0
        : ~invalidate_refill
          & (_GEN_83 | r_sectored_hit_valid & sectored_entries_0_0_valid_0);
    automatic logic        _GEN_87 =
      _GEN_82
        ? sectored_entries_0_0_valid_1
        : ~invalidate_refill
          & (_GEN_84 | r_sectored_hit_valid & sectored_entries_0_0_valid_1);
    automatic logic        _GEN_88 =
      _GEN_82
        ? sectored_entries_0_0_valid_2
        : ~invalidate_refill
          & (_GEN_85 | r_sectored_hit_valid & sectored_entries_0_0_valid_2);
    automatic logic        _GEN_89 =
      _GEN_82
        ? sectored_entries_0_0_valid_3
        : ~invalidate_refill
          & ((&(r_refill_tag[1:0])) | r_sectored_hit_valid
             & sectored_entries_0_0_valid_3);
    automatic logic        _GEN_90 = waddr_1 == 3'h1;
    automatic logic        _GEN_91 = ~io_ptw_resp_valid | _GEN_81 | ~_GEN_90;
    automatic logic        _GEN_92 = r_refill_tag[1:0] == 2'h0;
    automatic logic        _GEN_93 = r_refill_tag[1:0] == 2'h1;
    automatic logic        _GEN_94 = r_refill_tag[1:0] == 2'h2;
    automatic logic        _GEN_95 =
      _GEN_91
        ? sectored_entries_0_1_valid_0
        : ~invalidate_refill
          & (_GEN_92 | r_sectored_hit_valid & sectored_entries_0_1_valid_0);
    automatic logic        _GEN_96 =
      _GEN_91
        ? sectored_entries_0_1_valid_1
        : ~invalidate_refill
          & (_GEN_93 | r_sectored_hit_valid & sectored_entries_0_1_valid_1);
    automatic logic        _GEN_97 =
      _GEN_91
        ? sectored_entries_0_1_valid_2
        : ~invalidate_refill
          & (_GEN_94 | r_sectored_hit_valid & sectored_entries_0_1_valid_2);
    automatic logic        _GEN_98 =
      _GEN_91
        ? sectored_entries_0_1_valid_3
        : ~invalidate_refill
          & ((&(r_refill_tag[1:0])) | r_sectored_hit_valid
             & sectored_entries_0_1_valid_3);
    automatic logic        _GEN_99 = waddr_1 == 3'h2;
    automatic logic        _GEN_100 = ~io_ptw_resp_valid | _GEN_81 | ~_GEN_99;
    automatic logic        _GEN_101 = r_refill_tag[1:0] == 2'h0;
    automatic logic        _GEN_102 = r_refill_tag[1:0] == 2'h1;
    automatic logic        _GEN_103 = r_refill_tag[1:0] == 2'h2;
    automatic logic        _GEN_104 =
      _GEN_100
        ? sectored_entries_0_2_valid_0
        : ~invalidate_refill
          & (_GEN_101 | r_sectored_hit_valid & sectored_entries_0_2_valid_0);
    automatic logic        _GEN_105 =
      _GEN_100
        ? sectored_entries_0_2_valid_1
        : ~invalidate_refill
          & (_GEN_102 | r_sectored_hit_valid & sectored_entries_0_2_valid_1);
    automatic logic        _GEN_106 =
      _GEN_100
        ? sectored_entries_0_2_valid_2
        : ~invalidate_refill
          & (_GEN_103 | r_sectored_hit_valid & sectored_entries_0_2_valid_2);
    automatic logic        _GEN_107 =
      _GEN_100
        ? sectored_entries_0_2_valid_3
        : ~invalidate_refill
          & ((&(r_refill_tag[1:0])) | r_sectored_hit_valid
             & sectored_entries_0_2_valid_3);
    automatic logic        _GEN_108 = waddr_1 == 3'h3;
    automatic logic        _GEN_109 = ~io_ptw_resp_valid | _GEN_81 | ~_GEN_108;
    automatic logic        _GEN_110 = r_refill_tag[1:0] == 2'h0;
    automatic logic        _GEN_111 = r_refill_tag[1:0] == 2'h1;
    automatic logic        _GEN_112 = r_refill_tag[1:0] == 2'h2;
    automatic logic        _GEN_113 =
      _GEN_109
        ? sectored_entries_0_3_valid_0
        : ~invalidate_refill
          & (_GEN_110 | r_sectored_hit_valid & sectored_entries_0_3_valid_0);
    automatic logic        _GEN_114 =
      _GEN_109
        ? sectored_entries_0_3_valid_1
        : ~invalidate_refill
          & (_GEN_111 | r_sectored_hit_valid & sectored_entries_0_3_valid_1);
    automatic logic        _GEN_115 =
      _GEN_109
        ? sectored_entries_0_3_valid_2
        : ~invalidate_refill
          & (_GEN_112 | r_sectored_hit_valid & sectored_entries_0_3_valid_2);
    automatic logic        _GEN_116 =
      _GEN_109
        ? sectored_entries_0_3_valid_3
        : ~invalidate_refill
          & ((&(r_refill_tag[1:0])) | r_sectored_hit_valid
             & sectored_entries_0_3_valid_3);
    automatic logic        _GEN_117 = waddr_1 == 3'h4;
    automatic logic        _GEN_118 = ~io_ptw_resp_valid | _GEN_81 | ~_GEN_117;
    automatic logic        _GEN_119 = r_refill_tag[1:0] == 2'h0;
    automatic logic        _GEN_120 = r_refill_tag[1:0] == 2'h1;
    automatic logic        _GEN_121 = r_refill_tag[1:0] == 2'h2;
    automatic logic        _GEN_122 =
      _GEN_118
        ? sectored_entries_0_4_valid_0
        : ~invalidate_refill
          & (_GEN_119 | r_sectored_hit_valid & sectored_entries_0_4_valid_0);
    automatic logic        _GEN_123 =
      _GEN_118
        ? sectored_entries_0_4_valid_1
        : ~invalidate_refill
          & (_GEN_120 | r_sectored_hit_valid & sectored_entries_0_4_valid_1);
    automatic logic        _GEN_124 =
      _GEN_118
        ? sectored_entries_0_4_valid_2
        : ~invalidate_refill
          & (_GEN_121 | r_sectored_hit_valid & sectored_entries_0_4_valid_2);
    automatic logic        _GEN_125 =
      _GEN_118
        ? sectored_entries_0_4_valid_3
        : ~invalidate_refill
          & ((&(r_refill_tag[1:0])) | r_sectored_hit_valid
             & sectored_entries_0_4_valid_3);
    automatic logic        _GEN_126 = waddr_1 == 3'h5;
    automatic logic        _GEN_127 = ~io_ptw_resp_valid | _GEN_81 | ~_GEN_126;
    automatic logic        _GEN_128 = r_refill_tag[1:0] == 2'h0;
    automatic logic        _GEN_129 = r_refill_tag[1:0] == 2'h1;
    automatic logic        _GEN_130 = r_refill_tag[1:0] == 2'h2;
    automatic logic        _GEN_131 =
      _GEN_127
        ? sectored_entries_0_5_valid_0
        : ~invalidate_refill
          & (_GEN_128 | r_sectored_hit_valid & sectored_entries_0_5_valid_0);
    automatic logic        _GEN_132 =
      _GEN_127
        ? sectored_entries_0_5_valid_1
        : ~invalidate_refill
          & (_GEN_129 | r_sectored_hit_valid & sectored_entries_0_5_valid_1);
    automatic logic        _GEN_133 =
      _GEN_127
        ? sectored_entries_0_5_valid_2
        : ~invalidate_refill
          & (_GEN_130 | r_sectored_hit_valid & sectored_entries_0_5_valid_2);
    automatic logic        _GEN_134 =
      _GEN_127
        ? sectored_entries_0_5_valid_3
        : ~invalidate_refill
          & ((&(r_refill_tag[1:0])) | r_sectored_hit_valid
             & sectored_entries_0_5_valid_3);
    automatic logic        _GEN_135 = waddr_1 == 3'h6;
    automatic logic        _GEN_136 = ~io_ptw_resp_valid | _GEN_81 | ~_GEN_135;
    automatic logic        _GEN_137 = r_refill_tag[1:0] == 2'h0;
    automatic logic        _GEN_138 = r_refill_tag[1:0] == 2'h1;
    automatic logic        _GEN_139 = r_refill_tag[1:0] == 2'h2;
    automatic logic        _GEN_140 =
      _GEN_136
        ? sectored_entries_0_6_valid_0
        : ~invalidate_refill
          & (_GEN_137 | r_sectored_hit_valid & sectored_entries_0_6_valid_0);
    automatic logic        _GEN_141 =
      _GEN_136
        ? sectored_entries_0_6_valid_1
        : ~invalidate_refill
          & (_GEN_138 | r_sectored_hit_valid & sectored_entries_0_6_valid_1);
    automatic logic        _GEN_142 =
      _GEN_136
        ? sectored_entries_0_6_valid_2
        : ~invalidate_refill
          & (_GEN_139 | r_sectored_hit_valid & sectored_entries_0_6_valid_2);
    automatic logic        _GEN_143 =
      _GEN_136
        ? sectored_entries_0_6_valid_3
        : ~invalidate_refill
          & ((&(r_refill_tag[1:0])) | r_sectored_hit_valid
             & sectored_entries_0_6_valid_3);
    automatic logic        _GEN_144 = ~io_ptw_resp_valid | _GEN_81 | ~(&waddr_1);
    automatic logic        _GEN_145 = r_refill_tag[1:0] == 2'h0;
    automatic logic        _GEN_146 = r_refill_tag[1:0] == 2'h1;
    automatic logic        _GEN_147 = r_refill_tag[1:0] == 2'h2;
    automatic logic        _GEN_148 =
      _GEN_144
        ? sectored_entries_0_7_valid_0
        : ~invalidate_refill
          & (_GEN_145 | r_sectored_hit_valid & sectored_entries_0_7_valid_0);
    automatic logic        _GEN_149 =
      _GEN_144
        ? sectored_entries_0_7_valid_1
        : ~invalidate_refill
          & (_GEN_146 | r_sectored_hit_valid & sectored_entries_0_7_valid_1);
    automatic logic        _GEN_150 =
      _GEN_144
        ? sectored_entries_0_7_valid_2
        : ~invalidate_refill
          & (_GEN_147 | r_sectored_hit_valid & sectored_entries_0_7_valid_2);
    automatic logic        _GEN_151 =
      _GEN_144
        ? sectored_entries_0_7_valid_3
        : ~invalidate_refill
          & ((&(r_refill_tag[1:0])) | r_sectored_hit_valid
             & sectored_entries_0_7_valid_3);
    automatic logic        _GEN_152;
    automatic logic [2:0]  _GEN_153;
    automatic logic        _GEN_154;
    automatic logic        _GEN_155;
    automatic logic        _GEN_156 = io_req_bits_vaddr[13:12] == 2'h0;
    automatic logic        _GEN_157 = _GEN_4 & ~sectored_entries_0_0_tag_v & _GEN_156;
    automatic logic        _GEN_158 = io_req_bits_vaddr[13:12] == 2'h1;
    automatic logic        _GEN_159 = _GEN_4 & ~sectored_entries_0_0_tag_v & _GEN_158;
    automatic logic        _GEN_160 = io_req_bits_vaddr[13:12] == 2'h2;
    automatic logic        _GEN_161 = _GEN_4 & ~sectored_entries_0_0_tag_v & _GEN_160;
    automatic logic        _GEN_162 =
      _GEN_4 & ~sectored_entries_0_0_tag_v & (&(io_req_bits_vaddr[13:12]));
    automatic logic        _GEN_163 = _GEN_3[24:16] == 9'h0;
    automatic logic        _GEN_164 = _GEN_6 & ~sectored_entries_0_1_tag_v & _GEN_156;
    automatic logic        _GEN_165 = _GEN_6 & ~sectored_entries_0_1_tag_v & _GEN_158;
    automatic logic        _GEN_166 = _GEN_6 & ~sectored_entries_0_1_tag_v & _GEN_160;
    automatic logic        _GEN_167 =
      _GEN_6 & ~sectored_entries_0_1_tag_v & (&(io_req_bits_vaddr[13:12]));
    automatic logic        _GEN_168 = _GEN_5[24:16] == 9'h0;
    automatic logic        _GEN_169 = _GEN_8 & ~sectored_entries_0_2_tag_v & _GEN_156;
    automatic logic        _GEN_170 = _GEN_8 & ~sectored_entries_0_2_tag_v & _GEN_158;
    automatic logic        _GEN_171 = _GEN_8 & ~sectored_entries_0_2_tag_v & _GEN_160;
    automatic logic        _GEN_172 =
      _GEN_8 & ~sectored_entries_0_2_tag_v & (&(io_req_bits_vaddr[13:12]));
    automatic logic        _GEN_173 = _GEN_7[24:16] == 9'h0;
    automatic logic        _GEN_174 = _GEN_10 & ~sectored_entries_0_3_tag_v & _GEN_156;
    automatic logic        _GEN_175 = _GEN_10 & ~sectored_entries_0_3_tag_v & _GEN_158;
    automatic logic        _GEN_176 = _GEN_10 & ~sectored_entries_0_3_tag_v & _GEN_160;
    automatic logic        _GEN_177 =
      _GEN_10 & ~sectored_entries_0_3_tag_v & (&(io_req_bits_vaddr[13:12]));
    automatic logic        _GEN_178 = _GEN_9[24:16] == 9'h0;
    automatic logic        _GEN_179 = _GEN_12 & ~sectored_entries_0_4_tag_v & _GEN_156;
    automatic logic        _GEN_180 = _GEN_12 & ~sectored_entries_0_4_tag_v & _GEN_158;
    automatic logic        _GEN_181 = _GEN_12 & ~sectored_entries_0_4_tag_v & _GEN_160;
    automatic logic        _GEN_182 =
      _GEN_12 & ~sectored_entries_0_4_tag_v & (&(io_req_bits_vaddr[13:12]));
    automatic logic        _GEN_183 = _GEN_11[24:16] == 9'h0;
    automatic logic        _GEN_184 = _GEN_14 & ~sectored_entries_0_5_tag_v & _GEN_156;
    automatic logic        _GEN_185 = _GEN_14 & ~sectored_entries_0_5_tag_v & _GEN_158;
    automatic logic        _GEN_186 = _GEN_14 & ~sectored_entries_0_5_tag_v & _GEN_160;
    automatic logic        _GEN_187 =
      _GEN_14 & ~sectored_entries_0_5_tag_v & (&(io_req_bits_vaddr[13:12]));
    automatic logic        _GEN_188 = _GEN_13[24:16] == 9'h0;
    automatic logic        _GEN_189 = _GEN_16 & ~sectored_entries_0_6_tag_v & _GEN_156;
    automatic logic        _GEN_190 = _GEN_16 & ~sectored_entries_0_6_tag_v & _GEN_158;
    automatic logic        _GEN_191 = _GEN_16 & ~sectored_entries_0_6_tag_v & _GEN_160;
    automatic logic        _GEN_192 =
      _GEN_16 & ~sectored_entries_0_6_tag_v & (&(io_req_bits_vaddr[13:12]));
    automatic logic        _GEN_193 = _GEN_15[24:16] == 9'h0;
    automatic logic        _GEN_194 = _GEN_18 & ~sectored_entries_0_7_tag_v & _GEN_156;
    automatic logic        _GEN_195 = _GEN_18 & ~sectored_entries_0_7_tag_v & _GEN_158;
    automatic logic        _GEN_196 = _GEN_18 & ~sectored_entries_0_7_tag_v & _GEN_160;
    automatic logic        _GEN_197 =
      _GEN_18 & ~sectored_entries_0_7_tag_v & (&(io_req_bits_vaddr[13:12]));
    automatic logic        _GEN_198 = _GEN_17[24:16] == 9'h0;
    automatic logic        _GEN_199 =
      superpage_entries_0_valid_0 & ~superpage_entries_0_tag_v & _GEN_20 & _GEN_21;
    automatic logic        _GEN_200 =
      superpage_entries_1_valid_0 & ~superpage_entries_1_tag_v & _GEN_23 & _GEN_24;
    automatic logic        _GEN_201 =
      superpage_entries_2_valid_0 & ~superpage_entries_2_tag_v & _GEN_26 & _GEN_27;
    automatic logic        _GEN_202 =
      superpage_entries_3_valid_0 & ~superpage_entries_3_tag_v & _GEN_29 & _GEN_30;
    automatic logic        _GEN_203 =
      special_entry_valid_0 & ~special_entry_tag_v & _GEN_40 & _GEN_41 & _GEN_42;
    automatic logic        _GEN_204 = multipleHits | reset;
    _GEN_59 =
      sectored_entries_0_0_valid_0 | sectored_entries_0_0_valid_1
      | sectored_entries_0_0_valid_2 | sectored_entries_0_0_valid_3;
    _GEN_60 =
      sectored_entries_0_1_valid_0 | sectored_entries_0_1_valid_1
      | sectored_entries_0_1_valid_2 | sectored_entries_0_1_valid_3;
    sector_hits_1 = _GEN_60 & _GEN_6;
    _GEN_61 =
      sectored_entries_0_2_valid_0 | sectored_entries_0_2_valid_1
      | sectored_entries_0_2_valid_2 | sectored_entries_0_2_valid_3;
    sector_hits_2 = _GEN_61 & _GEN_8;
    _GEN_62 =
      sectored_entries_0_3_valid_0 | sectored_entries_0_3_valid_1
      | sectored_entries_0_3_valid_2 | sectored_entries_0_3_valid_3;
    sector_hits_3 = _GEN_62 & _GEN_10;
    _GEN_63 =
      sectored_entries_0_4_valid_0 | sectored_entries_0_4_valid_1
      | sectored_entries_0_4_valid_2 | sectored_entries_0_4_valid_3;
    sector_hits_4 = _GEN_63 & _GEN_12;
    _GEN_64 =
      sectored_entries_0_5_valid_0 | sectored_entries_0_5_valid_1
      | sectored_entries_0_5_valid_2 | sectored_entries_0_5_valid_3;
    sector_hits_5 = _GEN_64 & _GEN_14;
    _GEN_65 =
      sectored_entries_0_6_valid_0 | sectored_entries_0_6_valid_1
      | sectored_entries_0_6_valid_2 | sectored_entries_0_6_valid_3;
    sector_hits_6 = _GEN_65 & _GEN_16;
    _GEN_66 =
      sectored_entries_0_7_valid_0 | sectored_entries_0_7_valid_1
      | sectored_entries_0_7_valid_2 | sectored_entries_0_7_valid_3;
    sector_hits_7 = _GEN_66 & _GEN_18;
    refill_v = r_vstage1_en | r_stage2_en;
    _GEN_70 =
      {io_ptw_resp_bits_pte_ppn[19:0],
       io_ptw_resp_bits_pte_u,
       io_ptw_resp_bits_pte_g & io_ptw_resp_bits_pte_v,
       io_ptw_resp_bits_ae_ptw,
       io_ptw_resp_bits_ae_final,
       io_ptw_resp_bits_ae_final & io_ptw_resp_bits_gpa_is_pte & r_stage2_en,
       io_ptw_resp_bits_pf,
       io_ptw_resp_bits_gf,
       _GEN_67 & io_ptw_resp_bits_pte_w & io_ptw_resp_bits_pte_d,
       _GEN_67 & io_ptw_resp_bits_pte_x,
       _GEN_67 & io_ptw_resp_bits_pte_r,
       io_ptw_resp_bits_hw,
       io_ptw_resp_bits_hx,
       io_ptw_resp_bits_hr,
       _pma_io_resp_w & ~deny_access_to_debug & _pmp_io_w,
       newEntry_px,
       _pma_io_resp_r & ~deny_access_to_debug & _pmp_io_r,
       _pma_io_resp_pp,
       _pma_io_resp_al,
       _pma_io_resp_aa,
       _pma_io_resp_eff,
       _pma_io_resp_cacheable,
       1'h0};
    _GEN_72 = {1'h0, io_ptw_resp_bits_level[0]};
    _GEN_152 =
      _GEN_59 & _GEN_4 | sector_hits_1 | sector_hits_2 | sector_hits_3 | sector_hits_4
      | sector_hits_5 | sector_hits_6 | sector_hits_7;
    _GEN_153 =
      {sector_hits_7, sector_hits_6, sector_hits_5}
      | {sector_hits_3, sector_hits_2, sector_hits_1};
    _GEN_154 = _GEN_153[2] | _GEN_153[0];
    _GEN_155 = state == 2'h0 & io_req_valid & tlb_miss;
    if (_GEN_82) begin
    end
    else begin
      sectored_entries_0_0_tag_vpn <= r_refill_tag;
      sectored_entries_0_0_tag_v <= refill_v;
    end
    if (~io_ptw_resp_valid | _GEN_81 | ~(_GEN_80 & _GEN_83)) begin
    end
    else
      sectored_entries_0_0_data_0 <= _GEN_70;
    if (~io_ptw_resp_valid | _GEN_81 | ~(_GEN_80 & _GEN_84)) begin
    end
    else
      sectored_entries_0_0_data_1 <= _GEN_70;
    if (~io_ptw_resp_valid | _GEN_81 | ~(_GEN_80 & _GEN_85)) begin
    end
    else
      sectored_entries_0_0_data_2 <= _GEN_70;
    if (~io_ptw_resp_valid | _GEN_81 | ~(_GEN_80 & (&(r_refill_tag[1:0])))) begin
    end
    else
      sectored_entries_0_0_data_3 <= _GEN_70;
    sectored_entries_0_0_valid_0 <=
      ~_GEN_204
      & (io_sfence_valid
           ? (io_sfence_bits_rs1
                ? (_GEN_163
                     ? ~(~sectored_entries_0_0_tag_v & sectored_entries_0_0_data_0[0]
                         | _GEN_157) & _GEN_86
                     : ~_GEN_157 & _GEN_86)
                : io_sfence_bits_rs2
                    ? ~(~sectored_entries_0_0_tag_v & ~(sectored_entries_0_0_data_0[20]))
                      & _GEN_86
                    : sectored_entries_0_0_tag_v & _GEN_86)
           : _GEN_86);
    sectored_entries_0_0_valid_1 <=
      ~_GEN_204
      & (io_sfence_valid
           ? (io_sfence_bits_rs1
                ? (_GEN_163
                     ? ~(~sectored_entries_0_0_tag_v & sectored_entries_0_0_data_1[0]
                         | _GEN_159) & _GEN_87
                     : ~_GEN_159 & _GEN_87)
                : io_sfence_bits_rs2
                    ? ~(~sectored_entries_0_0_tag_v & ~(sectored_entries_0_0_data_1[20]))
                      & _GEN_87
                    : sectored_entries_0_0_tag_v & _GEN_87)
           : _GEN_87);
    sectored_entries_0_0_valid_2 <=
      ~_GEN_204
      & (io_sfence_valid
           ? (io_sfence_bits_rs1
                ? (_GEN_163
                     ? ~(~sectored_entries_0_0_tag_v & sectored_entries_0_0_data_2[0]
                         | _GEN_161) & _GEN_88
                     : ~_GEN_161 & _GEN_88)
                : io_sfence_bits_rs2
                    ? ~(~sectored_entries_0_0_tag_v & ~(sectored_entries_0_0_data_2[20]))
                      & _GEN_88
                    : sectored_entries_0_0_tag_v & _GEN_88)
           : _GEN_88);
    sectored_entries_0_0_valid_3 <=
      ~_GEN_204
      & (io_sfence_valid
           ? (io_sfence_bits_rs1
                ? (_GEN_163
                     ? ~(~sectored_entries_0_0_tag_v & sectored_entries_0_0_data_3[0]
                         | _GEN_162) & _GEN_89
                     : ~_GEN_162 & _GEN_89)
                : io_sfence_bits_rs2
                    ? ~(~sectored_entries_0_0_tag_v & ~(sectored_entries_0_0_data_3[20]))
                      & _GEN_89
                    : sectored_entries_0_0_tag_v & _GEN_89)
           : _GEN_89);
    if (_GEN_91) begin
    end
    else begin
      sectored_entries_0_1_tag_vpn <= r_refill_tag;
      sectored_entries_0_1_tag_v <= refill_v;
    end
    if (~io_ptw_resp_valid | _GEN_81 | ~(_GEN_90 & _GEN_92)) begin
    end
    else
      sectored_entries_0_1_data_0 <= _GEN_70;
    if (~io_ptw_resp_valid | _GEN_81 | ~(_GEN_90 & _GEN_93)) begin
    end
    else
      sectored_entries_0_1_data_1 <= _GEN_70;
    if (~io_ptw_resp_valid | _GEN_81 | ~(_GEN_90 & _GEN_94)) begin
    end
    else
      sectored_entries_0_1_data_2 <= _GEN_70;
    if (~io_ptw_resp_valid | _GEN_81 | ~(_GEN_90 & (&(r_refill_tag[1:0])))) begin
    end
    else
      sectored_entries_0_1_data_3 <= _GEN_70;
    sectored_entries_0_1_valid_0 <=
      ~_GEN_204
      & (io_sfence_valid
           ? (io_sfence_bits_rs1
                ? (_GEN_168
                     ? ~(~sectored_entries_0_1_tag_v & sectored_entries_0_1_data_0[0]
                         | _GEN_164) & _GEN_95
                     : ~_GEN_164 & _GEN_95)
                : io_sfence_bits_rs2
                    ? ~(~sectored_entries_0_1_tag_v & ~(sectored_entries_0_1_data_0[20]))
                      & _GEN_95
                    : sectored_entries_0_1_tag_v & _GEN_95)
           : _GEN_95);
    sectored_entries_0_1_valid_1 <=
      ~_GEN_204
      & (io_sfence_valid
           ? (io_sfence_bits_rs1
                ? (_GEN_168
                     ? ~(~sectored_entries_0_1_tag_v & sectored_entries_0_1_data_1[0]
                         | _GEN_165) & _GEN_96
                     : ~_GEN_165 & _GEN_96)
                : io_sfence_bits_rs2
                    ? ~(~sectored_entries_0_1_tag_v & ~(sectored_entries_0_1_data_1[20]))
                      & _GEN_96
                    : sectored_entries_0_1_tag_v & _GEN_96)
           : _GEN_96);
    sectored_entries_0_1_valid_2 <=
      ~_GEN_204
      & (io_sfence_valid
           ? (io_sfence_bits_rs1
                ? (_GEN_168
                     ? ~(~sectored_entries_0_1_tag_v & sectored_entries_0_1_data_2[0]
                         | _GEN_166) & _GEN_97
                     : ~_GEN_166 & _GEN_97)
                : io_sfence_bits_rs2
                    ? ~(~sectored_entries_0_1_tag_v & ~(sectored_entries_0_1_data_2[20]))
                      & _GEN_97
                    : sectored_entries_0_1_tag_v & _GEN_97)
           : _GEN_97);
    sectored_entries_0_1_valid_3 <=
      ~_GEN_204
      & (io_sfence_valid
           ? (io_sfence_bits_rs1
                ? (_GEN_168
                     ? ~(~sectored_entries_0_1_tag_v & sectored_entries_0_1_data_3[0]
                         | _GEN_167) & _GEN_98
                     : ~_GEN_167 & _GEN_98)
                : io_sfence_bits_rs2
                    ? ~(~sectored_entries_0_1_tag_v & ~(sectored_entries_0_1_data_3[20]))
                      & _GEN_98
                    : sectored_entries_0_1_tag_v & _GEN_98)
           : _GEN_98);
    if (_GEN_100) begin
    end
    else begin
      sectored_entries_0_2_tag_vpn <= r_refill_tag;
      sectored_entries_0_2_tag_v <= refill_v;
    end
    if (~io_ptw_resp_valid | _GEN_81 | ~(_GEN_99 & _GEN_101)) begin
    end
    else
      sectored_entries_0_2_data_0 <= _GEN_70;
    if (~io_ptw_resp_valid | _GEN_81 | ~(_GEN_99 & _GEN_102)) begin
    end
    else
      sectored_entries_0_2_data_1 <= _GEN_70;
    if (~io_ptw_resp_valid | _GEN_81 | ~(_GEN_99 & _GEN_103)) begin
    end
    else
      sectored_entries_0_2_data_2 <= _GEN_70;
    if (~io_ptw_resp_valid | _GEN_81 | ~(_GEN_99 & (&(r_refill_tag[1:0])))) begin
    end
    else
      sectored_entries_0_2_data_3 <= _GEN_70;
    sectored_entries_0_2_valid_0 <=
      ~_GEN_204
      & (io_sfence_valid
           ? (io_sfence_bits_rs1
                ? (_GEN_173
                     ? ~(~sectored_entries_0_2_tag_v & sectored_entries_0_2_data_0[0]
                         | _GEN_169) & _GEN_104
                     : ~_GEN_169 & _GEN_104)
                : io_sfence_bits_rs2
                    ? ~(~sectored_entries_0_2_tag_v & ~(sectored_entries_0_2_data_0[20]))
                      & _GEN_104
                    : sectored_entries_0_2_tag_v & _GEN_104)
           : _GEN_104);
    sectored_entries_0_2_valid_1 <=
      ~_GEN_204
      & (io_sfence_valid
           ? (io_sfence_bits_rs1
                ? (_GEN_173
                     ? ~(~sectored_entries_0_2_tag_v & sectored_entries_0_2_data_1[0]
                         | _GEN_170) & _GEN_105
                     : ~_GEN_170 & _GEN_105)
                : io_sfence_bits_rs2
                    ? ~(~sectored_entries_0_2_tag_v & ~(sectored_entries_0_2_data_1[20]))
                      & _GEN_105
                    : sectored_entries_0_2_tag_v & _GEN_105)
           : _GEN_105);
    sectored_entries_0_2_valid_2 <=
      ~_GEN_204
      & (io_sfence_valid
           ? (io_sfence_bits_rs1
                ? (_GEN_173
                     ? ~(~sectored_entries_0_2_tag_v & sectored_entries_0_2_data_2[0]
                         | _GEN_171) & _GEN_106
                     : ~_GEN_171 & _GEN_106)
                : io_sfence_bits_rs2
                    ? ~(~sectored_entries_0_2_tag_v & ~(sectored_entries_0_2_data_2[20]))
                      & _GEN_106
                    : sectored_entries_0_2_tag_v & _GEN_106)
           : _GEN_106);
    sectored_entries_0_2_valid_3 <=
      ~_GEN_204
      & (io_sfence_valid
           ? (io_sfence_bits_rs1
                ? (_GEN_173
                     ? ~(~sectored_entries_0_2_tag_v & sectored_entries_0_2_data_3[0]
                         | _GEN_172) & _GEN_107
                     : ~_GEN_172 & _GEN_107)
                : io_sfence_bits_rs2
                    ? ~(~sectored_entries_0_2_tag_v & ~(sectored_entries_0_2_data_3[20]))
                      & _GEN_107
                    : sectored_entries_0_2_tag_v & _GEN_107)
           : _GEN_107);
    if (_GEN_109) begin
    end
    else begin
      sectored_entries_0_3_tag_vpn <= r_refill_tag;
      sectored_entries_0_3_tag_v <= refill_v;
    end
    if (~io_ptw_resp_valid | _GEN_81 | ~(_GEN_108 & _GEN_110)) begin
    end
    else
      sectored_entries_0_3_data_0 <= _GEN_70;
    if (~io_ptw_resp_valid | _GEN_81 | ~(_GEN_108 & _GEN_111)) begin
    end
    else
      sectored_entries_0_3_data_1 <= _GEN_70;
    if (~io_ptw_resp_valid | _GEN_81 | ~(_GEN_108 & _GEN_112)) begin
    end
    else
      sectored_entries_0_3_data_2 <= _GEN_70;
    if (~io_ptw_resp_valid | _GEN_81 | ~(_GEN_108 & (&(r_refill_tag[1:0])))) begin
    end
    else
      sectored_entries_0_3_data_3 <= _GEN_70;
    sectored_entries_0_3_valid_0 <=
      ~_GEN_204
      & (io_sfence_valid
           ? (io_sfence_bits_rs1
                ? (_GEN_178
                     ? ~(~sectored_entries_0_3_tag_v & sectored_entries_0_3_data_0[0]
                         | _GEN_174) & _GEN_113
                     : ~_GEN_174 & _GEN_113)
                : io_sfence_bits_rs2
                    ? ~(~sectored_entries_0_3_tag_v & ~(sectored_entries_0_3_data_0[20]))
                      & _GEN_113
                    : sectored_entries_0_3_tag_v & _GEN_113)
           : _GEN_113);
    sectored_entries_0_3_valid_1 <=
      ~_GEN_204
      & (io_sfence_valid
           ? (io_sfence_bits_rs1
                ? (_GEN_178
                     ? ~(~sectored_entries_0_3_tag_v & sectored_entries_0_3_data_1[0]
                         | _GEN_175) & _GEN_114
                     : ~_GEN_175 & _GEN_114)
                : io_sfence_bits_rs2
                    ? ~(~sectored_entries_0_3_tag_v & ~(sectored_entries_0_3_data_1[20]))
                      & _GEN_114
                    : sectored_entries_0_3_tag_v & _GEN_114)
           : _GEN_114);
    sectored_entries_0_3_valid_2 <=
      ~_GEN_204
      & (io_sfence_valid
           ? (io_sfence_bits_rs1
                ? (_GEN_178
                     ? ~(~sectored_entries_0_3_tag_v & sectored_entries_0_3_data_2[0]
                         | _GEN_176) & _GEN_115
                     : ~_GEN_176 & _GEN_115)
                : io_sfence_bits_rs2
                    ? ~(~sectored_entries_0_3_tag_v & ~(sectored_entries_0_3_data_2[20]))
                      & _GEN_115
                    : sectored_entries_0_3_tag_v & _GEN_115)
           : _GEN_115);
    sectored_entries_0_3_valid_3 <=
      ~_GEN_204
      & (io_sfence_valid
           ? (io_sfence_bits_rs1
                ? (_GEN_178
                     ? ~(~sectored_entries_0_3_tag_v & sectored_entries_0_3_data_3[0]
                         | _GEN_177) & _GEN_116
                     : ~_GEN_177 & _GEN_116)
                : io_sfence_bits_rs2
                    ? ~(~sectored_entries_0_3_tag_v & ~(sectored_entries_0_3_data_3[20]))
                      & _GEN_116
                    : sectored_entries_0_3_tag_v & _GEN_116)
           : _GEN_116);
    if (_GEN_118) begin
    end
    else begin
      sectored_entries_0_4_tag_vpn <= r_refill_tag;
      sectored_entries_0_4_tag_v <= refill_v;
    end
    if (~io_ptw_resp_valid | _GEN_81 | ~(_GEN_117 & _GEN_119)) begin
    end
    else
      sectored_entries_0_4_data_0 <= _GEN_70;
    if (~io_ptw_resp_valid | _GEN_81 | ~(_GEN_117 & _GEN_120)) begin
    end
    else
      sectored_entries_0_4_data_1 <= _GEN_70;
    if (~io_ptw_resp_valid | _GEN_81 | ~(_GEN_117 & _GEN_121)) begin
    end
    else
      sectored_entries_0_4_data_2 <= _GEN_70;
    if (~io_ptw_resp_valid | _GEN_81 | ~(_GEN_117 & (&(r_refill_tag[1:0])))) begin
    end
    else
      sectored_entries_0_4_data_3 <= _GEN_70;
    sectored_entries_0_4_valid_0 <=
      ~_GEN_204
      & (io_sfence_valid
           ? (io_sfence_bits_rs1
                ? (_GEN_183
                     ? ~(~sectored_entries_0_4_tag_v & sectored_entries_0_4_data_0[0]
                         | _GEN_179) & _GEN_122
                     : ~_GEN_179 & _GEN_122)
                : io_sfence_bits_rs2
                    ? ~(~sectored_entries_0_4_tag_v & ~(sectored_entries_0_4_data_0[20]))
                      & _GEN_122
                    : sectored_entries_0_4_tag_v & _GEN_122)
           : _GEN_122);
    sectored_entries_0_4_valid_1 <=
      ~_GEN_204
      & (io_sfence_valid
           ? (io_sfence_bits_rs1
                ? (_GEN_183
                     ? ~(~sectored_entries_0_4_tag_v & sectored_entries_0_4_data_1[0]
                         | _GEN_180) & _GEN_123
                     : ~_GEN_180 & _GEN_123)
                : io_sfence_bits_rs2
                    ? ~(~sectored_entries_0_4_tag_v & ~(sectored_entries_0_4_data_1[20]))
                      & _GEN_123
                    : sectored_entries_0_4_tag_v & _GEN_123)
           : _GEN_123);
    sectored_entries_0_4_valid_2 <=
      ~_GEN_204
      & (io_sfence_valid
           ? (io_sfence_bits_rs1
                ? (_GEN_183
                     ? ~(~sectored_entries_0_4_tag_v & sectored_entries_0_4_data_2[0]
                         | _GEN_181) & _GEN_124
                     : ~_GEN_181 & _GEN_124)
                : io_sfence_bits_rs2
                    ? ~(~sectored_entries_0_4_tag_v & ~(sectored_entries_0_4_data_2[20]))
                      & _GEN_124
                    : sectored_entries_0_4_tag_v & _GEN_124)
           : _GEN_124);
    sectored_entries_0_4_valid_3 <=
      ~_GEN_204
      & (io_sfence_valid
           ? (io_sfence_bits_rs1
                ? (_GEN_183
                     ? ~(~sectored_entries_0_4_tag_v & sectored_entries_0_4_data_3[0]
                         | _GEN_182) & _GEN_125
                     : ~_GEN_182 & _GEN_125)
                : io_sfence_bits_rs2
                    ? ~(~sectored_entries_0_4_tag_v & ~(sectored_entries_0_4_data_3[20]))
                      & _GEN_125
                    : sectored_entries_0_4_tag_v & _GEN_125)
           : _GEN_125);
    if (_GEN_127) begin
    end
    else begin
      sectored_entries_0_5_tag_vpn <= r_refill_tag;
      sectored_entries_0_5_tag_v <= refill_v;
    end
    if (~io_ptw_resp_valid | _GEN_81 | ~(_GEN_126 & _GEN_128)) begin
    end
    else
      sectored_entries_0_5_data_0 <= _GEN_70;
    if (~io_ptw_resp_valid | _GEN_81 | ~(_GEN_126 & _GEN_129)) begin
    end
    else
      sectored_entries_0_5_data_1 <= _GEN_70;
    if (~io_ptw_resp_valid | _GEN_81 | ~(_GEN_126 & _GEN_130)) begin
    end
    else
      sectored_entries_0_5_data_2 <= _GEN_70;
    if (~io_ptw_resp_valid | _GEN_81 | ~(_GEN_126 & (&(r_refill_tag[1:0])))) begin
    end
    else
      sectored_entries_0_5_data_3 <= _GEN_70;
    sectored_entries_0_5_valid_0 <=
      ~_GEN_204
      & (io_sfence_valid
           ? (io_sfence_bits_rs1
                ? (_GEN_188
                     ? ~(~sectored_entries_0_5_tag_v & sectored_entries_0_5_data_0[0]
                         | _GEN_184) & _GEN_131
                     : ~_GEN_184 & _GEN_131)
                : io_sfence_bits_rs2
                    ? ~(~sectored_entries_0_5_tag_v & ~(sectored_entries_0_5_data_0[20]))
                      & _GEN_131
                    : sectored_entries_0_5_tag_v & _GEN_131)
           : _GEN_131);
    sectored_entries_0_5_valid_1 <=
      ~_GEN_204
      & (io_sfence_valid
           ? (io_sfence_bits_rs1
                ? (_GEN_188
                     ? ~(~sectored_entries_0_5_tag_v & sectored_entries_0_5_data_1[0]
                         | _GEN_185) & _GEN_132
                     : ~_GEN_185 & _GEN_132)
                : io_sfence_bits_rs2
                    ? ~(~sectored_entries_0_5_tag_v & ~(sectored_entries_0_5_data_1[20]))
                      & _GEN_132
                    : sectored_entries_0_5_tag_v & _GEN_132)
           : _GEN_132);
    sectored_entries_0_5_valid_2 <=
      ~_GEN_204
      & (io_sfence_valid
           ? (io_sfence_bits_rs1
                ? (_GEN_188
                     ? ~(~sectored_entries_0_5_tag_v & sectored_entries_0_5_data_2[0]
                         | _GEN_186) & _GEN_133
                     : ~_GEN_186 & _GEN_133)
                : io_sfence_bits_rs2
                    ? ~(~sectored_entries_0_5_tag_v & ~(sectored_entries_0_5_data_2[20]))
                      & _GEN_133
                    : sectored_entries_0_5_tag_v & _GEN_133)
           : _GEN_133);
    sectored_entries_0_5_valid_3 <=
      ~_GEN_204
      & (io_sfence_valid
           ? (io_sfence_bits_rs1
                ? (_GEN_188
                     ? ~(~sectored_entries_0_5_tag_v & sectored_entries_0_5_data_3[0]
                         | _GEN_187) & _GEN_134
                     : ~_GEN_187 & _GEN_134)
                : io_sfence_bits_rs2
                    ? ~(~sectored_entries_0_5_tag_v & ~(sectored_entries_0_5_data_3[20]))
                      & _GEN_134
                    : sectored_entries_0_5_tag_v & _GEN_134)
           : _GEN_134);
    if (_GEN_136) begin
    end
    else begin
      sectored_entries_0_6_tag_vpn <= r_refill_tag;
      sectored_entries_0_6_tag_v <= refill_v;
    end
    if (~io_ptw_resp_valid | _GEN_81 | ~(_GEN_135 & _GEN_137)) begin
    end
    else
      sectored_entries_0_6_data_0 <= _GEN_70;
    if (~io_ptw_resp_valid | _GEN_81 | ~(_GEN_135 & _GEN_138)) begin
    end
    else
      sectored_entries_0_6_data_1 <= _GEN_70;
    if (~io_ptw_resp_valid | _GEN_81 | ~(_GEN_135 & _GEN_139)) begin
    end
    else
      sectored_entries_0_6_data_2 <= _GEN_70;
    if (~io_ptw_resp_valid | _GEN_81 | ~(_GEN_135 & (&(r_refill_tag[1:0])))) begin
    end
    else
      sectored_entries_0_6_data_3 <= _GEN_70;
    sectored_entries_0_6_valid_0 <=
      ~_GEN_204
      & (io_sfence_valid
           ? (io_sfence_bits_rs1
                ? (_GEN_193
                     ? ~(~sectored_entries_0_6_tag_v & sectored_entries_0_6_data_0[0]
                         | _GEN_189) & _GEN_140
                     : ~_GEN_189 & _GEN_140)
                : io_sfence_bits_rs2
                    ? ~(~sectored_entries_0_6_tag_v & ~(sectored_entries_0_6_data_0[20]))
                      & _GEN_140
                    : sectored_entries_0_6_tag_v & _GEN_140)
           : _GEN_140);
    sectored_entries_0_6_valid_1 <=
      ~_GEN_204
      & (io_sfence_valid
           ? (io_sfence_bits_rs1
                ? (_GEN_193
                     ? ~(~sectored_entries_0_6_tag_v & sectored_entries_0_6_data_1[0]
                         | _GEN_190) & _GEN_141
                     : ~_GEN_190 & _GEN_141)
                : io_sfence_bits_rs2
                    ? ~(~sectored_entries_0_6_tag_v & ~(sectored_entries_0_6_data_1[20]))
                      & _GEN_141
                    : sectored_entries_0_6_tag_v & _GEN_141)
           : _GEN_141);
    sectored_entries_0_6_valid_2 <=
      ~_GEN_204
      & (io_sfence_valid
           ? (io_sfence_bits_rs1
                ? (_GEN_193
                     ? ~(~sectored_entries_0_6_tag_v & sectored_entries_0_6_data_2[0]
                         | _GEN_191) & _GEN_142
                     : ~_GEN_191 & _GEN_142)
                : io_sfence_bits_rs2
                    ? ~(~sectored_entries_0_6_tag_v & ~(sectored_entries_0_6_data_2[20]))
                      & _GEN_142
                    : sectored_entries_0_6_tag_v & _GEN_142)
           : _GEN_142);
    sectored_entries_0_6_valid_3 <=
      ~_GEN_204
      & (io_sfence_valid
           ? (io_sfence_bits_rs1
                ? (_GEN_193
                     ? ~(~sectored_entries_0_6_tag_v & sectored_entries_0_6_data_3[0]
                         | _GEN_192) & _GEN_143
                     : ~_GEN_192 & _GEN_143)
                : io_sfence_bits_rs2
                    ? ~(~sectored_entries_0_6_tag_v & ~(sectored_entries_0_6_data_3[20]))
                      & _GEN_143
                    : sectored_entries_0_6_tag_v & _GEN_143)
           : _GEN_143);
    if (_GEN_144) begin
    end
    else begin
      sectored_entries_0_7_tag_vpn <= r_refill_tag;
      sectored_entries_0_7_tag_v <= refill_v;
    end
    if (~io_ptw_resp_valid | _GEN_81 | ~((&waddr_1) & _GEN_145)) begin
    end
    else
      sectored_entries_0_7_data_0 <= _GEN_70;
    if (~io_ptw_resp_valid | _GEN_81 | ~((&waddr_1) & _GEN_146)) begin
    end
    else
      sectored_entries_0_7_data_1 <= _GEN_70;
    if (~io_ptw_resp_valid | _GEN_81 | ~((&waddr_1) & _GEN_147)) begin
    end
    else
      sectored_entries_0_7_data_2 <= _GEN_70;
    if (~io_ptw_resp_valid | _GEN_81 | ~((&waddr_1) & (&(r_refill_tag[1:0])))) begin
    end
    else
      sectored_entries_0_7_data_3 <= _GEN_70;
    sectored_entries_0_7_valid_0 <=
      ~_GEN_204
      & (io_sfence_valid
           ? (io_sfence_bits_rs1
                ? (_GEN_198
                     ? ~(~sectored_entries_0_7_tag_v & sectored_entries_0_7_data_0[0]
                         | _GEN_194) & _GEN_148
                     : ~_GEN_194 & _GEN_148)
                : io_sfence_bits_rs2
                    ? ~(~sectored_entries_0_7_tag_v & ~(sectored_entries_0_7_data_0[20]))
                      & _GEN_148
                    : sectored_entries_0_7_tag_v & _GEN_148)
           : _GEN_148);
    sectored_entries_0_7_valid_1 <=
      ~_GEN_204
      & (io_sfence_valid
           ? (io_sfence_bits_rs1
                ? (_GEN_198
                     ? ~(~sectored_entries_0_7_tag_v & sectored_entries_0_7_data_1[0]
                         | _GEN_195) & _GEN_149
                     : ~_GEN_195 & _GEN_149)
                : io_sfence_bits_rs2
                    ? ~(~sectored_entries_0_7_tag_v & ~(sectored_entries_0_7_data_1[20]))
                      & _GEN_149
                    : sectored_entries_0_7_tag_v & _GEN_149)
           : _GEN_149);
    sectored_entries_0_7_valid_2 <=
      ~_GEN_204
      & (io_sfence_valid
           ? (io_sfence_bits_rs1
                ? (_GEN_198
                     ? ~(~sectored_entries_0_7_tag_v & sectored_entries_0_7_data_2[0]
                         | _GEN_196) & _GEN_150
                     : ~_GEN_196 & _GEN_150)
                : io_sfence_bits_rs2
                    ? ~(~sectored_entries_0_7_tag_v & ~(sectored_entries_0_7_data_2[20]))
                      & _GEN_150
                    : sectored_entries_0_7_tag_v & _GEN_150)
           : _GEN_150);
    sectored_entries_0_7_valid_3 <=
      ~_GEN_204
      & (io_sfence_valid
           ? (io_sfence_bits_rs1
                ? (_GEN_198
                     ? ~(~sectored_entries_0_7_tag_v & sectored_entries_0_7_data_3[0]
                         | _GEN_197) & _GEN_151
                     : ~_GEN_197 & _GEN_151)
                : io_sfence_bits_rs2
                    ? ~(~sectored_entries_0_7_tag_v & ~(sectored_entries_0_7_data_3[20]))
                      & _GEN_151
                    : sectored_entries_0_7_tag_v & _GEN_151)
           : _GEN_151);
    if (_GEN_71) begin
      superpage_entries_0_level <= _GEN_72;
      superpage_entries_0_tag_vpn <= r_refill_tag;
      superpage_entries_0_tag_v <= refill_v;
      superpage_entries_0_data_0 <= _GEN_70;
    end
    superpage_entries_0_valid_0 <=
      ~_GEN_204
      & (io_sfence_valid
           ? (io_sfence_bits_rs1
                ? (_GEN_20
                     ? ~(~superpage_entries_0_tag_v & superpage_entries_0_data_0[0]
                         | _GEN_199) & _GEN_73
                     : ~_GEN_199 & _GEN_73)
                : io_sfence_bits_rs2
                    ? ~(~superpage_entries_0_tag_v & ~(superpage_entries_0_data_0[20]))
                      & _GEN_73
                    : superpage_entries_0_tag_v & _GEN_73)
           : _GEN_73);
    if (_GEN_74) begin
      superpage_entries_1_level <= _GEN_72;
      superpage_entries_1_tag_vpn <= r_refill_tag;
      superpage_entries_1_tag_v <= refill_v;
      superpage_entries_1_data_0 <= _GEN_70;
    end
    superpage_entries_1_valid_0 <=
      ~_GEN_204
      & (io_sfence_valid
           ? (io_sfence_bits_rs1
                ? (_GEN_23
                     ? ~(~superpage_entries_1_tag_v & superpage_entries_1_data_0[0]
                         | _GEN_200) & _GEN_75
                     : ~_GEN_200 & _GEN_75)
                : io_sfence_bits_rs2
                    ? ~(~superpage_entries_1_tag_v & ~(superpage_entries_1_data_0[20]))
                      & _GEN_75
                    : superpage_entries_1_tag_v & _GEN_75)
           : _GEN_75);
    if (_GEN_76) begin
      superpage_entries_2_level <= _GEN_72;
      superpage_entries_2_tag_vpn <= r_refill_tag;
      superpage_entries_2_tag_v <= refill_v;
      superpage_entries_2_data_0 <= _GEN_70;
    end
    superpage_entries_2_valid_0 <=
      ~_GEN_204
      & (io_sfence_valid
           ? (io_sfence_bits_rs1
                ? (_GEN_26
                     ? ~(~superpage_entries_2_tag_v & superpage_entries_2_data_0[0]
                         | _GEN_201) & _GEN_77
                     : ~_GEN_201 & _GEN_77)
                : io_sfence_bits_rs2
                    ? ~(~superpage_entries_2_tag_v & ~(superpage_entries_2_data_0[20]))
                      & _GEN_77
                    : superpage_entries_2_tag_v & _GEN_77)
           : _GEN_77);
    if (_GEN_78) begin
      superpage_entries_3_level <= _GEN_72;
      superpage_entries_3_tag_vpn <= r_refill_tag;
      superpage_entries_3_tag_v <= refill_v;
      superpage_entries_3_data_0 <= _GEN_70;
    end
    superpage_entries_3_valid_0 <=
      ~_GEN_204
      & (io_sfence_valid
           ? (io_sfence_bits_rs1
                ? (_GEN_29
                     ? ~(~superpage_entries_3_tag_v & superpage_entries_3_data_0[0]
                         | _GEN_202) & _GEN_79
                     : ~_GEN_202 & _GEN_79)
                : io_sfence_bits_rs2
                    ? ~(~superpage_entries_3_tag_v & ~(superpage_entries_3_data_0[20]))
                      & _GEN_79
                    : superpage_entries_3_tag_v & _GEN_79)
           : _GEN_79);
    if (_GEN_68) begin
      special_entry_level <= io_ptw_resp_bits_level;
      special_entry_tag_vpn <= r_refill_tag;
      special_entry_tag_v <= refill_v;
      special_entry_data_0 <= _GEN_70;
    end
    special_entry_valid_0 <=
      ~_GEN_204
      & (io_sfence_valid
           ? (io_sfence_bits_rs1
                ? (_GEN_40
                     ? ~(~special_entry_tag_v & special_entry_data_0[0] | _GEN_203)
                       & _GEN_69
                     : ~_GEN_203 & _GEN_69)
                : io_sfence_bits_rs2
                    ? ~(~special_entry_tag_v & ~(special_entry_data_0[20])) & _GEN_69
                    : special_entry_tag_v & _GEN_69)
           : _GEN_69);
    if (_GEN_155) begin
      r_refill_tag <= io_req_bits_vaddr[38:12];
      if (&{superpage_entries_3_valid_0,
            superpage_entries_2_valid_0,
            superpage_entries_1_valid_0,
            superpage_entries_0_valid_0})
        waddr <= {state_reg_1[2], state_reg_1[2] ? state_reg_1[1] : state_reg_1[0]};
      else begin
        automatic logic [2:0] _GEN_205;
        _GEN_205 =
          ~{superpage_entries_2_valid_0,
            superpage_entries_1_valid_0,
            superpage_entries_0_valid_0};
        if (_GEN_205[0])
          waddr <= 2'h0;
        else if (_GEN_205[1])
          waddr <= 2'h1;
        else
          waddr <= {1'h1, ~(_GEN_205[2])};
      end
      if (&{_GEN_66, _GEN_65, _GEN_64, _GEN_63, _GEN_62, _GEN_61, _GEN_60, _GEN_59})
        r_sectored_repl_addr <=
          {state_vec_0[6],
           state_vec_0[6]
             ? {state_vec_0[5], state_vec_0[5] ? state_vec_0[4] : state_vec_0[3]}
             : {state_vec_0[2], state_vec_0[2] ? state_vec_0[1] : state_vec_0[0]}};
      else begin
        automatic logic [6:0] _GEN_206;
        _GEN_206 = ~{_GEN_65, _GEN_64, _GEN_63, _GEN_62, _GEN_61, _GEN_60, _GEN_59};
        if (_GEN_206[0])
          r_sectored_repl_addr <= 3'h0;
        else if (_GEN_206[1])
          r_sectored_repl_addr <= 3'h1;
        else if (_GEN_206[2])
          r_sectored_repl_addr <= 3'h2;
        else if (_GEN_206[3])
          r_sectored_repl_addr <= 3'h3;
        else if (_GEN_206[4])
          r_sectored_repl_addr <= 3'h4;
        else if (_GEN_206[5])
          r_sectored_repl_addr <= 3'h5;
        else
          r_sectored_repl_addr <= {2'h3, ~(_GEN_206[6])};
      end
      r_sectored_hit_valid <= _GEN_152;
      r_sectored_hit_bits <=
        {|{sector_hits_7, sector_hits_6, sector_hits_5, sector_hits_4},
         |(_GEN_153[2:1]),
         _GEN_154};
      r_need_gpa <= |real_hits;
    end
    r_vstage1_en <= ~_GEN_155 & r_vstage1_en;
    r_stage2_en <= ~_GEN_155 & r_stage2_en;
    if (reset) begin
      state <= 2'h0;
      state_vec_0 <= 7'h0;
      state_reg_1 <= 3'h0;
    end
    else begin
      automatic logic superpage_hits_1;
      automatic logic superpage_hits_2;
      automatic logic superpage_hits_3;
      automatic logic _GEN_207 = io_req_valid & _GEN;
      superpage_hits_1 =
        superpage_entries_1_valid_0 & ~superpage_entries_1_tag_v & _GEN_23 & _GEN_24;
      superpage_hits_2 =
        superpage_entries_2_valid_0 & ~superpage_entries_2_tag_v & _GEN_26 & _GEN_27;
      superpage_hits_3 =
        superpage_entries_3_valid_0 & ~superpage_entries_3_tag_v & _GEN_29 & _GEN_30;
      if (io_ptw_resp_valid)
        state <= 2'h0;
      else if (state == 2'h2 & io_sfence_valid)
        state <= 2'h3;
      else if (_GEN_0) begin
        if (io_kill)
          state <= 2'h0;
        else if (io_ptw_req_ready)
          state <= {1'h1, io_sfence_valid};
        else if (io_sfence_valid)
          state <= 2'h0;
        else if (_GEN_155)
          state <= 2'h1;
      end
      else if (_GEN_155)
        state <= 2'h1;
      if (_GEN_207 & _GEN_152) begin
        automatic logic [3:0] hi_1;
        hi_1 = {sector_hits_7, sector_hits_6, sector_hits_5, sector_hits_4};
        state_vec_0 <=
          {~(|hi_1),
           (|hi_1)
             ? {~(|(_GEN_153[2:1])),
                (|(_GEN_153[2:1])) ? ~_GEN_154 : state_vec_0[4],
                (|(_GEN_153[2:1])) ? state_vec_0[3] : ~_GEN_154}
             : state_vec_0[5:3],
           (|hi_1)
             ? state_vec_0[2:0]
             : {~(|(_GEN_153[2:1])),
                (|(_GEN_153[2:1])) ? ~_GEN_154 : state_vec_0[1],
                (|(_GEN_153[2:1])) ? state_vec_0[0] : ~_GEN_154}};
      end
      if (_GEN_207
          & (superpage_entries_0_valid_0 & ~superpage_entries_0_tag_v & _GEN_20 & _GEN_21
             | superpage_hits_1 | superpage_hits_2 | superpage_hits_3)) begin
        automatic logic [1:0] hi_4;
        automatic logic       _GEN_208;
        hi_4 = {superpage_hits_3, superpage_hits_2};
        _GEN_208 = superpage_hits_3 | superpage_hits_1;
        state_reg_1 <=
          {~(|hi_4),
           (|hi_4) ? ~_GEN_208 : state_reg_1[1],
           (|hi_4) ? state_reg_1[0] : ~_GEN_208};
      end
    end
  end // always @(posedge)
  OptimizationBarrier_TLBEntryData mpu_ppn_barrier (
    .io_x_ppn      (special_entry_data_0[41:22]),
    .io_x_u        (special_entry_data_0[21]),
    .io_x_ae_ptw   (special_entry_data_0[19]),
    .io_x_ae_final (special_entry_data_0[18]),
    .io_x_pf       (special_entry_data_0[16]),
    .io_x_gf       (special_entry_data_0[15]),
    .io_x_sw       (special_entry_data_0[14]),
    .io_x_sx       (special_entry_data_0[13]),
    .io_x_sr       (special_entry_data_0[12]),
    .io_x_pw       (special_entry_data_0[8]),
    .io_x_px       (special_entry_data_0[7]),
    .io_x_pr       (special_entry_data_0[6]),
    .io_x_ppp      (special_entry_data_0[5]),
    .io_x_pal      (special_entry_data_0[4]),
    .io_x_paa      (special_entry_data_0[3]),
    .io_x_eff      (special_entry_data_0[2]),
    .io_x_c        (special_entry_data_0[1]),
    .io_y_ppn      (_mpu_ppn_barrier_io_y_ppn),
    .io_y_u        (/* unused */),
    .io_y_ae_ptw   (/* unused */),
    .io_y_ae_final (/* unused */),
    .io_y_pf       (/* unused */),
    .io_y_gf       (/* unused */),
    .io_y_sw       (/* unused */),
    .io_y_sx       (/* unused */),
    .io_y_sr       (/* unused */),
    .io_y_pw       (/* unused */),
    .io_y_px       (/* unused */),
    .io_y_pr       (/* unused */),
    .io_y_ppp      (/* unused */),
    .io_y_pal      (/* unused */),
    .io_y_paa      (/* unused */),
    .io_y_eff      (/* unused */),
    .io_y_c        (/* unused */)
  );
  PMPChecker_s2 pmp (
    .io_prv         (mpu_priv[1:0]),
    .io_pmp_0_cfg_l (io_ptw_pmp_0_cfg_l),
    .io_pmp_0_cfg_a (io_ptw_pmp_0_cfg_a),
    .io_pmp_0_cfg_x (io_ptw_pmp_0_cfg_x),
    .io_pmp_0_cfg_w (io_ptw_pmp_0_cfg_w),
    .io_pmp_0_cfg_r (io_ptw_pmp_0_cfg_r),
    .io_pmp_0_addr  (io_ptw_pmp_0_addr),
    .io_pmp_0_mask  (io_ptw_pmp_0_mask),
    .io_pmp_1_cfg_l (io_ptw_pmp_1_cfg_l),
    .io_pmp_1_cfg_a (io_ptw_pmp_1_cfg_a),
    .io_pmp_1_cfg_x (io_ptw_pmp_1_cfg_x),
    .io_pmp_1_cfg_w (io_ptw_pmp_1_cfg_w),
    .io_pmp_1_cfg_r (io_ptw_pmp_1_cfg_r),
    .io_pmp_1_addr  (io_ptw_pmp_1_addr),
    .io_pmp_1_mask  (io_ptw_pmp_1_mask),
    .io_pmp_2_cfg_l (io_ptw_pmp_2_cfg_l),
    .io_pmp_2_cfg_a (io_ptw_pmp_2_cfg_a),
    .io_pmp_2_cfg_x (io_ptw_pmp_2_cfg_x),
    .io_pmp_2_cfg_w (io_ptw_pmp_2_cfg_w),
    .io_pmp_2_cfg_r (io_ptw_pmp_2_cfg_r),
    .io_pmp_2_addr  (io_ptw_pmp_2_addr),
    .io_pmp_2_mask  (io_ptw_pmp_2_mask),
    .io_pmp_3_cfg_l (io_ptw_pmp_3_cfg_l),
    .io_pmp_3_cfg_a (io_ptw_pmp_3_cfg_a),
    .io_pmp_3_cfg_x (io_ptw_pmp_3_cfg_x),
    .io_pmp_3_cfg_w (io_ptw_pmp_3_cfg_w),
    .io_pmp_3_cfg_r (io_ptw_pmp_3_cfg_r),
    .io_pmp_3_addr  (io_ptw_pmp_3_addr),
    .io_pmp_3_mask  (io_ptw_pmp_3_mask),
    .io_pmp_4_cfg_l (io_ptw_pmp_4_cfg_l),
    .io_pmp_4_cfg_a (io_ptw_pmp_4_cfg_a),
    .io_pmp_4_cfg_x (io_ptw_pmp_4_cfg_x),
    .io_pmp_4_cfg_w (io_ptw_pmp_4_cfg_w),
    .io_pmp_4_cfg_r (io_ptw_pmp_4_cfg_r),
    .io_pmp_4_addr  (io_ptw_pmp_4_addr),
    .io_pmp_4_mask  (io_ptw_pmp_4_mask),
    .io_pmp_5_cfg_l (io_ptw_pmp_5_cfg_l),
    .io_pmp_5_cfg_a (io_ptw_pmp_5_cfg_a),
    .io_pmp_5_cfg_x (io_ptw_pmp_5_cfg_x),
    .io_pmp_5_cfg_w (io_ptw_pmp_5_cfg_w),
    .io_pmp_5_cfg_r (io_ptw_pmp_5_cfg_r),
    .io_pmp_5_addr  (io_ptw_pmp_5_addr),
    .io_pmp_5_mask  (io_ptw_pmp_5_mask),
    .io_pmp_6_cfg_l (io_ptw_pmp_6_cfg_l),
    .io_pmp_6_cfg_a (io_ptw_pmp_6_cfg_a),
    .io_pmp_6_cfg_x (io_ptw_pmp_6_cfg_x),
    .io_pmp_6_cfg_w (io_ptw_pmp_6_cfg_w),
    .io_pmp_6_cfg_r (io_ptw_pmp_6_cfg_r),
    .io_pmp_6_addr  (io_ptw_pmp_6_addr),
    .io_pmp_6_mask  (io_ptw_pmp_6_mask),
    .io_pmp_7_cfg_l (io_ptw_pmp_7_cfg_l),
    .io_pmp_7_cfg_a (io_ptw_pmp_7_cfg_a),
    .io_pmp_7_cfg_x (io_ptw_pmp_7_cfg_x),
    .io_pmp_7_cfg_w (io_ptw_pmp_7_cfg_w),
    .io_pmp_7_cfg_r (io_ptw_pmp_7_cfg_r),
    .io_pmp_7_addr  (io_ptw_pmp_7_addr),
    .io_pmp_7_mask  (io_ptw_pmp_7_mask),
    .io_addr        ({mpu_ppn[19:0], io_req_bits_vaddr[11:0]}),
    .io_r           (_pmp_io_r),
    .io_w           (_pmp_io_w),
    .io_x           (_pmp_io_x)
  );
  PMAChecker pma (
    .io_paddr          ({mpu_ppn, io_req_bits_vaddr[11:0]}),
    .io_resp_cacheable (_pma_io_resp_cacheable),
    .io_resp_r         (_pma_io_resp_r),
    .io_resp_w         (_pma_io_resp_w),
    .io_resp_pp        (_pma_io_resp_pp),
    .io_resp_al        (_pma_io_resp_al),
    .io_resp_aa        (_pma_io_resp_aa),
    .io_resp_x         (_pma_io_resp_x),
    .io_resp_eff       (_pma_io_resp_eff)
  );
  OptimizationBarrier_TLBEntryData entries_barrier (
    .io_x_ppn      (_GEN_44[41:22]),
    .io_x_u        (_GEN_44[21]),
    .io_x_ae_ptw   (_GEN_44[19]),
    .io_x_ae_final (_GEN_44[18]),
    .io_x_pf       (_GEN_44[16]),
    .io_x_gf       (_GEN_44[15]),
    .io_x_sw       (_GEN_44[14]),
    .io_x_sx       (_GEN_44[13]),
    .io_x_sr       (_GEN_44[12]),
    .io_x_pw       (_GEN_44[8]),
    .io_x_px       (_GEN_44[7]),
    .io_x_pr       (_GEN_44[6]),
    .io_x_ppp      (_GEN_44[5]),
    .io_x_pal      (_GEN_44[4]),
    .io_x_paa      (_GEN_44[3]),
    .io_x_eff      (_GEN_44[2]),
    .io_x_c        (_GEN_44[1]),
    .io_y_ppn      (_entries_barrier_io_y_ppn),
    .io_y_u        (_entries_barrier_io_y_u),
    .io_y_ae_ptw   (_entries_barrier_io_y_ae_ptw),
    .io_y_ae_final (_entries_barrier_io_y_ae_final),
    .io_y_pf       (_entries_barrier_io_y_pf),
    .io_y_gf       (_entries_barrier_io_y_gf),
    .io_y_sw       (/* unused */),
    .io_y_sx       (_entries_barrier_io_y_sx),
    .io_y_sr       (/* unused */),
    .io_y_pw       (/* unused */),
    .io_y_px       (_entries_barrier_io_y_px),
    .io_y_pr       (/* unused */),
    .io_y_ppp      (/* unused */),
    .io_y_pal      (/* unused */),
    .io_y_paa      (/* unused */),
    .io_y_eff      (/* unused */),
    .io_y_c        (_entries_barrier_io_y_c)
  );
  OptimizationBarrier_TLBEntryData entries_barrier_1 (
    .io_x_ppn      (_GEN_46[41:22]),
    .io_x_u        (_GEN_46[21]),
    .io_x_ae_ptw   (_GEN_46[19]),
    .io_x_ae_final (_GEN_46[18]),
    .io_x_pf       (_GEN_46[16]),
    .io_x_gf       (_GEN_46[15]),
    .io_x_sw       (_GEN_46[14]),
    .io_x_sx       (_GEN_46[13]),
    .io_x_sr       (_GEN_46[12]),
    .io_x_pw       (_GEN_46[8]),
    .io_x_px       (_GEN_46[7]),
    .io_x_pr       (_GEN_46[6]),
    .io_x_ppp      (_GEN_46[5]),
    .io_x_pal      (_GEN_46[4]),
    .io_x_paa      (_GEN_46[3]),
    .io_x_eff      (_GEN_46[2]),
    .io_x_c        (_GEN_46[1]),
    .io_y_ppn      (_entries_barrier_1_io_y_ppn),
    .io_y_u        (_entries_barrier_1_io_y_u),
    .io_y_ae_ptw   (_entries_barrier_1_io_y_ae_ptw),
    .io_y_ae_final (_entries_barrier_1_io_y_ae_final),
    .io_y_pf       (_entries_barrier_1_io_y_pf),
    .io_y_gf       (_entries_barrier_1_io_y_gf),
    .io_y_sw       (/* unused */),
    .io_y_sx       (_entries_barrier_1_io_y_sx),
    .io_y_sr       (/* unused */),
    .io_y_pw       (/* unused */),
    .io_y_px       (_entries_barrier_1_io_y_px),
    .io_y_pr       (/* unused */),
    .io_y_ppp      (/* unused */),
    .io_y_pal      (/* unused */),
    .io_y_paa      (/* unused */),
    .io_y_eff      (/* unused */),
    .io_y_c        (_entries_barrier_1_io_y_c)
  );
  OptimizationBarrier_TLBEntryData entries_barrier_2 (
    .io_x_ppn      (_GEN_48[41:22]),
    .io_x_u        (_GEN_48[21]),
    .io_x_ae_ptw   (_GEN_48[19]),
    .io_x_ae_final (_GEN_48[18]),
    .io_x_pf       (_GEN_48[16]),
    .io_x_gf       (_GEN_48[15]),
    .io_x_sw       (_GEN_48[14]),
    .io_x_sx       (_GEN_48[13]),
    .io_x_sr       (_GEN_48[12]),
    .io_x_pw       (_GEN_48[8]),
    .io_x_px       (_GEN_48[7]),
    .io_x_pr       (_GEN_48[6]),
    .io_x_ppp      (_GEN_48[5]),
    .io_x_pal      (_GEN_48[4]),
    .io_x_paa      (_GEN_48[3]),
    .io_x_eff      (_GEN_48[2]),
    .io_x_c        (_GEN_48[1]),
    .io_y_ppn      (_entries_barrier_2_io_y_ppn),
    .io_y_u        (_entries_barrier_2_io_y_u),
    .io_y_ae_ptw   (_entries_barrier_2_io_y_ae_ptw),
    .io_y_ae_final (_entries_barrier_2_io_y_ae_final),
    .io_y_pf       (_entries_barrier_2_io_y_pf),
    .io_y_gf       (_entries_barrier_2_io_y_gf),
    .io_y_sw       (/* unused */),
    .io_y_sx       (_entries_barrier_2_io_y_sx),
    .io_y_sr       (/* unused */),
    .io_y_pw       (/* unused */),
    .io_y_px       (_entries_barrier_2_io_y_px),
    .io_y_pr       (/* unused */),
    .io_y_ppp      (/* unused */),
    .io_y_pal      (/* unused */),
    .io_y_paa      (/* unused */),
    .io_y_eff      (/* unused */),
    .io_y_c        (_entries_barrier_2_io_y_c)
  );
  OptimizationBarrier_TLBEntryData entries_barrier_3 (
    .io_x_ppn      (_GEN_50[41:22]),
    .io_x_u        (_GEN_50[21]),
    .io_x_ae_ptw   (_GEN_50[19]),
    .io_x_ae_final (_GEN_50[18]),
    .io_x_pf       (_GEN_50[16]),
    .io_x_gf       (_GEN_50[15]),
    .io_x_sw       (_GEN_50[14]),
    .io_x_sx       (_GEN_50[13]),
    .io_x_sr       (_GEN_50[12]),
    .io_x_pw       (_GEN_50[8]),
    .io_x_px       (_GEN_50[7]),
    .io_x_pr       (_GEN_50[6]),
    .io_x_ppp      (_GEN_50[5]),
    .io_x_pal      (_GEN_50[4]),
    .io_x_paa      (_GEN_50[3]),
    .io_x_eff      (_GEN_50[2]),
    .io_x_c        (_GEN_50[1]),
    .io_y_ppn      (_entries_barrier_3_io_y_ppn),
    .io_y_u        (_entries_barrier_3_io_y_u),
    .io_y_ae_ptw   (_entries_barrier_3_io_y_ae_ptw),
    .io_y_ae_final (_entries_barrier_3_io_y_ae_final),
    .io_y_pf       (_entries_barrier_3_io_y_pf),
    .io_y_gf       (_entries_barrier_3_io_y_gf),
    .io_y_sw       (/* unused */),
    .io_y_sx       (_entries_barrier_3_io_y_sx),
    .io_y_sr       (/* unused */),
    .io_y_pw       (/* unused */),
    .io_y_px       (_entries_barrier_3_io_y_px),
    .io_y_pr       (/* unused */),
    .io_y_ppp      (/* unused */),
    .io_y_pal      (/* unused */),
    .io_y_paa      (/* unused */),
    .io_y_eff      (/* unused */),
    .io_y_c        (_entries_barrier_3_io_y_c)
  );
  OptimizationBarrier_TLBEntryData entries_barrier_4 (
    .io_x_ppn      (_GEN_52[41:22]),
    .io_x_u        (_GEN_52[21]),
    .io_x_ae_ptw   (_GEN_52[19]),
    .io_x_ae_final (_GEN_52[18]),
    .io_x_pf       (_GEN_52[16]),
    .io_x_gf       (_GEN_52[15]),
    .io_x_sw       (_GEN_52[14]),
    .io_x_sx       (_GEN_52[13]),
    .io_x_sr       (_GEN_52[12]),
    .io_x_pw       (_GEN_52[8]),
    .io_x_px       (_GEN_52[7]),
    .io_x_pr       (_GEN_52[6]),
    .io_x_ppp      (_GEN_52[5]),
    .io_x_pal      (_GEN_52[4]),
    .io_x_paa      (_GEN_52[3]),
    .io_x_eff      (_GEN_52[2]),
    .io_x_c        (_GEN_52[1]),
    .io_y_ppn      (_entries_barrier_4_io_y_ppn),
    .io_y_u        (_entries_barrier_4_io_y_u),
    .io_y_ae_ptw   (_entries_barrier_4_io_y_ae_ptw),
    .io_y_ae_final (_entries_barrier_4_io_y_ae_final),
    .io_y_pf       (_entries_barrier_4_io_y_pf),
    .io_y_gf       (_entries_barrier_4_io_y_gf),
    .io_y_sw       (/* unused */),
    .io_y_sx       (_entries_barrier_4_io_y_sx),
    .io_y_sr       (/* unused */),
    .io_y_pw       (/* unused */),
    .io_y_px       (_entries_barrier_4_io_y_px),
    .io_y_pr       (/* unused */),
    .io_y_ppp      (/* unused */),
    .io_y_pal      (/* unused */),
    .io_y_paa      (/* unused */),
    .io_y_eff      (/* unused */),
    .io_y_c        (_entries_barrier_4_io_y_c)
  );
  OptimizationBarrier_TLBEntryData entries_barrier_5 (
    .io_x_ppn      (_GEN_54[41:22]),
    .io_x_u        (_GEN_54[21]),
    .io_x_ae_ptw   (_GEN_54[19]),
    .io_x_ae_final (_GEN_54[18]),
    .io_x_pf       (_GEN_54[16]),
    .io_x_gf       (_GEN_54[15]),
    .io_x_sw       (_GEN_54[14]),
    .io_x_sx       (_GEN_54[13]),
    .io_x_sr       (_GEN_54[12]),
    .io_x_pw       (_GEN_54[8]),
    .io_x_px       (_GEN_54[7]),
    .io_x_pr       (_GEN_54[6]),
    .io_x_ppp      (_GEN_54[5]),
    .io_x_pal      (_GEN_54[4]),
    .io_x_paa      (_GEN_54[3]),
    .io_x_eff      (_GEN_54[2]),
    .io_x_c        (_GEN_54[1]),
    .io_y_ppn      (_entries_barrier_5_io_y_ppn),
    .io_y_u        (_entries_barrier_5_io_y_u),
    .io_y_ae_ptw   (_entries_barrier_5_io_y_ae_ptw),
    .io_y_ae_final (_entries_barrier_5_io_y_ae_final),
    .io_y_pf       (_entries_barrier_5_io_y_pf),
    .io_y_gf       (_entries_barrier_5_io_y_gf),
    .io_y_sw       (/* unused */),
    .io_y_sx       (_entries_barrier_5_io_y_sx),
    .io_y_sr       (/* unused */),
    .io_y_pw       (/* unused */),
    .io_y_px       (_entries_barrier_5_io_y_px),
    .io_y_pr       (/* unused */),
    .io_y_ppp      (/* unused */),
    .io_y_pal      (/* unused */),
    .io_y_paa      (/* unused */),
    .io_y_eff      (/* unused */),
    .io_y_c        (_entries_barrier_5_io_y_c)
  );
  OptimizationBarrier_TLBEntryData entries_barrier_6 (
    .io_x_ppn      (_GEN_56[41:22]),
    .io_x_u        (_GEN_56[21]),
    .io_x_ae_ptw   (_GEN_56[19]),
    .io_x_ae_final (_GEN_56[18]),
    .io_x_pf       (_GEN_56[16]),
    .io_x_gf       (_GEN_56[15]),
    .io_x_sw       (_GEN_56[14]),
    .io_x_sx       (_GEN_56[13]),
    .io_x_sr       (_GEN_56[12]),
    .io_x_pw       (_GEN_56[8]),
    .io_x_px       (_GEN_56[7]),
    .io_x_pr       (_GEN_56[6]),
    .io_x_ppp      (_GEN_56[5]),
    .io_x_pal      (_GEN_56[4]),
    .io_x_paa      (_GEN_56[3]),
    .io_x_eff      (_GEN_56[2]),
    .io_x_c        (_GEN_56[1]),
    .io_y_ppn      (_entries_barrier_6_io_y_ppn),
    .io_y_u        (_entries_barrier_6_io_y_u),
    .io_y_ae_ptw   (_entries_barrier_6_io_y_ae_ptw),
    .io_y_ae_final (_entries_barrier_6_io_y_ae_final),
    .io_y_pf       (_entries_barrier_6_io_y_pf),
    .io_y_gf       (_entries_barrier_6_io_y_gf),
    .io_y_sw       (/* unused */),
    .io_y_sx       (_entries_barrier_6_io_y_sx),
    .io_y_sr       (/* unused */),
    .io_y_pw       (/* unused */),
    .io_y_px       (_entries_barrier_6_io_y_px),
    .io_y_pr       (/* unused */),
    .io_y_ppp      (/* unused */),
    .io_y_pal      (/* unused */),
    .io_y_paa      (/* unused */),
    .io_y_eff      (/* unused */),
    .io_y_c        (_entries_barrier_6_io_y_c)
  );
  OptimizationBarrier_TLBEntryData entries_barrier_7 (
    .io_x_ppn      (_GEN_58[41:22]),
    .io_x_u        (_GEN_58[21]),
    .io_x_ae_ptw   (_GEN_58[19]),
    .io_x_ae_final (_GEN_58[18]),
    .io_x_pf       (_GEN_58[16]),
    .io_x_gf       (_GEN_58[15]),
    .io_x_sw       (_GEN_58[14]),
    .io_x_sx       (_GEN_58[13]),
    .io_x_sr       (_GEN_58[12]),
    .io_x_pw       (_GEN_58[8]),
    .io_x_px       (_GEN_58[7]),
    .io_x_pr       (_GEN_58[6]),
    .io_x_ppp      (_GEN_58[5]),
    .io_x_pal      (_GEN_58[4]),
    .io_x_paa      (_GEN_58[3]),
    .io_x_eff      (_GEN_58[2]),
    .io_x_c        (_GEN_58[1]),
    .io_y_ppn      (_entries_barrier_7_io_y_ppn),
    .io_y_u        (_entries_barrier_7_io_y_u),
    .io_y_ae_ptw   (_entries_barrier_7_io_y_ae_ptw),
    .io_y_ae_final (_entries_barrier_7_io_y_ae_final),
    .io_y_pf       (_entries_barrier_7_io_y_pf),
    .io_y_gf       (_entries_barrier_7_io_y_gf),
    .io_y_sw       (/* unused */),
    .io_y_sx       (_entries_barrier_7_io_y_sx),
    .io_y_sr       (/* unused */),
    .io_y_pw       (/* unused */),
    .io_y_px       (_entries_barrier_7_io_y_px),
    .io_y_pr       (/* unused */),
    .io_y_ppp      (/* unused */),
    .io_y_pal      (/* unused */),
    .io_y_paa      (/* unused */),
    .io_y_eff      (/* unused */),
    .io_y_c        (_entries_barrier_7_io_y_c)
  );
  OptimizationBarrier_TLBEntryData entries_barrier_8 (
    .io_x_ppn      (superpage_entries_0_data_0[41:22]),
    .io_x_u        (superpage_entries_0_data_0[21]),
    .io_x_ae_ptw   (superpage_entries_0_data_0[19]),
    .io_x_ae_final (superpage_entries_0_data_0[18]),
    .io_x_pf       (superpage_entries_0_data_0[16]),
    .io_x_gf       (superpage_entries_0_data_0[15]),
    .io_x_sw       (superpage_entries_0_data_0[14]),
    .io_x_sx       (superpage_entries_0_data_0[13]),
    .io_x_sr       (superpage_entries_0_data_0[12]),
    .io_x_pw       (superpage_entries_0_data_0[8]),
    .io_x_px       (superpage_entries_0_data_0[7]),
    .io_x_pr       (superpage_entries_0_data_0[6]),
    .io_x_ppp      (superpage_entries_0_data_0[5]),
    .io_x_pal      (superpage_entries_0_data_0[4]),
    .io_x_paa      (superpage_entries_0_data_0[3]),
    .io_x_eff      (superpage_entries_0_data_0[2]),
    .io_x_c        (superpage_entries_0_data_0[1]),
    .io_y_ppn      (_entries_barrier_8_io_y_ppn),
    .io_y_u        (_entries_barrier_8_io_y_u),
    .io_y_ae_ptw   (_entries_barrier_8_io_y_ae_ptw),
    .io_y_ae_final (_entries_barrier_8_io_y_ae_final),
    .io_y_pf       (_entries_barrier_8_io_y_pf),
    .io_y_gf       (_entries_barrier_8_io_y_gf),
    .io_y_sw       (/* unused */),
    .io_y_sx       (_entries_barrier_8_io_y_sx),
    .io_y_sr       (/* unused */),
    .io_y_pw       (/* unused */),
    .io_y_px       (_entries_barrier_8_io_y_px),
    .io_y_pr       (/* unused */),
    .io_y_ppp      (/* unused */),
    .io_y_pal      (/* unused */),
    .io_y_paa      (/* unused */),
    .io_y_eff      (/* unused */),
    .io_y_c        (_entries_barrier_8_io_y_c)
  );
  OptimizationBarrier_TLBEntryData entries_barrier_9 (
    .io_x_ppn      (superpage_entries_1_data_0[41:22]),
    .io_x_u        (superpage_entries_1_data_0[21]),
    .io_x_ae_ptw   (superpage_entries_1_data_0[19]),
    .io_x_ae_final (superpage_entries_1_data_0[18]),
    .io_x_pf       (superpage_entries_1_data_0[16]),
    .io_x_gf       (superpage_entries_1_data_0[15]),
    .io_x_sw       (superpage_entries_1_data_0[14]),
    .io_x_sx       (superpage_entries_1_data_0[13]),
    .io_x_sr       (superpage_entries_1_data_0[12]),
    .io_x_pw       (superpage_entries_1_data_0[8]),
    .io_x_px       (superpage_entries_1_data_0[7]),
    .io_x_pr       (superpage_entries_1_data_0[6]),
    .io_x_ppp      (superpage_entries_1_data_0[5]),
    .io_x_pal      (superpage_entries_1_data_0[4]),
    .io_x_paa      (superpage_entries_1_data_0[3]),
    .io_x_eff      (superpage_entries_1_data_0[2]),
    .io_x_c        (superpage_entries_1_data_0[1]),
    .io_y_ppn      (_entries_barrier_9_io_y_ppn),
    .io_y_u        (_entries_barrier_9_io_y_u),
    .io_y_ae_ptw   (_entries_barrier_9_io_y_ae_ptw),
    .io_y_ae_final (_entries_barrier_9_io_y_ae_final),
    .io_y_pf       (_entries_barrier_9_io_y_pf),
    .io_y_gf       (_entries_barrier_9_io_y_gf),
    .io_y_sw       (/* unused */),
    .io_y_sx       (_entries_barrier_9_io_y_sx),
    .io_y_sr       (/* unused */),
    .io_y_pw       (/* unused */),
    .io_y_px       (_entries_barrier_9_io_y_px),
    .io_y_pr       (/* unused */),
    .io_y_ppp      (/* unused */),
    .io_y_pal      (/* unused */),
    .io_y_paa      (/* unused */),
    .io_y_eff      (/* unused */),
    .io_y_c        (_entries_barrier_9_io_y_c)
  );
  OptimizationBarrier_TLBEntryData entries_barrier_10 (
    .io_x_ppn      (superpage_entries_2_data_0[41:22]),
    .io_x_u        (superpage_entries_2_data_0[21]),
    .io_x_ae_ptw   (superpage_entries_2_data_0[19]),
    .io_x_ae_final (superpage_entries_2_data_0[18]),
    .io_x_pf       (superpage_entries_2_data_0[16]),
    .io_x_gf       (superpage_entries_2_data_0[15]),
    .io_x_sw       (superpage_entries_2_data_0[14]),
    .io_x_sx       (superpage_entries_2_data_0[13]),
    .io_x_sr       (superpage_entries_2_data_0[12]),
    .io_x_pw       (superpage_entries_2_data_0[8]),
    .io_x_px       (superpage_entries_2_data_0[7]),
    .io_x_pr       (superpage_entries_2_data_0[6]),
    .io_x_ppp      (superpage_entries_2_data_0[5]),
    .io_x_pal      (superpage_entries_2_data_0[4]),
    .io_x_paa      (superpage_entries_2_data_0[3]),
    .io_x_eff      (superpage_entries_2_data_0[2]),
    .io_x_c        (superpage_entries_2_data_0[1]),
    .io_y_ppn      (_entries_barrier_10_io_y_ppn),
    .io_y_u        (_entries_barrier_10_io_y_u),
    .io_y_ae_ptw   (_entries_barrier_10_io_y_ae_ptw),
    .io_y_ae_final (_entries_barrier_10_io_y_ae_final),
    .io_y_pf       (_entries_barrier_10_io_y_pf),
    .io_y_gf       (_entries_barrier_10_io_y_gf),
    .io_y_sw       (/* unused */),
    .io_y_sx       (_entries_barrier_10_io_y_sx),
    .io_y_sr       (/* unused */),
    .io_y_pw       (/* unused */),
    .io_y_px       (_entries_barrier_10_io_y_px),
    .io_y_pr       (/* unused */),
    .io_y_ppp      (/* unused */),
    .io_y_pal      (/* unused */),
    .io_y_paa      (/* unused */),
    .io_y_eff      (/* unused */),
    .io_y_c        (_entries_barrier_10_io_y_c)
  );
  OptimizationBarrier_TLBEntryData entries_barrier_11 (
    .io_x_ppn      (superpage_entries_3_data_0[41:22]),
    .io_x_u        (superpage_entries_3_data_0[21]),
    .io_x_ae_ptw   (superpage_entries_3_data_0[19]),
    .io_x_ae_final (superpage_entries_3_data_0[18]),
    .io_x_pf       (superpage_entries_3_data_0[16]),
    .io_x_gf       (superpage_entries_3_data_0[15]),
    .io_x_sw       (superpage_entries_3_data_0[14]),
    .io_x_sx       (superpage_entries_3_data_0[13]),
    .io_x_sr       (superpage_entries_3_data_0[12]),
    .io_x_pw       (superpage_entries_3_data_0[8]),
    .io_x_px       (superpage_entries_3_data_0[7]),
    .io_x_pr       (superpage_entries_3_data_0[6]),
    .io_x_ppp      (superpage_entries_3_data_0[5]),
    .io_x_pal      (superpage_entries_3_data_0[4]),
    .io_x_paa      (superpage_entries_3_data_0[3]),
    .io_x_eff      (superpage_entries_3_data_0[2]),
    .io_x_c        (superpage_entries_3_data_0[1]),
    .io_y_ppn      (_entries_barrier_11_io_y_ppn),
    .io_y_u        (_entries_barrier_11_io_y_u),
    .io_y_ae_ptw   (_entries_barrier_11_io_y_ae_ptw),
    .io_y_ae_final (_entries_barrier_11_io_y_ae_final),
    .io_y_pf       (_entries_barrier_11_io_y_pf),
    .io_y_gf       (_entries_barrier_11_io_y_gf),
    .io_y_sw       (/* unused */),
    .io_y_sx       (_entries_barrier_11_io_y_sx),
    .io_y_sr       (/* unused */),
    .io_y_pw       (/* unused */),
    .io_y_px       (_entries_barrier_11_io_y_px),
    .io_y_pr       (/* unused */),
    .io_y_ppp      (/* unused */),
    .io_y_pal      (/* unused */),
    .io_y_paa      (/* unused */),
    .io_y_eff      (/* unused */),
    .io_y_c        (_entries_barrier_11_io_y_c)
  );
  OptimizationBarrier_TLBEntryData entries_barrier_12 (
    .io_x_ppn      (special_entry_data_0[41:22]),
    .io_x_u        (special_entry_data_0[21]),
    .io_x_ae_ptw   (special_entry_data_0[19]),
    .io_x_ae_final (special_entry_data_0[18]),
    .io_x_pf       (special_entry_data_0[16]),
    .io_x_gf       (special_entry_data_0[15]),
    .io_x_sw       (special_entry_data_0[14]),
    .io_x_sx       (special_entry_data_0[13]),
    .io_x_sr       (special_entry_data_0[12]),
    .io_x_pw       (special_entry_data_0[8]),
    .io_x_px       (special_entry_data_0[7]),
    .io_x_pr       (special_entry_data_0[6]),
    .io_x_ppp      (special_entry_data_0[5]),
    .io_x_pal      (special_entry_data_0[4]),
    .io_x_paa      (special_entry_data_0[3]),
    .io_x_eff      (special_entry_data_0[2]),
    .io_x_c        (special_entry_data_0[1]),
    .io_y_ppn      (_entries_barrier_12_io_y_ppn),
    .io_y_u        (_entries_barrier_12_io_y_u),
    .io_y_ae_ptw   (_entries_barrier_12_io_y_ae_ptw),
    .io_y_ae_final (_entries_barrier_12_io_y_ae_final),
    .io_y_pf       (_entries_barrier_12_io_y_pf),
    .io_y_gf       (_entries_barrier_12_io_y_gf),
    .io_y_sw       (/* unused */),
    .io_y_sx       (_entries_barrier_12_io_y_sx),
    .io_y_sr       (/* unused */),
    .io_y_pw       (/* unused */),
    .io_y_px       (/* unused */),
    .io_y_pr       (/* unused */),
    .io_y_ppp      (/* unused */),
    .io_y_pal      (/* unused */),
    .io_y_paa      (/* unused */),
    .io_y_eff      (/* unused */),
    .io_y_c        (/* unused */)
  );
  assign io_resp_miss = io_ptw_resp_valid | tlb_miss | multipleHits;
  assign io_resp_paddr =
    {(hitsVec_0 ? _entries_barrier_io_y_ppn : 20'h0)
       | (hitsVec_1 ? _entries_barrier_1_io_y_ppn : 20'h0)
       | (hitsVec_2 ? _entries_barrier_2_io_y_ppn : 20'h0)
       | (hitsVec_3 ? _entries_barrier_3_io_y_ppn : 20'h0)
       | (hitsVec_4 ? _entries_barrier_4_io_y_ppn : 20'h0)
       | (hitsVec_5 ? _entries_barrier_5_io_y_ppn : 20'h0)
       | (hitsVec_6 ? _entries_barrier_6_io_y_ppn : 20'h0)
       | (hitsVec_7 ? _entries_barrier_7_io_y_ppn : 20'h0)
       | (hitsVec_8
            ? {_entries_barrier_8_io_y_ppn[19:18],
               (ignore_1 ? io_req_bits_vaddr[29:21] : 9'h0)
                 | _entries_barrier_8_io_y_ppn[17:9],
               io_req_bits_vaddr[20:12] | _entries_barrier_8_io_y_ppn[8:0]}
            : 20'h0)
       | (hitsVec_9
            ? {_entries_barrier_9_io_y_ppn[19:18],
               (ignore_4 ? io_req_bits_vaddr[29:21] : 9'h0)
                 | _entries_barrier_9_io_y_ppn[17:9],
               io_req_bits_vaddr[20:12] | _entries_barrier_9_io_y_ppn[8:0]}
            : 20'h0)
       | (hitsVec_10
            ? {_entries_barrier_10_io_y_ppn[19:18],
               (ignore_7 ? io_req_bits_vaddr[29:21] : 9'h0)
                 | _entries_barrier_10_io_y_ppn[17:9],
               io_req_bits_vaddr[20:12] | _entries_barrier_10_io_y_ppn[8:0]}
            : 20'h0)
       | (hitsVec_11
            ? {_entries_barrier_11_io_y_ppn[19:18],
               (ignore_10 ? io_req_bits_vaddr[29:21] : 9'h0)
                 | _entries_barrier_11_io_y_ppn[17:9],
               io_req_bits_vaddr[20:12] | _entries_barrier_11_io_y_ppn[8:0]}
            : 20'h0)
       | (hitsVec_12
            ? {_entries_barrier_12_io_y_ppn[19:18],
               _GEN_1 | _entries_barrier_12_io_y_ppn[17:9],
               _GEN_2 | _entries_barrier_12_io_y_ppn[8:0]}
            : 20'h0) | (_GEN ? 20'h0 : io_req_bits_vaddr[31:12]),
     io_req_bits_vaddr[11:0]};
  assign io_resp_pf_inst =
    bad_va
    | (|((~(({13{io_req_bits_prv[0]}}
             ^ {_entries_barrier_12_io_y_u,
                _entries_barrier_11_io_y_u,
                _entries_barrier_10_io_y_u,
                _entries_barrier_9_io_y_u,
                _entries_barrier_8_io_y_u,
                _entries_barrier_7_io_y_u,
                _entries_barrier_6_io_y_u,
                _entries_barrier_5_io_y_u,
                _entries_barrier_4_io_y_u,
                _entries_barrier_3_io_y_u,
                _entries_barrier_2_io_y_u,
                _entries_barrier_1_io_y_u,
                _entries_barrier_io_y_u})
            & {_entries_barrier_12_io_y_sx,
               _entries_barrier_11_io_y_sx,
               _entries_barrier_10_io_y_sx,
               _entries_barrier_9_io_y_sx,
               _entries_barrier_8_io_y_sx,
               _entries_barrier_7_io_y_sx,
               _entries_barrier_6_io_y_sx,
               _entries_barrier_5_io_y_sx,
               _entries_barrier_4_io_y_sx,
               _entries_barrier_3_io_y_sx,
               _entries_barrier_2_io_y_sx,
               _entries_barrier_1_io_y_sx,
               _entries_barrier_io_y_sx})
          & {~_entries_barrier_12_io_y_ae_ptw,
             ~_entries_barrier_11_io_y_ae_ptw,
             ~_entries_barrier_10_io_y_ae_ptw,
             ~_entries_barrier_9_io_y_ae_ptw,
             ~_entries_barrier_8_io_y_ae_ptw,
             ~_entries_barrier_7_io_y_ae_ptw,
             ~_entries_barrier_6_io_y_ae_ptw,
             ~_entries_barrier_5_io_y_ae_ptw,
             ~_entries_barrier_4_io_y_ae_ptw,
             ~_entries_barrier_3_io_y_ae_ptw,
             ~_entries_barrier_2_io_y_ae_ptw,
             ~_entries_barrier_1_io_y_ae_ptw,
             ~_entries_barrier_io_y_ae_ptw}
          | {_entries_barrier_12_io_y_pf,
             _entries_barrier_11_io_y_pf,
             _entries_barrier_10_io_y_pf,
             _entries_barrier_9_io_y_pf,
             _entries_barrier_8_io_y_pf,
             _entries_barrier_7_io_y_pf,
             _entries_barrier_6_io_y_pf,
             _entries_barrier_5_io_y_pf,
             _entries_barrier_4_io_y_pf,
             _entries_barrier_3_io_y_pf,
             _entries_barrier_2_io_y_pf,
             _entries_barrier_1_io_y_pf,
             _entries_barrier_io_y_pf})
         & {~_entries_barrier_12_io_y_gf,
            ~_entries_barrier_11_io_y_gf,
            ~_entries_barrier_10_io_y_gf,
            ~_entries_barrier_9_io_y_gf,
            ~_entries_barrier_8_io_y_gf,
            ~_entries_barrier_7_io_y_gf,
            ~_entries_barrier_6_io_y_gf,
            ~_entries_barrier_5_io_y_gf,
            ~_entries_barrier_4_io_y_gf,
            ~_entries_barrier_3_io_y_gf,
            ~_entries_barrier_2_io_y_gf,
            ~_entries_barrier_1_io_y_gf,
            ~_entries_barrier_io_y_gf}
         & {hitsVec_12,
            hitsVec_11,
            hitsVec_10,
            hitsVec_9,
            hitsVec_8,
            hitsVec_7,
            hitsVec_6,
            hitsVec_5,
            hitsVec_4,
            hitsVec_3,
            hitsVec_2,
            hitsVec_1,
            hitsVec_0}));
  assign io_resp_ae_inst =
    |(~({{2{newEntry_px}},
         _entries_barrier_11_io_y_px,
         _entries_barrier_10_io_y_px,
         _entries_barrier_9_io_y_px,
         _entries_barrier_8_io_y_px,
         _entries_barrier_7_io_y_px,
         _entries_barrier_6_io_y_px,
         _entries_barrier_5_io_y_px,
         _entries_barrier_4_io_y_px,
         _entries_barrier_3_io_y_px,
         _entries_barrier_2_io_y_px,
         _entries_barrier_1_io_y_px,
         _entries_barrier_io_y_px}
        & {1'h1,
           ~(_entries_barrier_12_io_y_ae_ptw | _entries_barrier_12_io_y_ae_final),
           ~(_entries_barrier_11_io_y_ae_ptw | _entries_barrier_11_io_y_ae_final),
           ~(_entries_barrier_10_io_y_ae_ptw | _entries_barrier_10_io_y_ae_final),
           ~(_entries_barrier_9_io_y_ae_ptw | _entries_barrier_9_io_y_ae_final),
           ~(_entries_barrier_8_io_y_ae_ptw | _entries_barrier_8_io_y_ae_final),
           ~(_entries_barrier_7_io_y_ae_ptw | _entries_barrier_7_io_y_ae_final),
           ~(_entries_barrier_6_io_y_ae_ptw | _entries_barrier_6_io_y_ae_final),
           ~(_entries_barrier_5_io_y_ae_ptw | _entries_barrier_5_io_y_ae_final),
           ~(_entries_barrier_4_io_y_ae_ptw | _entries_barrier_4_io_y_ae_final),
           ~(_entries_barrier_3_io_y_ae_ptw | _entries_barrier_3_io_y_ae_final),
           ~(_entries_barrier_2_io_y_ae_ptw | _entries_barrier_2_io_y_ae_final),
           ~(_entries_barrier_1_io_y_ae_ptw | _entries_barrier_1_io_y_ae_final),
           ~(_entries_barrier_io_y_ae_ptw | _entries_barrier_io_y_ae_final)}) & hits);
  assign io_resp_cacheable =
    |({{2{_pma_io_resp_cacheable}},
       _entries_barrier_11_io_y_c,
       _entries_barrier_10_io_y_c,
       _entries_barrier_9_io_y_c,
       _entries_barrier_8_io_y_c,
       _entries_barrier_7_io_y_c,
       _entries_barrier_6_io_y_c,
       _entries_barrier_5_io_y_c,
       _entries_barrier_4_io_y_c,
       _entries_barrier_3_io_y_c,
       _entries_barrier_2_io_y_c,
       _entries_barrier_1_io_y_c,
       _entries_barrier_io_y_c} & hits);
  assign io_ptw_req_valid = _GEN_0;
  assign io_ptw_req_bits_valid = ~io_kill;
  assign io_ptw_req_bits_bits_addr = r_refill_tag;
  assign io_ptw_req_bits_bits_need_gpa = r_need_gpa;
  assign io_ptw_req_bits_bits_vstage1 = r_vstage1_en;
  assign io_ptw_req_bits_bits_stage2 = r_stage2_en;
endmodule

module BTB(
  input         clock,
                reset,
  input  [38:0] io_req_bits_addr,
  input         io_btb_update_valid,
  input  [4:0]  io_btb_update_bits_prediction_entry,
  input  [38:0] io_btb_update_bits_pc,
  input         io_btb_update_bits_isValid,
  input  [38:0] io_btb_update_bits_br_pc,
  input  [1:0]  io_btb_update_bits_cfiType,
  input         io_bht_update_valid,
  input  [7:0]  io_bht_update_bits_prediction_history,
  input  [38:0] io_bht_update_bits_pc,
  input         io_bht_update_bits_branch,
                io_bht_update_bits_taken,
                io_bht_update_bits_mispredict,
                io_bht_advance_valid,
                io_bht_advance_bits_bht_value,
                io_ras_update_valid,
  input  [1:0]  io_ras_update_bits_cfiType,
  input  [38:0] io_ras_update_bits_returnAddr,
  input         io_flush,
  output        io_resp_valid,
                io_resp_bits_taken,
                io_resp_bits_bridx,
  output [38:0] io_resp_bits_target,
  output [4:0]  io_resp_bits_entry,
  output [7:0]  io_resp_bits_bht_history,
  output        io_resp_bits_bht_value,
                io_ras_head_valid,
  output [38:0] io_ras_head_bits
);

  wire             _table_ext_R0_data;
  reg  [12:0]      idxs_0;
  reg  [12:0]      idxs_1;
  reg  [12:0]      idxs_2;
  reg  [12:0]      idxs_3;
  reg  [12:0]      idxs_4;
  reg  [12:0]      idxs_5;
  reg  [12:0]      idxs_6;
  reg  [12:0]      idxs_7;
  reg  [12:0]      idxs_8;
  reg  [12:0]      idxs_9;
  reg  [12:0]      idxs_10;
  reg  [12:0]      idxs_11;
  reg  [12:0]      idxs_12;
  reg  [12:0]      idxs_13;
  reg  [12:0]      idxs_14;
  reg  [12:0]      idxs_15;
  reg  [12:0]      idxs_16;
  reg  [12:0]      idxs_17;
  reg  [12:0]      idxs_18;
  reg  [12:0]      idxs_19;
  reg  [12:0]      idxs_20;
  reg  [12:0]      idxs_21;
  reg  [12:0]      idxs_22;
  reg  [12:0]      idxs_23;
  reg  [12:0]      idxs_24;
  reg  [12:0]      idxs_25;
  reg  [12:0]      idxs_26;
  reg  [12:0]      idxs_27;
  reg  [2:0]       idxPages_0;
  reg  [2:0]       idxPages_1;
  reg  [2:0]       idxPages_2;
  reg  [2:0]       idxPages_3;
  reg  [2:0]       idxPages_4;
  reg  [2:0]       idxPages_5;
  reg  [2:0]       idxPages_6;
  reg  [2:0]       idxPages_7;
  reg  [2:0]       idxPages_8;
  reg  [2:0]       idxPages_9;
  reg  [2:0]       idxPages_10;
  reg  [2:0]       idxPages_11;
  reg  [2:0]       idxPages_12;
  reg  [2:0]       idxPages_13;
  reg  [2:0]       idxPages_14;
  reg  [2:0]       idxPages_15;
  reg  [2:0]       idxPages_16;
  reg  [2:0]       idxPages_17;
  reg  [2:0]       idxPages_18;
  reg  [2:0]       idxPages_19;
  reg  [2:0]       idxPages_20;
  reg  [2:0]       idxPages_21;
  reg  [2:0]       idxPages_22;
  reg  [2:0]       idxPages_23;
  reg  [2:0]       idxPages_24;
  reg  [2:0]       idxPages_25;
  reg  [2:0]       idxPages_26;
  reg  [2:0]       idxPages_27;
  reg  [12:0]      tgts_0;
  reg  [12:0]      tgts_1;
  reg  [12:0]      tgts_2;
  reg  [12:0]      tgts_3;
  reg  [12:0]      tgts_4;
  reg  [12:0]      tgts_5;
  reg  [12:0]      tgts_6;
  reg  [12:0]      tgts_7;
  reg  [12:0]      tgts_8;
  reg  [12:0]      tgts_9;
  reg  [12:0]      tgts_10;
  reg  [12:0]      tgts_11;
  reg  [12:0]      tgts_12;
  reg  [12:0]      tgts_13;
  reg  [12:0]      tgts_14;
  reg  [12:0]      tgts_15;
  reg  [12:0]      tgts_16;
  reg  [12:0]      tgts_17;
  reg  [12:0]      tgts_18;
  reg  [12:0]      tgts_19;
  reg  [12:0]      tgts_20;
  reg  [12:0]      tgts_21;
  reg  [12:0]      tgts_22;
  reg  [12:0]      tgts_23;
  reg  [12:0]      tgts_24;
  reg  [12:0]      tgts_25;
  reg  [12:0]      tgts_26;
  reg  [12:0]      tgts_27;
  reg  [2:0]       tgtPages_0;
  reg  [2:0]       tgtPages_1;
  reg  [2:0]       tgtPages_2;
  reg  [2:0]       tgtPages_3;
  reg  [2:0]       tgtPages_4;
  reg  [2:0]       tgtPages_5;
  reg  [2:0]       tgtPages_6;
  reg  [2:0]       tgtPages_7;
  reg  [2:0]       tgtPages_8;
  reg  [2:0]       tgtPages_9;
  reg  [2:0]       tgtPages_10;
  reg  [2:0]       tgtPages_11;
  reg  [2:0]       tgtPages_12;
  reg  [2:0]       tgtPages_13;
  reg  [2:0]       tgtPages_14;
  reg  [2:0]       tgtPages_15;
  reg  [2:0]       tgtPages_16;
  reg  [2:0]       tgtPages_17;
  reg  [2:0]       tgtPages_18;
  reg  [2:0]       tgtPages_19;
  reg  [2:0]       tgtPages_20;
  reg  [2:0]       tgtPages_21;
  reg  [2:0]       tgtPages_22;
  reg  [2:0]       tgtPages_23;
  reg  [2:0]       tgtPages_24;
  reg  [2:0]       tgtPages_25;
  reg  [2:0]       tgtPages_26;
  reg  [2:0]       tgtPages_27;
  reg  [24:0]      pages_0;
  reg  [24:0]      pages_1;
  reg  [24:0]      pages_2;
  reg  [24:0]      pages_3;
  reg  [24:0]      pages_4;
  reg  [24:0]      pages_5;
  reg  [5:0]       pageValid;
  wire [24:0]      pagesMasked_4 = pageValid[4] ? pages_4 : 25'h0;
  wire [24:0]      pagesMasked_5 = pageValid[5] ? pages_5 : 25'h0;
  reg  [27:0]      isValid;
  reg  [1:0]       cfiType_0;
  reg  [1:0]       cfiType_1;
  reg  [1:0]       cfiType_2;
  reg  [1:0]       cfiType_3;
  reg  [1:0]       cfiType_4;
  reg  [1:0]       cfiType_5;
  reg  [1:0]       cfiType_6;
  reg  [1:0]       cfiType_7;
  reg  [1:0]       cfiType_8;
  reg  [1:0]       cfiType_9;
  reg  [1:0]       cfiType_10;
  reg  [1:0]       cfiType_11;
  reg  [1:0]       cfiType_12;
  reg  [1:0]       cfiType_13;
  reg  [1:0]       cfiType_14;
  reg  [1:0]       cfiType_15;
  reg  [1:0]       cfiType_16;
  reg  [1:0]       cfiType_17;
  reg  [1:0]       cfiType_18;
  reg  [1:0]       cfiType_19;
  reg  [1:0]       cfiType_20;
  reg  [1:0]       cfiType_21;
  reg  [1:0]       cfiType_22;
  reg  [1:0]       cfiType_23;
  reg  [1:0]       cfiType_24;
  reg  [1:0]       cfiType_25;
  reg  [1:0]       cfiType_26;
  reg  [1:0]       cfiType_27;
  reg              brIdx_0;
  reg              brIdx_1;
  reg              brIdx_2;
  reg              brIdx_3;
  reg              brIdx_4;
  reg              brIdx_5;
  reg              brIdx_6;
  reg              brIdx_7;
  reg              brIdx_8;
  reg              brIdx_9;
  reg              brIdx_10;
  reg              brIdx_11;
  reg              brIdx_12;
  reg              brIdx_13;
  reg              brIdx_14;
  reg              brIdx_15;
  reg              brIdx_16;
  reg              brIdx_17;
  reg              brIdx_18;
  reg              brIdx_19;
  reg              brIdx_20;
  reg              brIdx_21;
  reg              brIdx_22;
  reg              brIdx_23;
  reg              brIdx_24;
  reg              brIdx_25;
  reg              brIdx_26;
  reg              brIdx_27;
  reg              r_btb_update_pipe_v;
  reg  [4:0]       r_btb_update_pipe_b_prediction_entry;
  reg  [38:0]      r_btb_update_pipe_b_pc;
  reg              r_btb_update_pipe_b_isValid;
  reg  [38:0]      r_btb_update_pipe_b_br_pc;
  reg  [1:0]       r_btb_update_pipe_b_cfiType;
  wire [5:0]       pageHit =
    pageValid
    & {pages_5 == io_req_bits_addr[38:14],
       pages_4 == io_req_bits_addr[38:14],
       pages_3 == io_req_bits_addr[38:14],
       pages_2 == io_req_bits_addr[38:14],
       pages_1 == io_req_bits_addr[38:14],
       pages_0 == io_req_bits_addr[38:14]};
  wire [27:0]      idxHit =
    {idxs_27 == io_req_bits_addr[13:1],
     idxs_26 == io_req_bits_addr[13:1],
     idxs_25 == io_req_bits_addr[13:1],
     idxs_24 == io_req_bits_addr[13:1],
     idxs_23 == io_req_bits_addr[13:1],
     idxs_22 == io_req_bits_addr[13:1],
     idxs_21 == io_req_bits_addr[13:1],
     idxs_20 == io_req_bits_addr[13:1],
     idxs_19 == io_req_bits_addr[13:1],
     idxs_18 == io_req_bits_addr[13:1],
     idxs_17 == io_req_bits_addr[13:1],
     idxs_16 == io_req_bits_addr[13:1],
     idxs_15 == io_req_bits_addr[13:1],
     idxs_14 == io_req_bits_addr[13:1],
     idxs_13 == io_req_bits_addr[13:1],
     idxs_12 == io_req_bits_addr[13:1],
     idxs_11 == io_req_bits_addr[13:1],
     idxs_10 == io_req_bits_addr[13:1],
     idxs_9 == io_req_bits_addr[13:1],
     idxs_8 == io_req_bits_addr[13:1],
     idxs_7 == io_req_bits_addr[13:1],
     idxs_6 == io_req_bits_addr[13:1],
     idxs_5 == io_req_bits_addr[13:1],
     idxs_4 == io_req_bits_addr[13:1],
     idxs_3 == io_req_bits_addr[13:1],
     idxs_2 == io_req_bits_addr[13:1],
     idxs_1 == io_req_bits_addr[13:1],
     idxs_0 == io_req_bits_addr[13:1]} & isValid;
  reg  [2:0]       nextPageRepl;
  reg  [26:0]      state_reg;
  reg              r_resp_pipe_v;
  reg              r_resp_pipe_b_taken;
  reg  [4:0]       r_resp_pipe_b_entry;
  wire [6:0]       _GEN =
    {pageHit, 1'h0}
    >> ((idxHit[0] ? idxPages_0 : 3'h0) | (idxHit[1] ? idxPages_1 : 3'h0)
        | (idxHit[2] ? idxPages_2 : 3'h0) | (idxHit[3] ? idxPages_3 : 3'h0)
        | (idxHit[4] ? idxPages_4 : 3'h0) | (idxHit[5] ? idxPages_5 : 3'h0)
        | (idxHit[6] ? idxPages_6 : 3'h0) | (idxHit[7] ? idxPages_7 : 3'h0)
        | (idxHit[8] ? idxPages_8 : 3'h0) | (idxHit[9] ? idxPages_9 : 3'h0)
        | (idxHit[10] ? idxPages_10 : 3'h0) | (idxHit[11] ? idxPages_11 : 3'h0)
        | (idxHit[12] ? idxPages_12 : 3'h0) | (idxHit[13] ? idxPages_13 : 3'h0)
        | (idxHit[14] ? idxPages_14 : 3'h0) | (idxHit[15] ? idxPages_15 : 3'h0)
        | (idxHit[16] ? idxPages_16 : 3'h0) | (idxHit[17] ? idxPages_17 : 3'h0)
        | (idxHit[18] ? idxPages_18 : 3'h0) | (idxHit[19] ? idxPages_19 : 3'h0)
        | (idxHit[20] ? idxPages_20 : 3'h0) | (idxHit[21] ? idxPages_21 : 3'h0)
        | (idxHit[22] ? idxPages_22 : 3'h0) | (idxHit[23] ? idxPages_23 : 3'h0)
        | (idxHit[24] ? idxPages_24 : 3'h0) | (idxHit[25] ? idxPages_25 : 3'h0)
        | (idxHit[26] ? idxPages_26 : 3'h0) | (idxHit[27] ? idxPages_27 : 3'h0));
  wire [7:0][24:0] _GEN_0 =
    {{pagesMasked_5},
     {pagesMasked_4},
     {pagesMasked_5},
     {pagesMasked_4},
     {pageValid[3] ? pages_3 : 25'h0},
     {pageValid[2] ? pages_2 : 25'h0},
     {pageValid[1] ? pages_1 : 25'h0},
     {pageValid[0] ? pages_0 : 25'h0}};
  wire [14:0]      _GEN_1 = {4'h0, idxHit[27:17]} | idxHit[15:1];
  wire [6:0]       _GEN_2 = _GEN_1[14:8] | _GEN_1[6:0];
  wire [2:0]       _GEN_3 = _GEN_2[6:4] | _GEN_2[2:0];
  wire [4:0]       _io_resp_bits_entry_output =
    {|(idxHit[27:16]),
     |(_GEN_1[14:7]),
     |(_GEN_2[6:3]),
     |(_GEN_3[2:1]),
     _GEN_3[2] | _GEN_3[0]};
  reg  [7:0]       history;
  reg  [9:0]       reset_waddr;
  wire [7:0]       _GEN_4 = history * 8'hDD;
  wire             res_value = reset_waddr[9] & _table_ext_R0_data;
  wire             _GEN_5 = io_bht_update_valid & io_bht_update_bits_branch;
  wire [7:0]       _GEN_6 = io_bht_update_bits_prediction_history * 8'hDD;
  wire             _GEN_7 =
    ~res_value
    & (|(idxHit
         & {cfiType_27 == 2'h0,
            cfiType_26 == 2'h0,
            cfiType_25 == 2'h0,
            cfiType_24 == 2'h0,
            cfiType_23 == 2'h0,
            cfiType_22 == 2'h0,
            cfiType_21 == 2'h0,
            cfiType_20 == 2'h0,
            cfiType_19 == 2'h0,
            cfiType_18 == 2'h0,
            cfiType_17 == 2'h0,
            cfiType_16 == 2'h0,
            cfiType_15 == 2'h0,
            cfiType_14 == 2'h0,
            cfiType_13 == 2'h0,
            cfiType_12 == 2'h0,
            cfiType_11 == 2'h0,
            cfiType_10 == 2'h0,
            cfiType_9 == 2'h0,
            cfiType_8 == 2'h0,
            cfiType_7 == 2'h0,
            cfiType_6 == 2'h0,
            cfiType_5 == 2'h0,
            cfiType_4 == 2'h0,
            cfiType_3 == 2'h0,
            cfiType_2 == 2'h0,
            cfiType_1 == 2'h0,
            cfiType_0 == 2'h0}));
  reg  [2:0]       count;
  reg  [2:0]       pos;
  reg  [38:0]      stack_0;
  reg  [38:0]      stack_1;
  reg  [38:0]      stack_2;
  reg  [38:0]      stack_3;
  reg  [38:0]      stack_4;
  reg  [38:0]      stack_5;
  wire [7:0][38:0] _GEN_8 =
    {{stack_0},
     {stack_0},
     {stack_5},
     {stack_4},
     {stack_3},
     {stack_2},
     {stack_1},
     {stack_0}};
  wire [38:0]      _GEN_9 = _GEN_8[pos];
  always @(posedge clock) begin
    automatic logic [5:0] updatePageHit;
    automatic logic [7:0] idxPageRepl =
      {2'h0, pageHit[4:0], pageHit[5]} | ((|pageHit) ? 8'h0 : 8'h1 << nextPageRepl);
    automatic logic [7:0] idxPageUpdateOH;
    automatic logic [2:0] _GEN_10;
    automatic logic       _GEN_11;
    automatic logic [5:0] _GEN_12;
    automatic logic       samePage =
      r_btb_update_pipe_b_pc[38:14] == io_req_bits_addr[38:14];
    automatic logic       doTgtPageRepl;
    automatic logic [7:0] tgtPageRepl;
    automatic logic [6:0] _GEN_13;
    automatic logic [2:0] _GEN_14;
    automatic logic [2:0] tgtPageUpdate;
    automatic logic [5:0] _GEN_15;
    automatic logic [4:0] waddr;
    automatic logic [2:0] _GEN_16;
    automatic logic [4:0] _GEN_17;
    automatic logic [4:0] _GEN_18;
    automatic logic       _GEN_19;
    automatic logic       _GEN_20;
    automatic logic [2:0] _GEN_21;
    automatic logic [2:0] nextPos;
    updatePageHit =
      pageValid
      & {pages_5 == r_btb_update_pipe_b_pc[38:14],
         pages_4 == r_btb_update_pipe_b_pc[38:14],
         pages_3 == r_btb_update_pipe_b_pc[38:14],
         pages_2 == r_btb_update_pipe_b_pc[38:14],
         pages_1 == r_btb_update_pipe_b_pc[38:14],
         pages_0 == r_btb_update_pipe_b_pc[38:14]};
    idxPageUpdateOH = (|updatePageHit) ? {2'h0, updatePageHit} : idxPageRepl;
    _GEN_10 = idxPageUpdateOH[7:5] | idxPageUpdateOH[3:1];
    _GEN_11 = _GEN_10[2] | _GEN_10[0];
    _GEN_12 = (|updatePageHit) ? 6'h0 : idxPageRepl[5:0];
    doTgtPageRepl = ~samePage & ~(|pageHit);
    tgtPageRepl =
      samePage ? idxPageUpdateOH : {2'h0, idxPageUpdateOH[4:0], idxPageUpdateOH[5]};
    _GEN_13 = {2'h0, pageHit[5:1]} | ((|pageHit) ? 7'h0 : tgtPageRepl[7:1]);
    _GEN_14 = _GEN_13[6:4] | _GEN_13[2:0];
    tgtPageUpdate = {|(_GEN_13[6:3]), |(_GEN_14[2:1]), _GEN_14[2] | _GEN_14[0]};
    _GEN_15 = doTgtPageRepl ? tgtPageRepl[5:0] : 6'h0;
    waddr =
      r_btb_update_pipe_b_prediction_entry[4:2] != 3'h7
        ? r_btb_update_pipe_b_prediction_entry
        : {state_reg[26],
           state_reg[26]
             ? {state_reg[25],
                state_reg[25]
                  ? {1'h0, state_reg[24], state_reg[24] ? state_reg[23] : state_reg[22]}
                  : {state_reg[21],
                     state_reg[21]
                       ? {state_reg[20], state_reg[20] ? state_reg[19] : state_reg[18]}
                       : {state_reg[17], state_reg[17] ? state_reg[16] : state_reg[15]}}}
             : {state_reg[14],
                state_reg[14]
                  ? {state_reg[13],
                     state_reg[13]
                       ? {state_reg[12], state_reg[12] ? state_reg[11] : state_reg[10]}
                       : {state_reg[9], state_reg[9] ? state_reg[8] : state_reg[7]}}
                  : {state_reg[6],
                     state_reg[6]
                       ? {state_reg[5], state_reg[5] ? state_reg[4] : state_reg[3]}
                       : {state_reg[2], state_reg[2] ? state_reg[1] : state_reg[0]}}}};
    _GEN_16 = {|(idxPageUpdateOH[7:4]), |(_GEN_10[2:1]), _GEN_11} + 3'h1;
    _GEN_17 = _GEN_11 ? _GEN_15[4:0] : _GEN_12[4:0];
    _GEN_18 = _GEN_11 ? _GEN_12[5:1] : _GEN_15[5:1];
    _GEN_19 = io_ras_update_bits_cfiType == 2'h2;
    _GEN_20 = pos < 3'h5;
    _GEN_21 = pos + 3'h1;
    nextPos = _GEN_20 ? _GEN_21 : 3'h0;
    if (r_btb_update_pipe_v & waddr == 5'h0) begin
      idxs_0 <= r_btb_update_pipe_b_pc[13:1];
      idxPages_0 <= _GEN_16;
      tgts_0 <= io_req_bits_addr[13:1];
      tgtPages_0 <= tgtPageUpdate;
      cfiType_0 <= r_btb_update_pipe_b_cfiType;
      brIdx_0 <= r_btb_update_pipe_b_br_pc[1];
    end
    if (r_btb_update_pipe_v & waddr == 5'h1) begin
      idxs_1 <= r_btb_update_pipe_b_pc[13:1];
      idxPages_1 <= _GEN_16;
      tgts_1 <= io_req_bits_addr[13:1];
      tgtPages_1 <= tgtPageUpdate;
      cfiType_1 <= r_btb_update_pipe_b_cfiType;
      brIdx_1 <= r_btb_update_pipe_b_br_pc[1];
    end
    if (r_btb_update_pipe_v & waddr == 5'h2) begin
      idxs_2 <= r_btb_update_pipe_b_pc[13:1];
      idxPages_2 <= _GEN_16;
      tgts_2 <= io_req_bits_addr[13:1];
      tgtPages_2 <= tgtPageUpdate;
      cfiType_2 <= r_btb_update_pipe_b_cfiType;
      brIdx_2 <= r_btb_update_pipe_b_br_pc[1];
    end
    if (r_btb_update_pipe_v & waddr == 5'h3) begin
      idxs_3 <= r_btb_update_pipe_b_pc[13:1];
      idxPages_3 <= _GEN_16;
      tgts_3 <= io_req_bits_addr[13:1];
      tgtPages_3 <= tgtPageUpdate;
      cfiType_3 <= r_btb_update_pipe_b_cfiType;
      brIdx_3 <= r_btb_update_pipe_b_br_pc[1];
    end
    if (r_btb_update_pipe_v & waddr == 5'h4) begin
      idxs_4 <= r_btb_update_pipe_b_pc[13:1];
      idxPages_4 <= _GEN_16;
      tgts_4 <= io_req_bits_addr[13:1];
      tgtPages_4 <= tgtPageUpdate;
      cfiType_4 <= r_btb_update_pipe_b_cfiType;
      brIdx_4 <= r_btb_update_pipe_b_br_pc[1];
    end
    if (r_btb_update_pipe_v & waddr == 5'h5) begin
      idxs_5 <= r_btb_update_pipe_b_pc[13:1];
      idxPages_5 <= _GEN_16;
      tgts_5 <= io_req_bits_addr[13:1];
      tgtPages_5 <= tgtPageUpdate;
      cfiType_5 <= r_btb_update_pipe_b_cfiType;
      brIdx_5 <= r_btb_update_pipe_b_br_pc[1];
    end
    if (r_btb_update_pipe_v & waddr == 5'h6) begin
      idxs_6 <= r_btb_update_pipe_b_pc[13:1];
      idxPages_6 <= _GEN_16;
      tgts_6 <= io_req_bits_addr[13:1];
      tgtPages_6 <= tgtPageUpdate;
      cfiType_6 <= r_btb_update_pipe_b_cfiType;
      brIdx_6 <= r_btb_update_pipe_b_br_pc[1];
    end
    if (r_btb_update_pipe_v & waddr == 5'h7) begin
      idxs_7 <= r_btb_update_pipe_b_pc[13:1];
      idxPages_7 <= _GEN_16;
      tgts_7 <= io_req_bits_addr[13:1];
      tgtPages_7 <= tgtPageUpdate;
      cfiType_7 <= r_btb_update_pipe_b_cfiType;
      brIdx_7 <= r_btb_update_pipe_b_br_pc[1];
    end
    if (r_btb_update_pipe_v & waddr == 5'h8) begin
      idxs_8 <= r_btb_update_pipe_b_pc[13:1];
      idxPages_8 <= _GEN_16;
      tgts_8 <= io_req_bits_addr[13:1];
      tgtPages_8 <= tgtPageUpdate;
      cfiType_8 <= r_btb_update_pipe_b_cfiType;
      brIdx_8 <= r_btb_update_pipe_b_br_pc[1];
    end
    if (r_btb_update_pipe_v & waddr == 5'h9) begin
      idxs_9 <= r_btb_update_pipe_b_pc[13:1];
      idxPages_9 <= _GEN_16;
      tgts_9 <= io_req_bits_addr[13:1];
      tgtPages_9 <= tgtPageUpdate;
      cfiType_9 <= r_btb_update_pipe_b_cfiType;
      brIdx_9 <= r_btb_update_pipe_b_br_pc[1];
    end
    if (r_btb_update_pipe_v & waddr == 5'hA) begin
      idxs_10 <= r_btb_update_pipe_b_pc[13:1];
      idxPages_10 <= _GEN_16;
      tgts_10 <= io_req_bits_addr[13:1];
      tgtPages_10 <= tgtPageUpdate;
      cfiType_10 <= r_btb_update_pipe_b_cfiType;
      brIdx_10 <= r_btb_update_pipe_b_br_pc[1];
    end
    if (r_btb_update_pipe_v & waddr == 5'hB) begin
      idxs_11 <= r_btb_update_pipe_b_pc[13:1];
      idxPages_11 <= _GEN_16;
      tgts_11 <= io_req_bits_addr[13:1];
      tgtPages_11 <= tgtPageUpdate;
      cfiType_11 <= r_btb_update_pipe_b_cfiType;
      brIdx_11 <= r_btb_update_pipe_b_br_pc[1];
    end
    if (r_btb_update_pipe_v & waddr == 5'hC) begin
      idxs_12 <= r_btb_update_pipe_b_pc[13:1];
      idxPages_12 <= _GEN_16;
      tgts_12 <= io_req_bits_addr[13:1];
      tgtPages_12 <= tgtPageUpdate;
      cfiType_12 <= r_btb_update_pipe_b_cfiType;
      brIdx_12 <= r_btb_update_pipe_b_br_pc[1];
    end
    if (r_btb_update_pipe_v & waddr == 5'hD) begin
      idxs_13 <= r_btb_update_pipe_b_pc[13:1];
      idxPages_13 <= _GEN_16;
      tgts_13 <= io_req_bits_addr[13:1];
      tgtPages_13 <= tgtPageUpdate;
      cfiType_13 <= r_btb_update_pipe_b_cfiType;
      brIdx_13 <= r_btb_update_pipe_b_br_pc[1];
    end
    if (r_btb_update_pipe_v & waddr == 5'hE) begin
      idxs_14 <= r_btb_update_pipe_b_pc[13:1];
      idxPages_14 <= _GEN_16;
      tgts_14 <= io_req_bits_addr[13:1];
      tgtPages_14 <= tgtPageUpdate;
      cfiType_14 <= r_btb_update_pipe_b_cfiType;
      brIdx_14 <= r_btb_update_pipe_b_br_pc[1];
    end
    if (r_btb_update_pipe_v & waddr == 5'hF) begin
      idxs_15 <= r_btb_update_pipe_b_pc[13:1];
      idxPages_15 <= _GEN_16;
      tgts_15 <= io_req_bits_addr[13:1];
      tgtPages_15 <= tgtPageUpdate;
      cfiType_15 <= r_btb_update_pipe_b_cfiType;
      brIdx_15 <= r_btb_update_pipe_b_br_pc[1];
    end
    if (r_btb_update_pipe_v & waddr == 5'h10) begin
      idxs_16 <= r_btb_update_pipe_b_pc[13:1];
      idxPages_16 <= _GEN_16;
      tgts_16 <= io_req_bits_addr[13:1];
      tgtPages_16 <= tgtPageUpdate;
      cfiType_16 <= r_btb_update_pipe_b_cfiType;
      brIdx_16 <= r_btb_update_pipe_b_br_pc[1];
    end
    if (r_btb_update_pipe_v & waddr == 5'h11) begin
      idxs_17 <= r_btb_update_pipe_b_pc[13:1];
      idxPages_17 <= _GEN_16;
      tgts_17 <= io_req_bits_addr[13:1];
      tgtPages_17 <= tgtPageUpdate;
      cfiType_17 <= r_btb_update_pipe_b_cfiType;
      brIdx_17 <= r_btb_update_pipe_b_br_pc[1];
    end
    if (r_btb_update_pipe_v & waddr == 5'h12) begin
      idxs_18 <= r_btb_update_pipe_b_pc[13:1];
      idxPages_18 <= _GEN_16;
      tgts_18 <= io_req_bits_addr[13:1];
      tgtPages_18 <= tgtPageUpdate;
      cfiType_18 <= r_btb_update_pipe_b_cfiType;
      brIdx_18 <= r_btb_update_pipe_b_br_pc[1];
    end
    if (r_btb_update_pipe_v & waddr == 5'h13) begin
      idxs_19 <= r_btb_update_pipe_b_pc[13:1];
      idxPages_19 <= _GEN_16;
      tgts_19 <= io_req_bits_addr[13:1];
      tgtPages_19 <= tgtPageUpdate;
      cfiType_19 <= r_btb_update_pipe_b_cfiType;
      brIdx_19 <= r_btb_update_pipe_b_br_pc[1];
    end
    if (r_btb_update_pipe_v & waddr == 5'h14) begin
      idxs_20 <= r_btb_update_pipe_b_pc[13:1];
      idxPages_20 <= _GEN_16;
      tgts_20 <= io_req_bits_addr[13:1];
      tgtPages_20 <= tgtPageUpdate;
      cfiType_20 <= r_btb_update_pipe_b_cfiType;
      brIdx_20 <= r_btb_update_pipe_b_br_pc[1];
    end
    if (r_btb_update_pipe_v & waddr == 5'h15) begin
      idxs_21 <= r_btb_update_pipe_b_pc[13:1];
      idxPages_21 <= _GEN_16;
      tgts_21 <= io_req_bits_addr[13:1];
      tgtPages_21 <= tgtPageUpdate;
      cfiType_21 <= r_btb_update_pipe_b_cfiType;
      brIdx_21 <= r_btb_update_pipe_b_br_pc[1];
    end
    if (r_btb_update_pipe_v & waddr == 5'h16) begin
      idxs_22 <= r_btb_update_pipe_b_pc[13:1];
      idxPages_22 <= _GEN_16;
      tgts_22 <= io_req_bits_addr[13:1];
      tgtPages_22 <= tgtPageUpdate;
      cfiType_22 <= r_btb_update_pipe_b_cfiType;
      brIdx_22 <= r_btb_update_pipe_b_br_pc[1];
    end
    if (r_btb_update_pipe_v & waddr == 5'h17) begin
      idxs_23 <= r_btb_update_pipe_b_pc[13:1];
      idxPages_23 <= _GEN_16;
      tgts_23 <= io_req_bits_addr[13:1];
      tgtPages_23 <= tgtPageUpdate;
      cfiType_23 <= r_btb_update_pipe_b_cfiType;
      brIdx_23 <= r_btb_update_pipe_b_br_pc[1];
    end
    if (r_btb_update_pipe_v & waddr == 5'h18) begin
      idxs_24 <= r_btb_update_pipe_b_pc[13:1];
      idxPages_24 <= _GEN_16;
      tgts_24 <= io_req_bits_addr[13:1];
      tgtPages_24 <= tgtPageUpdate;
      cfiType_24 <= r_btb_update_pipe_b_cfiType;
      brIdx_24 <= r_btb_update_pipe_b_br_pc[1];
    end
    if (r_btb_update_pipe_v & waddr == 5'h19) begin
      idxs_25 <= r_btb_update_pipe_b_pc[13:1];
      idxPages_25 <= _GEN_16;
      tgts_25 <= io_req_bits_addr[13:1];
      tgtPages_25 <= tgtPageUpdate;
      cfiType_25 <= r_btb_update_pipe_b_cfiType;
      brIdx_25 <= r_btb_update_pipe_b_br_pc[1];
    end
    if (r_btb_update_pipe_v & waddr == 5'h1A) begin
      idxs_26 <= r_btb_update_pipe_b_pc[13:1];
      idxPages_26 <= _GEN_16;
      tgts_26 <= io_req_bits_addr[13:1];
      tgtPages_26 <= tgtPageUpdate;
      cfiType_26 <= r_btb_update_pipe_b_cfiType;
      brIdx_26 <= r_btb_update_pipe_b_br_pc[1];
    end
    if (r_btb_update_pipe_v & waddr == 5'h1B) begin
      idxs_27 <= r_btb_update_pipe_b_pc[13:1];
      idxPages_27 <= _GEN_16;
      tgts_27 <= io_req_bits_addr[13:1];
      tgtPages_27 <= tgtPageUpdate;
      cfiType_27 <= r_btb_update_pipe_b_cfiType;
      brIdx_27 <= r_btb_update_pipe_b_br_pc[1];
    end
    if (r_btb_update_pipe_v & _GEN_17[0]) begin
      if (_GEN_11)
        pages_0 <= io_req_bits_addr[38:14];
      else
        pages_0 <= r_btb_update_pipe_b_pc[38:14];
    end
    if (r_btb_update_pipe_v & _GEN_18[0]) begin
      if (_GEN_11)
        pages_1 <= r_btb_update_pipe_b_pc[38:14];
      else
        pages_1 <= io_req_bits_addr[38:14];
    end
    if (r_btb_update_pipe_v & _GEN_17[2]) begin
      if (_GEN_11)
        pages_2 <= io_req_bits_addr[38:14];
      else
        pages_2 <= r_btb_update_pipe_b_pc[38:14];
    end
    if (r_btb_update_pipe_v & _GEN_18[2]) begin
      if (_GEN_11)
        pages_3 <= r_btb_update_pipe_b_pc[38:14];
      else
        pages_3 <= io_req_bits_addr[38:14];
    end
    if (r_btb_update_pipe_v & _GEN_17[4]) begin
      if (_GEN_11)
        pages_4 <= io_req_bits_addr[38:14];
      else
        pages_4 <= r_btb_update_pipe_b_pc[38:14];
    end
    if (r_btb_update_pipe_v & _GEN_18[4]) begin
      if (_GEN_11)
        pages_5 <= r_btb_update_pipe_b_pc[38:14];
      else
        pages_5 <= io_req_bits_addr[38:14];
    end
    if (io_btb_update_valid) begin
      r_btb_update_pipe_b_prediction_entry <= io_btb_update_bits_prediction_entry;
      r_btb_update_pipe_b_pc <= io_btb_update_bits_pc;
      r_btb_update_pipe_b_isValid <= io_btb_update_bits_isValid;
      r_btb_update_pipe_b_br_pc <= io_btb_update_bits_br_pc;
      r_btb_update_pipe_b_cfiType <= io_btb_update_bits_cfiType;
    end
    if (_GEN[0]) begin
      r_resp_pipe_b_taken <= ~_GEN_7;
      r_resp_pipe_b_entry <= _io_resp_bits_entry_output;
    end
    if (io_ras_update_valid & _GEN_19 & nextPos == 3'h0)
      stack_0 <= io_ras_update_bits_returnAddr;
    if (io_ras_update_valid & _GEN_19 & nextPos == 3'h1)
      stack_1 <= io_ras_update_bits_returnAddr;
    if (io_ras_update_valid & _GEN_19 & nextPos == 3'h2)
      stack_2 <= io_ras_update_bits_returnAddr;
    if (io_ras_update_valid & _GEN_19 & nextPos == 3'h3)
      stack_3 <= io_ras_update_bits_returnAddr;
    if (io_ras_update_valid & _GEN_19 & nextPos == 3'h4)
      stack_4 <= io_ras_update_bits_returnAddr;
    if (io_ras_update_valid & _GEN_19 & nextPos == 3'h5)
      stack_5 <= io_ras_update_bits_returnAddr;
    if (reset) begin
      pageValid <= 6'h0;
      isValid <= 28'h0;
      r_btb_update_pipe_v <= 1'h0;
      nextPageRepl <= 3'h0;
      state_reg <= 27'h0;
      r_resp_pipe_v <= 1'h0;
      history <= 8'h0;
      reset_waddr <= 10'h0;
      count <= 3'h0;
      pos <= 3'h0;
    end
    else begin
      pageValid <= {6{r_btb_update_pipe_v}} & (_GEN_15 | _GEN_12) | pageValid;
      if (io_flush)
        isValid <= 28'h0;
      else begin
        automatic logic rightOne_1 = idxHit[1] | idxHit[2];
        automatic logic leftOne_2 = idxHit[0] | rightOne_1;
        automatic logic leftOne_4 = idxHit[3] | idxHit[4];
        automatic logic rightOne_4 = idxHit[5] | idxHit[6];
        automatic logic rightOne_5 = leftOne_4 | rightOne_4;
        automatic logic leftOne_6 = leftOne_2 | rightOne_5;
        automatic logic rightOne_7 = idxHit[8] | idxHit[9];
        automatic logic leftOne_9 = idxHit[7] | rightOne_7;
        automatic logic leftOne_11 = idxHit[10] | idxHit[11];
        automatic logic rightOne_10 = idxHit[12] | idxHit[13];
        automatic logic rightOne_11 = leftOne_11 | rightOne_10;
        automatic logic rightOne_12 = leftOne_9 | rightOne_11;
        automatic logic rightOne_14 = idxHit[15] | idxHit[16];
        automatic logic leftOne_16 = idxHit[14] | rightOne_14;
        automatic logic leftOne_18 = idxHit[17] | idxHit[18];
        automatic logic rightOne_17 = idxHit[19] | idxHit[20];
        automatic logic rightOne_18 = leftOne_18 | rightOne_17;
        automatic logic leftOne_20 = leftOne_16 | rightOne_18;
        automatic logic rightOne_20 = idxHit[22] | idxHit[23];
        automatic logic leftOne_23 = idxHit[21] | rightOne_20;
        automatic logic leftOne_25 = idxHit[24] | idxHit[25];
        automatic logic rightOne_23 = idxHit[26] | idxHit[27];
        automatic logic rightOne_24 = leftOne_25 | rightOne_23;
        automatic logic rightOne_25 = leftOne_23 | rightOne_24;
        if (idxHit[1] & idxHit[2] | idxHit[0] & rightOne_1 | idxHit[3] & idxHit[4]
            | idxHit[5] & idxHit[6] | leftOne_4 & rightOne_4 | leftOne_2 & rightOne_5
            | idxHit[8] & idxHit[9] | idxHit[7] & rightOne_7 | idxHit[10] & idxHit[11]
            | idxHit[12] & idxHit[13] | leftOne_11 & rightOne_10 | leftOne_9 & rightOne_11
            | leftOne_6 & rightOne_12 | idxHit[15] & idxHit[16] | idxHit[14] & rightOne_14
            | idxHit[17] & idxHit[18] | idxHit[19] & idxHit[20] | leftOne_18 & rightOne_17
            | leftOne_16 & rightOne_18 | idxHit[22] & idxHit[23] | idxHit[21]
            & rightOne_20 | idxHit[24] & idxHit[25] | idxHit[26] & idxHit[27] | leftOne_25
            & rightOne_23 | leftOne_23 & rightOne_24 | leftOne_20 & rightOne_25
            | (leftOne_6 | rightOne_12) & (leftOne_20 | rightOne_25))
          isValid <= isValid & ~idxHit;
        else if (r_btb_update_pipe_v) begin
          automatic logic [31:0] mask;
          mask = 32'h1 << waddr;
          isValid <=
            r_btb_update_pipe_b_isValid ? isValid | mask[27:0] : ~(mask[27:0]) & isValid;
        end
      end
      r_btb_update_pipe_v <= io_btb_update_valid;
      if (r_btb_update_pipe_v & (~(|updatePageHit) | doTgtPageRepl)) begin
        automatic logic [2:0] next;
        next = nextPageRepl + {1'h0, ~(|updatePageHit) & doTgtPageRepl ? 2'h2 : 2'h1};
        if (next > 3'h5)
          nextPageRepl <= {2'h0, next[0]};
        else
          nextPageRepl <= next;
      end
      if (r_resp_pipe_v & r_resp_pipe_b_taken | r_btb_update_pipe_v) begin
        automatic logic [4:0] state_reg_touch_way_sized;
        state_reg_touch_way_sized = r_btb_update_pipe_v ? waddr : r_resp_pipe_b_entry;
        state_reg <=
          {~(state_reg_touch_way_sized[4]),
           state_reg_touch_way_sized[4]
             ? {~(state_reg_touch_way_sized[3]),
                state_reg_touch_way_sized[3]
                  ? {~(state_reg_touch_way_sized[1]),
                     state_reg_touch_way_sized[1]
                       ? ~(state_reg_touch_way_sized[0])
                       : state_reg[23],
                     state_reg_touch_way_sized[1]
                       ? state_reg[22]
                       : ~(state_reg_touch_way_sized[0])}
                  : state_reg[24:22],
                state_reg_touch_way_sized[3]
                  ? state_reg[21:15]
                  : {~(state_reg_touch_way_sized[2]),
                     state_reg_touch_way_sized[2]
                       ? {~(state_reg_touch_way_sized[1]),
                          state_reg_touch_way_sized[1]
                            ? ~(state_reg_touch_way_sized[0])
                            : state_reg[19],
                          state_reg_touch_way_sized[1]
                            ? state_reg[18]
                            : ~(state_reg_touch_way_sized[0])}
                       : state_reg[20:18],
                     state_reg_touch_way_sized[2]
                       ? state_reg[17:15]
                       : {~(state_reg_touch_way_sized[1]),
                          state_reg_touch_way_sized[1]
                            ? ~(state_reg_touch_way_sized[0])
                            : state_reg[16],
                          state_reg_touch_way_sized[1]
                            ? state_reg[15]
                            : ~(state_reg_touch_way_sized[0])}}}
             : state_reg[25:15],
           state_reg_touch_way_sized[4]
             ? state_reg[14:0]
             : {~(state_reg_touch_way_sized[3]),
                state_reg_touch_way_sized[3]
                  ? {~(state_reg_touch_way_sized[2]),
                     state_reg_touch_way_sized[2]
                       ? {~(state_reg_touch_way_sized[1]),
                          state_reg_touch_way_sized[1]
                            ? ~(state_reg_touch_way_sized[0])
                            : state_reg[11],
                          state_reg_touch_way_sized[1]
                            ? state_reg[10]
                            : ~(state_reg_touch_way_sized[0])}
                       : state_reg[12:10],
                     state_reg_touch_way_sized[2]
                       ? state_reg[9:7]
                       : {~(state_reg_touch_way_sized[1]),
                          state_reg_touch_way_sized[1]
                            ? ~(state_reg_touch_way_sized[0])
                            : state_reg[8],
                          state_reg_touch_way_sized[1]
                            ? state_reg[7]
                            : ~(state_reg_touch_way_sized[0])}}
                  : state_reg[13:7],
                state_reg_touch_way_sized[3]
                  ? state_reg[6:0]
                  : {~(state_reg_touch_way_sized[2]),
                     state_reg_touch_way_sized[2]
                       ? {~(state_reg_touch_way_sized[1]),
                          state_reg_touch_way_sized[1]
                            ? ~(state_reg_touch_way_sized[0])
                            : state_reg[4],
                          state_reg_touch_way_sized[1]
                            ? state_reg[3]
                            : ~(state_reg_touch_way_sized[0])}
                       : state_reg[5:3],
                     state_reg_touch_way_sized[2]
                       ? state_reg[2:0]
                       : {~(state_reg_touch_way_sized[1]),
                          state_reg_touch_way_sized[1]
                            ? ~(state_reg_touch_way_sized[0])
                            : state_reg[1],
                          state_reg_touch_way_sized[1]
                            ? state_reg[0]
                            : ~(state_reg_touch_way_sized[0])}}}};
      end
      r_resp_pipe_v <= _GEN[0];
      if (io_bht_update_valid & io_bht_update_bits_mispredict)
        history <=
          io_bht_update_bits_branch
            ? {io_bht_update_bits_taken, io_bht_update_bits_prediction_history[7:1]}
            : io_bht_update_bits_prediction_history;
      else if (io_bht_advance_valid)
        history <= {io_bht_advance_bits_bht_value, history[7:1]};
      if (reset_waddr[9]) begin
      end
      else
        reset_waddr <= reset_waddr + 10'h1;
      if (io_ras_update_valid) begin
        if (_GEN_19) begin
          if (count[2:1] != 2'h3)
            count <= count + 3'h1;
          if (_GEN_20)
            pos <= _GEN_21;
          else
            pos <= 3'h0;
        end
        else if ((&io_ras_update_bits_cfiType) & (|count)) begin
          count <= count - 3'h1;
          if (|pos)
            pos <= pos - 3'h1;
          else
            pos <= 3'h5;
        end
      end
    end
  end // always @(posedge)
  table_combMem table_ext (
    .R0_addr
      ({io_req_bits_addr[10:4], io_req_bits_addr[3:2] ^ io_req_bits_addr[12:11]}
       ^ {_GEN_4[7:5], 6'h0}),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr
      (io_bht_update_valid & io_bht_update_bits_branch & reset_waddr[9]
         ? {io_bht_update_bits_pc[10:4],
            io_bht_update_bits_pc[3:2] ^ io_bht_update_bits_pc[12:11]}
           ^ {_GEN_6[7:5], 6'h0}
         : reset_waddr[8:0]),
    .W0_en   (_GEN_5 | ~(reset_waddr[9])),
    .W0_clk  (clock),
    .W0_data (_GEN_5 & reset_waddr[9] & io_bht_update_bits_taken),
    .R0_data (_table_ext_R0_data)
  );
  assign io_resp_valid = _GEN[0];
  assign io_resp_bits_taken = ~_GEN_7;
  assign io_resp_bits_bridx =
    idxHit[0] & brIdx_0 | idxHit[1] & brIdx_1 | idxHit[2] & brIdx_2 | idxHit[3] & brIdx_3
    | idxHit[4] & brIdx_4 | idxHit[5] & brIdx_5 | idxHit[6] & brIdx_6 | idxHit[7]
    & brIdx_7 | idxHit[8] & brIdx_8 | idxHit[9] & brIdx_9 | idxHit[10] & brIdx_10
    | idxHit[11] & brIdx_11 | idxHit[12] & brIdx_12 | idxHit[13] & brIdx_13 | idxHit[14]
    & brIdx_14 | idxHit[15] & brIdx_15 | idxHit[16] & brIdx_16 | idxHit[17] & brIdx_17
    | idxHit[18] & brIdx_18 | idxHit[19] & brIdx_19 | idxHit[20] & brIdx_20 | idxHit[21]
    & brIdx_21 | idxHit[22] & brIdx_22 | idxHit[23] & brIdx_23 | idxHit[24] & brIdx_24
    | idxHit[25] & brIdx_25 | idxHit[26] & brIdx_26 | idxHit[27] & brIdx_27;
  assign io_resp_bits_target =
    (|count)
    & (|(idxHit
         & {&cfiType_27,
            &cfiType_26,
            &cfiType_25,
            &cfiType_24,
            &cfiType_23,
            &cfiType_22,
            &cfiType_21,
            &cfiType_20,
            &cfiType_19,
            &cfiType_18,
            &cfiType_17,
            &cfiType_16,
            &cfiType_15,
            &cfiType_14,
            &cfiType_13,
            &cfiType_12,
            &cfiType_11,
            &cfiType_10,
            &cfiType_9,
            &cfiType_8,
            &cfiType_7,
            &cfiType_6,
            &cfiType_5,
            &cfiType_4,
            &cfiType_3,
            &cfiType_2,
            &cfiType_1,
            &cfiType_0}))
      ? _GEN_9
      : {_GEN_0[(idxHit[0] ? tgtPages_0 : 3'h0) | (idxHit[1] ? tgtPages_1 : 3'h0)
           | (idxHit[2] ? tgtPages_2 : 3'h0) | (idxHit[3] ? tgtPages_3 : 3'h0)
           | (idxHit[4] ? tgtPages_4 : 3'h0) | (idxHit[5] ? tgtPages_5 : 3'h0)
           | (idxHit[6] ? tgtPages_6 : 3'h0) | (idxHit[7] ? tgtPages_7 : 3'h0)
           | (idxHit[8] ? tgtPages_8 : 3'h0) | (idxHit[9] ? tgtPages_9 : 3'h0)
           | (idxHit[10] ? tgtPages_10 : 3'h0) | (idxHit[11] ? tgtPages_11 : 3'h0)
           | (idxHit[12] ? tgtPages_12 : 3'h0) | (idxHit[13] ? tgtPages_13 : 3'h0)
           | (idxHit[14] ? tgtPages_14 : 3'h0) | (idxHit[15] ? tgtPages_15 : 3'h0)
           | (idxHit[16] ? tgtPages_16 : 3'h0) | (idxHit[17] ? tgtPages_17 : 3'h0)
           | (idxHit[18] ? tgtPages_18 : 3'h0) | (idxHit[19] ? tgtPages_19 : 3'h0)
           | (idxHit[20] ? tgtPages_20 : 3'h0) | (idxHit[21] ? tgtPages_21 : 3'h0)
           | (idxHit[22] ? tgtPages_22 : 3'h0) | (idxHit[23] ? tgtPages_23 : 3'h0)
           | (idxHit[24] ? tgtPages_24 : 3'h0) | (idxHit[25] ? tgtPages_25 : 3'h0)
           | (idxHit[26] ? tgtPages_26 : 3'h0) | (idxHit[27] ? tgtPages_27 : 3'h0)],
         (idxHit[0] ? tgts_0 : 13'h0) | (idxHit[1] ? tgts_1 : 13'h0)
           | (idxHit[2] ? tgts_2 : 13'h0) | (idxHit[3] ? tgts_3 : 13'h0)
           | (idxHit[4] ? tgts_4 : 13'h0) | (idxHit[5] ? tgts_5 : 13'h0)
           | (idxHit[6] ? tgts_6 : 13'h0) | (idxHit[7] ? tgts_7 : 13'h0)
           | (idxHit[8] ? tgts_8 : 13'h0) | (idxHit[9] ? tgts_9 : 13'h0)
           | (idxHit[10] ? tgts_10 : 13'h0) | (idxHit[11] ? tgts_11 : 13'h0)
           | (idxHit[12] ? tgts_12 : 13'h0) | (idxHit[13] ? tgts_13 : 13'h0)
           | (idxHit[14] ? tgts_14 : 13'h0) | (idxHit[15] ? tgts_15 : 13'h0)
           | (idxHit[16] ? tgts_16 : 13'h0) | (idxHit[17] ? tgts_17 : 13'h0)
           | (idxHit[18] ? tgts_18 : 13'h0) | (idxHit[19] ? tgts_19 : 13'h0)
           | (idxHit[20] ? tgts_20 : 13'h0) | (idxHit[21] ? tgts_21 : 13'h0)
           | (idxHit[22] ? tgts_22 : 13'h0) | (idxHit[23] ? tgts_23 : 13'h0)
           | (idxHit[24] ? tgts_24 : 13'h0) | (idxHit[25] ? tgts_25 : 13'h0)
           | (idxHit[26] ? tgts_26 : 13'h0) | (idxHit[27] ? tgts_27 : 13'h0),
         1'h0};
  assign io_resp_bits_entry = _io_resp_bits_entry_output;
  assign io_resp_bits_bht_history = history;
  assign io_resp_bits_bht_value = res_value;
  assign io_ras_head_valid = |count;
  assign io_ras_head_bits = _GEN_9;
endmodule

module Frontend(
  input         clock,
                reset,
                auto_icache_master_out_a_ready,
                auto_icache_master_out_d_valid,
  input  [2:0]  auto_icache_master_out_d_bits_opcode,
  input  [3:0]  auto_icache_master_out_d_bits_size,
  input  [63:0] auto_icache_master_out_d_bits_data,
  input         auto_icache_master_out_d_bits_corrupt,
                io_cpu_might_request,
                io_cpu_req_valid,
  input  [39:0] io_cpu_req_bits_pc,
  input         io_cpu_req_bits_speculative,
                io_cpu_sfence_valid,
                io_cpu_sfence_bits_rs1,
                io_cpu_sfence_bits_rs2,
  input  [38:0] io_cpu_sfence_bits_addr,
  input         io_cpu_resp_ready,
                io_cpu_btb_update_valid,
  input  [4:0]  io_cpu_btb_update_bits_prediction_entry,
  input  [38:0] io_cpu_btb_update_bits_pc,
  input         io_cpu_btb_update_bits_isValid,
  input  [38:0] io_cpu_btb_update_bits_br_pc,
  input  [1:0]  io_cpu_btb_update_bits_cfiType,
  input         io_cpu_bht_update_valid,
  input  [7:0]  io_cpu_bht_update_bits_prediction_history,
  input  [38:0] io_cpu_bht_update_bits_pc,
  input         io_cpu_bht_update_bits_branch,
                io_cpu_bht_update_bits_taken,
                io_cpu_bht_update_bits_mispredict,
                io_cpu_flush_icache,
                io_cpu_progress,
                io_ptw_req_ready,
                io_ptw_resp_valid,
                io_ptw_resp_bits_ae_ptw,
                io_ptw_resp_bits_ae_final,
                io_ptw_resp_bits_pf,
                io_ptw_resp_bits_gf,
                io_ptw_resp_bits_hr,
                io_ptw_resp_bits_hw,
                io_ptw_resp_bits_hx,
  input  [43:0] io_ptw_resp_bits_pte_ppn,
  input         io_ptw_resp_bits_pte_d,
                io_ptw_resp_bits_pte_a,
                io_ptw_resp_bits_pte_g,
                io_ptw_resp_bits_pte_u,
                io_ptw_resp_bits_pte_x,
                io_ptw_resp_bits_pte_w,
                io_ptw_resp_bits_pte_r,
                io_ptw_resp_bits_pte_v,
  input  [1:0]  io_ptw_resp_bits_level,
  input         io_ptw_resp_bits_homogeneous,
                io_ptw_resp_bits_gpa_is_pte,
  input  [3:0]  io_ptw_ptbr_mode,
  input         io_ptw_status_debug,
  input  [1:0]  io_ptw_status_prv,
  input         io_ptw_pmp_0_cfg_l,
  input  [1:0]  io_ptw_pmp_0_cfg_a,
  input         io_ptw_pmp_0_cfg_x,
                io_ptw_pmp_0_cfg_w,
                io_ptw_pmp_0_cfg_r,
  input  [29:0] io_ptw_pmp_0_addr,
  input  [31:0] io_ptw_pmp_0_mask,
  input         io_ptw_pmp_1_cfg_l,
  input  [1:0]  io_ptw_pmp_1_cfg_a,
  input         io_ptw_pmp_1_cfg_x,
                io_ptw_pmp_1_cfg_w,
                io_ptw_pmp_1_cfg_r,
  input  [29:0] io_ptw_pmp_1_addr,
  input  [31:0] io_ptw_pmp_1_mask,
  input         io_ptw_pmp_2_cfg_l,
  input  [1:0]  io_ptw_pmp_2_cfg_a,
  input         io_ptw_pmp_2_cfg_x,
                io_ptw_pmp_2_cfg_w,
                io_ptw_pmp_2_cfg_r,
  input  [29:0] io_ptw_pmp_2_addr,
  input  [31:0] io_ptw_pmp_2_mask,
  input         io_ptw_pmp_3_cfg_l,
  input  [1:0]  io_ptw_pmp_3_cfg_a,
  input         io_ptw_pmp_3_cfg_x,
                io_ptw_pmp_3_cfg_w,
                io_ptw_pmp_3_cfg_r,
  input  [29:0] io_ptw_pmp_3_addr,
  input  [31:0] io_ptw_pmp_3_mask,
  input         io_ptw_pmp_4_cfg_l,
  input  [1:0]  io_ptw_pmp_4_cfg_a,
  input         io_ptw_pmp_4_cfg_x,
                io_ptw_pmp_4_cfg_w,
                io_ptw_pmp_4_cfg_r,
  input  [29:0] io_ptw_pmp_4_addr,
  input  [31:0] io_ptw_pmp_4_mask,
  input         io_ptw_pmp_5_cfg_l,
  input  [1:0]  io_ptw_pmp_5_cfg_a,
  input         io_ptw_pmp_5_cfg_x,
                io_ptw_pmp_5_cfg_w,
                io_ptw_pmp_5_cfg_r,
  input  [29:0] io_ptw_pmp_5_addr,
  input  [31:0] io_ptw_pmp_5_mask,
  input         io_ptw_pmp_6_cfg_l,
  input  [1:0]  io_ptw_pmp_6_cfg_a,
  input         io_ptw_pmp_6_cfg_x,
                io_ptw_pmp_6_cfg_w,
                io_ptw_pmp_6_cfg_r,
  input  [29:0] io_ptw_pmp_6_addr,
  input  [31:0] io_ptw_pmp_6_mask,
  input         io_ptw_pmp_7_cfg_l,
  input  [1:0]  io_ptw_pmp_7_cfg_a,
  input         io_ptw_pmp_7_cfg_x,
                io_ptw_pmp_7_cfg_w,
                io_ptw_pmp_7_cfg_r,
  input  [29:0] io_ptw_pmp_7_addr,
  input  [31:0] io_ptw_pmp_7_mask,
  input  [63:0] io_ptw_customCSRs_csrs_0_value,
  output        auto_icache_master_out_a_valid,
  output [31:0] auto_icache_master_out_a_bits_address,
  output        io_cpu_resp_valid,
                io_cpu_resp_bits_btb_taken,
                io_cpu_resp_bits_btb_bridx,
  output [4:0]  io_cpu_resp_bits_btb_entry,
  output [7:0]  io_cpu_resp_bits_btb_bht_history,
  output [39:0] io_cpu_resp_bits_pc,
  output [31:0] io_cpu_resp_bits_data,
  output        io_cpu_resp_bits_xcpt_pf_inst,
                io_cpu_resp_bits_xcpt_gf_inst,
                io_cpu_resp_bits_xcpt_ae_inst,
                io_cpu_resp_bits_replay,
                io_cpu_gpa_valid,
                io_ptw_req_valid,
                io_ptw_req_bits_valid,
  output [26:0] io_ptw_req_bits_bits_addr,
  output        io_ptw_req_bits_bits_need_gpa,
                io_ptw_req_bits_bits_vstage1,
                io_ptw_req_bits_bits_stage2
);

  wire        s2_redirect;
  wire [38:0] _GEN;
  wire        updateBTB;
  wire [1:0]  _GEN_0;
  wire [1:0]  after_idx;
  wire        taken_taken;
  wire [38:0] _GEN_1;
  wire        _GEN_2;
  wire        _btb_io_resp_valid;
  wire        _btb_io_resp_bits_taken;
  wire        _btb_io_resp_bits_bridx;
  wire [38:0] _btb_io_resp_bits_target;
  wire [4:0]  _btb_io_resp_bits_entry;
  wire [7:0]  _btb_io_resp_bits_bht_history;
  wire        _btb_io_resp_bits_bht_value;
  wire        _btb_io_ras_head_valid;
  wire [38:0] _btb_io_ras_head_bits;
  wire        _tlb_io_resp_miss;
  wire [31:0] _tlb_io_resp_paddr;
  wire        _tlb_io_resp_pf_inst;
  wire        _tlb_io_resp_ae_inst;
  wire        _tlb_io_resp_cacheable;
  wire        _tlb_io_ptw_req_valid;
  wire        _fq_io_enq_ready;
  wire [4:0]  _fq_io_mask;
  wire        _icache_io_resp_valid;
  wire [31:0] _icache_io_resp_bits_data;
  wire        _icache_io_resp_bits_replay;
  wire        _icache_io_resp_bits_ae;
  reg         s1_valid;
  reg         s2_valid;
  wire        s0_valid =
    io_cpu_req_valid | ~(_fq_io_mask[2]) | ~(_fq_io_mask[3]) & (~s1_valid | ~s2_valid)
    | ~(_fq_io_mask[4]) & ~s1_valid & ~s2_valid;
  reg  [39:0] s1_pc;
  reg         s1_speculative;
  reg  [39:0] s2_pc;
  reg         s2_btb_resp_valid;
  reg         s2_btb_resp_bits_taken;
  reg         s2_btb_resp_bits_bridx;
  reg  [4:0]  s2_btb_resp_bits_entry;
  reg  [7:0]  s2_btb_resp_bits_bht_history;
  reg         taken_predict_taken;
  wire        s2_btb_taken = s2_btb_resp_valid & s2_btb_resp_bits_taken;
  reg         s2_tlb_resp_miss;
  reg         s2_tlb_resp_pf_inst;
  reg         s2_tlb_resp_gf_inst;
  reg         s2_tlb_resp_ae_inst;
  reg         s2_tlb_resp_cacheable;
  wire        s2_xcpt = s2_tlb_resp_ae_inst | s2_tlb_resp_pf_inst | s2_tlb_resp_gf_inst;
  reg         s2_speculative;
  reg         s2_partial_insn_valid;
  reg  [15:0] s2_partial_insn;
  reg         wrong_path;
  wire [39:0] ntpc = {s1_pc[39:2], 2'h0} + 40'h4;
  wire        _GEN_3 = _fq_io_enq_ready & _GEN_2;
  reg         s2_replay_REG;
  wire        s2_replay = s2_valid & ~_GEN_3 | s2_replay_REG;
  reg  [1:0]  recent_progress_counter;
  wire        s2_kill_speculative_tlb_refill =
    s2_speculative & ~(|recent_progress_counter);
  wire        _GEN_4 =
    s2_speculative & ~(s2_tlb_resp_cacheable & ~(io_ptw_customCSRs_csrs_0_value[3]))
    | s2_xcpt;
  reg         fq_io_enq_valid_REG;
  wire        _GEN_5 = s2_kill_speculative_tlb_refill & s2_tlb_resp_miss;
  assign _GEN_2 =
    fq_io_enq_valid_REG & s2_valid
    & (_icache_io_resp_valid | _GEN_5 | ~s2_tlb_resp_miss & _GEN_4);
  assign _GEN_1 =
    io_cpu_req_valid ? io_cpu_req_bits_pc[39:1] : s2_replay ? s2_pc[39:1] : _GEN;
  wire [2:0]  _GEN_6 = 3'h3 << s2_pc[1];
  wire        predicted_taken = _btb_io_resp_valid & _btb_io_resp_bits_taken;
  wire        _GEN_7 = _GEN_3 & ~wrong_path;
  wire [38:0] _GEN_8 = {s2_pc[38:2], 2'h0};
  wire        taken_prevRVI = s2_partial_insn_valid & (&(s2_partial_insn[1:0]));
  wire        taken_valid = _GEN_6[0] & ~taken_prevRVI;
  wire        taken_rviBranch = s2_partial_insn[6:0] == 7'h63;
  wire        taken_rviJump = s2_partial_insn[6:0] == 7'h6F;
  wire        taken_rviJALR = s2_partial_insn[6:0] == 7'h67;
  wire        taken_rviReturn =
    taken_rviJALR & ~(s2_partial_insn[7])
    & {_icache_io_resp_bits_data[3:2],
       _icache_io_resp_bits_data[0],
       s2_partial_insn[15]} == 4'h1;
  wire        _GEN_9 = taken_rviJALR | taken_rviJump;
  wire        taken_rviCall = _GEN_9 & s2_partial_insn[7];
  wire [4:0]  _GEN_10 =
    {_icache_io_resp_bits_data[15:13], _icache_io_resp_bits_data[1:0]};
  wire        taken_rvcBranch = _GEN_10 == 5'h19 | _GEN_10 == 5'h1D;
  wire        taken_rvcJump = _GEN_10 == 5'h15;
  wire [5:0]  _GEN_11 =
    {_icache_io_resp_bits_data[15:12], _icache_io_resp_bits_data[1:0]};
  wire        _GEN_12 = _icache_io_resp_bits_data[6:2] == 5'h0;
  wire        taken_rvcJR = _GEN_11 == 6'h22 & _GEN_12;
  wire        taken_rvcReturn =
    taken_rvcJR
    & {_icache_io_resp_bits_data[11:10], _icache_io_resp_bits_data[8:7]} == 4'h1;
  wire        taken_rvcJALR = _GEN_11 == 6'h26 & _GEN_12;
  assign taken_taken =
    taken_prevRVI & (_GEN_9 | taken_rviBranch & taken_predict_taken) | taken_valid
    & (taken_rvcJump | taken_rvcJALR | taken_rvcJR | taken_rvcBranch
       & taken_predict_taken);
  wire        taken_predictReturn =
    _btb_io_ras_head_valid
    & (taken_prevRVI & taken_rviReturn | taken_valid & taken_rvcReturn);
  wire        taken_predictJump =
    taken_prevRVI & taken_rviJump | taken_valid & taken_rvcJump;
  wire        _GEN_13 = taken_prevRVI & taken_rviBranch | taken_valid & taken_rvcBranch;
  wire        taken_predictBranch = taken_predict_taken & _GEN_13;
  wire        _GEN_14 = s2_valid & s2_btb_resp_valid;
  wire        _GEN_15 =
    _GEN_14 & ~s2_btb_resp_bits_bridx & taken_valid & (&(_icache_io_resp_bits_data[1:0]));
  wire [32:0] _GEN_16 =
    taken_prevRVI
      ? {{13{_icache_io_resp_bits_data[15]}},
         s2_partial_insn[3]
           ? {_icache_io_resp_bits_data[3:0],
              s2_partial_insn[15:12],
              _icache_io_resp_bits_data[4],
              _icache_io_resp_bits_data[14:5]}
           : {{8{_icache_io_resp_bits_data[15]}},
              s2_partial_insn[7],
              _icache_io_resp_bits_data[14:9],
              s2_partial_insn[11:8]},
         1'h0} - 33'h2
      : {{22{_icache_io_resp_bits_data[12]}},
         _icache_io_resp_bits_data[14]
           ? {{3{_icache_io_resp_bits_data[12]}},
              _icache_io_resp_bits_data[6:5],
              _icache_io_resp_bits_data[2],
              _icache_io_resp_bits_data[11:10],
              _icache_io_resp_bits_data[4:3]}
           : {_icache_io_resp_bits_data[8],
              _icache_io_resp_bits_data[10:9],
              _icache_io_resp_bits_data[6],
              _icache_io_resp_bits_data[7],
              _icache_io_resp_bits_data[2],
              _icache_io_resp_bits_data[11],
              _icache_io_resp_bits_data[5:3]},
         1'h0};
  wire [39:0] _GEN_17 = {s2_pc[39:2], 2'h0} + {{7{_GEN_16[32]}}, _GEN_16};
  wire        taken_prevRVI_1 = taken_valid & (&(_icache_io_resp_bits_data[1:0]));
  wire        taken_valid_1 = _GEN_6[1] & ~taken_prevRVI_1;
  wire        taken_rviBranch_1 = _icache_io_resp_bits_data[6:0] == 7'h63;
  wire        taken_rviJump_1 = _icache_io_resp_bits_data[6:0] == 7'h6F;
  wire        taken_rviJALR_1 = _icache_io_resp_bits_data[6:0] == 7'h67;
  wire        taken_rviReturn_1 =
    taken_rviJALR_1 & ~(_icache_io_resp_bits_data[7])
    & {_icache_io_resp_bits_data[19:18], _icache_io_resp_bits_data[16:15]} == 4'h1;
  wire        _GEN_18 = taken_rviJALR_1 | taken_rviJump_1;
  wire        taken_rviCall_1 = _GEN_18 & _icache_io_resp_bits_data[7];
  wire [4:0]  _GEN_19 =
    {_icache_io_resp_bits_data[31:29], _icache_io_resp_bits_data[17:16]};
  wire        taken_rvcBranch_1 = _GEN_19 == 5'h19 | _GEN_19 == 5'h1D;
  wire        taken_rvcJump_1 = _GEN_19 == 5'h15;
  wire [5:0]  _GEN_20 =
    {_icache_io_resp_bits_data[31:28], _icache_io_resp_bits_data[17:16]};
  wire        _GEN_21 = _icache_io_resp_bits_data[22:18] == 5'h0;
  wire        taken_rvcJR_1 = _GEN_20 == 6'h22 & _GEN_21;
  wire        taken_rvcReturn_1 =
    taken_rvcJR_1
    & {_icache_io_resp_bits_data[27:26], _icache_io_resp_bits_data[24:23]} == 4'h1;
  wire        taken_rvcJALR_1 = _GEN_20 == 6'h26 & _GEN_21;
  wire        taken_taken_1 =
    taken_prevRVI_1 & (_GEN_18 | taken_rviBranch_1 & taken_predict_taken) | taken_valid_1
    & (taken_rvcJump_1 | taken_rvcJALR_1 | taken_rvcJR_1 | taken_rvcBranch_1
       & taken_predict_taken);
  wire        taken_predictReturn_1 =
    _btb_io_ras_head_valid
    & (taken_prevRVI_1 & taken_rviReturn_1 | taken_valid_1 & taken_rvcReturn_1);
  wire        taken_predictJump_1 =
    taken_prevRVI_1 & taken_rviJump_1 | taken_valid_1 & taken_rvcJump_1;
  wire        _GEN_22 =
    taken_prevRVI_1 & taken_rviBranch_1 | taken_valid_1 & taken_rvcBranch_1;
  wire        taken_predictBranch_1 = taken_predict_taken & _GEN_22;
  wire        _GEN_23 =
    _GEN_14 & s2_btb_resp_bits_bridx & taken_valid_1
    & (&(_icache_io_resp_bits_data[17:16]));
  assign after_idx = taken_taken ? 2'h1 : 2'h2;
  assign _GEN_0 =
    taken_taken
      ? ((taken_prevRVI ? taken_rviReturn : taken_rvcReturn)
           ? 2'h3
           : (taken_prevRVI ? taken_rviCall : taken_rvcJALR)
               ? 2'h2
               : {1'h0, ~(taken_prevRVI ? taken_rviBranch : taken_rvcBranch)})
      : (taken_prevRVI_1 ? taken_rviReturn_1 : taken_rvcReturn_1)
          ? 2'h3
          : (taken_prevRVI_1 ? taken_rviCall_1 : taken_rvcJALR_1)
              ? 2'h2
              : {1'h0, ~(taken_prevRVI_1 ? taken_rviBranch_1 : taken_rvcBranch_1)};
  wire [30:0] _GEN_24 =
    taken_prevRVI_1
      ? {{12{_icache_io_resp_bits_data[31]}},
         _icache_io_resp_bits_data[3]
           ? {_icache_io_resp_bits_data[19:12],
              _icache_io_resp_bits_data[20],
              _icache_io_resp_bits_data[30:21]}
           : {{8{_icache_io_resp_bits_data[31]}},
              _icache_io_resp_bits_data[7],
              _icache_io_resp_bits_data[30:25],
              _icache_io_resp_bits_data[11:8]}}
      : {{21{_icache_io_resp_bits_data[28]}},
         _icache_io_resp_bits_data[30]
           ? {{3{_icache_io_resp_bits_data[28]}},
              _icache_io_resp_bits_data[22:21],
              _icache_io_resp_bits_data[18],
              _icache_io_resp_bits_data[27:26],
              _icache_io_resp_bits_data[20:19]}
           : {_icache_io_resp_bits_data[24],
              _icache_io_resp_bits_data[26:25],
              _icache_io_resp_bits_data[22],
              _icache_io_resp_bits_data[23],
              _icache_io_resp_bits_data[18],
              _icache_io_resp_bits_data[27],
              _icache_io_resp_bits_data[21:19]}};
  wire [39:0] _GEN_25 =
    (taken_prevRVI_1 ? {s2_pc[39:2], 2'h2} - 40'h2 : {s2_pc[39:2], 2'h2})
    + {{8{_GEN_24[30]}}, _GEN_24, 1'h0};
  assign updateBTB =
    ~taken_taken & ~s2_btb_resp_valid
    & (taken_predictBranch_1 & taken_predict_taken | taken_predictJump_1
       | taken_predictReturn_1) | ~s2_btb_resp_valid
    & (taken_predictBranch & taken_predict_taken | taken_predictJump
       | taken_predictReturn);
  wire        taken = taken_taken | taken_taken_1;
  assign _GEN =
    ~taken_taken & ~s2_btb_taken & s2_valid & taken_predictReturn_1 | ~s2_btb_taken
    & s2_valid & taken_predictReturn
      ? {1'h0, _btb_io_ras_head_bits[38:1]}
      : ~taken_taken & ~s2_btb_taken & s2_valid
        & (taken_predictBranch_1 | taken_predictJump_1)
          ? _GEN_25[39:1]
          : ~s2_btb_taken & s2_valid & (taken_predictBranch | taken_predictJump)
              ? _GEN_17[39:1]
              : predicted_taken
                  ? {_btb_io_resp_bits_target[38], _btb_io_resp_bits_target[38:1]}
                  : ntpc[39:1];
  wire        _GEN_26 = ~s2_btb_taken & taken;
  assign s2_redirect = ~s2_btb_taken & taken & _GEN_3 | io_cpu_req_valid;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (~reset
          & ~(~(io_cpu_req_valid | io_cpu_sfence_valid | io_cpu_flush_icache
                | io_cpu_bht_update_valid | io_cpu_btb_update_valid)
              | io_cpu_might_request)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Frontend.scala:96 assert(!(io.cpu.req.valid || io.cpu.sfence.valid || io.cpu.flush_icache || io.cpu.bht_update.valid || io.cpu.btb_update.valid) || io.cpu.might_request)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & s2_speculative & io_ptw_customCSRs_csrs_0_value[3] & ~_GEN_4) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Frontend.scala:194 assert(!(s2_speculative && io.ptw.customCSRs.asInstanceOf[RocketCustomCSRs].disableSpeculativeICacheRefill && !icache.io.s2_kill))\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~s2_partial_insn_valid | _GEN_6[0])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Frontend.scala:345 assert(!s2_partial_insn_valid || fq.io.enq.bits.mask(0))\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  reg         gpa_valid;
  always @(posedge clock) begin
    automatic logic _GEN_27;
    _GEN_27 = taken_valid_1 & ~taken_taken & (&(_icache_io_resp_bits_data[17:16]));
    s1_valid <= s0_valid;
    s1_pc <= {_GEN_1, 1'h0};
    if (io_cpu_req_valid)
      s1_speculative <= io_cpu_req_bits_speculative;
    else if (s2_replay)
      s1_speculative <= s2_speculative;
    else
      s1_speculative <= s1_speculative | s2_valid & ~s2_speculative | predicted_taken;
    if (~s2_replay) begin
      s2_btb_resp_valid <= _btb_io_resp_valid;
      s2_btb_resp_bits_taken <= _btb_io_resp_bits_taken;
      s2_btb_resp_bits_bridx <= _btb_io_resp_bits_bridx;
      s2_btb_resp_bits_entry <= _btb_io_resp_bits_entry;
      s2_btb_resp_bits_bht_history <= _btb_io_resp_bits_bht_history;
      taken_predict_taken <= _btb_io_resp_bits_bht_value;
      s2_tlb_resp_miss <= _tlb_io_resp_miss;
      s2_tlb_resp_pf_inst <= _tlb_io_resp_pf_inst;
      s2_tlb_resp_ae_inst <= _tlb_io_resp_ae_inst;
      s2_tlb_resp_cacheable <= _tlb_io_resp_cacheable;
    end
    s2_tlb_resp_gf_inst <= s2_replay & s2_tlb_resp_gf_inst;
    if (_GEN_3 & _GEN_27)
      s2_partial_insn <= {_icache_io_resp_bits_data[31:18], 2'h3};
    fq_io_enq_valid_REG <= s1_valid;
    if (reset) begin
      s2_valid <= 1'h0;
      s2_pc <= 40'h10040;
      s2_speculative <= 1'h0;
      s2_partial_insn_valid <= 1'h0;
      wrong_path <= 1'h0;
      s2_replay_REG <= 1'h1;
      recent_progress_counter <= 2'h3;
    end
    else begin
      automatic logic _GEN_28 =
        s2_btb_taken
          ? _GEN_15 | wrong_path
          : _GEN_3 & taken_taken & ~taken_predictBranch & ~taken_predictJump
            & ~taken_predictReturn | _GEN_15 | wrong_path;
      s2_valid <= ~s2_replay & ~s2_redirect;
      if (~s2_replay) begin
        s2_pc <= s1_pc;
        s2_speculative <= s1_speculative;
      end
      s2_partial_insn_valid <=
        ~(s2_redirect | _GEN_3 & (s2_btb_taken | taken))
        & (_GEN_3 ? _GEN_27 : s2_partial_insn_valid);
      wrong_path <=
        ~io_cpu_req_valid
        & (taken_taken | s2_btb_taken
             ? _GEN_23 | _GEN_28
             : _GEN_3 & taken_taken_1 & ~taken_predictBranch_1 & ~taken_predictJump_1
               & ~taken_predictReturn_1 | _GEN_23 | _GEN_28);
      s2_replay_REG <= s2_replay & ~s0_valid;
      if (io_cpu_progress)
        recent_progress_counter <= 2'h3;
      else if (io_ptw_req_ready & _tlb_io_ptw_req_valid & (|recent_progress_counter))
        recent_progress_counter <= recent_progress_counter - 2'h1;
    end
    if (io_cpu_req_valid)
      gpa_valid <= 1'h0;
    else
      gpa_valid <= _GEN_3 & s2_tlb_resp_gf_inst | gpa_valid;
  end // always @(posedge)
  ICache icache (
    .clock                          (clock),
    .reset                          (reset),
    .auto_master_out_a_ready        (auto_icache_master_out_a_ready),
    .auto_master_out_d_valid        (auto_icache_master_out_d_valid),
    .auto_master_out_d_bits_opcode  (auto_icache_master_out_d_bits_opcode),
    .auto_master_out_d_bits_size    (auto_icache_master_out_d_bits_size),
    .auto_master_out_d_bits_data    (auto_icache_master_out_d_bits_data),
    .auto_master_out_d_bits_corrupt (auto_icache_master_out_d_bits_corrupt),
    .io_req_valid                   (s0_valid),
    .io_req_bits_addr               ({_GEN_1[37:0], 1'h0}),
    .io_s1_paddr                    (_tlb_io_resp_paddr),
    .io_s1_kill                     (s2_redirect | _tlb_io_resp_miss | s2_replay),
    .io_s2_kill                     (_GEN_4),
    .io_invalidate                  (io_cpu_flush_icache),
    .auto_master_out_a_valid        (auto_icache_master_out_a_valid),
    .auto_master_out_a_bits_address (auto_icache_master_out_a_bits_address),
    .io_resp_valid                  (_icache_io_resp_valid),
    .io_resp_bits_data              (_icache_io_resp_bits_data),
    .io_resp_bits_replay            (_icache_io_resp_bits_replay),
    .io_resp_bits_ae                (_icache_io_resp_bits_ae)
  );
  ShiftQueue fq (
    .clock                       (clock),
    .reset                       (reset | io_cpu_req_valid),
    .io_enq_valid                (_GEN_2),
    .io_enq_bits_btb_taken       (_GEN_26 | s2_btb_taken),
    .io_enq_bits_btb_bridx       (_GEN_26 ? ~taken_taken : s2_btb_resp_bits_bridx),
    .io_enq_bits_btb_entry       (_GEN_26 ? 5'h1C : s2_btb_resp_bits_entry),
    .io_enq_bits_btb_bht_history (s2_btb_resp_bits_bht_history),
    .io_enq_bits_pc              (s2_pc),
    .io_enq_bits_data            (_icache_io_resp_bits_data),
    .io_enq_bits_xcpt_pf_inst    (s2_tlb_resp_pf_inst),
    .io_enq_bits_xcpt_gf_inst    (s2_tlb_resp_gf_inst),
    .io_enq_bits_xcpt_ae_inst
      (_icache_io_resp_valid & _icache_io_resp_bits_ae | s2_tlb_resp_ae_inst),
    .io_enq_bits_replay
      (_GEN_23 | _GEN_15 | _icache_io_resp_bits_replay | _GEN_4 & ~_icache_io_resp_valid
       & ~s2_xcpt | _GEN_5),
    .io_deq_ready                (io_cpu_resp_ready),
    .io_enq_ready                (_fq_io_enq_ready),
    .io_deq_valid                (io_cpu_resp_valid),
    .io_deq_bits_btb_taken       (io_cpu_resp_bits_btb_taken),
    .io_deq_bits_btb_bridx       (io_cpu_resp_bits_btb_bridx),
    .io_deq_bits_btb_entry       (io_cpu_resp_bits_btb_entry),
    .io_deq_bits_btb_bht_history (io_cpu_resp_bits_btb_bht_history),
    .io_deq_bits_pc              (io_cpu_resp_bits_pc),
    .io_deq_bits_data            (io_cpu_resp_bits_data),
    .io_deq_bits_xcpt_pf_inst    (io_cpu_resp_bits_xcpt_pf_inst),
    .io_deq_bits_xcpt_gf_inst    (io_cpu_resp_bits_xcpt_gf_inst),
    .io_deq_bits_xcpt_ae_inst    (io_cpu_resp_bits_xcpt_ae_inst),
    .io_deq_bits_replay          (io_cpu_resp_bits_replay),
    .io_mask                     (_fq_io_mask)
  );
  ITLB tlb (
    .clock                         (clock),
    .reset                         (reset),
    .io_req_valid                  (s1_valid & ~s2_replay),
    .io_req_bits_vaddr             (s1_pc),
    .io_req_bits_prv               (io_ptw_status_prv),
    .io_sfence_valid               (io_cpu_sfence_valid),
    .io_sfence_bits_rs1            (io_cpu_sfence_bits_rs1),
    .io_sfence_bits_rs2            (io_cpu_sfence_bits_rs2),
    .io_sfence_bits_addr           (io_cpu_sfence_bits_addr),
    .io_ptw_req_ready              (io_ptw_req_ready),
    .io_ptw_resp_valid             (io_ptw_resp_valid),
    .io_ptw_resp_bits_ae_ptw       (io_ptw_resp_bits_ae_ptw),
    .io_ptw_resp_bits_ae_final     (io_ptw_resp_bits_ae_final),
    .io_ptw_resp_bits_pf           (io_ptw_resp_bits_pf),
    .io_ptw_resp_bits_gf           (io_ptw_resp_bits_gf),
    .io_ptw_resp_bits_hr           (io_ptw_resp_bits_hr),
    .io_ptw_resp_bits_hw           (io_ptw_resp_bits_hw),
    .io_ptw_resp_bits_hx           (io_ptw_resp_bits_hx),
    .io_ptw_resp_bits_pte_ppn      (io_ptw_resp_bits_pte_ppn),
    .io_ptw_resp_bits_pte_d        (io_ptw_resp_bits_pte_d),
    .io_ptw_resp_bits_pte_a        (io_ptw_resp_bits_pte_a),
    .io_ptw_resp_bits_pte_g        (io_ptw_resp_bits_pte_g),
    .io_ptw_resp_bits_pte_u        (io_ptw_resp_bits_pte_u),
    .io_ptw_resp_bits_pte_x        (io_ptw_resp_bits_pte_x),
    .io_ptw_resp_bits_pte_w        (io_ptw_resp_bits_pte_w),
    .io_ptw_resp_bits_pte_r        (io_ptw_resp_bits_pte_r),
    .io_ptw_resp_bits_pte_v        (io_ptw_resp_bits_pte_v),
    .io_ptw_resp_bits_level        (io_ptw_resp_bits_level),
    .io_ptw_resp_bits_homogeneous  (io_ptw_resp_bits_homogeneous),
    .io_ptw_resp_bits_gpa_is_pte   (io_ptw_resp_bits_gpa_is_pte),
    .io_ptw_ptbr_mode              (io_ptw_ptbr_mode),
    .io_ptw_status_debug           (io_ptw_status_debug),
    .io_ptw_pmp_0_cfg_l            (io_ptw_pmp_0_cfg_l),
    .io_ptw_pmp_0_cfg_a            (io_ptw_pmp_0_cfg_a),
    .io_ptw_pmp_0_cfg_x            (io_ptw_pmp_0_cfg_x),
    .io_ptw_pmp_0_cfg_w            (io_ptw_pmp_0_cfg_w),
    .io_ptw_pmp_0_cfg_r            (io_ptw_pmp_0_cfg_r),
    .io_ptw_pmp_0_addr             (io_ptw_pmp_0_addr),
    .io_ptw_pmp_0_mask             (io_ptw_pmp_0_mask),
    .io_ptw_pmp_1_cfg_l            (io_ptw_pmp_1_cfg_l),
    .io_ptw_pmp_1_cfg_a            (io_ptw_pmp_1_cfg_a),
    .io_ptw_pmp_1_cfg_x            (io_ptw_pmp_1_cfg_x),
    .io_ptw_pmp_1_cfg_w            (io_ptw_pmp_1_cfg_w),
    .io_ptw_pmp_1_cfg_r            (io_ptw_pmp_1_cfg_r),
    .io_ptw_pmp_1_addr             (io_ptw_pmp_1_addr),
    .io_ptw_pmp_1_mask             (io_ptw_pmp_1_mask),
    .io_ptw_pmp_2_cfg_l            (io_ptw_pmp_2_cfg_l),
    .io_ptw_pmp_2_cfg_a            (io_ptw_pmp_2_cfg_a),
    .io_ptw_pmp_2_cfg_x            (io_ptw_pmp_2_cfg_x),
    .io_ptw_pmp_2_cfg_w            (io_ptw_pmp_2_cfg_w),
    .io_ptw_pmp_2_cfg_r            (io_ptw_pmp_2_cfg_r),
    .io_ptw_pmp_2_addr             (io_ptw_pmp_2_addr),
    .io_ptw_pmp_2_mask             (io_ptw_pmp_2_mask),
    .io_ptw_pmp_3_cfg_l            (io_ptw_pmp_3_cfg_l),
    .io_ptw_pmp_3_cfg_a            (io_ptw_pmp_3_cfg_a),
    .io_ptw_pmp_3_cfg_x            (io_ptw_pmp_3_cfg_x),
    .io_ptw_pmp_3_cfg_w            (io_ptw_pmp_3_cfg_w),
    .io_ptw_pmp_3_cfg_r            (io_ptw_pmp_3_cfg_r),
    .io_ptw_pmp_3_addr             (io_ptw_pmp_3_addr),
    .io_ptw_pmp_3_mask             (io_ptw_pmp_3_mask),
    .io_ptw_pmp_4_cfg_l            (io_ptw_pmp_4_cfg_l),
    .io_ptw_pmp_4_cfg_a            (io_ptw_pmp_4_cfg_a),
    .io_ptw_pmp_4_cfg_x            (io_ptw_pmp_4_cfg_x),
    .io_ptw_pmp_4_cfg_w            (io_ptw_pmp_4_cfg_w),
    .io_ptw_pmp_4_cfg_r            (io_ptw_pmp_4_cfg_r),
    .io_ptw_pmp_4_addr             (io_ptw_pmp_4_addr),
    .io_ptw_pmp_4_mask             (io_ptw_pmp_4_mask),
    .io_ptw_pmp_5_cfg_l            (io_ptw_pmp_5_cfg_l),
    .io_ptw_pmp_5_cfg_a            (io_ptw_pmp_5_cfg_a),
    .io_ptw_pmp_5_cfg_x            (io_ptw_pmp_5_cfg_x),
    .io_ptw_pmp_5_cfg_w            (io_ptw_pmp_5_cfg_w),
    .io_ptw_pmp_5_cfg_r            (io_ptw_pmp_5_cfg_r),
    .io_ptw_pmp_5_addr             (io_ptw_pmp_5_addr),
    .io_ptw_pmp_5_mask             (io_ptw_pmp_5_mask),
    .io_ptw_pmp_6_cfg_l            (io_ptw_pmp_6_cfg_l),
    .io_ptw_pmp_6_cfg_a            (io_ptw_pmp_6_cfg_a),
    .io_ptw_pmp_6_cfg_x            (io_ptw_pmp_6_cfg_x),
    .io_ptw_pmp_6_cfg_w            (io_ptw_pmp_6_cfg_w),
    .io_ptw_pmp_6_cfg_r            (io_ptw_pmp_6_cfg_r),
    .io_ptw_pmp_6_addr             (io_ptw_pmp_6_addr),
    .io_ptw_pmp_6_mask             (io_ptw_pmp_6_mask),
    .io_ptw_pmp_7_cfg_l            (io_ptw_pmp_7_cfg_l),
    .io_ptw_pmp_7_cfg_a            (io_ptw_pmp_7_cfg_a),
    .io_ptw_pmp_7_cfg_x            (io_ptw_pmp_7_cfg_x),
    .io_ptw_pmp_7_cfg_w            (io_ptw_pmp_7_cfg_w),
    .io_ptw_pmp_7_cfg_r            (io_ptw_pmp_7_cfg_r),
    .io_ptw_pmp_7_addr             (io_ptw_pmp_7_addr),
    .io_ptw_pmp_7_mask             (io_ptw_pmp_7_mask),
    .io_kill                       (~s2_valid | s2_kill_speculative_tlb_refill),
    .io_resp_miss                  (_tlb_io_resp_miss),
    .io_resp_paddr                 (_tlb_io_resp_paddr),
    .io_resp_pf_inst               (_tlb_io_resp_pf_inst),
    .io_resp_ae_inst               (_tlb_io_resp_ae_inst),
    .io_resp_cacheable             (_tlb_io_resp_cacheable),
    .io_ptw_req_valid              (_tlb_io_ptw_req_valid),
    .io_ptw_req_bits_valid         (io_ptw_req_bits_valid),
    .io_ptw_req_bits_bits_addr     (io_ptw_req_bits_bits_addr),
    .io_ptw_req_bits_bits_need_gpa (io_ptw_req_bits_bits_need_gpa),
    .io_ptw_req_bits_bits_vstage1  (io_ptw_req_bits_bits_vstage1),
    .io_ptw_req_bits_bits_stage2   (io_ptw_req_bits_bits_stage2)
  );
  BTB btb (
    .clock                                 (clock),
    .reset                                 (reset),
    .io_req_bits_addr                      (s1_pc[38:0]),
    .io_btb_update_valid
      (io_cpu_btb_update_valid
         ? io_cpu_btb_update_valid
         : _GEN_7 & ~(_fq_io_mask[1]) & updateBTB),
    .io_btb_update_bits_prediction_entry
      (io_cpu_btb_update_valid ? io_cpu_btb_update_bits_prediction_entry : 5'h1C),
    .io_btb_update_bits_pc
      (io_cpu_btb_update_valid ? io_cpu_btb_update_bits_pc : _GEN_8),
    .io_btb_update_bits_isValid
      (~io_cpu_btb_update_valid | io_cpu_btb_update_bits_isValid),
    .io_btb_update_bits_br_pc
      (io_cpu_btb_update_valid
         ? io_cpu_btb_update_bits_br_pc
         : {s2_pc[38:2], ~taken_taken, 1'h0}),
    .io_btb_update_bits_cfiType
      (io_cpu_btb_update_valid ? io_cpu_btb_update_bits_cfiType : _GEN_0),
    .io_bht_update_valid                   (io_cpu_bht_update_valid),
    .io_bht_update_bits_prediction_history (io_cpu_bht_update_bits_prediction_history),
    .io_bht_update_bits_pc                 (io_cpu_bht_update_bits_pc),
    .io_bht_update_bits_branch             (io_cpu_bht_update_bits_branch),
    .io_bht_update_bits_taken              (io_cpu_bht_update_bits_taken),
    .io_bht_update_bits_mispredict         (io_cpu_bht_update_bits_mispredict),
    .io_bht_advance_valid                  ((~taken_taken & _GEN_22 | _GEN_13) & _GEN_7),
    .io_bht_advance_bits_bht_value         (taken_predict_taken),
    .io_ras_update_valid
      (taken_taken
         ? _GEN_7
           & (taken_prevRVI & (taken_rviCall | taken_rviReturn) | taken_valid
              & (taken_rvcJALR | taken_rvcReturn))
         : _GEN_7
           & (taken_prevRVI_1 & (taken_rviCall_1 | taken_rviReturn_1) | taken_valid_1
              & (taken_rvcJALR_1 | taken_rvcReturn_1))),
    .io_ras_update_bits_cfiType            (_GEN_0),
    .io_ras_update_bits_returnAddr         (_GEN_8 + {36'h0, after_idx, 1'h0}),
    .io_flush                              (_GEN_23 | _GEN_15),
    .io_resp_valid                         (_btb_io_resp_valid),
    .io_resp_bits_taken                    (_btb_io_resp_bits_taken),
    .io_resp_bits_bridx                    (_btb_io_resp_bits_bridx),
    .io_resp_bits_target                   (_btb_io_resp_bits_target),
    .io_resp_bits_entry                    (_btb_io_resp_bits_entry),
    .io_resp_bits_bht_history              (_btb_io_resp_bits_bht_history),
    .io_resp_bits_bht_value                (_btb_io_resp_bits_bht_value),
    .io_ras_head_valid                     (_btb_io_ras_head_valid),
    .io_ras_head_bits                      (_btb_io_ras_head_bits)
  );
  assign io_cpu_gpa_valid = gpa_valid;
  assign io_ptw_req_valid = _tlb_io_ptw_req_valid;
endmodule

module FPUDecoder(
  input  [31:0] io_inst,
  output        io_sigs_wen,
                io_sigs_ren1,
                io_sigs_ren2,
                io_sigs_ren3,
                io_sigs_swap12,
                io_sigs_swap23,
  output [1:0]  io_sigs_typeTagIn,
                io_sigs_typeTagOut,
  output        io_sigs_fromint,
                io_sigs_toint,
                io_sigs_fastpipe,
                io_sigs_fma,
                io_sigs_div,
                io_sigs_sqrt,
                io_sigs_wflags,
                io_sigs_vec
);

  wire [29:0] _GEN = ~(io_inst[31:2]);
  wire [4:0]  _GEN_0 = {io_inst[0], io_inst[1], _GEN[2], _GEN[3], io_inst[6]};
  wire [10:0] _GEN_1 =
    {io_inst[0],
     io_inst[1],
     _GEN[0],
     _GEN[1],
     io_inst[4],
     _GEN[3],
     io_inst[6],
     _GEN[24],
     _GEN[27],
     _GEN[28],
     _GEN[29]};
  wire [11:0] _GEN_2 =
    {io_inst[0],
     io_inst[1],
     _GEN[0],
     _GEN[1],
     io_inst[4],
     _GEN[3],
     io_inst[6],
     _GEN[24],
     _GEN[26],
     _GEN[27],
     _GEN[28],
     _GEN[29]};
  wire [8:0]  _GEN_3 =
    {io_inst[0],
     io_inst[1],
     io_inst[2],
     _GEN[1],
     _GEN[2],
     io_inst[5],
     _GEN[4],
     io_inst[13],
     _GEN[12]};
  wire [6:0]  _GEN_4 =
    {io_inst[0], io_inst[1], _GEN[2], _GEN[3], io_inst[6], io_inst[25], _GEN[24]};
  wire [11:0] _GEN_5 =
    {io_inst[0],
     io_inst[1],
     _GEN[0],
     _GEN[1],
     io_inst[4],
     _GEN[3],
     io_inst[6],
     io_inst[25],
     _GEN[24],
     _GEN[27],
     _GEN[28],
     _GEN[29]};
  wire [13:0] _GEN_6 =
    {io_inst[0],
     io_inst[1],
     _GEN[0],
     _GEN[1],
     io_inst[4],
     _GEN[3],
     io_inst[6],
     _GEN[10],
     _GEN[12],
     _GEN[24],
     _GEN[25],
     _GEN[26],
     io_inst[29],
     _GEN[28]};
  wire [13:0] _GEN_7 =
    {io_inst[0],
     io_inst[1],
     _GEN[0],
     _GEN[1],
     io_inst[4],
     _GEN[3],
     io_inst[6],
     _GEN[11],
     _GEN[12],
     _GEN[24],
     _GEN[25],
     _GEN[26],
     io_inst[29],
     _GEN[28]};
  wire [13:0] _GEN_8 =
    {io_inst[0],
     io_inst[1],
     _GEN[0],
     _GEN[1],
     io_inst[4],
     _GEN[3],
     io_inst[6],
     _GEN[11],
     _GEN[12],
     _GEN[24],
     _GEN[26],
     io_inst[29],
     _GEN[28],
     _GEN[29]};
  wire [14:0] _GEN_9 =
    {io_inst[0],
     io_inst[1],
     _GEN[0],
     _GEN[1],
     io_inst[4],
     _GEN[3],
     io_inst[6],
     _GEN[10],
     _GEN[12],
     _GEN[24],
     _GEN[25],
     _GEN[26],
     io_inst[29],
     _GEN[28],
     _GEN[29]};
  wire [14:0] _GEN_10 =
    {io_inst[0],
     io_inst[1],
     _GEN[0],
     _GEN[1],
     io_inst[4],
     _GEN[3],
     io_inst[6],
     _GEN[10],
     _GEN[12],
     io_inst[25],
     _GEN[24],
     _GEN[25],
     _GEN[26],
     io_inst[29],
     _GEN[28]};
  wire [14:0] _GEN_11 =
    {io_inst[0],
     io_inst[1],
     _GEN[0],
     _GEN[1],
     io_inst[4],
     _GEN[3],
     io_inst[6],
     _GEN[11],
     _GEN[12],
     io_inst[25],
     _GEN[24],
     _GEN[25],
     _GEN[26],
     io_inst[29],
     _GEN[28]};
  wire [14:0] _GEN_12 =
    {io_inst[0],
     io_inst[1],
     _GEN[0],
     _GEN[1],
     io_inst[4],
     _GEN[3],
     io_inst[6],
     _GEN[11],
     _GEN[12],
     io_inst[25],
     _GEN[24],
     _GEN[26],
     io_inst[29],
     _GEN[28],
     _GEN[29]};
  wire [17:0] _GEN_13 =
    {io_inst[0],
     io_inst[1],
     _GEN[0],
     _GEN[1],
     io_inst[4],
     _GEN[3],
     io_inst[6],
     io_inst[20],
     _GEN[19],
     _GEN[20],
     _GEN[21],
     _GEN[22],
     _GEN[23],
     _GEN[24],
     _GEN[25],
     _GEN[26],
     _GEN[27],
     io_inst[30]};
  wire [18:0] _GEN_14 =
    {io_inst[0],
     io_inst[1],
     _GEN[0],
     _GEN[1],
     io_inst[4],
     _GEN[3],
     io_inst[6],
     io_inst[20],
     _GEN[19],
     _GEN[20],
     _GEN[21],
     _GEN[22],
     _GEN[23],
     _GEN[24],
     _GEN[25],
     _GEN[26],
     _GEN[27],
     io_inst[30],
     _GEN[29]};
  wire [17:0] _GEN_15 =
    {io_inst[0],
     io_inst[1],
     _GEN[0],
     _GEN[1],
     io_inst[4],
     _GEN[3],
     io_inst[6],
     _GEN[18],
     _GEN[19],
     _GEN[20],
     _GEN[21],
     _GEN[22],
     io_inst[25],
     _GEN[24],
     _GEN[25],
     _GEN[26],
     _GEN[27],
     io_inst[30]};
  wire [18:0] _GEN_16 =
    {io_inst[0],
     io_inst[1],
     _GEN[0],
     _GEN[1],
     io_inst[4],
     _GEN[3],
     io_inst[6],
     _GEN[18],
     _GEN[19],
     _GEN[20],
     _GEN[21],
     _GEN[22],
     io_inst[25],
     _GEN[24],
     _GEN[25],
     _GEN[26],
     _GEN[27],
     io_inst[30],
     _GEN[29]};
  wire [17:0] _GEN_17 =
    {io_inst[0],
     io_inst[1],
     _GEN[0],
     _GEN[1],
     io_inst[4],
     _GEN[3],
     io_inst[6],
     _GEN[18],
     _GEN[19],
     _GEN[20],
     _GEN[21],
     _GEN[22],
     _GEN[24],
     io_inst[27],
     io_inst[28],
     _GEN[27],
     io_inst[30],
     _GEN[29]};
  wire [18:0] _GEN_18 =
    {io_inst[0],
     io_inst[1],
     _GEN[0],
     _GEN[1],
     io_inst[4],
     _GEN[3],
     io_inst[6],
     _GEN[18],
     _GEN[19],
     _GEN[20],
     _GEN[21],
     _GEN[22],
     io_inst[25],
     _GEN[24],
     io_inst[27],
     io_inst[28],
     _GEN[27],
     io_inst[30],
     _GEN[29]};
  wire [14:0] _GEN_19 =
    {io_inst[0],
     io_inst[1],
     _GEN[0],
     _GEN[1],
     io_inst[4],
     _GEN[3],
     io_inst[6],
     _GEN[10],
     _GEN[12],
     _GEN[24],
     _GEN[25],
     _GEN[26],
     io_inst[29],
     _GEN[28],
     io_inst[31]};
  wire [14:0] _GEN_20 =
    {io_inst[0],
     io_inst[1],
     _GEN[0],
     _GEN[1],
     io_inst[4],
     _GEN[3],
     io_inst[6],
     _GEN[11],
     _GEN[12],
     _GEN[24],
     _GEN[25],
     _GEN[26],
     io_inst[29],
     _GEN[28],
     io_inst[31]};
  wire [15:0] _GEN_21 =
    {io_inst[0],
     io_inst[1],
     _GEN[0],
     _GEN[1],
     io_inst[4],
     _GEN[3],
     io_inst[6],
     _GEN[20],
     _GEN[21],
     _GEN[22],
     _GEN[24],
     _GEN[25],
     _GEN[26],
     _GEN[27],
     io_inst[30],
     io_inst[31]};
  wire [15:0] _GEN_22 =
    {io_inst[0],
     io_inst[1],
     _GEN[0],
     _GEN[1],
     io_inst[4],
     _GEN[3],
     io_inst[6],
     _GEN[20],
     _GEN[21],
     _GEN[22],
     _GEN[24],
     _GEN[25],
     io_inst[28],
     _GEN[27],
     io_inst[30],
     io_inst[31]};
  wire [19:0] _GEN_23 =
    {io_inst[0],
     io_inst[1],
     _GEN[0],
     _GEN[1],
     io_inst[4],
     _GEN[3],
     io_inst[6],
     _GEN[11],
     _GEN[12],
     _GEN[18],
     _GEN[19],
     _GEN[20],
     _GEN[21],
     _GEN[22],
     _GEN[24],
     _GEN[25],
     _GEN[26],
     io_inst[29],
     io_inst[30],
     io_inst[31]};
  wire [20:0] _GEN_24 =
    {io_inst[0],
     io_inst[1],
     _GEN[0],
     _GEN[1],
     io_inst[4],
     _GEN[3],
     io_inst[6],
     _GEN[11],
     _GEN[12],
     _GEN[18],
     _GEN[19],
     _GEN[20],
     _GEN[21],
     _GEN[22],
     io_inst[25],
     _GEN[24],
     _GEN[25],
     _GEN[26],
     io_inst[29],
     io_inst[30],
     io_inst[31]};
  wire [20:0] _GEN_25 =
    {io_inst[0],
     io_inst[1],
     _GEN[0],
     _GEN[1],
     io_inst[4],
     _GEN[3],
     io_inst[6],
     _GEN[10],
     _GEN[11],
     _GEN[12],
     _GEN[18],
     _GEN[19],
     _GEN[20],
     _GEN[21],
     _GEN[22],
     _GEN[24],
     _GEN[25],
     io_inst[28],
     io_inst[29],
     io_inst[30],
     io_inst[31]};
  assign io_sigs_wen =
    |{&_GEN_0,
      &_GEN_1,
      &{io_inst[0],
        io_inst[1],
        io_inst[2],
        _GEN[1],
        _GEN[2],
        _GEN[3],
        _GEN[4],
        io_inst[13],
        _GEN[12]},
      &_GEN_8,
      &_GEN_9,
      &_GEN_14,
      &_GEN_16,
      &_GEN_17,
      &_GEN_22,
      &_GEN_25};
  assign io_sigs_ren1 =
    |{&_GEN_0,
      &_GEN_1,
      &_GEN_6,
      &_GEN_7,
      &_GEN_8,
      &_GEN_13,
      &_GEN_15,
      &_GEN_17,
      &_GEN_21,
      &_GEN_23};
  assign io_sigs_ren2 = |{&_GEN_0, &_GEN_1, &_GEN_3, &_GEN_6, &_GEN_7, &_GEN_8};
  assign io_sigs_ren3 = &_GEN_0;
  assign io_sigs_swap12 = &_GEN_3;
  assign io_sigs_swap23 = &_GEN_2;
  assign io_sigs_typeTagIn =
    {1'h0,
     |{&_GEN_3,
       &_GEN_4,
       &_GEN_5,
       &_GEN_10,
       &_GEN_11,
       &_GEN_12,
       &_GEN_14,
       &_GEN_18,
       &{io_inst[0],
         io_inst[1],
         _GEN[0],
         _GEN[1],
         io_inst[4],
         _GEN[3],
         io_inst[6],
         _GEN[20],
         _GEN[21],
         _GEN[22],
         io_inst[25],
         _GEN[24],
         _GEN[25],
         _GEN[27],
         io_inst[30],
         io_inst[31]},
       &{io_inst[0],
         io_inst[1],
         _GEN[0],
         _GEN[1],
         io_inst[4],
         _GEN[3],
         io_inst[6],
         _GEN[10],
         _GEN[11],
         _GEN[12],
         _GEN[18],
         _GEN[19],
         _GEN[20],
         _GEN[21],
         _GEN[22],
         _GEN[24],
         _GEN[25],
         _GEN[26],
         io_inst[29],
         io_inst[30],
         io_inst[31]},
       &{io_inst[0],
         io_inst[1],
         _GEN[0],
         _GEN[1],
         io_inst[4],
         _GEN[3],
         io_inst[6],
         _GEN[10],
         _GEN[11],
         _GEN[12],
         _GEN[18],
         _GEN[19],
         _GEN[20],
         _GEN[21],
         _GEN[22],
         io_inst[25],
         _GEN[24],
         _GEN[25],
         io_inst[29],
         io_inst[30],
         io_inst[31]},
       &_GEN_24}};
  assign io_sigs_typeTagOut =
    {1'h0,
     |{&{io_inst[0],
         io_inst[1],
         io_inst[2],
         _GEN[1],
         _GEN[2],
         io_inst[5],
         _GEN[4],
         io_inst[12],
         io_inst[13],
         _GEN[12]},
       &_GEN_4,
       &_GEN_5,
       &_GEN_10,
       &_GEN_11,
       &_GEN_12,
       &_GEN_16,
       &_GEN_18,
       &{io_inst[0],
         io_inst[1],
         _GEN[0],
         _GEN[1],
         io_inst[4],
         _GEN[3],
         io_inst[6],
         _GEN[20],
         _GEN[21],
         _GEN[22],
         io_inst[25],
         _GEN[24],
         _GEN[25],
         io_inst[28],
         _GEN[27],
         io_inst[30],
         io_inst[31]},
       &_GEN_24,
       &_GEN_25}};
  assign io_sigs_fromint = |{&_GEN_22, &_GEN_25};
  assign io_sigs_toint = |{&_GEN_3, &_GEN_19, &_GEN_20, &_GEN_21, &_GEN_23};
  assign io_sigs_fastpipe = |{&_GEN_8, &_GEN_9, &_GEN_14, &_GEN_16};
  assign io_sigs_fma =
    |{&_GEN_0,
      &{io_inst[0],
        io_inst[1],
        _GEN[0],
        _GEN[1],
        io_inst[4],
        _GEN[3],
        io_inst[6],
        _GEN[24],
        _GEN[25],
        _GEN[27],
        _GEN[28],
        _GEN[29]},
      &_GEN_2};
  assign io_sigs_div =
    &{io_inst[0],
      io_inst[1],
      _GEN[0],
      _GEN[1],
      io_inst[4],
      _GEN[3],
      io_inst[6],
      _GEN[24],
      io_inst[27],
      io_inst[28],
      _GEN[27],
      _GEN[28],
      _GEN[29]};
  assign io_sigs_sqrt = &_GEN_17;
  assign io_sigs_wflags =
    |{&_GEN_0,
      &_GEN_1,
      &{io_inst[0],
        io_inst[1],
        _GEN[0],
        _GEN[1],
        io_inst[4],
        _GEN[3],
        io_inst[6],
        _GEN[11],
        _GEN[12],
        _GEN[24],
        io_inst[27],
        _GEN[26],
        io_inst[29],
        _GEN[28],
        _GEN[29]},
      &_GEN_13,
      &_GEN_15,
      &_GEN_17,
      &_GEN_19,
      &_GEN_20,
      &{io_inst[0],
        io_inst[1],
        _GEN[0],
        _GEN[1],
        io_inst[4],
        _GEN[3],
        io_inst[6],
        _GEN[20],
        _GEN[21],
        _GEN[22],
        _GEN[24],
        _GEN[25],
        _GEN[27],
        io_inst[30],
        io_inst[31]}};
  assign io_sigs_vec = 1'h0;
endmodule

module MulAddRecFNToRaw_preMul(
  input  [1:0]  io_op,
  input  [32:0] io_a,
                io_b,
                io_c,
  output [23:0] io_mulAddA,
                io_mulAddB,
  output [47:0] io_mulAddC,
  output        io_toPostMul_isSigNaNAny,
                io_toPostMul_isNaNAOrB,
                io_toPostMul_isInfA,
                io_toPostMul_isZeroA,
                io_toPostMul_isInfB,
                io_toPostMul_isZeroB,
                io_toPostMul_signProd,
                io_toPostMul_isNaNC,
                io_toPostMul_isInfC,
                io_toPostMul_isZeroC,
  output [9:0]  io_toPostMul_sExpSum,
  output        io_toPostMul_doSubMags,
                io_toPostMul_CIsDominant,
  output [4:0]  io_toPostMul_CDom_CAlignDist,
  output [25:0] io_toPostMul_highAlignedSigC,
  output        io_toPostMul_bit0AlignedSigC
);

  wire        rawA_isNaN = (&(io_a[31:30])) & io_a[29];
  wire        rawB_isNaN = (&(io_b[31:30])) & io_b[29];
  wire        rawC_isNaN = (&(io_c[31:30])) & io_c[29];
  wire        signProd = io_a[32] ^ io_b[32] ^ io_op[1];
  wire [10:0] _GEN = {2'h0, io_a[31:23]} + {2'h0, io_b[31:23]} - 11'hE5;
  wire        doSubMags = signProd ^ io_c[32] ^ io_op[0];
  wire [10:0] _GEN_0 = _GEN - {2'h0, io_c[31:23]};
  wire        isMinCAlign =
    ~(|(io_a[31:29])) | ~(|(io_b[31:29])) | $signed(_GEN_0) < 11'sh0;
  wire        CIsDominant = (|(io_c[31:29])) & (isMinCAlign | _GEN_0[9:0] < 10'h19);
  wire [6:0]  CAlignDist =
    isMinCAlign ? 7'h0 : _GEN_0[9:0] < 10'h4A ? _GEN_0[6:0] : 7'h4A;
  wire [77:0] mainAlignedSigC =
    $signed($signed({doSubMags
                       ? {1'h1, ~(|(io_c[31:29])), ~(io_c[22:0])}
                       : {1'h0, |(io_c[31:29]), io_c[22:0]},
                     {53{doSubMags}}}) >>> CAlignDist);
  wire [32:0] reduced4CExtra_shift = $signed(33'sh100000000 >>> CAlignDist[6:2]);
  wire [5:0]  _GEN_1 =
    {|(io_c[21:18]),
     |(io_c[17:14]),
     |(io_c[13:10]),
     |(io_c[9:6]),
     |(io_c[5:2]),
     |(io_c[1:0])}
    & {reduced4CExtra_shift[14],
       reduced4CExtra_shift[15],
       reduced4CExtra_shift[16],
       reduced4CExtra_shift[17],
       reduced4CExtra_shift[18],
       reduced4CExtra_shift[19]};
  assign io_mulAddA = {|(io_a[31:29]), io_a[22:0]};
  assign io_mulAddB = {|(io_b[31:29]), io_b[22:0]};
  assign io_mulAddC = mainAlignedSigC[50:3];
  assign io_toPostMul_isSigNaNAny =
    rawA_isNaN & ~(io_a[22]) | rawB_isNaN & ~(io_b[22]) | rawC_isNaN & ~(io_c[22]);
  assign io_toPostMul_isNaNAOrB = rawA_isNaN | rawB_isNaN;
  assign io_toPostMul_isInfA = (&(io_a[31:30])) & ~(io_a[29]);
  assign io_toPostMul_isZeroA = ~(|(io_a[31:29]));
  assign io_toPostMul_isInfB = (&(io_b[31:30])) & ~(io_b[29]);
  assign io_toPostMul_isZeroB = ~(|(io_b[31:29]));
  assign io_toPostMul_signProd = signProd;
  assign io_toPostMul_isNaNC = rawC_isNaN;
  assign io_toPostMul_isInfC = (&(io_c[31:30])) & ~(io_c[29]);
  assign io_toPostMul_isZeroC = ~(|(io_c[31:29]));
  assign io_toPostMul_sExpSum = CIsDominant ? {1'h0, io_c[31:23]} : _GEN[9:0] - 10'h18;
  assign io_toPostMul_doSubMags = doSubMags;
  assign io_toPostMul_CIsDominant = CIsDominant;
  assign io_toPostMul_CDom_CAlignDist = CAlignDist[4:0];
  assign io_toPostMul_highAlignedSigC = mainAlignedSigC[76:51];
  assign io_toPostMul_bit0AlignedSigC =
    doSubMags
      ? (&(mainAlignedSigC[2:0])) & ~(|_GEN_1)
      : (|(mainAlignedSigC[2:0])) | (|_GEN_1);
endmodule

module MulAddRecFNToRaw_postMul(
  input         io_fromPreMul_isSigNaNAny,
                io_fromPreMul_isNaNAOrB,
                io_fromPreMul_isInfA,
                io_fromPreMul_isZeroA,
                io_fromPreMul_isInfB,
                io_fromPreMul_isZeroB,
                io_fromPreMul_signProd,
                io_fromPreMul_isNaNC,
                io_fromPreMul_isInfC,
                io_fromPreMul_isZeroC,
  input  [9:0]  io_fromPreMul_sExpSum,
  input         io_fromPreMul_doSubMags,
                io_fromPreMul_CIsDominant,
  input  [4:0]  io_fromPreMul_CDom_CAlignDist,
  input  [25:0] io_fromPreMul_highAlignedSigC,
  input         io_fromPreMul_bit0AlignedSigC,
  input  [48:0] io_mulAddResult,
  input  [2:0]  io_roundingMode,
  output        io_invalidExc,
                io_rawOut_isNaN,
                io_rawOut_isInf,
                io_rawOut_isZero,
                io_rawOut_sign,
  output [9:0]  io_rawOut_sExp,
  output [26:0] io_rawOut_sig
);

  wire         roundingMode_min = io_roundingMode == 3'h2;
  wire         opSignC = io_fromPreMul_signProd ^ io_fromPreMul_doSubMags;
  wire [25:0]  _GEN =
    io_mulAddResult[48]
      ? io_fromPreMul_highAlignedSigC + 26'h1
      : io_fromPreMul_highAlignedSigC;
  wire [49:0]  CDom_absSigSum =
    io_fromPreMul_doSubMags
      ? ~{_GEN, io_mulAddResult[47:24]}
      : {1'h0, io_fromPreMul_highAlignedSigC[25:24], _GEN[23:0], io_mulAddResult[47:25]};
  wire [80:0]  _GEN_0 = {31'h0, CDom_absSigSum} << io_fromPreMul_CDom_CAlignDist;
  wire [8:0]   CDom_reduced4SigExtra_shift =
    $signed(9'sh100 >>> ~(io_fromPreMul_CDom_CAlignDist[4:2]));
  wire [50:0]  _GEN_1 = {_GEN[1:0], io_mulAddResult[47:0], io_fromPreMul_bit0AlignedSigC};
  wire [50:0]  notCDom_absSigSum =
    _GEN[2] ? ~_GEN_1 : _GEN_1 + {50'h0, io_fromPreMul_doSubMags};
  wire [4:0]   notCDom_normDistReduced2 =
    notCDom_absSigSum[50]
      ? 5'h0
      : (|(notCDom_absSigSum[49:48]))
          ? 5'h1
          : (|(notCDom_absSigSum[47:46]))
              ? 5'h2
              : (|(notCDom_absSigSum[45:44]))
                  ? 5'h3
                  : (|(notCDom_absSigSum[43:42]))
                      ? 5'h4
                      : (|(notCDom_absSigSum[41:40]))
                          ? 5'h5
                          : (|(notCDom_absSigSum[39:38]))
                              ? 5'h6
                              : (|(notCDom_absSigSum[37:36]))
                                  ? 5'h7
                                  : (|(notCDom_absSigSum[35:34]))
                                      ? 5'h8
                                      : (|(notCDom_absSigSum[33:32]))
                                          ? 5'h9
                                          : (|(notCDom_absSigSum[31:30]))
                                              ? 5'hA
                                              : (|(notCDom_absSigSum[29:28]))
                                                  ? 5'hB
                                                  : (|(notCDom_absSigSum[27:26]))
                                                      ? 5'hC
                                                      : (|(notCDom_absSigSum[25:24]))
                                                          ? 5'hD
                                                          : (|(notCDom_absSigSum[23:22]))
                                                              ? 5'hE
                                                              : (|(notCDom_absSigSum[21:20]))
                                                                  ? 5'hF
                                                                  : (|(notCDom_absSigSum[19:18]))
                                                                      ? 5'h10
                                                                      : (|(notCDom_absSigSum[17:16]))
                                                                          ? 5'h11
                                                                          : (|(notCDom_absSigSum[15:14]))
                                                                              ? 5'h12
                                                                              : (|(notCDom_absSigSum[13:12]))
                                                                                  ? 5'h13
                                                                                  : (|(notCDom_absSigSum[11:10]))
                                                                                      ? 5'h14
                                                                                      : (|(notCDom_absSigSum[9:8]))
                                                                                          ? 5'h15
                                                                                          : (|(notCDom_absSigSum[7:6]))
                                                                                              ? 5'h16
                                                                                              : (|(notCDom_absSigSum[5:4]))
                                                                                                  ? 5'h17
                                                                                                  : {4'hC,
                                                                                                     ~(|(notCDom_absSigSum[3:2]))};
  wire [113:0] _GEN_2 =
    {63'h0, notCDom_absSigSum} << {108'h0, notCDom_normDistReduced2, 1'h0};
  wire [16:0]  notCDom_reduced4SigExtra_shift =
    $signed(17'sh10000 >>> ~(notCDom_normDistReduced2[4:1]));
  wire         notCDom_completeCancellation = _GEN_2[51:50] == 2'h0;
  wire         notNaN_isInfProd = io_fromPreMul_isInfA | io_fromPreMul_isInfB;
  wire         notNaN_isInfOut = notNaN_isInfProd | io_fromPreMul_isInfC;
  wire         notNaN_addZeros =
    (io_fromPreMul_isZeroA | io_fromPreMul_isZeroB) & io_fromPreMul_isZeroC;
  assign io_invalidExc =
    io_fromPreMul_isSigNaNAny | io_fromPreMul_isInfA & io_fromPreMul_isZeroB
    | io_fromPreMul_isZeroA & io_fromPreMul_isInfB | ~io_fromPreMul_isNaNAOrB
    & notNaN_isInfProd & io_fromPreMul_isInfC & io_fromPreMul_doSubMags;
  assign io_rawOut_isNaN = io_fromPreMul_isNaNAOrB | io_fromPreMul_isNaNC;
  assign io_rawOut_isInf = notNaN_isInfOut;
  assign io_rawOut_isZero =
    notNaN_addZeros | ~io_fromPreMul_CIsDominant & notCDom_completeCancellation;
  assign io_rawOut_sign =
    notNaN_isInfProd & io_fromPreMul_signProd | io_fromPreMul_isInfC & opSignC
    | notNaN_addZeros & ~roundingMode_min & io_fromPreMul_signProd & opSignC
    | notNaN_addZeros & roundingMode_min & (io_fromPreMul_signProd | opSignC)
    | ~notNaN_isInfOut & ~notNaN_addZeros
    & (io_fromPreMul_CIsDominant
         ? opSignC
         : notCDom_completeCancellation
             ? roundingMode_min
             : io_fromPreMul_signProd ^ _GEN[2]);
  assign io_rawOut_sExp =
    io_fromPreMul_CIsDominant
      ? io_fromPreMul_sExpSum - {9'h0, io_fromPreMul_doSubMags}
      : io_fromPreMul_sExpSum - {4'h0, notCDom_normDistReduced2, 1'h0};
  assign io_rawOut_sig =
    io_fromPreMul_CIsDominant
      ? {_GEN_0[49:24],
         (|(_GEN_0[23:21]))
           | (|({|(CDom_absSigSum[20:17]),
                 |(CDom_absSigSum[16:13]),
                 |(CDom_absSigSum[12:9]),
                 |(CDom_absSigSum[8:5]),
                 |(CDom_absSigSum[4:1]),
                 CDom_absSigSum[0]}
                & {CDom_reduced4SigExtra_shift[1],
                   CDom_reduced4SigExtra_shift[2],
                   CDom_reduced4SigExtra_shift[3],
                   CDom_reduced4SigExtra_shift[4],
                   CDom_reduced4SigExtra_shift[5],
                   CDom_reduced4SigExtra_shift[6]}))
           | (io_fromPreMul_doSubMags
                ? io_mulAddResult[23:0] != 24'hFFFFFF
                : (|(io_mulAddResult[24:0])))}
      : {_GEN_2[51:26],
         (|(_GEN_2[25:23]))
           | (|({|{|(notCDom_absSigSum[23:22]), |(notCDom_absSigSum[21:20])},
                 |{|(notCDom_absSigSum[19:18]), |(notCDom_absSigSum[17:16])},
                 |{|(notCDom_absSigSum[15:14]), |(notCDom_absSigSum[13:12])},
                 |{|(notCDom_absSigSum[11:10]), |(notCDom_absSigSum[9:8])},
                 |{|(notCDom_absSigSum[7:6]), |(notCDom_absSigSum[5:4])},
                 |{|(notCDom_absSigSum[3:2]), |(notCDom_absSigSum[1:0])}}
                & {notCDom_reduced4SigExtra_shift[1],
                   notCDom_reduced4SigExtra_shift[2],
                   notCDom_reduced4SigExtra_shift[3],
                   notCDom_reduced4SigExtra_shift[4],
                   notCDom_reduced4SigExtra_shift[5],
                   notCDom_reduced4SigExtra_shift[6]}))};
endmodule

module RoundAnyRawFNToRecFN(
  input         io_invalidExc,
                io_infiniteExc,
                io_in_isNaN,
                io_in_isInf,
                io_in_isZero,
                io_in_sign,
  input  [9:0]  io_in_sExp,
  input  [26:0] io_in_sig,
  input  [2:0]  io_roundingMode,
  input         io_detectTininess,
  output [32:0] io_out,
  output [4:0]  io_exceptionFlags
);

  wire        roundingMode_near_even = io_roundingMode == 3'h0;
  wire        roundingMode_odd = io_roundingMode == 3'h6;
  wire        roundMagUp =
    io_roundingMode == 3'h2 & io_in_sign | io_roundingMode == 3'h3 & ~io_in_sign;
  wire [8:0]  _GEN = ~(io_in_sExp[8:0]);
  wire [64:0] _GEN_0 = {59'h0, _GEN[5:0]};
  wire [64:0] roundMask_shift = $signed(65'sh10000000000000000 >>> _GEN_0);
  wire [64:0] roundMask_shift_1 = $signed(65'sh10000000000000000 >>> _GEN_0);
  wire [24:0] _GEN_1 =
    _GEN[8]
      ? (_GEN[7]
           ? {~(_GEN[6]
                  ? 22'h0
                  : ~{roundMask_shift[42],
                      roundMask_shift[43],
                      roundMask_shift[44],
                      roundMask_shift[45],
                      roundMask_shift[46],
                      {{roundMask_shift[47:46], roundMask_shift[49]} & 3'h5, 1'h0}
                        | {roundMask_shift[49:48], roundMask_shift[51:50]} & 4'h5,
                      roundMask_shift[51],
                      roundMask_shift[52],
                      roundMask_shift[53],
                      roundMask_shift[54],
                      roundMask_shift[55],
                      roundMask_shift[56],
                      roundMask_shift[57],
                      roundMask_shift[58],
                      roundMask_shift[59],
                      roundMask_shift[60],
                      roundMask_shift[61],
                      roundMask_shift[62],
                      roundMask_shift[63]}),
              3'h7}
           : {22'h0,
              _GEN[6]
                ? {roundMask_shift_1[0], roundMask_shift_1[1], roundMask_shift_1[2]}
                : 3'h0})
      : 25'h0;
  wire        _GEN_2 = _GEN_1[0] | io_in_sig[26];
  wire [25:0] _GEN_3 = {_GEN_1[24:1], _GEN_2, 1'h1};
  wire [25:0] _GEN_4 = {1'h1, ~(_GEN_1[24:1]), ~_GEN_2} & _GEN_3;
  wire [25:0] _GEN_5 = io_in_sig[26:1] & _GEN_4;
  wire [25:0] _GEN_6 = io_in_sig[25:0] & _GEN_3;
  wire        anyRound = (|_GEN_5) | (|_GEN_6);
  wire        _GEN_7 = roundingMode_near_even | io_roundingMode == 3'h4;
  wire [25:0] roundedSig =
    _GEN_7 & (|_GEN_5) | roundMagUp & anyRound
      ? {1'h0, io_in_sig[26:2] | {_GEN_1[24:1], _GEN_2}} + 26'h1
        & ~(roundingMode_near_even & (|_GEN_5) & ~(|_GEN_6) ? _GEN_3 : 26'h0)
      : {1'h0, io_in_sig[26:2] & {~(_GEN_1[24:1]), ~_GEN_2}}
        | (roundingMode_odd & anyRound ? _GEN_4 : 26'h0);
  wire [10:0] sRoundedExp = {io_in_sExp[9], io_in_sExp} + {9'h0, roundedSig[25:24]};
  wire        common_totalUnderflow = $signed(sRoundedExp) < 11'sh6B;
  wire        isNaNOut = io_invalidExc | io_in_isNaN;
  wire        notNaN_isSpecialInfOut = io_infiniteExc | io_in_isInf;
  wire        commonCase = ~isNaNOut & ~notNaN_isSpecialInfOut & ~io_in_isZero;
  wire        overflow = commonCase & $signed(sRoundedExp[10:7]) > 4'sh2;
  wire        overflow_roundMagUp = _GEN_7 | roundMagUp;
  wire        pegMinNonzeroMagOut =
    commonCase & common_totalUnderflow & (roundMagUp | roundingMode_odd);
  wire        pegMaxFiniteMagOut = overflow & ~overflow_roundMagUp;
  wire        notNaN_isInfOut = notNaN_isSpecialInfOut | overflow & overflow_roundMagUp;
  assign io_out =
    {~isNaNOut & io_in_sign,
     sRoundedExp[8:0] & ~(io_in_isZero | common_totalUnderflow ? 9'h1C0 : 9'h0)
       & ~(pegMinNonzeroMagOut ? 9'h194 : 9'h0) & {1'h1, ~pegMaxFiniteMagOut, 7'h7F}
       & {2'h3, ~notNaN_isInfOut, 6'h3F} | (pegMinNonzeroMagOut ? 9'h6B : 9'h0)
       | (pegMaxFiniteMagOut ? 9'h17F : 9'h0) | (notNaN_isInfOut ? 9'h180 : 9'h0)
       | (isNaNOut ? 9'h1C0 : 9'h0),
     (isNaNOut | io_in_isZero | common_totalUnderflow
        ? {isNaNOut, 22'h0}
        : io_in_sig[26] ? roundedSig[23:1] : roundedSig[22:0])
       | {23{pegMaxFiniteMagOut}}};
  assign io_exceptionFlags =
    {io_invalidExc,
     io_infiniteExc,
     overflow,
     commonCase
       & (common_totalUnderflow | anyRound & io_in_sExp[9:8] != 2'h1
          & (io_in_sig[26] ? _GEN_1[1] : _GEN_2)
          & ~(io_detectTininess & ~(io_in_sig[26] ? _GEN_1[2] : _GEN_1[1])
              & (io_in_sig[26] ? roundedSig[25] : roundedSig[24]) & (|_GEN_5)
              & (_GEN_7 & (io_in_sig[26] ? io_in_sig[2] : io_in_sig[1]) | roundMagUp
                 & (io_in_sig[26] & io_in_sig[2] | (|(io_in_sig[1:0])))))),
     overflow | commonCase & (common_totalUnderflow | anyRound)};
endmodule

module RoundRawFNToRecFN(
  input         io_invalidExc,
                io_infiniteExc,
                io_in_isNaN,
                io_in_isInf,
                io_in_isZero,
                io_in_sign,
  input  [9:0]  io_in_sExp,
  input  [26:0] io_in_sig,
  input  [2:0]  io_roundingMode,
  input         io_detectTininess,
  output [32:0] io_out,
  output [4:0]  io_exceptionFlags
);

  RoundAnyRawFNToRecFN roundAnyRawFNToRecFN (
    .io_invalidExc     (io_invalidExc),
    .io_infiniteExc    (io_infiniteExc),
    .io_in_isNaN       (io_in_isNaN),
    .io_in_isInf       (io_in_isInf),
    .io_in_isZero      (io_in_isZero),
    .io_in_sign        (io_in_sign),
    .io_in_sExp        (io_in_sExp),
    .io_in_sig         (io_in_sig),
    .io_roundingMode   (io_roundingMode),
    .io_detectTininess (io_detectTininess),
    .io_out            (io_out),
    .io_exceptionFlags (io_exceptionFlags)
  );
endmodule

module MulAddRecFNPipe_l2_e8_s24(
  input         clock,
                reset,
                io_validin,
  input  [1:0]  io_op,
  input  [32:0] io_a,
                io_b,
                io_c,
  input  [2:0]  io_roundingMode,
  output [32:0] io_out,
  output [4:0]  io_exceptionFlags
);

  wire        _mulAddRecFNToRaw_postMul_io_invalidExc;
  wire        _mulAddRecFNToRaw_postMul_io_rawOut_isNaN;
  wire        _mulAddRecFNToRaw_postMul_io_rawOut_isInf;
  wire        _mulAddRecFNToRaw_postMul_io_rawOut_isZero;
  wire        _mulAddRecFNToRaw_postMul_io_rawOut_sign;
  wire [9:0]  _mulAddRecFNToRaw_postMul_io_rawOut_sExp;
  wire [26:0] _mulAddRecFNToRaw_postMul_io_rawOut_sig;
  wire [23:0] _mulAddRecFNToRaw_preMul_io_mulAddA;
  wire [23:0] _mulAddRecFNToRaw_preMul_io_mulAddB;
  wire [47:0] _mulAddRecFNToRaw_preMul_io_mulAddC;
  wire        _mulAddRecFNToRaw_preMul_io_toPostMul_isSigNaNAny;
  wire        _mulAddRecFNToRaw_preMul_io_toPostMul_isNaNAOrB;
  wire        _mulAddRecFNToRaw_preMul_io_toPostMul_isInfA;
  wire        _mulAddRecFNToRaw_preMul_io_toPostMul_isZeroA;
  wire        _mulAddRecFNToRaw_preMul_io_toPostMul_isInfB;
  wire        _mulAddRecFNToRaw_preMul_io_toPostMul_isZeroB;
  wire        _mulAddRecFNToRaw_preMul_io_toPostMul_signProd;
  wire        _mulAddRecFNToRaw_preMul_io_toPostMul_isNaNC;
  wire        _mulAddRecFNToRaw_preMul_io_toPostMul_isInfC;
  wire        _mulAddRecFNToRaw_preMul_io_toPostMul_isZeroC;
  wire [9:0]  _mulAddRecFNToRaw_preMul_io_toPostMul_sExpSum;
  wire        _mulAddRecFNToRaw_preMul_io_toPostMul_doSubMags;
  wire        _mulAddRecFNToRaw_preMul_io_toPostMul_CIsDominant;
  wire [4:0]  _mulAddRecFNToRaw_preMul_io_toPostMul_CDom_CAlignDist;
  wire [25:0] _mulAddRecFNToRaw_preMul_io_toPostMul_highAlignedSigC;
  wire        _mulAddRecFNToRaw_preMul_io_toPostMul_bit0AlignedSigC;
  reg         mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_isSigNaNAny;
  reg         mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_isNaNAOrB;
  reg         mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_isInfA;
  reg         mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_isZeroA;
  reg         mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_isInfB;
  reg         mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_isZeroB;
  reg         mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_signProd;
  reg         mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_isNaNC;
  reg         mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_isInfC;
  reg         mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_isZeroC;
  reg  [9:0]  mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_sExpSum;
  reg         mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_doSubMags;
  reg         mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_CIsDominant;
  reg  [4:0]  mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_CDom_CAlignDist;
  reg  [25:0] mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_highAlignedSigC;
  reg         mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_bit0AlignedSigC;
  reg  [48:0] mulAddRecFNToRaw_postMul_io_mulAddResult_pipe_b;
  reg  [2:0]  mulAddRecFNToRaw_postMul_io_roundingMode_pipe_b;
  reg  [2:0]  roundingMode_stage0_pipe_b;
  reg         valid_stage0_pipe_v;
  reg         roundRawFNToRecFN_io_invalidExc_pipe_b;
  reg         roundRawFNToRecFN_io_in_pipe_b_isNaN;
  reg         roundRawFNToRecFN_io_in_pipe_b_isInf;
  reg         roundRawFNToRecFN_io_in_pipe_b_isZero;
  reg         roundRawFNToRecFN_io_in_pipe_b_sign;
  reg  [9:0]  roundRawFNToRecFN_io_in_pipe_b_sExp;
  reg  [26:0] roundRawFNToRecFN_io_in_pipe_b_sig;
  reg  [2:0]  roundRawFNToRecFN_io_roundingMode_pipe_b;
  reg         roundRawFNToRecFN_io_detectTininess_pipe_b;
  always @(posedge clock) begin
    if (io_validin) begin
      mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_isSigNaNAny <=
        _mulAddRecFNToRaw_preMul_io_toPostMul_isSigNaNAny;
      mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_isNaNAOrB <=
        _mulAddRecFNToRaw_preMul_io_toPostMul_isNaNAOrB;
      mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_isInfA <=
        _mulAddRecFNToRaw_preMul_io_toPostMul_isInfA;
      mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_isZeroA <=
        _mulAddRecFNToRaw_preMul_io_toPostMul_isZeroA;
      mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_isInfB <=
        _mulAddRecFNToRaw_preMul_io_toPostMul_isInfB;
      mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_isZeroB <=
        _mulAddRecFNToRaw_preMul_io_toPostMul_isZeroB;
      mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_signProd <=
        _mulAddRecFNToRaw_preMul_io_toPostMul_signProd;
      mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_isNaNC <=
        _mulAddRecFNToRaw_preMul_io_toPostMul_isNaNC;
      mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_isInfC <=
        _mulAddRecFNToRaw_preMul_io_toPostMul_isInfC;
      mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_isZeroC <=
        _mulAddRecFNToRaw_preMul_io_toPostMul_isZeroC;
      mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_sExpSum <=
        _mulAddRecFNToRaw_preMul_io_toPostMul_sExpSum;
      mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_doSubMags <=
        _mulAddRecFNToRaw_preMul_io_toPostMul_doSubMags;
      mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_CIsDominant <=
        _mulAddRecFNToRaw_preMul_io_toPostMul_CIsDominant;
      mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_CDom_CAlignDist <=
        _mulAddRecFNToRaw_preMul_io_toPostMul_CDom_CAlignDist;
      mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_highAlignedSigC <=
        _mulAddRecFNToRaw_preMul_io_toPostMul_highAlignedSigC;
      mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_bit0AlignedSigC <=
        _mulAddRecFNToRaw_preMul_io_toPostMul_bit0AlignedSigC;
      mulAddRecFNToRaw_postMul_io_mulAddResult_pipe_b <=
        {1'h0,
         {24'h0, _mulAddRecFNToRaw_preMul_io_mulAddA}
           * {24'h0, _mulAddRecFNToRaw_preMul_io_mulAddB}}
        + {1'h0, _mulAddRecFNToRaw_preMul_io_mulAddC};
      mulAddRecFNToRaw_postMul_io_roundingMode_pipe_b <= io_roundingMode;
      roundingMode_stage0_pipe_b <= io_roundingMode;
    end
    if (valid_stage0_pipe_v) begin
      roundRawFNToRecFN_io_invalidExc_pipe_b <= _mulAddRecFNToRaw_postMul_io_invalidExc;
      roundRawFNToRecFN_io_in_pipe_b_isNaN <= _mulAddRecFNToRaw_postMul_io_rawOut_isNaN;
      roundRawFNToRecFN_io_in_pipe_b_isInf <= _mulAddRecFNToRaw_postMul_io_rawOut_isInf;
      roundRawFNToRecFN_io_in_pipe_b_isZero <= _mulAddRecFNToRaw_postMul_io_rawOut_isZero;
      roundRawFNToRecFN_io_in_pipe_b_sign <= _mulAddRecFNToRaw_postMul_io_rawOut_sign;
      roundRawFNToRecFN_io_in_pipe_b_sExp <= _mulAddRecFNToRaw_postMul_io_rawOut_sExp;
      roundRawFNToRecFN_io_in_pipe_b_sig <= _mulAddRecFNToRaw_postMul_io_rawOut_sig;
      roundRawFNToRecFN_io_roundingMode_pipe_b <= roundingMode_stage0_pipe_b;
    end
    roundRawFNToRecFN_io_detectTininess_pipe_b <=
      valid_stage0_pipe_v | roundRawFNToRecFN_io_detectTininess_pipe_b;
    if (reset)
      valid_stage0_pipe_v <= 1'h0;
    else
      valid_stage0_pipe_v <= io_validin;
  end // always @(posedge)
  MulAddRecFNToRaw_preMul mulAddRecFNToRaw_preMul (
    .io_op                        (io_op),
    .io_a                         (io_a),
    .io_b                         (io_b),
    .io_c                         (io_c),
    .io_mulAddA                   (_mulAddRecFNToRaw_preMul_io_mulAddA),
    .io_mulAddB                   (_mulAddRecFNToRaw_preMul_io_mulAddB),
    .io_mulAddC                   (_mulAddRecFNToRaw_preMul_io_mulAddC),
    .io_toPostMul_isSigNaNAny     (_mulAddRecFNToRaw_preMul_io_toPostMul_isSigNaNAny),
    .io_toPostMul_isNaNAOrB       (_mulAddRecFNToRaw_preMul_io_toPostMul_isNaNAOrB),
    .io_toPostMul_isInfA          (_mulAddRecFNToRaw_preMul_io_toPostMul_isInfA),
    .io_toPostMul_isZeroA         (_mulAddRecFNToRaw_preMul_io_toPostMul_isZeroA),
    .io_toPostMul_isInfB          (_mulAddRecFNToRaw_preMul_io_toPostMul_isInfB),
    .io_toPostMul_isZeroB         (_mulAddRecFNToRaw_preMul_io_toPostMul_isZeroB),
    .io_toPostMul_signProd        (_mulAddRecFNToRaw_preMul_io_toPostMul_signProd),
    .io_toPostMul_isNaNC          (_mulAddRecFNToRaw_preMul_io_toPostMul_isNaNC),
    .io_toPostMul_isInfC          (_mulAddRecFNToRaw_preMul_io_toPostMul_isInfC),
    .io_toPostMul_isZeroC         (_mulAddRecFNToRaw_preMul_io_toPostMul_isZeroC),
    .io_toPostMul_sExpSum         (_mulAddRecFNToRaw_preMul_io_toPostMul_sExpSum),
    .io_toPostMul_doSubMags       (_mulAddRecFNToRaw_preMul_io_toPostMul_doSubMags),
    .io_toPostMul_CIsDominant     (_mulAddRecFNToRaw_preMul_io_toPostMul_CIsDominant),
    .io_toPostMul_CDom_CAlignDist (_mulAddRecFNToRaw_preMul_io_toPostMul_CDom_CAlignDist),
    .io_toPostMul_highAlignedSigC (_mulAddRecFNToRaw_preMul_io_toPostMul_highAlignedSigC),
    .io_toPostMul_bit0AlignedSigC (_mulAddRecFNToRaw_preMul_io_toPostMul_bit0AlignedSigC)
  );
  MulAddRecFNToRaw_postMul mulAddRecFNToRaw_postMul (
    .io_fromPreMul_isSigNaNAny
      (mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_isSigNaNAny),
    .io_fromPreMul_isNaNAOrB
      (mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_isNaNAOrB),
    .io_fromPreMul_isInfA          (mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_isInfA),
    .io_fromPreMul_isZeroA
      (mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_isZeroA),
    .io_fromPreMul_isInfB          (mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_isInfB),
    .io_fromPreMul_isZeroB
      (mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_isZeroB),
    .io_fromPreMul_signProd
      (mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_signProd),
    .io_fromPreMul_isNaNC          (mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_isNaNC),
    .io_fromPreMul_isInfC          (mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_isInfC),
    .io_fromPreMul_isZeroC
      (mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_isZeroC),
    .io_fromPreMul_sExpSum
      (mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_sExpSum),
    .io_fromPreMul_doSubMags
      (mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_doSubMags),
    .io_fromPreMul_CIsDominant
      (mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_CIsDominant),
    .io_fromPreMul_CDom_CAlignDist
      (mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_CDom_CAlignDist),
    .io_fromPreMul_highAlignedSigC
      (mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_highAlignedSigC),
    .io_fromPreMul_bit0AlignedSigC
      (mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_bit0AlignedSigC),
    .io_mulAddResult               (mulAddRecFNToRaw_postMul_io_mulAddResult_pipe_b),
    .io_roundingMode               (mulAddRecFNToRaw_postMul_io_roundingMode_pipe_b),
    .io_invalidExc                 (_mulAddRecFNToRaw_postMul_io_invalidExc),
    .io_rawOut_isNaN               (_mulAddRecFNToRaw_postMul_io_rawOut_isNaN),
    .io_rawOut_isInf               (_mulAddRecFNToRaw_postMul_io_rawOut_isInf),
    .io_rawOut_isZero              (_mulAddRecFNToRaw_postMul_io_rawOut_isZero),
    .io_rawOut_sign                (_mulAddRecFNToRaw_postMul_io_rawOut_sign),
    .io_rawOut_sExp                (_mulAddRecFNToRaw_postMul_io_rawOut_sExp),
    .io_rawOut_sig                 (_mulAddRecFNToRaw_postMul_io_rawOut_sig)
  );
  RoundRawFNToRecFN roundRawFNToRecFN (
    .io_invalidExc     (roundRawFNToRecFN_io_invalidExc_pipe_b),
    .io_infiniteExc    (1'h0),
    .io_in_isNaN       (roundRawFNToRecFN_io_in_pipe_b_isNaN),
    .io_in_isInf       (roundRawFNToRecFN_io_in_pipe_b_isInf),
    .io_in_isZero      (roundRawFNToRecFN_io_in_pipe_b_isZero),
    .io_in_sign        (roundRawFNToRecFN_io_in_pipe_b_sign),
    .io_in_sExp        (roundRawFNToRecFN_io_in_pipe_b_sExp),
    .io_in_sig         (roundRawFNToRecFN_io_in_pipe_b_sig),
    .io_roundingMode   (roundRawFNToRecFN_io_roundingMode_pipe_b),
    .io_detectTininess (roundRawFNToRecFN_io_detectTininess_pipe_b),
    .io_out            (io_out),
    .io_exceptionFlags (io_exceptionFlags)
  );
endmodule

module FPUFMAPipe_l3_f32(
  input         clock,
                reset,
                io_in_valid,
                io_in_bits_ren3,
                io_in_bits_swap23,
  input  [2:0]  io_in_bits_rm,
  input  [1:0]  io_in_bits_fmaCmd,
  input  [64:0] io_in_bits_in1,
                io_in_bits_in2,
                io_in_bits_in3,
  output [64:0] io_out_bits_data,
  output [4:0]  io_out_bits_exc
);

  wire [32:0] _fma_io_out;
  reg         valid;
  reg  [2:0]  in_rm;
  reg  [1:0]  in_fmaCmd;
  reg  [64:0] in_in1;
  reg  [64:0] in_in2;
  reg  [64:0] in_in3;
  always @(posedge clock) begin
    valid <= io_in_valid;
    if (io_in_valid) begin
      in_rm <= io_in_bits_rm;
      in_fmaCmd <= io_in_bits_fmaCmd;
      in_in1 <= io_in_bits_in1;
      if (io_in_bits_swap23)
        in_in2 <= 65'h80000000;
      else
        in_in2 <= io_in_bits_in2;
      if (io_in_bits_ren3 | io_in_bits_swap23)
        in_in3 <= io_in_bits_in3;
      else
        in_in3 <= {32'h0, (io_in_bits_in1[32:0] ^ io_in_bits_in2[32:0]) & 33'h100000000};
    end
  end // always @(posedge)
  MulAddRecFNPipe_l2_e8_s24 fma (
    .clock             (clock),
    .reset             (reset),
    .io_validin        (valid),
    .io_op             (in_fmaCmd),
    .io_a              (in_in1[32:0]),
    .io_b              (in_in2[32:0]),
    .io_c              (in_in3[32:0]),
    .io_roundingMode   (in_rm),
    .io_out            (_fma_io_out),
    .io_exceptionFlags (io_out_bits_exc)
  );
  assign io_out_bits_data = {32'h0, _fma_io_out};
endmodule

module CompareRecFN(
  input  [64:0] io_a,
                io_b,
  input         io_signaling,
  output        io_lt,
                io_eq,
  output [4:0]  io_exceptionFlags
);

  wire        rawA_isNaN = (&(io_a[63:62])) & io_a[61];
  wire        rawB_isNaN = (&(io_b[63:62])) & io_b[61];
  wire        ordered = ~rawA_isNaN & ~rawB_isNaN;
  wire        bothInfs = (&(io_a[63:62])) & ~(io_a[61]) & (&(io_b[63:62])) & ~(io_b[61]);
  wire        bothZeros = ~(|(io_a[63:61])) & ~(|(io_b[63:61]));
  wire        eqExps = io_a[63:52] == io_b[63:52];
  wire [52:0] _GEN = {|(io_a[63:61]), io_a[51:0]};
  wire [52:0] _GEN_0 = {|(io_b[63:61]), io_b[51:0]};
  wire        common_ltMags =
    $signed({1'h0, io_a[63:52]}) < $signed({1'h0, io_b[63:52]}) | eqExps & _GEN < _GEN_0;
  wire        common_eqMags = eqExps & _GEN == _GEN_0;
  assign io_lt =
    ordered & ~bothZeros
    & (io_a[64] & ~(io_b[64]) | ~bothInfs
       & (io_a[64] & ~common_ltMags & ~common_eqMags | ~(io_b[64]) & common_ltMags));
  assign io_eq =
    ordered & (bothZeros | io_a[64] == io_b[64] & (bothInfs | common_eqMags));
  assign io_exceptionFlags =
    {rawA_isNaN & ~(io_a[51]) | rawB_isNaN & ~(io_b[51]) | io_signaling & ~ordered, 4'h0};
endmodule

module RecFNToIN(
  input  [64:0] io_in,
  input  [2:0]  io_roundingMode,
  input         io_signedOut,
  output [63:0] io_out,
  output [2:0]  io_intExceptionFlags
);

  wire         rawIn_isNaN = (&(io_in[63:62])) & io_in[61];
  wire         magJustBelowOne = ~(io_in[63]) & (&(io_in[62:52]));
  wire         roundingMode_odd = io_roundingMode == 3'h6;
  wire [115:0] shiftedSig =
    {63'h0, io_in[63], io_in[51:0]} << (io_in[63] ? io_in[57:52] : 6'h0);
  wire [1:0]   _GEN = {shiftedSig[51], |(shiftedSig[50:0])};
  wire         common_inexact = io_in[63] ? (|_GEN) : (|(io_in[63:61]));
  wire         roundIncr =
    io_roundingMode == 3'h0
    & (io_in[63] & ((&(shiftedSig[52:51])) | (&_GEN)) | magJustBelowOne & (|_GEN))
    | io_roundingMode == 3'h4 & (io_in[63] & shiftedSig[51] | magJustBelowOne)
    | (io_roundingMode == 3'h2 | roundingMode_odd) & io_in[64] & common_inexact
    | io_roundingMode == 3'h3 & ~(io_in[64]) & common_inexact;
  wire [63:0]  complUnroundedInt = {64{io_in[64]}} ^ shiftedSig[115:52];
  wire [63:0]  _GEN_0 =
    roundIncr ^ io_in[64] ? complUnroundedInt + 64'h1 : complUnroundedInt;
  wire         magGeOne_atOverflowEdge = io_in[62:52] == 11'h3F;
  wire         roundCarryBut2 = (&(shiftedSig[113:52])) & roundIncr;
  wire         common_overflow =
    io_in[63]
      ? (|(io_in[62:58]))
        | (io_signedOut
             ? (io_in[64]
                  ? magGeOne_atOverflowEdge & ((|(shiftedSig[114:52])) | roundIncr)
                  : magGeOne_atOverflowEdge | io_in[62:52] == 11'h3E & roundCarryBut2)
             : io_in[64] | magGeOne_atOverflowEdge & shiftedSig[114] & roundCarryBut2)
      : ~io_signedOut & io_in[64] & roundIncr;
  wire         invalidExc = rawIn_isNaN | (&(io_in[63:62])) & ~(io_in[61]);
  wire         excSign = ~rawIn_isNaN & io_in[64];
  assign io_out =
    invalidExc | common_overflow
      ? {io_signedOut == excSign, {63{~excSign}}}
      : {_GEN_0[63:1], _GEN_0[0] | roundingMode_odd & common_inexact};
  assign io_intExceptionFlags =
    {invalidExc,
     ~invalidExc & common_overflow,
     ~invalidExc & ~common_overflow & common_inexact};
endmodule

module RecFNToIN_1(
  input  [64:0] io_in,
  input  [2:0]  io_roundingMode,
  input         io_signedOut,
  output [2:0]  io_intExceptionFlags
);

  wire        magJustBelowOne = ~(io_in[63]) & (&(io_in[62:52]));
  wire [83:0] shiftedSig =
    {31'h0, io_in[63], io_in[51:0]} << (io_in[63] ? io_in[56:52] : 5'h0);
  wire [1:0]  _GEN = {shiftedSig[51], |(shiftedSig[50:0])};
  wire        common_inexact = io_in[63] ? (|_GEN) : (|(io_in[63:61]));
  wire        roundIncr =
    io_roundingMode == 3'h0
    & (io_in[63] & ((&(shiftedSig[52:51])) | (&_GEN)) | magJustBelowOne & (|_GEN))
    | io_roundingMode == 3'h4 & (io_in[63] & shiftedSig[51] | magJustBelowOne)
    | (io_roundingMode == 3'h2 | io_roundingMode == 3'h6) & io_in[64] & common_inexact
    | io_roundingMode == 3'h3 & ~(io_in[64]) & common_inexact;
  wire        magGeOne_atOverflowEdge = io_in[62:52] == 11'h1F;
  wire        roundCarryBut2 = (&(shiftedSig[81:52])) & roundIncr;
  wire        common_overflow =
    io_in[63]
      ? (|(io_in[62:57]))
        | (io_signedOut
             ? (io_in[64]
                  ? magGeOne_atOverflowEdge & ((|(shiftedSig[82:52])) | roundIncr)
                  : magGeOne_atOverflowEdge | io_in[62:52] == 11'h1E & roundCarryBut2)
             : io_in[64] | magGeOne_atOverflowEdge & shiftedSig[82] & roundCarryBut2)
      : ~io_signedOut & io_in[64] & roundIncr;
  wire        invalidExc =
    (&(io_in[63:62])) & io_in[61] | (&(io_in[63:62])) & ~(io_in[61]);
  assign io_intExceptionFlags =
    {invalidExc,
     ~invalidExc & common_overflow,
     ~invalidExc & ~common_overflow & common_inexact};
endmodule

module FPToInt(
  input         clock,
                io_in_valid,
                io_in_bits_ren2,
  input  [1:0]  io_in_bits_typeTagOut,
  input         io_in_bits_wflags,
  input  [2:0]  io_in_bits_rm,
  input  [1:0]  io_in_bits_typ,
                io_in_bits_fmt,
  input  [64:0] io_in_bits_in1,
                io_in_bits_in2,
  output [2:0]  io_out_bits_in_rm,
  output [64:0] io_out_bits_in_in1,
                io_out_bits_in_in2,
  output        io_out_bits_lt,
  output [63:0] io_out_bits_store,
                io_out_bits_toint,
  output [4:0]  io_out_bits_exc
);

  wire [63:0] toint;
  wire        _in_typ_0;
  wire        intType;
  wire [2:0]  _narrow_io_intExceptionFlags;
  wire [63:0] _conv_io_out;
  wire [2:0]  _conv_io_intExceptionFlags;
  wire        _dcmp_io_lt;
  wire        _dcmp_io_eq;
  wire [4:0]  _dcmp_io_exceptionFlags;
  reg         in_ren2;
  reg  [1:0]  in_typeTagOut;
  reg         in_wflags;
  reg  [2:0]  in_rm;
  reg  [1:0]  in_typ;
  reg  [1:0]  in_fmt;
  reg  [64:0] in_in1;
  reg  [64:0] in_in2;
  wire [12:0] io_out_bits_store_unrecoded_rawIn_1_sExp = {1'h0, in_in1[63:52]};
  wire [52:0] _GEN = {1'h0, |(in_in1[63:61]), in_in1[51:1]};
  wire [52:0] _GEN_0 = _GEN >> 6'h1 - in_in1[57:52];
  wire [1:0]  _GEN_1 = {in_in1[52], in_in1[30]};
  wire        toint_ieee_prevUnrecoded_rawIn_isInf = (&_GEN_1) & ~(in_in1[29]);
  wire        toint_ieee_prevUnrecoded_isSubnormal =
    $signed({1'h0, in_in1[52], in_in1[30:23]}) < 10'sh82;
  wire [23:0] _GEN_2 = {1'h0, |{in_in1[52], in_in1[30:29]}, in_in1[22:1]};
  wire [23:0] _GEN_3 = _GEN_2 >> 5'h1 - in_in1[27:23];
  wire [7:0]  _GEN_4 = in_in1[30:23] + 8'h7F;
  wire        toint_ieee_unrecoded_rawIn_1_isInf = (&(in_in1[63:62])) & ~(in_in1[61]);
  wire        toint_ieee_unrecoded_isSubnormal_1 =
    $signed(io_out_bits_store_unrecoded_rawIn_1_sExp) < 13'sh402;
  wire [52:0] _GEN_5 = _GEN >> 6'h1 - in_in1[57:52];
  wire [10:0] _GEN_6 = in_in1[62:52] + 11'h3FF;
  wire [51:0] toint_ieee_unrecoded_fractOut_1 =
    toint_ieee_unrecoded_isSubnormal_1
      ? _GEN_5[51:0]
      : toint_ieee_unrecoded_rawIn_1_isInf ? 52'h0 : in_in1[51:0];
  wire        toint_ieee_prevUnrecoded_rawIn_1_isInf = (&_GEN_1) & ~(in_in1[29]);
  wire        toint_ieee_prevUnrecoded_isSubnormal_1 =
    $signed({1'h0, in_in1[52], in_in1[30:23]}) < 10'sh82;
  wire [23:0] _GEN_7 = _GEN_2 >> 5'h1 - in_in1[27:23];
  wire [63:0] toint_ieee =
    in_typeTagOut[0]
      ? {in_in1[64],
         (toint_ieee_unrecoded_isSubnormal_1 ? 11'h0 : _GEN_6)
           | {11{(&(in_in1[63:62])) & in_in1[61] | toint_ieee_unrecoded_rawIn_1_isInf}},
         toint_ieee_unrecoded_fractOut_1[51:32],
         (&(in_in1[63:61]))
           ? {in_in1[31],
              (toint_ieee_prevUnrecoded_isSubnormal_1 ? 8'h0 : _GEN_4)
                | {8{(&_GEN_1) & in_in1[29] | toint_ieee_prevUnrecoded_rawIn_1_isInf}},
              toint_ieee_prevUnrecoded_isSubnormal_1
                ? _GEN_7[22:0]
                : toint_ieee_prevUnrecoded_rawIn_1_isInf ? 23'h0 : in_in1[22:0]}
           : toint_ieee_unrecoded_fractOut_1[31:0]}
      : {2{(&(in_in1[63:61]))
             ? {in_in1[31],
                (toint_ieee_prevUnrecoded_isSubnormal ? 8'h0 : _GEN_4)
                  | {8{(&_GEN_1) & in_in1[29] | toint_ieee_prevUnrecoded_rawIn_isInf}},
                toint_ieee_prevUnrecoded_isSubnormal
                  ? _GEN_3[22:0]
                  : toint_ieee_prevUnrecoded_rawIn_isInf ? 23'h0 : in_in1[22:0]}
             : $signed(io_out_bits_store_unrecoded_rawIn_1_sExp) < 13'sh402
                 ? _GEN_0[31:0]
                 : (&(in_in1[63:62])) & ~(in_in1[61]) ? 32'h0 : in_in1[31:0]}};
  wire [52:0] _GEN_8 = _GEN >> 6'h1 - in_in1[57:52];
  wire        io_out_bits_store_prevUnrecoded_rawIn_isInf = (&_GEN_1) & ~(in_in1[29]);
  wire        io_out_bits_store_prevUnrecoded_isSubnormal =
    $signed({1'h0, in_in1[52], in_in1[30:23]}) < 10'sh82;
  wire [23:0] _GEN_9 = _GEN_2 >> 5'h1 - in_in1[27:23];
  wire        io_out_bits_store_unrecoded_rawIn_1_isInf =
    (&(in_in1[63:62])) & ~(in_in1[61]);
  wire        io_out_bits_store_unrecoded_isSubnormal_1 =
    $signed(io_out_bits_store_unrecoded_rawIn_1_sExp) < 13'sh402;
  wire [52:0] _GEN_10 = _GEN >> 6'h1 - in_in1[57:52];
  wire [51:0] io_out_bits_store_unrecoded_fractOut_1 =
    io_out_bits_store_unrecoded_isSubnormal_1
      ? _GEN_10[51:0]
      : io_out_bits_store_unrecoded_rawIn_1_isInf ? 52'h0 : in_in1[51:0];
  wire        io_out_bits_store_prevUnrecoded_rawIn_1_isInf = (&_GEN_1) & ~(in_in1[29]);
  wire        io_out_bits_store_prevUnrecoded_isSubnormal_1 =
    $signed({1'h0, in_in1[52], in_in1[30:23]}) < 10'sh82;
  wire [23:0] _GEN_11 = _GEN_2 >> 5'h1 - in_in1[27:23];
  wire [8:0]  _GEN_12 = in_in1[60:52] - 9'h100;
  wire [8:0]  classify_out_expOut =
    in_in1[63:61] == 3'h0 | in_in1[63:61] > 3'h5
      ? {in_in1[63:61], _GEN_12[5:0]}
      : _GEN_12;
  wire        classify_out_isHighSubnormalIn = classify_out_expOut[6:0] < 7'h2;
  wire        _GEN_13 = classify_out_expOut[8:7] == 2'h1;
  wire        classify_out_isSubnormal =
    classify_out_expOut[8:6] == 3'h1 | _GEN_13 & classify_out_isHighSubnormalIn;
  wire        classify_out_isNormal =
    _GEN_13 & ~classify_out_isHighSubnormalIn | classify_out_expOut[8:7] == 2'h2;
  wire        classify_out_isZero = classify_out_expOut[8:6] == 3'h0;
  wire        classify_out_isInf =
    (&(classify_out_expOut[8:7])) & ~(classify_out_expOut[6]);
  wire        classify_out_isHighSubnormalIn_1 = in_in1[61:52] < 10'h2;
  wire        _GEN_14 = in_in1[63:62] == 2'h1;
  wire        classify_out_isSubnormal_1 =
    in_in1[63:61] == 3'h1 | _GEN_14 & classify_out_isHighSubnormalIn_1;
  wire        classify_out_isNormal_1 =
    _GEN_14 & ~classify_out_isHighSubnormalIn_1 | in_in1[63:62] == 2'h2;
  wire        classify_out_isZero_1 = in_in1[63:61] == 3'h0;
  wire        classify_out_isInf_1 = (&(in_in1[63:62])) & ~(in_in1[61]);
  assign intType = in_wflags ? ~in_ren2 & in_typ[1] : ~(in_rm[0]) & in_fmt[0];
  assign _in_typ_0 = in_typ[0];
  wire        excSign = in_in1[64] & ~(&(in_in1[63:61]));
  wire        invalid = _conv_io_intExceptionFlags[2] | _narrow_io_intExceptionFlags[1];
  assign toint =
    in_wflags
      ? (in_ren2
           ? {toint_ieee[63:32], 31'h0, |(~(in_rm[1:0]) & {_dcmp_io_lt, _dcmp_io_eq})}
           : ~(in_typ[1]) & invalid
               ? {_conv_io_out[63:32], ~_in_typ_0 == excSign, {31{~excSign}}}
               : _conv_io_out)
      : in_rm[0]
          ? {toint_ieee[63:32],
             22'h0,
             in_typeTagOut[0]
               ? {(&(in_in1[63:61])) & in_in1[51],
                  (&(in_in1[63:61])) & ~(in_in1[51]),
                  classify_out_isInf_1 & ~(in_in1[64]),
                  classify_out_isNormal_1 & ~(in_in1[64]),
                  classify_out_isSubnormal_1 & ~(in_in1[64]),
                  classify_out_isZero_1 & ~(in_in1[64]),
                  classify_out_isZero_1 & in_in1[64],
                  classify_out_isSubnormal_1 & in_in1[64],
                  classify_out_isNormal_1 & in_in1[64],
                  classify_out_isInf_1 & in_in1[64]}
               : {(&(classify_out_expOut[8:6])) & in_in1[51],
                  (&(classify_out_expOut[8:6])) & ~(in_in1[51]),
                  classify_out_isInf & ~(in_in1[64]),
                  classify_out_isNormal & ~(in_in1[64]),
                  classify_out_isSubnormal & ~(in_in1[64]),
                  classify_out_isZero & ~(in_in1[64]),
                  classify_out_isZero & in_in1[64],
                  classify_out_isSubnormal & in_in1[64],
                  classify_out_isNormal & in_in1[64],
                  classify_out_isInf & in_in1[64]}}
          : toint_ieee;
  always @(posedge clock) begin
    if (io_in_valid) begin
      in_ren2 <= io_in_bits_ren2;
      in_typeTagOut <= io_in_bits_typeTagOut;
      in_wflags <= io_in_bits_wflags;
      in_rm <= io_in_bits_rm;
      in_typ <= io_in_bits_typ;
      in_fmt <= io_in_bits_fmt;
      in_in1 <= io_in_bits_in1;
      in_in2 <= io_in_bits_in2;
    end
  end // always @(posedge)
  CompareRecFN dcmp (
    .io_a              (in_in1),
    .io_b              (in_in2),
    .io_signaling      (~(in_rm[1])),
    .io_lt             (_dcmp_io_lt),
    .io_eq             (_dcmp_io_eq),
    .io_exceptionFlags (_dcmp_io_exceptionFlags)
  );
  RecFNToIN conv (
    .io_in                (in_in1),
    .io_roundingMode      (in_rm),
    .io_signedOut         (~_in_typ_0),
    .io_out               (_conv_io_out),
    .io_intExceptionFlags (_conv_io_intExceptionFlags)
  );
  RecFNToIN_1 narrow (
    .io_in                (in_in1),
    .io_roundingMode      (in_rm),
    .io_signedOut         (~_in_typ_0),
    .io_intExceptionFlags (_narrow_io_intExceptionFlags)
  );
  assign io_out_bits_in_rm = in_rm;
  assign io_out_bits_in_in1 = in_in1;
  assign io_out_bits_in_in2 = in_in2;
  assign io_out_bits_lt =
    _dcmp_io_lt | $signed(in_in1) < 65'sh0 & $signed(in_in2) > -65'sh1;
  assign io_out_bits_store =
    in_typeTagOut[0]
      ? {in_in1[64],
         (io_out_bits_store_unrecoded_isSubnormal_1 ? 11'h0 : _GEN_6)
           | {11{(&(in_in1[63:62])) & in_in1[61]
                   | io_out_bits_store_unrecoded_rawIn_1_isInf}},
         io_out_bits_store_unrecoded_fractOut_1[51:32],
         (&(in_in1[63:61]))
           ? {in_in1[31],
              (io_out_bits_store_prevUnrecoded_isSubnormal_1 ? 8'h0 : _GEN_4)
                | {8{(&_GEN_1) & in_in1[29]
                       | io_out_bits_store_prevUnrecoded_rawIn_1_isInf}},
              io_out_bits_store_prevUnrecoded_isSubnormal_1
                ? _GEN_11[22:0]
                : io_out_bits_store_prevUnrecoded_rawIn_1_isInf ? 23'h0 : in_in1[22:0]}
           : io_out_bits_store_unrecoded_fractOut_1[31:0]}
      : {2{(&(in_in1[63:61]))
             ? {in_in1[31],
                (io_out_bits_store_prevUnrecoded_isSubnormal ? 8'h0 : _GEN_4)
                  | {8{(&_GEN_1) & in_in1[29]
                         | io_out_bits_store_prevUnrecoded_rawIn_isInf}},
                io_out_bits_store_prevUnrecoded_isSubnormal
                  ? _GEN_9[22:0]
                  : io_out_bits_store_prevUnrecoded_rawIn_isInf ? 23'h0 : in_in1[22:0]}
             : $signed(io_out_bits_store_unrecoded_rawIn_1_sExp) < 13'sh402
                 ? _GEN_8[31:0]
                 : (&(in_in1[63:62])) & ~(in_in1[61]) ? 32'h0 : in_in1[31:0]}};
  assign io_out_bits_toint = intType ? toint : {{32{toint[31]}}, toint[31:0]};
  assign io_out_bits_exc =
    in_wflags
      ? (in_ren2
           ? _dcmp_io_exceptionFlags
           : in_typ[1]
               ? {|(_conv_io_intExceptionFlags[2:1]), 3'h0, _conv_io_intExceptionFlags[0]}
               : {invalid, 3'h0, ~invalid & _conv_io_intExceptionFlags[0]})
      : 5'h0;
endmodule

module RoundAnyRawFNToRecFN_1(
  input         io_in_isZero,
                io_in_sign,
  input  [8:0]  io_in_sExp,
  input  [64:0] io_in_sig,
  input  [2:0]  io_roundingMode,
  output [32:0] io_out,
  output [4:0]  io_exceptionFlags
);

  wire        roundingMode_near_even = io_roundingMode == 3'h0;
  wire        common_inexact = io_in_sig[39] | (|(io_in_sig[38:0]));
  wire [25:0] roundedSig =
    (roundingMode_near_even | io_roundingMode == 3'h4) & io_in_sig[39]
    | (io_roundingMode == 3'h2 & io_in_sign | io_roundingMode == 3'h3 & ~io_in_sign)
    & common_inexact
      ? {1'h0, io_in_sig[64:40]} + 26'h1
        & {25'h1FFFFFF, ~(roundingMode_near_even & io_in_sig[39] & ~(|(io_in_sig[38:0])))}
      : {1'h0,
         io_in_sig[64:41],
         io_in_sig[40] | io_roundingMode == 3'h6 & common_inexact};
  assign io_out =
    {io_in_sign,
     io_in_sExp + {7'h0, roundedSig[25:24]} + 9'h80 & ~(io_in_isZero ? 9'h1C0 : 9'h0),
     io_in_isZero ? 23'h0 : roundedSig[22:0]};
  assign io_exceptionFlags = {4'h0, ~io_in_isZero & common_inexact};
endmodule

module INToRecFN(
  input         io_signedIn,
  input  [63:0] io_in,
  input  [2:0]  io_roundingMode,
  output [32:0] io_out,
  output [4:0]  io_exceptionFlags
);

  wire         intAsRawFloat_sign = io_signedIn & io_in[63];
  wire [63:0]  intAsRawFloat_absIn = intAsRawFloat_sign ? 64'h0 - io_in : io_in;
  wire [5:0]   intAsRawFloat_adjustedNormDist =
    intAsRawFloat_absIn[63]
      ? 6'h0
      : intAsRawFloat_absIn[62]
          ? 6'h1
          : intAsRawFloat_absIn[61]
              ? 6'h2
              : intAsRawFloat_absIn[60]
                  ? 6'h3
                  : intAsRawFloat_absIn[59]
                      ? 6'h4
                      : intAsRawFloat_absIn[58]
                          ? 6'h5
                          : intAsRawFloat_absIn[57]
                              ? 6'h6
                              : intAsRawFloat_absIn[56]
                                  ? 6'h7
                                  : intAsRawFloat_absIn[55]
                                      ? 6'h8
                                      : intAsRawFloat_absIn[54]
                                          ? 6'h9
                                          : intAsRawFloat_absIn[53]
                                              ? 6'hA
                                              : intAsRawFloat_absIn[52]
                                                  ? 6'hB
                                                  : intAsRawFloat_absIn[51]
                                                      ? 6'hC
                                                      : intAsRawFloat_absIn[50]
                                                          ? 6'hD
                                                          : intAsRawFloat_absIn[49]
                                                              ? 6'hE
                                                              : intAsRawFloat_absIn[48]
                                                                  ? 6'hF
                                                                  : intAsRawFloat_absIn[47]
                                                                      ? 6'h10
                                                                      : intAsRawFloat_absIn[46]
                                                                          ? 6'h11
                                                                          : intAsRawFloat_absIn[45]
                                                                              ? 6'h12
                                                                              : intAsRawFloat_absIn[44]
                                                                                  ? 6'h13
                                                                                  : intAsRawFloat_absIn[43]
                                                                                      ? 6'h14
                                                                                      : intAsRawFloat_absIn[42]
                                                                                          ? 6'h15
                                                                                          : intAsRawFloat_absIn[41]
                                                                                              ? 6'h16
                                                                                              : intAsRawFloat_absIn[40]
                                                                                                  ? 6'h17
                                                                                                  : intAsRawFloat_absIn[39]
                                                                                                      ? 6'h18
                                                                                                      : intAsRawFloat_absIn[38]
                                                                                                          ? 6'h19
                                                                                                          : intAsRawFloat_absIn[37]
                                                                                                              ? 6'h1A
                                                                                                              : intAsRawFloat_absIn[36]
                                                                                                                  ? 6'h1B
                                                                                                                  : intAsRawFloat_absIn[35]
                                                                                                                      ? 6'h1C
                                                                                                                      : intAsRawFloat_absIn[34]
                                                                                                                          ? 6'h1D
                                                                                                                          : intAsRawFloat_absIn[33]
                                                                                                                              ? 6'h1E
                                                                                                                              : intAsRawFloat_absIn[32]
                                                                                                                                  ? 6'h1F
                                                                                                                                  : intAsRawFloat_absIn[31]
                                                                                                                                      ? 6'h20
                                                                                                                                      : intAsRawFloat_absIn[30]
                                                                                                                                          ? 6'h21
                                                                                                                                          : intAsRawFloat_absIn[29]
                                                                                                                                              ? 6'h22
                                                                                                                                              : intAsRawFloat_absIn[28]
                                                                                                                                                  ? 6'h23
                                                                                                                                                  : intAsRawFloat_absIn[27]
                                                                                                                                                      ? 6'h24
                                                                                                                                                      : intAsRawFloat_absIn[26]
                                                                                                                                                          ? 6'h25
                                                                                                                                                          : intAsRawFloat_absIn[25]
                                                                                                                                                              ? 6'h26
                                                                                                                                                              : intAsRawFloat_absIn[24]
                                                                                                                                                                  ? 6'h27
                                                                                                                                                                  : intAsRawFloat_absIn[23]
                                                                                                                                                                      ? 6'h28
                                                                                                                                                                      : intAsRawFloat_absIn[22]
                                                                                                                                                                          ? 6'h29
                                                                                                                                                                          : intAsRawFloat_absIn[21]
                                                                                                                                                                              ? 6'h2A
                                                                                                                                                                              : intAsRawFloat_absIn[20]
                                                                                                                                                                                  ? 6'h2B
                                                                                                                                                                                  : intAsRawFloat_absIn[19]
                                                                                                                                                                                      ? 6'h2C
                                                                                                                                                                                      : intAsRawFloat_absIn[18]
                                                                                                                                                                                          ? 6'h2D
                                                                                                                                                                                          : intAsRawFloat_absIn[17]
                                                                                                                                                                                              ? 6'h2E
                                                                                                                                                                                              : intAsRawFloat_absIn[16]
                                                                                                                                                                                                  ? 6'h2F
                                                                                                                                                                                                  : intAsRawFloat_absIn[15]
                                                                                                                                                                                                      ? 6'h30
                                                                                                                                                                                                      : intAsRawFloat_absIn[14]
                                                                                                                                                                                                          ? 6'h31
                                                                                                                                                                                                          : intAsRawFloat_absIn[13]
                                                                                                                                                                                                              ? 6'h32
                                                                                                                                                                                                              : intAsRawFloat_absIn[12]
                                                                                                                                                                                                                  ? 6'h33
                                                                                                                                                                                                                  : intAsRawFloat_absIn[11]
                                                                                                                                                                                                                      ? 6'h34
                                                                                                                                                                                                                      : intAsRawFloat_absIn[10]
                                                                                                                                                                                                                          ? 6'h35
                                                                                                                                                                                                                          : intAsRawFloat_absIn[9]
                                                                                                                                                                                                                              ? 6'h36
                                                                                                                                                                                                                              : intAsRawFloat_absIn[8]
                                                                                                                                                                                                                                  ? 6'h37
                                                                                                                                                                                                                                  : intAsRawFloat_absIn[7]
                                                                                                                                                                                                                                      ? 6'h38
                                                                                                                                                                                                                                      : intAsRawFloat_absIn[6]
                                                                                                                                                                                                                                          ? 6'h39
                                                                                                                                                                                                                                          : intAsRawFloat_absIn[5]
                                                                                                                                                                                                                                              ? 6'h3A
                                                                                                                                                                                                                                              : intAsRawFloat_absIn[4]
                                                                                                                                                                                                                                                  ? 6'h3B
                                                                                                                                                                                                                                                  : intAsRawFloat_absIn[3]
                                                                                                                                                                                                                                                      ? 6'h3C
                                                                                                                                                                                                                                                      : intAsRawFloat_absIn[2]
                                                                                                                                                                                                                                                          ? 6'h3D
                                                                                                                                                                                                                                                          : {5'h1F,
                                                                                                                                                                                                                                                             ~(intAsRawFloat_absIn[1])};
  wire [126:0] _GEN = {63'h0, intAsRawFloat_absIn} << intAsRawFloat_adjustedNormDist;
  RoundAnyRawFNToRecFN_1 roundAnyRawFNToRecFN (
    .io_in_isZero      (~(_GEN[63])),
    .io_in_sign        (intAsRawFloat_sign),
    .io_in_sExp        ({3'h2, ~intAsRawFloat_adjustedNormDist}),
    .io_in_sig         ({1'h0, _GEN[63:0]}),
    .io_roundingMode   (io_roundingMode),
    .io_out            (io_out),
    .io_exceptionFlags (io_exceptionFlags)
  );
endmodule

module RoundAnyRawFNToRecFN_2(
  input         io_in_isZero,
                io_in_sign,
  input  [8:0]  io_in_sExp,
  input  [64:0] io_in_sig,
  input  [2:0]  io_roundingMode,
  output [64:0] io_out,
  output [4:0]  io_exceptionFlags
);

  wire        roundingMode_near_even = io_roundingMode == 3'h0;
  wire        common_inexact = io_in_sig[10] | (|(io_in_sig[9:0]));
  wire [54:0] roundedSig =
    (roundingMode_near_even | io_roundingMode == 3'h4) & io_in_sig[10]
    | (io_roundingMode == 3'h2 & io_in_sign | io_roundingMode == 3'h3 & ~io_in_sign)
    & common_inexact
      ? {1'h0, io_in_sig[64:11]} + 55'h1
        & {54'h3FFFFFFFFFFFFF,
           ~(roundingMode_near_even & io_in_sig[10] & ~(|(io_in_sig[9:0])))}
      : {1'h0,
         io_in_sig[64:12],
         io_in_sig[11] | io_roundingMode == 3'h6 & common_inexact};
  assign io_out =
    {io_in_sign,
     {{3{io_in_sExp[8]}}, io_in_sExp} + {10'h0, roundedSig[54:53]} + 12'h780
       & ~(io_in_isZero ? 12'hE00 : 12'h0),
     io_in_isZero ? 52'h0 : roundedSig[51:0]};
  assign io_exceptionFlags = {4'h0, ~io_in_isZero & common_inexact};
endmodule

module INToRecFN_1(
  input         io_signedIn,
  input  [63:0] io_in,
  input  [2:0]  io_roundingMode,
  output [64:0] io_out,
  output [4:0]  io_exceptionFlags
);

  wire         intAsRawFloat_sign = io_signedIn & io_in[63];
  wire [63:0]  intAsRawFloat_absIn = intAsRawFloat_sign ? 64'h0 - io_in : io_in;
  wire [5:0]   intAsRawFloat_adjustedNormDist =
    intAsRawFloat_absIn[63]
      ? 6'h0
      : intAsRawFloat_absIn[62]
          ? 6'h1
          : intAsRawFloat_absIn[61]
              ? 6'h2
              : intAsRawFloat_absIn[60]
                  ? 6'h3
                  : intAsRawFloat_absIn[59]
                      ? 6'h4
                      : intAsRawFloat_absIn[58]
                          ? 6'h5
                          : intAsRawFloat_absIn[57]
                              ? 6'h6
                              : intAsRawFloat_absIn[56]
                                  ? 6'h7
                                  : intAsRawFloat_absIn[55]
                                      ? 6'h8
                                      : intAsRawFloat_absIn[54]
                                          ? 6'h9
                                          : intAsRawFloat_absIn[53]
                                              ? 6'hA
                                              : intAsRawFloat_absIn[52]
                                                  ? 6'hB
                                                  : intAsRawFloat_absIn[51]
                                                      ? 6'hC
                                                      : intAsRawFloat_absIn[50]
                                                          ? 6'hD
                                                          : intAsRawFloat_absIn[49]
                                                              ? 6'hE
                                                              : intAsRawFloat_absIn[48]
                                                                  ? 6'hF
                                                                  : intAsRawFloat_absIn[47]
                                                                      ? 6'h10
                                                                      : intAsRawFloat_absIn[46]
                                                                          ? 6'h11
                                                                          : intAsRawFloat_absIn[45]
                                                                              ? 6'h12
                                                                              : intAsRawFloat_absIn[44]
                                                                                  ? 6'h13
                                                                                  : intAsRawFloat_absIn[43]
                                                                                      ? 6'h14
                                                                                      : intAsRawFloat_absIn[42]
                                                                                          ? 6'h15
                                                                                          : intAsRawFloat_absIn[41]
                                                                                              ? 6'h16
                                                                                              : intAsRawFloat_absIn[40]
                                                                                                  ? 6'h17
                                                                                                  : intAsRawFloat_absIn[39]
                                                                                                      ? 6'h18
                                                                                                      : intAsRawFloat_absIn[38]
                                                                                                          ? 6'h19
                                                                                                          : intAsRawFloat_absIn[37]
                                                                                                              ? 6'h1A
                                                                                                              : intAsRawFloat_absIn[36]
                                                                                                                  ? 6'h1B
                                                                                                                  : intAsRawFloat_absIn[35]
                                                                                                                      ? 6'h1C
                                                                                                                      : intAsRawFloat_absIn[34]
                                                                                                                          ? 6'h1D
                                                                                                                          : intAsRawFloat_absIn[33]
                                                                                                                              ? 6'h1E
                                                                                                                              : intAsRawFloat_absIn[32]
                                                                                                                                  ? 6'h1F
                                                                                                                                  : intAsRawFloat_absIn[31]
                                                                                                                                      ? 6'h20
                                                                                                                                      : intAsRawFloat_absIn[30]
                                                                                                                                          ? 6'h21
                                                                                                                                          : intAsRawFloat_absIn[29]
                                                                                                                                              ? 6'h22
                                                                                                                                              : intAsRawFloat_absIn[28]
                                                                                                                                                  ? 6'h23
                                                                                                                                                  : intAsRawFloat_absIn[27]
                                                                                                                                                      ? 6'h24
                                                                                                                                                      : intAsRawFloat_absIn[26]
                                                                                                                                                          ? 6'h25
                                                                                                                                                          : intAsRawFloat_absIn[25]
                                                                                                                                                              ? 6'h26
                                                                                                                                                              : intAsRawFloat_absIn[24]
                                                                                                                                                                  ? 6'h27
                                                                                                                                                                  : intAsRawFloat_absIn[23]
                                                                                                                                                                      ? 6'h28
                                                                                                                                                                      : intAsRawFloat_absIn[22]
                                                                                                                                                                          ? 6'h29
                                                                                                                                                                          : intAsRawFloat_absIn[21]
                                                                                                                                                                              ? 6'h2A
                                                                                                                                                                              : intAsRawFloat_absIn[20]
                                                                                                                                                                                  ? 6'h2B
                                                                                                                                                                                  : intAsRawFloat_absIn[19]
                                                                                                                                                                                      ? 6'h2C
                                                                                                                                                                                      : intAsRawFloat_absIn[18]
                                                                                                                                                                                          ? 6'h2D
                                                                                                                                                                                          : intAsRawFloat_absIn[17]
                                                                                                                                                                                              ? 6'h2E
                                                                                                                                                                                              : intAsRawFloat_absIn[16]
                                                                                                                                                                                                  ? 6'h2F
                                                                                                                                                                                                  : intAsRawFloat_absIn[15]
                                                                                                                                                                                                      ? 6'h30
                                                                                                                                                                                                      : intAsRawFloat_absIn[14]
                                                                                                                                                                                                          ? 6'h31
                                                                                                                                                                                                          : intAsRawFloat_absIn[13]
                                                                                                                                                                                                              ? 6'h32
                                                                                                                                                                                                              : intAsRawFloat_absIn[12]
                                                                                                                                                                                                                  ? 6'h33
                                                                                                                                                                                                                  : intAsRawFloat_absIn[11]
                                                                                                                                                                                                                      ? 6'h34
                                                                                                                                                                                                                      : intAsRawFloat_absIn[10]
                                                                                                                                                                                                                          ? 6'h35
                                                                                                                                                                                                                          : intAsRawFloat_absIn[9]
                                                                                                                                                                                                                              ? 6'h36
                                                                                                                                                                                                                              : intAsRawFloat_absIn[8]
                                                                                                                                                                                                                                  ? 6'h37
                                                                                                                                                                                                                                  : intAsRawFloat_absIn[7]
                                                                                                                                                                                                                                      ? 6'h38
                                                                                                                                                                                                                                      : intAsRawFloat_absIn[6]
                                                                                                                                                                                                                                          ? 6'h39
                                                                                                                                                                                                                                          : intAsRawFloat_absIn[5]
                                                                                                                                                                                                                                              ? 6'h3A
                                                                                                                                                                                                                                              : intAsRawFloat_absIn[4]
                                                                                                                                                                                                                                                  ? 6'h3B
                                                                                                                                                                                                                                                  : intAsRawFloat_absIn[3]
                                                                                                                                                                                                                                                      ? 6'h3C
                                                                                                                                                                                                                                                      : intAsRawFloat_absIn[2]
                                                                                                                                                                                                                                                          ? 6'h3D
                                                                                                                                                                                                                                                          : {5'h1F,
                                                                                                                                                                                                                                                             ~(intAsRawFloat_absIn[1])};
  wire [126:0] _GEN = {63'h0, intAsRawFloat_absIn} << intAsRawFloat_adjustedNormDist;
  RoundAnyRawFNToRecFN_2 roundAnyRawFNToRecFN (
    .io_in_isZero      (~(_GEN[63])),
    .io_in_sign        (intAsRawFloat_sign),
    .io_in_sExp        ({3'h2, ~intAsRawFloat_adjustedNormDist}),
    .io_in_sig         ({1'h0, _GEN[63:0]}),
    .io_roundingMode   (io_roundingMode),
    .io_out            (io_out),
    .io_exceptionFlags (io_exceptionFlags)
  );
endmodule

module IntToFP(
  input         clock,
                reset,
                io_in_valid,
  input  [1:0]  io_in_bits_typeTagIn,
  input         io_in_bits_wflags,
  input  [2:0]  io_in_bits_rm,
  input  [1:0]  io_in_bits_typ,
  input  [63:0] io_in_bits_in1,
  output [64:0] io_out_bits_data,
  output [4:0]  io_out_bits_exc
);

  wire [64:0] _i2f_1_io_out;
  wire [4:0]  _i2f_1_io_exceptionFlags;
  wire [32:0] _i2f_io_out;
  wire [4:0]  _i2f_io_exceptionFlags;
  reg         in_pipe_v;
  reg  [1:0]  in_pipe_b_typeTagIn;
  reg         in_pipe_b_wflags;
  reg  [2:0]  in_pipe_b_rm;
  reg  [1:0]  in_pipe_b_typ;
  reg  [63:0] in_pipe_b_in1;
  wire [63:0] intValue_res =
    in_pipe_b_typ[1]
      ? in_pipe_b_in1
      : {{32{~(in_pipe_b_typ[0]) & in_pipe_b_in1[31]}}, in_pipe_b_in1[31:0]};
  reg  [64:0] io_out_pipe_b_data;
  reg  [4:0]  io_out_pipe_b_exc;
  always @(posedge clock) begin
    if (reset)
      in_pipe_v <= 1'h0;
    else
      in_pipe_v <= io_in_valid;
    if (io_in_valid) begin
      in_pipe_b_typeTagIn <= io_in_bits_typeTagIn;
      in_pipe_b_wflags <= io_in_bits_wflags;
      in_pipe_b_rm <= io_in_bits_rm;
      in_pipe_b_typ <= io_in_bits_typ;
      in_pipe_b_in1 <= io_in_bits_in1;
    end
    if (in_pipe_v) begin
      if (in_pipe_b_wflags) begin
        automatic logic [64:0] _GEN;
        _GEN =
          ({65{_i2f_1_io_out[63:61] != 3'h7}} | 65'h1EFEFFFFFFFFFFFFF) & _i2f_1_io_out;
        if (in_pipe_b_typeTagIn[0])
          io_out_pipe_b_data <= _GEN;
        else
          io_out_pipe_b_data <= {_GEN[64:33], _i2f_io_out};
        if (in_pipe_b_typeTagIn[0])
          io_out_pipe_b_exc <= _i2f_1_io_exceptionFlags;
        else
          io_out_pipe_b_exc <= _i2f_io_exceptionFlags;
      end
      else begin
        automatic logic [63:0]  _GEN_0 =
          (in_pipe_b_typeTagIn[0] ? 64'h0 : 64'hFFFFFFFF00000000) | in_pipe_b_in1;
        automatic logic         mux_data_rawIn_isZeroExpIn = _GEN_0[62:52] == 11'h0;
        automatic logic [5:0]   mux_data_rawIn_normDist =
          _GEN_0[51]
            ? 6'h0
            : _GEN_0[50]
                ? 6'h1
                : _GEN_0[49]
                    ? 6'h2
                    : _GEN_0[48]
                        ? 6'h3
                        : _GEN_0[47]
                            ? 6'h4
                            : _GEN_0[46]
                                ? 6'h5
                                : _GEN_0[45]
                                    ? 6'h6
                                    : _GEN_0[44]
                                        ? 6'h7
                                        : _GEN_0[43]
                                            ? 6'h8
                                            : _GEN_0[42]
                                                ? 6'h9
                                                : _GEN_0[41]
                                                    ? 6'hA
                                                    : _GEN_0[40]
                                                        ? 6'hB
                                                        : _GEN_0[39]
                                                            ? 6'hC
                                                            : _GEN_0[38]
                                                                ? 6'hD
                                                                : _GEN_0[37]
                                                                    ? 6'hE
                                                                    : _GEN_0[36]
                                                                        ? 6'hF
                                                                        : _GEN_0[35]
                                                                            ? 6'h10
                                                                            : _GEN_0[34]
                                                                                ? 6'h11
                                                                                : _GEN_0[33]
                                                                                    ? 6'h12
                                                                                    : _GEN_0[32]
                                                                                        ? 6'h13
                                                                                        : _GEN_0[31]
                                                                                            ? 6'h14
                                                                                            : _GEN_0[30]
                                                                                                ? 6'h15
                                                                                                : _GEN_0[29]
                                                                                                    ? 6'h16
                                                                                                    : _GEN_0[28]
                                                                                                        ? 6'h17
                                                                                                        : _GEN_0[27]
                                                                                                            ? 6'h18
                                                                                                            : _GEN_0[26]
                                                                                                                ? 6'h19
                                                                                                                : _GEN_0[25]
                                                                                                                    ? 6'h1A
                                                                                                                    : _GEN_0[24]
                                                                                                                        ? 6'h1B
                                                                                                                        : _GEN_0[23]
                                                                                                                            ? 6'h1C
                                                                                                                            : _GEN_0[22]
                                                                                                                                ? 6'h1D
                                                                                                                                : _GEN_0[21]
                                                                                                                                    ? 6'h1E
                                                                                                                                    : _GEN_0[20]
                                                                                                                                        ? 6'h1F
                                                                                                                                        : _GEN_0[19]
                                                                                                                                            ? 6'h20
                                                                                                                                            : _GEN_0[18]
                                                                                                                                                ? 6'h21
                                                                                                                                                : _GEN_0[17]
                                                                                                                                                    ? 6'h22
                                                                                                                                                    : _GEN_0[16]
                                                                                                                                                        ? 6'h23
                                                                                                                                                        : _GEN_0[15]
                                                                                                                                                            ? 6'h24
                                                                                                                                                            : _GEN_0[14]
                                                                                                                                                                ? 6'h25
                                                                                                                                                                : _GEN_0[13]
                                                                                                                                                                    ? 6'h26
                                                                                                                                                                    : _GEN_0[12]
                                                                                                                                                                        ? 6'h27
                                                                                                                                                                        : _GEN_0[11]
                                                                                                                                                                            ? 6'h28
                                                                                                                                                                            : _GEN_0[10]
                                                                                                                                                                                ? 6'h29
                                                                                                                                                                                : _GEN_0[9]
                                                                                                                                                                                    ? 6'h2A
                                                                                                                                                                                    : _GEN_0[8]
                                                                                                                                                                                        ? 6'h2B
                                                                                                                                                                                        : _GEN_0[7]
                                                                                                                                                                                            ? 6'h2C
                                                                                                                                                                                            : _GEN_0[6]
                                                                                                                                                                                                ? 6'h2D
                                                                                                                                                                                                : _GEN_0[5]
                                                                                                                                                                                                    ? 6'h2E
                                                                                                                                                                                                    : _GEN_0[4]
                                                                                                                                                                                                        ? 6'h2F
                                                                                                                                                                                                        : _GEN_0[3]
                                                                                                                                                                                                            ? 6'h30
                                                                                                                                                                                                            : _GEN_0[2]
                                                                                                                                                                                                                ? 6'h31
                                                                                                                                                                                                                : {5'h19,
                                                                                                                                                                                                                   ~(_GEN_0[1])};
        automatic logic [11:0]  mux_data_rawIn_adjustedExp =
          (mux_data_rawIn_isZeroExpIn
             ? {6'h3F, ~mux_data_rawIn_normDist}
             : {1'h0, _GEN_0[62:52]})
          + {10'h100, mux_data_rawIn_isZeroExpIn ? 2'h2 : 2'h1};
        automatic logic [114:0] _GEN_1 = {63'h0, _GEN_0[51:0]} << mux_data_rawIn_normDist;
        automatic logic [51:0]  _GEN_2 =
          mux_data_rawIn_isZeroExpIn ? {_GEN_1[50:0], 1'h0} : _GEN_0[51:0];
        automatic logic [2:0]   _GEN_3 =
          mux_data_rawIn_isZeroExpIn & ~(|(_GEN_0[51:0]))
            ? 3'h0
            : mux_data_rawIn_adjustedExp[11:9];
        automatic logic         _GEN_4 =
          _GEN_3[0] | (&(mux_data_rawIn_adjustedExp[11:10])) & (|(_GEN_0[51:0]));
        automatic logic         mux_data_rawIn_isZeroExpIn_1 = _GEN_0[30:23] == 8'h0;
        automatic logic [4:0]   mux_data_rawIn_normDist_1 =
          _GEN_0[22]
            ? 5'h0
            : _GEN_0[21]
                ? 5'h1
                : _GEN_0[20]
                    ? 5'h2
                    : _GEN_0[19]
                        ? 5'h3
                        : _GEN_0[18]
                            ? 5'h4
                            : _GEN_0[17]
                                ? 5'h5
                                : _GEN_0[16]
                                    ? 5'h6
                                    : _GEN_0[15]
                                        ? 5'h7
                                        : _GEN_0[14]
                                            ? 5'h8
                                            : _GEN_0[13]
                                                ? 5'h9
                                                : _GEN_0[12]
                                                    ? 5'hA
                                                    : _GEN_0[11]
                                                        ? 5'hB
                                                        : _GEN_0[10]
                                                            ? 5'hC
                                                            : _GEN_0[9]
                                                                ? 5'hD
                                                                : _GEN_0[8]
                                                                    ? 5'hE
                                                                    : _GEN_0[7]
                                                                        ? 5'hF
                                                                        : _GEN_0[6]
                                                                            ? 5'h10
                                                                            : _GEN_0[5]
                                                                                ? 5'h11
                                                                                : _GEN_0[4]
                                                                                    ? 5'h12
                                                                                    : _GEN_0[3]
                                                                                        ? 5'h13
                                                                                        : _GEN_0[2]
                                                                                            ? 5'h14
                                                                                            : _GEN_0[1]
                                                                                                ? 5'h15
                                                                                                : 5'h16;
        automatic logic [8:0]   mux_data_rawIn_adjustedExp_1 =
          (mux_data_rawIn_isZeroExpIn_1
             ? {4'hF, ~mux_data_rawIn_normDist_1}
             : {1'h0, _GEN_0[30:23]})
          + {7'h20, mux_data_rawIn_isZeroExpIn_1 ? 2'h2 : 2'h1};
        automatic logic [2:0]   _GEN_5 =
          mux_data_rawIn_isZeroExpIn_1 & ~(|(_GEN_0[22:0]))
            ? 3'h0
            : mux_data_rawIn_adjustedExp_1[8:6];
        automatic logic [53:0]  _GEN_6 =
          {31'h0, _GEN_0[22:0]} << mux_data_rawIn_normDist_1;
        io_out_pipe_b_data <=
          {_GEN_0[63],
           _GEN_3[2:1],
           _GEN_4,
           (&{_GEN_3[2:1], _GEN_4})
             ? {&(_GEN_2[51:32]),
                mux_data_rawIn_adjustedExp[7:1],
                _GEN_5[2],
                _GEN_2[51:32],
                _GEN_0[31],
                _GEN_5[1],
                _GEN_5[0] | (&(mux_data_rawIn_adjustedExp_1[8:7])) & (|(_GEN_0[22:0])),
                mux_data_rawIn_adjustedExp_1[5:0],
                mux_data_rawIn_isZeroExpIn_1 ? {_GEN_6[21:0], 1'h0} : _GEN_0[22:0]}
             : {mux_data_rawIn_adjustedExp[8:0], _GEN_2}};
        io_out_pipe_b_exc <= 5'h0;
      end
    end
  end // always @(posedge)
  INToRecFN i2f (
    .io_signedIn       (~(in_pipe_b_typ[0])),
    .io_in             (intValue_res),
    .io_roundingMode   (in_pipe_b_rm),
    .io_out            (_i2f_io_out),
    .io_exceptionFlags (_i2f_io_exceptionFlags)
  );
  INToRecFN_1 i2f_1 (
    .io_signedIn       (~(in_pipe_b_typ[0])),
    .io_in             (intValue_res),
    .io_roundingMode   (in_pipe_b_rm),
    .io_out            (_i2f_1_io_out),
    .io_exceptionFlags (_i2f_1_io_exceptionFlags)
  );
  assign io_out_bits_data = io_out_pipe_b_data;
  assign io_out_bits_exc = io_out_pipe_b_exc;
endmodule

module RoundAnyRawFNToRecFN_3(
  input         io_invalidExc,
                io_in_isNaN,
                io_in_isInf,
                io_in_isZero,
                io_in_sign,
  input  [12:0] io_in_sExp,
  input  [53:0] io_in_sig,
  input  [2:0]  io_roundingMode,
  output [32:0] io_out,
  output [4:0]  io_exceptionFlags
);

  wire        roundingMode_near_even = io_roundingMode == 3'h0;
  wire        roundingMode_odd = io_roundingMode == 3'h6;
  wire        roundMagUp =
    io_roundingMode == 3'h2 & io_in_sign | io_roundingMode == 3'h3 & ~io_in_sign;
  wire [13:0] sAdjustedExp = {io_in_sExp[12], io_in_sExp} - 14'h700;
  wire [8:0]  _GEN = ~(sAdjustedExp[8:0]);
  wire [64:0] _GEN_0 = {59'h0, _GEN[5:0]};
  wire [64:0] roundMask_shift = $signed(65'sh10000000000000000 >>> _GEN_0);
  wire [64:0] roundMask_shift_1 = $signed(65'sh10000000000000000 >>> _GEN_0);
  wire [24:0] _GEN_1 =
    _GEN[8]
      ? (_GEN[7]
           ? {~(_GEN[6]
                  ? 22'h0
                  : ~{roundMask_shift[42],
                      roundMask_shift[43],
                      roundMask_shift[44],
                      roundMask_shift[45],
                      roundMask_shift[46],
                      {{roundMask_shift[47:46], roundMask_shift[49]} & 3'h5, 1'h0}
                        | {roundMask_shift[49:48], roundMask_shift[51:50]} & 4'h5,
                      roundMask_shift[51],
                      roundMask_shift[52],
                      roundMask_shift[53],
                      roundMask_shift[54],
                      roundMask_shift[55],
                      roundMask_shift[56],
                      roundMask_shift[57],
                      roundMask_shift[58],
                      roundMask_shift[59],
                      roundMask_shift[60],
                      roundMask_shift[61],
                      roundMask_shift[62],
                      roundMask_shift[63]}),
              3'h7}
           : {22'h0,
              _GEN[6]
                ? {roundMask_shift_1[0], roundMask_shift_1[1], roundMask_shift_1[2]}
                : 3'h0})
      : 25'h0;
  wire [25:0] _GEN_2 = {_GEN_1, 1'h1};
  wire [25:0] _GEN_3 = {1'h1, ~_GEN_1} & _GEN_2;
  wire [25:0] _GEN_4 = io_in_sig[53:28] & _GEN_3;
  wire [25:0] _GEN_5 = {io_in_sig[52:28], |(io_in_sig[27:0])} & _GEN_2;
  wire        anyRound = (|_GEN_4) | (|_GEN_5);
  wire        _GEN_6 = roundingMode_near_even | io_roundingMode == 3'h4;
  wire [25:0] roundedSig =
    _GEN_6 & (|_GEN_4) | roundMagUp & anyRound
      ? {1'h0, io_in_sig[53:29] | _GEN_1} + 26'h1
        & ~(roundingMode_near_even & (|_GEN_4) & ~(|_GEN_5) ? _GEN_2 : 26'h0)
      : {1'h0, io_in_sig[53:29] & ~_GEN_1}
        | (roundingMode_odd & anyRound ? _GEN_3 : 26'h0);
  wire [14:0] sRoundedExp = {sAdjustedExp[13], sAdjustedExp} + {13'h0, roundedSig[25:24]};
  wire        common_totalUnderflow = $signed(sRoundedExp) < 15'sh6B;
  wire        isNaNOut = io_invalidExc | io_in_isNaN;
  wire        commonCase = ~isNaNOut & ~io_in_isInf & ~io_in_isZero;
  wire        overflow = commonCase & $signed(sRoundedExp[14:7]) > 8'sh2;
  wire        overflow_roundMagUp = _GEN_6 | roundMagUp;
  wire        pegMinNonzeroMagOut =
    commonCase & common_totalUnderflow & (roundMagUp | roundingMode_odd);
  wire        pegMaxFiniteMagOut = overflow & ~overflow_roundMagUp;
  wire        notNaN_isInfOut = io_in_isInf | overflow & overflow_roundMagUp;
  assign io_out =
    {~isNaNOut & io_in_sign,
     sRoundedExp[8:0] & ~(io_in_isZero | common_totalUnderflow ? 9'h1C0 : 9'h0)
       & ~(pegMinNonzeroMagOut ? 9'h194 : 9'h0) & {1'h1, ~pegMaxFiniteMagOut, 7'h7F}
       & {2'h3, ~notNaN_isInfOut, 6'h3F} | (pegMinNonzeroMagOut ? 9'h6B : 9'h0)
       | (pegMaxFiniteMagOut ? 9'h17F : 9'h0) | (notNaN_isInfOut ? 9'h180 : 9'h0)
       | (isNaNOut ? 9'h1C0 : 9'h0),
     (isNaNOut | io_in_isZero | common_totalUnderflow
        ? {isNaNOut, 22'h0}
        : roundedSig[22:0]) | {23{pegMaxFiniteMagOut}}};
  assign io_exceptionFlags =
    {io_invalidExc,
     1'h0,
     overflow,
     commonCase
       & (common_totalUnderflow | anyRound & $signed(sAdjustedExp[13:8]) < 6'sh1
          & _GEN_1[0]
          & ~(~(_GEN_1[1]) & roundedSig[24] & (|_GEN_4)
              & (_GEN_6 & io_in_sig[28] | roundMagUp
                 & (|{io_in_sig[28], |(io_in_sig[27:0])})))),
     overflow | commonCase & (common_totalUnderflow | anyRound)};
endmodule

module RecFNToRecFN(
  input  [64:0] io_in,
  input  [2:0]  io_roundingMode,
  output [32:0] io_out,
  output [4:0]  io_exceptionFlags
);

  wire rawIn_isNaN = (&(io_in[63:62])) & io_in[61];
  RoundAnyRawFNToRecFN_3 roundAnyRawFNToRecFN (
    .io_invalidExc     (rawIn_isNaN & ~(io_in[51])),
    .io_in_isNaN       (rawIn_isNaN),
    .io_in_isInf       ((&(io_in[63:62])) & ~(io_in[61])),
    .io_in_isZero      (~(|(io_in[63:61]))),
    .io_in_sign        (io_in[64]),
    .io_in_sExp        ({1'h0, io_in[63:52]}),
    .io_in_sig         ({1'h0, |(io_in[63:61]), io_in[51:0]}),
    .io_roundingMode   (io_roundingMode),
    .io_out            (io_out),
    .io_exceptionFlags (io_exceptionFlags)
  );
endmodule

module FPToFP(
  input         clock,
                reset,
                io_in_valid,
                io_in_bits_ren2,
  input  [1:0]  io_in_bits_typeTagOut,
  input         io_in_bits_wflags,
  input  [2:0]  io_in_bits_rm,
  input  [64:0] io_in_bits_in1,
                io_in_bits_in2,
  input         io_lt,
  output [64:0] io_out_bits_data,
  output [4:0]  io_out_bits_exc
);

  wire [32:0] _narrower_io_out;
  wire [4:0]  _narrower_io_exceptionFlags;
  reg         in_pipe_v;
  reg         in_pipe_b_ren2;
  reg  [1:0]  in_pipe_b_typeTagOut;
  reg         in_pipe_b_wflags;
  reg  [2:0]  in_pipe_b_rm;
  reg  [64:0] in_pipe_b_in1;
  reg  [64:0] in_pipe_b_in2;
  wire        _GEN =
    in_pipe_b_rm[1]
      ? in_pipe_b_in1[64] ^ in_pipe_b_in2[64]
      : in_pipe_b_rm[0] ^ in_pipe_b_in2[64];
  wire        isNaNOut = (&(in_pipe_b_in1[63:61])) & (&(in_pipe_b_in2[63:61]));
  wire        isLHS =
    (&(in_pipe_b_in2[63:61])) | in_pipe_b_rm[0] != io_lt & ~(&(in_pipe_b_in1[63:61]));
  wire        _GEN_0 = in_pipe_b_wflags & ~in_pipe_b_ren2;
  wire [35:0] _GEN_1 =
    _GEN_0
      ? ((&(in_pipe_b_in1[63:61])) ? 36'h700400000 : in_pipe_b_in1[64:29])
      : in_pipe_b_wflags
          ? (isNaNOut
               ? 36'h700400000
               : isLHS ? in_pipe_b_in1[64:29] : in_pipe_b_in2[64:29])
          : {_GEN, in_pipe_b_in1[63:29]};
  reg  [64:0] io_out_pipe_b_data;
  reg  [4:0]  io_out_pipe_b_exc;
  always @(posedge clock) begin
    if (reset)
      in_pipe_v <= 1'h0;
    else
      in_pipe_v <= io_in_valid;
    if (io_in_valid) begin
      in_pipe_b_ren2 <= io_in_bits_ren2;
      in_pipe_b_typeTagOut <= io_in_bits_typeTagOut;
      in_pipe_b_wflags <= io_in_bits_wflags;
      in_pipe_b_rm <= io_in_bits_rm;
      in_pipe_b_in1 <= io_in_bits_in1;
      in_pipe_b_in2 <= io_in_bits_in2;
    end
    if (in_pipe_v) begin
      automatic logic _GEN_2 = in_pipe_b_typeTagOut == 2'h0;
      if (_GEN_2) begin
        automatic logic [8:0] _GEN_3 = _GEN_1[31:23] - 9'h100;
        io_out_pipe_b_data <=
          {_GEN_1[35:4],
           _GEN_0
             ? _narrower_io_out
             : {_GEN_1[35],
                _GEN_1[34:32] == 3'h0 | _GEN_1[34:32] > 3'h5
                  ? {_GEN_1[34:32], _GEN_3[5:0]}
                  : _GEN_3,
                _GEN_1[22:0]}};
      end
      else if (_GEN_0) begin
        if (&(in_pipe_b_in1[63:61]))
          io_out_pipe_b_data <= 65'hE008000000000000;
        else
          io_out_pipe_b_data <= in_pipe_b_in1;
      end
      else if (in_pipe_b_wflags) begin
        if (isNaNOut)
          io_out_pipe_b_data <= 65'hE008000000000000;
        else if (isLHS)
          io_out_pipe_b_data <= in_pipe_b_in1;
        else
          io_out_pipe_b_data <= in_pipe_b_in2;
      end
      else
        io_out_pipe_b_data <= {_GEN, in_pipe_b_in1[63:0]};
      if (_GEN_0 & _GEN_2)
        io_out_pipe_b_exc <= _narrower_io_exceptionFlags;
      else begin
        automatic logic _GEN_4;
        _GEN_4 = (&(in_pipe_b_in1[63:61])) & ~(in_pipe_b_in1[51]);
        if (_GEN_0)
          io_out_pipe_b_exc <= {_GEN_4, 4'h0};
        else if (in_pipe_b_wflags)
          io_out_pipe_b_exc <=
            {_GEN_4 | (&(in_pipe_b_in2[63:61])) & ~(in_pipe_b_in2[51]), 4'h0};
        else
          io_out_pipe_b_exc <= 5'h0;
      end
    end
  end // always @(posedge)
  RecFNToRecFN narrower (
    .io_in             (in_pipe_b_in1),
    .io_roundingMode   (in_pipe_b_rm),
    .io_out            (_narrower_io_out),
    .io_exceptionFlags (_narrower_io_exceptionFlags)
  );
  assign io_out_bits_data = io_out_pipe_b_data;
  assign io_out_bits_exc = io_out_pipe_b_exc;
endmodule

module MulAddRecFNToRaw_preMul_1(
  input  [1:0]   io_op,
  input  [64:0]  io_a,
                 io_b,
                 io_c,
  output [52:0]  io_mulAddA,
                 io_mulAddB,
  output [105:0] io_mulAddC,
  output         io_toPostMul_isSigNaNAny,
                 io_toPostMul_isNaNAOrB,
                 io_toPostMul_isInfA,
                 io_toPostMul_isZeroA,
                 io_toPostMul_isInfB,
                 io_toPostMul_isZeroB,
                 io_toPostMul_signProd,
                 io_toPostMul_isNaNC,
                 io_toPostMul_isInfC,
                 io_toPostMul_isZeroC,
  output [12:0]  io_toPostMul_sExpSum,
  output         io_toPostMul_doSubMags,
                 io_toPostMul_CIsDominant,
  output [5:0]   io_toPostMul_CDom_CAlignDist,
  output [54:0]  io_toPostMul_highAlignedSigC,
  output         io_toPostMul_bit0AlignedSigC
);

  wire         rawA_isNaN = (&(io_a[63:62])) & io_a[61];
  wire         rawB_isNaN = (&(io_b[63:62])) & io_b[61];
  wire         rawC_isNaN = (&(io_c[63:62])) & io_c[61];
  wire         signProd = io_a[64] ^ io_b[64] ^ io_op[1];
  wire [13:0]  _GEN = {2'h0, io_a[63:52]} + {2'h0, io_b[63:52]} - 14'h7C8;
  wire         doSubMags = signProd ^ io_c[64] ^ io_op[0];
  wire [13:0]  _GEN_0 = _GEN - {2'h0, io_c[63:52]};
  wire         isMinCAlign =
    ~(|(io_a[63:61])) | ~(|(io_b[63:61])) | $signed(_GEN_0) < 14'sh0;
  wire         CIsDominant = (|(io_c[63:61])) & (isMinCAlign | _GEN_0[12:0] < 13'h36);
  wire [7:0]   CAlignDist =
    isMinCAlign ? 8'h0 : _GEN_0[12:0] < 13'hA1 ? _GEN_0[7:0] : 8'hA1;
  wire [164:0] mainAlignedSigC =
    $signed($signed({doSubMags
                       ? {1'h1, ~(|(io_c[63:61])), ~(io_c[51:0])}
                       : {1'h0, |(io_c[63:61]), io_c[51:0]},
                     {111{doSubMags}}}) >>> CAlignDist);
  wire [64:0]  reduced4CExtra_shift = $signed(65'sh10000000000000000 >>> CAlignDist[7:2]);
  wire [12:0]  _GEN_1 =
    {|(io_c[51:48]),
     |(io_c[47:44]),
     |(io_c[43:40]),
     |(io_c[39:36]),
     |(io_c[35:32]),
     |(io_c[31:28]),
     |(io_c[27:24]),
     |(io_c[23:20]),
     |(io_c[19:16]),
     |(io_c[15:12]),
     |(io_c[11:8]),
     |(io_c[7:4]),
     |(io_c[3:0])}
    & {reduced4CExtra_shift[24],
       reduced4CExtra_shift[25],
       reduced4CExtra_shift[26],
       reduced4CExtra_shift[27],
       reduced4CExtra_shift[28],
       reduced4CExtra_shift[29],
       reduced4CExtra_shift[30],
       reduced4CExtra_shift[31],
       reduced4CExtra_shift[32],
       reduced4CExtra_shift[33],
       reduced4CExtra_shift[34],
       reduced4CExtra_shift[35],
       reduced4CExtra_shift[36]};
  assign io_mulAddA = {|(io_a[63:61]), io_a[51:0]};
  assign io_mulAddB = {|(io_b[63:61]), io_b[51:0]};
  assign io_mulAddC = mainAlignedSigC[108:3];
  assign io_toPostMul_isSigNaNAny =
    rawA_isNaN & ~(io_a[51]) | rawB_isNaN & ~(io_b[51]) | rawC_isNaN & ~(io_c[51]);
  assign io_toPostMul_isNaNAOrB = rawA_isNaN | rawB_isNaN;
  assign io_toPostMul_isInfA = (&(io_a[63:62])) & ~(io_a[61]);
  assign io_toPostMul_isZeroA = ~(|(io_a[63:61]));
  assign io_toPostMul_isInfB = (&(io_b[63:62])) & ~(io_b[61]);
  assign io_toPostMul_isZeroB = ~(|(io_b[63:61]));
  assign io_toPostMul_signProd = signProd;
  assign io_toPostMul_isNaNC = rawC_isNaN;
  assign io_toPostMul_isInfC = (&(io_c[63:62])) & ~(io_c[61]);
  assign io_toPostMul_isZeroC = ~(|(io_c[63:61]));
  assign io_toPostMul_sExpSum = CIsDominant ? {1'h0, io_c[63:52]} : _GEN[12:0] - 13'h35;
  assign io_toPostMul_doSubMags = doSubMags;
  assign io_toPostMul_CIsDominant = CIsDominant;
  assign io_toPostMul_CDom_CAlignDist = CAlignDist[5:0];
  assign io_toPostMul_highAlignedSigC = mainAlignedSigC[163:109];
  assign io_toPostMul_bit0AlignedSigC =
    doSubMags
      ? (&(mainAlignedSigC[2:0])) & ~(|_GEN_1)
      : (|(mainAlignedSigC[2:0])) | (|_GEN_1);
endmodule

module MulAddRecFNToRaw_postMul_1(
  input          io_fromPreMul_isSigNaNAny,
                 io_fromPreMul_isNaNAOrB,
                 io_fromPreMul_isInfA,
                 io_fromPreMul_isZeroA,
                 io_fromPreMul_isInfB,
                 io_fromPreMul_isZeroB,
                 io_fromPreMul_signProd,
                 io_fromPreMul_isNaNC,
                 io_fromPreMul_isInfC,
                 io_fromPreMul_isZeroC,
  input  [12:0]  io_fromPreMul_sExpSum,
  input          io_fromPreMul_doSubMags,
                 io_fromPreMul_CIsDominant,
  input  [5:0]   io_fromPreMul_CDom_CAlignDist,
  input  [54:0]  io_fromPreMul_highAlignedSigC,
  input          io_fromPreMul_bit0AlignedSigC,
  input  [106:0] io_mulAddResult,
  input  [2:0]   io_roundingMode,
  output         io_invalidExc,
                 io_rawOut_isNaN,
                 io_rawOut_isInf,
                 io_rawOut_isZero,
                 io_rawOut_sign,
  output [12:0]  io_rawOut_sExp,
  output [55:0]  io_rawOut_sig
);

  wire         roundingMode_min = io_roundingMode == 3'h2;
  wire         opSignC = io_fromPreMul_signProd ^ io_fromPreMul_doSubMags;
  wire [54:0]  _GEN =
    io_mulAddResult[106]
      ? io_fromPreMul_highAlignedSigC + 55'h1
      : io_fromPreMul_highAlignedSigC;
  wire [107:0] CDom_absSigSum =
    io_fromPreMul_doSubMags
      ? ~{_GEN, io_mulAddResult[105:53]}
      : {1'h0, io_fromPreMul_highAlignedSigC[54:53], _GEN[52:0], io_mulAddResult[105:54]};
  wire [170:0] _GEN_0 = {63'h0, CDom_absSigSum} << io_fromPreMul_CDom_CAlignDist;
  wire [16:0]  CDom_reduced4SigExtra_shift =
    $signed(17'sh10000 >>> ~(io_fromPreMul_CDom_CAlignDist[5:2]));
  wire [108:0] _GEN_1 =
    {_GEN[1:0], io_mulAddResult[105:0], io_fromPreMul_bit0AlignedSigC};
  wire [108:0] notCDom_absSigSum =
    _GEN[2] ? ~_GEN_1 : _GEN_1 + {108'h0, io_fromPreMul_doSubMags};
  wire [5:0]   notCDom_normDistReduced2 =
    notCDom_absSigSum[108]
      ? 6'h0
      : (|(notCDom_absSigSum[107:106]))
          ? 6'h1
          : (|(notCDom_absSigSum[105:104]))
              ? 6'h2
              : (|(notCDom_absSigSum[103:102]))
                  ? 6'h3
                  : (|(notCDom_absSigSum[101:100]))
                      ? 6'h4
                      : (|(notCDom_absSigSum[99:98]))
                          ? 6'h5
                          : (|(notCDom_absSigSum[97:96]))
                              ? 6'h6
                              : (|(notCDom_absSigSum[95:94]))
                                  ? 6'h7
                                  : (|(notCDom_absSigSum[93:92]))
                                      ? 6'h8
                                      : (|(notCDom_absSigSum[91:90]))
                                          ? 6'h9
                                          : (|(notCDom_absSigSum[89:88]))
                                              ? 6'hA
                                              : (|(notCDom_absSigSum[87:86]))
                                                  ? 6'hB
                                                  : (|(notCDom_absSigSum[85:84]))
                                                      ? 6'hC
                                                      : (|(notCDom_absSigSum[83:82]))
                                                          ? 6'hD
                                                          : (|(notCDom_absSigSum[81:80]))
                                                              ? 6'hE
                                                              : (|(notCDom_absSigSum[79:78]))
                                                                  ? 6'hF
                                                                  : (|(notCDom_absSigSum[77:76]))
                                                                      ? 6'h10
                                                                      : (|(notCDom_absSigSum[75:74]))
                                                                          ? 6'h11
                                                                          : (|(notCDom_absSigSum[73:72]))
                                                                              ? 6'h12
                                                                              : (|(notCDom_absSigSum[71:70]))
                                                                                  ? 6'h13
                                                                                  : (|(notCDom_absSigSum[69:68]))
                                                                                      ? 6'h14
                                                                                      : (|(notCDom_absSigSum[67:66]))
                                                                                          ? 6'h15
                                                                                          : (|(notCDom_absSigSum[65:64]))
                                                                                              ? 6'h16
                                                                                              : (|(notCDom_absSigSum[63:62]))
                                                                                                  ? 6'h17
                                                                                                  : (|(notCDom_absSigSum[61:60]))
                                                                                                      ? 6'h18
                                                                                                      : (|(notCDom_absSigSum[59:58]))
                                                                                                          ? 6'h19
                                                                                                          : (|(notCDom_absSigSum[57:56]))
                                                                                                              ? 6'h1A
                                                                                                              : (|(notCDom_absSigSum[55:54]))
                                                                                                                  ? 6'h1B
                                                                                                                  : (|(notCDom_absSigSum[53:52]))
                                                                                                                      ? 6'h1C
                                                                                                                      : (|(notCDom_absSigSum[51:50]))
                                                                                                                          ? 6'h1D
                                                                                                                          : (|(notCDom_absSigSum[49:48]))
                                                                                                                              ? 6'h1E
                                                                                                                              : (|(notCDom_absSigSum[47:46]))
                                                                                                                                  ? 6'h1F
                                                                                                                                  : (|(notCDom_absSigSum[45:44]))
                                                                                                                                      ? 6'h20
                                                                                                                                      : (|(notCDom_absSigSum[43:42]))
                                                                                                                                          ? 6'h21
                                                                                                                                          : (|(notCDom_absSigSum[41:40]))
                                                                                                                                              ? 6'h22
                                                                                                                                              : (|(notCDom_absSigSum[39:38]))
                                                                                                                                                  ? 6'h23
                                                                                                                                                  : (|(notCDom_absSigSum[37:36]))
                                                                                                                                                      ? 6'h24
                                                                                                                                                      : (|(notCDom_absSigSum[35:34]))
                                                                                                                                                          ? 6'h25
                                                                                                                                                          : (|(notCDom_absSigSum[33:32]))
                                                                                                                                                              ? 6'h26
                                                                                                                                                              : (|(notCDom_absSigSum[31:30]))
                                                                                                                                                                  ? 6'h27
                                                                                                                                                                  : (|(notCDom_absSigSum[29:28]))
                                                                                                                                                                      ? 6'h28
                                                                                                                                                                      : (|(notCDom_absSigSum[27:26]))
                                                                                                                                                                          ? 6'h29
                                                                                                                                                                          : (|(notCDom_absSigSum[25:24]))
                                                                                                                                                                              ? 6'h2A
                                                                                                                                                                              : (|(notCDom_absSigSum[23:22]))
                                                                                                                                                                                  ? 6'h2B
                                                                                                                                                                                  : (|(notCDom_absSigSum[21:20]))
                                                                                                                                                                                      ? 6'h2C
                                                                                                                                                                                      : (|(notCDom_absSigSum[19:18]))
                                                                                                                                                                                          ? 6'h2D
                                                                                                                                                                                          : (|(notCDom_absSigSum[17:16]))
                                                                                                                                                                                              ? 6'h2E
                                                                                                                                                                                              : (|(notCDom_absSigSum[15:14]))
                                                                                                                                                                                                  ? 6'h2F
                                                                                                                                                                                                  : (|(notCDom_absSigSum[13:12]))
                                                                                                                                                                                                      ? 6'h30
                                                                                                                                                                                                      : (|(notCDom_absSigSum[11:10]))
                                                                                                                                                                                                          ? 6'h31
                                                                                                                                                                                                          : (|(notCDom_absSigSum[9:8]))
                                                                                                                                                                                                              ? 6'h32
                                                                                                                                                                                                              : (|(notCDom_absSigSum[7:6]))
                                                                                                                                                                                                                  ? 6'h33
                                                                                                                                                                                                                  : (|(notCDom_absSigSum[5:4]))
                                                                                                                                                                                                                      ? 6'h34
                                                                                                                                                                                                                      : (|(notCDom_absSigSum[3:2]))
                                                                                                                                                                                                                          ? 6'h35
                                                                                                                                                                                                                          : 6'h36;
  wire [235:0] _GEN_2 =
    {127'h0, notCDom_absSigSum} << {229'h0, notCDom_normDistReduced2, 1'h0};
  wire [32:0]  notCDom_reduced4SigExtra_shift =
    $signed(33'sh100000000 >>> ~(notCDom_normDistReduced2[5:1]));
  wire         notCDom_completeCancellation = _GEN_2[109:108] == 2'h0;
  wire         notNaN_isInfProd = io_fromPreMul_isInfA | io_fromPreMul_isInfB;
  wire         notNaN_isInfOut = notNaN_isInfProd | io_fromPreMul_isInfC;
  wire         notNaN_addZeros =
    (io_fromPreMul_isZeroA | io_fromPreMul_isZeroB) & io_fromPreMul_isZeroC;
  assign io_invalidExc =
    io_fromPreMul_isSigNaNAny | io_fromPreMul_isInfA & io_fromPreMul_isZeroB
    | io_fromPreMul_isZeroA & io_fromPreMul_isInfB | ~io_fromPreMul_isNaNAOrB
    & notNaN_isInfProd & io_fromPreMul_isInfC & io_fromPreMul_doSubMags;
  assign io_rawOut_isNaN = io_fromPreMul_isNaNAOrB | io_fromPreMul_isNaNC;
  assign io_rawOut_isInf = notNaN_isInfOut;
  assign io_rawOut_isZero =
    notNaN_addZeros | ~io_fromPreMul_CIsDominant & notCDom_completeCancellation;
  assign io_rawOut_sign =
    notNaN_isInfProd & io_fromPreMul_signProd | io_fromPreMul_isInfC & opSignC
    | notNaN_addZeros & ~roundingMode_min & io_fromPreMul_signProd & opSignC
    | notNaN_addZeros & roundingMode_min & (io_fromPreMul_signProd | opSignC)
    | ~notNaN_isInfOut & ~notNaN_addZeros
    & (io_fromPreMul_CIsDominant
         ? opSignC
         : notCDom_completeCancellation
             ? roundingMode_min
             : io_fromPreMul_signProd ^ _GEN[2]);
  assign io_rawOut_sExp =
    io_fromPreMul_CIsDominant
      ? io_fromPreMul_sExpSum - {12'h0, io_fromPreMul_doSubMags}
      : io_fromPreMul_sExpSum - {6'h0, notCDom_normDistReduced2, 1'h0};
  assign io_rawOut_sig =
    io_fromPreMul_CIsDominant
      ? {_GEN_0[107:53],
         (|(_GEN_0[52:50]))
           | (|({|(CDom_absSigSum[49:46]),
                 |(CDom_absSigSum[45:42]),
                 |(CDom_absSigSum[41:38]),
                 |(CDom_absSigSum[37:34]),
                 |(CDom_absSigSum[33:30]),
                 |(CDom_absSigSum[29:26]),
                 |(CDom_absSigSum[25:22]),
                 |(CDom_absSigSum[21:18]),
                 |(CDom_absSigSum[17:14]),
                 |(CDom_absSigSum[13:10]),
                 |(CDom_absSigSum[9:6]),
                 |(CDom_absSigSum[5:2]),
                 |(CDom_absSigSum[1:0])}
                & {CDom_reduced4SigExtra_shift[1],
                   CDom_reduced4SigExtra_shift[2],
                   CDom_reduced4SigExtra_shift[3],
                   CDom_reduced4SigExtra_shift[4],
                   CDom_reduced4SigExtra_shift[5],
                   CDom_reduced4SigExtra_shift[6],
                   CDom_reduced4SigExtra_shift[7],
                   CDom_reduced4SigExtra_shift[8],
                   CDom_reduced4SigExtra_shift[9],
                   CDom_reduced4SigExtra_shift[10],
                   CDom_reduced4SigExtra_shift[11],
                   CDom_reduced4SigExtra_shift[12],
                   CDom_reduced4SigExtra_shift[13]}))
           | (io_fromPreMul_doSubMags
                ? io_mulAddResult[52:0] != 53'h1FFFFFFFFFFFFF
                : (|(io_mulAddResult[53:0])))}
      : {_GEN_2[109:55],
         (|(_GEN_2[54:52]))
           | (|({|{|(notCDom_absSigSum[51:50]), |(notCDom_absSigSum[49:48])},
                 |{|(notCDom_absSigSum[47:46]), |(notCDom_absSigSum[45:44])},
                 |{|(notCDom_absSigSum[43:42]), |(notCDom_absSigSum[41:40])},
                 |{|(notCDom_absSigSum[39:38]), |(notCDom_absSigSum[37:36])},
                 |{|(notCDom_absSigSum[35:34]), |(notCDom_absSigSum[33:32])},
                 |{|(notCDom_absSigSum[31:30]), |(notCDom_absSigSum[29:28])},
                 |{|(notCDom_absSigSum[27:26]), |(notCDom_absSigSum[25:24])},
                 |{|(notCDom_absSigSum[23:22]), |(notCDom_absSigSum[21:20])},
                 |{|(notCDom_absSigSum[19:18]), |(notCDom_absSigSum[17:16])},
                 |{|(notCDom_absSigSum[15:14]), |(notCDom_absSigSum[13:12])},
                 |{|(notCDom_absSigSum[11:10]), |(notCDom_absSigSum[9:8])},
                 |{|(notCDom_absSigSum[7:6]), |(notCDom_absSigSum[5:4])},
                 |{|(notCDom_absSigSum[3:2]), |(notCDom_absSigSum[1:0])}}
                & {notCDom_reduced4SigExtra_shift[1],
                   notCDom_reduced4SigExtra_shift[2],
                   notCDom_reduced4SigExtra_shift[3],
                   notCDom_reduced4SigExtra_shift[4],
                   notCDom_reduced4SigExtra_shift[5],
                   notCDom_reduced4SigExtra_shift[6],
                   notCDom_reduced4SigExtra_shift[7],
                   notCDom_reduced4SigExtra_shift[8],
                   notCDom_reduced4SigExtra_shift[9],
                   notCDom_reduced4SigExtra_shift[10],
                   notCDom_reduced4SigExtra_shift[11],
                   notCDom_reduced4SigExtra_shift[12],
                   notCDom_reduced4SigExtra_shift[13]}))};
endmodule

module RoundAnyRawFNToRecFN_4(
  input         io_invalidExc,
                io_infiniteExc,
                io_in_isNaN,
                io_in_isInf,
                io_in_isZero,
                io_in_sign,
  input  [12:0] io_in_sExp,
  input  [55:0] io_in_sig,
  input  [2:0]  io_roundingMode,
  input         io_detectTininess,
  output [64:0] io_out,
  output [4:0]  io_exceptionFlags
);

  wire        roundingMode_near_even = io_roundingMode == 3'h0;
  wire        roundingMode_odd = io_roundingMode == 3'h6;
  wire        roundMagUp =
    io_roundingMode == 3'h2 & io_in_sign | io_roundingMode == 3'h3 & ~io_in_sign;
  wire [11:0] _GEN = ~(io_in_sExp[11:0]);
  wire [64:0] roundMask_shift = $signed(65'sh10000000000000000 >>> _GEN[5:0]);
  wire [7:0]  _GEN_0 =
    {{roundMask_shift[24:21], roundMask_shift[28:27]} & 6'h33, 2'h0}
    | {roundMask_shift[28:25], roundMask_shift[32:29]} & 8'h33;
  wire [18:0] _GEN_1 =
    {roundMask_shift[18:17],
     roundMask_shift[20:19],
     roundMask_shift[22:21],
     _GEN_0,
     roundMask_shift[32:31],
     roundMask_shift[34:33],
     roundMask_shift[36]} & 19'h55555;
  wire [64:0] roundMask_shift_1 = $signed(65'sh10000000000000000 >>> _GEN[5:0]);
  wire [53:0] _GEN_2 =
    _GEN[11]
      ? (_GEN[10]
           ? {~(_GEN[9] | _GEN[8] | _GEN[7] | _GEN[6]
                  ? 51'h0
                  : ~{roundMask_shift[13],
                      roundMask_shift[14],
                      roundMask_shift[15],
                      roundMask_shift[16],
                      roundMask_shift[17],
                      _GEN_1[18:15] | {roundMask_shift[20:19], roundMask_shift[22:21]}
                        & 4'h5,
                      _GEN_1[14:7] | _GEN_0 & 8'h55,
                      _GEN_0[1],
                      _GEN_1[5] | roundMask_shift[31],
                      roundMask_shift[32],
                      roundMask_shift[33],
                      {_GEN_1[2:0], 1'h0}
                        | {roundMask_shift[36:35], roundMask_shift[38:37]} & 4'h5,
                      roundMask_shift[38],
                      roundMask_shift[39],
                      roundMask_shift[40],
                      roundMask_shift[41],
                      roundMask_shift[42],
                      roundMask_shift[43],
                      roundMask_shift[44],
                      roundMask_shift[45],
                      roundMask_shift[46],
                      roundMask_shift[47],
                      roundMask_shift[48],
                      roundMask_shift[49],
                      {{roundMask_shift[50:49], roundMask_shift[52]} & 3'h5, 1'h0}
                        | {roundMask_shift[52:51], roundMask_shift[54:53]} & 4'h5,
                      roundMask_shift[54],
                      roundMask_shift[55],
                      roundMask_shift[56],
                      roundMask_shift[57],
                      roundMask_shift[58],
                      roundMask_shift[59],
                      roundMask_shift[60],
                      roundMask_shift[61],
                      roundMask_shift[62],
                      roundMask_shift[63]}),
              3'h7}
           : {51'h0,
              _GEN[9] & _GEN[8] & _GEN[7] & _GEN[6]
                ? {roundMask_shift_1[0], roundMask_shift_1[1], roundMask_shift_1[2]}
                : 3'h0})
      : 54'h0;
  wire        _GEN_3 = _GEN_2[0] | io_in_sig[55];
  wire [54:0] _GEN_4 = {_GEN_2[53:1], _GEN_3, 1'h1};
  wire [54:0] _GEN_5 = {1'h1, ~(_GEN_2[53:1]), ~_GEN_3} & _GEN_4;
  wire [54:0] _GEN_6 = io_in_sig[55:1] & _GEN_5;
  wire [54:0] _GEN_7 = io_in_sig[54:0] & _GEN_4;
  wire        anyRound = (|_GEN_6) | (|_GEN_7);
  wire        _GEN_8 = roundingMode_near_even | io_roundingMode == 3'h4;
  wire [54:0] roundedSig =
    _GEN_8 & (|_GEN_6) | roundMagUp & anyRound
      ? {1'h0, io_in_sig[55:2] | {_GEN_2[53:1], _GEN_3}} + 55'h1
        & ~(roundingMode_near_even & (|_GEN_6) & ~(|_GEN_7) ? _GEN_4 : 55'h0)
      : {1'h0, io_in_sig[55:2] & {~(_GEN_2[53:1]), ~_GEN_3}}
        | (roundingMode_odd & anyRound ? _GEN_5 : 55'h0);
  wire [13:0] sRoundedExp = {io_in_sExp[12], io_in_sExp} + {12'h0, roundedSig[54:53]};
  wire        common_totalUnderflow = $signed(sRoundedExp) < 14'sh3CE;
  wire        isNaNOut = io_invalidExc | io_in_isNaN;
  wire        notNaN_isSpecialInfOut = io_infiniteExc | io_in_isInf;
  wire        commonCase = ~isNaNOut & ~notNaN_isSpecialInfOut & ~io_in_isZero;
  wire        overflow = commonCase & $signed(sRoundedExp[13:10]) > 4'sh2;
  wire        overflow_roundMagUp = _GEN_8 | roundMagUp;
  wire        pegMinNonzeroMagOut =
    commonCase & common_totalUnderflow & (roundMagUp | roundingMode_odd);
  wire        pegMaxFiniteMagOut = overflow & ~overflow_roundMagUp;
  wire        notNaN_isInfOut = notNaN_isSpecialInfOut | overflow & overflow_roundMagUp;
  assign io_out =
    {~isNaNOut & io_in_sign,
     sRoundedExp[11:0] & ~(io_in_isZero | common_totalUnderflow ? 12'hE00 : 12'h0)
       & ~(pegMinNonzeroMagOut ? 12'hC31 : 12'h0) & {1'h1, ~pegMaxFiniteMagOut, 10'h3FF}
       & {2'h3, ~notNaN_isInfOut, 9'h1FF} | (pegMinNonzeroMagOut ? 12'h3CE : 12'h0)
       | (pegMaxFiniteMagOut ? 12'hBFF : 12'h0) | (notNaN_isInfOut ? 12'hC00 : 12'h0)
       | (isNaNOut ? 12'hE00 : 12'h0),
     (isNaNOut | io_in_isZero | common_totalUnderflow
        ? {isNaNOut, 51'h0}
        : io_in_sig[55] ? roundedSig[52:1] : roundedSig[51:0])
       | {52{pegMaxFiniteMagOut}}};
  assign io_exceptionFlags =
    {io_invalidExc,
     io_infiniteExc,
     overflow,
     commonCase
       & (common_totalUnderflow | anyRound & io_in_sExp[12:11] != 2'h1
          & (io_in_sig[55] ? _GEN_2[1] : _GEN_3)
          & ~(io_detectTininess & ~(io_in_sig[55] ? _GEN_2[2] : _GEN_2[1])
              & (io_in_sig[55] ? roundedSig[54] : roundedSig[53]) & (|_GEN_6)
              & (_GEN_8 & (io_in_sig[55] ? io_in_sig[2] : io_in_sig[1]) | roundMagUp
                 & (io_in_sig[55] & io_in_sig[2] | (|(io_in_sig[1:0])))))),
     overflow | commonCase & (common_totalUnderflow | anyRound)};
endmodule

module RoundRawFNToRecFN_1(
  input         io_invalidExc,
                io_infiniteExc,
                io_in_isNaN,
                io_in_isInf,
                io_in_isZero,
                io_in_sign,
  input  [12:0] io_in_sExp,
  input  [55:0] io_in_sig,
  input  [2:0]  io_roundingMode,
  input         io_detectTininess,
  output [64:0] io_out,
  output [4:0]  io_exceptionFlags
);

  RoundAnyRawFNToRecFN_4 roundAnyRawFNToRecFN (
    .io_invalidExc     (io_invalidExc),
    .io_infiniteExc    (io_infiniteExc),
    .io_in_isNaN       (io_in_isNaN),
    .io_in_isInf       (io_in_isInf),
    .io_in_isZero      (io_in_isZero),
    .io_in_sign        (io_in_sign),
    .io_in_sExp        (io_in_sExp),
    .io_in_sig         (io_in_sig),
    .io_roundingMode   (io_roundingMode),
    .io_detectTininess (io_detectTininess),
    .io_out            (io_out),
    .io_exceptionFlags (io_exceptionFlags)
  );
endmodule

module MulAddRecFNPipe_l2_e11_s53(
  input         clock,
                reset,
                io_validin,
  input  [1:0]  io_op,
  input  [64:0] io_a,
                io_b,
                io_c,
  input  [2:0]  io_roundingMode,
  output [64:0] io_out,
  output [4:0]  io_exceptionFlags,
  output        io_validout
);

  wire         _mulAddRecFNToRaw_postMul_io_invalidExc;
  wire         _mulAddRecFNToRaw_postMul_io_rawOut_isNaN;
  wire         _mulAddRecFNToRaw_postMul_io_rawOut_isInf;
  wire         _mulAddRecFNToRaw_postMul_io_rawOut_isZero;
  wire         _mulAddRecFNToRaw_postMul_io_rawOut_sign;
  wire [12:0]  _mulAddRecFNToRaw_postMul_io_rawOut_sExp;
  wire [55:0]  _mulAddRecFNToRaw_postMul_io_rawOut_sig;
  wire [52:0]  _mulAddRecFNToRaw_preMul_io_mulAddA;
  wire [52:0]  _mulAddRecFNToRaw_preMul_io_mulAddB;
  wire [105:0] _mulAddRecFNToRaw_preMul_io_mulAddC;
  wire         _mulAddRecFNToRaw_preMul_io_toPostMul_isSigNaNAny;
  wire         _mulAddRecFNToRaw_preMul_io_toPostMul_isNaNAOrB;
  wire         _mulAddRecFNToRaw_preMul_io_toPostMul_isInfA;
  wire         _mulAddRecFNToRaw_preMul_io_toPostMul_isZeroA;
  wire         _mulAddRecFNToRaw_preMul_io_toPostMul_isInfB;
  wire         _mulAddRecFNToRaw_preMul_io_toPostMul_isZeroB;
  wire         _mulAddRecFNToRaw_preMul_io_toPostMul_signProd;
  wire         _mulAddRecFNToRaw_preMul_io_toPostMul_isNaNC;
  wire         _mulAddRecFNToRaw_preMul_io_toPostMul_isInfC;
  wire         _mulAddRecFNToRaw_preMul_io_toPostMul_isZeroC;
  wire [12:0]  _mulAddRecFNToRaw_preMul_io_toPostMul_sExpSum;
  wire         _mulAddRecFNToRaw_preMul_io_toPostMul_doSubMags;
  wire         _mulAddRecFNToRaw_preMul_io_toPostMul_CIsDominant;
  wire [5:0]   _mulAddRecFNToRaw_preMul_io_toPostMul_CDom_CAlignDist;
  wire [54:0]  _mulAddRecFNToRaw_preMul_io_toPostMul_highAlignedSigC;
  wire         _mulAddRecFNToRaw_preMul_io_toPostMul_bit0AlignedSigC;
  reg          mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_isSigNaNAny;
  reg          mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_isNaNAOrB;
  reg          mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_isInfA;
  reg          mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_isZeroA;
  reg          mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_isInfB;
  reg          mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_isZeroB;
  reg          mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_signProd;
  reg          mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_isNaNC;
  reg          mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_isInfC;
  reg          mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_isZeroC;
  reg  [12:0]  mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_sExpSum;
  reg          mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_doSubMags;
  reg          mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_CIsDominant;
  reg  [5:0]   mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_CDom_CAlignDist;
  reg  [54:0]  mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_highAlignedSigC;
  reg          mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_bit0AlignedSigC;
  reg  [106:0] mulAddRecFNToRaw_postMul_io_mulAddResult_pipe_b;
  reg  [2:0]   mulAddRecFNToRaw_postMul_io_roundingMode_pipe_b;
  reg  [2:0]   roundingMode_stage0_pipe_b;
  reg          valid_stage0_pipe_v;
  reg          roundRawFNToRecFN_io_invalidExc_pipe_b;
  reg          roundRawFNToRecFN_io_in_pipe_b_isNaN;
  reg          roundRawFNToRecFN_io_in_pipe_b_isInf;
  reg          roundRawFNToRecFN_io_in_pipe_b_isZero;
  reg          roundRawFNToRecFN_io_in_pipe_b_sign;
  reg  [12:0]  roundRawFNToRecFN_io_in_pipe_b_sExp;
  reg  [55:0]  roundRawFNToRecFN_io_in_pipe_b_sig;
  reg  [2:0]   roundRawFNToRecFN_io_roundingMode_pipe_b;
  reg          roundRawFNToRecFN_io_detectTininess_pipe_b;
  reg          io_validout_pipe_v;
  always @(posedge clock) begin
    if (io_validin) begin
      mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_isSigNaNAny <=
        _mulAddRecFNToRaw_preMul_io_toPostMul_isSigNaNAny;
      mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_isNaNAOrB <=
        _mulAddRecFNToRaw_preMul_io_toPostMul_isNaNAOrB;
      mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_isInfA <=
        _mulAddRecFNToRaw_preMul_io_toPostMul_isInfA;
      mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_isZeroA <=
        _mulAddRecFNToRaw_preMul_io_toPostMul_isZeroA;
      mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_isInfB <=
        _mulAddRecFNToRaw_preMul_io_toPostMul_isInfB;
      mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_isZeroB <=
        _mulAddRecFNToRaw_preMul_io_toPostMul_isZeroB;
      mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_signProd <=
        _mulAddRecFNToRaw_preMul_io_toPostMul_signProd;
      mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_isNaNC <=
        _mulAddRecFNToRaw_preMul_io_toPostMul_isNaNC;
      mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_isInfC <=
        _mulAddRecFNToRaw_preMul_io_toPostMul_isInfC;
      mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_isZeroC <=
        _mulAddRecFNToRaw_preMul_io_toPostMul_isZeroC;
      mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_sExpSum <=
        _mulAddRecFNToRaw_preMul_io_toPostMul_sExpSum;
      mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_doSubMags <=
        _mulAddRecFNToRaw_preMul_io_toPostMul_doSubMags;
      mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_CIsDominant <=
        _mulAddRecFNToRaw_preMul_io_toPostMul_CIsDominant;
      mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_CDom_CAlignDist <=
        _mulAddRecFNToRaw_preMul_io_toPostMul_CDom_CAlignDist;
      mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_highAlignedSigC <=
        _mulAddRecFNToRaw_preMul_io_toPostMul_highAlignedSigC;
      mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_bit0AlignedSigC <=
        _mulAddRecFNToRaw_preMul_io_toPostMul_bit0AlignedSigC;
      mulAddRecFNToRaw_postMul_io_mulAddResult_pipe_b <=
        {1'h0,
         {53'h0, _mulAddRecFNToRaw_preMul_io_mulAddA}
           * {53'h0, _mulAddRecFNToRaw_preMul_io_mulAddB}}
        + {1'h0, _mulAddRecFNToRaw_preMul_io_mulAddC};
      mulAddRecFNToRaw_postMul_io_roundingMode_pipe_b <= io_roundingMode;
      roundingMode_stage0_pipe_b <= io_roundingMode;
    end
    if (valid_stage0_pipe_v) begin
      roundRawFNToRecFN_io_invalidExc_pipe_b <= _mulAddRecFNToRaw_postMul_io_invalidExc;
      roundRawFNToRecFN_io_in_pipe_b_isNaN <= _mulAddRecFNToRaw_postMul_io_rawOut_isNaN;
      roundRawFNToRecFN_io_in_pipe_b_isInf <= _mulAddRecFNToRaw_postMul_io_rawOut_isInf;
      roundRawFNToRecFN_io_in_pipe_b_isZero <= _mulAddRecFNToRaw_postMul_io_rawOut_isZero;
      roundRawFNToRecFN_io_in_pipe_b_sign <= _mulAddRecFNToRaw_postMul_io_rawOut_sign;
      roundRawFNToRecFN_io_in_pipe_b_sExp <= _mulAddRecFNToRaw_postMul_io_rawOut_sExp;
      roundRawFNToRecFN_io_in_pipe_b_sig <= _mulAddRecFNToRaw_postMul_io_rawOut_sig;
      roundRawFNToRecFN_io_roundingMode_pipe_b <= roundingMode_stage0_pipe_b;
    end
    roundRawFNToRecFN_io_detectTininess_pipe_b <=
      valid_stage0_pipe_v | roundRawFNToRecFN_io_detectTininess_pipe_b;
    if (reset) begin
      valid_stage0_pipe_v <= 1'h0;
      io_validout_pipe_v <= 1'h0;
    end
    else begin
      valid_stage0_pipe_v <= io_validin;
      io_validout_pipe_v <= valid_stage0_pipe_v;
    end
  end // always @(posedge)
  MulAddRecFNToRaw_preMul_1 mulAddRecFNToRaw_preMul (
    .io_op                        (io_op),
    .io_a                         (io_a),
    .io_b                         (io_b),
    .io_c                         (io_c),
    .io_mulAddA                   (_mulAddRecFNToRaw_preMul_io_mulAddA),
    .io_mulAddB                   (_mulAddRecFNToRaw_preMul_io_mulAddB),
    .io_mulAddC                   (_mulAddRecFNToRaw_preMul_io_mulAddC),
    .io_toPostMul_isSigNaNAny     (_mulAddRecFNToRaw_preMul_io_toPostMul_isSigNaNAny),
    .io_toPostMul_isNaNAOrB       (_mulAddRecFNToRaw_preMul_io_toPostMul_isNaNAOrB),
    .io_toPostMul_isInfA          (_mulAddRecFNToRaw_preMul_io_toPostMul_isInfA),
    .io_toPostMul_isZeroA         (_mulAddRecFNToRaw_preMul_io_toPostMul_isZeroA),
    .io_toPostMul_isInfB          (_mulAddRecFNToRaw_preMul_io_toPostMul_isInfB),
    .io_toPostMul_isZeroB         (_mulAddRecFNToRaw_preMul_io_toPostMul_isZeroB),
    .io_toPostMul_signProd        (_mulAddRecFNToRaw_preMul_io_toPostMul_signProd),
    .io_toPostMul_isNaNC          (_mulAddRecFNToRaw_preMul_io_toPostMul_isNaNC),
    .io_toPostMul_isInfC          (_mulAddRecFNToRaw_preMul_io_toPostMul_isInfC),
    .io_toPostMul_isZeroC         (_mulAddRecFNToRaw_preMul_io_toPostMul_isZeroC),
    .io_toPostMul_sExpSum         (_mulAddRecFNToRaw_preMul_io_toPostMul_sExpSum),
    .io_toPostMul_doSubMags       (_mulAddRecFNToRaw_preMul_io_toPostMul_doSubMags),
    .io_toPostMul_CIsDominant     (_mulAddRecFNToRaw_preMul_io_toPostMul_CIsDominant),
    .io_toPostMul_CDom_CAlignDist (_mulAddRecFNToRaw_preMul_io_toPostMul_CDom_CAlignDist),
    .io_toPostMul_highAlignedSigC (_mulAddRecFNToRaw_preMul_io_toPostMul_highAlignedSigC),
    .io_toPostMul_bit0AlignedSigC (_mulAddRecFNToRaw_preMul_io_toPostMul_bit0AlignedSigC)
  );
  MulAddRecFNToRaw_postMul_1 mulAddRecFNToRaw_postMul (
    .io_fromPreMul_isSigNaNAny
      (mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_isSigNaNAny),
    .io_fromPreMul_isNaNAOrB
      (mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_isNaNAOrB),
    .io_fromPreMul_isInfA          (mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_isInfA),
    .io_fromPreMul_isZeroA
      (mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_isZeroA),
    .io_fromPreMul_isInfB          (mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_isInfB),
    .io_fromPreMul_isZeroB
      (mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_isZeroB),
    .io_fromPreMul_signProd
      (mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_signProd),
    .io_fromPreMul_isNaNC          (mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_isNaNC),
    .io_fromPreMul_isInfC          (mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_isInfC),
    .io_fromPreMul_isZeroC
      (mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_isZeroC),
    .io_fromPreMul_sExpSum
      (mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_sExpSum),
    .io_fromPreMul_doSubMags
      (mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_doSubMags),
    .io_fromPreMul_CIsDominant
      (mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_CIsDominant),
    .io_fromPreMul_CDom_CAlignDist
      (mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_CDom_CAlignDist),
    .io_fromPreMul_highAlignedSigC
      (mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_highAlignedSigC),
    .io_fromPreMul_bit0AlignedSigC
      (mulAddRecFNToRaw_postMul_io_fromPreMul_pipe_b_bit0AlignedSigC),
    .io_mulAddResult               (mulAddRecFNToRaw_postMul_io_mulAddResult_pipe_b),
    .io_roundingMode               (mulAddRecFNToRaw_postMul_io_roundingMode_pipe_b),
    .io_invalidExc                 (_mulAddRecFNToRaw_postMul_io_invalidExc),
    .io_rawOut_isNaN               (_mulAddRecFNToRaw_postMul_io_rawOut_isNaN),
    .io_rawOut_isInf               (_mulAddRecFNToRaw_postMul_io_rawOut_isInf),
    .io_rawOut_isZero              (_mulAddRecFNToRaw_postMul_io_rawOut_isZero),
    .io_rawOut_sign                (_mulAddRecFNToRaw_postMul_io_rawOut_sign),
    .io_rawOut_sExp                (_mulAddRecFNToRaw_postMul_io_rawOut_sExp),
    .io_rawOut_sig                 (_mulAddRecFNToRaw_postMul_io_rawOut_sig)
  );
  RoundRawFNToRecFN_1 roundRawFNToRecFN (
    .io_invalidExc     (roundRawFNToRecFN_io_invalidExc_pipe_b),
    .io_infiniteExc    (1'h0),
    .io_in_isNaN       (roundRawFNToRecFN_io_in_pipe_b_isNaN),
    .io_in_isInf       (roundRawFNToRecFN_io_in_pipe_b_isInf),
    .io_in_isZero      (roundRawFNToRecFN_io_in_pipe_b_isZero),
    .io_in_sign        (roundRawFNToRecFN_io_in_pipe_b_sign),
    .io_in_sExp        (roundRawFNToRecFN_io_in_pipe_b_sExp),
    .io_in_sig         (roundRawFNToRecFN_io_in_pipe_b_sig),
    .io_roundingMode   (roundRawFNToRecFN_io_roundingMode_pipe_b),
    .io_detectTininess (roundRawFNToRecFN_io_detectTininess_pipe_b),
    .io_out            (io_out),
    .io_exceptionFlags (io_exceptionFlags)
  );
  assign io_validout = io_validout_pipe_v;
endmodule

module FPUFMAPipe_l4_f64(
  input         clock,
                reset,
                io_in_valid,
                io_in_bits_ren3,
                io_in_bits_swap23,
  input  [2:0]  io_in_bits_rm,
  input  [1:0]  io_in_bits_fmaCmd,
  input  [64:0] io_in_bits_in1,
                io_in_bits_in2,
                io_in_bits_in3,
  output [64:0] io_out_bits_data,
  output [4:0]  io_out_bits_exc
);

  wire [64:0] _fma_io_out;
  wire [4:0]  _fma_io_exceptionFlags;
  wire        _fma_io_validout;
  reg         valid;
  reg  [2:0]  in_rm;
  reg  [1:0]  in_fmaCmd;
  reg  [64:0] in_in1;
  reg  [64:0] in_in2;
  reg  [64:0] in_in3;
  reg  [64:0] io_out_pipe_b_data;
  reg  [4:0]  io_out_pipe_b_exc;
  always @(posedge clock) begin
    valid <= io_in_valid;
    if (io_in_valid) begin
      in_rm <= io_in_bits_rm;
      in_fmaCmd <= io_in_bits_fmaCmd;
      in_in1 <= io_in_bits_in1;
      if (io_in_bits_swap23)
        in_in2 <= 65'h8000000000000000;
      else
        in_in2 <= io_in_bits_in2;
      if (io_in_bits_ren3 | io_in_bits_swap23)
        in_in3 <= io_in_bits_in3;
      else
        in_in3 <= (io_in_bits_in1 ^ io_in_bits_in2) & 65'h10000000000000000;
    end
    if (_fma_io_validout) begin
      io_out_pipe_b_data <=
        ({65{_fma_io_out[63:61] != 3'h7}} | 65'h1EFEFFFFFFFFFFFFF) & _fma_io_out;
      io_out_pipe_b_exc <= _fma_io_exceptionFlags;
    end
  end // always @(posedge)
  MulAddRecFNPipe_l2_e11_s53 fma (
    .clock             (clock),
    .reset             (reset),
    .io_validin        (valid),
    .io_op             (in_fmaCmd),
    .io_a              (in_in1),
    .io_b              (in_in2),
    .io_c              (in_in3),
    .io_roundingMode   (in_rm),
    .io_out            (_fma_io_out),
    .io_exceptionFlags (_fma_io_exceptionFlags),
    .io_validout       (_fma_io_validout)
  );
  assign io_out_bits_data = io_out_pipe_b_data;
  assign io_out_bits_exc = io_out_pipe_b_exc;
endmodule

module DivSqrtRawFN_small(
  input         clock,
                reset,
                io_inValid,
                io_sqrtOp,
                io_a_isNaN,
                io_a_isInf,
                io_a_isZero,
                io_a_sign,
  input  [9:0]  io_a_sExp,
  input  [24:0] io_a_sig,
  input         io_b_isNaN,
                io_b_isInf,
                io_b_isZero,
                io_b_sign,
  input  [9:0]  io_b_sExp,
  input  [24:0] io_b_sig,
  input  [2:0]  io_roundingMode,
  output        io_inReady,
                io_rawOutValid_div,
                io_rawOutValid_sqrt,
  output [2:0]  io_roundingModeOut,
  output        io_invalidExc,
                io_infiniteExc,
                io_rawOut_isNaN,
                io_rawOut_isInf,
                io_rawOut_isZero,
                io_rawOut_sign,
  output [9:0]  io_rawOut_sExp,
  output [26:0] io_rawOut_sig
);

  reg [4:0]  cycleNum;
  reg        inReady;
  reg        rawOutValid;
  reg        sqrtOp_Z;
  reg        majorExc_Z;
  reg        isNaN_Z;
  reg        isInf_Z;
  reg        isZero_Z;
  reg        sign_Z;
  reg [9:0]  sExp_Z;
  reg [23:0] fractB_Z;
  reg [2:0]  roundingMode_Z;
  reg [25:0] rem_Z;
  reg        notZeroRem_Z;
  reg [25:0] sigX_Z;
  always @(posedge clock) begin
    automatic logic        oddSqrt_S = io_sqrtOp & io_a_sExp[0];
    automatic logic        entering;
    automatic logic        _GEN = ~inReady & sqrtOp_Z;
    automatic logic        _GEN_0;
    automatic logic        _GEN_1;
    automatic logic        _GEN_2;
    automatic logic [26:0] rem;
    automatic logic [25:0] _GEN_3;
    automatic logic [25:0] _GEN_4;
    automatic logic [28:0] trialRem;
    automatic logic        newBit;
    automatic logic        _GEN_5;
    entering = inReady & io_inValid;
    _GEN_0 = inReady & ~io_sqrtOp;
    _GEN_1 = inReady & io_sqrtOp;
    _GEN_2 = inReady & oddSqrt_S;
    rem =
      {1'h0, inReady & ~oddSqrt_S ? {io_a_sig, 1'h0} : 26'h0}
      | (_GEN_2 ? {io_a_sig[23:22] - 2'h1, io_a_sig[21:0], 3'h0} : 27'h0)
      | (inReady ? 27'h0 : {rem_Z, 1'h0});
    _GEN_3 = _GEN_0 ? {io_b_sig, 1'h0} : 26'h0;
    _GEN_4 =
      {_GEN_3[25], _GEN_3[24:0] | {inReady & io_sqrtOp & ~(io_a_sExp[0]), 24'h0}}
      | (_GEN_2 ? 26'h2800000 : 26'h0);
    trialRem =
      {2'h0, rem}
      - {2'h0,
         {1'h0,
          _GEN_4[25],
          _GEN_4[24] | ~inReady & ~sqrtOp_Z,
          _GEN_4[23:0] | (inReady ? 24'h0 : fractB_Z)} | (_GEN ? {sigX_Z, 1'h0} : 27'h0)};
    newBit = $signed(trialRem) > -29'sh1;
    _GEN_5 = entering | ~inReady;
    if (reset) begin
      cycleNum <= 5'h0;
      inReady <= 1'h1;
      rawOutValid <= 1'h0;
    end
    else if ((|cycleNum) | entering) begin
      automatic logic       specialCaseA_S = io_a_isNaN | io_a_isInf | io_a_isZero;
      automatic logic       normalCase_S =
        io_sqrtOp
          ? ~specialCaseA_S & ~io_a_sign
          : ~specialCaseA_S & ~(io_b_isNaN | io_b_isInf | io_b_isZero);
      automatic logic       skipCycle2 = cycleNum == 5'h3 & sigX_Z[25];
      automatic logic       _GEN_6;
      automatic logic       _GEN_7;
      automatic logic [4:0] _GEN_8 = cycleNum - 5'h1;
      automatic logic [4:0] _GEN_9;
      _GEN_6 = entering & ~normalCase_S;
      _GEN_7 = ~entering & ~skipCycle2;
      _GEN_9 =
        {4'h0, _GEN_6}
        | (entering & normalCase_S ? (io_sqrtOp ? {4'hC, ~(io_a_sExp[0])} : 5'h1A) : 5'h0)
        | (_GEN_7 ? _GEN_8 : 5'h0);
      cycleNum <= {_GEN_9[4:1], _GEN_9[0] | skipCycle2};
      inReady <= _GEN_6 | _GEN_7 & _GEN_8 < 5'h2 | skipCycle2;
      rawOutValid <= _GEN_6 | _GEN_7 & _GEN_8 == 5'h1 | skipCycle2;
    end
    if (entering) begin
      automatic logic _GEN_10;
      _GEN_10 = io_a_isNaN & ~(io_a_sig[22]);
      sqrtOp_Z <= io_sqrtOp;
      if (io_sqrtOp) begin
        automatic logic notSigNaNIn_invalidExc_S_sqrt =
          ~io_a_isNaN & ~io_a_isZero & io_a_sign;
        majorExc_Z <= _GEN_10 | notSigNaNIn_invalidExc_S_sqrt;
        isNaN_Z <= io_a_isNaN | notSigNaNIn_invalidExc_S_sqrt;
        sExp_Z <= {io_a_sExp[9], io_a_sExp[9:1]} + 10'h80;
      end
      else begin
        automatic logic        notSigNaNIn_invalidExc_S_div =
          io_a_isZero & io_b_isZero | io_a_isInf & io_b_isInf;
        automatic logic [10:0] sExpQuot_S_div =
          {io_a_sExp[9], io_a_sExp} + {{3{io_b_sExp[8]}}, ~(io_b_sExp[7:0])};
        majorExc_Z <=
          _GEN_10 | io_b_isNaN & ~(io_b_sig[22]) | notSigNaNIn_invalidExc_S_div
          | ~io_a_isNaN & ~io_a_isInf & io_b_isZero;
        isNaN_Z <= io_a_isNaN | io_b_isNaN | notSigNaNIn_invalidExc_S_div;
        sExp_Z <=
          {$signed(sExpQuot_S_div) > 11'sh1BF ? 4'h6 : sExpQuot_S_div[9:6],
           sExpQuot_S_div[5:0]};
      end
      isInf_Z <= ~io_sqrtOp & io_b_isZero | io_a_isInf;
      isZero_Z <= ~io_sqrtOp & io_b_isInf | io_a_isZero;
      sign_Z <= io_a_sign ^ ~io_sqrtOp & io_b_sign;
      roundingMode_Z <= io_roundingMode;
    end
    if (entering | _GEN) begin
      automatic logic [23:0] _GEN_11;
      _GEN_11 = _GEN_0 ? {io_b_sig[22:0], 1'h0} : 24'h0;
      fractB_Z <=
        {_GEN_11[23] | _GEN_1 & ~(io_a_sExp[0]),
         _GEN_11[22:0] | {_GEN_1 & io_a_sExp[0], 22'h0}
           | (inReady ? 23'h0 : fractB_Z[23:1])};
    end
    if (_GEN_5) begin
      automatic logic [25:0] _GEN_12;
      automatic logic [24:0] _GEN_13;
      automatic logic [31:0] _GEN_14 = 32'h1 << cycleNum;
      _GEN_12 = _GEN_0 ? {newBit, 25'h0} : 26'h0;
      _GEN_13 = _GEN_12[24:0] | {_GEN_1, 24'h0};
      rem_Z <= newBit ? trialRem[25:0] : rem[25:0];
      sigX_Z <=
        {_GEN_12[25], _GEN_13[24], _GEN_13[23:0] | (_GEN_2 ? {newBit, 23'h0} : 24'h0)}
        | (inReady ? 26'h0 : sigX_Z) | (~inReady & newBit ? _GEN_14[27:2] : 26'h0);
    end
    if (_GEN_5 & (inReady | newBit))
      notZeroRem_Z <= |trialRem;
  end // always @(posedge)
  assign io_inReady = inReady;
  assign io_rawOutValid_div = rawOutValid & ~sqrtOp_Z;
  assign io_rawOutValid_sqrt = rawOutValid & sqrtOp_Z;
  assign io_roundingModeOut = roundingMode_Z;
  assign io_invalidExc = majorExc_Z & isNaN_Z;
  assign io_infiniteExc = majorExc_Z & ~isNaN_Z;
  assign io_rawOut_isNaN = isNaN_Z;
  assign io_rawOut_isInf = isInf_Z;
  assign io_rawOut_isZero = isZero_Z;
  assign io_rawOut_sign = sign_Z;
  assign io_rawOut_sExp = sExp_Z;
  assign io_rawOut_sig = {sigX_Z, notZeroRem_Z};
endmodule

module DivSqrtRecFNToRaw_small(
  input         clock,
                reset,
                io_inValid,
                io_sqrtOp,
  input  [32:0] io_a,
                io_b,
  input  [2:0]  io_roundingMode,
  output        io_inReady,
                io_rawOutValid_div,
                io_rawOutValid_sqrt,
  output [2:0]  io_roundingModeOut,
  output        io_invalidExc,
                io_infiniteExc,
                io_rawOut_isNaN,
                io_rawOut_isInf,
                io_rawOut_isZero,
                io_rawOut_sign,
  output [9:0]  io_rawOut_sExp,
  output [26:0] io_rawOut_sig
);

  DivSqrtRawFN_small divSqrtRawFN (
    .clock               (clock),
    .reset               (reset),
    .io_inValid          (io_inValid),
    .io_sqrtOp           (io_sqrtOp),
    .io_a_isNaN          ((&(io_a[31:30])) & io_a[29]),
    .io_a_isInf          ((&(io_a[31:30])) & ~(io_a[29])),
    .io_a_isZero         (~(|(io_a[31:29]))),
    .io_a_sign           (io_a[32]),
    .io_a_sExp           ({1'h0, io_a[31:23]}),
    .io_a_sig            ({1'h0, |(io_a[31:29]), io_a[22:0]}),
    .io_b_isNaN          ((&(io_b[31:30])) & io_b[29]),
    .io_b_isInf          ((&(io_b[31:30])) & ~(io_b[29])),
    .io_b_isZero         (~(|(io_b[31:29]))),
    .io_b_sign           (io_b[32]),
    .io_b_sExp           ({1'h0, io_b[31:23]}),
    .io_b_sig            ({1'h0, |(io_b[31:29]), io_b[22:0]}),
    .io_roundingMode     (io_roundingMode),
    .io_inReady          (io_inReady),
    .io_rawOutValid_div  (io_rawOutValid_div),
    .io_rawOutValid_sqrt (io_rawOutValid_sqrt),
    .io_roundingModeOut  (io_roundingModeOut),
    .io_invalidExc       (io_invalidExc),
    .io_infiniteExc      (io_infiniteExc),
    .io_rawOut_isNaN     (io_rawOut_isNaN),
    .io_rawOut_isInf     (io_rawOut_isInf),
    .io_rawOut_isZero    (io_rawOut_isZero),
    .io_rawOut_sign      (io_rawOut_sign),
    .io_rawOut_sExp      (io_rawOut_sExp),
    .io_rawOut_sig       (io_rawOut_sig)
  );
endmodule

module DivSqrtRecFN_small(
  input         clock,
                reset,
                io_inValid,
                io_sqrtOp,
  input  [32:0] io_a,
                io_b,
  input  [2:0]  io_roundingMode,
  output        io_inReady,
                io_outValid_div,
                io_outValid_sqrt,
  output [32:0] io_out,
  output [4:0]  io_exceptionFlags
);

  wire [2:0]  _divSqrtRecFNToRaw_io_roundingModeOut;
  wire        _divSqrtRecFNToRaw_io_invalidExc;
  wire        _divSqrtRecFNToRaw_io_infiniteExc;
  wire        _divSqrtRecFNToRaw_io_rawOut_isNaN;
  wire        _divSqrtRecFNToRaw_io_rawOut_isInf;
  wire        _divSqrtRecFNToRaw_io_rawOut_isZero;
  wire        _divSqrtRecFNToRaw_io_rawOut_sign;
  wire [9:0]  _divSqrtRecFNToRaw_io_rawOut_sExp;
  wire [26:0] _divSqrtRecFNToRaw_io_rawOut_sig;
  DivSqrtRecFNToRaw_small divSqrtRecFNToRaw (
    .clock               (clock),
    .reset               (reset),
    .io_inValid          (io_inValid),
    .io_sqrtOp           (io_sqrtOp),
    .io_a                (io_a),
    .io_b                (io_b),
    .io_roundingMode     (io_roundingMode),
    .io_inReady          (io_inReady),
    .io_rawOutValid_div  (io_outValid_div),
    .io_rawOutValid_sqrt (io_outValid_sqrt),
    .io_roundingModeOut  (_divSqrtRecFNToRaw_io_roundingModeOut),
    .io_invalidExc       (_divSqrtRecFNToRaw_io_invalidExc),
    .io_infiniteExc      (_divSqrtRecFNToRaw_io_infiniteExc),
    .io_rawOut_isNaN     (_divSqrtRecFNToRaw_io_rawOut_isNaN),
    .io_rawOut_isInf     (_divSqrtRecFNToRaw_io_rawOut_isInf),
    .io_rawOut_isZero    (_divSqrtRecFNToRaw_io_rawOut_isZero),
    .io_rawOut_sign      (_divSqrtRecFNToRaw_io_rawOut_sign),
    .io_rawOut_sExp      (_divSqrtRecFNToRaw_io_rawOut_sExp),
    .io_rawOut_sig       (_divSqrtRecFNToRaw_io_rawOut_sig)
  );
  RoundRawFNToRecFN roundRawFNToRecFN (
    .io_invalidExc     (_divSqrtRecFNToRaw_io_invalidExc),
    .io_infiniteExc    (_divSqrtRecFNToRaw_io_infiniteExc),
    .io_in_isNaN       (_divSqrtRecFNToRaw_io_rawOut_isNaN),
    .io_in_isInf       (_divSqrtRecFNToRaw_io_rawOut_isInf),
    .io_in_isZero      (_divSqrtRecFNToRaw_io_rawOut_isZero),
    .io_in_sign        (_divSqrtRecFNToRaw_io_rawOut_sign),
    .io_in_sExp        (_divSqrtRecFNToRaw_io_rawOut_sExp),
    .io_in_sig         (_divSqrtRecFNToRaw_io_rawOut_sig),
    .io_roundingMode   (_divSqrtRecFNToRaw_io_roundingModeOut),
    .io_detectTininess (1'h1),
    .io_out            (io_out),
    .io_exceptionFlags (io_exceptionFlags)
  );
endmodule

module DivSqrtRawFN_small_1(
  input         clock,
                reset,
                io_inValid,
                io_sqrtOp,
                io_a_isNaN,
                io_a_isInf,
                io_a_isZero,
                io_a_sign,
  input  [12:0] io_a_sExp,
  input  [53:0] io_a_sig,
  input         io_b_isNaN,
                io_b_isInf,
                io_b_isZero,
                io_b_sign,
  input  [12:0] io_b_sExp,
  input  [53:0] io_b_sig,
  input  [2:0]  io_roundingMode,
  output        io_inReady,
                io_rawOutValid_div,
                io_rawOutValid_sqrt,
  output [2:0]  io_roundingModeOut,
  output        io_invalidExc,
                io_infiniteExc,
                io_rawOut_isNaN,
                io_rawOut_isInf,
                io_rawOut_isZero,
                io_rawOut_sign,
  output [12:0] io_rawOut_sExp,
  output [55:0] io_rawOut_sig
);

  reg [5:0]  cycleNum;
  reg        inReady;
  reg        rawOutValid;
  reg        sqrtOp_Z;
  reg        majorExc_Z;
  reg        isNaN_Z;
  reg        isInf_Z;
  reg        isZero_Z;
  reg        sign_Z;
  reg [12:0] sExp_Z;
  reg [52:0] fractB_Z;
  reg [2:0]  roundingMode_Z;
  reg [54:0] rem_Z;
  reg        notZeroRem_Z;
  reg [54:0] sigX_Z;
  always @(posedge clock) begin
    automatic logic        oddSqrt_S = io_sqrtOp & io_a_sExp[0];
    automatic logic        entering;
    automatic logic        _GEN = ~inReady & sqrtOp_Z;
    automatic logic        _GEN_0;
    automatic logic        _GEN_1;
    automatic logic        _GEN_2;
    automatic logic [55:0] rem;
    automatic logic [54:0] _GEN_3;
    automatic logic [54:0] _GEN_4;
    automatic logic [57:0] trialRem;
    automatic logic        newBit;
    automatic logic        _GEN_5;
    entering = inReady & io_inValid;
    _GEN_0 = inReady & ~io_sqrtOp;
    _GEN_1 = inReady & io_sqrtOp;
    _GEN_2 = inReady & oddSqrt_S;
    rem =
      {1'h0, inReady & ~oddSqrt_S ? {io_a_sig, 1'h0} : 55'h0}
      | (_GEN_2 ? {io_a_sig[52:51] - 2'h1, io_a_sig[50:0], 3'h0} : 56'h0)
      | (inReady ? 56'h0 : {rem_Z, 1'h0});
    _GEN_3 = _GEN_0 ? {io_b_sig, 1'h0} : 55'h0;
    _GEN_4 =
      {_GEN_3[54], _GEN_3[53:0] | {inReady & io_sqrtOp & ~(io_a_sExp[0]), 53'h0}}
      | (_GEN_2 ? 55'h50000000000000 : 55'h0);
    trialRem =
      {2'h0, rem}
      - {2'h0,
         {1'h0,
          _GEN_4[54],
          _GEN_4[53] | ~inReady & ~sqrtOp_Z,
          _GEN_4[52:0] | (inReady ? 53'h0 : fractB_Z)} | (_GEN ? {sigX_Z, 1'h0} : 56'h0)};
    newBit = $signed(trialRem) > -58'sh1;
    _GEN_5 = entering | ~inReady;
    if (reset) begin
      cycleNum <= 6'h0;
      inReady <= 1'h1;
      rawOutValid <= 1'h0;
    end
    else if ((|cycleNum) | entering) begin
      automatic logic       specialCaseA_S = io_a_isNaN | io_a_isInf | io_a_isZero;
      automatic logic       normalCase_S =
        io_sqrtOp
          ? ~specialCaseA_S & ~io_a_sign
          : ~specialCaseA_S & ~(io_b_isNaN | io_b_isInf | io_b_isZero);
      automatic logic       skipCycle2 = cycleNum == 6'h3 & sigX_Z[54];
      automatic logic       _GEN_6;
      automatic logic       _GEN_7;
      automatic logic [5:0] _GEN_8 = cycleNum - 6'h1;
      automatic logic [5:0] _GEN_9;
      _GEN_6 = entering & ~normalCase_S;
      _GEN_7 = ~entering & ~skipCycle2;
      _GEN_9 =
        {5'h0, _GEN_6}
        | (entering & normalCase_S
             ? (io_sqrtOp ? (io_a_sExp[0] ? 6'h35 : 6'h36) : 6'h37)
             : 6'h0) | (_GEN_7 ? _GEN_8 : 6'h0);
      cycleNum <= {_GEN_9[5:1], _GEN_9[0] | skipCycle2};
      inReady <= _GEN_6 | _GEN_7 & _GEN_8 < 6'h2 | skipCycle2;
      rawOutValid <= _GEN_6 | _GEN_7 & _GEN_8 == 6'h1 | skipCycle2;
    end
    if (entering) begin
      automatic logic _GEN_10;
      _GEN_10 = io_a_isNaN & ~(io_a_sig[51]);
      sqrtOp_Z <= io_sqrtOp;
      if (io_sqrtOp) begin
        automatic logic notSigNaNIn_invalidExc_S_sqrt =
          ~io_a_isNaN & ~io_a_isZero & io_a_sign;
        majorExc_Z <= _GEN_10 | notSigNaNIn_invalidExc_S_sqrt;
        isNaN_Z <= io_a_isNaN | notSigNaNIn_invalidExc_S_sqrt;
        sExp_Z <= {io_a_sExp[12], io_a_sExp[12:1]} + 13'h400;
      end
      else begin
        automatic logic        notSigNaNIn_invalidExc_S_div =
          io_a_isZero & io_b_isZero | io_a_isInf & io_b_isInf;
        automatic logic [13:0] sExpQuot_S_div =
          {io_a_sExp[12], io_a_sExp} + {{3{io_b_sExp[11]}}, ~(io_b_sExp[10:0])};
        majorExc_Z <=
          _GEN_10 | io_b_isNaN & ~(io_b_sig[51]) | notSigNaNIn_invalidExc_S_div
          | ~io_a_isNaN & ~io_a_isInf & io_b_isZero;
        isNaN_Z <= io_a_isNaN | io_b_isNaN | notSigNaNIn_invalidExc_S_div;
        sExp_Z <=
          {$signed(sExpQuot_S_div) > 14'shDFF ? 4'h6 : sExpQuot_S_div[12:9],
           sExpQuot_S_div[8:0]};
      end
      isInf_Z <= ~io_sqrtOp & io_b_isZero | io_a_isInf;
      isZero_Z <= ~io_sqrtOp & io_b_isInf | io_a_isZero;
      sign_Z <= io_a_sign ^ ~io_sqrtOp & io_b_sign;
      roundingMode_Z <= io_roundingMode;
    end
    if (entering | _GEN) begin
      automatic logic [52:0] _GEN_11;
      _GEN_11 = _GEN_0 ? {io_b_sig[51:0], 1'h0} : 53'h0;
      fractB_Z <=
        {_GEN_11[52] | _GEN_1 & ~(io_a_sExp[0]),
         _GEN_11[51:0] | {_GEN_1 & io_a_sExp[0], 51'h0}
           | (inReady ? 52'h0 : fractB_Z[52:1])};
    end
    if (_GEN_5) begin
      automatic logic [54:0] _GEN_12;
      automatic logic [53:0] _GEN_13;
      automatic logic [63:0] _GEN_14 = 64'h1 << cycleNum;
      _GEN_12 = _GEN_0 ? {newBit, 54'h0} : 55'h0;
      _GEN_13 = _GEN_12[53:0] | {_GEN_1, 53'h0};
      rem_Z <= newBit ? trialRem[54:0] : rem[54:0];
      sigX_Z <=
        {_GEN_12[54], _GEN_13[53], _GEN_13[52:0] | (_GEN_2 ? {newBit, 52'h0} : 53'h0)}
        | (inReady ? 55'h0 : sigX_Z) | (~inReady & newBit ? _GEN_14[56:2] : 55'h0);
    end
    if (_GEN_5 & (inReady | newBit))
      notZeroRem_Z <= |trialRem;
  end // always @(posedge)
  assign io_inReady = inReady;
  assign io_rawOutValid_div = rawOutValid & ~sqrtOp_Z;
  assign io_rawOutValid_sqrt = rawOutValid & sqrtOp_Z;
  assign io_roundingModeOut = roundingMode_Z;
  assign io_invalidExc = majorExc_Z & isNaN_Z;
  assign io_infiniteExc = majorExc_Z & ~isNaN_Z;
  assign io_rawOut_isNaN = isNaN_Z;
  assign io_rawOut_isInf = isInf_Z;
  assign io_rawOut_isZero = isZero_Z;
  assign io_rawOut_sign = sign_Z;
  assign io_rawOut_sExp = sExp_Z;
  assign io_rawOut_sig = {sigX_Z, notZeroRem_Z};
endmodule

module DivSqrtRecFNToRaw_small_1(
  input         clock,
                reset,
                io_inValid,
                io_sqrtOp,
  input  [64:0] io_a,
                io_b,
  input  [2:0]  io_roundingMode,
  output        io_inReady,
                io_rawOutValid_div,
                io_rawOutValid_sqrt,
  output [2:0]  io_roundingModeOut,
  output        io_invalidExc,
                io_infiniteExc,
                io_rawOut_isNaN,
                io_rawOut_isInf,
                io_rawOut_isZero,
                io_rawOut_sign,
  output [12:0] io_rawOut_sExp,
  output [55:0] io_rawOut_sig
);

  DivSqrtRawFN_small_1 divSqrtRawFN (
    .clock               (clock),
    .reset               (reset),
    .io_inValid          (io_inValid),
    .io_sqrtOp           (io_sqrtOp),
    .io_a_isNaN          ((&(io_a[63:62])) & io_a[61]),
    .io_a_isInf          ((&(io_a[63:62])) & ~(io_a[61])),
    .io_a_isZero         (~(|(io_a[63:61]))),
    .io_a_sign           (io_a[64]),
    .io_a_sExp           ({1'h0, io_a[63:52]}),
    .io_a_sig            ({1'h0, |(io_a[63:61]), io_a[51:0]}),
    .io_b_isNaN          ((&(io_b[63:62])) & io_b[61]),
    .io_b_isInf          ((&(io_b[63:62])) & ~(io_b[61])),
    .io_b_isZero         (~(|(io_b[63:61]))),
    .io_b_sign           (io_b[64]),
    .io_b_sExp           ({1'h0, io_b[63:52]}),
    .io_b_sig            ({1'h0, |(io_b[63:61]), io_b[51:0]}),
    .io_roundingMode     (io_roundingMode),
    .io_inReady          (io_inReady),
    .io_rawOutValid_div  (io_rawOutValid_div),
    .io_rawOutValid_sqrt (io_rawOutValid_sqrt),
    .io_roundingModeOut  (io_roundingModeOut),
    .io_invalidExc       (io_invalidExc),
    .io_infiniteExc      (io_infiniteExc),
    .io_rawOut_isNaN     (io_rawOut_isNaN),
    .io_rawOut_isInf     (io_rawOut_isInf),
    .io_rawOut_isZero    (io_rawOut_isZero),
    .io_rawOut_sign      (io_rawOut_sign),
    .io_rawOut_sExp      (io_rawOut_sExp),
    .io_rawOut_sig       (io_rawOut_sig)
  );
endmodule

module DivSqrtRecFN_small_1(
  input         clock,
                reset,
                io_inValid,
                io_sqrtOp,
  input  [64:0] io_a,
                io_b,
  input  [2:0]  io_roundingMode,
  output        io_inReady,
                io_outValid_div,
                io_outValid_sqrt,
  output [64:0] io_out,
  output [4:0]  io_exceptionFlags
);

  wire [2:0]  _divSqrtRecFNToRaw_io_roundingModeOut;
  wire        _divSqrtRecFNToRaw_io_invalidExc;
  wire        _divSqrtRecFNToRaw_io_infiniteExc;
  wire        _divSqrtRecFNToRaw_io_rawOut_isNaN;
  wire        _divSqrtRecFNToRaw_io_rawOut_isInf;
  wire        _divSqrtRecFNToRaw_io_rawOut_isZero;
  wire        _divSqrtRecFNToRaw_io_rawOut_sign;
  wire [12:0] _divSqrtRecFNToRaw_io_rawOut_sExp;
  wire [55:0] _divSqrtRecFNToRaw_io_rawOut_sig;
  DivSqrtRecFNToRaw_small_1 divSqrtRecFNToRaw (
    .clock               (clock),
    .reset               (reset),
    .io_inValid          (io_inValid),
    .io_sqrtOp           (io_sqrtOp),
    .io_a                (io_a),
    .io_b                (io_b),
    .io_roundingMode     (io_roundingMode),
    .io_inReady          (io_inReady),
    .io_rawOutValid_div  (io_outValid_div),
    .io_rawOutValid_sqrt (io_outValid_sqrt),
    .io_roundingModeOut  (_divSqrtRecFNToRaw_io_roundingModeOut),
    .io_invalidExc       (_divSqrtRecFNToRaw_io_invalidExc),
    .io_infiniteExc      (_divSqrtRecFNToRaw_io_infiniteExc),
    .io_rawOut_isNaN     (_divSqrtRecFNToRaw_io_rawOut_isNaN),
    .io_rawOut_isInf     (_divSqrtRecFNToRaw_io_rawOut_isInf),
    .io_rawOut_isZero    (_divSqrtRecFNToRaw_io_rawOut_isZero),
    .io_rawOut_sign      (_divSqrtRecFNToRaw_io_rawOut_sign),
    .io_rawOut_sExp      (_divSqrtRecFNToRaw_io_rawOut_sExp),
    .io_rawOut_sig       (_divSqrtRecFNToRaw_io_rawOut_sig)
  );
  RoundRawFNToRecFN_1 roundRawFNToRecFN (
    .io_invalidExc     (_divSqrtRecFNToRaw_io_invalidExc),
    .io_infiniteExc    (_divSqrtRecFNToRaw_io_infiniteExc),
    .io_in_isNaN       (_divSqrtRecFNToRaw_io_rawOut_isNaN),
    .io_in_isInf       (_divSqrtRecFNToRaw_io_rawOut_isInf),
    .io_in_isZero      (_divSqrtRecFNToRaw_io_rawOut_isZero),
    .io_in_sign        (_divSqrtRecFNToRaw_io_rawOut_sign),
    .io_in_sExp        (_divSqrtRecFNToRaw_io_rawOut_sExp),
    .io_in_sig         (_divSqrtRecFNToRaw_io_rawOut_sig),
    .io_roundingMode   (_divSqrtRecFNToRaw_io_roundingModeOut),
    .io_detectTininess (1'h1),
    .io_out            (io_out),
    .io_exceptionFlags (io_exceptionFlags)
  );
endmodule

module FPU(
  input         clock,
                reset,
  input  [31:0] io_inst,
  input  [63:0] io_fromint_data,
  input  [2:0]  io_fcsr_rm,
  input         io_ll_resp_val,
  input  [2:0]  io_ll_resp_type,
  input  [4:0]  io_ll_resp_tag,
  input  [63:0] io_ll_resp_data,
  input         io_valid,
                io_killx,
                io_killm,
  output        io_fcsr_flags_valid,
  output [4:0]  io_fcsr_flags_bits,
  output [63:0] io_store_data,
                io_toint_data,
  output        io_fcsr_rdy,
                io_nack_mem,
                io_illegal_rm,
                io_dec_wen,
                io_dec_ren1,
                io_dec_ren2,
                io_dec_ren3,
                io_sboard_set,
                io_sboard_clr,
  output [4:0]  io_sboard_clra
);

  wire             divSqrt_inFlight;
  wire [4:0]       divSqrt_flags;
  wire [64:0]      divSqrt_wdata;
  wire             divSqrt_wen;
  wire             divSqrt_typeTag;
  wire             _divSqrt_1_io_inReady;
  wire             _divSqrt_1_io_outValid_div;
  wire             _divSqrt_1_io_outValid_sqrt;
  wire [64:0]      _divSqrt_1_io_out;
  wire [4:0]       _divSqrt_1_io_exceptionFlags;
  wire             _divSqrt_io_inReady;
  wire             _divSqrt_io_outValid_div;
  wire             _divSqrt_io_outValid_sqrt;
  wire [32:0]      _divSqrt_io_out;
  wire [4:0]       _divSqrt_io_exceptionFlags;
  wire [64:0]      _dfma_io_out_bits_data;
  wire [4:0]       _dfma_io_out_bits_exc;
  wire [64:0]      _fpmu_io_out_bits_data;
  wire [4:0]       _fpmu_io_out_bits_exc;
  wire [64:0]      _ifpu_io_out_bits_data;
  wire [4:0]       _ifpu_io_out_bits_exc;
  wire [2:0]       _fpiu_io_out_bits_in_rm;
  wire [64:0]      _fpiu_io_out_bits_in_in1;
  wire [64:0]      _fpiu_io_out_bits_in_in2;
  wire             _fpiu_io_out_bits_lt;
  wire [4:0]       _fpiu_io_out_bits_exc;
  wire [64:0]      _sfma_io_out_bits_data;
  wire [4:0]       _sfma_io_out_bits_exc;
  wire [64:0]      _regfile_ext_R0_data;
  wire [64:0]      _regfile_ext_R1_data;
  wire [64:0]      _regfile_ext_R2_data;
  wire             _fp_decoder_io_sigs_ren1;
  wire             _fp_decoder_io_sigs_ren2;
  wire             _fp_decoder_io_sigs_ren3;
  wire             _fp_decoder_io_sigs_swap12;
  wire             _fp_decoder_io_sigs_swap23;
  wire [1:0]       _fp_decoder_io_sigs_typeTagIn;
  wire [1:0]       _fp_decoder_io_sigs_typeTagOut;
  wire             _fp_decoder_io_sigs_fromint;
  wire             _fp_decoder_io_sigs_toint;
  wire             _fp_decoder_io_sigs_fastpipe;
  wire             _fp_decoder_io_sigs_fma;
  wire             _fp_decoder_io_sigs_div;
  wire             _fp_decoder_io_sigs_sqrt;
  wire             _fp_decoder_io_sigs_wflags;
  wire             _fp_decoder_io_sigs_vec;
  reg              ex_reg_valid;
  reg  [31:0]      ex_reg_inst;
  reg              ex_reg_ctrl_ren2;
  reg              ex_reg_ctrl_ren3;
  reg              ex_reg_ctrl_swap23;
  reg  [1:0]       ex_reg_ctrl_typeTagIn;
  reg  [1:0]       ex_reg_ctrl_typeTagOut;
  reg              ex_reg_ctrl_fromint;
  reg              ex_reg_ctrl_toint;
  reg              ex_reg_ctrl_fastpipe;
  reg              ex_reg_ctrl_fma;
  reg              ex_reg_ctrl_div;
  reg              ex_reg_ctrl_sqrt;
  reg              ex_reg_ctrl_wflags;
  reg              ex_reg_ctrl_vec;
  reg  [4:0]       ex_ra_0;
  reg  [4:0]       ex_ra_1;
  reg  [4:0]       ex_ra_2;
  reg              load_wb;
  reg  [1:0]       load_wb_typeTag;
  reg  [63:0]      load_wb_data;
  reg  [4:0]       load_wb_tag;
  reg              mem_reg_valid;
  reg  [31:0]      mem_reg_inst;
  reg              wb_reg_valid;
  reg  [1:0]       mem_ctrl_typeTagOut;
  reg              mem_ctrl_fromint;
  reg              mem_ctrl_toint;
  reg              mem_ctrl_fastpipe;
  reg              mem_ctrl_fma;
  reg              mem_ctrl_div;
  reg              mem_ctrl_sqrt;
  reg              mem_ctrl_wflags;
  reg              mem_ctrl_vec;
  reg              wb_ctrl_toint;
  wire [63:0]      _GEN =
    (load_wb_typeTag[0] ? 64'h0 : 64'hFFFFFFFF00000000) | load_wb_data;
  wire             wdata_rawIn_isZeroExpIn = _GEN[62:52] == 11'h0;
  wire [5:0]       wdata_rawIn_normDist =
    _GEN[51]
      ? 6'h0
      : _GEN[50]
          ? 6'h1
          : _GEN[49]
              ? 6'h2
              : _GEN[48]
                  ? 6'h3
                  : _GEN[47]
                      ? 6'h4
                      : _GEN[46]
                          ? 6'h5
                          : _GEN[45]
                              ? 6'h6
                              : _GEN[44]
                                  ? 6'h7
                                  : _GEN[43]
                                      ? 6'h8
                                      : _GEN[42]
                                          ? 6'h9
                                          : _GEN[41]
                                              ? 6'hA
                                              : _GEN[40]
                                                  ? 6'hB
                                                  : _GEN[39]
                                                      ? 6'hC
                                                      : _GEN[38]
                                                          ? 6'hD
                                                          : _GEN[37]
                                                              ? 6'hE
                                                              : _GEN[36]
                                                                  ? 6'hF
                                                                  : _GEN[35]
                                                                      ? 6'h10
                                                                      : _GEN[34]
                                                                          ? 6'h11
                                                                          : _GEN[33]
                                                                              ? 6'h12
                                                                              : _GEN[32]
                                                                                  ? 6'h13
                                                                                  : _GEN[31]
                                                                                      ? 6'h14
                                                                                      : _GEN[30]
                                                                                          ? 6'h15
                                                                                          : _GEN[29]
                                                                                              ? 6'h16
                                                                                              : _GEN[28]
                                                                                                  ? 6'h17
                                                                                                  : _GEN[27]
                                                                                                      ? 6'h18
                                                                                                      : _GEN[26]
                                                                                                          ? 6'h19
                                                                                                          : _GEN[25]
                                                                                                              ? 6'h1A
                                                                                                              : _GEN[24]
                                                                                                                  ? 6'h1B
                                                                                                                  : _GEN[23]
                                                                                                                      ? 6'h1C
                                                                                                                      : _GEN[22]
                                                                                                                          ? 6'h1D
                                                                                                                          : _GEN[21]
                                                                                                                              ? 6'h1E
                                                                                                                              : _GEN[20]
                                                                                                                                  ? 6'h1F
                                                                                                                                  : _GEN[19]
                                                                                                                                      ? 6'h20
                                                                                                                                      : _GEN[18]
                                                                                                                                          ? 6'h21
                                                                                                                                          : _GEN[17]
                                                                                                                                              ? 6'h22
                                                                                                                                              : _GEN[16]
                                                                                                                                                  ? 6'h23
                                                                                                                                                  : _GEN[15]
                                                                                                                                                      ? 6'h24
                                                                                                                                                      : _GEN[14]
                                                                                                                                                          ? 6'h25
                                                                                                                                                          : _GEN[13]
                                                                                                                                                              ? 6'h26
                                                                                                                                                              : _GEN[12]
                                                                                                                                                                  ? 6'h27
                                                                                                                                                                  : _GEN[11]
                                                                                                                                                                      ? 6'h28
                                                                                                                                                                      : _GEN[10]
                                                                                                                                                                          ? 6'h29
                                                                                                                                                                          : _GEN[9]
                                                                                                                                                                              ? 6'h2A
                                                                                                                                                                              : _GEN[8]
                                                                                                                                                                                  ? 6'h2B
                                                                                                                                                                                  : _GEN[7]
                                                                                                                                                                                      ? 6'h2C
                                                                                                                                                                                      : _GEN[6]
                                                                                                                                                                                          ? 6'h2D
                                                                                                                                                                                          : _GEN[5]
                                                                                                                                                                                              ? 6'h2E
                                                                                                                                                                                              : _GEN[4]
                                                                                                                                                                                                  ? 6'h2F
                                                                                                                                                                                                  : _GEN[3]
                                                                                                                                                                                                      ? 6'h30
                                                                                                                                                                                                      : _GEN[2]
                                                                                                                                                                                                          ? 6'h31
                                                                                                                                                                                                          : {5'h19,
                                                                                                                                                                                                             ~(_GEN[1])};
  wire [114:0]     _GEN_0 = {63'h0, _GEN[51:0]} << wdata_rawIn_normDist;
  wire [11:0]      wdata_rawIn_adjustedExp =
    (wdata_rawIn_isZeroExpIn ? {6'h3F, ~wdata_rawIn_normDist} : {1'h0, _GEN[62:52]})
    + {10'h100, wdata_rawIn_isZeroExpIn ? 2'h2 : 2'h1};
  wire [51:0]      _GEN_1 = wdata_rawIn_isZeroExpIn ? {_GEN_0[50:0], 1'h0} : _GEN[51:0];
  wire [2:0]       _GEN_2 =
    wdata_rawIn_isZeroExpIn & ~(|(_GEN[51:0])) ? 3'h0 : wdata_rawIn_adjustedExp[11:9];
  wire             _GEN_3 =
    _GEN_2[0] | (&(wdata_rawIn_adjustedExp[11:10])) & (|(_GEN[51:0]));
  wire             wdata_rawIn_isZeroExpIn_1 = _GEN[30:23] == 8'h0;
  wire [4:0]       wdata_rawIn_normDist_1 =
    _GEN[22]
      ? 5'h0
      : _GEN[21]
          ? 5'h1
          : _GEN[20]
              ? 5'h2
              : _GEN[19]
                  ? 5'h3
                  : _GEN[18]
                      ? 5'h4
                      : _GEN[17]
                          ? 5'h5
                          : _GEN[16]
                              ? 5'h6
                              : _GEN[15]
                                  ? 5'h7
                                  : _GEN[14]
                                      ? 5'h8
                                      : _GEN[13]
                                          ? 5'h9
                                          : _GEN[12]
                                              ? 5'hA
                                              : _GEN[11]
                                                  ? 5'hB
                                                  : _GEN[10]
                                                      ? 5'hC
                                                      : _GEN[9]
                                                          ? 5'hD
                                                          : _GEN[8]
                                                              ? 5'hE
                                                              : _GEN[7]
                                                                  ? 5'hF
                                                                  : _GEN[6]
                                                                      ? 5'h10
                                                                      : _GEN[5]
                                                                          ? 5'h11
                                                                          : _GEN[4]
                                                                              ? 5'h12
                                                                              : _GEN[3]
                                                                                  ? 5'h13
                                                                                  : _GEN[2]
                                                                                      ? 5'h14
                                                                                      : _GEN[1]
                                                                                          ? 5'h15
                                                                                          : 5'h16;
  wire [53:0]      _GEN_4 = {31'h0, _GEN[22:0]} << wdata_rawIn_normDist_1;
  wire [8:0]       wdata_rawIn_adjustedExp_1 =
    (wdata_rawIn_isZeroExpIn_1 ? {4'hF, ~wdata_rawIn_normDist_1} : {1'h0, _GEN[30:23]})
    + {7'h20, wdata_rawIn_isZeroExpIn_1 ? 2'h2 : 2'h1};
  wire [2:0]       _GEN_5 =
    wdata_rawIn_isZeroExpIn_1 & ~(|(_GEN[22:0])) ? 3'h0 : wdata_rawIn_adjustedExp_1[8:6];
  wire [2:0]       _GEN_6 = {_GEN_2[2:1], _GEN_3};
  wire [60:0]      _GEN_7 =
    (&_GEN_6)
      ? {&(_GEN_1[51:32]),
         wdata_rawIn_adjustedExp[7:1],
         _GEN_5[2],
         _GEN_1[51:32],
         _GEN[31],
         _GEN_5[1],
         _GEN_5[0] | (&(wdata_rawIn_adjustedExp_1[8:7])) & (|(_GEN[22:0])),
         wdata_rawIn_adjustedExp_1[5:0],
         wdata_rawIn_isZeroExpIn_1 ? {_GEN_4[21:0], 1'h0} : _GEN[22:0]}
      : {wdata_rawIn_adjustedExp[8:0], _GEN_1};
  wire [2:0]       dfma_io_in_bits_req_rm =
    (&(ex_reg_inst[14:12])) ? io_fcsr_rm : ex_reg_inst[14:12];
  wire             _GEN_8 = ex_reg_valid & ex_reg_ctrl_fma;
  wire             _GEN_9 = ex_reg_ctrl_typeTagOut == 2'h0;
  wire [1:0]       dfma_io_in_bits_req_fmaCmd =
    {ex_reg_inst[3], ex_reg_inst[2] | ~ex_reg_ctrl_ren3 & ex_reg_inst[27]};
  wire [2:0]       fpiu_io_in_bits_req_in1_expOut_expCode =
    {_regfile_ext_R0_data[52], _regfile_ext_R0_data[30:29]};
  wire [11:0]      fpiu_io_in_bits_req_in1_expOut_commonCase =
    {3'h0, _regfile_ext_R0_data[52], _regfile_ext_R0_data[30:23]} + 12'h700;
  wire [64:0]      fpiu_io_in_bits_req_in1 =
    ex_reg_ctrl_typeTagIn[0] | (&(_regfile_ext_R0_data[64:60]))
      ? (ex_reg_ctrl_typeTagIn[0]
           ? _regfile_ext_R0_data
           : {_regfile_ext_R0_data[31],
              fpiu_io_in_bits_req_in1_expOut_expCode == 3'h0
              | fpiu_io_in_bits_req_in1_expOut_expCode > 3'h5
                ? {_regfile_ext_R0_data[52],
                   _regfile_ext_R0_data[30:29],
                   fpiu_io_in_bits_req_in1_expOut_commonCase[8:0]}
                : fpiu_io_in_bits_req_in1_expOut_commonCase,
              _regfile_ext_R0_data[22:0],
              29'h0})
      : 65'hE008000000000000;
  wire [2:0]       fpiu_io_in_bits_req_in2_expOut_expCode =
    {_regfile_ext_R1_data[52], _regfile_ext_R1_data[30:29]};
  wire [11:0]      fpiu_io_in_bits_req_in2_expOut_commonCase =
    {3'h0, _regfile_ext_R1_data[52], _regfile_ext_R1_data[30:23]} + 12'h700;
  wire [64:0]      fpiu_io_in_bits_req_in2 =
    ex_reg_ctrl_typeTagIn[0] | (&(_regfile_ext_R1_data[64:60]))
      ? (ex_reg_ctrl_typeTagIn[0]
           ? _regfile_ext_R1_data
           : {_regfile_ext_R1_data[31],
              fpiu_io_in_bits_req_in2_expOut_expCode == 3'h0
              | fpiu_io_in_bits_req_in2_expOut_expCode > 3'h5
                ? {_regfile_ext_R1_data[52],
                   _regfile_ext_R1_data[30:29],
                   fpiu_io_in_bits_req_in2_expOut_commonCase[8:0]}
                : fpiu_io_in_bits_req_in2_expOut_commonCase,
              _regfile_ext_R1_data[22:0],
              29'h0})
      : 65'hE008000000000000;
  reg  [4:0]       divSqrt_waddr;
  wire             _GEN_10 = mem_ctrl_typeTagOut == 2'h0;
  wire             _GEN_11 = mem_ctrl_typeTagOut == 2'h1;
  reg  [2:0]       wen;
  reg  [4:0]       wbInfo_0_rd;
  reg              wbInfo_0_typeTag;
  reg              wbInfo_0_cp;
  reg  [1:0]       wbInfo_0_pipeid;
  reg  [4:0]       wbInfo_1_rd;
  reg              wbInfo_1_typeTag;
  reg              wbInfo_1_cp;
  reg  [1:0]       wbInfo_1_pipeid;
  reg  [4:0]       wbInfo_2_rd;
  reg              wbInfo_2_typeTag;
  reg              wbInfo_2_cp;
  reg  [1:0]       wbInfo_2_pipeid;
  reg              write_port_busy;
  wire [4:0]       waddr = divSqrt_wen ? divSqrt_waddr : wbInfo_0_rd;
  wire [3:0][64:0] _GEN_12 =
    {{_dfma_io_out_bits_data},
     {_sfma_io_out_bits_data},
     {_ifpu_io_out_bits_data},
     {_fpmu_io_out_bits_data}};
  wire [64:0]      _GEN_13 = divSqrt_wen ? divSqrt_wdata : _GEN_12[wbInfo_0_pipeid];
  wire [64:0]      wdata_1 =
    (divSqrt_wen ? divSqrt_typeTag : wbInfo_0_typeTag)
      ? _GEN_13
      : {12'hFFF, _GEN_13[31], 20'hFFFFF, _GEN_13[32], _GEN_13[30:0]};
  wire [3:0][4:0]  _GEN_14 =
    {{_dfma_io_out_bits_exc},
     {_sfma_io_out_bits_exc},
     {_ifpu_io_out_bits_exc},
     {_fpmu_io_out_bits_exc}};
  wire             _GEN_15 = ~wbInfo_0_cp & wen[0] | divSqrt_wen;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (load_wb & ~reset & ~(_GEN_6 != 3'h7 | _GEN_7[60] == (&(_GEN_7[51:32])))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at FPU.scala:823 assert(consistent(wdata))\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & ~reset
          & ~(wdata_1[63:61] != 3'h7 | wdata_1[60] == (&(wdata_1[51:32])))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at FPU.scala:970 assert(consistent(wdata))\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  wire             wb_toint_valid = wb_reg_valid & wb_ctrl_toint;
  reg  [4:0]       wb_toint_exc;
  wire             _GEN_16 = mem_ctrl_div | mem_ctrl_sqrt;
  wire             _io_nack_mem_output =
    write_port_busy | _GEN_16 & (|wen) | divSqrt_inFlight;
  reg              io_sboard_set_REG;
  wire             divSqrt_inValid = mem_reg_valid & _GEN_16 & ~divSqrt_inFlight;
  reg              divSqrt_killed;
  wire [8:0]       _GEN_17 = _fpiu_io_out_bits_in_in1[60:52] - 9'h100;
  wire [8:0]       _GEN_18 = _fpiu_io_out_bits_in_in2[60:52] - 9'h100;
  assign divSqrt_typeTag = _divSqrt_1_io_outValid_div | _divSqrt_1_io_outValid_sqrt;
  assign divSqrt_wen =
    (divSqrt_typeTag | _divSqrt_io_outValid_div | _divSqrt_io_outValid_sqrt)
    & ~divSqrt_killed;
  assign divSqrt_wdata =
    divSqrt_typeTag
      ? ({65{_divSqrt_1_io_out[63:61] != 3'h7}} | 65'h1EFEFFFFFFFFFFFFF)
        & _divSqrt_1_io_out
      : {32'h0, _divSqrt_io_out};
  assign divSqrt_flags =
    divSqrt_typeTag ? _divSqrt_1_io_exceptionFlags : _divSqrt_io_exceptionFlags;
  assign divSqrt_inFlight =
    ~divSqrt_killed & (~_divSqrt_1_io_inReady | ~_divSqrt_io_inReady);
  always @(posedge clock) begin
    automatic logic       _GEN_19;
    automatic logic       _GEN_20;
    automatic logic       _GEN_21;
    automatic logic       mem_wen;
    automatic logic       _GEN_22;
    automatic logic [1:0] _GEN_23;
    automatic logic       _GEN_24;
    automatic logic       _GEN_25;
    _GEN_19 = mem_ctrl_fma & _GEN_10;
    _GEN_20 = mem_ctrl_fma & _GEN_11;
    _GEN_21 = mem_ctrl_fastpipe | mem_ctrl_fromint;
    mem_wen = mem_reg_valid & (mem_ctrl_fma | mem_ctrl_fastpipe | mem_ctrl_fromint);
    _GEN_22 = mem_wen & ~write_port_busy & _GEN_21;
    _GEN_23 = {_GEN_19, mem_ctrl_fromint} | {2{_GEN_20}};
    _GEN_24 = mem_wen & ~write_port_busy & _GEN_19;
    _GEN_25 = mem_wen & ~write_port_busy & _GEN_20;
    if (reset) begin
      ex_reg_valid <= 1'h0;
      mem_reg_valid <= 1'h0;
      wb_reg_valid <= 1'h0;
      wen <= 3'h0;
      divSqrt_killed <= 1'h1;
    end
    else begin
      automatic logic _GEN_26 = io_killm | _io_nack_mem_output;
      ex_reg_valid <= io_valid;
      mem_reg_valid <= ex_reg_valid & ~(io_killx | mem_reg_valid & _GEN_26);
      wb_reg_valid <= mem_reg_valid & ~_GEN_26;
      if (mem_wen & ~_GEN_26)
        wen <= {_GEN_20, wen[2] | _GEN_19, wen[1] | _GEN_21};
      else
        wen <= {1'h0, wen[2:1]};
      divSqrt_killed <= divSqrt_inValid & _GEN_26;
    end
    if (io_valid) begin
      ex_reg_inst <= io_inst;
      ex_reg_ctrl_ren2 <= _fp_decoder_io_sigs_ren2;
      ex_reg_ctrl_ren3 <= _fp_decoder_io_sigs_ren3;
      ex_reg_ctrl_swap23 <= _fp_decoder_io_sigs_swap23;
      ex_reg_ctrl_typeTagIn <= _fp_decoder_io_sigs_typeTagIn;
      ex_reg_ctrl_typeTagOut <= _fp_decoder_io_sigs_typeTagOut;
      ex_reg_ctrl_fromint <= _fp_decoder_io_sigs_fromint;
      ex_reg_ctrl_toint <= _fp_decoder_io_sigs_toint;
      ex_reg_ctrl_fastpipe <= _fp_decoder_io_sigs_fastpipe;
      ex_reg_ctrl_fma <= _fp_decoder_io_sigs_fma;
      ex_reg_ctrl_div <= _fp_decoder_io_sigs_div;
      ex_reg_ctrl_sqrt <= _fp_decoder_io_sigs_sqrt;
      ex_reg_ctrl_wflags <= _fp_decoder_io_sigs_wflags;
      ex_reg_ctrl_vec <= _fp_decoder_io_sigs_vec;
      if (_fp_decoder_io_sigs_ren2 & _fp_decoder_io_sigs_swap12)
        ex_ra_0 <= io_inst[24:20];
      else if (_fp_decoder_io_sigs_ren1 & ~_fp_decoder_io_sigs_swap12)
        ex_ra_0 <= io_inst[19:15];
      if (_fp_decoder_io_sigs_ren2 & ~_fp_decoder_io_sigs_swap12
          & ~_fp_decoder_io_sigs_swap23)
        ex_ra_1 <= io_inst[24:20];
      else if (_fp_decoder_io_sigs_ren1 & _fp_decoder_io_sigs_swap12)
        ex_ra_1 <= io_inst[19:15];
      if (_fp_decoder_io_sigs_ren3)
        ex_ra_2 <= io_inst[31:27];
      else if (_fp_decoder_io_sigs_ren2 & _fp_decoder_io_sigs_swap23)
        ex_ra_2 <= io_inst[24:20];
    end
    load_wb <= io_ll_resp_val;
    if (io_ll_resp_val) begin
      load_wb_typeTag <= io_ll_resp_type[1:0] - 2'h2;
      load_wb_data <= io_ll_resp_data;
      load_wb_tag <= io_ll_resp_tag;
    end
    if (ex_reg_valid) begin
      automatic logic _GEN_27 = ex_reg_ctrl_fastpipe | ex_reg_ctrl_fromint;
      mem_reg_inst <= ex_reg_inst;
      mem_ctrl_typeTagOut <= ex_reg_ctrl_typeTagOut;
      mem_ctrl_fromint <= ex_reg_ctrl_fromint;
      mem_ctrl_toint <= ex_reg_ctrl_toint;
      mem_ctrl_fastpipe <= ex_reg_ctrl_fastpipe;
      mem_ctrl_fma <= ex_reg_ctrl_fma;
      mem_ctrl_div <= ex_reg_ctrl_div;
      mem_ctrl_sqrt <= ex_reg_ctrl_sqrt;
      mem_ctrl_wflags <= ex_reg_ctrl_wflags;
      mem_ctrl_vec <= ex_reg_ctrl_vec;
      write_port_busy <=
        mem_wen & (|({ex_reg_ctrl_fma & _GEN_9, _GEN_27} & {_GEN_20, _GEN_19})) | _GEN_27
        & wen[2];
    end
    if (mem_reg_valid)
      wb_ctrl_toint <= mem_ctrl_toint;
    if (divSqrt_inValid)
      divSqrt_waddr <= mem_reg_inst[11:7];
    if (_GEN_22) begin
      wbInfo_0_rd <= mem_reg_inst[11:7];
      wbInfo_0_typeTag <= mem_ctrl_typeTagOut[0];
      wbInfo_0_pipeid <= _GEN_23;
    end
    else if (wen[1]) begin
      wbInfo_0_rd <= wbInfo_1_rd;
      wbInfo_0_typeTag <= wbInfo_1_typeTag;
      wbInfo_0_pipeid <= wbInfo_1_pipeid;
    end
    wbInfo_0_cp <= ~_GEN_22 & (wen[1] ? wbInfo_1_cp : wbInfo_0_cp);
    if (_GEN_24) begin
      wbInfo_1_rd <= mem_reg_inst[11:7];
      wbInfo_1_typeTag <= mem_ctrl_typeTagOut[0];
      wbInfo_1_pipeid <= _GEN_23;
    end
    else if (wen[2]) begin
      wbInfo_1_rd <= wbInfo_2_rd;
      wbInfo_1_typeTag <= wbInfo_2_typeTag;
      wbInfo_1_pipeid <= wbInfo_2_pipeid;
    end
    wbInfo_1_cp <= ~_GEN_24 & (wen[2] ? wbInfo_2_cp : wbInfo_1_cp);
    if (_GEN_25) begin
      wbInfo_2_rd <= mem_reg_inst[11:7];
      wbInfo_2_typeTag <= mem_ctrl_typeTagOut[0];
      wbInfo_2_pipeid <= _GEN_23;
    end
    wbInfo_2_cp <= ~_GEN_25 & wbInfo_2_cp;
    if (mem_ctrl_toint)
      wb_toint_exc <= _fpiu_io_out_bits_exc;
    io_sboard_set_REG <= _GEN_20 | mem_ctrl_div | mem_ctrl_sqrt | mem_ctrl_vec;
  end // always @(posedge)
  FPUDecoder fp_decoder (
    .io_inst            (io_inst),
    .io_sigs_wen        (io_dec_wen),
    .io_sigs_ren1       (_fp_decoder_io_sigs_ren1),
    .io_sigs_ren2       (_fp_decoder_io_sigs_ren2),
    .io_sigs_ren3       (_fp_decoder_io_sigs_ren3),
    .io_sigs_swap12     (_fp_decoder_io_sigs_swap12),
    .io_sigs_swap23     (_fp_decoder_io_sigs_swap23),
    .io_sigs_typeTagIn  (_fp_decoder_io_sigs_typeTagIn),
    .io_sigs_typeTagOut (_fp_decoder_io_sigs_typeTagOut),
    .io_sigs_fromint    (_fp_decoder_io_sigs_fromint),
    .io_sigs_toint      (_fp_decoder_io_sigs_toint),
    .io_sigs_fastpipe   (_fp_decoder_io_sigs_fastpipe),
    .io_sigs_fma        (_fp_decoder_io_sigs_fma),
    .io_sigs_div        (_fp_decoder_io_sigs_div),
    .io_sigs_sqrt       (_fp_decoder_io_sigs_sqrt),
    .io_sigs_wflags     (_fp_decoder_io_sigs_wflags),
    .io_sigs_vec        (_fp_decoder_io_sigs_vec)
  );
  regfile_combMem regfile_ext (
    .R0_addr (ex_ra_0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R1_addr (ex_ra_1),
    .R1_en   (1'h1),
    .R1_clk  (clock),
    .R2_addr (ex_ra_2),
    .R2_en   (1'h1),
    .R2_clk  (clock),
    .W0_addr (load_wb_tag),
    .W0_en   (load_wb),
    .W0_clk  (clock),
    .W0_data ({_GEN[63], _GEN_2[2:1], _GEN_3, _GEN_7}),
    .W1_addr (waddr),
    .W1_en   (_GEN_15),
    .W1_clk  (clock),
    .W1_data (wdata_1),
    .R0_data (_regfile_ext_R0_data),
    .R1_data (_regfile_ext_R1_data),
    .R2_data (_regfile_ext_R2_data)
  );
  FPUFMAPipe_l3_f32 sfma (
    .clock             (clock),
    .reset             (reset),
    .io_in_valid       (_GEN_8 & _GEN_9),
    .io_in_bits_ren3   (ex_reg_ctrl_ren3),
    .io_in_bits_swap23 (ex_reg_ctrl_swap23),
    .io_in_bits_rm     (dfma_io_in_bits_req_rm),
    .io_in_bits_fmaCmd (dfma_io_in_bits_req_fmaCmd),
    .io_in_bits_in1
      ({32'h0,
        {_regfile_ext_R0_data[31], _regfile_ext_R0_data[52], _regfile_ext_R0_data[30:0]}
          | ((&(_regfile_ext_R0_data[64:60])) ? 33'h0 : 33'hE0400000)}),
    .io_in_bits_in2
      ({32'h0,
        {_regfile_ext_R1_data[31], _regfile_ext_R1_data[52], _regfile_ext_R1_data[30:0]}
          | ((&(_regfile_ext_R1_data[64:60])) ? 33'h0 : 33'hE0400000)}),
    .io_in_bits_in3
      ({32'h0,
        {_regfile_ext_R2_data[31], _regfile_ext_R2_data[52], _regfile_ext_R2_data[30:0]}
          | ((&(_regfile_ext_R2_data[64:60])) ? 33'h0 : 33'hE0400000)}),
    .io_out_bits_data  (_sfma_io_out_bits_data),
    .io_out_bits_exc   (_sfma_io_out_bits_exc)
  );
  FPToInt fpiu (
    .clock                 (clock),
    .io_in_valid
      (ex_reg_valid
       & (ex_reg_ctrl_toint | ex_reg_ctrl_div | ex_reg_ctrl_sqrt | ex_reg_ctrl_fastpipe
          & ex_reg_ctrl_wflags)),
    .io_in_bits_ren2       (ex_reg_ctrl_ren2),
    .io_in_bits_typeTagOut (ex_reg_ctrl_typeTagOut),
    .io_in_bits_wflags     (ex_reg_ctrl_wflags),
    .io_in_bits_rm         (dfma_io_in_bits_req_rm),
    .io_in_bits_typ        (ex_reg_inst[21:20]),
    .io_in_bits_fmt        (ex_reg_inst[26:25]),
    .io_in_bits_in1        (fpiu_io_in_bits_req_in1),
    .io_in_bits_in2        (fpiu_io_in_bits_req_in2),
    .io_out_bits_in_rm     (_fpiu_io_out_bits_in_rm),
    .io_out_bits_in_in1    (_fpiu_io_out_bits_in_in1),
    .io_out_bits_in_in2    (_fpiu_io_out_bits_in_in2),
    .io_out_bits_lt        (_fpiu_io_out_bits_lt),
    .io_out_bits_store     (io_store_data),
    .io_out_bits_toint     (io_toint_data),
    .io_out_bits_exc       (_fpiu_io_out_bits_exc)
  );
  IntToFP ifpu (
    .clock                (clock),
    .reset                (reset),
    .io_in_valid          (ex_reg_valid & ex_reg_ctrl_fromint),
    .io_in_bits_typeTagIn (ex_reg_ctrl_typeTagIn),
    .io_in_bits_wflags    (ex_reg_ctrl_wflags),
    .io_in_bits_rm        (dfma_io_in_bits_req_rm),
    .io_in_bits_typ       (ex_reg_inst[21:20]),
    .io_in_bits_in1       (io_fromint_data),
    .io_out_bits_data     (_ifpu_io_out_bits_data),
    .io_out_bits_exc      (_ifpu_io_out_bits_exc)
  );
  FPToFP fpmu (
    .clock                 (clock),
    .reset                 (reset),
    .io_in_valid           (ex_reg_valid & ex_reg_ctrl_fastpipe),
    .io_in_bits_ren2       (ex_reg_ctrl_ren2),
    .io_in_bits_typeTagOut (ex_reg_ctrl_typeTagOut),
    .io_in_bits_wflags     (ex_reg_ctrl_wflags),
    .io_in_bits_rm         (dfma_io_in_bits_req_rm),
    .io_in_bits_in1        (fpiu_io_in_bits_req_in1),
    .io_in_bits_in2        (fpiu_io_in_bits_req_in2),
    .io_lt                 (_fpiu_io_out_bits_lt),
    .io_out_bits_data      (_fpmu_io_out_bits_data),
    .io_out_bits_exc       (_fpmu_io_out_bits_exc)
  );
  FPUFMAPipe_l4_f64 dfma (
    .clock             (clock),
    .reset             (reset),
    .io_in_valid       (_GEN_8 & ex_reg_ctrl_typeTagOut == 2'h1),
    .io_in_bits_ren3   (ex_reg_ctrl_ren3),
    .io_in_bits_swap23 (ex_reg_ctrl_swap23),
    .io_in_bits_rm     (dfma_io_in_bits_req_rm),
    .io_in_bits_fmaCmd (dfma_io_in_bits_req_fmaCmd),
    .io_in_bits_in1    (_regfile_ext_R0_data),
    .io_in_bits_in2    (_regfile_ext_R1_data),
    .io_in_bits_in3    (_regfile_ext_R2_data),
    .io_out_bits_data  (_dfma_io_out_bits_data),
    .io_out_bits_exc   (_dfma_io_out_bits_exc)
  );
  DivSqrtRecFN_small divSqrt (
    .clock             (clock),
    .reset             (divSqrt_killed),
    .io_inValid        (divSqrt_inValid & _GEN_10),
    .io_sqrtOp         (mem_ctrl_sqrt),
    .io_a
      ({_fpiu_io_out_bits_in_in1[64],
        _fpiu_io_out_bits_in_in1[63:61] == 3'h0 | _fpiu_io_out_bits_in_in1[63:61] > 3'h5
          ? {_fpiu_io_out_bits_in_in1[63:61], _GEN_17[5:0]}
          : _GEN_17,
        _fpiu_io_out_bits_in_in1[51:29]}),
    .io_b
      ({_fpiu_io_out_bits_in_in2[64],
        _fpiu_io_out_bits_in_in2[63:61] == 3'h0 | _fpiu_io_out_bits_in_in2[63:61] > 3'h5
          ? {_fpiu_io_out_bits_in_in2[63:61], _GEN_18[5:0]}
          : _GEN_18,
        _fpiu_io_out_bits_in_in2[51:29]}),
    .io_roundingMode   (_fpiu_io_out_bits_in_rm),
    .io_inReady        (_divSqrt_io_inReady),
    .io_outValid_div   (_divSqrt_io_outValid_div),
    .io_outValid_sqrt  (_divSqrt_io_outValid_sqrt),
    .io_out            (_divSqrt_io_out),
    .io_exceptionFlags (_divSqrt_io_exceptionFlags)
  );
  DivSqrtRecFN_small_1 divSqrt_1 (
    .clock             (clock),
    .reset             (divSqrt_killed),
    .io_inValid        (divSqrt_inValid & _GEN_11),
    .io_sqrtOp         (mem_ctrl_sqrt),
    .io_a              (_fpiu_io_out_bits_in_in1),
    .io_b              (_fpiu_io_out_bits_in_in2),
    .io_roundingMode   (_fpiu_io_out_bits_in_rm),
    .io_inReady        (_divSqrt_1_io_inReady),
    .io_outValid_div   (_divSqrt_1_io_outValid_div),
    .io_outValid_sqrt  (_divSqrt_1_io_outValid_sqrt),
    .io_out            (_divSqrt_1_io_out),
    .io_exceptionFlags (_divSqrt_1_io_exceptionFlags)
  );
  assign io_fcsr_flags_valid = wb_toint_valid | divSqrt_wen | wen[0];
  assign io_fcsr_flags_bits =
    (wb_toint_valid ? wb_toint_exc : 5'h0) | (divSqrt_wen ? divSqrt_flags : 5'h0)
    | (wen[0] ? _GEN_14[wbInfo_0_pipeid] : 5'h0);
  assign io_fcsr_rdy =
    ~(ex_reg_valid & ex_reg_ctrl_wflags | mem_reg_valid & mem_ctrl_wflags | wb_toint_valid
      | (|wen) | divSqrt_inFlight);
  assign io_nack_mem = _io_nack_mem_output;
  assign io_illegal_rm =
    io_inst[14:12] == 3'h5 | io_inst[14:12] == 3'h6 | (&(io_inst[14:12]))
    & io_fcsr_rm > 3'h4;
  assign io_dec_ren1 = _fp_decoder_io_sigs_ren1;
  assign io_dec_ren2 = _fp_decoder_io_sigs_ren2;
  assign io_dec_ren3 = _fp_decoder_io_sigs_ren3;
  assign io_sboard_set = wb_reg_valid & io_sboard_set_REG;
  assign io_sboard_clr = divSqrt_wen | wen[0] & (&wbInfo_0_pipeid);
  assign io_sboard_clra = waddr;
endmodule

module HellaCacheArbiter(
  input         clock,
                io_requestor_0_req_valid,
  input  [39:0] io_requestor_0_req_bits_addr,
  input         io_requestor_0_req_bits_dv,
                io_requestor_0_s1_kill,
                io_requestor_1_req_valid,
  input  [39:0] io_requestor_1_req_bits_addr,
  input  [6:0]  io_requestor_1_req_bits_tag,
  input  [4:0]  io_requestor_1_req_bits_cmd,
  input  [1:0]  io_requestor_1_req_bits_size,
  input         io_requestor_1_req_bits_signed,
  input  [1:0]  io_requestor_1_req_bits_dprv,
  input         io_requestor_1_req_bits_dv,
                io_requestor_1_s1_kill,
  input  [63:0] io_requestor_1_s1_data_data,
  input         io_mem_req_ready,
                io_mem_s2_nack,
                io_mem_resp_valid,
  input  [6:0]  io_mem_resp_bits_tag,
  input  [1:0]  io_mem_resp_bits_size,
  input  [63:0] io_mem_resp_bits_data,
  input         io_mem_resp_bits_replay,
                io_mem_resp_bits_has_data,
  input  [63:0] io_mem_resp_bits_data_word_bypass,
  input         io_mem_replay_next,
                io_mem_s2_xcpt_ma_ld,
                io_mem_s2_xcpt_ma_st,
                io_mem_s2_xcpt_pf_ld,
                io_mem_s2_xcpt_pf_st,
                io_mem_s2_xcpt_gf_ld,
                io_mem_s2_xcpt_gf_st,
                io_mem_s2_xcpt_ae_ld,
                io_mem_s2_xcpt_ae_st,
                io_mem_ordered,
                io_mem_perf_release,
                io_mem_perf_grant,
  output        io_requestor_0_req_ready,
                io_requestor_0_s2_nack,
                io_requestor_0_resp_valid,
  output [63:0] io_requestor_0_resp_bits_data,
  output        io_requestor_0_s2_xcpt_ae_ld,
                io_requestor_1_req_ready,
                io_requestor_1_s2_nack,
                io_requestor_1_resp_valid,
  output [6:0]  io_requestor_1_resp_bits_tag,
  output [1:0]  io_requestor_1_resp_bits_size,
  output [63:0] io_requestor_1_resp_bits_data,
  output        io_requestor_1_resp_bits_replay,
                io_requestor_1_resp_bits_has_data,
  output [63:0] io_requestor_1_resp_bits_data_word_bypass,
  output        io_requestor_1_replay_next,
                io_requestor_1_s2_xcpt_ma_ld,
                io_requestor_1_s2_xcpt_ma_st,
                io_requestor_1_s2_xcpt_pf_ld,
                io_requestor_1_s2_xcpt_pf_st,
                io_requestor_1_s2_xcpt_gf_ld,
                io_requestor_1_s2_xcpt_gf_st,
                io_requestor_1_s2_xcpt_ae_ld,
                io_requestor_1_s2_xcpt_ae_st,
                io_requestor_1_ordered,
                io_requestor_1_perf_release,
                io_requestor_1_perf_grant,
                io_mem_req_valid,
  output [39:0] io_mem_req_bits_addr,
  output [6:0]  io_mem_req_bits_tag,
  output [4:0]  io_mem_req_bits_cmd,
  output [1:0]  io_mem_req_bits_size,
  output        io_mem_req_bits_signed,
  output [1:0]  io_mem_req_bits_dprv,
  output        io_mem_req_bits_dv,
                io_mem_req_bits_phys,
                io_mem_s1_kill,
  output [63:0] io_mem_s1_data_data
);

  reg s1_id;
  reg s2_id;
  always @(posedge clock) begin
    s1_id <= ~io_requestor_0_req_valid;
    s2_id <= s1_id;
  end // always @(posedge)
  assign io_requestor_0_req_ready = io_mem_req_ready;
  assign io_requestor_0_s2_nack = io_mem_s2_nack & ~s2_id;
  assign io_requestor_0_resp_valid = io_mem_resp_valid & ~(io_mem_resp_bits_tag[0]);
  assign io_requestor_0_resp_bits_data = io_mem_resp_bits_data;
  assign io_requestor_0_s2_xcpt_ae_ld = io_mem_s2_xcpt_ae_ld;
  assign io_requestor_1_req_ready = io_mem_req_ready & ~io_requestor_0_req_valid;
  assign io_requestor_1_s2_nack = io_mem_s2_nack & s2_id;
  assign io_requestor_1_resp_valid = io_mem_resp_valid & io_mem_resp_bits_tag[0];
  assign io_requestor_1_resp_bits_tag = {1'h0, io_mem_resp_bits_tag[6:1]};
  assign io_requestor_1_resp_bits_size = io_mem_resp_bits_size;
  assign io_requestor_1_resp_bits_data = io_mem_resp_bits_data;
  assign io_requestor_1_resp_bits_replay = io_mem_resp_bits_replay;
  assign io_requestor_1_resp_bits_has_data = io_mem_resp_bits_has_data;
  assign io_requestor_1_resp_bits_data_word_bypass = io_mem_resp_bits_data_word_bypass;
  assign io_requestor_1_replay_next = io_mem_replay_next;
  assign io_requestor_1_s2_xcpt_ma_ld = io_mem_s2_xcpt_ma_ld;
  assign io_requestor_1_s2_xcpt_ma_st = io_mem_s2_xcpt_ma_st;
  assign io_requestor_1_s2_xcpt_pf_ld = io_mem_s2_xcpt_pf_ld;
  assign io_requestor_1_s2_xcpt_pf_st = io_mem_s2_xcpt_pf_st;
  assign io_requestor_1_s2_xcpt_gf_ld = io_mem_s2_xcpt_gf_ld;
  assign io_requestor_1_s2_xcpt_gf_st = io_mem_s2_xcpt_gf_st;
  assign io_requestor_1_s2_xcpt_ae_ld = io_mem_s2_xcpt_ae_ld;
  assign io_requestor_1_s2_xcpt_ae_st = io_mem_s2_xcpt_ae_st;
  assign io_requestor_1_ordered = io_mem_ordered;
  assign io_requestor_1_perf_release = io_mem_perf_release;
  assign io_requestor_1_perf_grant = io_mem_perf_grant;
  assign io_mem_req_valid = io_requestor_0_req_valid | io_requestor_1_req_valid;
  assign io_mem_req_bits_addr =
    io_requestor_0_req_valid
      ? io_requestor_0_req_bits_addr
      : io_requestor_1_req_bits_addr;
  assign io_mem_req_bits_tag =
    io_requestor_0_req_valid ? 7'h0 : {io_requestor_1_req_bits_tag[5:0], 1'h1};
  assign io_mem_req_bits_cmd =
    io_requestor_0_req_valid ? 5'h0 : io_requestor_1_req_bits_cmd;
  assign io_mem_req_bits_size =
    io_requestor_0_req_valid ? 2'h3 : io_requestor_1_req_bits_size;
  assign io_mem_req_bits_signed =
    ~io_requestor_0_req_valid & io_requestor_1_req_bits_signed;
  assign io_mem_req_bits_dprv =
    io_requestor_0_req_valid ? 2'h1 : io_requestor_1_req_bits_dprv;
  assign io_mem_req_bits_dv =
    io_requestor_0_req_valid ? io_requestor_0_req_bits_dv : io_requestor_1_req_bits_dv;
  assign io_mem_req_bits_phys = io_requestor_0_req_valid;
  assign io_mem_s1_kill = s1_id ? io_requestor_1_s1_kill : io_requestor_0_s1_kill;
  assign io_mem_s1_data_data = s1_id ? io_requestor_1_s1_data_data : 64'h0;
endmodule

module Arbiter2_Valid_PTWReq(
  input         io_in_0_valid,
  input  [26:0] io_in_0_bits_bits_addr,
  input         io_in_0_bits_bits_need_gpa,
                io_in_0_bits_bits_vstage1,
                io_in_0_bits_bits_stage2,
                io_in_1_valid,
                io_in_1_bits_valid,
  input  [26:0] io_in_1_bits_bits_addr,
  input         io_in_1_bits_bits_need_gpa,
                io_in_1_bits_bits_vstage1,
                io_in_1_bits_bits_stage2,
                io_out_ready,
  output        io_in_0_ready,
                io_in_1_ready,
                io_out_valid,
                io_out_bits_valid,
  output [26:0] io_out_bits_bits_addr,
  output        io_out_bits_bits_need_gpa,
                io_out_bits_bits_vstage1,
                io_out_bits_bits_stage2,
                io_chosen
);

  assign io_in_0_ready = io_out_ready;
  assign io_in_1_ready = ~io_in_0_valid & io_out_ready;
  assign io_out_valid = io_in_0_valid | io_in_1_valid;
  assign io_out_bits_valid = io_in_0_valid | io_in_1_bits_valid;
  assign io_out_bits_bits_addr =
    io_in_0_valid ? io_in_0_bits_bits_addr : io_in_1_bits_bits_addr;
  assign io_out_bits_bits_need_gpa =
    io_in_0_valid ? io_in_0_bits_bits_need_gpa : io_in_1_bits_bits_need_gpa;
  assign io_out_bits_bits_vstage1 =
    io_in_0_valid ? io_in_0_bits_bits_vstage1 : io_in_1_bits_bits_vstage1;
  assign io_out_bits_bits_stage2 =
    io_in_0_valid ? io_in_0_bits_bits_stage2 : io_in_1_bits_bits_stage2;
  assign io_chosen = ~io_in_0_valid;
endmodule

module OptimizationBarrier_UInt(
  input  [2:0] io_x,
  output [2:0] io_y
);

  assign io_y = io_x;
endmodule

module OptimizationBarrier_PTE(
  input  [43:0] io_x_ppn,
  input         io_x_d,
                io_x_a,
                io_x_g,
                io_x_u,
                io_x_x,
                io_x_w,
                io_x_r,
                io_x_v,
  output [43:0] io_y_ppn,
  output        io_y_d,
                io_y_a,
                io_y_g,
                io_y_u,
                io_y_x,
                io_y_w,
                io_y_r,
                io_y_v
);

  assign io_y_ppn = io_x_ppn;
  assign io_y_d = io_x_d;
  assign io_y_a = io_x_a;
  assign io_y_g = io_x_g;
  assign io_y_u = io_x_u;
  assign io_y_x = io_x_x;
  assign io_y_w = io_x_w;
  assign io_y_r = io_x_r;
  assign io_y_v = io_x_v;
endmodule

module PTW(
  input         clock,
                reset,
                io_requestor_0_req_valid,
  input  [26:0] io_requestor_0_req_bits_bits_addr,
  input         io_requestor_0_req_bits_bits_need_gpa,
                io_requestor_0_req_bits_bits_vstage1,
                io_requestor_0_req_bits_bits_stage2,
                io_requestor_1_req_valid,
                io_requestor_1_req_bits_valid,
  input  [26:0] io_requestor_1_req_bits_bits_addr,
  input         io_requestor_1_req_bits_bits_need_gpa,
                io_requestor_1_req_bits_bits_vstage1,
                io_requestor_1_req_bits_bits_stage2,
                io_mem_req_ready,
                io_mem_s2_nack,
                io_mem_resp_valid,
  input  [63:0] io_mem_resp_bits_data,
  input         io_mem_s2_xcpt_ae_ld,
  input  [3:0]  io_dpath_ptbr_mode,
  input  [43:0] io_dpath_ptbr_ppn,
  input         io_dpath_sfence_valid,
                io_dpath_sfence_bits_rs1,
                io_dpath_status_debug,
  input  [1:0]  io_dpath_status_prv,
  input         io_dpath_status_mxr,
                io_dpath_status_sum,
                io_dpath_pmp_0_cfg_l,
  input  [1:0]  io_dpath_pmp_0_cfg_a,
  input         io_dpath_pmp_0_cfg_x,
                io_dpath_pmp_0_cfg_w,
                io_dpath_pmp_0_cfg_r,
  input  [29:0] io_dpath_pmp_0_addr,
  input  [31:0] io_dpath_pmp_0_mask,
  input         io_dpath_pmp_1_cfg_l,
  input  [1:0]  io_dpath_pmp_1_cfg_a,
  input         io_dpath_pmp_1_cfg_x,
                io_dpath_pmp_1_cfg_w,
                io_dpath_pmp_1_cfg_r,
  input  [29:0] io_dpath_pmp_1_addr,
  input  [31:0] io_dpath_pmp_1_mask,
  input         io_dpath_pmp_2_cfg_l,
  input  [1:0]  io_dpath_pmp_2_cfg_a,
  input         io_dpath_pmp_2_cfg_x,
                io_dpath_pmp_2_cfg_w,
                io_dpath_pmp_2_cfg_r,
  input  [29:0] io_dpath_pmp_2_addr,
  input  [31:0] io_dpath_pmp_2_mask,
  input         io_dpath_pmp_3_cfg_l,
  input  [1:0]  io_dpath_pmp_3_cfg_a,
  input         io_dpath_pmp_3_cfg_x,
                io_dpath_pmp_3_cfg_w,
                io_dpath_pmp_3_cfg_r,
  input  [29:0] io_dpath_pmp_3_addr,
  input  [31:0] io_dpath_pmp_3_mask,
  input         io_dpath_pmp_4_cfg_l,
  input  [1:0]  io_dpath_pmp_4_cfg_a,
  input         io_dpath_pmp_4_cfg_x,
                io_dpath_pmp_4_cfg_w,
                io_dpath_pmp_4_cfg_r,
  input  [29:0] io_dpath_pmp_4_addr,
  input  [31:0] io_dpath_pmp_4_mask,
  input         io_dpath_pmp_5_cfg_l,
  input  [1:0]  io_dpath_pmp_5_cfg_a,
  input         io_dpath_pmp_5_cfg_x,
                io_dpath_pmp_5_cfg_w,
                io_dpath_pmp_5_cfg_r,
  input  [29:0] io_dpath_pmp_5_addr,
  input  [31:0] io_dpath_pmp_5_mask,
  input         io_dpath_pmp_6_cfg_l,
  input  [1:0]  io_dpath_pmp_6_cfg_a,
  input         io_dpath_pmp_6_cfg_x,
                io_dpath_pmp_6_cfg_w,
                io_dpath_pmp_6_cfg_r,
  input  [29:0] io_dpath_pmp_6_addr,
  input  [31:0] io_dpath_pmp_6_mask,
  input         io_dpath_pmp_7_cfg_l,
  input  [1:0]  io_dpath_pmp_7_cfg_a,
  input         io_dpath_pmp_7_cfg_x,
                io_dpath_pmp_7_cfg_w,
                io_dpath_pmp_7_cfg_r,
  input  [29:0] io_dpath_pmp_7_addr,
  input  [31:0] io_dpath_pmp_7_mask,
  input  [63:0] io_dpath_customCSRs_csrs_0_value,
  output        io_requestor_0_req_ready,
                io_requestor_0_resp_valid,
                io_requestor_0_resp_bits_ae_ptw,
                io_requestor_0_resp_bits_ae_final,
                io_requestor_0_resp_bits_pf,
                io_requestor_0_resp_bits_gf,
                io_requestor_0_resp_bits_hr,
                io_requestor_0_resp_bits_hw,
                io_requestor_0_resp_bits_hx,
  output [43:0] io_requestor_0_resp_bits_pte_ppn,
  output        io_requestor_0_resp_bits_pte_d,
                io_requestor_0_resp_bits_pte_a,
                io_requestor_0_resp_bits_pte_g,
                io_requestor_0_resp_bits_pte_u,
                io_requestor_0_resp_bits_pte_x,
                io_requestor_0_resp_bits_pte_w,
                io_requestor_0_resp_bits_pte_r,
                io_requestor_0_resp_bits_pte_v,
  output [1:0]  io_requestor_0_resp_bits_level,
  output        io_requestor_0_resp_bits_homogeneous,
                io_requestor_0_resp_bits_gpa_is_pte,
  output [3:0]  io_requestor_0_ptbr_mode,
  output        io_requestor_0_status_debug,
                io_requestor_0_status_mxr,
                io_requestor_0_status_sum,
                io_requestor_0_pmp_0_cfg_l,
  output [1:0]  io_requestor_0_pmp_0_cfg_a,
  output        io_requestor_0_pmp_0_cfg_x,
                io_requestor_0_pmp_0_cfg_w,
                io_requestor_0_pmp_0_cfg_r,
  output [29:0] io_requestor_0_pmp_0_addr,
  output [31:0] io_requestor_0_pmp_0_mask,
  output        io_requestor_0_pmp_1_cfg_l,
  output [1:0]  io_requestor_0_pmp_1_cfg_a,
  output        io_requestor_0_pmp_1_cfg_x,
                io_requestor_0_pmp_1_cfg_w,
                io_requestor_0_pmp_1_cfg_r,
  output [29:0] io_requestor_0_pmp_1_addr,
  output [31:0] io_requestor_0_pmp_1_mask,
  output        io_requestor_0_pmp_2_cfg_l,
  output [1:0]  io_requestor_0_pmp_2_cfg_a,
  output        io_requestor_0_pmp_2_cfg_x,
                io_requestor_0_pmp_2_cfg_w,
                io_requestor_0_pmp_2_cfg_r,
  output [29:0] io_requestor_0_pmp_2_addr,
  output [31:0] io_requestor_0_pmp_2_mask,
  output        io_requestor_0_pmp_3_cfg_l,
  output [1:0]  io_requestor_0_pmp_3_cfg_a,
  output        io_requestor_0_pmp_3_cfg_x,
                io_requestor_0_pmp_3_cfg_w,
                io_requestor_0_pmp_3_cfg_r,
  output [29:0] io_requestor_0_pmp_3_addr,
  output [31:0] io_requestor_0_pmp_3_mask,
  output        io_requestor_0_pmp_4_cfg_l,
  output [1:0]  io_requestor_0_pmp_4_cfg_a,
  output        io_requestor_0_pmp_4_cfg_x,
                io_requestor_0_pmp_4_cfg_w,
                io_requestor_0_pmp_4_cfg_r,
  output [29:0] io_requestor_0_pmp_4_addr,
  output [31:0] io_requestor_0_pmp_4_mask,
  output        io_requestor_0_pmp_5_cfg_l,
  output [1:0]  io_requestor_0_pmp_5_cfg_a,
  output        io_requestor_0_pmp_5_cfg_x,
                io_requestor_0_pmp_5_cfg_w,
                io_requestor_0_pmp_5_cfg_r,
  output [29:0] io_requestor_0_pmp_5_addr,
  output [31:0] io_requestor_0_pmp_5_mask,
  output        io_requestor_0_pmp_6_cfg_l,
  output [1:0]  io_requestor_0_pmp_6_cfg_a,
  output        io_requestor_0_pmp_6_cfg_x,
                io_requestor_0_pmp_6_cfg_w,
                io_requestor_0_pmp_6_cfg_r,
  output [29:0] io_requestor_0_pmp_6_addr,
  output [31:0] io_requestor_0_pmp_6_mask,
  output        io_requestor_0_pmp_7_cfg_l,
  output [1:0]  io_requestor_0_pmp_7_cfg_a,
  output        io_requestor_0_pmp_7_cfg_x,
                io_requestor_0_pmp_7_cfg_w,
                io_requestor_0_pmp_7_cfg_r,
  output [29:0] io_requestor_0_pmp_7_addr,
  output [31:0] io_requestor_0_pmp_7_mask,
  output        io_requestor_1_req_ready,
                io_requestor_1_resp_valid,
                io_requestor_1_resp_bits_ae_ptw,
                io_requestor_1_resp_bits_ae_final,
                io_requestor_1_resp_bits_pf,
                io_requestor_1_resp_bits_gf,
                io_requestor_1_resp_bits_hr,
                io_requestor_1_resp_bits_hw,
                io_requestor_1_resp_bits_hx,
  output [43:0] io_requestor_1_resp_bits_pte_ppn,
  output        io_requestor_1_resp_bits_pte_d,
                io_requestor_1_resp_bits_pte_a,
                io_requestor_1_resp_bits_pte_g,
                io_requestor_1_resp_bits_pte_u,
                io_requestor_1_resp_bits_pte_x,
                io_requestor_1_resp_bits_pte_w,
                io_requestor_1_resp_bits_pte_r,
                io_requestor_1_resp_bits_pte_v,
  output [1:0]  io_requestor_1_resp_bits_level,
  output        io_requestor_1_resp_bits_homogeneous,
                io_requestor_1_resp_bits_gpa_is_pte,
  output [3:0]  io_requestor_1_ptbr_mode,
  output        io_requestor_1_status_debug,
  output [1:0]  io_requestor_1_status_prv,
  output        io_requestor_1_pmp_0_cfg_l,
  output [1:0]  io_requestor_1_pmp_0_cfg_a,
  output        io_requestor_1_pmp_0_cfg_x,
                io_requestor_1_pmp_0_cfg_w,
                io_requestor_1_pmp_0_cfg_r,
  output [29:0] io_requestor_1_pmp_0_addr,
  output [31:0] io_requestor_1_pmp_0_mask,
  output        io_requestor_1_pmp_1_cfg_l,
  output [1:0]  io_requestor_1_pmp_1_cfg_a,
  output        io_requestor_1_pmp_1_cfg_x,
                io_requestor_1_pmp_1_cfg_w,
                io_requestor_1_pmp_1_cfg_r,
  output [29:0] io_requestor_1_pmp_1_addr,
  output [31:0] io_requestor_1_pmp_1_mask,
  output        io_requestor_1_pmp_2_cfg_l,
  output [1:0]  io_requestor_1_pmp_2_cfg_a,
  output        io_requestor_1_pmp_2_cfg_x,
                io_requestor_1_pmp_2_cfg_w,
                io_requestor_1_pmp_2_cfg_r,
  output [29:0] io_requestor_1_pmp_2_addr,
  output [31:0] io_requestor_1_pmp_2_mask,
  output        io_requestor_1_pmp_3_cfg_l,
  output [1:0]  io_requestor_1_pmp_3_cfg_a,
  output        io_requestor_1_pmp_3_cfg_x,
                io_requestor_1_pmp_3_cfg_w,
                io_requestor_1_pmp_3_cfg_r,
  output [29:0] io_requestor_1_pmp_3_addr,
  output [31:0] io_requestor_1_pmp_3_mask,
  output        io_requestor_1_pmp_4_cfg_l,
  output [1:0]  io_requestor_1_pmp_4_cfg_a,
  output        io_requestor_1_pmp_4_cfg_x,
                io_requestor_1_pmp_4_cfg_w,
                io_requestor_1_pmp_4_cfg_r,
  output [29:0] io_requestor_1_pmp_4_addr,
  output [31:0] io_requestor_1_pmp_4_mask,
  output        io_requestor_1_pmp_5_cfg_l,
  output [1:0]  io_requestor_1_pmp_5_cfg_a,
  output        io_requestor_1_pmp_5_cfg_x,
                io_requestor_1_pmp_5_cfg_w,
                io_requestor_1_pmp_5_cfg_r,
  output [29:0] io_requestor_1_pmp_5_addr,
  output [31:0] io_requestor_1_pmp_5_mask,
  output        io_requestor_1_pmp_6_cfg_l,
  output [1:0]  io_requestor_1_pmp_6_cfg_a,
  output        io_requestor_1_pmp_6_cfg_x,
                io_requestor_1_pmp_6_cfg_w,
                io_requestor_1_pmp_6_cfg_r,
  output [29:0] io_requestor_1_pmp_6_addr,
  output [31:0] io_requestor_1_pmp_6_mask,
  output        io_requestor_1_pmp_7_cfg_l,
  output [1:0]  io_requestor_1_pmp_7_cfg_a,
  output        io_requestor_1_pmp_7_cfg_x,
                io_requestor_1_pmp_7_cfg_w,
                io_requestor_1_pmp_7_cfg_r,
  output [29:0] io_requestor_1_pmp_7_addr,
  output [31:0] io_requestor_1_pmp_7_mask,
  output [63:0] io_requestor_1_customCSRs_csrs_0_value,
  output        io_mem_req_valid,
  output [39:0] io_mem_req_bits_addr,
  output        io_mem_req_bits_dv,
                io_mem_s1_kill
);

  wire        do_switch;
  reg         l2_refill;
  wire [43:0] _r_pte_barrier_io_y_ppn;
  wire        _r_pte_barrier_io_y_d;
  wire        _r_pte_barrier_io_y_a;
  wire        _r_pte_barrier_io_y_g;
  wire        _r_pte_barrier_io_y_u;
  wire        _r_pte_barrier_io_y_x;
  wire        _r_pte_barrier_io_y_w;
  wire        _r_pte_barrier_io_y_r;
  wire        _r_pte_barrier_io_y_v;
  wire [2:0]  _state_barrier_io_y;
  wire        _arb_io_out_valid;
  wire        _arb_io_out_bits_valid;
  wire [26:0] _arb_io_out_bits_bits_addr;
  wire        _arb_io_out_bits_bits_need_gpa;
  wire        _arb_io_out_bits_bits_vstage1;
  wire        _arb_io_out_bits_bits_stage2;
  wire        _arb_io_chosen;
  reg  [2:0]  state;
  wire        _GEN = ~(|state) & ~l2_refill;
  reg         resp_valid_0;
  reg         resp_valid_1;
  reg         invalidated;
  reg  [1:0]  count;
  reg         resp_ae_ptw;
  reg         resp_ae_final;
  reg         resp_pf;
  reg         resp_gf;
  reg         resp_hr;
  reg         resp_hw;
  reg         resp_hx;
  reg  [26:0] r_req_addr;
  reg         r_req_need_gpa;
  reg         r_req_vstage1;
  reg         r_req_stage2;
  reg         r_req_dest;
  reg  [43:0] r_pte_ppn;
  reg         r_pte_d;
  reg         r_pte_a;
  reg         r_pte_g;
  reg         r_pte_u;
  reg         r_pte_x;
  reg         r_pte_w;
  reg         r_pte_r;
  reg         r_pte_v;
  reg  [43:0] r_hgatp_ppn;
  reg  [1:0]  aux_count;
  reg  [43:0] aux_pte_ppn;
  reg         aux_pte_d;
  reg         aux_pte_a;
  reg         aux_pte_g;
  reg         aux_pte_u;
  reg         aux_pte_x;
  reg         aux_pte_w;
  reg         aux_pte_r;
  reg         aux_pte_v;
  reg         stage2;
  reg         stage2_final;
  wire        do_both_stages = r_req_vstage1 & r_req_stage2;
  wire        _GEN_0 = count < aux_count;
  wire [1:0]  max_count = _GEN_0 ? aux_count : count;
  wire [26:0] _GEN_1 = r_req_vstage1 & stage2 ? aux_pte_ppn[26:0] : r_req_addr;
  reg         mem_resp_valid;
  reg  [63:0] mem_resp_data;
  wire        _GEN_2 = do_both_stages & ~stage2;
  wire [26:0] _GEN_3 = _GEN_2 ? mem_resp_data[36:10] : {7'h0, mem_resp_data[29:10]};
  wire        aux_pte_pte_v =
    ~((mem_resp_data[1] | mem_resp_data[2] | mem_resp_data[3])
      & (~(count[1]) & (|(mem_resp_data[18:10])) | count == 2'h0
         & (|(mem_resp_data[27:19])))) & mem_resp_data[0];
  wire        invalid_paddr =
    _GEN_2 ? (|(mem_resp_data[53:37])) : (|(mem_resp_data[53:30]));
  wire        invalid_gpa = _GEN_2 & (|(mem_resp_data[53:39]));
  wire        _GEN_4 =
    aux_pte_pte_v & ~(mem_resp_data[1]) & ~(mem_resp_data[2]) & ~(mem_resp_data[3])
    & ~(mem_resp_data[7]) & ~(mem_resp_data[6]) & ~(mem_resp_data[4])
    & ~(|(mem_resp_data[63:54]));
  wire        traverse = _GEN_4 & ~invalid_paddr & ~invalid_gpa & ~(count[1]);
  wire        _GEN_5 = count == 2'h1;
  wire        _GEN_6 = count == 2'h2;
  wire        _GEN_7 = (&count) | _GEN_6;
  wire [8:0]  pte_addr_vpn_idx =
    _GEN_7 ? _GEN_1[8:0] : _GEN_5 ? _GEN_1[17:9] : _GEN_1[26:18];
  reg  [6:0]  state_reg;
  reg  [7:0]  valid;
  reg  [31:0] tags_0;
  reg  [31:0] tags_1;
  reg  [31:0] tags_2;
  reg  [31:0] tags_3;
  reg  [31:0] tags_4;
  reg  [31:0] tags_5;
  reg  [31:0] tags_6;
  reg  [31:0] tags_7;
  reg  [19:0] data_0;
  reg  [19:0] data_1;
  reg  [19:0] data_2;
  reg  [19:0] data_3;
  reg  [19:0] data_4;
  reg  [19:0] data_5;
  reg  [19:0] data_6;
  reg  [19:0] data_7;
  wire        can_hit = ~(count[1]) & (r_req_vstage1 ? stage2 : ~r_req_stage2);
  wire [32:0] tag = {r_req_vstage1, r_pte_ppn[19:0], pte_addr_vpn_idx, 3'h0};
  wire [7:0]  hits =
    {{1'h0, tags_7} == tag,
     {1'h0, tags_6} == tag,
     {1'h0, tags_5} == tag,
     {1'h0, tags_4} == tag,
     {1'h0, tags_3} == tag,
     {1'h0, tags_2} == tag,
     {1'h0, tags_1} == tag,
     {1'h0, tags_0} == tag} & valid;
  wire        pte_cache_hit = (|hits) & can_hit;
  wire        _GEN_8 = state == 3'h1;
  wire        _GEN_9 = pte_cache_hit & _GEN_8;
  reg  [6:0]  state_reg_1;
  reg  [7:0]  valid_1;
  reg  [31:0] tags_1_0;
  reg  [31:0] tags_1_1;
  reg  [31:0] tags_1_2;
  reg  [31:0] tags_1_3;
  reg  [31:0] tags_1_4;
  reg  [31:0] tags_1_5;
  reg  [31:0] tags_1_6;
  reg  [31:0] tags_1_7;
  reg  [19:0] data_1_0;
  reg  [19:0] data_1_1;
  reg  [19:0] data_1_2;
  reg  [19:0] data_1_3;
  reg  [19:0] data_1_4;
  reg  [19:0] data_1_5;
  reg  [19:0] data_1_6;
  reg  [19:0] data_1_7;
  wire [55:0] _GEN_10 = {r_pte_ppn, 12'h0};
  wire        _GEN_11 = {r_pte_ppn[43:16], ~(r_pte_ppn[15:14])} == 30'h0;
  wire        _GEN_12 = {r_pte_ppn[43:19], ~(r_pte_ppn[18:17])} == 27'h0;
  wire [31:0] _GEN_13 = {r_pte_ppn[19:0], 12'h0};
  wire        _GEN_14 = {r_pte_ppn[43:20], r_pte_ppn[19:16] ^ 4'h8} == 28'h0;
  wire [31:0] _GEN_15 = {io_dpath_pmp_0_addr, 2'h0};
  wire [19:0] _GEN_16 = r_pte_ppn[19:0] ^ io_dpath_pmp_0_addr[29:10];
  wire        _GEN_17 = _GEN_10 < {24'h0, io_dpath_pmp_0_addr, 2'h0};
  wire [31:0] _GEN_18 = _GEN_5 ? 32'hFFE00000 : 32'hC0000000;
  wire [31:0] pmpHomogeneous_pgMask = _GEN_7 ? 32'hFFFFF000 : _GEN_18;
  wire [31:0] _GEN_19 = {io_dpath_pmp_1_addr, 2'h0};
  wire [19:0] _GEN_20 = r_pte_ppn[19:0] ^ io_dpath_pmp_1_addr[29:10];
  wire        _GEN_21 = _GEN_10 < {24'h0, io_dpath_pmp_1_addr, 2'h0};
  wire [31:0] pmpHomogeneous_pgMask_1 = _GEN_7 ? 32'hFFFFF000 : _GEN_18;
  wire [31:0] _GEN_22 = _GEN_13 & pmpHomogeneous_pgMask_1;
  wire [31:0] _GEN_23 = {io_dpath_pmp_2_addr, 2'h0};
  wire [19:0] _GEN_24 = r_pte_ppn[19:0] ^ io_dpath_pmp_2_addr[29:10];
  wire        _GEN_25 = _GEN_10 < {24'h0, io_dpath_pmp_2_addr, 2'h0};
  wire [31:0] pmpHomogeneous_pgMask_2 = _GEN_7 ? 32'hFFFFF000 : _GEN_18;
  wire [31:0] _GEN_26 = _GEN_13 & pmpHomogeneous_pgMask_2;
  wire [31:0] _GEN_27 = {io_dpath_pmp_3_addr, 2'h0};
  wire [19:0] _GEN_28 = r_pte_ppn[19:0] ^ io_dpath_pmp_3_addr[29:10];
  wire        _GEN_29 = _GEN_10 < {24'h0, io_dpath_pmp_3_addr, 2'h0};
  wire [31:0] pmpHomogeneous_pgMask_3 = _GEN_7 ? 32'hFFFFF000 : _GEN_18;
  wire [31:0] _GEN_30 = _GEN_13 & pmpHomogeneous_pgMask_3;
  wire [31:0] _GEN_31 = {io_dpath_pmp_4_addr, 2'h0};
  wire [19:0] _GEN_32 = r_pte_ppn[19:0] ^ io_dpath_pmp_4_addr[29:10];
  wire        _GEN_33 = _GEN_10 < {24'h0, io_dpath_pmp_4_addr, 2'h0};
  wire [31:0] pmpHomogeneous_pgMask_4 = _GEN_7 ? 32'hFFFFF000 : _GEN_18;
  wire [31:0] _GEN_34 = _GEN_13 & pmpHomogeneous_pgMask_4;
  wire [31:0] _GEN_35 = {io_dpath_pmp_5_addr, 2'h0};
  wire [19:0] _GEN_36 = r_pte_ppn[19:0] ^ io_dpath_pmp_5_addr[29:10];
  wire        _GEN_37 = _GEN_10 < {24'h0, io_dpath_pmp_5_addr, 2'h0};
  wire [31:0] pmpHomogeneous_pgMask_5 = _GEN_7 ? 32'hFFFFF000 : _GEN_18;
  wire [31:0] _GEN_38 = _GEN_13 & pmpHomogeneous_pgMask_5;
  wire [31:0] _GEN_39 = {io_dpath_pmp_6_addr, 2'h0};
  wire [19:0] _GEN_40 = r_pte_ppn[19:0] ^ io_dpath_pmp_6_addr[29:10];
  wire        _GEN_41 = _GEN_10 < {24'h0, io_dpath_pmp_6_addr, 2'h0};
  wire [31:0] pmpHomogeneous_pgMask_6 = _GEN_7 ? 32'hFFFFF000 : _GEN_18;
  wire [31:0] _GEN_42 = _GEN_13 & pmpHomogeneous_pgMask_6;
  wire [19:0] _GEN_43 = r_pte_ppn[19:0] ^ io_dpath_pmp_7_addr[29:10];
  wire [31:0] pmpHomogeneous_pgMask_7 = _GEN_7 ? 32'hFFFFF000 : _GEN_18;
  wire [31:0] _GEN_44 = _GEN_13 & pmpHomogeneous_pgMask_7;
  wire        homogeneous =
    (_GEN_7
       ? r_pte_ppn == 44'h0 | {r_pte_ppn[43:2], ~(r_pte_ppn[1:0])} == 44'h0
         | {r_pte_ppn[43:5], ~(r_pte_ppn[4])} == 40'h0
         | {r_pte_ppn[43:14], r_pte_ppn[13:4] ^ 10'h200} == 40'h0 | _GEN_11 | _GEN_12
         | _GEN_14
       : _GEN_5 & (_GEN_11 | _GEN_12 | _GEN_14))
    & (io_dpath_pmp_0_cfg_a[1]
         ? (_GEN_7
              ? io_dpath_pmp_0_mask[11]
              : _GEN_5 ? io_dpath_pmp_0_mask[20] : io_dpath_pmp_0_mask[29])
           | (_GEN_7
                ? (|{r_pte_ppn[43:20], _GEN_16})
                : _GEN_5
                    ? (|{r_pte_ppn[43:20], _GEN_16[19:9]})
                    : (|{r_pte_ppn[43:20], _GEN_16[19:18]}))
         : ~(io_dpath_pmp_0_cfg_a[0]) | ~_GEN_17
           | (_GEN_13 & pmpHomogeneous_pgMask) < (_GEN_15 & pmpHomogeneous_pgMask))
    & (io_dpath_pmp_1_cfg_a[1]
         ? (_GEN_7
              ? io_dpath_pmp_1_mask[11]
              : _GEN_5 ? io_dpath_pmp_1_mask[20] : io_dpath_pmp_1_mask[29])
           | (_GEN_7
                ? (|{r_pte_ppn[43:20], _GEN_20})
                : _GEN_5
                    ? (|{r_pte_ppn[43:20], _GEN_20[19:9]})
                    : (|{r_pte_ppn[43:20], _GEN_20[19:18]}))
         : ~(io_dpath_pmp_1_cfg_a[0]) | _GEN_22 < (_GEN_15 & pmpHomogeneous_pgMask_1)
           | ~_GEN_21 | ~_GEN_17 & _GEN_22 < (_GEN_19 & pmpHomogeneous_pgMask_1))
    & (io_dpath_pmp_2_cfg_a[1]
         ? (_GEN_7
              ? io_dpath_pmp_2_mask[11]
              : _GEN_5 ? io_dpath_pmp_2_mask[20] : io_dpath_pmp_2_mask[29])
           | (_GEN_7
                ? (|{r_pte_ppn[43:20], _GEN_24})
                : _GEN_5
                    ? (|{r_pte_ppn[43:20], _GEN_24[19:9]})
                    : (|{r_pte_ppn[43:20], _GEN_24[19:18]}))
         : ~(io_dpath_pmp_2_cfg_a[0]) | _GEN_26 < (_GEN_19 & pmpHomogeneous_pgMask_2)
           | ~_GEN_25 | ~_GEN_21 & _GEN_26 < (_GEN_23 & pmpHomogeneous_pgMask_2))
    & (io_dpath_pmp_3_cfg_a[1]
         ? (_GEN_7
              ? io_dpath_pmp_3_mask[11]
              : _GEN_5 ? io_dpath_pmp_3_mask[20] : io_dpath_pmp_3_mask[29])
           | (_GEN_7
                ? (|{r_pte_ppn[43:20], _GEN_28})
                : _GEN_5
                    ? (|{r_pte_ppn[43:20], _GEN_28[19:9]})
                    : (|{r_pte_ppn[43:20], _GEN_28[19:18]}))
         : ~(io_dpath_pmp_3_cfg_a[0]) | _GEN_30 < (_GEN_23 & pmpHomogeneous_pgMask_3)
           | ~_GEN_29 | ~_GEN_25 & _GEN_30 < (_GEN_27 & pmpHomogeneous_pgMask_3))
    & (io_dpath_pmp_4_cfg_a[1]
         ? (_GEN_7
              ? io_dpath_pmp_4_mask[11]
              : _GEN_5 ? io_dpath_pmp_4_mask[20] : io_dpath_pmp_4_mask[29])
           | (_GEN_7
                ? (|{r_pte_ppn[43:20], _GEN_32})
                : _GEN_5
                    ? (|{r_pte_ppn[43:20], _GEN_32[19:9]})
                    : (|{r_pte_ppn[43:20], _GEN_32[19:18]}))
         : ~(io_dpath_pmp_4_cfg_a[0]) | _GEN_34 < (_GEN_27 & pmpHomogeneous_pgMask_4)
           | ~_GEN_33 | ~_GEN_29 & _GEN_34 < (_GEN_31 & pmpHomogeneous_pgMask_4))
    & (io_dpath_pmp_5_cfg_a[1]
         ? (_GEN_7
              ? io_dpath_pmp_5_mask[11]
              : _GEN_5 ? io_dpath_pmp_5_mask[20] : io_dpath_pmp_5_mask[29])
           | (_GEN_7
                ? (|{r_pte_ppn[43:20], _GEN_36})
                : _GEN_5
                    ? (|{r_pte_ppn[43:20], _GEN_36[19:9]})
                    : (|{r_pte_ppn[43:20], _GEN_36[19:18]}))
         : ~(io_dpath_pmp_5_cfg_a[0]) | _GEN_38 < (_GEN_31 & pmpHomogeneous_pgMask_5)
           | ~_GEN_37 | ~_GEN_33 & _GEN_38 < (_GEN_35 & pmpHomogeneous_pgMask_5))
    & (io_dpath_pmp_6_cfg_a[1]
         ? (_GEN_7
              ? io_dpath_pmp_6_mask[11]
              : _GEN_5 ? io_dpath_pmp_6_mask[20] : io_dpath_pmp_6_mask[29])
           | (_GEN_7
                ? (|{r_pte_ppn[43:20], _GEN_40})
                : _GEN_5
                    ? (|{r_pte_ppn[43:20], _GEN_40[19:9]})
                    : (|{r_pte_ppn[43:20], _GEN_40[19:18]}))
         : ~(io_dpath_pmp_6_cfg_a[0]) | _GEN_42 < (_GEN_35 & pmpHomogeneous_pgMask_6)
           | ~_GEN_41 | ~_GEN_37 & _GEN_42 < (_GEN_39 & pmpHomogeneous_pgMask_6))
    & (io_dpath_pmp_7_cfg_a[1]
         ? (_GEN_7
              ? io_dpath_pmp_7_mask[11]
              : _GEN_5 ? io_dpath_pmp_7_mask[20] : io_dpath_pmp_7_mask[29])
           | (_GEN_7
                ? (|{r_pte_ppn[43:20], _GEN_43})
                : _GEN_5
                    ? (|{r_pte_ppn[43:20], _GEN_43[19:9]})
                    : (|{r_pte_ppn[43:20], _GEN_43[19:18]}))
         : ~(io_dpath_pmp_7_cfg_a[0]) | _GEN_44 < (_GEN_39 & pmpHomogeneous_pgMask_7)
           | _GEN_10 >= {24'h0, io_dpath_pmp_7_addr, 2'h0} | ~_GEN_41
           & _GEN_44 < ({io_dpath_pmp_7_addr, 2'h0} & pmpHomogeneous_pgMask_7));
  wire        _GEN_45 = _GEN & _arb_io_out_valid;
  wire        _GEN_46 = ~(|state) & _GEN_45;
  wire        _GEN_47 = state == 3'h2;
  wire        _GEN_48 = state == 3'h4;
  wire        _GEN_49 = (&state) & ~homogeneous;
  wire [1:0]  _GEN_50 = stage2_final ? max_count : 2'h2;
  wire        _GEN_51 = ~traverse & r_req_vstage1 & stage2;
  wire        _GEN_52 = do_switch | ~mem_resp_valid;
  wire        _GEN_53 =
    aux_pte_pte_v & (mem_resp_data[1] | mem_resp_data[3] & ~(mem_resp_data[2]))
    & mem_resp_data[6];
  wire        _GEN_54 = _GEN_53 & mem_resp_data[1] & mem_resp_data[4];
  wire        gf =
    stage2 & ~stage2_final & ~_GEN_54 | _GEN_53 & ~(|(mem_resp_data[63:54]))
    & invalid_gpa;
  wire        ae = aux_pte_pte_v & invalid_paddr;
  wire        pf = aux_pte_pte_v & (|(mem_resp_data[63:54]));
  wire        success = aux_pte_pte_v & ~ae & ~pf & ~gf;
  wire        _GEN_55 = do_both_stages & ~stage2_final & success;
  assign do_switch = mem_resp_valid & (traverse ? _GEN_2 : _GEN_55 & ~stage2);
  wire        _GEN_56 = traverse | _GEN_55;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (_GEN_46 & ~reset
          & ~(~_arb_io_out_bits_bits_need_gpa | _arb_io_out_bits_bits_stage2)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at PTW.scala:610 assert(!arb.io.out.bits.bits.need_gpa || arb.io.out.bits.bits.stage2)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (mem_resp_valid & ~reset & state != 3'h5) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at PTW.scala:692 assert(state === s_wait3)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_mem_s2_nack & ~reset & ~_GEN_48) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at PTW.scala:736 assert(state === s_wait2)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    automatic logic        _GEN_57 = mem_resp_valid & traverse;
    automatic logic        _GEN_58;
    automatic logic [6:0]  _GEN_59 = ~(valid[6:0]);
    automatic logic [2:0]  r;
    automatic logic [31:0] _GEN_60;
    automatic logic        _GEN_61;
    automatic logic [6:0]  _GEN_62 = ~(valid_1[6:0]);
    automatic logic [2:0]  r_1;
    automatic logic [1:0]  _GEN_63;
    automatic logic        _GEN_64;
    automatic logic        _GEN_65;
    _GEN_58 = _GEN_57 & can_hit & ~(|hits) & ~invalidated;
    r =
      (&valid)
        ? {state_reg[6],
           state_reg[6]
             ? {state_reg[5], state_reg[5] ? state_reg[4] : state_reg[3]}
             : {state_reg[2], state_reg[2] ? state_reg[1] : state_reg[0]}}
        : _GEN_59[0]
            ? 3'h0
            : _GEN_59[1]
                ? 3'h1
                : _GEN_59[2]
                    ? 3'h2
                    : _GEN_59[3]
                        ? 3'h3
                        : _GEN_59[4] ? 3'h4 : _GEN_59[5] ? 3'h5 : {2'h3, ~(_GEN_59[6])};
    _GEN_60 = {r_pte_ppn[19:0], pte_addr_vpn_idx, 3'h0};
    _GEN_61 = _GEN_57 & _GEN_2 & ~stage2_final & ~invalidated;
    r_1 =
      (&valid_1)
        ? {state_reg_1[6],
           state_reg_1[6]
             ? {state_reg_1[5], state_reg_1[5] ? state_reg_1[4] : state_reg_1[3]}
             : {state_reg_1[2], state_reg_1[2] ? state_reg_1[1] : state_reg_1[0]}}
        : _GEN_62[0]
            ? 3'h0
            : _GEN_62[1]
                ? 3'h1
                : _GEN_62[2]
                    ? 3'h2
                    : _GEN_62[3]
                        ? 3'h3
                        : _GEN_62[4] ? 3'h4 : _GEN_62[5] ? 3'h5 : {2'h3, ~(_GEN_62[6])};
    _GEN_63 = count + 2'h1;
    _GEN_64 = _GEN_53 & mem_resp_data[2] & mem_resp_data[7] & mem_resp_data[4];
    _GEN_65 = _GEN_53 & mem_resp_data[3] & mem_resp_data[4];
    if (reset) begin
      state <= 3'h0;
      state_reg <= 7'h0;
      valid <= 8'h0;
      state_reg_1 <= 7'h0;
      valid_1 <= 8'h0;
    end
    else begin
      state <= _state_barrier_io_y;
      if (_GEN_9) begin
        automatic logic [2:0] _GEN_66 = hits[7:5] | hits[3:1];
        automatic logic       _GEN_67 = _GEN_66[2] | _GEN_66[0];
        state_reg <=
          {~(|(hits[7:4])),
           (|(hits[7:4]))
             ? {~(|(_GEN_66[2:1])),
                (|(_GEN_66[2:1])) ? ~_GEN_67 : state_reg[4],
                (|(_GEN_66[2:1])) ? state_reg[3] : ~_GEN_67}
             : state_reg[5:3],
           (|(hits[7:4]))
             ? state_reg[2:0]
             : {~(|(_GEN_66[2:1])),
                (|(_GEN_66[2:1])) ? ~_GEN_67 : state_reg[1],
                (|(_GEN_66[2:1])) ? state_reg[0] : ~_GEN_67}};
      end
      else if (_GEN_58)
        state_reg <=
          {~(r[2]),
           r[2]
             ? {~(r[1]), r[1] ? ~(r[0]) : state_reg[4], r[1] ? state_reg[3] : ~(r[0])}
             : state_reg[5:3],
           r[2]
             ? state_reg[2:0]
             : {~(r[1]), r[1] ? ~(r[0]) : state_reg[1], r[1] ? state_reg[0] : ~(r[0])}};
      if (io_dpath_sfence_valid & ~io_dpath_sfence_bits_rs1) begin
        valid <= 8'h0;
        valid_1 <= 8'h0;
      end
      else begin
        valid <= {8{_GEN_58}} & 8'h1 << r | valid;
        valid_1 <= {8{_GEN_61}} & 8'h1 << r_1 | valid_1;
      end
      if (_GEN_61)
        state_reg_1 <=
          {~(r_1[2]),
           r_1[2]
             ? {~(r_1[1]),
                r_1[1] ? ~(r_1[0]) : state_reg_1[4],
                r_1[1] ? state_reg_1[3] : ~(r_1[0])}
             : state_reg_1[5:3],
           r_1[2]
             ? state_reg_1[2:0]
             : {~(r_1[1]),
                r_1[1] ? ~(r_1[0]) : state_reg_1[1],
                r_1[1] ? state_reg_1[0] : ~(r_1[0])}};
    end
    resp_valid_0 <=
      mem_resp_valid & ~_GEN_56 & ~r_req_dest | (|state)
      & (_GEN_8
           ? resp_gf & ~r_req_dest
           : ~_GEN_47
             & (_GEN_48 ? io_mem_s2_xcpt_ae_ld & ~r_req_dest : (&state) & ~r_req_dest));
    resp_valid_1 <=
      mem_resp_valid & ~_GEN_56 & r_req_dest | (|state)
      & (_GEN_8
           ? resp_gf & r_req_dest
           : ~_GEN_47
             & (_GEN_48 ? io_mem_s2_xcpt_ae_ld & r_req_dest : (&state) & r_req_dest));
    invalidated <= io_dpath_sfence_valid | invalidated & (|state);
    if (do_switch) begin
      count <= 2'h0;
      if (traverse)
        aux_count <= _GEN_63;
      else
        aux_count <= count;
      aux_pte_ppn <=
        {17'h0,
         traverse | _GEN_7
           ? _GEN_3
           : _GEN_5
               ? {_GEN_3[26:9], r_req_addr[8:0]}
               : {_GEN_3[26:18], r_req_addr[17:0]}};
      aux_pte_d <= mem_resp_data[7];
      aux_pte_a <= mem_resp_data[6];
      aux_pte_g <= mem_resp_data[5];
      aux_pte_u <= mem_resp_data[4];
      aux_pte_x <= mem_resp_data[3];
      aux_pte_w <= mem_resp_data[2];
      aux_pte_r <= mem_resp_data[1];
      aux_pte_v <= aux_pte_pte_v;
    end
    else begin
      automatic logic _GEN_68;
      _GEN_68 = _GEN_47 | _GEN_48 | ~_GEN_49;
      if (mem_resp_valid) begin
        if (traverse)
          count <= _GEN_63;
        else if (_GEN_55) begin
          if (stage2)
            count <= aux_count;
          else if (|state) begin
            if (_GEN_8) begin
              if (pte_cache_hit)
                count <= _GEN_63;
            end
            else if (_GEN_68) begin
            end
            else
              count <= 2'h2;
          end
          else if (_GEN_45)
            count <= 2'h0;
        end
        else if (_GEN_0)
          count <= aux_count;
      end
      else if (|state) begin
        if (_GEN_8) begin
          if (pte_cache_hit)
            count <= _GEN_63;
        end
        else if (_GEN_68) begin
        end
        else
          count <= 2'h2;
      end
      else if (_GEN_45)
        count <= 2'h0;
      if ((|state) | ~_GEN_45) begin
      end
      else begin
        aux_count <= 2'h0;
        if (_arb_io_out_bits_bits_vstage1)
          aux_pte_ppn <= 44'h0;
        else
          aux_pte_ppn <= {17'h0, _arb_io_out_bits_bits_addr};
      end
    end
    if (~mem_resp_valid | _GEN_56) begin
      if (|state)
        resp_ae_ptw <= ~(_GEN_8 | _GEN_47) & _GEN_48 & io_mem_s2_xcpt_ae_ld | resp_ae_ptw;
      else
        resp_ae_ptw <= ~_GEN_45 & resp_ae_ptw;
      resp_ae_final <= ~_GEN_46 & resp_ae_final;
      resp_pf <= ~_GEN_46 & resp_pf;
      if (_GEN_46)
        resp_gf <= 1'h0;
      resp_hr <= _GEN_46 | resp_hr;
      resp_hw <= _GEN_46 | resp_hw;
      resp_hx <= _GEN_46 | resp_hx;
    end
    else begin
      automatic logic _GEN_69 = ~pf & ~gf;
      resp_ae_ptw <= ae & ~(count[1]) & _GEN_4;
      resp_ae_final <= ae & _GEN_53;
      resp_pf <= pf & ~stage2;
      resp_gf <= gf | pf & stage2;
      resp_hr <= ~stage2 | _GEN_69 & _GEN_54;
      resp_hw <= ~stage2 | _GEN_69 & _GEN_64;
      resp_hx <= ~stage2 | _GEN_69 & _GEN_65;
    end
    if (_GEN_46) begin
      r_req_addr <= _arb_io_out_bits_bits_addr;
      r_req_need_gpa <= _arb_io_out_bits_bits_need_gpa;
      r_req_vstage1 <= _arb_io_out_bits_bits_vstage1;
      r_req_stage2 <= _arb_io_out_bits_bits_stage2;
      r_req_dest <= _arb_io_chosen;
      r_hgatp_ppn <= 44'h0;
    end
    r_pte_ppn <= _r_pte_barrier_io_y_ppn;
    r_pte_d <= _r_pte_barrier_io_y_d;
    r_pte_a <= _r_pte_barrier_io_y_a;
    r_pte_g <= _r_pte_barrier_io_y_g;
    r_pte_u <= _r_pte_barrier_io_y_u;
    r_pte_x <= _r_pte_barrier_io_y_x;
    r_pte_w <= _r_pte_barrier_io_y_w;
    r_pte_r <= _r_pte_barrier_io_y_r;
    r_pte_v <= _r_pte_barrier_io_y_v;
    stage2 <=
      do_switch | (~mem_resp_valid | traverse | ~(_GEN_55 & stage2))
      & (_GEN_46 ? _arb_io_out_bits_bits_stage2 : stage2);
    stage2_final <=
      mem_resp_valid & ~traverse & _GEN_55 & ~stage2
      | (_GEN_46
           ? _arb_io_out_bits_bits_stage2 & ~_arb_io_out_bits_bits_vstage1
           : stage2_final);
    mem_resp_valid <= io_mem_resp_valid;
    mem_resp_data <= io_mem_resp_bits_data;
    if (_GEN_58 & r == 3'h0) begin
      tags_0 <= _GEN_60;
      data_0 <= _GEN_3[19:0];
    end
    if (_GEN_58 & r == 3'h1) begin
      tags_1 <= _GEN_60;
      data_1 <= _GEN_3[19:0];
    end
    if (_GEN_58 & r == 3'h2) begin
      tags_2 <= _GEN_60;
      data_2 <= _GEN_3[19:0];
    end
    if (_GEN_58 & r == 3'h3) begin
      tags_3 <= _GEN_60;
      data_3 <= _GEN_3[19:0];
    end
    if (_GEN_58 & r == 3'h4) begin
      tags_4 <= _GEN_60;
      data_4 <= _GEN_3[19:0];
    end
    if (_GEN_58 & r == 3'h5) begin
      tags_5 <= _GEN_60;
      data_5 <= _GEN_3[19:0];
    end
    if (_GEN_58 & r == 3'h6) begin
      tags_6 <= _GEN_60;
      data_6 <= _GEN_3[19:0];
    end
    if (_GEN_58 & (&r)) begin
      tags_7 <= _GEN_60;
      data_7 <= _GEN_3[19:0];
    end
    if (_GEN_61 & r_1 == 3'h0) begin
      tags_1_0 <= 32'h0;
      data_1_0 <= _GEN_3[19:0];
    end
    if (_GEN_61 & r_1 == 3'h1) begin
      tags_1_1 <= 32'h0;
      data_1_1 <= _GEN_3[19:0];
    end
    if (_GEN_61 & r_1 == 3'h2) begin
      tags_1_2 <= 32'h0;
      data_1_2 <= _GEN_3[19:0];
    end
    if (_GEN_61 & r_1 == 3'h3) begin
      tags_1_3 <= 32'h0;
      data_1_3 <= _GEN_3[19:0];
    end
    if (_GEN_61 & r_1 == 3'h4) begin
      tags_1_4 <= 32'h0;
      data_1_4 <= _GEN_3[19:0];
    end
    if (_GEN_61 & r_1 == 3'h5) begin
      tags_1_5 <= 32'h0;
      data_1_5 <= _GEN_3[19:0];
    end
    if (_GEN_61 & r_1 == 3'h6) begin
      tags_1_6 <= 32'h0;
      data_1_6 <= _GEN_3[19:0];
    end
    if (_GEN_61 & (&r_1)) begin
      tags_1_7 <= 32'h0;
      data_1_7 <= _GEN_3[19:0];
    end
    l2_refill <=
      mem_resp_valid & ~_GEN_56 & success & _GEN_6 & ~r_req_need_gpa
      & (~r_req_vstage1 & ~r_req_stage2 | do_both_stages & aux_count == 2'h2 & _GEN_64
         & _GEN_65);
  end // always @(posedge)
  Arbiter2_Valid_PTWReq arb (
    .io_in_0_valid              (io_requestor_0_req_valid),
    .io_in_0_bits_bits_addr     (io_requestor_0_req_bits_bits_addr),
    .io_in_0_bits_bits_need_gpa (io_requestor_0_req_bits_bits_need_gpa),
    .io_in_0_bits_bits_vstage1  (io_requestor_0_req_bits_bits_vstage1),
    .io_in_0_bits_bits_stage2   (io_requestor_0_req_bits_bits_stage2),
    .io_in_1_valid              (io_requestor_1_req_valid),
    .io_in_1_bits_valid         (io_requestor_1_req_bits_valid),
    .io_in_1_bits_bits_addr     (io_requestor_1_req_bits_bits_addr),
    .io_in_1_bits_bits_need_gpa (io_requestor_1_req_bits_bits_need_gpa),
    .io_in_1_bits_bits_vstage1  (io_requestor_1_req_bits_bits_vstage1),
    .io_in_1_bits_bits_stage2   (io_requestor_1_req_bits_bits_stage2),
    .io_out_ready               (_GEN),
    .io_in_0_ready              (io_requestor_0_req_ready),
    .io_in_1_ready              (io_requestor_1_req_ready),
    .io_out_valid               (_arb_io_out_valid),
    .io_out_bits_valid          (_arb_io_out_bits_valid),
    .io_out_bits_bits_addr      (_arb_io_out_bits_bits_addr),
    .io_out_bits_bits_need_gpa  (_arb_io_out_bits_bits_need_gpa),
    .io_out_bits_bits_vstage1   (_arb_io_out_bits_bits_vstage1),
    .io_out_bits_bits_stage2    (_arb_io_out_bits_bits_stage2),
    .io_chosen                  (_arb_io_chosen)
  );
  OptimizationBarrier_UInt state_barrier (
    .io_x
      (io_mem_s2_nack
         ? 3'h1
         : mem_resp_valid
             ? {2'h0, _GEN_56}
             : (|state)
                 ? (_GEN_8
                      ? (resp_gf
                           ? 3'h0
                           : pte_cache_hit ? state : io_mem_req_ready ? 3'h2 : 3'h1)
                      : _GEN_47
                          ? 3'h4
                          : _GEN_48
                              ? (io_mem_s2_xcpt_ae_ld ? 3'h0 : 3'h5)
                              : (&state) ? 3'h0 : state)
                 : _GEN_45 ? {2'h0, _arb_io_out_bits_valid} : state),
    .io_y (_state_barrier_io_y)
  );
  OptimizationBarrier_PTE r_pte_barrier (
    .io_x_ppn
      (_GEN_9
         ? {24'h0,
            (hits[0] ? data_0 : 20'h0) | (hits[1] ? data_1 : 20'h0)
              | (hits[2] ? data_2 : 20'h0) | (hits[3] ? data_3 : 20'h0)
              | (hits[4] ? data_4 : 20'h0) | (hits[5] ? data_5 : 20'h0)
              | (hits[6] ? data_6 : 20'h0) | (hits[7] ? data_7 : 20'h0)}
         : do_switch
             ? {r_hgatp_ppn[43:2], 2'h0}
             : mem_resp_valid
                 ? (_GEN_51
                      ? {17'h0,
                         _GEN_7
                           ? _GEN_3
                           : _GEN_5
                               ? {_GEN_3[26:9], aux_pte_ppn[8:0]}
                               : {_GEN_3[26:18], aux_pte_ppn[17:0]}}
                        & ((&_GEN_50) | _GEN_50 == 2'h2
                             ? 44'hFFFFFFFFFFF
                             : _GEN_50 == 2'h1 ? 44'hFFFFFFFFE00 : 44'hFFFFFFC0000)
                      : {17'h0, _GEN_3})
                 : _GEN_49 & count != 2'h2
                     ? (count[0]
                          ? {r_pte_ppn[43:9], r_req_addr[8:0]}
                          : {r_pte_ppn[43:18], r_req_addr[17:0]})
                     : _GEN_45
                         ? (_arb_io_out_bits_bits_stage2 | _arb_io_out_bits_bits_vstage1
                              ? 44'h0
                              : io_dpath_ptbr_ppn)
                         : r_pte_ppn),
    .io_x_d   (~_GEN_9 & (_GEN_52 ? r_pte_d : _GEN_51 ? aux_pte_d : mem_resp_data[7])),
    .io_x_a   (~_GEN_9 & (_GEN_52 ? r_pte_a : _GEN_51 ? aux_pte_a : mem_resp_data[6])),
    .io_x_g   (~_GEN_9 & (_GEN_52 ? r_pte_g : _GEN_51 ? aux_pte_g : mem_resp_data[5])),
    .io_x_u   (~_GEN_9 & (_GEN_52 ? r_pte_u : _GEN_51 ? aux_pte_u : mem_resp_data[4])),
    .io_x_x   (~_GEN_9 & (_GEN_52 ? r_pte_x : _GEN_51 ? aux_pte_x : mem_resp_data[3])),
    .io_x_w   (~_GEN_9 & (_GEN_52 ? r_pte_w : _GEN_51 ? aux_pte_w : mem_resp_data[2])),
    .io_x_r   (~_GEN_9 & (_GEN_52 ? r_pte_r : _GEN_51 ? aux_pte_r : mem_resp_data[1])),
    .io_x_v   (~_GEN_9 & (_GEN_52 ? r_pte_v : _GEN_51 ? aux_pte_v : aux_pte_pte_v)),
    .io_y_ppn (_r_pte_barrier_io_y_ppn),
    .io_y_d   (_r_pte_barrier_io_y_d),
    .io_y_a   (_r_pte_barrier_io_y_a),
    .io_y_g   (_r_pte_barrier_io_y_g),
    .io_y_u   (_r_pte_barrier_io_y_u),
    .io_y_x   (_r_pte_barrier_io_y_x),
    .io_y_w   (_r_pte_barrier_io_y_w),
    .io_y_r   (_r_pte_barrier_io_y_r),
    .io_y_v   (_r_pte_barrier_io_y_v)
  );
  assign io_requestor_0_resp_valid = resp_valid_0;
  assign io_requestor_0_resp_bits_ae_ptw = resp_ae_ptw;
  assign io_requestor_0_resp_bits_ae_final = resp_ae_final;
  assign io_requestor_0_resp_bits_pf = resp_pf;
  assign io_requestor_0_resp_bits_gf = resp_gf;
  assign io_requestor_0_resp_bits_hr = resp_hr;
  assign io_requestor_0_resp_bits_hw = resp_hw;
  assign io_requestor_0_resp_bits_hx = resp_hx;
  assign io_requestor_0_resp_bits_pte_ppn = r_pte_ppn;
  assign io_requestor_0_resp_bits_pte_d = r_pte_d;
  assign io_requestor_0_resp_bits_pte_a = r_pte_a;
  assign io_requestor_0_resp_bits_pte_g = r_pte_g;
  assign io_requestor_0_resp_bits_pte_u = r_pte_u;
  assign io_requestor_0_resp_bits_pte_x = r_pte_x;
  assign io_requestor_0_resp_bits_pte_w = r_pte_w;
  assign io_requestor_0_resp_bits_pte_r = r_pte_r;
  assign io_requestor_0_resp_bits_pte_v = r_pte_v;
  assign io_requestor_0_resp_bits_level = max_count;
  assign io_requestor_0_resp_bits_homogeneous = homogeneous;
  assign io_requestor_0_resp_bits_gpa_is_pte = ~stage2_final;
  assign io_requestor_0_ptbr_mode = io_dpath_ptbr_mode;
  assign io_requestor_0_status_debug = io_dpath_status_debug;
  assign io_requestor_0_status_mxr = io_dpath_status_mxr;
  assign io_requestor_0_status_sum = io_dpath_status_sum;
  assign io_requestor_0_pmp_0_cfg_l = io_dpath_pmp_0_cfg_l;
  assign io_requestor_0_pmp_0_cfg_a = io_dpath_pmp_0_cfg_a;
  assign io_requestor_0_pmp_0_cfg_x = io_dpath_pmp_0_cfg_x;
  assign io_requestor_0_pmp_0_cfg_w = io_dpath_pmp_0_cfg_w;
  assign io_requestor_0_pmp_0_cfg_r = io_dpath_pmp_0_cfg_r;
  assign io_requestor_0_pmp_0_addr = io_dpath_pmp_0_addr;
  assign io_requestor_0_pmp_0_mask = io_dpath_pmp_0_mask;
  assign io_requestor_0_pmp_1_cfg_l = io_dpath_pmp_1_cfg_l;
  assign io_requestor_0_pmp_1_cfg_a = io_dpath_pmp_1_cfg_a;
  assign io_requestor_0_pmp_1_cfg_x = io_dpath_pmp_1_cfg_x;
  assign io_requestor_0_pmp_1_cfg_w = io_dpath_pmp_1_cfg_w;
  assign io_requestor_0_pmp_1_cfg_r = io_dpath_pmp_1_cfg_r;
  assign io_requestor_0_pmp_1_addr = io_dpath_pmp_1_addr;
  assign io_requestor_0_pmp_1_mask = io_dpath_pmp_1_mask;
  assign io_requestor_0_pmp_2_cfg_l = io_dpath_pmp_2_cfg_l;
  assign io_requestor_0_pmp_2_cfg_a = io_dpath_pmp_2_cfg_a;
  assign io_requestor_0_pmp_2_cfg_x = io_dpath_pmp_2_cfg_x;
  assign io_requestor_0_pmp_2_cfg_w = io_dpath_pmp_2_cfg_w;
  assign io_requestor_0_pmp_2_cfg_r = io_dpath_pmp_2_cfg_r;
  assign io_requestor_0_pmp_2_addr = io_dpath_pmp_2_addr;
  assign io_requestor_0_pmp_2_mask = io_dpath_pmp_2_mask;
  assign io_requestor_0_pmp_3_cfg_l = io_dpath_pmp_3_cfg_l;
  assign io_requestor_0_pmp_3_cfg_a = io_dpath_pmp_3_cfg_a;
  assign io_requestor_0_pmp_3_cfg_x = io_dpath_pmp_3_cfg_x;
  assign io_requestor_0_pmp_3_cfg_w = io_dpath_pmp_3_cfg_w;
  assign io_requestor_0_pmp_3_cfg_r = io_dpath_pmp_3_cfg_r;
  assign io_requestor_0_pmp_3_addr = io_dpath_pmp_3_addr;
  assign io_requestor_0_pmp_3_mask = io_dpath_pmp_3_mask;
  assign io_requestor_0_pmp_4_cfg_l = io_dpath_pmp_4_cfg_l;
  assign io_requestor_0_pmp_4_cfg_a = io_dpath_pmp_4_cfg_a;
  assign io_requestor_0_pmp_4_cfg_x = io_dpath_pmp_4_cfg_x;
  assign io_requestor_0_pmp_4_cfg_w = io_dpath_pmp_4_cfg_w;
  assign io_requestor_0_pmp_4_cfg_r = io_dpath_pmp_4_cfg_r;
  assign io_requestor_0_pmp_4_addr = io_dpath_pmp_4_addr;
  assign io_requestor_0_pmp_4_mask = io_dpath_pmp_4_mask;
  assign io_requestor_0_pmp_5_cfg_l = io_dpath_pmp_5_cfg_l;
  assign io_requestor_0_pmp_5_cfg_a = io_dpath_pmp_5_cfg_a;
  assign io_requestor_0_pmp_5_cfg_x = io_dpath_pmp_5_cfg_x;
  assign io_requestor_0_pmp_5_cfg_w = io_dpath_pmp_5_cfg_w;
  assign io_requestor_0_pmp_5_cfg_r = io_dpath_pmp_5_cfg_r;
  assign io_requestor_0_pmp_5_addr = io_dpath_pmp_5_addr;
  assign io_requestor_0_pmp_5_mask = io_dpath_pmp_5_mask;
  assign io_requestor_0_pmp_6_cfg_l = io_dpath_pmp_6_cfg_l;
  assign io_requestor_0_pmp_6_cfg_a = io_dpath_pmp_6_cfg_a;
  assign io_requestor_0_pmp_6_cfg_x = io_dpath_pmp_6_cfg_x;
  assign io_requestor_0_pmp_6_cfg_w = io_dpath_pmp_6_cfg_w;
  assign io_requestor_0_pmp_6_cfg_r = io_dpath_pmp_6_cfg_r;
  assign io_requestor_0_pmp_6_addr = io_dpath_pmp_6_addr;
  assign io_requestor_0_pmp_6_mask = io_dpath_pmp_6_mask;
  assign io_requestor_0_pmp_7_cfg_l = io_dpath_pmp_7_cfg_l;
  assign io_requestor_0_pmp_7_cfg_a = io_dpath_pmp_7_cfg_a;
  assign io_requestor_0_pmp_7_cfg_x = io_dpath_pmp_7_cfg_x;
  assign io_requestor_0_pmp_7_cfg_w = io_dpath_pmp_7_cfg_w;
  assign io_requestor_0_pmp_7_cfg_r = io_dpath_pmp_7_cfg_r;
  assign io_requestor_0_pmp_7_addr = io_dpath_pmp_7_addr;
  assign io_requestor_0_pmp_7_mask = io_dpath_pmp_7_mask;
  assign io_requestor_1_resp_valid = resp_valid_1;
  assign io_requestor_1_resp_bits_ae_ptw = resp_ae_ptw;
  assign io_requestor_1_resp_bits_ae_final = resp_ae_final;
  assign io_requestor_1_resp_bits_pf = resp_pf;
  assign io_requestor_1_resp_bits_gf = resp_gf;
  assign io_requestor_1_resp_bits_hr = resp_hr;
  assign io_requestor_1_resp_bits_hw = resp_hw;
  assign io_requestor_1_resp_bits_hx = resp_hx;
  assign io_requestor_1_resp_bits_pte_ppn = r_pte_ppn;
  assign io_requestor_1_resp_bits_pte_d = r_pte_d;
  assign io_requestor_1_resp_bits_pte_a = r_pte_a;
  assign io_requestor_1_resp_bits_pte_g = r_pte_g;
  assign io_requestor_1_resp_bits_pte_u = r_pte_u;
  assign io_requestor_1_resp_bits_pte_x = r_pte_x;
  assign io_requestor_1_resp_bits_pte_w = r_pte_w;
  assign io_requestor_1_resp_bits_pte_r = r_pte_r;
  assign io_requestor_1_resp_bits_pte_v = r_pte_v;
  assign io_requestor_1_resp_bits_level = max_count;
  assign io_requestor_1_resp_bits_homogeneous = homogeneous;
  assign io_requestor_1_resp_bits_gpa_is_pte = ~stage2_final;
  assign io_requestor_1_ptbr_mode = io_dpath_ptbr_mode;
  assign io_requestor_1_status_debug = io_dpath_status_debug;
  assign io_requestor_1_status_prv = io_dpath_status_prv;
  assign io_requestor_1_pmp_0_cfg_l = io_dpath_pmp_0_cfg_l;
  assign io_requestor_1_pmp_0_cfg_a = io_dpath_pmp_0_cfg_a;
  assign io_requestor_1_pmp_0_cfg_x = io_dpath_pmp_0_cfg_x;
  assign io_requestor_1_pmp_0_cfg_w = io_dpath_pmp_0_cfg_w;
  assign io_requestor_1_pmp_0_cfg_r = io_dpath_pmp_0_cfg_r;
  assign io_requestor_1_pmp_0_addr = io_dpath_pmp_0_addr;
  assign io_requestor_1_pmp_0_mask = io_dpath_pmp_0_mask;
  assign io_requestor_1_pmp_1_cfg_l = io_dpath_pmp_1_cfg_l;
  assign io_requestor_1_pmp_1_cfg_a = io_dpath_pmp_1_cfg_a;
  assign io_requestor_1_pmp_1_cfg_x = io_dpath_pmp_1_cfg_x;
  assign io_requestor_1_pmp_1_cfg_w = io_dpath_pmp_1_cfg_w;
  assign io_requestor_1_pmp_1_cfg_r = io_dpath_pmp_1_cfg_r;
  assign io_requestor_1_pmp_1_addr = io_dpath_pmp_1_addr;
  assign io_requestor_1_pmp_1_mask = io_dpath_pmp_1_mask;
  assign io_requestor_1_pmp_2_cfg_l = io_dpath_pmp_2_cfg_l;
  assign io_requestor_1_pmp_2_cfg_a = io_dpath_pmp_2_cfg_a;
  assign io_requestor_1_pmp_2_cfg_x = io_dpath_pmp_2_cfg_x;
  assign io_requestor_1_pmp_2_cfg_w = io_dpath_pmp_2_cfg_w;
  assign io_requestor_1_pmp_2_cfg_r = io_dpath_pmp_2_cfg_r;
  assign io_requestor_1_pmp_2_addr = io_dpath_pmp_2_addr;
  assign io_requestor_1_pmp_2_mask = io_dpath_pmp_2_mask;
  assign io_requestor_1_pmp_3_cfg_l = io_dpath_pmp_3_cfg_l;
  assign io_requestor_1_pmp_3_cfg_a = io_dpath_pmp_3_cfg_a;
  assign io_requestor_1_pmp_3_cfg_x = io_dpath_pmp_3_cfg_x;
  assign io_requestor_1_pmp_3_cfg_w = io_dpath_pmp_3_cfg_w;
  assign io_requestor_1_pmp_3_cfg_r = io_dpath_pmp_3_cfg_r;
  assign io_requestor_1_pmp_3_addr = io_dpath_pmp_3_addr;
  assign io_requestor_1_pmp_3_mask = io_dpath_pmp_3_mask;
  assign io_requestor_1_pmp_4_cfg_l = io_dpath_pmp_4_cfg_l;
  assign io_requestor_1_pmp_4_cfg_a = io_dpath_pmp_4_cfg_a;
  assign io_requestor_1_pmp_4_cfg_x = io_dpath_pmp_4_cfg_x;
  assign io_requestor_1_pmp_4_cfg_w = io_dpath_pmp_4_cfg_w;
  assign io_requestor_1_pmp_4_cfg_r = io_dpath_pmp_4_cfg_r;
  assign io_requestor_1_pmp_4_addr = io_dpath_pmp_4_addr;
  assign io_requestor_1_pmp_4_mask = io_dpath_pmp_4_mask;
  assign io_requestor_1_pmp_5_cfg_l = io_dpath_pmp_5_cfg_l;
  assign io_requestor_1_pmp_5_cfg_a = io_dpath_pmp_5_cfg_a;
  assign io_requestor_1_pmp_5_cfg_x = io_dpath_pmp_5_cfg_x;
  assign io_requestor_1_pmp_5_cfg_w = io_dpath_pmp_5_cfg_w;
  assign io_requestor_1_pmp_5_cfg_r = io_dpath_pmp_5_cfg_r;
  assign io_requestor_1_pmp_5_addr = io_dpath_pmp_5_addr;
  assign io_requestor_1_pmp_5_mask = io_dpath_pmp_5_mask;
  assign io_requestor_1_pmp_6_cfg_l = io_dpath_pmp_6_cfg_l;
  assign io_requestor_1_pmp_6_cfg_a = io_dpath_pmp_6_cfg_a;
  assign io_requestor_1_pmp_6_cfg_x = io_dpath_pmp_6_cfg_x;
  assign io_requestor_1_pmp_6_cfg_w = io_dpath_pmp_6_cfg_w;
  assign io_requestor_1_pmp_6_cfg_r = io_dpath_pmp_6_cfg_r;
  assign io_requestor_1_pmp_6_addr = io_dpath_pmp_6_addr;
  assign io_requestor_1_pmp_6_mask = io_dpath_pmp_6_mask;
  assign io_requestor_1_pmp_7_cfg_l = io_dpath_pmp_7_cfg_l;
  assign io_requestor_1_pmp_7_cfg_a = io_dpath_pmp_7_cfg_a;
  assign io_requestor_1_pmp_7_cfg_x = io_dpath_pmp_7_cfg_x;
  assign io_requestor_1_pmp_7_cfg_w = io_dpath_pmp_7_cfg_w;
  assign io_requestor_1_pmp_7_cfg_r = io_dpath_pmp_7_cfg_r;
  assign io_requestor_1_pmp_7_addr = io_dpath_pmp_7_addr;
  assign io_requestor_1_pmp_7_mask = io_dpath_pmp_7_mask;
  assign io_requestor_1_customCSRs_csrs_0_value = io_dpath_customCSRs_csrs_0_value;
  assign io_mem_req_valid = _GEN_8 | state == 3'h3;
  assign io_mem_req_bits_addr = {8'h0, r_pte_ppn[19:0], pte_addr_vpn_idx, 3'h0};
  assign io_mem_req_bits_dv = _GEN_2;
  assign io_mem_s1_kill = state != 3'h2 | resp_gf;
endmodule

module RVCExpander(
  input  [31:0] io_in,
  output [31:0] io_out_bits,
  output [4:0]  io_out_rd,
                io_out_rs1,
                io_out_rs2,
                io_out_rs3,
  output        io_rvc
);

  wire [4:0]       io_out_s_13_rs2 = {2'h1, io_in[4:2]};
  wire [4:0]       io_out_s_15_rs1 = {2'h1, io_in[9:7]};
  wire [6:0]       _GEN = {7{io_in[12]}};
  wire [11:0]      _GEN_0 = {_GEN, io_in[6:2]};
  wire [2:0]       _GEN_1 = {io_in[12], io_in[6:5]};
  wire [2:0]       _GEN_2 = {_GEN_1 == 3'h1, 2'h0};
  wire [7:0][2:0]  _GEN_3 =
    {{3'h3}, {3'h2}, {3'h0}, {3'h0}, {3'h7}, {3'h6}, {_GEN_2}, {_GEN_2}};
  wire [3:0]       _GEN_4 = {4{io_in[12]}};
  wire [6:0]       io_out_s_load_opc = (|(io_in[11:7])) ? 7'h3 : 7'h1F;
  wire [4:0]       _GEN_5 = {io_in[1:0], io_in[15:13]};
  wire             _GEN_6 = _GEN_5 == 5'hE;
  wire             _GEN_7 = _GEN_5 == 5'hF;
  wire             _GEN_8 = _GEN_5 == 5'h10;
  wire             _GEN_9 = _GEN_5 == 5'h11;
  wire             _GEN_10 = _GEN_5 == 5'h12;
  wire             _GEN_11 = _GEN_5 == 5'h13;
  wire             _GEN_12 = _GEN_5 == 5'h14;
  wire [31:0]      _GEN_13 =
    _GEN_12
      ? {7'h0,
         io_in[12]
           ? ((|(io_in[6:2]))
                ? {io_in[6:2], io_in[11:7], 3'h0, io_in[11:7], 7'h33}
                : (|(io_in[11:7]))
                    ? {io_in[6:2], io_in[11:7], 15'hE7}
                    : {io_in[6:3], 1'h1, io_in[11:7], 15'h73})
           : {io_in[6:2],
              (|(io_in[6:2]))
                ? {8'h0, io_in[11:7], 7'h33}
                : {io_in[11:7], (|(io_in[11:7])) ? 15'h67 : 15'h1F}}}
      : _GEN_11
          ? {3'h0,
             io_in[4:2],
             io_in[12],
             io_in[6:5],
             11'h13,
             io_in[11:7],
             io_out_s_load_opc}
          : _GEN_10
              ? {4'h0,
                 io_in[3:2],
                 io_in[12],
                 io_in[6:4],
                 10'h12,
                 io_in[11:7],
                 io_out_s_load_opc}
              : _GEN_9
                  ? {3'h0, io_in[4:2], io_in[12], io_in[6:5], 11'h13, io_in[11:7], 7'h7}
                  : _GEN_8
                      ? {6'h0,
                         io_in[12],
                         io_in[6:2],
                         io_in[11:7],
                         3'h1,
                         io_in[11:7],
                         7'h13}
                      : _GEN_7
                          ? {_GEN_4,
                             io_in[6:5],
                             io_in[2],
                             7'h1,
                             io_in[9:7],
                             3'h1,
                             io_in[11:10],
                             io_in[4:3],
                             io_in[12],
                             7'h63}
                          : _GEN_6
                              ? {_GEN_4,
                                 io_in[6:5],
                                 io_in[2],
                                 7'h1,
                                 io_in[9:7],
                                 3'h0,
                                 io_in[11:10],
                                 io_in[4:3],
                                 io_in[12],
                                 7'h63}
                              : _GEN_5 == 5'hD
                                  ? {io_in[12],
                                     io_in[8],
                                     io_in[10:9],
                                     io_in[6],
                                     io_in[7],
                                     io_in[2],
                                     io_in[11],
                                     io_in[5:3],
                                     {9{io_in[12]}},
                                     12'h6F}
                                  : _GEN_5 == 5'hC
                                      ? ((&(io_in[11:10]))
                                           ? {1'h0,
                                              io_in[6:5] == 2'h0,
                                              7'h1,
                                              io_in[4:2],
                                              2'h1,
                                              io_in[9:7],
                                              _GEN_3[_GEN_1],
                                              2'h1,
                                              io_in[9:7],
                                              3'h3,
                                              io_in[12],
                                              3'h3}
                                           : {io_in[11:10] == 2'h2
                                                ? {_GEN,
                                                   io_in[6:2],
                                                   2'h1,
                                                   io_in[9:7],
                                                   5'h1D}
                                                : {1'h0,
                                                   io_in[11:10] == 2'h1,
                                                   4'h0,
                                                   io_in[12],
                                                   io_in[6:2],
                                                   2'h1,
                                                   io_in[9:7],
                                                   5'h15},
                                              io_in[9:7],
                                              7'h13})
                                      : _GEN_5 == 5'hB
                                          ? {{3{io_in[12]}},
                                             ~(|(io_in[11:7])) | io_in[11:7] == 5'h2
                                               ? {io_in[4:3],
                                                  io_in[5],
                                                  io_in[2],
                                                  io_in[6],
                                                  4'h0,
                                                  io_in[11:7],
                                                  3'h0,
                                                  io_in[11:7],
                                                  (|_GEN_0) ? 7'h13 : 7'h1F}
                                               : {{12{io_in[12]}},
                                                  io_in[6:2],
                                                  io_in[11:7],
                                                  3'h3,
                                                  ~(|_GEN_0),
                                                  3'h7}}
                                          : _GEN_5 == 5'hA
                                              ? {_GEN,
                                                 io_in[6:2],
                                                 8'h0,
                                                 io_in[11:7],
                                                 7'h13}
                                              : _GEN_5 == 5'h9
                                                  ? {_GEN,
                                                     io_in[6:2],
                                                     io_in[11:7],
                                                     3'h0,
                                                     io_in[11:7],
                                                     4'h3,
                                                     ~(|(io_in[11:7])),
                                                     2'h3}
                                                  : _GEN_5 == 5'h8
                                                      ? {_GEN,
                                                         io_in[6:2],
                                                         io_in[11:7],
                                                         3'h0,
                                                         io_in[11:7],
                                                         7'h13}
                                                      : _GEN_5 == 5'h7
                                                          ? {4'h0,
                                                             io_in[6:5],
                                                             io_in[12],
                                                             2'h1,
                                                             io_in[4:2],
                                                             2'h1,
                                                             io_in[9:7],
                                                             3'h3,
                                                             io_in[11:10],
                                                             10'h23}
                                                          : _GEN_5 == 5'h6
                                                              ? {5'h0,
                                                                 io_in[5],
                                                                 io_in[12],
                                                                 2'h1,
                                                                 io_in[4:2],
                                                                 2'h1,
                                                                 io_in[9:7],
                                                                 3'h2,
                                                                 io_in[11:10],
                                                                 io_in[6],
                                                                 9'h23}
                                                              : _GEN_5 == 5'h5
                                                                  ? {4'h0,
                                                                     io_in[6:5],
                                                                     io_in[12],
                                                                     2'h1,
                                                                     io_in[4:2],
                                                                     2'h1,
                                                                     io_in[9:7],
                                                                     3'h3,
                                                                     io_in[11:10],
                                                                     10'h27}
                                                                  : _GEN_5 == 5'h4
                                                                      ? {5'h0,
                                                                         io_in[5],
                                                                         io_in[12],
                                                                         2'h1,
                                                                         io_in[4:2],
                                                                         2'h1,
                                                                         io_in[9:7],
                                                                         3'h2,
                                                                         io_in[11:10],
                                                                         io_in[6],
                                                                         9'h3F}
                                                                      : _GEN_5 == 5'h3
                                                                          ? {4'h0,
                                                                             io_in[6:5],
                                                                             io_in[12:10],
                                                                             5'h1,
                                                                             io_in[9:7],
                                                                             5'hD,
                                                                             io_in[4:2],
                                                                             7'h3}
                                                                          : _GEN_5 == 5'h2
                                                                              ? {5'h0,
                                                                                 io_in[5],
                                                                                 io_in[12:10],
                                                                                 io_in[6],
                                                                                 4'h1,
                                                                                 io_in[9:7],
                                                                                 5'h9,
                                                                                 io_in[4:2],
                                                                                 7'h3}
                                                                              : _GEN_5 == 5'h1
                                                                                  ? {4'h0,
                                                                                     io_in[6:5],
                                                                                     io_in[12:10],
                                                                                     5'h1,
                                                                                     io_in[9:7],
                                                                                     5'hD,
                                                                                     io_in[4:2],
                                                                                     7'h7}
                                                                                  : {2'h0,
                                                                                     io_in[10:7],
                                                                                     io_in[12:11],
                                                                                     io_in[5],
                                                                                     io_in[6],
                                                                                     12'h41,
                                                                                     io_in[4:2],
                                                                                     (|(io_in[12:5]))
                                                                                       ? 7'h13
                                                                                       : 7'h1F};
  wire             _GEN_14 = _GEN_5 == 5'h15;
  wire             _GEN_15 = _GEN_5 == 5'h16;
  wire             _GEN_16 = _GEN_5 == 5'h17;
  wire             _GEN_17 = _GEN_5 == 5'h18;
  wire             _GEN_18 = _GEN_5 == 5'h19;
  wire             _GEN_19 = _GEN_5 == 5'h1A;
  wire             _GEN_20 = _GEN_5 == 5'h1B;
  wire             _GEN_21 = _GEN_5 == 5'h1C;
  wire             _GEN_22 = _GEN_5 == 5'h1D;
  wire             _GEN_23 = _GEN_5 == 5'h1E;
  wire [31:0][4:0] _GEN_24 =
    {{io_in[11:7]},
     {io_in[11:7]},
     {io_in[11:7]},
     {io_in[11:7]},
     {io_in[11:7]},
     {io_in[11:7]},
     {io_in[11:7]},
     {io_in[11:7]},
     {io_in[11:7]},
     {io_in[11:7]},
     {io_in[11:7]},
     {(|(io_in[6:2])) ? io_in[11:7] : {4'h0, io_in[12]}},
     {io_in[11:7]},
     {io_in[11:7]},
     {io_in[11:7]},
     {io_in[11:7]},
     {5'h0},
     {io_out_s_15_rs1},
     {5'h0},
     {io_out_s_15_rs1},
     {io_in[11:7]},
     {io_in[11:7]},
     {io_in[11:7]},
     {io_in[11:7]},
     {io_out_s_13_rs2},
     {io_out_s_13_rs2},
     {io_out_s_13_rs2},
     {io_out_s_13_rs2},
     {io_out_s_13_rs2},
     {io_out_s_13_rs2},
     {io_out_s_13_rs2},
     {io_out_s_13_rs2}};
  wire [31:0][4:0] _GEN_25 =
    {{io_in[19:15]},
     {io_in[19:15]},
     {io_in[19:15]},
     {io_in[19:15]},
     {io_in[19:15]},
     {io_in[19:15]},
     {io_in[19:15]},
     {io_in[19:15]},
     {5'h2},
     {5'h2},
     {5'h2},
     {io_in[12] | ~(|(io_in[6:2])) ? io_in[11:7] : 5'h0},
     {5'h2},
     {5'h2},
     {5'h2},
     {io_in[11:7]},
     {io_out_s_15_rs1},
     {io_out_s_15_rs1},
     {io_out_s_15_rs1},
     {io_out_s_15_rs1},
     {io_in[11:7]},
     {5'h0},
     {io_in[11:7]},
     {io_in[11:7]},
     {io_out_s_15_rs1},
     {io_out_s_15_rs1},
     {io_out_s_15_rs1},
     {io_out_s_15_rs1},
     {io_out_s_15_rs1},
     {io_out_s_15_rs1},
     {io_out_s_15_rs1},
     {5'h2}};
  assign io_out_bits =
    (&_GEN_5) | _GEN_23 | _GEN_22 | _GEN_21 | _GEN_20 | _GEN_19 | _GEN_18 | _GEN_17
      ? io_in
      : _GEN_16
          ? {3'h0, io_in[9:7], io_in[12], io_in[6:2], 8'h13, io_in[11:10], 10'h23}
          : _GEN_15
              ? {4'h0, io_in[8:7], io_in[12], io_in[6:2], 8'h12, io_in[11:9], 9'h23}
              : _GEN_14
                  ? {3'h0, io_in[9:7], io_in[12], io_in[6:2], 8'h13, io_in[11:10], 10'h27}
                  : _GEN_13;
  assign io_out_rd = _GEN_24[_GEN_5];
  assign io_out_rs1 = _GEN_25[_GEN_5];
  assign io_out_rs2 =
    (&_GEN_5) | _GEN_23 | _GEN_22 | _GEN_21 | _GEN_20 | _GEN_19 | _GEN_18 | _GEN_17
      ? io_in[24:20]
      : _GEN_16 | _GEN_15 | _GEN_14 | _GEN_12 | _GEN_11 | _GEN_10 | _GEN_9 | _GEN_8
          ? io_in[6:2]
          : _GEN_7 | _GEN_6 ? 5'h0 : io_out_s_13_rs2;
  assign io_out_rs3 = io_in[31:27];
  assign io_rvc = io_in[1:0] != 2'h3;
endmodule

module IBuf(
  input         clock,
                reset,
                io_imem_valid,
                io_imem_bits_btb_taken,
                io_imem_bits_btb_bridx,
  input  [4:0]  io_imem_bits_btb_entry,
  input  [7:0]  io_imem_bits_btb_bht_history,
  input  [39:0] io_imem_bits_pc,
  input  [31:0] io_imem_bits_data,
  input         io_imem_bits_xcpt_pf_inst,
                io_imem_bits_xcpt_gf_inst,
                io_imem_bits_xcpt_ae_inst,
                io_imem_bits_replay,
                io_kill,
                io_inst_0_ready,
  output        io_imem_ready,
  output [39:0] io_pc,
  output [4:0]  io_btb_resp_entry,
  output [7:0]  io_btb_resp_bht_history,
  output        io_inst_0_valid,
                io_inst_0_bits_xcpt0_pf_inst,
                io_inst_0_bits_xcpt0_gf_inst,
                io_inst_0_bits_xcpt0_ae_inst,
                io_inst_0_bits_xcpt1_pf_inst,
                io_inst_0_bits_xcpt1_gf_inst,
                io_inst_0_bits_xcpt1_ae_inst,
                io_inst_0_bits_replay,
                io_inst_0_bits_rvc,
  output [31:0] io_inst_0_bits_inst_bits,
  output [4:0]  io_inst_0_bits_inst_rd,
                io_inst_0_bits_inst_rs1,
                io_inst_0_bits_inst_rs2,
                io_inst_0_bits_inst_rs3,
  output [31:0] io_inst_0_bits_raw
);

  wire [1:0]   nReady;
  wire         _exp_io_rvc;
  reg          nBufValid;
  reg  [39:0]  buf_pc;
  reg  [31:0]  buf_data;
  reg          buf_xcpt_pf_inst;
  reg          buf_xcpt_gf_inst;
  reg          buf_xcpt_ae_inst;
  reg          buf_replay;
  reg  [4:0]   ibufBTBResp_entry;
  reg  [7:0]   ibufBTBResp_bht_history;
  wire [1:0]   _GEN = {1'h0, io_imem_bits_pc[1]};
  wire [1:0]   nIC =
    (io_imem_bits_btb_taken ? {1'h0, io_imem_bits_btb_bridx} + 2'h1 : 2'h2) - _GEN;
  wire [1:0]   _GEN_0 = {1'h0, nBufValid};
  wire [1:0]   nICReady = nReady - _GEN_0;
  wire         _GEN_1 = nReady >= _GEN_0;
  wire [1:0]   _GEN_2 = nIC - nICReady;
  wire [31:0]  _GEN_3 = {2{io_imem_bits_data[31:16]}};
  wire [190:0] _GEN_4 =
    {63'h0, {2{_GEN_3}}, io_imem_bits_data, {2{io_imem_bits_data[15:0]}}}
    << {185'h0, _GEN_0 - 2'h2 - _GEN, 4'h0};
  wire [62:0]  _GEN_5 = 63'hFFFFFFFF << {58'h0, nBufValid, 4'h0};
  wire [31:0]  inst = _GEN_4[95:64] & _GEN_5[31:0] | buf_data & ~(_GEN_5[31:0]);
  wire [3:0]   _GEN_6 = 4'h1 << (io_imem_valid ? nIC : 2'h0) + _GEN_0;
  wire [1:0]   valid = _GEN_6[1:0] - 2'h1;
  wire [1:0]   bufMask = (2'h1 << _GEN_0) - 2'h1;
  wire [1:0]   buf_replay_0 = buf_replay ? bufMask : 2'h0;
  wire [1:0]   ic_replay = buf_replay_0 | (io_imem_bits_replay ? valid & ~bufMask : 2'h0);
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (~reset
          & ~(~io_imem_valid | ~io_imem_bits_btb_taken
              | io_imem_bits_btb_bridx >= io_imem_bits_pc[1])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at IBuf.scala:79 assert(!io.imem.valid || !io.imem.bits.btb.taken || io.imem.bits.btb.bridx >= pcWordBits)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  wire         full_insn = _exp_io_rvc | valid[1] | buf_replay_0[0];
  wire [2:0]   _GEN_7 =
    _exp_io_rvc
      ? 3'h0
      : {bufMask[1] ? buf_xcpt_pf_inst : io_imem_bits_xcpt_pf_inst,
         bufMask[1] ? buf_xcpt_gf_inst : io_imem_bits_xcpt_gf_inst,
         bufMask[1] ? buf_xcpt_ae_inst : io_imem_bits_xcpt_ae_inst};
  wire         _GEN_8 = bufMask[0] & _exp_io_rvc | bufMask[1];
  assign nReady = full_insn ? (_exp_io_rvc ? 2'h1 : 2'h2) : 2'h0;
  always @(posedge clock) begin
    automatic logic _GEN_9;
    _GEN_9 = io_imem_valid & _GEN_1 & nICReady < nIC & ~(_GEN_2[1]);
    if (reset)
      nBufValid <= 1'h0;
    else
      nBufValid <=
        ~io_kill
        & (io_inst_0_ready
             ? (_GEN_9 ? _GEN_2[0] : ~(_GEN_1 | ~nBufValid) & nBufValid - nReady[0])
             : nBufValid);
    if (io_inst_0_ready & _GEN_9) begin
      automatic logic [63:0] _GEN_10 =
        {_GEN_3, io_imem_bits_data} >> {58'h0, _GEN + nICReady, 4'h0};
      buf_pc <=
        io_imem_bits_pc & 40'hFFFFFFFFFC | io_imem_bits_pc + {37'h0, nICReady, 1'h0}
        & 40'h3;
      buf_data <= {16'h0, _GEN_10[15:0]};
      buf_xcpt_pf_inst <= io_imem_bits_xcpt_pf_inst;
      buf_xcpt_gf_inst <= io_imem_bits_xcpt_gf_inst;
      buf_xcpt_ae_inst <= io_imem_bits_xcpt_ae_inst;
      buf_replay <= io_imem_bits_replay;
      ibufBTBResp_entry <= io_imem_bits_btb_entry;
      ibufBTBResp_bht_history <= io_imem_bits_btb_bht_history;
    end
  end // always @(posedge)
  RVCExpander exp (
    .io_in       (inst),
    .io_out_bits (io_inst_0_bits_inst_bits),
    .io_out_rd   (io_inst_0_bits_inst_rd),
    .io_out_rs1  (io_inst_0_bits_inst_rs1),
    .io_out_rs2  (io_inst_0_bits_inst_rs2),
    .io_out_rs3  (io_inst_0_bits_inst_rs3),
    .io_rvc      (_exp_io_rvc)
  );
  assign io_imem_ready = io_inst_0_ready & _GEN_1 & (nICReady >= nIC | ~(_GEN_2[1]));
  assign io_pc = nBufValid ? buf_pc : io_imem_bits_pc;
  assign io_btb_resp_entry = _GEN_8 ? ibufBTBResp_entry : io_imem_bits_btb_entry;
  assign io_btb_resp_bht_history =
    _GEN_8 ? ibufBTBResp_bht_history : io_imem_bits_btb_bht_history;
  assign io_inst_0_valid = valid[0] & full_insn;
  assign io_inst_0_bits_xcpt0_pf_inst =
    bufMask[0] ? buf_xcpt_pf_inst : io_imem_bits_xcpt_pf_inst;
  assign io_inst_0_bits_xcpt0_gf_inst =
    bufMask[0] ? buf_xcpt_gf_inst : io_imem_bits_xcpt_gf_inst;
  assign io_inst_0_bits_xcpt0_ae_inst =
    bufMask[0] ? buf_xcpt_ae_inst : io_imem_bits_xcpt_ae_inst;
  assign io_inst_0_bits_xcpt1_pf_inst = _GEN_7[2];
  assign io_inst_0_bits_xcpt1_gf_inst = _GEN_7[1];
  assign io_inst_0_bits_xcpt1_ae_inst = _GEN_7[0];
  assign io_inst_0_bits_replay = ic_replay[0] | ~_exp_io_rvc & ic_replay[1];
  assign io_inst_0_bits_rvc = _exp_io_rvc;
  assign io_inst_0_bits_raw = inst;
endmodule

module CSRFile(
  input         clock,
                reset,
                io_ungated_clock,
                io_interrupts_debug,
                io_interrupts_mtip,
                io_interrupts_msip,
                io_interrupts_meip,
                io_interrupts_seip,
                io_hartid,
  input  [11:0] io_rw_addr,
  input  [2:0]  io_rw_cmd,
  input  [63:0] io_rw_wdata,
  input  [31:0] io_decode_0_inst,
  input         io_exception,
                io_retire,
  input  [63:0] io_cause,
  input  [39:0] io_pc,
                io_tval,
  input         io_gva,
                io_fcsr_flags_valid,
  input  [4:0]  io_fcsr_flags_bits,
  input  [31:0] io_inst_0,
  output [63:0] io_rw_rdata,
  output        io_decode_0_fp_illegal,
                io_decode_0_fp_csr,
                io_decode_0_rocc_illegal,
                io_decode_0_read_illegal,
                io_decode_0_write_illegal,
                io_decode_0_write_flush,
                io_decode_0_system_illegal,
                io_decode_0_virtual_access_illegal,
                io_decode_0_virtual_system_illegal,
                io_csr_stall,
                io_eret,
                io_singleStep,
                io_status_debug,
                io_status_wfi,
  output [31:0] io_status_isa,
  output [1:0]  io_status_dprv,
  output        io_status_dv,
  output [1:0]  io_status_prv,
  output        io_status_v,
                io_status_mxr,
                io_status_sum,
                io_hstatus_spvp,
  output [3:0]  io_ptbr_mode,
  output [43:0] io_ptbr_ppn,
  output [39:0] io_evec,
  output [63:0] io_time,
  output [2:0]  io_fcsr_rm,
  output        io_interrupt,
  output [63:0] io_interrupt_cause,
  output        io_bp_0_control_action,
                io_bp_0_control_chain,
  output [1:0]  io_bp_0_control_tmatch,
  output        io_bp_0_control_m,
                io_bp_0_control_s,
                io_bp_0_control_u,
                io_bp_0_control_x,
                io_bp_0_control_w,
                io_bp_0_control_r,
  output [38:0] io_bp_0_address,
  output        io_pmp_0_cfg_l,
  output [1:0]  io_pmp_0_cfg_a,
  output        io_pmp_0_cfg_x,
                io_pmp_0_cfg_w,
                io_pmp_0_cfg_r,
  output [29:0] io_pmp_0_addr,
  output [31:0] io_pmp_0_mask,
  output        io_pmp_1_cfg_l,
  output [1:0]  io_pmp_1_cfg_a,
  output        io_pmp_1_cfg_x,
                io_pmp_1_cfg_w,
                io_pmp_1_cfg_r,
  output [29:0] io_pmp_1_addr,
  output [31:0] io_pmp_1_mask,
  output        io_pmp_2_cfg_l,
  output [1:0]  io_pmp_2_cfg_a,
  output        io_pmp_2_cfg_x,
                io_pmp_2_cfg_w,
                io_pmp_2_cfg_r,
  output [29:0] io_pmp_2_addr,
  output [31:0] io_pmp_2_mask,
  output        io_pmp_3_cfg_l,
  output [1:0]  io_pmp_3_cfg_a,
  output        io_pmp_3_cfg_x,
                io_pmp_3_cfg_w,
                io_pmp_3_cfg_r,
  output [29:0] io_pmp_3_addr,
  output [31:0] io_pmp_3_mask,
  output        io_pmp_4_cfg_l,
  output [1:0]  io_pmp_4_cfg_a,
  output        io_pmp_4_cfg_x,
                io_pmp_4_cfg_w,
                io_pmp_4_cfg_r,
  output [29:0] io_pmp_4_addr,
  output [31:0] io_pmp_4_mask,
  output        io_pmp_5_cfg_l,
  output [1:0]  io_pmp_5_cfg_a,
  output        io_pmp_5_cfg_x,
                io_pmp_5_cfg_w,
                io_pmp_5_cfg_r,
  output [29:0] io_pmp_5_addr,
  output [31:0] io_pmp_5_mask,
  output        io_pmp_6_cfg_l,
  output [1:0]  io_pmp_6_cfg_a,
  output        io_pmp_6_cfg_x,
                io_pmp_6_cfg_w,
                io_pmp_6_cfg_r,
  output [29:0] io_pmp_6_addr,
  output [31:0] io_pmp_6_mask,
  output        io_pmp_7_cfg_l,
  output [1:0]  io_pmp_7_cfg_a,
  output        io_pmp_7_cfg_x,
                io_pmp_7_cfg_w,
                io_pmp_7_cfg_r,
  output [29:0] io_pmp_7_addr,
  output [31:0] io_pmp_7_mask,
  output        io_inhibit_cycle,
                io_trace_0_valid,
  output [39:0] io_trace_0_iaddr,
  output [31:0] io_trace_0_insn,
  output        io_trace_0_exception,
  output [63:0] io_customCSRs_0_value
);

  wire [63:0] _io_rw_rdata_output;
  reg         io_status_cease_r;
  wire        _io_singleStep_output;
  reg  [1:0]  reg_mstatus_prv;
  reg         reg_mstatus_v;
  reg         reg_mstatus_mpv;
  reg         reg_mstatus_gva;
  reg         reg_mstatus_tsr;
  reg         reg_mstatus_tw;
  reg         reg_mstatus_tvm;
  reg         reg_mstatus_mxr;
  reg         reg_mstatus_sum;
  reg         reg_mstatus_mprv;
  reg  [1:0]  reg_mstatus_fs;
  reg  [1:0]  reg_mstatus_mpp;
  reg         reg_mstatus_spp;
  reg         reg_mstatus_mpie;
  reg         reg_mstatus_spie;
  reg         reg_mstatus_mie;
  reg         reg_mstatus_sie;
  reg         reg_dcsr_ebreakm;
  reg         reg_dcsr_ebreaks;
  reg         reg_dcsr_ebreaku;
  reg  [2:0]  reg_dcsr_cause;
  reg         reg_dcsr_v;
  reg         reg_dcsr_step;
  reg  [1:0]  reg_dcsr_prv;
  reg         reg_debug;
  reg  [39:0] reg_dpc;
  reg  [63:0] reg_dscratch0;
  reg         reg_singleStepped;
  reg         reg_bp_0_control_dmode;
  reg         reg_bp_0_control_action;
  reg         reg_bp_0_control_chain;
  reg  [1:0]  reg_bp_0_control_tmatch;
  reg         reg_bp_0_control_m;
  reg         reg_bp_0_control_s;
  reg         reg_bp_0_control_u;
  reg         reg_bp_0_control_x;
  reg         reg_bp_0_control_w;
  reg         reg_bp_0_control_r;
  reg  [38:0] reg_bp_0_address;
  reg         reg_pmp_0_cfg_l;
  reg  [1:0]  reg_pmp_0_cfg_a;
  reg         reg_pmp_0_cfg_x;
  reg         reg_pmp_0_cfg_w;
  reg         reg_pmp_0_cfg_r;
  reg  [29:0] reg_pmp_0_addr;
  reg         reg_pmp_1_cfg_l;
  reg  [1:0]  reg_pmp_1_cfg_a;
  reg         reg_pmp_1_cfg_x;
  reg         reg_pmp_1_cfg_w;
  reg         reg_pmp_1_cfg_r;
  reg  [29:0] reg_pmp_1_addr;
  reg         reg_pmp_2_cfg_l;
  reg  [1:0]  reg_pmp_2_cfg_a;
  reg         reg_pmp_2_cfg_x;
  reg         reg_pmp_2_cfg_w;
  reg         reg_pmp_2_cfg_r;
  reg  [29:0] reg_pmp_2_addr;
  reg         reg_pmp_3_cfg_l;
  reg  [1:0]  reg_pmp_3_cfg_a;
  reg         reg_pmp_3_cfg_x;
  reg         reg_pmp_3_cfg_w;
  reg         reg_pmp_3_cfg_r;
  reg  [29:0] reg_pmp_3_addr;
  reg         reg_pmp_4_cfg_l;
  reg  [1:0]  reg_pmp_4_cfg_a;
  reg         reg_pmp_4_cfg_x;
  reg         reg_pmp_4_cfg_w;
  reg         reg_pmp_4_cfg_r;
  reg  [29:0] reg_pmp_4_addr;
  reg         reg_pmp_5_cfg_l;
  reg  [1:0]  reg_pmp_5_cfg_a;
  reg         reg_pmp_5_cfg_x;
  reg         reg_pmp_5_cfg_w;
  reg         reg_pmp_5_cfg_r;
  reg  [29:0] reg_pmp_5_addr;
  reg         reg_pmp_6_cfg_l;
  reg  [1:0]  reg_pmp_6_cfg_a;
  reg         reg_pmp_6_cfg_x;
  reg         reg_pmp_6_cfg_w;
  reg         reg_pmp_6_cfg_r;
  reg  [29:0] reg_pmp_6_addr;
  reg         reg_pmp_7_cfg_l;
  reg  [1:0]  reg_pmp_7_cfg_a;
  reg         reg_pmp_7_cfg_x;
  reg         reg_pmp_7_cfg_w;
  reg         reg_pmp_7_cfg_r;
  reg  [29:0] reg_pmp_7_addr;
  reg  [63:0] reg_mie;
  reg  [63:0] reg_mideleg;
  wire [8:0]  _GEN = reg_mideleg[9:1] & 9'h111;
  wire [15:0] _GEN_0 = {6'h0, _GEN, 1'h0};
  wire [63:0] _GEN_1 = {54'h0, _GEN, 1'h0};
  reg  [63:0] reg_medeleg;
  wire [63:0] _GEN_2 = {48'h0, reg_medeleg[15:0] & 16'hB15D};
  reg         reg_mip_seip;
  reg         reg_mip_stip;
  reg         reg_mip_ssip;
  reg  [39:0] reg_mepc;
  reg  [63:0] reg_mcause;
  reg  [39:0] reg_mtval;
  reg  [63:0] reg_mscratch;
  reg  [31:0] reg_mtvec;
  reg         reg_menvcfg_fiom;
  reg         reg_senvcfg_fiom;
  reg  [31:0] reg_mcounteren;
  wire [31:0] _GEN_3 = {29'h0, reg_mcounteren[2:0]};
  reg  [31:0] reg_scounteren;
  wire [31:0] _GEN_4 = {29'h0, reg_scounteren[2:0]};
  reg         reg_hstatus_spvp;
  reg         reg_vsstatus_spp;
  reg  [39:0] reg_vsepc;
  reg  [39:0] reg_sepc;
  reg  [63:0] reg_scause;
  reg  [39:0] reg_stval;
  reg  [63:0] reg_sscratch;
  reg  [38:0] reg_stvec;
  reg  [3:0]  reg_satp_mode;
  reg  [43:0] reg_satp_ppn;
  reg         reg_wfi;
  reg  [4:0]  reg_fflags;
  reg  [2:0]  reg_frm;
  reg  [2:0]  reg_mcountinhibit;
  reg  [5:0]  small_0;
  reg  [57:0] large_0;
  wire [63:0] value = {large_0, small_0};
  reg  [5:0]  small_1;
  reg  [57:0] large_1;
  wire [63:0] value_1 = {large_1, small_1};
  wire        mip_seip = reg_mip_seip | io_interrupts_seip;
  wire [15:0] read_mip =
    {4'h0,
     io_interrupts_meip,
     1'h0,
     mip_seip,
     1'h0,
     io_interrupts_mtip,
     1'h0,
     reg_mip_stip,
     1'h0,
     io_interrupts_msip,
     1'h0,
     reg_mip_ssip,
     1'h0};
  wire [15:0] _GEN_5 = reg_mie[15:0] & read_mip;
  wire [15:0] _GEN_6 =
    ~(reg_mstatus_prv[1]) | reg_mstatus_mie ? ~(~_GEN_5 | _GEN_0) : 16'h0;
  wire [15:0] _GEN_7 =
    reg_mstatus_v | reg_mstatus_prv == 2'h0 | reg_mstatus_prv == 2'h1 & reg_mstatus_sie
      ? _GEN_5 & _GEN_0
      : 16'h0;
  wire [29:0] _GEN_8 = {reg_pmp_0_addr[28:0], reg_pmp_0_cfg_a[0]};
  wire [29:0] _GEN_9 = {reg_pmp_1_addr[28:0], reg_pmp_1_cfg_a[0]};
  wire [29:0] _GEN_10 = {reg_pmp_2_addr[28:0], reg_pmp_2_cfg_a[0]};
  wire [29:0] _GEN_11 = {reg_pmp_3_addr[28:0], reg_pmp_3_cfg_a[0]};
  wire [29:0] _GEN_12 = {reg_pmp_4_addr[28:0], reg_pmp_4_cfg_a[0]};
  wire [29:0] _GEN_13 = {reg_pmp_5_addr[28:0], reg_pmp_5_cfg_a[0]};
  wire [29:0] _GEN_14 = {reg_pmp_6_addr[28:0], reg_pmp_6_cfg_a[0]};
  wire [29:0] _GEN_15 = {reg_pmp_7_addr[28:0], reg_pmp_7_cfg_a[0]};
  reg  [63:0] reg_misa;
  wire [31:0] _GEN_16 = reg_mtvec & {24'hFFFFFF, ~(reg_mtvec[0] ? 8'hFE : 8'h2)};
  wire [38:0] _GEN_17 = reg_stvec & {31'h7FFFFFFF, ~(reg_stvec[0] ? 8'hFE : 8'h2)};
  wire [39:0] _GEN_18 = ~reg_mepc;
  wire [1:0]  _GEN_19 = {~(reg_misa[2]), 1'h1};
  wire [39:0] _GEN_20 = ~{_GEN_18[39:2], _GEN_18[1:0] | _GEN_19};
  wire [39:0] _GEN_21 = ~reg_dpc;
  wire [39:0] _GEN_22 = ~{_GEN_21[39:2], _GEN_21[1:0] | _GEN_19};
  wire [39:0] _GEN_23 = ~reg_sepc;
  wire [39:0] _GEN_24 = ~{_GEN_23[39:2], _GEN_23[1:0] | _GEN_19};
  reg  [63:0] reg_custom_0;
  wire [11:0] decoded_decoded_invInputs = ~io_rw_addr;
  wire [10:0] _GEN_25 =
    {decoded_decoded_invInputs[1],
     decoded_decoded_invInputs[2],
     decoded_decoded_invInputs[3],
     decoded_decoded_invInputs[4],
     decoded_decoded_invInputs[5],
     decoded_decoded_invInputs[6],
     decoded_decoded_invInputs[7],
     decoded_decoded_invInputs[8],
     decoded_decoded_invInputs[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _GEN_26 =
    {decoded_decoded_invInputs[0],
     io_rw_addr[1],
     decoded_decoded_invInputs[2],
     decoded_decoded_invInputs[3],
     decoded_decoded_invInputs[4],
     decoded_decoded_invInputs[5],
     decoded_decoded_invInputs[6],
     decoded_decoded_invInputs[7],
     decoded_decoded_invInputs[8],
     decoded_decoded_invInputs[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _GEN_27 =
    {io_rw_addr[0],
     io_rw_addr[1],
     decoded_decoded_invInputs[2],
     decoded_decoded_invInputs[3],
     decoded_decoded_invInputs[4],
     decoded_decoded_invInputs[5],
     decoded_decoded_invInputs[6],
     decoded_decoded_invInputs[7],
     decoded_decoded_invInputs[8],
     decoded_decoded_invInputs[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [9:0]  _GEN_28 =
    {decoded_decoded_invInputs[2],
     decoded_decoded_invInputs[3],
     decoded_decoded_invInputs[4],
     decoded_decoded_invInputs[5],
     decoded_decoded_invInputs[6],
     decoded_decoded_invInputs[7],
     io_rw_addr[8],
     decoded_decoded_invInputs[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _GEN_29 =
    {decoded_decoded_invInputs[0],
     decoded_decoded_invInputs[1],
     io_rw_addr[2],
     decoded_decoded_invInputs[3],
     decoded_decoded_invInputs[4],
     decoded_decoded_invInputs[5],
     decoded_decoded_invInputs[6],
     decoded_decoded_invInputs[7],
     io_rw_addr[8],
     decoded_decoded_invInputs[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _GEN_30 =
    {io_rw_addr[0],
     decoded_decoded_invInputs[1],
     io_rw_addr[2],
     decoded_decoded_invInputs[3],
     decoded_decoded_invInputs[4],
     decoded_decoded_invInputs[5],
     decoded_decoded_invInputs[6],
     decoded_decoded_invInputs[7],
     io_rw_addr[8],
     decoded_decoded_invInputs[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [10:0] _GEN_31 =
    {io_rw_addr[1],
     io_rw_addr[2],
     decoded_decoded_invInputs[3],
     decoded_decoded_invInputs[4],
     decoded_decoded_invInputs[5],
     decoded_decoded_invInputs[6],
     decoded_decoded_invInputs[7],
     io_rw_addr[8],
     decoded_decoded_invInputs[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [8:0]  _GEN_32 =
    {io_rw_addr[3],
     decoded_decoded_invInputs[4],
     decoded_decoded_invInputs[5],
     decoded_decoded_invInputs[6],
     decoded_decoded_invInputs[7],
     io_rw_addr[8],
     decoded_decoded_invInputs[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _GEN_33 =
    {decoded_decoded_invInputs[0],
     decoded_decoded_invInputs[1],
     decoded_decoded_invInputs[2],
     decoded_decoded_invInputs[3],
     decoded_decoded_invInputs[4],
     decoded_decoded_invInputs[5],
     io_rw_addr[6],
     decoded_decoded_invInputs[7],
     io_rw_addr[8],
     decoded_decoded_invInputs[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _GEN_34 =
    {io_rw_addr[0],
     decoded_decoded_invInputs[1],
     decoded_decoded_invInputs[2],
     decoded_decoded_invInputs[3],
     decoded_decoded_invInputs[4],
     decoded_decoded_invInputs[5],
     io_rw_addr[6],
     decoded_decoded_invInputs[7],
     io_rw_addr[8],
     decoded_decoded_invInputs[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _GEN_35 =
    {decoded_decoded_invInputs[0],
     io_rw_addr[1],
     decoded_decoded_invInputs[2],
     decoded_decoded_invInputs[3],
     decoded_decoded_invInputs[4],
     decoded_decoded_invInputs[5],
     io_rw_addr[6],
     decoded_decoded_invInputs[7],
     io_rw_addr[8],
     decoded_decoded_invInputs[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _GEN_36 =
    {io_rw_addr[0],
     io_rw_addr[1],
     decoded_decoded_invInputs[2],
     decoded_decoded_invInputs[3],
     decoded_decoded_invInputs[4],
     decoded_decoded_invInputs[5],
     io_rw_addr[6],
     decoded_decoded_invInputs[7],
     io_rw_addr[8],
     decoded_decoded_invInputs[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [9:0]  _GEN_37 =
    {io_rw_addr[2],
     decoded_decoded_invInputs[3],
     decoded_decoded_invInputs[4],
     decoded_decoded_invInputs[5],
     io_rw_addr[6],
     decoded_decoded_invInputs[7],
     io_rw_addr[8],
     decoded_decoded_invInputs[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [4:0]  _GEN_38 =
    {io_rw_addr[7],
     io_rw_addr[8],
     decoded_decoded_invInputs[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _GEN_39 =
    {decoded_decoded_invInputs[0],
     decoded_decoded_invInputs[1],
     decoded_decoded_invInputs[2],
     decoded_decoded_invInputs[3],
     decoded_decoded_invInputs[4],
     decoded_decoded_invInputs[5],
     decoded_decoded_invInputs[6],
     decoded_decoded_invInputs[7],
     io_rw_addr[8],
     io_rw_addr[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _GEN_40 =
    {io_rw_addr[0],
     decoded_decoded_invInputs[1],
     decoded_decoded_invInputs[2],
     decoded_decoded_invInputs[3],
     decoded_decoded_invInputs[4],
     decoded_decoded_invInputs[5],
     decoded_decoded_invInputs[6],
     decoded_decoded_invInputs[7],
     io_rw_addr[8],
     io_rw_addr[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _GEN_41 =
    {decoded_decoded_invInputs[0],
     io_rw_addr[1],
     decoded_decoded_invInputs[2],
     decoded_decoded_invInputs[3],
     decoded_decoded_invInputs[4],
     decoded_decoded_invInputs[5],
     decoded_decoded_invInputs[6],
     decoded_decoded_invInputs[7],
     io_rw_addr[8],
     io_rw_addr[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _GEN_42 =
    {io_rw_addr[0],
     io_rw_addr[1],
     decoded_decoded_invInputs[2],
     decoded_decoded_invInputs[3],
     decoded_decoded_invInputs[4],
     decoded_decoded_invInputs[5],
     decoded_decoded_invInputs[6],
     decoded_decoded_invInputs[7],
     io_rw_addr[8],
     io_rw_addr[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _GEN_43 =
    {decoded_decoded_invInputs[0],
     decoded_decoded_invInputs[1],
     io_rw_addr[2],
     decoded_decoded_invInputs[3],
     decoded_decoded_invInputs[4],
     decoded_decoded_invInputs[5],
     decoded_decoded_invInputs[6],
     decoded_decoded_invInputs[7],
     io_rw_addr[8],
     io_rw_addr[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _GEN_44 =
    {io_rw_addr[0],
     decoded_decoded_invInputs[1],
     io_rw_addr[2],
     decoded_decoded_invInputs[3],
     decoded_decoded_invInputs[4],
     decoded_decoded_invInputs[5],
     decoded_decoded_invInputs[6],
     decoded_decoded_invInputs[7],
     io_rw_addr[8],
     io_rw_addr[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [10:0] _GEN_45 =
    {io_rw_addr[1],
     io_rw_addr[2],
     decoded_decoded_invInputs[3],
     decoded_decoded_invInputs[4],
     decoded_decoded_invInputs[5],
     decoded_decoded_invInputs[6],
     decoded_decoded_invInputs[7],
     io_rw_addr[8],
     io_rw_addr[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [8:0]  _GEN_46 =
    {io_rw_addr[3],
     decoded_decoded_invInputs[4],
     decoded_decoded_invInputs[5],
     decoded_decoded_invInputs[6],
     decoded_decoded_invInputs[7],
     io_rw_addr[8],
     io_rw_addr[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [10:0] _GEN_47 =
    {decoded_decoded_invInputs[1],
     decoded_decoded_invInputs[2],
     decoded_decoded_invInputs[3],
     decoded_decoded_invInputs[4],
     io_rw_addr[5],
     decoded_decoded_invInputs[6],
     decoded_decoded_invInputs[7],
     io_rw_addr[8],
     io_rw_addr[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _GEN_48 =
    {decoded_decoded_invInputs[0],
     decoded_decoded_invInputs[1],
     decoded_decoded_invInputs[2],
     decoded_decoded_invInputs[3],
     decoded_decoded_invInputs[4],
     decoded_decoded_invInputs[5],
     io_rw_addr[6],
     decoded_decoded_invInputs[7],
     io_rw_addr[8],
     io_rw_addr[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _GEN_49 =
    {io_rw_addr[0],
     decoded_decoded_invInputs[1],
     decoded_decoded_invInputs[2],
     decoded_decoded_invInputs[3],
     decoded_decoded_invInputs[4],
     decoded_decoded_invInputs[5],
     io_rw_addr[6],
     decoded_decoded_invInputs[7],
     io_rw_addr[8],
     io_rw_addr[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _GEN_50 =
    {decoded_decoded_invInputs[0],
     io_rw_addr[1],
     decoded_decoded_invInputs[2],
     decoded_decoded_invInputs[3],
     decoded_decoded_invInputs[4],
     decoded_decoded_invInputs[5],
     io_rw_addr[6],
     decoded_decoded_invInputs[7],
     io_rw_addr[8],
     io_rw_addr[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _GEN_51 =
    {io_rw_addr[0],
     io_rw_addr[1],
     decoded_decoded_invInputs[2],
     decoded_decoded_invInputs[3],
     decoded_decoded_invInputs[4],
     decoded_decoded_invInputs[5],
     io_rw_addr[6],
     decoded_decoded_invInputs[7],
     io_rw_addr[8],
     io_rw_addr[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [9:0]  _GEN_52 =
    {io_rw_addr[2],
     decoded_decoded_invInputs[3],
     decoded_decoded_invInputs[4],
     decoded_decoded_invInputs[5],
     io_rw_addr[6],
     decoded_decoded_invInputs[7],
     io_rw_addr[8],
     io_rw_addr[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [10:0] _GEN_53 =
    {decoded_decoded_invInputs[1],
     decoded_decoded_invInputs[2],
     decoded_decoded_invInputs[3],
     decoded_decoded_invInputs[4],
     io_rw_addr[5],
     decoded_decoded_invInputs[6],
     io_rw_addr[7],
     io_rw_addr[8],
     io_rw_addr[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _GEN_54 =
    {decoded_decoded_invInputs[0],
     decoded_decoded_invInputs[1],
     decoded_decoded_invInputs[2],
     decoded_decoded_invInputs[3],
     io_rw_addr[4],
     io_rw_addr[5],
     decoded_decoded_invInputs[6],
     io_rw_addr[7],
     io_rw_addr[8],
     io_rw_addr[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _GEN_55 =
    {io_rw_addr[0],
     decoded_decoded_invInputs[1],
     decoded_decoded_invInputs[2],
     decoded_decoded_invInputs[3],
     io_rw_addr[4],
     io_rw_addr[5],
     decoded_decoded_invInputs[6],
     io_rw_addr[7],
     io_rw_addr[8],
     io_rw_addr[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _GEN_56 =
    {decoded_decoded_invInputs[0],
     io_rw_addr[1],
     decoded_decoded_invInputs[2],
     decoded_decoded_invInputs[3],
     io_rw_addr[4],
     io_rw_addr[5],
     decoded_decoded_invInputs[6],
     io_rw_addr[7],
     io_rw_addr[8],
     io_rw_addr[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _GEN_57 =
    {io_rw_addr[0],
     io_rw_addr[1],
     decoded_decoded_invInputs[2],
     decoded_decoded_invInputs[3],
     io_rw_addr[4],
     io_rw_addr[5],
     decoded_decoded_invInputs[6],
     io_rw_addr[7],
     io_rw_addr[8],
     io_rw_addr[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _GEN_58 =
    {decoded_decoded_invInputs[0],
     decoded_decoded_invInputs[1],
     io_rw_addr[2],
     decoded_decoded_invInputs[3],
     io_rw_addr[4],
     io_rw_addr[5],
     decoded_decoded_invInputs[6],
     io_rw_addr[7],
     io_rw_addr[8],
     io_rw_addr[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _GEN_59 =
    {io_rw_addr[0],
     decoded_decoded_invInputs[1],
     io_rw_addr[2],
     decoded_decoded_invInputs[3],
     io_rw_addr[4],
     io_rw_addr[5],
     decoded_decoded_invInputs[6],
     io_rw_addr[7],
     io_rw_addr[8],
     io_rw_addr[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _GEN_60 =
    {decoded_decoded_invInputs[0],
     io_rw_addr[1],
     io_rw_addr[2],
     decoded_decoded_invInputs[3],
     io_rw_addr[4],
     io_rw_addr[5],
     decoded_decoded_invInputs[6],
     io_rw_addr[7],
     io_rw_addr[8],
     io_rw_addr[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _GEN_61 =
    {io_rw_addr[0],
     io_rw_addr[1],
     io_rw_addr[2],
     decoded_decoded_invInputs[3],
     io_rw_addr[4],
     io_rw_addr[5],
     decoded_decoded_invInputs[6],
     io_rw_addr[7],
     io_rw_addr[8],
     io_rw_addr[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _GEN_62 =
    {io_rw_addr[0],
     decoded_decoded_invInputs[1],
     decoded_decoded_invInputs[2],
     decoded_decoded_invInputs[3],
     decoded_decoded_invInputs[4],
     io_rw_addr[5],
     decoded_decoded_invInputs[6],
     io_rw_addr[7],
     io_rw_addr[8],
     io_rw_addr[9],
     io_rw_addr[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _GEN_63 =
    {decoded_decoded_invInputs[0],
     io_rw_addr[1],
     decoded_decoded_invInputs[2],
     decoded_decoded_invInputs[3],
     decoded_decoded_invInputs[4],
     io_rw_addr[5],
     decoded_decoded_invInputs[6],
     io_rw_addr[7],
     io_rw_addr[8],
     io_rw_addr[9],
     io_rw_addr[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _GEN_64 =
    {decoded_decoded_invInputs[0],
     decoded_decoded_invInputs[1],
     decoded_decoded_invInputs[2],
     decoded_decoded_invInputs[3],
     io_rw_addr[4],
     io_rw_addr[5],
     decoded_decoded_invInputs[6],
     io_rw_addr[7],
     io_rw_addr[8],
     io_rw_addr[9],
     io_rw_addr[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _GEN_65 =
    {io_rw_addr[0],
     decoded_decoded_invInputs[1],
     decoded_decoded_invInputs[2],
     decoded_decoded_invInputs[3],
     io_rw_addr[4],
     io_rw_addr[5],
     decoded_decoded_invInputs[6],
     io_rw_addr[7],
     io_rw_addr[8],
     io_rw_addr[9],
     io_rw_addr[10],
     decoded_decoded_invInputs[11]};
  wire [10:0] _GEN_66 =
    {io_rw_addr[1],
     decoded_decoded_invInputs[2],
     decoded_decoded_invInputs[3],
     io_rw_addr[4],
     io_rw_addr[5],
     decoded_decoded_invInputs[6],
     io_rw_addr[7],
     io_rw_addr[8],
     io_rw_addr[9],
     io_rw_addr[10],
     decoded_decoded_invInputs[11]};
  wire [5:0]  _GEN_67 =
    {io_rw_addr[6],
     io_rw_addr[7],
     io_rw_addr[8],
     io_rw_addr[9],
     io_rw_addr[10],
     decoded_decoded_invInputs[11]};
  wire [10:0] _GEN_68 =
    {decoded_decoded_invInputs[1],
     decoded_decoded_invInputs[2],
     decoded_decoded_invInputs[3],
     decoded_decoded_invInputs[4],
     decoded_decoded_invInputs[5],
     decoded_decoded_invInputs[6],
     decoded_decoded_invInputs[7],
     io_rw_addr[8],
     io_rw_addr[9],
     decoded_decoded_invInputs[10],
     io_rw_addr[11]};
  wire [11:0] _GEN_69 =
    {decoded_decoded_invInputs[0],
     io_rw_addr[1],
     decoded_decoded_invInputs[2],
     decoded_decoded_invInputs[3],
     decoded_decoded_invInputs[4],
     decoded_decoded_invInputs[5],
     decoded_decoded_invInputs[6],
     decoded_decoded_invInputs[7],
     io_rw_addr[8],
     io_rw_addr[9],
     decoded_decoded_invInputs[10],
     io_rw_addr[11]};
  wire [63:0] _GEN_70 = ~((&(io_rw_cmd[1:0])) ? io_rw_wdata : 64'h0);
  wire [63:0] wdata =
    ((io_rw_cmd[1] ? _io_rw_rdata_output : 64'h0) | io_rw_wdata) & _GEN_70;
  wire        system_insn = io_rw_cmd == 3'h4;
  wire [11:0] _GEN_71 = ~io_rw_addr;
  wire        insn_call =
    system_insn
    & (&{_GEN_71[0],
         _GEN_71[1],
         _GEN_71[2],
         _GEN_71[3],
         _GEN_71[4],
         _GEN_71[5],
         _GEN_71[6],
         _GEN_71[7],
         _GEN_71[8],
         _GEN_71[9],
         _GEN_71[10],
         _GEN_71[11]});
  wire        insn_break =
    system_insn
    & (&{io_rw_addr[0],
         _GEN_71[1],
         _GEN_71[2],
         _GEN_71[3],
         _GEN_71[4],
         _GEN_71[5],
         _GEN_71[6],
         _GEN_71[7],
         _GEN_71[8],
         _GEN_71[9],
         _GEN_71[10],
         _GEN_71[11]});
  wire        insn_ret =
    system_insn
    & (|{&{_GEN_71[2],
           _GEN_71[3],
           _GEN_71[4],
           _GEN_71[5],
           _GEN_71[6],
           _GEN_71[7],
           io_rw_addr[8],
           _GEN_71[10],
           _GEN_71[11]},
         &{io_rw_addr[10], _GEN_71[11]}});
  wire [29:0] _GEN_72 = ~(io_decode_0_inst[31:2]);
  wire [9:0]  _GEN_73 =
    {io_decode_0_inst[22],
     _GEN_72[21],
     _GEN_72[22],
     _GEN_72[23],
     _GEN_72[24],
     _GEN_72[25],
     io_decode_0_inst[28],
     _GEN_72[27],
     _GEN_72[28],
     _GEN_72[29]};
  wire [16:0] _GEN_74 =
    {io_decode_0_inst[0],
     io_decode_0_inst[1],
     _GEN_72[0],
     _GEN_72[1],
     io_decode_0_inst[4],
     io_decode_0_inst[5],
     io_decode_0_inst[6],
     _GEN_72[5],
     _GEN_72[6],
     _GEN_72[7],
     io_decode_0_inst[25],
     _GEN_72[24],
     _GEN_72[25],
     io_decode_0_inst[28],
     _GEN_72[27],
     _GEN_72[28],
     _GEN_72[29]};
  wire [1:0]  _GEN_75 =
    {&{io_decode_0_inst[0],
       _GEN_72[20],
       _GEN_72[21],
       _GEN_72[22],
       _GEN_72[23],
       _GEN_72[24],
       _GEN_72[25],
       io_decode_0_inst[28],
       _GEN_72[28],
       _GEN_72[29]},
     &{io_decode_0_inst[30], _GEN_72[29]}};
  wire        is_counter =
    io_decode_0_inst[31:20] > 12'hBFF & io_decode_0_inst[31:20] < 12'hC20
    | io_decode_0_inst[31:20] > 12'hC7F & io_decode_0_inst[31:20] < 12'hCA0;
  wire        allow_sfence_vma = reg_mstatus_prv[1] | ~(~reg_mstatus_v & reg_mstatus_tvm);
  wire [31:0] _GEN_76 = {27'h0, io_decode_0_inst[24:20]};
  wire [31:0] _GEN_77 = _GEN_3 >> _GEN_76;
  wire [31:0] _GEN_78 = _GEN_4 >> _GEN_76;
  wire [31:0] _GEN_79 = 32'h0 >> _GEN_76;
  wire        _io_decode_0_fp_illegal_output =
    reg_mstatus_fs == 2'h0 | reg_mstatus_v | ~(reg_misa[5]);
  wire [3:0]  _GEN_80 = ~(io_decode_0_inst[31:28]);
  wire [3:0]  _GEN_81 = {_GEN_80[0], _GEN_80[1], _GEN_80[2], _GEN_80[3]};
  wire        _GEN_82 = io_decode_0_inst[31:20] == 12'h180;
  wire        csr_exists =
    io_decode_0_inst[31:20] == 12'h7A0 | io_decode_0_inst[31:20] == 12'h7A1
    | io_decode_0_inst[31:20] == 12'h7A2 | io_decode_0_inst[31:20] == 12'h7A3
    | io_decode_0_inst[31:20] == 12'h301 | io_decode_0_inst[31:20] == 12'h300
    | io_decode_0_inst[31:20] == 12'h305 | io_decode_0_inst[31:20] == 12'h344
    | io_decode_0_inst[31:20] == 12'h304 | io_decode_0_inst[31:20] == 12'h340
    | io_decode_0_inst[31:20] == 12'h341 | io_decode_0_inst[31:20] == 12'h343
    | io_decode_0_inst[31:20] == 12'h342 | io_decode_0_inst[31:20] == 12'hF14
    | io_decode_0_inst[31:20] == 12'h7B0 | io_decode_0_inst[31:20] == 12'h7B1
    | io_decode_0_inst[31:20] == 12'h7B2 | io_decode_0_inst[31:20] == 12'h1
    | io_decode_0_inst[31:20] == 12'h2 | io_decode_0_inst[31:20] == 12'h3
    | io_decode_0_inst[31:20] == 12'h320 | io_decode_0_inst[31:20] == 12'hB00
    | io_decode_0_inst[31:20] == 12'hB02 | io_decode_0_inst[31:20] == 12'h323
    | io_decode_0_inst[31:20] == 12'hB03 | io_decode_0_inst[31:20] == 12'hC03
    | io_decode_0_inst[31:20] == 12'h324 | io_decode_0_inst[31:20] == 12'hB04
    | io_decode_0_inst[31:20] == 12'hC04 | io_decode_0_inst[31:20] == 12'h325
    | io_decode_0_inst[31:20] == 12'hB05 | io_decode_0_inst[31:20] == 12'hC05
    | io_decode_0_inst[31:20] == 12'h326 | io_decode_0_inst[31:20] == 12'hB06
    | io_decode_0_inst[31:20] == 12'hC06 | io_decode_0_inst[31:20] == 12'h327
    | io_decode_0_inst[31:20] == 12'hB07 | io_decode_0_inst[31:20] == 12'hC07
    | io_decode_0_inst[31:20] == 12'h328 | io_decode_0_inst[31:20] == 12'hB08
    | io_decode_0_inst[31:20] == 12'hC08 | io_decode_0_inst[31:20] == 12'h329
    | io_decode_0_inst[31:20] == 12'hB09 | io_decode_0_inst[31:20] == 12'hC09
    | io_decode_0_inst[31:20] == 12'h32A | io_decode_0_inst[31:20] == 12'hB0A
    | io_decode_0_inst[31:20] == 12'hC0A | io_decode_0_inst[31:20] == 12'h32B
    | io_decode_0_inst[31:20] == 12'hB0B | io_decode_0_inst[31:20] == 12'hC0B
    | io_decode_0_inst[31:20] == 12'h32C | io_decode_0_inst[31:20] == 12'hB0C
    | io_decode_0_inst[31:20] == 12'hC0C | io_decode_0_inst[31:20] == 12'h32D
    | io_decode_0_inst[31:20] == 12'hB0D | io_decode_0_inst[31:20] == 12'hC0D
    | io_decode_0_inst[31:20] == 12'h32E | io_decode_0_inst[31:20] == 12'hB0E
    | io_decode_0_inst[31:20] == 12'hC0E | io_decode_0_inst[31:20] == 12'h32F
    | io_decode_0_inst[31:20] == 12'hB0F | io_decode_0_inst[31:20] == 12'hC0F
    | io_decode_0_inst[31:20] == 12'h330 | io_decode_0_inst[31:20] == 12'hB10
    | io_decode_0_inst[31:20] == 12'hC10 | io_decode_0_inst[31:20] == 12'h331
    | io_decode_0_inst[31:20] == 12'hB11 | io_decode_0_inst[31:20] == 12'hC11
    | io_decode_0_inst[31:20] == 12'h332 | io_decode_0_inst[31:20] == 12'hB12
    | io_decode_0_inst[31:20] == 12'hC12 | io_decode_0_inst[31:20] == 12'h333
    | io_decode_0_inst[31:20] == 12'hB13 | io_decode_0_inst[31:20] == 12'hC13
    | io_decode_0_inst[31:20] == 12'h334 | io_decode_0_inst[31:20] == 12'hB14
    | io_decode_0_inst[31:20] == 12'hC14 | io_decode_0_inst[31:20] == 12'h335
    | io_decode_0_inst[31:20] == 12'hB15 | io_decode_0_inst[31:20] == 12'hC15
    | io_decode_0_inst[31:20] == 12'h336 | io_decode_0_inst[31:20] == 12'hB16
    | io_decode_0_inst[31:20] == 12'hC16 | io_decode_0_inst[31:20] == 12'h337
    | io_decode_0_inst[31:20] == 12'hB17 | io_decode_0_inst[31:20] == 12'hC17
    | io_decode_0_inst[31:20] == 12'h338 | io_decode_0_inst[31:20] == 12'hB18
    | io_decode_0_inst[31:20] == 12'hC18 | io_decode_0_inst[31:20] == 12'h339
    | io_decode_0_inst[31:20] == 12'hB19 | io_decode_0_inst[31:20] == 12'hC19
    | io_decode_0_inst[31:20] == 12'h33A | io_decode_0_inst[31:20] == 12'hB1A
    | io_decode_0_inst[31:20] == 12'hC1A | io_decode_0_inst[31:20] == 12'h33B
    | io_decode_0_inst[31:20] == 12'hB1B | io_decode_0_inst[31:20] == 12'hC1B
    | io_decode_0_inst[31:20] == 12'h33C | io_decode_0_inst[31:20] == 12'hB1C
    | io_decode_0_inst[31:20] == 12'hC1C | io_decode_0_inst[31:20] == 12'h33D
    | io_decode_0_inst[31:20] == 12'hB1D | io_decode_0_inst[31:20] == 12'hC1D
    | io_decode_0_inst[31:20] == 12'h33E | io_decode_0_inst[31:20] == 12'hB1E
    | io_decode_0_inst[31:20] == 12'hC1E | io_decode_0_inst[31:20] == 12'h33F
    | io_decode_0_inst[31:20] == 12'hB1F | io_decode_0_inst[31:20] == 12'hC1F
    | io_decode_0_inst[31:20] == 12'h306 | io_decode_0_inst[31:20] == 12'hC00
    | io_decode_0_inst[31:20] == 12'hC02 | io_decode_0_inst[31:20] == 12'h30A
    | io_decode_0_inst[31:20] == 12'h100 | io_decode_0_inst[31:20] == 12'h144
    | io_decode_0_inst[31:20] == 12'h104 | io_decode_0_inst[31:20] == 12'h140
    | io_decode_0_inst[31:20] == 12'h142 | io_decode_0_inst[31:20] == 12'h143 | _GEN_82
    | io_decode_0_inst[31:20] == 12'h141 | io_decode_0_inst[31:20] == 12'h105
    | io_decode_0_inst[31:20] == 12'h106 | io_decode_0_inst[31:20] == 12'h303
    | io_decode_0_inst[31:20] == 12'h302 | io_decode_0_inst[31:20] == 12'h10A
    | io_decode_0_inst[31:20] == 12'h3A0 | io_decode_0_inst[31:20] == 12'h3A2
    | io_decode_0_inst[31:20] == 12'h3B0 | io_decode_0_inst[31:20] == 12'h3B1
    | io_decode_0_inst[31:20] == 12'h3B2 | io_decode_0_inst[31:20] == 12'h3B3
    | io_decode_0_inst[31:20] == 12'h3B4 | io_decode_0_inst[31:20] == 12'h3B5
    | io_decode_0_inst[31:20] == 12'h3B6 | io_decode_0_inst[31:20] == 12'h3B7
    | io_decode_0_inst[31:20] == 12'h3B8 | io_decode_0_inst[31:20] == 12'h3B9
    | io_decode_0_inst[31:20] == 12'h3BA | io_decode_0_inst[31:20] == 12'h3BB
    | io_decode_0_inst[31:20] == 12'h3BC | io_decode_0_inst[31:20] == 12'h3BD
    | io_decode_0_inst[31:20] == 12'h3BE | io_decode_0_inst[31:20] == 12'h3BF
    | io_decode_0_inst[31:20] == 12'h7C1 | io_decode_0_inst[31:20] == 12'hF12
    | io_decode_0_inst[31:20] == 12'hF11 | io_decode_0_inst[31:20] == 12'hF13
    | io_decode_0_inst[31:20] == 12'hF15;
  wire        _GEN_83 = reg_mstatus_prv < io_decode_0_inst[29:28];
  wire [5:0]  _GEN_84 = ~(io_decode_0_inst[31:26]);
  wire [11:0] io_decode_0_write_flush_addr_m =
    {io_decode_0_inst[31:30], io_decode_0_inst[29:20] | 10'h300};
  wire        _GEN_85 = io_decode_0_inst[29:28] == 2'h1;
  wire [63:0] _GEN_86 =
    {60'h0, {2'h0, reg_mstatus_prv[0] & reg_mstatus_v ? 2'h2 : reg_mstatus_prv} - 4'h8};
  wire [63:0] cause = insn_call ? _GEN_86 : insn_break ? 64'h3 : io_cause;
  wire        _GEN_87 = cause[7:0] == 8'hE;
  wire        causeIsDebugInt = cause[63] & _GEN_87;
  wire        causeIsDebugTrigger = ~(cause[63]) & _GEN_87;
  wire [3:0]  _GEN_88 =
    {reg_dcsr_ebreakm, 1'h0, reg_dcsr_ebreaks, reg_dcsr_ebreaku} >> reg_mstatus_prv;
  wire        trapToDebug =
    reg_singleStepped | causeIsDebugInt | causeIsDebugTrigger | ~(cause[63]) & insn_break
    & _GEN_88[0] | reg_debug;
  wire [63:0] _GEN_89 = {58'h0, cause[5:0]};
  wire [63:0] _GEN_90 = _GEN_1 >> _GEN_89;
  wire [63:0] _GEN_91 = _GEN_2 >> _GEN_89;
  wire        delegate = ~(reg_mstatus_prv[1]) & (cause[63] ? _GEN_90[0] : _GEN_91[0]);
  wire        _GEN_92 = reg_mstatus_v & delegate;
  wire [63:0] _GEN_93 = 64'h0 >> _GEN_89;
  wire        delegateVS = _GEN_92 & _GEN_93[0];
  wire [39:0] _GEN_94 =
    delegate ? (delegateVS ? 40'h0 : {_GEN_17[38], _GEN_17}) : {8'h0, _GEN_16};
  wire        _GEN_95 = insn_call | insn_break;
  assign _io_singleStep_output = reg_dcsr_step & ~reg_debug;
  wire        _GEN_96 = reg_mstatus_mprv & ~reg_debug;
  wire        _io_trace_0_exception_output = _GEN_95 | io_exception;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      automatic logic [2:0] _GEN_97 =
        {1'h0, {1'h0, insn_ret} + {1'h0, insn_call}}
        + {1'h0, {1'h0, insn_break} + {1'h0, io_exception}};
      if (~reset & (|(_GEN_97[2:1]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: these conditions must be mutually exclusive\n    at CSR.scala:1022 assert(PopCount(insn_ret :: insn_call :: insn_break :: io.exception :: Nil) <= 1.U, \"these conditions must be mutually exclusive\")\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~reg_singleStepped | ~io_retire)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at CSR.scala:1031 assert(!reg_singleStepped || io.retire === 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  wire        _GEN_98 = delegateVS | delegate;
  wire [1:0]  _GEN_99 = {~_GEN_98, 1'h1};
  wire [1:0]  _GEN_100 = {1'h0, reg_mstatus_v ? reg_vsstatus_spp : reg_mstatus_spp};
  wire [39:0] _GEN_101 = ~reg_vsepc;
  wire        _GEN_102 = io_rw_addr[10] & io_rw_addr[7];
  wire [1:0]  ret_prv =
    io_rw_addr[9] ? (_GEN_102 ? reg_dcsr_prv : reg_mstatus_mpp) : _GEN_100;
  wire        _io_csr_stall_output = reg_wfi | io_status_cease_r;
  wire [63:0] _GEN_103 =
    ((&_GEN_62)
       ? {4'h2,
          reg_bp_0_control_dmode,
          46'h40000000000,
          reg_bp_0_control_action,
          reg_bp_0_control_chain,
          2'h0,
          reg_bp_0_control_tmatch,
          reg_bp_0_control_m,
          1'h0,
          reg_bp_0_control_s,
          reg_bp_0_control_u,
          reg_bp_0_control_x,
          reg_bp_0_control_w,
          reg_bp_0_control_r}
       : 64'h0) | ((&_GEN_63) ? {{25{reg_bp_0_address[38]}}, reg_bp_0_address} : 64'h0)
    | ((&_GEN_40) ? reg_misa : 64'h0)
    | ((&_GEN_39)
         ? {&reg_mstatus_fs,
            23'h0,
            reg_mstatus_mpv,
            reg_mstatus_gva,
            15'h1400,
            reg_mstatus_tsr,
            reg_mstatus_tw,
            reg_mstatus_tvm,
            reg_mstatus_mxr,
            reg_mstatus_sum,
            reg_mstatus_mprv,
            2'h0,
            reg_mstatus_fs,
            reg_mstatus_mpp,
            2'h0,
            reg_mstatus_spp,
            reg_mstatus_mpie,
            1'h0,
            reg_mstatus_spie,
            1'h0,
            reg_mstatus_mie,
            1'h0,
            reg_mstatus_sie,
            1'h0}
         : 64'h0) | ((&_GEN_44) ? {32'h0, _GEN_16} : 64'h0);
  wire [63:0] _GEN_104 =
    {_GEN_103[63:16], _GEN_103[15:0] | ((&_GEN_52) ? read_mip : 16'h0)}
    | ((&_GEN_43) ? reg_mie : 64'h0) | ((&_GEN_48) ? reg_mscratch : 64'h0)
    | ((&_GEN_49) ? {{24{_GEN_20[39]}}, _GEN_20} : 64'h0)
    | ((&_GEN_51) ? {{24{reg_mtval[39]}}, reg_mtval} : 64'h0)
    | ((&_GEN_50) ? reg_mcause : 64'h0);
  wire [63:0] _GEN_105 =
    {_GEN_104[63:32],
     {_GEN_104[31:1],
      _GEN_104[0]
        | (&{decoded_decoded_invInputs[0],
             decoded_decoded_invInputs[1],
             io_rw_addr[2],
             decoded_decoded_invInputs[3],
             io_rw_addr[4],
             decoded_decoded_invInputs[5],
             decoded_decoded_invInputs[6],
             decoded_decoded_invInputs[7],
             io_rw_addr[8],
             io_rw_addr[9],
             io_rw_addr[10],
             io_rw_addr[11]}) & io_hartid}
       | ((&_GEN_64)
            ? {16'h4000,
               reg_dcsr_ebreakm,
               1'h0,
               reg_dcsr_ebreaks,
               reg_dcsr_ebreaku,
               3'h0,
               reg_dcsr_cause,
               reg_dcsr_v,
               2'h0,
               reg_dcsr_step,
               reg_dcsr_prv}
            : 32'h0)} | ((&_GEN_65) ? {{24{_GEN_22[39]}}, _GEN_22} : 64'h0)
    | ((&_GEN_66) ? reg_dscratch0 : 64'h0);
  wire [4:0]  _GEN_106 = _GEN_105[4:0] | ((&_GEN_25) ? reg_fflags : 5'h0);
  wire [7:0]  _GEN_107 =
    {_GEN_105[7:5], _GEN_106[4:3], _GEN_106[2:0] | ((&_GEN_26) ? reg_frm : 3'h0)}
    | ((&_GEN_27) ? {reg_frm, reg_fflags} : 8'h0);
  wire [63:0] _GEN_108 =
    {_GEN_105[63:8],
     _GEN_107[7:3],
     _GEN_107[2:0] | ((&_GEN_47) ? reg_mcountinhibit : 3'h0)}
    | ((&_GEN_68) ? value_1 : 64'h0) | ((&_GEN_69) ? value : 64'h0);
  wire [63:0] _GEN_109 =
    {_GEN_108[63:32], _GEN_108[31:0] | ((&_GEN_45) ? _GEN_3 : 32'h0)}
    | ((&{decoded_decoded_invInputs[1],
          decoded_decoded_invInputs[2],
          decoded_decoded_invInputs[3],
          decoded_decoded_invInputs[4],
          decoded_decoded_invInputs[5],
          decoded_decoded_invInputs[6],
          decoded_decoded_invInputs[7],
          decoded_decoded_invInputs[8],
          decoded_decoded_invInputs[9],
          io_rw_addr[10],
          io_rw_addr[11]})
         ? value_1
         : 64'h0)
    | ((&{decoded_decoded_invInputs[0],
          io_rw_addr[1],
          decoded_decoded_invInputs[2],
          decoded_decoded_invInputs[3],
          decoded_decoded_invInputs[4],
          decoded_decoded_invInputs[5],
          decoded_decoded_invInputs[6],
          decoded_decoded_invInputs[7],
          decoded_decoded_invInputs[8],
          decoded_decoded_invInputs[9],
          io_rw_addr[10],
          io_rw_addr[11]})
         ? value
         : 64'h0) | ((&_GEN_46) ? {63'h0, reg_menvcfg_fiom} : 64'h0)
    | ((&_GEN_28)
         ? {&reg_mstatus_fs,
            43'h2000,
            reg_mstatus_mxr,
            reg_mstatus_sum,
            3'h0,
            reg_mstatus_fs,
            4'h0,
            reg_mstatus_spp,
            2'h0,
            reg_mstatus_spie,
            3'h0,
            reg_mstatus_sie,
            1'h0}
         : 64'h0)
    | ((&_GEN_37)
         ? {48'h0,
            {4'h0,
             io_interrupts_meip,
             1'h0,
             mip_seip,
             1'h0,
             io_interrupts_mtip,
             1'h0,
             reg_mip_stip,
             1'h0,
             io_interrupts_msip,
             1'h0,
             reg_mip_ssip,
             1'h0} & _GEN_0}
         : 64'h0) | ((&_GEN_29) ? {48'h0, reg_mie[15:0] & _GEN_0} : 64'h0)
    | ((&_GEN_33) ? reg_sscratch : 64'h0) | ((&_GEN_35) ? reg_scause : 64'h0)
    | ((&_GEN_36) ? {{24{reg_stval[39]}}, reg_stval} : 64'h0)
    | ((&_GEN_38) ? {reg_satp_mode, 16'h0, reg_satp_ppn} : 64'h0)
    | ((&_GEN_34) ? {{24{_GEN_24[39]}}, _GEN_24} : 64'h0)
    | ((&_GEN_30) ? {{25{_GEN_17[38]}}, _GEN_17} : 64'h0);
  wire [63:0] _GEN_110 =
    {_GEN_109[63:32], _GEN_109[31:0] | ((&_GEN_31) ? _GEN_4 : 32'h0)}
    | ((&_GEN_42) ? _GEN_1 : 64'h0) | ((&_GEN_41) ? _GEN_2 : 64'h0)
    | ((&_GEN_32) ? {63'h0, reg_senvcfg_fiom} : 64'h0)
    | ((&_GEN_53)
         ? {reg_pmp_7_cfg_l,
            2'h0,
            reg_pmp_7_cfg_a,
            reg_pmp_7_cfg_x,
            reg_pmp_7_cfg_w,
            reg_pmp_7_cfg_r,
            reg_pmp_6_cfg_l,
            2'h0,
            reg_pmp_6_cfg_a,
            reg_pmp_6_cfg_x,
            reg_pmp_6_cfg_w,
            reg_pmp_6_cfg_r,
            reg_pmp_5_cfg_l,
            2'h0,
            reg_pmp_5_cfg_a,
            reg_pmp_5_cfg_x,
            reg_pmp_5_cfg_w,
            reg_pmp_5_cfg_r,
            reg_pmp_4_cfg_l,
            2'h0,
            reg_pmp_4_cfg_a,
            reg_pmp_4_cfg_x,
            reg_pmp_4_cfg_w,
            reg_pmp_4_cfg_r,
            reg_pmp_3_cfg_l,
            2'h0,
            reg_pmp_3_cfg_a,
            reg_pmp_3_cfg_x,
            reg_pmp_3_cfg_w,
            reg_pmp_3_cfg_r,
            reg_pmp_2_cfg_l,
            2'h0,
            reg_pmp_2_cfg_a,
            reg_pmp_2_cfg_x,
            reg_pmp_2_cfg_w,
            reg_pmp_2_cfg_r,
            reg_pmp_1_cfg_l,
            2'h0,
            reg_pmp_1_cfg_a,
            reg_pmp_1_cfg_x,
            reg_pmp_1_cfg_w,
            reg_pmp_1_cfg_r,
            reg_pmp_0_cfg_l,
            2'h0,
            reg_pmp_0_cfg_a,
            reg_pmp_0_cfg_x,
            reg_pmp_0_cfg_w,
            reg_pmp_0_cfg_r}
         : 64'h0);
  wire [29:0] _GEN_111 =
    _GEN_110[29:0] | ((&_GEN_54) ? reg_pmp_0_addr : 30'h0)
    | ((&_GEN_55) ? reg_pmp_1_addr : 30'h0) | ((&_GEN_56) ? reg_pmp_2_addr : 30'h0)
    | ((&_GEN_57) ? reg_pmp_3_addr : 30'h0) | ((&_GEN_58) ? reg_pmp_4_addr : 30'h0)
    | ((&_GEN_59) ? reg_pmp_5_addr : 30'h0) | ((&_GEN_60) ? reg_pmp_6_addr : 30'h0)
    | ((&_GEN_61) ? reg_pmp_7_addr : 30'h0);
  assign _io_rw_rdata_output =
    ((&_GEN_67) ? reg_custom_0 : 64'h0)
    | {_GEN_110[63:30],
       _GEN_111[29:1],
       _GEN_111[0]
         | (&{decoded_decoded_invInputs[0],
              io_rw_addr[1],
              decoded_decoded_invInputs[2],
              decoded_decoded_invInputs[3],
              io_rw_addr[4],
              decoded_decoded_invInputs[5],
              decoded_decoded_invInputs[6],
              decoded_decoded_invInputs[7],
              io_rw_addr[8],
              io_rw_addr[9],
              io_rw_addr[10],
              io_rw_addr[11]})}
    | ((&{io_rw_addr[0],
          io_rw_addr[1],
          decoded_decoded_invInputs[2],
          decoded_decoded_invInputs[3],
          io_rw_addr[4],
          decoded_decoded_invInputs[5],
          decoded_decoded_invInputs[6],
          decoded_decoded_invInputs[7],
          io_rw_addr[8],
          io_rw_addr[9],
          io_rw_addr[10],
          io_rw_addr[11]})
         ? 64'h20181004
         : 64'h0);
  wire        _GEN_112 = io_rw_cmd == 3'h6 | (&io_rw_cmd) | io_rw_cmd == 3'h5;
  always @(posedge clock) begin
    automatic logic [39:0] epc;
    automatic logic        _GEN_113;
    automatic logic        _GEN_114 =
      ~_io_trace_0_exception_output | trapToDebug | ~delegateVS;
    automatic logic        _GEN_115;
    automatic logic        _GEN_116;
    automatic logic        _GEN_117;
    automatic logic [63:0] _GEN_118;
    automatic logic [8:0]  _GEN_119;
    automatic logic [39:0] _GEN_120;
    automatic logic        _GEN_121;
    automatic logic        _GEN_122 = ~reg_bp_0_control_dmode | reg_debug;
    automatic logic        _GEN_123;
    automatic logic        _GEN_124;
    automatic logic        _GEN_125;
    automatic logic        _GEN_126;
    automatic logic        _GEN_127;
    automatic logic        _GEN_128;
    automatic logic        _GEN_129;
    automatic logic        _GEN_130;
    automatic logic        _GEN_131 =
      reg_pmp_7_cfg_l & ~(reg_pmp_7_cfg_a[1]) & reg_pmp_7_cfg_a[0];
    automatic logic        _GEN_132;
    epc = {io_pc[39:1], 1'h0};
    _GEN_113 = _io_trace_0_exception_output & trapToDebug & ~reg_debug;
    _GEN_115 = trapToDebug | delegateVS;
    _GEN_116 = ~_io_trace_0_exception_output | _GEN_115 | ~delegate;
    _GEN_117 = ~_io_trace_0_exception_output | trapToDebug | _GEN_98;
    _GEN_118 = ~wdata;
    _GEN_119 =
      ((io_rw_cmd[1] ? {reg_mip_seip, 3'h0, reg_mip_stip, 3'h0, reg_mip_ssip} : 9'h0)
       | io_rw_wdata[9:1]) & _GEN_70[9:1];
    _GEN_120 = {~(_GEN_118[39:1]), 1'h0};
    _GEN_121 = _GEN_112 & (&_GEN_38) & (wdata[63:60] == 4'h0 | wdata[63:60] == 4'h8);
    _GEN_123 = _GEN_112 & _GEN_122 & (&_GEN_62);
    _GEN_124 = _GEN_112 & (&_GEN_53) & ~reg_pmp_0_cfg_l;
    _GEN_125 = _GEN_112 & (&_GEN_53) & ~reg_pmp_1_cfg_l;
    _GEN_126 = _GEN_112 & (&_GEN_53) & ~reg_pmp_2_cfg_l;
    _GEN_127 = _GEN_112 & (&_GEN_53) & ~reg_pmp_3_cfg_l;
    _GEN_128 = _GEN_112 & (&_GEN_53) & ~reg_pmp_4_cfg_l;
    _GEN_129 = _GEN_112 & (&_GEN_53) & ~reg_pmp_5_cfg_l;
    _GEN_130 = _GEN_112 & (&_GEN_53) & ~reg_pmp_6_cfg_l;
    _GEN_132 = _GEN_112 & (&_GEN_53) & ~reg_pmp_7_cfg_l;
    if (reset) begin
      reg_mstatus_prv <= 2'h3;
      reg_mstatus_v <= 1'h0;
      reg_mstatus_mpv <= 1'h0;
      reg_mstatus_gva <= 1'h0;
      reg_mstatus_tsr <= 1'h0;
      reg_mstatus_tw <= 1'h0;
      reg_mstatus_tvm <= 1'h0;
      reg_mstatus_mxr <= 1'h0;
      reg_mstatus_sum <= 1'h0;
      reg_mstatus_mprv <= 1'h0;
      reg_mstatus_fs <= 2'h0;
      reg_mstatus_mpp <= 2'h3;
      reg_mstatus_spp <= 1'h0;
      reg_mstatus_mpie <= 1'h0;
      reg_mstatus_spie <= 1'h0;
      reg_mstatus_mie <= 1'h0;
      reg_mstatus_sie <= 1'h0;
      reg_dcsr_ebreakm <= 1'h0;
      reg_dcsr_ebreaks <= 1'h0;
      reg_dcsr_ebreaku <= 1'h0;
      reg_dcsr_cause <= 3'h0;
      reg_dcsr_v <= 1'h0;
      reg_dcsr_step <= 1'h0;
      reg_dcsr_prv <= 2'h3;
      reg_debug <= 1'h0;
      reg_bp_0_control_dmode <= 1'h0;
      reg_bp_0_control_action <= 1'h0;
      reg_bp_0_control_x <= 1'h0;
      reg_bp_0_control_w <= 1'h0;
      reg_bp_0_control_r <= 1'h0;
      reg_pmp_0_cfg_l <= 1'h0;
      reg_pmp_0_cfg_a <= 2'h0;
      reg_pmp_1_cfg_l <= 1'h0;
      reg_pmp_1_cfg_a <= 2'h0;
      reg_pmp_2_cfg_l <= 1'h0;
      reg_pmp_2_cfg_a <= 2'h0;
      reg_pmp_3_cfg_l <= 1'h0;
      reg_pmp_3_cfg_a <= 2'h0;
      reg_pmp_4_cfg_l <= 1'h0;
      reg_pmp_4_cfg_a <= 2'h0;
      reg_pmp_5_cfg_l <= 1'h0;
      reg_pmp_5_cfg_a <= 2'h0;
      reg_pmp_6_cfg_l <= 1'h0;
      reg_pmp_6_cfg_a <= 2'h0;
      reg_pmp_7_cfg_l <= 1'h0;
      reg_pmp_7_cfg_a <= 2'h0;
      reg_mcause <= 64'h0;
      reg_mtvec <= 32'h0;
      reg_menvcfg_fiom <= 1'h0;
      reg_senvcfg_fiom <= 1'h0;
      reg_hstatus_spvp <= 1'h0;
      reg_satp_mode <= 4'h0;
      reg_mcountinhibit <= 3'h0;
      small_0 <= 6'h0;
      large_0 <= 58'h0;
      reg_misa <= 64'h800000000094112D;
      reg_custom_0 <= 64'h208;
      io_status_cease_r <= 1'h0;
    end
    else begin
      automatic logic _GEN_133;
      automatic logic _GEN_134;
      automatic logic _GEN_135;
      automatic logic _GEN_136;
      automatic logic _GEN_137;
      automatic logic _GEN_138;
      _GEN_133 = _GEN_116 & reg_mstatus_sie;
      _GEN_134 = insn_ret & ~(io_rw_addr[9]) & ~reg_mstatus_v;
      _GEN_135 = _GEN_134 | (_GEN_116 ? reg_mstatus_spie : reg_mstatus_sie);
      _GEN_136 = ~_GEN_134 & (_GEN_116 ? reg_mstatus_spp : reg_mstatus_prv[0]);
      _GEN_137 = ~(io_rw_addr[9]) | _GEN_102;
      _GEN_138 = ~insn_ret | _GEN_137;
      if ((insn_ret
             ? ret_prv
             : _io_trace_0_exception_output
                 ? (trapToDebug ? (reg_debug ? reg_mstatus_prv : 2'h3) : _GEN_99)
                 : reg_mstatus_prv) == 2'h2)
        reg_mstatus_prv <= 2'h0;
      else if (insn_ret) begin
        if (io_rw_addr[9]) begin
          if (_GEN_102)
            reg_mstatus_prv <= reg_dcsr_prv;
          else
            reg_mstatus_prv <= reg_mstatus_mpp;
        end
        else
          reg_mstatus_prv <= _GEN_100;
      end
      else if (_io_trace_0_exception_output) begin
        if (trapToDebug) begin
          if (reg_debug) begin
          end
          else
            reg_mstatus_prv <= 2'h3;
        end
        else
          reg_mstatus_prv <= _GEN_99;
      end
      reg_mstatus_v <=
        ~insn_ret
        & (_io_trace_0_exception_output
             ? (trapToDebug ? reg_debug & reg_mstatus_v : delegateVS)
             : reg_mstatus_v);
      reg_mstatus_mpv <= _GEN_138 & (_GEN_117 ? reg_mstatus_mpv : reg_mstatus_v);
      if (_GEN_117) begin
      end
      else
        reg_mstatus_gva <= io_gva;
      if (_GEN_112 & (&_GEN_39)) begin
        reg_mstatus_tsr <= wdata[22];
        reg_mstatus_tw <= wdata[21];
        reg_mstatus_tvm <= wdata[20];
        reg_mstatus_mprv <= wdata[17];
        if (wdata[12:11] == 2'h2)
          reg_mstatus_mpp <= 2'h0;
        else
          reg_mstatus_mpp <= wdata[12:11];
        reg_mstatus_mpie <= wdata[7];
        reg_mstatus_mie <= wdata[3];
      end
      else begin
        reg_mstatus_mprv <= ~(insn_ret & ~(ret_prv[1])) & reg_mstatus_mprv;
        if (_GEN_138) begin
          if (_GEN_117) begin
          end
          else
            reg_mstatus_mpp <= reg_mstatus_prv;
        end
        else
          reg_mstatus_mpp <= 2'h0;
        reg_mstatus_mpie <=
          insn_ret & ~_GEN_137 | (_GEN_117 ? reg_mstatus_mpie : reg_mstatus_mie);
        if (_GEN_138)
          reg_mstatus_mie <= _GEN_117 & reg_mstatus_mie;
        else
          reg_mstatus_mie <= reg_mstatus_mpie;
      end
      if (_GEN_112) begin
        if (&_GEN_28) begin
          reg_mstatus_mxr <= wdata[19];
          reg_mstatus_sum <= wdata[18];
          reg_mstatus_fs <= {2{|(wdata[14:13])}};
          reg_mstatus_spp <= wdata[8];
          reg_mstatus_spie <= wdata[5];
          reg_mstatus_sie <= wdata[1];
        end
        else if (&_GEN_39) begin
          reg_mstatus_mxr <= wdata[19];
          reg_mstatus_sum <= wdata[18];
          reg_mstatus_fs <= {2{|(wdata[14:13])}};
          reg_mstatus_spp <= wdata[8];
          reg_mstatus_spie <= wdata[5];
          reg_mstatus_sie <= wdata[1];
        end
        else begin
          reg_mstatus_spp <= _GEN_136;
          reg_mstatus_spie <= _GEN_135;
          if (_GEN_134)
            reg_mstatus_sie <= reg_mstatus_spie;
          else
            reg_mstatus_sie <= _GEN_133;
        end
      end
      else begin
        reg_mstatus_spp <= _GEN_136;
        reg_mstatus_spie <= _GEN_135;
        if (_GEN_134)
          reg_mstatus_sie <= reg_mstatus_spie;
        else
          reg_mstatus_sie <= _GEN_133;
      end
      if (_GEN_112 & (&_GEN_64)) begin
        reg_dcsr_ebreakm <= wdata[15];
        reg_dcsr_ebreaks <= wdata[13];
        reg_dcsr_ebreaku <= wdata[12];
        reg_dcsr_step <= wdata[2];
        if (wdata[1:0] == 2'h2)
          reg_dcsr_prv <= 2'h0;
        else
          reg_dcsr_prv <= wdata[1:0];
      end
      else if (_GEN_113)
        reg_dcsr_prv <= reg_mstatus_prv;
      if (_GEN_113) begin
        if (reg_singleStepped)
          reg_dcsr_cause <= 3'h4;
        else
          reg_dcsr_cause <=
            {1'h0, causeIsDebugInt ? 2'h3 : causeIsDebugTrigger ? 2'h2 : 2'h1};
        reg_dcsr_v <= reg_mstatus_v;
      end
      reg_debug <= (~insn_ret | ~(io_rw_addr[9]) | ~_GEN_102) & (_GEN_113 | reg_debug);
      if (_GEN_123) begin
        automatic logic [47:0] _GEN_139 =
          ((io_rw_cmd[1]
              ? {reg_bp_0_control_dmode, 46'h40000000000, reg_bp_0_control_action}
              : 48'h0) | io_rw_wdata[59:12]) & _GEN_70[59:12];
        automatic logic        dMode = _GEN_139[47] & reg_debug;
        reg_bp_0_control_dmode <= dMode;
        reg_bp_0_control_action <= dMode & _GEN_139[0];
        reg_bp_0_control_x <= wdata[2];
        reg_bp_0_control_w <= wdata[1];
        reg_bp_0_control_r <= wdata[0];
      end
      if (_GEN_124) begin
        reg_pmp_0_cfg_l <= wdata[7];
        reg_pmp_0_cfg_a <= wdata[4:3];
      end
      if (_GEN_125) begin
        reg_pmp_1_cfg_l <= wdata[15];
        reg_pmp_1_cfg_a <= wdata[12:11];
      end
      if (_GEN_126) begin
        reg_pmp_2_cfg_l <= wdata[23];
        reg_pmp_2_cfg_a <= wdata[20:19];
      end
      if (_GEN_127) begin
        reg_pmp_3_cfg_l <= wdata[31];
        reg_pmp_3_cfg_a <= wdata[28:27];
      end
      if (_GEN_128) begin
        reg_pmp_4_cfg_l <= wdata[39];
        reg_pmp_4_cfg_a <= wdata[36:35];
      end
      if (_GEN_129) begin
        reg_pmp_5_cfg_l <= wdata[47];
        reg_pmp_5_cfg_a <= wdata[44:43];
      end
      if (_GEN_130) begin
        reg_pmp_6_cfg_l <= wdata[55];
        reg_pmp_6_cfg_a <= wdata[52:51];
      end
      if (_GEN_132) begin
        reg_pmp_7_cfg_l <= wdata[63];
        reg_pmp_7_cfg_a <= wdata[60:59];
      end
      if (_GEN_112 & (&_GEN_50))
        reg_mcause <= wdata & 64'h800000000000000F;
      else if (_GEN_117) begin
      end
      else if (insn_call)
        reg_mcause <= _GEN_86;
      else if (insn_break)
        reg_mcause <= 64'h3;
      else
        reg_mcause <= io_cause;
      if (_GEN_112 & (&_GEN_44))
        reg_mtvec <= wdata[31:0];
      if (_GEN_112 & (&_GEN_46))
        reg_menvcfg_fiom <= wdata[0];
      if (_GEN_112 & (&_GEN_32))
        reg_senvcfg_fiom <= wdata[0];
      if (~_io_trace_0_exception_output | _GEN_115 | ~_GEN_92) begin
      end
      else
        reg_hstatus_spvp <= reg_mstatus_prv[0];
      if (_GEN_121)
        reg_satp_mode <= {wdata[63], 3'h0};
      if (_GEN_112 & (&_GEN_47))
        reg_mcountinhibit <= wdata[2:0] & 3'h5;
      if (_GEN_112 & (&_GEN_69)) begin
        small_0 <= wdata[5:0];
        large_0 <= wdata[63:6];
      end
      else begin
        automatic logic [6:0] nextSmall;
        nextSmall = {1'h0, small_0} + {6'h0, io_retire};
        if (reg_mcountinhibit[2]) begin
        end
        else
          small_0 <= nextSmall[5:0];
        if (nextSmall[6] & ~(reg_mcountinhibit[2]))
          large_0 <= large_0 + 58'h1;
      end
      if (_GEN_112 & (&_GEN_40) & (~(io_pc[1]) | wdata[2]))
        reg_misa <=
          ~{_GEN_118[63:4], _GEN_118[3:0] | {~(wdata[5]), 3'h0}} & 64'h102D | reg_misa
          & 64'hFFFFFFFFFFFFEFD2;
      if (_GEN_112 & (&_GEN_67))
        reg_custom_0 <= wdata & 64'h208 | reg_custom_0 & 64'hFFFFFFFFFFFFFDF7;
      io_status_cease_r <=
        system_insn
        & (&{io_rw_addr[2],
             _GEN_71[3],
             _GEN_71[4],
             _GEN_71[5],
             _GEN_71[6],
             _GEN_71[7],
             io_rw_addr[8],
             io_rw_addr[9],
             _GEN_71[10],
             _GEN_71[11]}) | io_status_cease_r;
    end
    if (_GEN_112 & (&_GEN_65))
      reg_dpc <= _GEN_120;
    else if (_GEN_113)
      reg_dpc <= epc;
    if (_GEN_112 & (&_GEN_66))
      reg_dscratch0 <= wdata;
    reg_singleStepped <=
      _io_singleStep_output
      & (io_retire | _io_trace_0_exception_output | reg_singleStepped);
    reg_bp_0_control_chain <= ~(reset | _GEN_123) & reg_bp_0_control_chain;
    if (_GEN_123) begin
      reg_bp_0_control_tmatch <= wdata[8:7];
      reg_bp_0_control_m <= wdata[6];
      reg_bp_0_control_s <= wdata[4];
      reg_bp_0_control_u <= wdata[3];
    end
    if (_GEN_112 & _GEN_122 & (&_GEN_63))
      reg_bp_0_address <= wdata[38:0];
    if (_GEN_124) begin
      reg_pmp_0_cfg_x <= wdata[2];
      reg_pmp_0_cfg_w <= wdata[1] & wdata[0];
      reg_pmp_0_cfg_r <= wdata[0];
    end
    if (_GEN_112 & (&_GEN_54)
        & ~(reg_pmp_0_cfg_l | reg_pmp_1_cfg_l & ~(reg_pmp_1_cfg_a[1])
            & reg_pmp_1_cfg_a[0]))
      reg_pmp_0_addr <= wdata[29:0];
    if (_GEN_125) begin
      reg_pmp_1_cfg_x <= wdata[10];
      reg_pmp_1_cfg_w <= wdata[9] & wdata[8];
      reg_pmp_1_cfg_r <= wdata[8];
    end
    if (_GEN_112 & (&_GEN_55)
        & ~(reg_pmp_1_cfg_l | reg_pmp_2_cfg_l & ~(reg_pmp_2_cfg_a[1])
            & reg_pmp_2_cfg_a[0]))
      reg_pmp_1_addr <= wdata[29:0];
    if (_GEN_126) begin
      reg_pmp_2_cfg_x <= wdata[18];
      reg_pmp_2_cfg_w <= wdata[17] & wdata[16];
      reg_pmp_2_cfg_r <= wdata[16];
    end
    if (_GEN_112 & (&_GEN_56)
        & ~(reg_pmp_2_cfg_l | reg_pmp_3_cfg_l & ~(reg_pmp_3_cfg_a[1])
            & reg_pmp_3_cfg_a[0]))
      reg_pmp_2_addr <= wdata[29:0];
    if (_GEN_127) begin
      reg_pmp_3_cfg_x <= wdata[26];
      reg_pmp_3_cfg_w <= wdata[25] & wdata[24];
      reg_pmp_3_cfg_r <= wdata[24];
    end
    if (_GEN_112 & (&_GEN_57)
        & ~(reg_pmp_3_cfg_l | reg_pmp_4_cfg_l & ~(reg_pmp_4_cfg_a[1])
            & reg_pmp_4_cfg_a[0]))
      reg_pmp_3_addr <= wdata[29:0];
    if (_GEN_128) begin
      reg_pmp_4_cfg_x <= wdata[34];
      reg_pmp_4_cfg_w <= wdata[33] & wdata[32];
      reg_pmp_4_cfg_r <= wdata[32];
    end
    if (_GEN_112 & (&_GEN_58)
        & ~(reg_pmp_4_cfg_l | reg_pmp_5_cfg_l & ~(reg_pmp_5_cfg_a[1])
            & reg_pmp_5_cfg_a[0]))
      reg_pmp_4_addr <= wdata[29:0];
    if (_GEN_129) begin
      reg_pmp_5_cfg_x <= wdata[42];
      reg_pmp_5_cfg_w <= wdata[41] & wdata[40];
      reg_pmp_5_cfg_r <= wdata[40];
    end
    if (_GEN_112 & (&_GEN_59)
        & ~(reg_pmp_5_cfg_l | reg_pmp_6_cfg_l & ~(reg_pmp_6_cfg_a[1])
            & reg_pmp_6_cfg_a[0]))
      reg_pmp_5_addr <= wdata[29:0];
    if (_GEN_130) begin
      reg_pmp_6_cfg_x <= wdata[50];
      reg_pmp_6_cfg_w <= wdata[49] & wdata[48];
      reg_pmp_6_cfg_r <= wdata[48];
    end
    if (_GEN_112 & (&_GEN_60) & ~(reg_pmp_6_cfg_l | _GEN_131))
      reg_pmp_6_addr <= wdata[29:0];
    if (_GEN_132) begin
      reg_pmp_7_cfg_x <= wdata[58];
      reg_pmp_7_cfg_w <= wdata[57] & wdata[56];
      reg_pmp_7_cfg_r <= wdata[56];
    end
    if (_GEN_112 & (&_GEN_61) & ~(reg_pmp_7_cfg_l | _GEN_131))
      reg_pmp_7_addr <= wdata[29:0];
    if (_GEN_112) begin
      if (&_GEN_29) begin
        automatic logic [63:0] _GEN_140 = reg_mie & {54'h3FFFFFFFFFFFFF, ~_GEN, 1'h1};
        reg_mie <= {_GEN_140[63:16], _GEN_140[15:0] | wdata[15:0] & _GEN_0};
      end
      else if (&_GEN_43)
        reg_mie <= {52'h0, wdata[11:1] & 11'h555, 1'h0};
      if (&_GEN_37)
        reg_mip_ssip <= ~(reg_mideleg[1]) & reg_mip_ssip | wdata[1] & reg_mideleg[1];
      else if (&_GEN_52)
        reg_mip_ssip <= _GEN_119[0];
      if (&_GEN_27)
        reg_frm <= wdata[7:5];
      else if (&_GEN_26)
        reg_frm <= wdata[2:0];
    end
    if (_GEN_112 & (&_GEN_42))
      reg_mideleg <= wdata;
    if (_GEN_112 & (&_GEN_41))
      reg_medeleg <= wdata;
    if (_GEN_112 & (&_GEN_52)) begin
      reg_mip_seip <= _GEN_119[8];
      reg_mip_stip <= _GEN_119[4];
    end
    if (_GEN_112 & (&_GEN_49))
      reg_mepc <= _GEN_120;
    else if (_GEN_117) begin
    end
    else
      reg_mepc <= epc;
    if (_GEN_112 & (&_GEN_51))
      reg_mtval <= wdata[39:0];
    else if (_GEN_117) begin
    end
    else if (insn_break)
      reg_mtval <= epc;
    else
      reg_mtval <= io_tval;
    if (_GEN_112 & (&_GEN_48))
      reg_mscratch <= wdata;
    if (_GEN_112 & (&_GEN_45))
      reg_mcounteren <= wdata[31:0];
    if (_GEN_112 & (&_GEN_31))
      reg_scounteren <= wdata[31:0];
    reg_vsstatus_spp <=
      (~(insn_ret & ~(io_rw_addr[9])) | ~reg_mstatus_v)
      & (_GEN_114 ? reg_vsstatus_spp : reg_mstatus_prv[0]);
    if (_GEN_114) begin
    end
    else
      reg_vsepc <= epc;
    if (_GEN_112 & (&_GEN_34))
      reg_sepc <= _GEN_120;
    else if (_GEN_116) begin
    end
    else
      reg_sepc <= epc;
    if (_GEN_112 & (&_GEN_35))
      reg_scause <= wdata & 64'h800000000000001F;
    else if (_GEN_116) begin
    end
    else if (insn_call)
      reg_scause <= _GEN_86;
    else if (insn_break)
      reg_scause <= 64'h3;
    else
      reg_scause <= io_cause;
    if (_GEN_112 & (&_GEN_36))
      reg_stval <= wdata[39:0];
    else if (_GEN_116) begin
    end
    else if (insn_break)
      reg_stval <= epc;
    else
      reg_stval <= io_tval;
    if (_GEN_112 & (&_GEN_33))
      reg_sscratch <= wdata;
    if (_GEN_112 & (&_GEN_30))
      reg_stvec <= wdata[38:0];
    if (_GEN_121)
      reg_satp_ppn <= {24'h0, wdata[19:0]};
    if (_GEN_112 & ((&_GEN_27) | (&_GEN_25)))
      reg_fflags <= wdata[4:0];
    else
      reg_fflags <= {5{io_fcsr_flags_valid}} & io_fcsr_flags_bits | reg_fflags;
  end // always @(posedge)
  always @(posedge io_ungated_clock) begin
    if (reset) begin
      reg_wfi <= 1'h0;
      small_1 <= 6'h0;
      large_1 <= 58'h0;
    end
    else begin
      reg_wfi <=
        ~((|{_GEN_5[11], _GEN_5[9], _GEN_5[7], _GEN_5[5], _GEN_5[3], _GEN_5[1]})
          | io_interrupts_debug | _io_trace_0_exception_output)
        & (system_insn
           & (&{io_rw_addr[2],
                _GEN_71[3],
                _GEN_71[4],
                _GEN_71[5],
                _GEN_71[6],
                _GEN_71[7],
                io_rw_addr[8],
                _GEN_71[9],
                _GEN_71[10],
                _GEN_71[11]}) & ~_io_singleStep_output & ~reg_debug | reg_wfi);
      if (_GEN_112 & (&_GEN_68)) begin
        small_1 <= wdata[5:0];
        large_1 <= wdata[63:6];
      end
      else begin
        automatic logic [6:0] nextSmall_1;
        nextSmall_1 = {1'h0, small_1} + {6'h0, ~_io_csr_stall_output};
        if (reg_mcountinhibit[0]) begin
        end
        else
          small_1 <= nextSmall_1[5:0];
        if (nextSmall_1[6] & ~(reg_mcountinhibit[0]))
          large_1 <= large_1 + 58'h1;
      end
    end
  end // always @(posedge)
  assign io_rw_rdata = _io_rw_rdata_output;
  assign io_decode_0_fp_illegal = _io_decode_0_fp_illegal_output;
  assign io_decode_0_fp_csr = &_GEN_81;
  assign io_decode_0_rocc_illegal = 1'h1;
  assign io_decode_0_read_illegal =
    _GEN_83 | ~csr_exists | (_GEN_82 | io_decode_0_inst[31:20] == 12'h680)
    & ~allow_sfence_vma | is_counter
    & ~((reg_mstatus_prv[1] | _GEN_77[0]) & ((|reg_mstatus_prv) | _GEN_78[0]))
    | (&{io_decode_0_inst[24],
         io_decode_0_inst[25],
         _GEN_84[0],
         io_decode_0_inst[27],
         io_decode_0_inst[28],
         io_decode_0_inst[29],
         io_decode_0_inst[30],
         _GEN_84[5]}) & ~reg_debug | (&_GEN_81) & _io_decode_0_fp_illegal_output;
  assign io_decode_0_write_illegal = &(io_decode_0_inst[31:30]);
  assign io_decode_0_write_flush =
    ~(io_decode_0_write_flush_addr_m > 12'h33F
      & io_decode_0_write_flush_addr_m < 12'h344);
  assign io_decode_0_system_illegal =
    _GEN_83 | (&_GEN_73) & ~(reg_mstatus_prv[1] | ~reg_mstatus_tw) | (|_GEN_75)
    & ~(reg_mstatus_prv[1] | ~(~reg_mstatus_v & reg_mstatus_tsr)) | (|_GEN_75)
    & io_decode_0_inst[30] & io_decode_0_inst[27] & ~reg_debug | (&_GEN_74)
    & ~allow_sfence_vma;
  assign io_decode_0_virtual_access_illegal =
    reg_mstatus_v & csr_exists
    & (io_decode_0_inst[29:28] == 2'h2 | is_counter & _GEN_77[0]
       & (~(_GEN_79[0]) | ~(reg_mstatus_prv[0]) & ~(_GEN_78[0])) | _GEN_85
       & ~(reg_mstatus_prv[0]));
  assign io_decode_0_virtual_system_illegal =
    reg_mstatus_v
    & ((&_GEN_73) & ~(reg_mstatus_prv[0]) | (|_GEN_75) & _GEN_85 & ~(reg_mstatus_prv[0])
       | (&_GEN_74) & ~(reg_mstatus_prv[0]));
  assign io_csr_stall = _io_csr_stall_output;
  assign io_eret = _GEN_95 | insn_ret;
  assign io_singleStep = _io_singleStep_output;
  assign io_status_debug = reg_debug;
  assign io_status_wfi = reg_wfi;
  assign io_status_isa = reg_misa[31:0];
  assign io_status_dprv = _GEN_96 ? reg_mstatus_mpp : reg_mstatus_prv;
  assign io_status_dv = reg_mstatus_v | _GEN_96 & reg_mstatus_mpv;
  assign io_status_prv = reg_mstatus_prv;
  assign io_status_v = reg_mstatus_v;
  assign io_status_mxr = reg_mstatus_mxr;
  assign io_status_sum = reg_mstatus_sum;
  assign io_hstatus_spvp = reg_hstatus_spvp;
  assign io_ptbr_mode = reg_satp_mode;
  assign io_ptbr_ppn = reg_satp_ppn;
  assign io_evec =
    insn_ret
      ? (io_rw_addr[9]
           ? (_GEN_102 ? _GEN_22 : _GEN_20)
           : reg_mstatus_v ? ~{_GEN_101[39:2], _GEN_101[1:0] | _GEN_19} : _GEN_24)
      : trapToDebug
          ? {28'h0, reg_debug ? {8'h80, ~insn_break, 3'h0} : 12'h800}
          : {_GEN_94[0] & cause[63] & cause[7:6] == 2'h0
               ? {_GEN_94[39:8], cause[5:0]}
               : _GEN_94[39:2],
             2'h0};
  assign io_time = value_1;
  assign io_fcsr_rm = reg_frm;
  assign io_interrupt =
    ((io_interrupts_debug | _GEN_6[15] | _GEN_6[14] | _GEN_6[13] | _GEN_6[12] | _GEN_6[11]
      | _GEN_6[3] | _GEN_6[7] | _GEN_6[9] | _GEN_6[1] | _GEN_6[5] | _GEN_6[10] | _GEN_6[2]
      | _GEN_6[6] | _GEN_6[8] | _GEN_6[0] | _GEN_6[4] | _GEN_7[15] | _GEN_7[14]
      | _GEN_7[13] | _GEN_7[12] | _GEN_7[11] | _GEN_7[3] | _GEN_7[7] | _GEN_7[9]
      | _GEN_7[1] | _GEN_7[5] | _GEN_7[10] | _GEN_7[2] | _GEN_7[6] | _GEN_7[8] | _GEN_7[0]
      | _GEN_7[4]) & ~_io_singleStep_output | reg_singleStepped)
    & ~(reg_debug | io_status_cease_r);
  assign io_interrupt_cause =
    {60'h0,
     io_interrupts_debug
       ? 4'hE
       : _GEN_6[15]
           ? 4'hF
           : _GEN_6[14]
               ? 4'hE
               : _GEN_6[13]
                   ? 4'hD
                   : _GEN_6[12]
                       ? 4'hC
                       : _GEN_6[11]
                           ? 4'hB
                           : _GEN_6[3]
                               ? 4'h3
                               : _GEN_6[7]
                                   ? 4'h7
                                   : _GEN_6[9]
                                       ? 4'h9
                                       : _GEN_6[1]
                                           ? 4'h1
                                           : _GEN_6[5]
                                               ? 4'h5
                                               : _GEN_6[10]
                                                   ? 4'hA
                                                   : _GEN_6[2]
                                                       ? 4'h2
                                                       : _GEN_6[6]
                                                           ? 4'h6
                                                           : _GEN_6[8]
                                                               ? 4'h8
                                                               : _GEN_6[0]
                                                                   ? 4'h0
                                                                   : _GEN_6[4]
                                                                       ? 4'h4
                                                                       : _GEN_7[15]
                                                                           ? 4'hF
                                                                           : _GEN_7[14]
                                                                               ? 4'hE
                                                                               : _GEN_7[13]
                                                                                   ? 4'hD
                                                                                   : _GEN_7[12]
                                                                                       ? 4'hC
                                                                                       : _GEN_7[11]
                                                                                           ? 4'hB
                                                                                           : _GEN_7[3]
                                                                                               ? 4'h3
                                                                                               : _GEN_7[7]
                                                                                                   ? 4'h7
                                                                                                   : _GEN_7[9]
                                                                                                       ? 4'h9
                                                                                                       : _GEN_7[1]
                                                                                                           ? 4'h1
                                                                                                           : _GEN_7[5]
                                                                                                               ? 4'h5
                                                                                                               : _GEN_7[10]
                                                                                                                   ? 4'hA
                                                                                                                   : _GEN_7[2]
                                                                                                                       ? 4'h2
                                                                                                                       : _GEN_7[6]
                                                                                                                           ? 4'h6
                                                                                                                           : _GEN_7[8]
                                                                                                                               ? 4'h8
                                                                                                                               : {1'h0,
                                                                                                                                  ~(_GEN_7[0]),
                                                                                                                                  2'h0}}
    - 64'h8000000000000000;
  assign io_bp_0_control_action = reg_bp_0_control_action;
  assign io_bp_0_control_chain = reg_bp_0_control_chain;
  assign io_bp_0_control_tmatch = reg_bp_0_control_tmatch;
  assign io_bp_0_control_m = reg_bp_0_control_m;
  assign io_bp_0_control_s = reg_bp_0_control_s;
  assign io_bp_0_control_u = reg_bp_0_control_u;
  assign io_bp_0_control_x = reg_bp_0_control_x;
  assign io_bp_0_control_w = reg_bp_0_control_w;
  assign io_bp_0_control_r = reg_bp_0_control_r;
  assign io_bp_0_address = reg_bp_0_address;
  assign io_pmp_0_cfg_l = reg_pmp_0_cfg_l;
  assign io_pmp_0_cfg_a = reg_pmp_0_cfg_a;
  assign io_pmp_0_cfg_x = reg_pmp_0_cfg_x;
  assign io_pmp_0_cfg_w = reg_pmp_0_cfg_w;
  assign io_pmp_0_cfg_r = reg_pmp_0_cfg_r;
  assign io_pmp_0_addr = reg_pmp_0_addr;
  assign io_pmp_0_mask = {_GEN_8 & ~(_GEN_8 + 30'h1), 2'h3};
  assign io_pmp_1_cfg_l = reg_pmp_1_cfg_l;
  assign io_pmp_1_cfg_a = reg_pmp_1_cfg_a;
  assign io_pmp_1_cfg_x = reg_pmp_1_cfg_x;
  assign io_pmp_1_cfg_w = reg_pmp_1_cfg_w;
  assign io_pmp_1_cfg_r = reg_pmp_1_cfg_r;
  assign io_pmp_1_addr = reg_pmp_1_addr;
  assign io_pmp_1_mask = {_GEN_9 & ~(_GEN_9 + 30'h1), 2'h3};
  assign io_pmp_2_cfg_l = reg_pmp_2_cfg_l;
  assign io_pmp_2_cfg_a = reg_pmp_2_cfg_a;
  assign io_pmp_2_cfg_x = reg_pmp_2_cfg_x;
  assign io_pmp_2_cfg_w = reg_pmp_2_cfg_w;
  assign io_pmp_2_cfg_r = reg_pmp_2_cfg_r;
  assign io_pmp_2_addr = reg_pmp_2_addr;
  assign io_pmp_2_mask = {_GEN_10 & ~(_GEN_10 + 30'h1), 2'h3};
  assign io_pmp_3_cfg_l = reg_pmp_3_cfg_l;
  assign io_pmp_3_cfg_a = reg_pmp_3_cfg_a;
  assign io_pmp_3_cfg_x = reg_pmp_3_cfg_x;
  assign io_pmp_3_cfg_w = reg_pmp_3_cfg_w;
  assign io_pmp_3_cfg_r = reg_pmp_3_cfg_r;
  assign io_pmp_3_addr = reg_pmp_3_addr;
  assign io_pmp_3_mask = {_GEN_11 & ~(_GEN_11 + 30'h1), 2'h3};
  assign io_pmp_4_cfg_l = reg_pmp_4_cfg_l;
  assign io_pmp_4_cfg_a = reg_pmp_4_cfg_a;
  assign io_pmp_4_cfg_x = reg_pmp_4_cfg_x;
  assign io_pmp_4_cfg_w = reg_pmp_4_cfg_w;
  assign io_pmp_4_cfg_r = reg_pmp_4_cfg_r;
  assign io_pmp_4_addr = reg_pmp_4_addr;
  assign io_pmp_4_mask = {_GEN_12 & ~(_GEN_12 + 30'h1), 2'h3};
  assign io_pmp_5_cfg_l = reg_pmp_5_cfg_l;
  assign io_pmp_5_cfg_a = reg_pmp_5_cfg_a;
  assign io_pmp_5_cfg_x = reg_pmp_5_cfg_x;
  assign io_pmp_5_cfg_w = reg_pmp_5_cfg_w;
  assign io_pmp_5_cfg_r = reg_pmp_5_cfg_r;
  assign io_pmp_5_addr = reg_pmp_5_addr;
  assign io_pmp_5_mask = {_GEN_13 & ~(_GEN_13 + 30'h1), 2'h3};
  assign io_pmp_6_cfg_l = reg_pmp_6_cfg_l;
  assign io_pmp_6_cfg_a = reg_pmp_6_cfg_a;
  assign io_pmp_6_cfg_x = reg_pmp_6_cfg_x;
  assign io_pmp_6_cfg_w = reg_pmp_6_cfg_w;
  assign io_pmp_6_cfg_r = reg_pmp_6_cfg_r;
  assign io_pmp_6_addr = reg_pmp_6_addr;
  assign io_pmp_6_mask = {_GEN_14 & ~(_GEN_14 + 30'h1), 2'h3};
  assign io_pmp_7_cfg_l = reg_pmp_7_cfg_l;
  assign io_pmp_7_cfg_a = reg_pmp_7_cfg_a;
  assign io_pmp_7_cfg_x = reg_pmp_7_cfg_x;
  assign io_pmp_7_cfg_w = reg_pmp_7_cfg_w;
  assign io_pmp_7_cfg_r = reg_pmp_7_cfg_r;
  assign io_pmp_7_addr = reg_pmp_7_addr;
  assign io_pmp_7_mask = {_GEN_15 & ~(_GEN_15 + 30'h1), 2'h3};
  assign io_inhibit_cycle = reg_mcountinhibit[0];
  assign io_trace_0_valid = io_retire | _io_trace_0_exception_output;
  assign io_trace_0_iaddr = io_pc;
  assign io_trace_0_insn = io_inst_0;
  assign io_trace_0_exception = _io_trace_0_exception_output;
  assign io_customCSRs_0_value = reg_custom_0;
endmodule

module BreakpointUnit(
  input         io_status_debug,
  input  [1:0]  io_status_prv,
  input         io_bp_0_control_action,
                io_bp_0_control_chain,
  input  [1:0]  io_bp_0_control_tmatch,
  input         io_bp_0_control_m,
                io_bp_0_control_s,
                io_bp_0_control_u,
                io_bp_0_control_x,
                io_bp_0_control_w,
                io_bp_0_control_r,
  input  [38:0] io_bp_0_address,
                io_pc,
                io_ea,
  output        io_xcpt_if,
                io_xcpt_ld,
                io_xcpt_st,
                io_debug_if,
                io_debug_ld,
                io_debug_st
);

  wire [3:0]  _GEN =
    {io_bp_0_control_m, 1'h0, io_bp_0_control_s, io_bp_0_control_u} >> io_status_prv;
  wire        en = ~io_status_debug & _GEN[0];
  wire [38:0] _GEN_0 = ~io_ea;
  wire        _GEN_1 = io_bp_0_control_tmatch[0] & io_bp_0_address[0];
  wire        _GEN_2 = _GEN_1 & io_bp_0_address[1];
  wire [3:0]  _GEN_3 =
    {_GEN_2 & io_bp_0_address[2], _GEN_2, _GEN_1, io_bp_0_control_tmatch[0]};
  wire [38:0] _GEN_4 = ~io_bp_0_address;
  wire [38:0] _GEN_5 = {_GEN_4[38:4], _GEN_4[3:0] | _GEN_3};
  wire        _GEN_6 =
    io_bp_0_control_tmatch[1]
      ? io_ea >= io_bp_0_address ^ io_bp_0_control_tmatch[0]
      : {_GEN_0[38:4], _GEN_0[3:0] | _GEN_3} == _GEN_5;
  wire [38:0] _GEN_7 = ~io_pc;
  wire        _GEN_8 = ~io_bp_0_control_chain & en & io_bp_0_control_r & _GEN_6;
  wire        _GEN_9 = ~io_bp_0_control_chain & en & io_bp_0_control_w & _GEN_6;
  wire        _GEN_10 =
    ~io_bp_0_control_chain & en & io_bp_0_control_x
    & (io_bp_0_control_tmatch[1]
         ? io_pc >= io_bp_0_address ^ io_bp_0_control_tmatch[0]
         : {_GEN_7[38:4], _GEN_7[3:0] | _GEN_3} == _GEN_5);
  assign io_xcpt_if = _GEN_10 & ~io_bp_0_control_action;
  assign io_xcpt_ld = _GEN_8 & ~io_bp_0_control_action;
  assign io_xcpt_st = _GEN_9 & ~io_bp_0_control_action;
  assign io_debug_if = _GEN_10 & io_bp_0_control_action;
  assign io_debug_ld = _GEN_8 & io_bp_0_control_action;
  assign io_debug_st = _GEN_9 & io_bp_0_control_action;
endmodule

module RocketALU(
  input         io_dw,
  input  [4:0]  io_fn,
  input  [63:0] io_in2,
                io_in1,
  output [63:0] io_out,
                io_adder_out,
  output        io_cmp_out
);

  wire [63:0] in2_inv = {64{io_fn[3]}} ^ io_in2;
  wire [63:0] in1_xor_in2 = io_in1 ^ in2_inv;
  wire [63:0] _io_adder_out_output = io_in1 + in2_inv + {63'h0, io_fn[3]};
  wire        slt =
    io_in1[63] == io_in2[63]
      ? _io_adder_out_output[63]
      : io_fn[1] ? io_in2[63] : io_in1[63];
  wire [31:0] shin_hi = io_dw ? io_in1[63:32] : {32{io_fn[3] & io_in1[31]}};
  wire        _GEN = io_fn == 5'h13;
  wire        _GEN_0 = io_fn == 5'h5 | io_fn == 5'hB;
  wire [31:0] _GEN_1 = {io_in1[31:16], 16'h0} | shin_hi & 32'hFFFF;
  wire [31:0] _GEN_2 =
    {{io_in1[15:0], _GEN_1[31:24]} & 24'hFF00FF, 8'h0} | _GEN_1 & 32'hFF00FF;
  wire [31:0] _GEN_3 =
    {{io_in1[7:0], _GEN_2[31:12]} & 28'hF0F0F0F, 4'h0} | _GEN_2 & 32'hF0F0F0F;
  wire [45:0] _GEN_4 =
    {io_in1[3:0], _GEN_3, _GEN_2[7:4], _GEN_1[11:8], _GEN_1[15:14]} & 46'h333333333333;
  wire [31:0] _GEN_5 = _GEN_4[45:14] | _GEN_3 & 32'h33333333;
  wire [1:0]  _GEN_6 = _GEN_4[11:10] | _GEN_2[5:4];
  wire [7:0]  _GEN_7 = {_GEN_4[5:0], 2'h0} | {_GEN_1[15:12], shin_hi[19:16]} & 8'h33;
  wire [54:0] _GEN_8 =
    {io_in1[1:0],
     _GEN_5,
     _GEN_3[3:2],
     _GEN_6,
     _GEN_2[7:6],
     _GEN_1[9:8],
     _GEN_7,
     shin_hi[19:18],
     shin_hi[21:20],
     shin_hi[23]} & 55'h55555555555555;
  wire [63:0] shin =
    _GEN_0 | io_fn == 5'h12 | _GEN
      ? {shin_hi, io_in1[31:0]}
      : {io_in1[0],
         _GEN_8[54:23] | _GEN_5 & 32'h55555555,
         _GEN_5[1],
         _GEN_8[21] | _GEN_3[2],
         {_GEN_3[3], 1'h0} | _GEN_6 & 2'h1,
         _GEN_8[18:15] | {_GEN_2[7:6], _GEN_1[9:8]} & 4'h5,
         _GEN_8[14:7] | _GEN_7 & 8'h55,
         _GEN_7[1],
         _GEN_8[5] | shin_hi[18],
         shin_hi[19],
         shin_hi[20],
         {_GEN_8[2:0], 1'h0} | {shin_hi[23:22], shin_hi[25:24]} & 4'h5,
         shin_hi[25],
         shin_hi[26],
         shin_hi[27],
         shin_hi[28],
         shin_hi[29],
         shin_hi[30],
         shin_hi[31]};
  wire [64:0] _GEN_9 =
    $signed($signed({io_fn[3] & shin[63], shin})
            >>> {59'h0, io_in2[5] & io_dw, io_in2[4:0]});
  wire [15:0] _GEN_10 =
    {{_GEN_9[23:16], _GEN_9[31:28]} & 12'hF0F, 4'h0} | {_GEN_9[31:24], _GEN_9[39:32]}
    & 16'hF0F;
  wire [37:0] _GEN_11 =
    {_GEN_9[11:8],
     _GEN_9[15:12],
     _GEN_9[19:16],
     _GEN_10,
     _GEN_9[39:36],
     _GEN_9[43:40],
     _GEN_9[47:46]} & 38'h3333333333;
  wire [7:0]  _GEN_12 = _GEN_11[37:30] | {_GEN_9[15:12], _GEN_9[19:16]} & 8'h33;
  wire [15:0] _GEN_13 = _GEN_11[29:14] | _GEN_10 & 16'h3333;
  wire [1:0]  _GEN_14 = _GEN_11[11:10] | _GEN_9[37:36];
  wire [7:0]  _GEN_15 = {_GEN_11[5:0], 2'h0} | {_GEN_9[47:44], _GEN_9[51:48]} & 8'h33;
  wire [50:0] _GEN_16 =
    {_GEN_9[5:4],
     _GEN_9[7:6],
     _GEN_9[9:8],
     _GEN_12,
     _GEN_13,
     _GEN_10[3:2],
     _GEN_14,
     _GEN_9[39:38],
     _GEN_9[41:40],
     _GEN_15,
     _GEN_9[51:50],
     _GEN_9[53:52],
     _GEN_9[55]} & 51'h5555555555555;
  wire        _GEN_17 = io_fn == 5'h6;
  wire        _GEN_18 = io_fn == 5'h19;
  wire [63:0] out =
    io_fn == 5'hA | io_fn == 5'h0
      ? _io_adder_out_output
      : {63'h0, io_fn > 5'hB & ~(io_fn[4]) & slt}
        | (io_fn == 5'h4 | _GEN_17 | _GEN_18 | io_fn == 5'h1A ? in1_xor_in2 : 64'h0)
        | (_GEN_17 | io_fn == 5'h7 | _GEN_18 | io_fn == 5'h18 ? io_in1 & in2_inv : 64'h0)
        | (_GEN_0 | _GEN ? _GEN_9[63:0] : 64'h0)
        | (io_fn == 5'h1
             ? {_GEN_9[0],
                _GEN_9[1],
                _GEN_9[2],
                _GEN_9[3],
                _GEN_9[4],
                _GEN_16[50:47] | {_GEN_9[7:6], _GEN_9[9:8]} & 4'h5,
                _GEN_16[46:39] | _GEN_12 & 8'h55,
                _GEN_16[38:23] | _GEN_13 & 16'h5555,
                _GEN_13[1],
                _GEN_16[21] | _GEN_10[2],
                {_GEN_10[3], 1'h0} | _GEN_14 & 2'h1,
                _GEN_16[18:15] | {_GEN_9[39:38], _GEN_9[41:40]} & 4'h5,
                _GEN_16[14:7] | _GEN_15 & 8'h55,
                _GEN_15[1],
                _GEN_16[5] | _GEN_9[50],
                _GEN_9[51],
                _GEN_9[52],
                {_GEN_16[2:0], 1'h0} | {_GEN_9[55:54], _GEN_9[57:56]} & 4'h5,
                _GEN_9[57],
                _GEN_9[58],
                _GEN_9[59],
                _GEN_9[60],
                _GEN_9[61],
                _GEN_9[62],
                _GEN_9[63]}
             : 64'h0);
  assign io_out = io_dw ? out : {{32{out[31]}}, out[31:0]};
  assign io_adder_out = _io_adder_out_output;
  assign io_cmp_out = io_fn[0] ^ (io_fn[3] ? slt : in1_xor_in2 == 64'h0);
endmodule

module MulDiv(
  input         clock,
                reset,
                io_req_valid,
  input  [4:0]  io_req_bits_fn,
  input         io_req_bits_dw,
  input  [63:0] io_req_bits_in1,
                io_req_bits_in2,
  input  [4:0]  io_req_bits_tag,
  input         io_kill,
                io_resp_ready,
  output        io_req_ready,
                io_resp_valid,
  output [63:0] io_resp_bits_data,
  output [4:0]  io_resp_bits_tag
);

  reg  [2:0]   state;
  reg          req_dw;
  reg  [4:0]   req_tag;
  reg  [6:0]   count;
  reg          neg_out;
  reg          isHi;
  reg          resHi;
  reg  [64:0]  divisor;
  reg  [129:0] remainder;
  wire [63:0]  result = resHi ? remainder[128:65] : remainder[63:0];
  wire [31:0]  loOut = req_dw | state[0] ? result[31:0] : result[63:32];
  wire         _io_resp_valid_output = state == 3'h6 | (&state);
  wire         _io_req_ready_output = state == 3'h0;
  always @(posedge clock) begin
    automatic logic [2:0]  decoded_invInputs = ~(io_req_bits_fn[2:0]);
    automatic logic [1:0]  _GEN = {decoded_invInputs[1], decoded_invInputs[2]};
    automatic logic        lhs_sign;
    automatic logic        rhs_sign;
    automatic logic        _GEN_0;
    automatic logic        _GEN_1;
    automatic logic        _GEN_2;
    automatic logic [64:0] _GEN_3 =
      $signed(65'sh10000000000000000 >>> {59'h0, count[2:0], 3'h0});
    automatic logic        eOut;
    automatic logic        _GEN_4;
    automatic logic        _GEN_5;
    automatic logic        _GEN_6;
    automatic logic        _GEN_7;
    lhs_sign =
      (|{decoded_invInputs[0], &_GEN})
      & (io_req_bits_dw ? io_req_bits_in1[63] : io_req_bits_in1[31]);
    rhs_sign =
      (|{&_GEN, &{decoded_invInputs[0], io_req_bits_fn[2]}})
      & (io_req_bits_dw ? io_req_bits_in2[63] : io_req_bits_in2[31]);
    _GEN_0 = state == 3'h1;
    _GEN_1 = state == 3'h5;
    _GEN_2 = state == 3'h2;
    eOut =
      count != 7'h7 & (|count) & ~isHi & (remainder[63:0] & ~(_GEN_3[63:0])) == 64'h0;
    _GEN_4 = _GEN_2 & (eOut | count == 7'h7);
    _GEN_5 = state == 3'h3;
    _GEN_6 = count == 7'h40;
    _GEN_7 = _io_req_ready_output & io_req_valid;
    if (reset)
      state <= 3'h0;
    else if (_GEN_7) begin
      if (decoded_invInputs[2])
        state <= 3'h2;
      else
        state <= {1'h0, ~(lhs_sign | rhs_sign), 1'h1};
    end
    else if (io_resp_ready & _io_resp_valid_output | io_kill)
      state <= 3'h0;
    else if (_GEN_5 & _GEN_6)
      state <= {1'h1, ~neg_out, 1'h1};
    else if (_GEN_4)
      state <= 3'h6;
    else if (_GEN_1)
      state <= 3'h7;
    else if (_GEN_0)
      state <= 3'h3;
    if (_GEN_7) begin
      automatic logic [1:0] _GEN_8 =
        {&{io_req_bits_fn[0], decoded_invInputs[2]}, io_req_bits_fn[1]};
      req_dw <= io_req_bits_dw;
      req_tag <= io_req_bits_tag;
      count <= {4'h0, decoded_invInputs[2] & ~io_req_bits_dw, 2'h0};
      if (|_GEN_8)
        neg_out <= lhs_sign;
      else
        neg_out <= lhs_sign != rhs_sign;
      isHi <= |_GEN_8;
      divisor <=
        {rhs_sign,
         io_req_bits_dw ? io_req_bits_in2[63:32] : {32{rhs_sign}},
         io_req_bits_in2[31:0]};
      remainder <=
        {66'h0,
         io_req_bits_dw ? io_req_bits_in1[63:32] : {32{lhs_sign}},
         io_req_bits_in1[31:0]};
    end
    else begin
      automatic logic [64:0] subtractor;
      automatic logic [6:0]  _GEN_9;
      automatic logic        divby0;
      subtractor = remainder[128:64] - divisor;
      _GEN_9 = count + 7'h1;
      divby0 = ~(|count) & ~(subtractor[64]);
      if (_GEN_5) begin
        automatic logic [5:0] _GEN_10;
        _GEN_10 =
          {|(remainder[63:32]),
           (|(remainder[63:32]))
             ? {|(remainder[63:48]),
                (|(remainder[63:48]))
                  ? {|(remainder[63:56]),
                     (|(remainder[63:56]))
                       ? {|(remainder[63:60]),
                          (|(remainder[63:60]))
                            ? (remainder[63]
                                 ? 2'h3
                                 : remainder[62] ? 2'h2 : {1'h0, remainder[61]})
                            : remainder[59]
                                ? 2'h3
                                : remainder[58] ? 2'h2 : {1'h0, remainder[57]}}
                       : {|(remainder[55:52]),
                          (|(remainder[55:52]))
                            ? (remainder[55]
                                 ? 2'h3
                                 : remainder[54] ? 2'h2 : {1'h0, remainder[53]})
                            : remainder[51]
                                ? 2'h3
                                : remainder[50] ? 2'h2 : {1'h0, remainder[49]}}}
                  : {|(remainder[47:40]),
                     (|(remainder[47:40]))
                       ? {|(remainder[47:44]),
                          (|(remainder[47:44]))
                            ? (remainder[47]
                                 ? 2'h3
                                 : remainder[46] ? 2'h2 : {1'h0, remainder[45]})
                            : remainder[43]
                                ? 2'h3
                                : remainder[42] ? 2'h2 : {1'h0, remainder[41]}}
                       : {|(remainder[39:36]),
                          (|(remainder[39:36]))
                            ? (remainder[39]
                                 ? 2'h3
                                 : remainder[38] ? 2'h2 : {1'h0, remainder[37]})
                            : remainder[35]
                                ? 2'h3
                                : remainder[34] ? 2'h2 : {1'h0, remainder[33]}}}}
             : {|(remainder[31:16]),
                (|(remainder[31:16]))
                  ? {|(remainder[31:24]),
                     (|(remainder[31:24]))
                       ? {|(remainder[31:28]),
                          (|(remainder[31:28]))
                            ? (remainder[31]
                                 ? 2'h3
                                 : remainder[30] ? 2'h2 : {1'h0, remainder[29]})
                            : remainder[27]
                                ? 2'h3
                                : remainder[26] ? 2'h2 : {1'h0, remainder[25]}}
                       : {|(remainder[23:20]),
                          (|(remainder[23:20]))
                            ? (remainder[23]
                                 ? 2'h3
                                 : remainder[22] ? 2'h2 : {1'h0, remainder[21]})
                            : remainder[19]
                                ? 2'h3
                                : remainder[18] ? 2'h2 : {1'h0, remainder[17]}}}
                  : {|(remainder[15:8]),
                     (|(remainder[15:8]))
                       ? {|(remainder[15:12]),
                          (|(remainder[15:12]))
                            ? (remainder[15]
                                 ? 2'h3
                                 : remainder[14] ? 2'h2 : {1'h0, remainder[13]})
                            : remainder[11]
                                ? 2'h3
                                : remainder[10] ? 2'h2 : {1'h0, remainder[9]}}
                       : {|(remainder[7:4]),
                          (|(remainder[7:4]))
                            ? (remainder[7]
                                 ? 2'h3
                                 : remainder[6] ? 2'h2 : {1'h0, remainder[5]})
                            : remainder[3]
                                ? 2'h3
                                : remainder[2] ? 2'h2 : {1'h0, remainder[1]}}}}}
          - {|(divisor[63:32]),
             (|(divisor[63:32]))
               ? {|(divisor[63:48]),
                  (|(divisor[63:48]))
                    ? {|(divisor[63:56]),
                       (|(divisor[63:56]))
                         ? {|(divisor[63:60]),
                            (|(divisor[63:60]))
                              ? (divisor[63]
                                   ? 2'h3
                                   : divisor[62] ? 2'h2 : {1'h0, divisor[61]})
                              : divisor[59]
                                  ? 2'h3
                                  : divisor[58] ? 2'h2 : {1'h0, divisor[57]}}
                         : {|(divisor[55:52]),
                            (|(divisor[55:52]))
                              ? (divisor[55]
                                   ? 2'h3
                                   : divisor[54] ? 2'h2 : {1'h0, divisor[53]})
                              : divisor[51]
                                  ? 2'h3
                                  : divisor[50] ? 2'h2 : {1'h0, divisor[49]}}}
                    : {|(divisor[47:40]),
                       (|(divisor[47:40]))
                         ? {|(divisor[47:44]),
                            (|(divisor[47:44]))
                              ? (divisor[47]
                                   ? 2'h3
                                   : divisor[46] ? 2'h2 : {1'h0, divisor[45]})
                              : divisor[43]
                                  ? 2'h3
                                  : divisor[42] ? 2'h2 : {1'h0, divisor[41]}}
                         : {|(divisor[39:36]),
                            (|(divisor[39:36]))
                              ? (divisor[39]
                                   ? 2'h3
                                   : divisor[38] ? 2'h2 : {1'h0, divisor[37]})
                              : divisor[35]
                                  ? 2'h3
                                  : divisor[34] ? 2'h2 : {1'h0, divisor[33]}}}}
               : {|(divisor[31:16]),
                  (|(divisor[31:16]))
                    ? {|(divisor[31:24]),
                       (|(divisor[31:24]))
                         ? {|(divisor[31:28]),
                            (|(divisor[31:28]))
                              ? (divisor[31]
                                   ? 2'h3
                                   : divisor[30] ? 2'h2 : {1'h0, divisor[29]})
                              : divisor[27]
                                  ? 2'h3
                                  : divisor[26] ? 2'h2 : {1'h0, divisor[25]}}
                         : {|(divisor[23:20]),
                            (|(divisor[23:20]))
                              ? (divisor[23]
                                   ? 2'h3
                                   : divisor[22] ? 2'h2 : {1'h0, divisor[21]})
                              : divisor[19]
                                  ? 2'h3
                                  : divisor[18] ? 2'h2 : {1'h0, divisor[17]}}}
                    : {|(divisor[15:8]),
                       (|(divisor[15:8]))
                         ? {|(divisor[15:12]),
                            (|(divisor[15:12]))
                              ? (divisor[15]
                                   ? 2'h3
                                   : divisor[14] ? 2'h2 : {1'h0, divisor[13]})
                              : divisor[11]
                                  ? 2'h3
                                  : divisor[10] ? 2'h2 : {1'h0, divisor[9]}}
                         : {|(divisor[7:4]),
                            (|(divisor[7:4]))
                              ? (divisor[7]
                                   ? 2'h3
                                   : divisor[6] ? 2'h2 : {1'h0, divisor[5]})
                              : divisor[3]
                                  ? 2'h3
                                  : divisor[2] ? 2'h2 : {1'h0, divisor[1]}}}}};
        if (~(|count) & ~divby0 & _GEN_10 != 6'h3F) begin
          count <= {1'h0, ~_GEN_10};
          remainder <= {3'h0, {63'h0, remainder[63:0]} << ~_GEN_10};
        end
        else begin
          count <= _GEN_9;
          remainder <=
            {1'h0,
             subtractor[64] ? remainder[127:64] : subtractor[63:0],
             remainder[63:0],
             ~(subtractor[64])};
        end
      end
      else if (_GEN_2) begin
        automatic logic [72:0]  _GEN_11 =
          {{65{remainder[64]}}, remainder[7:0]} * {{8{divisor[64]}}, divisor}
          + {{8{remainder[129]}}, remainder[129:65]};
        automatic logic [128:0] eOutRes =
          {remainder[129:65], remainder[63:0]} >> 6'h0 - {count[2:0], 3'h0};
        count <= _GEN_9;
        remainder <=
          {_GEN_11[72:8],
           count == 7'h6 & neg_out,
           eOut ? eOutRes[63:0] : {_GEN_11[7:0], remainder[63:8]}};
      end
      else if (_GEN_1 | _GEN_0 & remainder[63])
        remainder <= {66'h0, 64'h0 - result};
      neg_out <= ~(_GEN_5 & divby0 & ~isHi) & neg_out;
      if (_GEN_0 & divisor[63])
        divisor <= subtractor;
    end
    resHi <= ~_GEN_7 & (_GEN_5 & _GEN_6 | _GEN_4 ? isHi : ~_GEN_1 & resHi);
  end // always @(posedge)
  assign io_req_ready = _io_req_ready_output;
  assign io_resp_valid = _io_resp_valid_output;
  assign io_resp_bits_data = {req_dw ? result[63:32] : {32{loOut[31]}}, loOut};
  assign io_resp_bits_tag = req_tag;
endmodule

module Arbiter3_LLWB(
  input         io_in_0_valid,
  input  [63:0] io_in_0_bits_data,
  input  [4:0]  io_in_0_bits_tag,
  input         io_out_ready,
  output        io_in_0_ready,
                io_out_valid,
  output [63:0] io_out_bits_data,
  output [4:0]  io_out_bits_tag
);

  assign io_in_0_ready = io_out_ready;
  assign io_out_valid = io_in_0_valid;
  assign io_out_bits_data = io_in_0_valid ? io_in_0_bits_data : 64'h0;
  assign io_out_bits_tag = io_in_0_valid ? io_in_0_bits_tag : 5'h0;
endmodule

// external module plusarg_reader

module PlusArgTimeout(
  input        clock,
               reset,
  input [31:0] io_count
);

  wire [31:0] _plusarg_reader_out;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if ((|_plusarg_reader_out) & ~reset & io_count >= _plusarg_reader_out) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: Timeout exceeded: Kill the emulation after INT rdtime cycles. Off if 0.\n    at PlusArg.scala:64 assert (io.count < max, s\"Timeout exceeded: $docstring\")\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("max_core_cycles=%d"),
    .WIDTH(32)
  ) plusarg_reader (
    .out (_plusarg_reader_out)
  );
endmodule

module Rocket(
  input         clock,
                reset,
                io_hartid,
                io_interrupts_debug,
                io_interrupts_mtip,
                io_interrupts_msip,
                io_interrupts_meip,
                io_interrupts_seip,
                io_imem_resp_valid,
                io_imem_resp_bits_btb_taken,
                io_imem_resp_bits_btb_bridx,
  input  [4:0]  io_imem_resp_bits_btb_entry,
  input  [7:0]  io_imem_resp_bits_btb_bht_history,
  input  [39:0] io_imem_resp_bits_pc,
  input  [31:0] io_imem_resp_bits_data,
  input         io_imem_resp_bits_xcpt_pf_inst,
                io_imem_resp_bits_xcpt_gf_inst,
                io_imem_resp_bits_xcpt_ae_inst,
                io_imem_resp_bits_replay,
                io_imem_gpa_valid,
                io_dmem_req_ready,
                io_dmem_s2_nack,
                io_dmem_resp_valid,
  input  [6:0]  io_dmem_resp_bits_tag,
  input  [1:0]  io_dmem_resp_bits_size,
  input  [63:0] io_dmem_resp_bits_data,
  input         io_dmem_resp_bits_replay,
                io_dmem_resp_bits_has_data,
  input  [63:0] io_dmem_resp_bits_data_word_bypass,
  input         io_dmem_replay_next,
                io_dmem_s2_xcpt_ma_ld,
                io_dmem_s2_xcpt_ma_st,
                io_dmem_s2_xcpt_pf_ld,
                io_dmem_s2_xcpt_pf_st,
                io_dmem_s2_xcpt_gf_ld,
                io_dmem_s2_xcpt_gf_st,
                io_dmem_s2_xcpt_ae_ld,
                io_dmem_s2_xcpt_ae_st,
                io_dmem_ordered,
                io_dmem_perf_release,
                io_dmem_perf_grant,
                io_fpu_fcsr_flags_valid,
  input  [4:0]  io_fpu_fcsr_flags_bits,
  input  [63:0] io_fpu_store_data,
                io_fpu_toint_data,
  input         io_fpu_fcsr_rdy,
                io_fpu_nack_mem,
                io_fpu_illegal_rm,
                io_fpu_dec_wen,
                io_fpu_dec_ren1,
                io_fpu_dec_ren2,
                io_fpu_dec_ren3,
                io_fpu_sboard_set,
                io_fpu_sboard_clr,
  input  [4:0]  io_fpu_sboard_clra,
  output        io_imem_might_request,
                io_imem_req_valid,
  output [39:0] io_imem_req_bits_pc,
  output        io_imem_req_bits_speculative,
                io_imem_sfence_valid,
                io_imem_sfence_bits_rs1,
                io_imem_sfence_bits_rs2,
  output [38:0] io_imem_sfence_bits_addr,
  output        io_imem_resp_ready,
                io_imem_btb_update_valid,
  output [4:0]  io_imem_btb_update_bits_prediction_entry,
  output [38:0] io_imem_btb_update_bits_pc,
  output        io_imem_btb_update_bits_isValid,
  output [38:0] io_imem_btb_update_bits_br_pc,
  output [1:0]  io_imem_btb_update_bits_cfiType,
  output        io_imem_bht_update_valid,
  output [7:0]  io_imem_bht_update_bits_prediction_history,
  output [38:0] io_imem_bht_update_bits_pc,
  output        io_imem_bht_update_bits_branch,
                io_imem_bht_update_bits_taken,
                io_imem_bht_update_bits_mispredict,
                io_imem_flush_icache,
                io_imem_progress,
                io_dmem_req_valid,
  output [39:0] io_dmem_req_bits_addr,
  output [6:0]  io_dmem_req_bits_tag,
  output [4:0]  io_dmem_req_bits_cmd,
  output [1:0]  io_dmem_req_bits_size,
  output        io_dmem_req_bits_signed,
  output [1:0]  io_dmem_req_bits_dprv,
  output        io_dmem_req_bits_dv,
                io_dmem_s1_kill,
  output [63:0] io_dmem_s1_data_data,
  output [3:0]  io_ptw_ptbr_mode,
  output [43:0] io_ptw_ptbr_ppn,
  output        io_ptw_sfence_valid,
                io_ptw_sfence_bits_rs1,
                io_ptw_status_debug,
  output [1:0]  io_ptw_status_prv,
  output        io_ptw_status_mxr,
                io_ptw_status_sum,
                io_ptw_pmp_0_cfg_l,
  output [1:0]  io_ptw_pmp_0_cfg_a,
  output        io_ptw_pmp_0_cfg_x,
                io_ptw_pmp_0_cfg_w,
                io_ptw_pmp_0_cfg_r,
  output [29:0] io_ptw_pmp_0_addr,
  output [31:0] io_ptw_pmp_0_mask,
  output        io_ptw_pmp_1_cfg_l,
  output [1:0]  io_ptw_pmp_1_cfg_a,
  output        io_ptw_pmp_1_cfg_x,
                io_ptw_pmp_1_cfg_w,
                io_ptw_pmp_1_cfg_r,
  output [29:0] io_ptw_pmp_1_addr,
  output [31:0] io_ptw_pmp_1_mask,
  output        io_ptw_pmp_2_cfg_l,
  output [1:0]  io_ptw_pmp_2_cfg_a,
  output        io_ptw_pmp_2_cfg_x,
                io_ptw_pmp_2_cfg_w,
                io_ptw_pmp_2_cfg_r,
  output [29:0] io_ptw_pmp_2_addr,
  output [31:0] io_ptw_pmp_2_mask,
  output        io_ptw_pmp_3_cfg_l,
  output [1:0]  io_ptw_pmp_3_cfg_a,
  output        io_ptw_pmp_3_cfg_x,
                io_ptw_pmp_3_cfg_w,
                io_ptw_pmp_3_cfg_r,
  output [29:0] io_ptw_pmp_3_addr,
  output [31:0] io_ptw_pmp_3_mask,
  output        io_ptw_pmp_4_cfg_l,
  output [1:0]  io_ptw_pmp_4_cfg_a,
  output        io_ptw_pmp_4_cfg_x,
                io_ptw_pmp_4_cfg_w,
                io_ptw_pmp_4_cfg_r,
  output [29:0] io_ptw_pmp_4_addr,
  output [31:0] io_ptw_pmp_4_mask,
  output        io_ptw_pmp_5_cfg_l,
  output [1:0]  io_ptw_pmp_5_cfg_a,
  output        io_ptw_pmp_5_cfg_x,
                io_ptw_pmp_5_cfg_w,
                io_ptw_pmp_5_cfg_r,
  output [29:0] io_ptw_pmp_5_addr,
  output [31:0] io_ptw_pmp_5_mask,
  output        io_ptw_pmp_6_cfg_l,
  output [1:0]  io_ptw_pmp_6_cfg_a,
  output        io_ptw_pmp_6_cfg_x,
                io_ptw_pmp_6_cfg_w,
                io_ptw_pmp_6_cfg_r,
  output [29:0] io_ptw_pmp_6_addr,
  output [31:0] io_ptw_pmp_6_mask,
  output        io_ptw_pmp_7_cfg_l,
  output [1:0]  io_ptw_pmp_7_cfg_a,
  output        io_ptw_pmp_7_cfg_x,
                io_ptw_pmp_7_cfg_w,
                io_ptw_pmp_7_cfg_r,
  output [29:0] io_ptw_pmp_7_addr,
  output [31:0] io_ptw_pmp_7_mask,
  output [63:0] io_ptw_customCSRs_csrs_0_value,
  output [31:0] io_fpu_inst,
  output [63:0] io_fpu_fromint_data,
  output [2:0]  io_fpu_fcsr_rm,
  output        io_fpu_ll_resp_val,
  output [2:0]  io_fpu_ll_resp_type,
  output [4:0]  io_fpu_ll_resp_tag,
  output [63:0] io_fpu_ll_resp_data,
  output        io_fpu_valid,
                io_fpu_killx,
                io_fpu_killm,
                io_wfi
);

  wire             _io_dmem_req_valid_output;
  wire             _GEN;
  wire             take_pc_wb;
  wire             take_pc_mem;
  wire             _ll_arb_io_in_0_ready;
  wire             _ll_arb_io_out_valid;
  wire [63:0]      _ll_arb_io_out_bits_data;
  wire [4:0]       _ll_arb_io_out_bits_tag;
  wire             _div_io_req_ready;
  wire             _div_io_resp_valid;
  wire [63:0]      _div_io_resp_bits_data;
  wire [4:0]       _div_io_resp_bits_tag;
  wire [63:0]      _alu_io_out;
  wire [63:0]      _alu_io_adder_out;
  wire             _alu_io_cmp_out;
  wire             _bpu_io_xcpt_if;
  wire             _bpu_io_xcpt_ld;
  wire             _bpu_io_xcpt_st;
  wire             _bpu_io_debug_if;
  wire             _bpu_io_debug_ld;
  wire             _bpu_io_debug_st;
  wire [63:0]      _csr_io_rw_rdata;
  wire             _csr_io_decode_0_fp_illegal;
  wire             _csr_io_decode_0_fp_csr;
  wire             _csr_io_decode_0_read_illegal;
  wire             _csr_io_decode_0_write_illegal;
  wire             _csr_io_decode_0_write_flush;
  wire             _csr_io_decode_0_system_illegal;
  wire             _csr_io_decode_0_virtual_access_illegal;
  wire             _csr_io_decode_0_virtual_system_illegal;
  wire             _csr_io_csr_stall;
  wire             _csr_io_eret;
  wire             _csr_io_singleStep;
  wire             _csr_io_status_debug;
  wire [31:0]      _csr_io_status_isa;
  wire [1:0]       _csr_io_status_dprv;
  wire             _csr_io_status_dv;
  wire [1:0]       _csr_io_status_prv;
  wire             _csr_io_status_v;
  wire             _csr_io_hstatus_spvp;
  wire [39:0]      _csr_io_evec;
  wire [63:0]      _csr_io_time;
  wire             _csr_io_interrupt;
  wire [63:0]      _csr_io_interrupt_cause;
  wire             _csr_io_bp_0_control_action;
  wire             _csr_io_bp_0_control_chain;
  wire [1:0]       _csr_io_bp_0_control_tmatch;
  wire             _csr_io_bp_0_control_m;
  wire             _csr_io_bp_0_control_s;
  wire             _csr_io_bp_0_control_u;
  wire             _csr_io_bp_0_control_x;
  wire             _csr_io_bp_0_control_w;
  wire             _csr_io_bp_0_control_r;
  wire [38:0]      _csr_io_bp_0_address;
  wire             _csr_io_inhibit_cycle;
  wire             _csr_io_trace_0_valid;
  wire [39:0]      _csr_io_trace_0_iaddr;
  wire [31:0]      _csr_io_trace_0_insn;
  wire             _csr_io_trace_0_exception;
  wire [63:0]      _csr_io_customCSRs_0_value;
  wire [63:0]      _rf_ext_R0_data;
  wire [63:0]      _rf_ext_R1_data;
  wire [39:0]      _ibuf_io_pc;
  wire [4:0]       _ibuf_io_btb_resp_entry;
  wire [7:0]       _ibuf_io_btb_resp_bht_history;
  wire             _ibuf_io_inst_0_valid;
  wire             _ibuf_io_inst_0_bits_xcpt0_pf_inst;
  wire             _ibuf_io_inst_0_bits_xcpt0_gf_inst;
  wire             _ibuf_io_inst_0_bits_xcpt0_ae_inst;
  wire             _ibuf_io_inst_0_bits_xcpt1_pf_inst;
  wire             _ibuf_io_inst_0_bits_xcpt1_gf_inst;
  wire             _ibuf_io_inst_0_bits_xcpt1_ae_inst;
  wire             _ibuf_io_inst_0_bits_replay;
  wire             _ibuf_io_inst_0_bits_rvc;
  wire [31:0]      _ibuf_io_inst_0_bits_inst_bits;
  wire [4:0]       _ibuf_io_inst_0_bits_inst_rd;
  wire [4:0]       _ibuf_io_inst_0_bits_inst_rs1;
  wire [4:0]       _ibuf_io_inst_0_bits_inst_rs2;
  wire [4:0]       _ibuf_io_inst_0_bits_inst_rs3;
  wire [31:0]      _ibuf_io_inst_0_bits_raw;
  reg              id_reg_pause;
  reg              imem_might_request_reg;
  reg              ex_ctrl_fp;
  reg              ex_ctrl_rocc;
  reg              ex_ctrl_branch;
  reg              ex_ctrl_jal;
  reg              ex_ctrl_jalr;
  reg              ex_ctrl_rxs2;
  reg              ex_ctrl_rxs1;
  reg  [2:0]       ex_ctrl_sel_alu2;
  reg  [1:0]       ex_ctrl_sel_alu1;
  reg  [2:0]       ex_ctrl_sel_imm;
  reg              ex_ctrl_alu_dw;
  reg  [4:0]       ex_ctrl_alu_fn;
  reg              ex_ctrl_mem;
  reg  [4:0]       ex_ctrl_mem_cmd;
  reg              ex_ctrl_rfs1;
  reg              ex_ctrl_rfs2;
  reg              ex_ctrl_wfd;
  reg              ex_ctrl_mul;
  reg              ex_ctrl_div;
  reg              ex_ctrl_wxd;
  reg  [2:0]       ex_ctrl_csr;
  reg              ex_ctrl_fence_i;
  reg              ex_ctrl_vec;
  reg              mem_ctrl_fp;
  reg              mem_ctrl_rocc;
  reg              mem_ctrl_branch;
  reg              mem_ctrl_jal;
  reg              mem_ctrl_jalr;
  reg              mem_ctrl_rxs2;
  reg              mem_ctrl_rxs1;
  reg              mem_ctrl_mem;
  reg              mem_ctrl_rfs1;
  reg              mem_ctrl_rfs2;
  reg              mem_ctrl_wfd;
  reg              mem_ctrl_mul;
  reg              mem_ctrl_div;
  reg              mem_ctrl_wxd;
  reg  [2:0]       mem_ctrl_csr;
  reg              mem_ctrl_fence_i;
  reg              mem_ctrl_vec;
  reg              wb_ctrl_rocc;
  reg              wb_ctrl_rxs2;
  reg              wb_ctrl_rxs1;
  reg              wb_ctrl_mem;
  reg              wb_ctrl_rfs1;
  reg              wb_ctrl_rfs2;
  reg              wb_ctrl_wfd;
  reg              wb_ctrl_div;
  reg              wb_ctrl_wxd;
  reg  [2:0]       wb_ctrl_csr;
  reg              wb_ctrl_fence_i;
  reg              wb_ctrl_vec;
  reg              ex_reg_xcpt_interrupt;
  reg              ex_reg_valid;
  reg              ex_reg_rvc;
  reg  [4:0]       ex_reg_btb_resp_entry;
  reg  [7:0]       ex_reg_btb_resp_bht_history;
  reg              ex_reg_xcpt;
  reg              ex_reg_flush_pipe;
  reg              ex_reg_load_use;
  reg  [63:0]      ex_reg_cause;
  reg              ex_reg_replay;
  reg  [39:0]      ex_reg_pc;
  reg  [1:0]       ex_reg_mem_size;
  reg              ex_reg_hls;
  reg  [31:0]      ex_reg_inst;
  reg  [31:0]      ex_reg_raw_inst;
  reg              mem_reg_xcpt_interrupt;
  reg              mem_reg_valid;
  reg              mem_reg_rvc;
  reg  [4:0]       mem_reg_btb_resp_entry;
  reg  [7:0]       mem_reg_btb_resp_bht_history;
  reg              mem_reg_xcpt;
  reg              mem_reg_replay;
  reg              mem_reg_flush_pipe;
  reg  [63:0]      mem_reg_cause;
  reg              mem_mem_cmd_bh;
  reg              mem_reg_load;
  reg              mem_reg_store;
  reg              mem_reg_sfence;
  reg  [39:0]      mem_reg_pc;
  reg  [31:0]      mem_reg_inst;
  reg  [1:0]       mem_reg_mem_size;
  reg              mem_reg_hls_or_dv;
  reg  [31:0]      mem_reg_raw_inst;
  reg  [63:0]      mem_reg_wdata;
  reg  [63:0]      mem_reg_rs2;
  reg              mem_br_taken;
  reg              wb_reg_valid;
  reg              wb_reg_xcpt;
  reg              wb_reg_replay;
  reg              wb_reg_flush_pipe;
  reg  [63:0]      wb_reg_cause;
  reg              wb_reg_sfence;
  reg  [39:0]      wb_reg_pc;
  reg  [1:0]       wb_reg_mem_size;
  reg              wb_reg_hls_or_dv;
  reg  [31:0]      wb_reg_inst;
  reg  [31:0]      wb_reg_raw_inst;
  reg  [63:0]      wb_reg_wdata;
  wire             take_pc_mem_wb = take_pc_wb | take_pc_mem;
  wire [29:0]      _GEN_0 = ~(_ibuf_io_inst_0_bits_inst_bits[31:2]);
  wire [6:0]       _GEN_1 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _GEN_0[1],
     _GEN_0[3],
     _GEN_0[4],
     _GEN_0[10]};
  wire [7:0]       _GEN_2 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _GEN_0[1],
     _GEN_0[2],
     _GEN_0[3],
     _GEN_0[4],
     _GEN_0[11]};
  wire [6:0]       _GEN_3 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _GEN_0[1],
     _GEN_0[2],
     _GEN_0[4],
     _GEN_0[12]};
  wire [8:0]       _GEN_4 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _ibuf_io_inst_0_bits_inst_bits[4],
     _GEN_0[3],
     _GEN_0[4],
     _GEN_0[10],
     _GEN_0[11],
     _GEN_0[12]};
  wire [5:0]       _GEN_5 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _ibuf_io_inst_0_bits_inst_bits[2],
     _GEN_0[1],
     _ibuf_io_inst_0_bits_inst_bits[4],
     _GEN_0[4]};
  wire [7:0]       _GEN_6 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _GEN_0[1],
     _GEN_0[2],
     _ibuf_io_inst_0_bits_inst_bits[5],
     _GEN_0[4],
     _GEN_0[12]};
  wire [14:0]      _GEN_7 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _ibuf_io_inst_0_bits_inst_bits[4],
     _ibuf_io_inst_0_bits_inst_bits[5],
     _GEN_0[4],
     _GEN_0[10],
     _GEN_0[11],
     _GEN_0[12],
     _GEN_0[23],
     _GEN_0[24],
     _GEN_0[25],
     _GEN_0[26],
     _GEN_0[27],
     _GEN_0[29]};
  wire [12:0]      _GEN_8 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _GEN_0[1],
     _ibuf_io_inst_0_bits_inst_bits[4],
     _ibuf_io_inst_0_bits_inst_bits[5],
     _GEN_0[4],
     _GEN_0[24],
     _GEN_0[25],
     _GEN_0[26],
     _GEN_0[27],
     _GEN_0[28],
     _GEN_0[29]};
  wire [14:0]      _GEN_9 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _ibuf_io_inst_0_bits_inst_bits[4],
     _ibuf_io_inst_0_bits_inst_bits[5],
     _GEN_0[4],
     _GEN_0[10],
     _GEN_0[11],
     _GEN_0[12],
     _GEN_0[24],
     _GEN_0[25],
     _GEN_0[26],
     _GEN_0[27],
     _GEN_0[28],
     _GEN_0[29]};
  wire [4:0]       _GEN_10 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[2],
     _GEN_0[3],
     _ibuf_io_inst_0_bits_inst_bits[6]};
  wire [10:0]      _GEN_11 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _GEN_0[1],
     _ibuf_io_inst_0_bits_inst_bits[4],
     _GEN_0[3],
     _ibuf_io_inst_0_bits_inst_bits[6],
     _GEN_0[24],
     _GEN_0[27],
     _GEN_0[28],
     _GEN_0[29]};
  wire [8:0]       _GEN_12 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[1],
     _GEN_0[2],
     _ibuf_io_inst_0_bits_inst_bits[5],
     _ibuf_io_inst_0_bits_inst_bits[6],
     _GEN_0[10],
     _GEN_0[11],
     _GEN_0[12]};
  wire [9:0]       _GEN_13 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _ibuf_io_inst_0_bits_inst_bits[2],
     _GEN_0[1],
     _GEN_0[2],
     _ibuf_io_inst_0_bits_inst_bits[5],
     _ibuf_io_inst_0_bits_inst_bits[6],
     _GEN_0[10],
     _GEN_0[11],
     _GEN_0[12]};
  wire [6:0]       _GEN_14 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _ibuf_io_inst_0_bits_inst_bits[2],
     _ibuf_io_inst_0_bits_inst_bits[3],
     _GEN_0[2],
     _ibuf_io_inst_0_bits_inst_bits[5],
     _ibuf_io_inst_0_bits_inst_bits[6]};
  wire [9:0]       _GEN_15 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _ibuf_io_inst_0_bits_inst_bits[2],
     _ibuf_io_inst_0_bits_inst_bits[3],
     _GEN_0[2],
     _GEN_0[3],
     _GEN_0[4],
     _ibuf_io_inst_0_bits_inst_bits[12],
     _GEN_0[11],
     _GEN_0[12]};
  wire [13:0]      _GEN_16 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _GEN_0[1],
     _ibuf_io_inst_0_bits_inst_bits[4],
     _GEN_0[4],
     _ibuf_io_inst_0_bits_inst_bits[12],
     _GEN_0[11],
     _GEN_0[24],
     _GEN_0[25],
     _GEN_0[26],
     _GEN_0[27],
     _GEN_0[28],
     _GEN_0[29]};
  wire [14:0]      _GEN_17 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _ibuf_io_inst_0_bits_inst_bits[3],
     _ibuf_io_inst_0_bits_inst_bits[4],
     _GEN_0[4],
     _ibuf_io_inst_0_bits_inst_bits[12],
     _GEN_0[11],
     _GEN_0[23],
     _GEN_0[24],
     _GEN_0[25],
     _GEN_0[26],
     _GEN_0[27],
     _GEN_0[28],
     _GEN_0[29]};
  wire [7:0]       _GEN_18 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _GEN_0[1],
     _ibuf_io_inst_0_bits_inst_bits[4],
     _ibuf_io_inst_0_bits_inst_bits[5],
     _ibuf_io_inst_0_bits_inst_bits[6],
     _ibuf_io_inst_0_bits_inst_bits[12]};
  wire [6:0]       _GEN_19 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[1],
     _GEN_0[2],
     _GEN_0[4],
     _ibuf_io_inst_0_bits_inst_bits[13],
     _GEN_0[12]};
  wire [7:0]       _GEN_20 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _GEN_0[1],
     _ibuf_io_inst_0_bits_inst_bits[4],
     _GEN_0[3],
     _GEN_0[4],
     _ibuf_io_inst_0_bits_inst_bits[13]};
  wire [10:0]      _GEN_21 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _ibuf_io_inst_0_bits_inst_bits[2],
     _ibuf_io_inst_0_bits_inst_bits[3],
     _GEN_0[2],
     _ibuf_io_inst_0_bits_inst_bits[5],
     _GEN_0[4],
     _ibuf_io_inst_0_bits_inst_bits[13],
     _GEN_0[12],
     _GEN_0[25],
     _GEN_0[26]};
  wire [7:0]       _GEN_22 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _GEN_0[1],
     _ibuf_io_inst_0_bits_inst_bits[4],
     _ibuf_io_inst_0_bits_inst_bits[5],
     _ibuf_io_inst_0_bits_inst_bits[6],
     _ibuf_io_inst_0_bits_inst_bits[13]};
  wire [7:0]       _GEN_23 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _GEN_0[1],
     _GEN_0[2],
     _ibuf_io_inst_0_bits_inst_bits[5],
     _ibuf_io_inst_0_bits_inst_bits[6],
     _ibuf_io_inst_0_bits_inst_bits[14]};
  wire [14:0]      _GEN_24 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _GEN_0[1],
     _ibuf_io_inst_0_bits_inst_bits[4],
     _GEN_0[3],
     _GEN_0[4],
     _ibuf_io_inst_0_bits_inst_bits[12],
     _GEN_0[11],
     _ibuf_io_inst_0_bits_inst_bits[14],
     _GEN_0[24],
     _GEN_0[25],
     _GEN_0[26],
     _GEN_0[27],
     _GEN_0[29]};
  wire [14:0]      _GEN_25 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _ibuf_io_inst_0_bits_inst_bits[3],
     _ibuf_io_inst_0_bits_inst_bits[4],
     _GEN_0[4],
     _ibuf_io_inst_0_bits_inst_bits[12],
     _GEN_0[11],
     _ibuf_io_inst_0_bits_inst_bits[14],
     _GEN_0[23],
     _GEN_0[24],
     _GEN_0[25],
     _GEN_0[26],
     _GEN_0[27],
     _GEN_0[29]};
  wire [14:0]      _GEN_26 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _ibuf_io_inst_0_bits_inst_bits[4],
     _ibuf_io_inst_0_bits_inst_bits[5],
     _GEN_0[4],
     _ibuf_io_inst_0_bits_inst_bits[12],
     _GEN_0[11],
     _ibuf_io_inst_0_bits_inst_bits[14],
     _GEN_0[23],
     _GEN_0[24],
     _GEN_0[25],
     _GEN_0[26],
     _GEN_0[27],
     _GEN_0[29]};
  wire [13:0]      _GEN_27 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _ibuf_io_inst_0_bits_inst_bits[4],
     _ibuf_io_inst_0_bits_inst_bits[5],
     _GEN_0[4],
     _ibuf_io_inst_0_bits_inst_bits[14],
     _ibuf_io_inst_0_bits_inst_bits[25],
     _GEN_0[24],
     _GEN_0[25],
     _GEN_0[26],
     _GEN_0[27],
     _GEN_0[28],
     _GEN_0[29]};
  wire [12:0]      _GEN_28 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _ibuf_io_inst_0_bits_inst_bits[2],
     _ibuf_io_inst_0_bits_inst_bits[3],
     _GEN_0[2],
     _ibuf_io_inst_0_bits_inst_bits[5],
     _GEN_0[4],
     _ibuf_io_inst_0_bits_inst_bits[13],
     _GEN_0[12],
     _ibuf_io_inst_0_bits_inst_bits[27],
     _GEN_0[27],
     _GEN_0[28],
     _GEN_0[29]};
  wire [16:0]      _GEN_29 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _ibuf_io_inst_0_bits_inst_bits[2],
     _ibuf_io_inst_0_bits_inst_bits[3],
     _GEN_0[2],
     _ibuf_io_inst_0_bits_inst_bits[5],
     _GEN_0[4],
     _GEN_0[18],
     _GEN_0[19],
     _GEN_0[20],
     _GEN_0[21],
     _GEN_0[22],
     _GEN_0[25],
     _ibuf_io_inst_0_bits_inst_bits[28],
     _GEN_0[27],
     _GEN_0[28],
     _GEN_0[29]};
  wire [18:0]      _GEN_30 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _ibuf_io_inst_0_bits_inst_bits[2],
     _ibuf_io_inst_0_bits_inst_bits[3],
     _GEN_0[2],
     _ibuf_io_inst_0_bits_inst_bits[5],
     _GEN_0[4],
     _ibuf_io_inst_0_bits_inst_bits[13],
     _GEN_0[12],
     _GEN_0[18],
     _GEN_0[19],
     _GEN_0[20],
     _GEN_0[21],
     _GEN_0[22],
     _GEN_0[25],
     _ibuf_io_inst_0_bits_inst_bits[28],
     _GEN_0[27],
     _GEN_0[28],
     _GEN_0[29]};
  wire [16:0]      _GEN_31 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _GEN_0[1],
     _ibuf_io_inst_0_bits_inst_bits[4],
     _ibuf_io_inst_0_bits_inst_bits[5],
     _ibuf_io_inst_0_bits_inst_bits[6],
     _GEN_0[5],
     _GEN_0[6],
     _GEN_0[7],
     _ibuf_io_inst_0_bits_inst_bits[25],
     _GEN_0[24],
     _GEN_0[25],
     _ibuf_io_inst_0_bits_inst_bits[28],
     _GEN_0[27],
     _GEN_0[28],
     _GEN_0[29]};
  wire [21:0]      _GEN_32 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _GEN_0[1],
     _ibuf_io_inst_0_bits_inst_bits[4],
     _ibuf_io_inst_0_bits_inst_bits[5],
     _ibuf_io_inst_0_bits_inst_bits[6],
     _GEN_0[5],
     _GEN_0[6],
     _GEN_0[7],
     _GEN_0[8],
     _GEN_0[9],
     _GEN_0[10],
     _GEN_0[11],
     _GEN_0[12],
     _ibuf_io_inst_0_bits_inst_bits[25],
     _GEN_0[24],
     _GEN_0[25],
     _ibuf_io_inst_0_bits_inst_bits[28],
     _GEN_0[27],
     _GEN_0[28],
     _GEN_0[29]};
  wire [13:0]      _GEN_33 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _GEN_0[1],
     _ibuf_io_inst_0_bits_inst_bits[4],
     _GEN_0[3],
     _ibuf_io_inst_0_bits_inst_bits[6],
     _GEN_0[10],
     _GEN_0[12],
     _GEN_0[24],
     _GEN_0[25],
     _GEN_0[26],
     _ibuf_io_inst_0_bits_inst_bits[29],
     _GEN_0[28]};
  wire [13:0]      _GEN_34 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _GEN_0[1],
     _ibuf_io_inst_0_bits_inst_bits[4],
     _GEN_0[3],
     _ibuf_io_inst_0_bits_inst_bits[6],
     _GEN_0[11],
     _GEN_0[12],
     _GEN_0[24],
     _GEN_0[25],
     _GEN_0[26],
     _ibuf_io_inst_0_bits_inst_bits[29],
     _GEN_0[28]};
  wire [13:0]      _GEN_35 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _GEN_0[1],
     _ibuf_io_inst_0_bits_inst_bits[4],
     _GEN_0[3],
     _ibuf_io_inst_0_bits_inst_bits[6],
     _GEN_0[11],
     _GEN_0[12],
     _GEN_0[24],
     _GEN_0[26],
     _ibuf_io_inst_0_bits_inst_bits[29],
     _GEN_0[28],
     _GEN_0[29]};
  wire [17:0]      _GEN_36 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _GEN_0[1],
     _ibuf_io_inst_0_bits_inst_bits[4],
     _GEN_0[3],
     _ibuf_io_inst_0_bits_inst_bits[6],
     _ibuf_io_inst_0_bits_inst_bits[20],
     _GEN_0[19],
     _GEN_0[20],
     _GEN_0[21],
     _GEN_0[22],
     _GEN_0[23],
     _GEN_0[24],
     _GEN_0[25],
     _GEN_0[26],
     _GEN_0[27],
     _ibuf_io_inst_0_bits_inst_bits[30]};
  wire [17:0]      _GEN_37 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _GEN_0[1],
     _ibuf_io_inst_0_bits_inst_bits[4],
     _GEN_0[3],
     _ibuf_io_inst_0_bits_inst_bits[6],
     _GEN_0[18],
     _GEN_0[19],
     _GEN_0[20],
     _GEN_0[21],
     _GEN_0[22],
     _ibuf_io_inst_0_bits_inst_bits[25],
     _GEN_0[24],
     _GEN_0[25],
     _GEN_0[26],
     _GEN_0[27],
     _ibuf_io_inst_0_bits_inst_bits[30]};
  wire [17:0]      _GEN_38 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _GEN_0[1],
     _ibuf_io_inst_0_bits_inst_bits[4],
     _GEN_0[3],
     _ibuf_io_inst_0_bits_inst_bits[6],
     _GEN_0[18],
     _GEN_0[19],
     _GEN_0[20],
     _GEN_0[21],
     _GEN_0[22],
     _GEN_0[24],
     _ibuf_io_inst_0_bits_inst_bits[27],
     _ibuf_io_inst_0_bits_inst_bits[28],
     _GEN_0[27],
     _ibuf_io_inst_0_bits_inst_bits[30],
     _GEN_0[29]};
  wire [14:0]      _GEN_39 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _GEN_0[1],
     _ibuf_io_inst_0_bits_inst_bits[4],
     _GEN_0[3],
     _ibuf_io_inst_0_bits_inst_bits[6],
     _GEN_0[20],
     _GEN_0[21],
     _GEN_0[22],
     _GEN_0[24],
     _GEN_0[25],
     _GEN_0[27],
     _ibuf_io_inst_0_bits_inst_bits[30],
     _ibuf_io_inst_0_bits_inst_bits[31]};
  wire [15:0]      _GEN_40 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _GEN_0[1],
     _ibuf_io_inst_0_bits_inst_bits[4],
     _GEN_0[3],
     _ibuf_io_inst_0_bits_inst_bits[6],
     _GEN_0[20],
     _GEN_0[21],
     _GEN_0[22],
     _GEN_0[24],
     _GEN_0[25],
     _GEN_0[26],
     _GEN_0[27],
     _ibuf_io_inst_0_bits_inst_bits[30],
     _ibuf_io_inst_0_bits_inst_bits[31]};
  wire [15:0]      _GEN_41 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _GEN_0[1],
     _ibuf_io_inst_0_bits_inst_bits[4],
     _GEN_0[3],
     _ibuf_io_inst_0_bits_inst_bits[6],
     _GEN_0[20],
     _GEN_0[21],
     _GEN_0[22],
     _GEN_0[24],
     _GEN_0[25],
     _ibuf_io_inst_0_bits_inst_bits[28],
     _GEN_0[27],
     _ibuf_io_inst_0_bits_inst_bits[30],
     _ibuf_io_inst_0_bits_inst_bits[31]};
  wire [19:0]      _GEN_42 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _GEN_0[1],
     _ibuf_io_inst_0_bits_inst_bits[4],
     _GEN_0[3],
     _ibuf_io_inst_0_bits_inst_bits[6],
     _GEN_0[11],
     _GEN_0[12],
     _GEN_0[18],
     _GEN_0[19],
     _GEN_0[20],
     _GEN_0[21],
     _GEN_0[22],
     _GEN_0[24],
     _GEN_0[25],
     _GEN_0[26],
     _ibuf_io_inst_0_bits_inst_bits[29],
     _ibuf_io_inst_0_bits_inst_bits[30],
     _ibuf_io_inst_0_bits_inst_bits[31]};
  wire [20:0]      _GEN_43 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _GEN_0[1],
     _ibuf_io_inst_0_bits_inst_bits[4],
     _GEN_0[3],
     _ibuf_io_inst_0_bits_inst_bits[6],
     _GEN_0[10],
     _GEN_0[11],
     _GEN_0[12],
     _GEN_0[18],
     _GEN_0[19],
     _GEN_0[20],
     _GEN_0[21],
     _GEN_0[22],
     _GEN_0[24],
     _GEN_0[25],
     _ibuf_io_inst_0_bits_inst_bits[28],
     _ibuf_io_inst_0_bits_inst_bits[29],
     _ibuf_io_inst_0_bits_inst_bits[30],
     _ibuf_io_inst_0_bits_inst_bits[31]};
  wire [2:0]       _GEN_44 = {&_GEN_21, &_GEN_28, &_GEN_29};
  wire [25:0]      _GEN_45 =
    {&_GEN_1,
     &_GEN_2,
     &{_ibuf_io_inst_0_bits_inst_bits[0],
       _ibuf_io_inst_0_bits_inst_bits[1],
       _GEN_0[0],
       _GEN_0[1],
       _GEN_0[2],
       _GEN_0[3],
       _GEN_0[4],
       _GEN_0[12]},
     &_GEN_4,
     &_GEN_5,
     &_GEN_7,
     &_GEN_8,
     &_GEN_9,
     &_GEN_13,
     &_GEN_14,
     &_GEN_16,
     &_GEN_17,
     &_GEN_18,
     &_GEN_20,
     &_GEN_21,
     &_GEN_22,
     &_GEN_24,
     &_GEN_25,
     &_GEN_26,
     &_GEN_27,
     &_GEN_28,
     &_GEN_29,
     &{_ibuf_io_inst_0_bits_inst_bits[0],
       _ibuf_io_inst_0_bits_inst_bits[1],
       _GEN_0[0],
       _GEN_0[1],
       _ibuf_io_inst_0_bits_inst_bits[4],
       _GEN_0[3],
       _ibuf_io_inst_0_bits_inst_bits[6],
       _GEN_0[10],
       _GEN_0[12],
       _GEN_0[24],
       _GEN_0[25],
       _GEN_0[26],
       _ibuf_io_inst_0_bits_inst_bits[29],
       _GEN_0[28],
       _ibuf_io_inst_0_bits_inst_bits[31]},
     &{_ibuf_io_inst_0_bits_inst_bits[0],
       _ibuf_io_inst_0_bits_inst_bits[1],
       _GEN_0[0],
       _GEN_0[1],
       _ibuf_io_inst_0_bits_inst_bits[4],
       _GEN_0[3],
       _ibuf_io_inst_0_bits_inst_bits[6],
       _GEN_0[11],
       _GEN_0[12],
       _GEN_0[24],
       _GEN_0[25],
       _GEN_0[26],
       _ibuf_io_inst_0_bits_inst_bits[29],
       _GEN_0[28],
       _ibuf_io_inst_0_bits_inst_bits[31]},
     &_GEN_40,
     &_GEN_42};
  wire [2:0]       _GEN_46 =
    {&{_ibuf_io_inst_0_bits_inst_bits[0],
       _ibuf_io_inst_0_bits_inst_bits[1],
       _GEN_0[0],
       _GEN_0[1],
       _ibuf_io_inst_0_bits_inst_bits[4],
       _ibuf_io_inst_0_bits_inst_bits[5],
       _GEN_0[4],
       _ibuf_io_inst_0_bits_inst_bits[25],
       _GEN_0[24],
       _GEN_0[25],
       _GEN_0[26],
       _GEN_0[27],
       _GEN_0[28],
       _GEN_0[29]},
     &{_ibuf_io_inst_0_bits_inst_bits[0],
       _ibuf_io_inst_0_bits_inst_bits[1],
       _GEN_0[0],
       _ibuf_io_inst_0_bits_inst_bits[4],
       _ibuf_io_inst_0_bits_inst_bits[5],
       _GEN_0[4],
       _GEN_0[10],
       _GEN_0[11],
       _ibuf_io_inst_0_bits_inst_bits[25],
       _GEN_0[24],
       _GEN_0[25],
       _GEN_0[26],
       _GEN_0[27],
       _GEN_0[28],
       _GEN_0[29]},
     &_GEN_27};
  wire [7:0]       _GEN_47 =
    {&{_ibuf_io_inst_0_bits_inst_bits[0],
       _ibuf_io_inst_0_bits_inst_bits[1],
       _GEN_0[0],
       _GEN_0[1],
       _GEN_0[2],
       _GEN_0[3],
       _GEN_0[4],
       _GEN_0[10]},
     &_GEN_2,
     &_GEN_3,
     &_GEN_19,
     &_GEN_21,
     &_GEN_28,
     &_GEN_30,
     &_GEN_32};
  wire [24:0]      _GEN_48 =
    {&_GEN_1,
     &_GEN_2,
     &_GEN_3,
     &_GEN_4,
     &_GEN_7,
     &_GEN_8,
     &_GEN_9,
     &_GEN_12,
     &_GEN_16,
     &_GEN_17,
     &{_ibuf_io_inst_0_bits_inst_bits[0],
       _ibuf_io_inst_0_bits_inst_bits[1],
       _GEN_0[0],
       _GEN_0[1],
       _ibuf_io_inst_0_bits_inst_bits[5],
       _ibuf_io_inst_0_bits_inst_bits[6],
       _ibuf_io_inst_0_bits_inst_bits[12],
       _GEN_0[11],
       _GEN_0[12]},
     &_GEN_19,
     &_GEN_20,
     &_GEN_21,
     &{_ibuf_io_inst_0_bits_inst_bits[0],
       _ibuf_io_inst_0_bits_inst_bits[1],
       _GEN_0[0],
       _GEN_0[1],
       _ibuf_io_inst_0_bits_inst_bits[4],
       _ibuf_io_inst_0_bits_inst_bits[5],
       _ibuf_io_inst_0_bits_inst_bits[6],
       _ibuf_io_inst_0_bits_inst_bits[13],
       _GEN_0[12]},
     &_GEN_23,
     &_GEN_24,
     &_GEN_25,
     &_GEN_26,
     &_GEN_27,
     &_GEN_28,
     &_GEN_29,
     &{_ibuf_io_inst_0_bits_inst_bits[0],
       _ibuf_io_inst_0_bits_inst_bits[1],
       _GEN_0[0],
       _GEN_0[1],
       _ibuf_io_inst_0_bits_inst_bits[4],
       _ibuf_io_inst_0_bits_inst_bits[5],
       _ibuf_io_inst_0_bits_inst_bits[6],
       _GEN_0[5],
       _GEN_0[6],
       _GEN_0[7],
       _GEN_0[12],
       _ibuf_io_inst_0_bits_inst_bits[25],
       _GEN_0[24],
       _GEN_0[25],
       _ibuf_io_inst_0_bits_inst_bits[28],
       _GEN_0[27],
       _GEN_0[28],
       _GEN_0[29]},
     &_GEN_41,
     &_GEN_43};
  wire [12:0]      _GEN_49 =
    {&_GEN_6,
     &{_ibuf_io_inst_0_bits_inst_bits[0],
       _ibuf_io_inst_0_bits_inst_bits[1],
       _GEN_0[0],
       _GEN_0[1],
       _GEN_0[2],
       _ibuf_io_inst_0_bits_inst_bits[5],
       _GEN_0[11],
       _GEN_0[12]},
     &_GEN_7,
     &_GEN_8,
     &_GEN_9,
     &{_ibuf_io_inst_0_bits_inst_bits[0],
       _ibuf_io_inst_0_bits_inst_bits[1],
       _GEN_0[0],
       _ibuf_io_inst_0_bits_inst_bits[4],
       _ibuf_io_inst_0_bits_inst_bits[5],
       _GEN_0[4],
       _GEN_0[11],
       _GEN_0[12],
       _GEN_0[23],
       _GEN_0[24],
       _GEN_0[25],
       _GEN_0[26],
       _GEN_0[27],
       _GEN_0[28],
       _GEN_0[29]},
     &_GEN_21,
     &_GEN_23,
     &_GEN_26,
     &_GEN_27,
     &_GEN_28,
     &_GEN_29,
     &{_ibuf_io_inst_0_bits_inst_bits[0],
       _ibuf_io_inst_0_bits_inst_bits[1],
       _GEN_0[0],
       _GEN_0[1],
       _ibuf_io_inst_0_bits_inst_bits[4],
       _ibuf_io_inst_0_bits_inst_bits[5],
       _ibuf_io_inst_0_bits_inst_bits[6],
       _GEN_0[5],
       _GEN_0[6],
       _GEN_0[7],
       _GEN_0[10],
       _GEN_0[11],
       _GEN_0[12],
       _ibuf_io_inst_0_bits_inst_bits[25],
       _GEN_0[24],
       _GEN_0[25],
       _ibuf_io_inst_0_bits_inst_bits[28],
       _GEN_0[27],
       _GEN_0[28],
       _GEN_0[29]}};
  wire [10:0]      _GEN_50 =
    {&_GEN_10,
     &_GEN_11,
     &{_ibuf_io_inst_0_bits_inst_bits[0],
       _ibuf_io_inst_0_bits_inst_bits[1],
       _ibuf_io_inst_0_bits_inst_bits[2],
       _GEN_0[1],
       _GEN_0[2],
       _GEN_0[4],
       _ibuf_io_inst_0_bits_inst_bits[13],
       _GEN_0[12]},
     &_GEN_33,
     &_GEN_34,
     &_GEN_35,
     &_GEN_36,
     &_GEN_37,
     &_GEN_38,
     &{_ibuf_io_inst_0_bits_inst_bits[0],
       _ibuf_io_inst_0_bits_inst_bits[1],
       _GEN_0[0],
       _GEN_0[1],
       _ibuf_io_inst_0_bits_inst_bits[4],
       _GEN_0[3],
       _ibuf_io_inst_0_bits_inst_bits[6],
       _GEN_0[18],
       _GEN_0[19],
       _GEN_0[20],
       _GEN_0[21],
       _GEN_0[22],
       _GEN_0[24],
       _GEN_0[25],
       _ibuf_io_inst_0_bits_inst_bits[30],
       _ibuf_io_inst_0_bits_inst_bits[31]},
     &_GEN_39};
  wire [2:0]       id_ctrl_csr =
    {|{&{_ibuf_io_inst_0_bits_inst_bits[0],
         _ibuf_io_inst_0_bits_inst_bits[4],
         _ibuf_io_inst_0_bits_inst_bits[5],
         _ibuf_io_inst_0_bits_inst_bits[6],
         _GEN_0[5],
         _GEN_0[6],
         _GEN_0[7],
         _GEN_0[8],
         _GEN_0[9],
         _GEN_0[10],
         _GEN_0[11],
         _GEN_0[12],
         _GEN_0[13],
         _GEN_0[14],
         _GEN_0[15],
         _GEN_0[16],
         _GEN_0[17],
         _GEN_0[19],
         _GEN_0[20],
         _GEN_0[21],
         _GEN_0[22],
         _GEN_0[23],
         _GEN_0[24],
         _GEN_0[25],
         _GEN_0[26],
         _GEN_0[27],
         _GEN_0[28],
         _GEN_0[29]},
       &_GEN_18,
       &_GEN_22,
       &{_ibuf_io_inst_0_bits_inst_bits[0],
         _ibuf_io_inst_0_bits_inst_bits[4],
         _ibuf_io_inst_0_bits_inst_bits[5],
         _ibuf_io_inst_0_bits_inst_bits[6],
         _GEN_0[5],
         _GEN_0[6],
         _GEN_0[7],
         _GEN_0[8],
         _GEN_0[9],
         _GEN_0[10],
         _GEN_0[11],
         _GEN_0[12],
         _GEN_0[13],
         _GEN_0[14],
         _GEN_0[15],
         _GEN_0[16],
         _GEN_0[17],
         _GEN_0[18],
         _ibuf_io_inst_0_bits_inst_bits[21],
         _GEN_0[20],
         _GEN_0[21],
         _GEN_0[22],
         _GEN_0[23],
         _GEN_0[24],
         _GEN_0[25],
         _ibuf_io_inst_0_bits_inst_bits[28],
         _GEN_0[28],
         _GEN_0[29]},
       &{_ibuf_io_inst_0_bits_inst_bits[0],
         _ibuf_io_inst_0_bits_inst_bits[4],
         _ibuf_io_inst_0_bits_inst_bits[5],
         _ibuf_io_inst_0_bits_inst_bits[6],
         _GEN_0[5],
         _GEN_0[6],
         _GEN_0[7],
         _GEN_0[8],
         _GEN_0[9],
         _GEN_0[10],
         _GEN_0[11],
         _GEN_0[12],
         _GEN_0[13],
         _GEN_0[14],
         _GEN_0[15],
         _GEN_0[16],
         _GEN_0[17],
         _ibuf_io_inst_0_bits_inst_bits[20],
         _GEN_0[19],
         _ibuf_io_inst_0_bits_inst_bits[22],
         _GEN_0[21],
         _GEN_0[22],
         _GEN_0[23],
         _GEN_0[24],
         _GEN_0[25],
         _ibuf_io_inst_0_bits_inst_bits[28],
         _GEN_0[28],
         _GEN_0[29]},
       &_GEN_31,
       &{_ibuf_io_inst_0_bits_inst_bits[4],
         _ibuf_io_inst_0_bits_inst_bits[5],
         _ibuf_io_inst_0_bits_inst_bits[6],
         _GEN_0[5],
         _GEN_0[6],
         _GEN_0[7],
         _GEN_0[8],
         _GEN_0[9],
         _GEN_0[10],
         _GEN_0[11],
         _GEN_0[12],
         _GEN_0[13],
         _GEN_0[14],
         _GEN_0[15],
         _GEN_0[16],
         _GEN_0[17],
         _GEN_0[18],
         _ibuf_io_inst_0_bits_inst_bits[21],
         _GEN_0[20],
         _GEN_0[21],
         _ibuf_io_inst_0_bits_inst_bits[24],
         _ibuf_io_inst_0_bits_inst_bits[25],
         _GEN_0[24],
         _ibuf_io_inst_0_bits_inst_bits[27],
         _ibuf_io_inst_0_bits_inst_bits[28],
         _ibuf_io_inst_0_bits_inst_bits[29],
         _ibuf_io_inst_0_bits_inst_bits[30],
         _GEN_0[29]}},
     &_GEN_22,
     &_GEN_18};
  reg              id_reg_fence;
  wire             _GEN_51 = id_ctrl_csr == 3'h6 | (&id_ctrl_csr);
  wire             id_csr_en = _GEN_51 | id_ctrl_csr == 3'h5;
  wire             id_mem_busy = ~io_dmem_ordered | _io_dmem_req_valid_output;
  wire             _GEN_52 = wb_reg_valid & wb_ctrl_rocc;
  wire             _GEN_53 = mem_reg_valid & mem_ctrl_wxd;
  wire             _GEN_54 = ex_reg_inst[11:7] == _ibuf_io_inst_0_bits_inst_rs1;
  wire             _GEN_55 = mem_reg_inst[11:7] == _ibuf_io_inst_0_bits_inst_rs1;
  wire             _GEN_56 = ex_reg_inst[11:7] == _ibuf_io_inst_0_bits_inst_rs2;
  wire             _GEN_57 = mem_reg_inst[11:7] == _ibuf_io_inst_0_bits_inst_rs2;
  reg              ex_reg_rs_bypass_0;
  reg              ex_reg_rs_bypass_1;
  reg  [1:0]       ex_reg_rs_lsb_0;
  reg  [1:0]       ex_reg_rs_lsb_1;
  reg  [61:0]      ex_reg_rs_msb_0;
  reg  [61:0]      ex_reg_rs_msb_1;
  wire [3:0][63:0] _GEN_58 =
    {{io_dmem_resp_bits_data_word_bypass}, {wb_reg_wdata}, {mem_reg_wdata}, {64'h0}};
  wire [63:0]      _GEN_59 = _GEN_58[ex_reg_rs_lsb_0];
  wire [63:0]      _GEN_60 = {ex_reg_rs_msb_0, ex_reg_rs_lsb_0};
  wire [63:0]      ex_rs_0 = ex_reg_rs_bypass_0 ? _GEN_59 : _GEN_60;
  wire [63:0]      _GEN_61 = _GEN_58[ex_reg_rs_lsb_1];
  wire [63:0]      _GEN_62 = {ex_reg_rs_msb_1, ex_reg_rs_lsb_1};
  wire [63:0]      ex_rs_1 = ex_reg_rs_bypass_1 ? _GEN_61 : _GEN_62;
  wire             _GEN_63 = ex_ctrl_sel_imm == 3'h5;
  wire             ex_imm_sign = ~_GEN_63 & ex_reg_inst[31];
  wire             _GEN_64 = ex_ctrl_sel_imm == 3'h2;
  wire             _GEN_65 = _GEN_64 | _GEN_63;
  wire             _GEN_66 = ex_ctrl_sel_imm == 3'h1;
  wire             _GEN_67 = ex_ctrl_sel_imm == 3'h0;
  wire [3:0][63:0] _GEN_68 =
    {{64'h0}, {{{24{ex_reg_pc[39]}}, ex_reg_pc}}, {ex_rs_0}, {64'h0}};
  wire [3:0]       _GEN_69 = ex_reg_rvc ? 4'h2 : 4'h4;
  wire             _GEN_70 = ex_reg_valid & ex_ctrl_div;
  wire             ex_pc_valid = ex_reg_valid | ex_reg_replay | ex_reg_xcpt_interrupt;
  wire             wb_dcache_miss = wb_ctrl_mem & ~io_dmem_resp_valid;
  wire             replay_ex =
    ex_reg_replay | ex_reg_valid
    & (ex_ctrl_mem & ~io_dmem_req_ready | ex_ctrl_div & ~_div_io_req_ready
       | wb_dcache_miss & ex_reg_load_use);
  wire             ctrl_killx = take_pc_mem_wb | replay_ex | ~ex_reg_valid;
  wire             _GEN_71 = mem_ctrl_branch & mem_br_taken;
  wire [3:0]       _GEN_72 = mem_reg_rvc ? 4'h2 : 4'h4;
  wire [31:0]      _GEN_73 =
    _GEN_71
      ? {{20{mem_reg_inst[31]}},
         mem_reg_inst[7],
         mem_reg_inst[30:25],
         mem_reg_inst[11:8],
         1'h0}
      : mem_ctrl_jal
          ? {{12{mem_reg_inst[31]}},
             mem_reg_inst[19:12],
             mem_reg_inst[20],
             mem_reg_inst[30:21],
             1'h0}
          : {{28{_GEN_72[3]}}, _GEN_72};
  wire [39:0]      _GEN_74 = mem_reg_pc + {{8{_GEN_73[31]}}, _GEN_73};
  wire [39:0]      _GEN_75 =
    mem_ctrl_jalr | mem_reg_sfence
      ? {mem_reg_wdata[63:39] == 25'h0 | (&(mem_reg_wdata[63:39]))
           ? mem_reg_wdata[39]
           : ~(mem_reg_wdata[38]),
         mem_reg_wdata[38:0]}
      : _GEN_74;
  wire [39:0]      _GEN_76 = _GEN_75 & 40'hFFFFFFFFFE;
  wire             mem_wrong_npc =
    ex_pc_valid
      ? _GEN_76 != ex_reg_pc
      : ~(_ibuf_io_inst_0_valid | io_imem_resp_valid) | _GEN_76 != _ibuf_io_pc;
  wire             mem_cfi = mem_ctrl_branch | mem_ctrl_jalr | mem_ctrl_jal;
  assign take_pc_mem = mem_reg_valid & ~mem_reg_xcpt & (mem_wrong_npc | mem_reg_sfence);
  wire             mem_debug_breakpoint =
    mem_reg_load & _bpu_io_debug_ld | mem_reg_store & _bpu_io_debug_st;
  wire             mem_ldst_xcpt =
    mem_debug_breakpoint | mem_reg_load & _bpu_io_xcpt_ld | mem_reg_store
    & _bpu_io_xcpt_st;
  wire             dcache_kill_mem = _GEN_53 & io_dmem_replay_next;
  wire             fpu_kill_mem = mem_reg_valid & mem_ctrl_fp & io_fpu_nack_mem;
  wire             killm_common =
    dcache_kill_mem | take_pc_wb | mem_reg_xcpt | ~mem_reg_valid;
  reg              div_io_kill_REG;
  wire             _GEN_77 = wb_reg_valid & wb_ctrl_mem;
  wire             _GEN_78 = _GEN_77 & io_dmem_s2_xcpt_pf_st;
  wire             _GEN_79 = _GEN_77 & io_dmem_s2_xcpt_pf_ld;
  wire             _GEN_80 = _GEN_77 & io_dmem_s2_xcpt_gf_st;
  wire             _GEN_81 = _GEN_77 & io_dmem_s2_xcpt_gf_ld;
  wire             _GEN_82 = _GEN_77 & io_dmem_s2_xcpt_ae_st;
  wire             _GEN_83 = _GEN_77 & io_dmem_s2_xcpt_ae_ld;
  wire             _GEN_84 = _GEN_77 & io_dmem_s2_xcpt_ma_st;
  wire             wb_xcpt =
    wb_reg_xcpt | _GEN_78 | _GEN_79 | _GEN_80 | _GEN_81 | _GEN_82 | _GEN_83 | _GEN_84
    | _GEN_77 & io_dmem_s2_xcpt_ma_ld;
  wire             wb_wxd = wb_reg_valid & wb_ctrl_wxd;
  wire             wb_set_sboard =
    wb_ctrl_div | wb_dcache_miss | wb_ctrl_rocc | wb_ctrl_vec;
  wire             replay_wb_common = io_dmem_s2_nack | wb_reg_replay;
  wire             _GEN_85 = replay_wb_common | _GEN_52;
  assign take_pc_wb = _GEN_85 | wb_xcpt | _csr_io_eret | wb_reg_flush_pipe;
  wire             dmem_resp_valid = io_dmem_resp_valid & io_dmem_resp_bits_has_data;
  wire             dmem_resp_replay = dmem_resp_valid & io_dmem_resp_bits_replay;
  wire             _GEN_86 = dmem_resp_replay & ~(io_dmem_resp_bits_tag[0]);
  assign _GEN = ~_GEN_86 & ~wb_wxd;
  wire [4:0]       ll_waddr =
    _GEN_86 ? io_dmem_resp_bits_tag[5:1] : _ll_arb_io_out_bits_tag;
  wire             ll_wen = _GEN_86 | _GEN & _ll_arb_io_out_valid;
  wire             wb_valid = wb_reg_valid & ~_GEN_85 & ~wb_xcpt;
  wire             wb_wen = wb_valid & wb_ctrl_wxd;
  wire             rf_wen = wb_wen | ll_wen;
  wire [4:0]       rf_waddr = ll_wen ? ll_waddr : wb_reg_inst[11:7];
  wire [63:0]      coreMonitorBundle_wrdata =
    dmem_resp_valid & ~(io_dmem_resp_bits_tag[0])
      ? io_dmem_resp_bits_data
      : ll_wen
          ? _ll_arb_io_out_bits_data
          : (|wb_ctrl_csr) ? _csr_io_rw_rdata : wb_reg_wdata;
  wire [63:0]      id_rs_0 =
    rf_wen & (|rf_waddr) & rf_waddr == _ibuf_io_inst_0_bits_inst_rs1
      ? coreMonitorBundle_wrdata
      : _rf_ext_R0_data;
  wire [63:0]      id_rs_1 =
    rf_wen & (|rf_waddr) & rf_waddr == _ibuf_io_inst_0_bits_inst_rs2
      ? coreMonitorBundle_wrdata
      : _rf_ext_R1_data;
  wire             _GEN_87 = wb_reg_cause == 64'h14;
  wire             tval_any_addr =
    ~wb_reg_xcpt | wb_reg_cause == 64'h3 | wb_reg_cause == 64'h1 | wb_reg_cause == 64'hC
    | _GEN_87;
  wire             _GEN_88 = (|_GEN_48) & (|_ibuf_io_inst_0_bits_inst_rs1);
  wire             _GEN_89 = (|_GEN_49) & (|_ibuf_io_inst_0_bits_inst_rs2);
  wire             _GEN_90 = (|_GEN_45) & (|_ibuf_io_inst_0_bits_inst_rd);
  reg  [31:0]      _GEN_91;
  wire [31:0]      r = {_GEN_91[31:1], 1'h0};
  wire [31:0]      _GEN_92 = {27'h0, _ibuf_io_inst_0_bits_inst_rs1};
  wire [31:0]      _GEN_93 = r >> _GEN_92;
  wire [31:0]      _GEN_94 = {27'h0, _ibuf_io_inst_0_bits_inst_rs2};
  wire [31:0]      _GEN_95 = r >> _GEN_94;
  wire [31:0]      _GEN_96 = {27'h0, _ibuf_io_inst_0_bits_inst_rd};
  wire [31:0]      _GEN_97 = r >> _GEN_96;
  wire             _GEN_98 = _ibuf_io_inst_0_bits_inst_rd == ex_reg_inst[11:7];
  wire             _GEN_99 = _ibuf_io_inst_0_bits_inst_rd == mem_reg_inst[11:7];
  wire             data_hazard_mem =
    mem_ctrl_wxd & (_GEN_88 & _GEN_55 | _GEN_89 & _GEN_57 | _GEN_90 & _GEN_99);
  wire             _GEN_100 = _ibuf_io_inst_0_bits_inst_rs1 == wb_reg_inst[11:7];
  wire             _GEN_101 = _ibuf_io_inst_0_bits_inst_rs2 == wb_reg_inst[11:7];
  wire             _GEN_102 = _ibuf_io_inst_0_bits_inst_rd == wb_reg_inst[11:7];
  reg  [31:0]      _GEN_103;
  wire [31:0]      _GEN_104 = _GEN_103 >> _GEN_92;
  wire [31:0]      _GEN_105 = _GEN_103 >> _GEN_94;
  wire [31:0]      _GEN_106 = _GEN_103 >> _ibuf_io_inst_0_bits_inst_rs3;
  wire [31:0]      _GEN_107 = _GEN_103 >> _GEN_96;
  reg              dcache_blocked_blocked;
  reg              rocc_blocked;
  wire             _GEN_108 =
    ex_reg_valid
    & (ex_ctrl_wxd & (_GEN_88 & _GEN_54 | _GEN_89 & _GEN_56 | _GEN_90 & _GEN_98)
       & ((|ex_ctrl_csr) | ex_ctrl_jalr | ex_ctrl_mem | ex_ctrl_mul | ex_ctrl_div
          | ex_ctrl_fp | ex_ctrl_rocc | ex_ctrl_vec) | (|_GEN_50) & ex_ctrl_wfd
       & (io_fpu_dec_ren1 & _GEN_54 | io_fpu_dec_ren2 & _GEN_56 | io_fpu_dec_ren3
          & _ibuf_io_inst_0_bits_inst_rs3 == ex_reg_inst[11:7] | io_fpu_dec_wen
          & _GEN_98)) | mem_reg_valid
    & (data_hazard_mem
       & ((|mem_ctrl_csr) | mem_ctrl_mem & mem_mem_cmd_bh | mem_ctrl_mul | mem_ctrl_div
          | mem_ctrl_fp | mem_ctrl_rocc | mem_ctrl_vec) | (|_GEN_50) & mem_ctrl_wfd
       & (io_fpu_dec_ren1 & _GEN_55 | io_fpu_dec_ren2 & _GEN_57 | io_fpu_dec_ren3
          & _ibuf_io_inst_0_bits_inst_rs3 == mem_reg_inst[11:7] | io_fpu_dec_wen
          & _GEN_99)) | wb_reg_valid
    & (wb_ctrl_wxd & (_GEN_88 & _GEN_100 | _GEN_89 & _GEN_101 | _GEN_90 & _GEN_102)
       & wb_set_sboard | (|_GEN_50) & wb_ctrl_wfd
       & (io_fpu_dec_ren1 & _GEN_100 | io_fpu_dec_ren2 & _GEN_101 | io_fpu_dec_ren3
          & _ibuf_io_inst_0_bits_inst_rs3 == wb_reg_inst[11:7] | io_fpu_dec_wen
          & _GEN_102)) | _GEN_88 & _GEN_93[0]
    & ~(ll_wen & ll_waddr == _ibuf_io_inst_0_bits_inst_rs1) | _GEN_89 & _GEN_95[0]
    & ~(ll_wen & ll_waddr == _ibuf_io_inst_0_bits_inst_rs2) | _GEN_90 & _GEN_97[0]
    & ~(ll_wen & ll_waddr == _ibuf_io_inst_0_bits_inst_rd) | _csr_io_singleStep
    & (ex_reg_valid | mem_reg_valid | wb_reg_valid) | id_csr_en & _csr_io_decode_0_fp_csr
    & ~io_fpu_fcsr_rdy | (|_GEN_50)
    & (io_fpu_dec_ren1 & _GEN_104[0] | io_fpu_dec_ren2 & _GEN_105[0] | io_fpu_dec_ren3
       & _GEN_106[0] | io_fpu_dec_wen & _GEN_107[0]) | (|_GEN_47) & dcache_blocked_blocked
    & ~io_dmem_perf_grant | (|_GEN_46)
    & (~(_div_io_req_ready | _div_io_resp_valid & ~wb_wxd) | _GEN_70) | id_mem_busy
    & ((|_GEN_44) & _ibuf_io_inst_0_bits_inst_bits[25] | (&_GEN_15) | id_reg_fence
       & (|_GEN_47)) | _csr_io_csr_stall | id_reg_pause;
  wire             ctrl_killd =
    ~_ibuf_io_inst_0_valid | _ibuf_io_inst_0_bits_replay | take_pc_mem_wb | _GEN_108
    | _csr_io_interrupt;
  reg              io_imem_progress_REG;
  wire             _io_imem_sfence_valid_output = wb_reg_valid & wb_reg_sfence;
  wire             _GEN_109 = mem_reg_valid & ~take_pc_wb;
  wire             _GEN_110 = mem_ctrl_jal | mem_ctrl_jalr;
  wire [38:0]      _io_imem_btb_update_bits_br_pc_output =
    mem_reg_pc[38:0] + {37'h0, ~mem_reg_rvc, 1'h0};
  wire [38:0]      _io_imem_btb_update_bits_pc_output =
    {_io_imem_btb_update_bits_br_pc_output[38:2], 2'h0};
  assign _io_dmem_req_valid_output = ex_reg_valid & ex_ctrl_mem;
  wire             _io_dmem_req_bits_dv_output = ex_reg_hls | _csr_io_status_dv;
  reg  [63:0]      coreMonitorBundle_rd0val_REG;
  reg  [63:0]      coreMonitorBundle_rd0val_REG_1;
  reg  [63:0]      coreMonitorBundle_rd1val_REG;
  reg  [63:0]      coreMonitorBundle_rd1val_REG_1;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (~reset & ~(~(wb_reg_xcpt & _GEN_87) | io_imem_gpa_valid)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at RocketCore.scala:885 assert(!htval_valid_imem || io.imem.gpa.valid)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if ((`PRINTF_COND_) & _csr_io_trace_0_valid & ~reset) begin
        automatic logic coreMonitorBundle_wrenx = wb_wen & ~wb_set_sboard;
        automatic logic _GEN_111 = wb_ctrl_rxs1 | wb_ctrl_rfs1;
        automatic logic _GEN_112 = wb_ctrl_rxs2 | wb_ctrl_rfs2;
        $fwrite(32'h80000002,
                "C%d: %d [%d] pc=[%x] W[r%d=%x][%d] R[r%d=%x] R[r%d=%x] inst=[%x] DASM(%x)\n",
                io_hartid, _csr_io_time[31:0],
                _csr_io_trace_0_valid & ~_csr_io_trace_0_exception,
                {{24{_csr_io_trace_0_iaddr[39]}}, _csr_io_trace_0_iaddr},
                wb_ctrl_wxd | wb_ctrl_wfd ? wb_reg_inst[11:7] : 5'h0,
                coreMonitorBundle_wrenx ? coreMonitorBundle_wrdata : 64'h0,
                coreMonitorBundle_wrenx, _GEN_111 ? wb_reg_inst[19:15] : 5'h0,
                _GEN_111 ? coreMonitorBundle_rd0val_REG_1 : 64'h0,
                _GEN_112 ? wb_reg_inst[24:20] : 5'h0,
                _GEN_112 ? coreMonitorBundle_rd1val_REG_1 : 64'h0, _csr_io_trace_0_insn,
                _csr_io_trace_0_insn);
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    automatic logic [8:0]  _GEN_113;
    automatic logic [7:0]  _GEN_114;
    automatic logic [18:0] _GEN_115;
    automatic logic [40:0] _GEN_116;
    automatic logic        id_system_insn;
    automatic logic        id_csr_ren;
    automatic logic        _GEN_117;
    automatic logic        id_illegal_insn;
    automatic logic        id_virtual_insn;
    automatic logic        id_xcpt;
    automatic logic        _GEN_118;
    automatic logic        _GEN_119;
    automatic logic        id_bypass_src_1_1;
    automatic logic        id_bypass_src_1_2;
    automatic logic        _GEN_120 = ~take_pc_mem_wb & _ibuf_io_inst_0_valid;
    automatic logic        do_bypass_1;
    automatic logic        _GEN_121;
    automatic logic        ex_sfence =
      ex_ctrl_mem
      & (ex_ctrl_mem_cmd == 5'h14 | ex_ctrl_mem_cmd == 5'h15 | ex_ctrl_mem_cmd == 5'h16);
    automatic logic        mem_pc_valid =
      mem_reg_valid | mem_reg_replay | mem_reg_xcpt_interrupt;
    automatic logic        mem_npc_misaligned;
    automatic logic        _GEN_122 = mem_reg_valid & mem_reg_flush_pipe;
    automatic logic        _GEN_123 = _GEN_122 | ~ex_pc_valid;
    automatic logic        _GEN_124;
    automatic logic        _GEN_125;
    automatic logic        _GEN_126;
    automatic logic        mem_xcpt;
    automatic logic        ctrl_killm;
    _GEN_113 =
      {_ibuf_io_inst_0_bits_inst_bits[0],
       _ibuf_io_inst_0_bits_inst_bits[1],
       _ibuf_io_inst_0_bits_inst_bits[2],
       _ibuf_io_inst_0_bits_inst_bits[3],
       _GEN_0[2],
       _GEN_0[3],
       _GEN_0[4],
       _GEN_0[11],
       _GEN_0[12]};
    _GEN_114 =
      {_ibuf_io_inst_0_bits_inst_bits[0],
       _ibuf_io_inst_0_bits_inst_bits[1],
       _GEN_0[0],
       _GEN_0[1],
       _ibuf_io_inst_0_bits_inst_bits[5],
       _ibuf_io_inst_0_bits_inst_bits[6],
       _ibuf_io_inst_0_bits_inst_bits[12],
       _GEN_0[11]};
    _GEN_115 =
      {_ibuf_io_inst_0_bits_inst_bits[0],
       _ibuf_io_inst_0_bits_inst_bits[1],
       _GEN_0[0],
       _GEN_0[1],
       _ibuf_io_inst_0_bits_inst_bits[4],
       _GEN_0[3],
       _ibuf_io_inst_0_bits_inst_bits[6],
       _ibuf_io_inst_0_bits_inst_bits[20],
       _GEN_0[19],
       _GEN_0[20],
       _GEN_0[21],
       _GEN_0[22],
       _GEN_0[23],
       _GEN_0[24],
       _GEN_0[25],
       _GEN_0[26],
       _GEN_0[27],
       _ibuf_io_inst_0_bits_inst_bits[30],
       _GEN_0[29]};
    _GEN_116 =
      {&_GEN_1,
       &_GEN_2,
       &_GEN_3,
       &_GEN_113,
       &_GEN_4,
       &_GEN_5,
       &_GEN_7,
       &_GEN_8,
       &_GEN_9,
       &{_ibuf_io_inst_0_bits_inst_bits[0],
         _ibuf_io_inst_0_bits_inst_bits[1],
         _GEN_0[2],
         _GEN_0[3],
         _ibuf_io_inst_0_bits_inst_bits[6],
         _GEN_0[24]},
       &_GEN_11,
       &_GEN_12,
       &_GEN_14,
       &{_ibuf_io_inst_0_bits_inst_bits[0],
         _ibuf_io_inst_0_bits_inst_bits[1],
         _GEN_0[0],
         _GEN_0[1],
         _ibuf_io_inst_0_bits_inst_bits[4],
         _ibuf_io_inst_0_bits_inst_bits[5],
         _ibuf_io_inst_0_bits_inst_bits[6],
         _GEN_0[5],
         _GEN_0[6],
         _GEN_0[7],
         _GEN_0[8],
         _GEN_0[9],
         _GEN_0[10],
         _GEN_0[11],
         _GEN_0[12],
         _GEN_0[13],
         _GEN_0[14],
         _GEN_0[15],
         _GEN_0[16],
         _GEN_0[17],
         _GEN_0[19],
         _GEN_0[20],
         _GEN_0[21],
         _GEN_0[22],
         _GEN_0[23],
         _GEN_0[24],
         _GEN_0[25],
         _GEN_0[26],
         _GEN_0[27],
         _GEN_0[28],
         _GEN_0[29]},
       &_GEN_16,
       &_GEN_17,
       &_GEN_114,
       &_GEN_19,
       &_GEN_20,
       &_GEN_21,
       &_GEN_22,
       &_GEN_23,
       &_GEN_24,
       &_GEN_25,
       &_GEN_26,
       &_GEN_27,
       &_GEN_28,
       &_GEN_30,
       &{_ibuf_io_inst_0_bits_inst_bits[0],
         _ibuf_io_inst_0_bits_inst_bits[1],
         _GEN_0[0],
         _GEN_0[1],
         _ibuf_io_inst_0_bits_inst_bits[4],
         _ibuf_io_inst_0_bits_inst_bits[5],
         _ibuf_io_inst_0_bits_inst_bits[6],
         _GEN_0[5],
         _GEN_0[6],
         _GEN_0[7],
         _GEN_0[8],
         _GEN_0[9],
         _GEN_0[10],
         _GEN_0[11],
         _GEN_0[12],
         _GEN_0[13],
         _GEN_0[14],
         _GEN_0[15],
         _GEN_0[16],
         _GEN_0[17],
         _GEN_0[18],
         _ibuf_io_inst_0_bits_inst_bits[21],
         _GEN_0[20],
         _GEN_0[21],
         _GEN_0[22],
         _GEN_0[23],
         _GEN_0[24],
         _GEN_0[25],
         _ibuf_io_inst_0_bits_inst_bits[28],
         _GEN_0[28],
         _GEN_0[29]},
       &{_ibuf_io_inst_0_bits_inst_bits[0],
         _ibuf_io_inst_0_bits_inst_bits[1],
         _GEN_0[0],
         _GEN_0[1],
         _ibuf_io_inst_0_bits_inst_bits[4],
         _ibuf_io_inst_0_bits_inst_bits[5],
         _ibuf_io_inst_0_bits_inst_bits[6],
         _GEN_0[5],
         _GEN_0[6],
         _GEN_0[7],
         _GEN_0[8],
         _GEN_0[9],
         _GEN_0[10],
         _GEN_0[11],
         _GEN_0[12],
         _GEN_0[13],
         _GEN_0[14],
         _GEN_0[15],
         _GEN_0[16],
         _GEN_0[17],
         _ibuf_io_inst_0_bits_inst_bits[20],
         _GEN_0[19],
         _ibuf_io_inst_0_bits_inst_bits[22],
         _GEN_0[21],
         _GEN_0[22],
         _GEN_0[23],
         _GEN_0[24],
         _GEN_0[25],
         _ibuf_io_inst_0_bits_inst_bits[28],
         _GEN_0[28],
         _GEN_0[29]},
       &_GEN_32,
       &_GEN_33,
       &_GEN_34,
       &_GEN_35,
       &_GEN_36,
       &_GEN_37,
       &_GEN_38,
       &{_ibuf_io_inst_0_bits_inst_bits[0],
         _ibuf_io_inst_0_bits_inst_bits[1],
         _GEN_0[0],
         _GEN_0[1],
         _ibuf_io_inst_0_bits_inst_bits[4],
         _ibuf_io_inst_0_bits_inst_bits[5],
         _ibuf_io_inst_0_bits_inst_bits[6],
         _GEN_0[5],
         _GEN_0[6],
         _GEN_0[7],
         _GEN_0[8],
         _GEN_0[9],
         _GEN_0[10],
         _GEN_0[11],
         _GEN_0[12],
         _GEN_0[13],
         _GEN_0[14],
         _GEN_0[15],
         _GEN_0[16],
         _GEN_0[17],
         _GEN_0[18],
         _ibuf_io_inst_0_bits_inst_bits[21],
         _GEN_0[20],
         _GEN_0[21],
         _ibuf_io_inst_0_bits_inst_bits[24],
         _ibuf_io_inst_0_bits_inst_bits[25],
         _GEN_0[24],
         _ibuf_io_inst_0_bits_inst_bits[27],
         _ibuf_io_inst_0_bits_inst_bits[28],
         _ibuf_io_inst_0_bits_inst_bits[29],
         _ibuf_io_inst_0_bits_inst_bits[30],
         _GEN_0[29]},
       &_GEN_39,
       &{_ibuf_io_inst_0_bits_inst_bits[0],
         _ibuf_io_inst_0_bits_inst_bits[1],
         _GEN_0[0],
         _GEN_0[1],
         _ibuf_io_inst_0_bits_inst_bits[4],
         _GEN_0[3],
         _ibuf_io_inst_0_bits_inst_bits[6],
         _GEN_0[10],
         _GEN_0[11],
         _GEN_0[12],
         _GEN_0[18],
         _GEN_0[19],
         _GEN_0[20],
         _GEN_0[21],
         _GEN_0[22],
         _GEN_0[24],
         _GEN_0[25],
         _ibuf_io_inst_0_bits_inst_bits[29],
         _ibuf_io_inst_0_bits_inst_bits[30],
         _ibuf_io_inst_0_bits_inst_bits[31]},
       &_GEN_42};
    id_system_insn = id_ctrl_csr == 3'h4;
    id_csr_ren = _GEN_51 & ~(|_ibuf_io_inst_0_bits_inst_rs1);
    _GEN_117 = ~id_csr_ren & _csr_io_decode_0_write_illegal;
    id_illegal_insn =
      ~(|_GEN_116) | (|_GEN_46) & ~(_csr_io_status_isa[12]) | (|_GEN_44)
      & ~(_csr_io_status_isa[0]) | (|_GEN_50)
      & (_csr_io_decode_0_fp_illegal | io_fpu_illegal_rm)
      | (|{&{_ibuf_io_inst_0_bits_inst_bits[0],
             _ibuf_io_inst_0_bits_inst_bits[1],
             _ibuf_io_inst_0_bits_inst_bits[2],
             _GEN_0[1],
             _GEN_0[2],
             _GEN_0[4],
             _ibuf_io_inst_0_bits_inst_bits[12],
             _ibuf_io_inst_0_bits_inst_bits[13],
             _GEN_0[12]},
           &{_ibuf_io_inst_0_bits_inst_bits[0],
             _ibuf_io_inst_0_bits_inst_bits[1],
             _GEN_0[2],
             _GEN_0[3],
             _ibuf_io_inst_0_bits_inst_bits[6],
             _ibuf_io_inst_0_bits_inst_bits[25],
             _GEN_0[24]},
           &{_ibuf_io_inst_0_bits_inst_bits[0],
             _ibuf_io_inst_0_bits_inst_bits[1],
             _GEN_0[0],
             _GEN_0[1],
             _ibuf_io_inst_0_bits_inst_bits[4],
             _GEN_0[3],
             _ibuf_io_inst_0_bits_inst_bits[6],
             _ibuf_io_inst_0_bits_inst_bits[25],
             _GEN_0[24],
             _GEN_0[27],
             _GEN_0[28],
             _GEN_0[29]},
           &{_ibuf_io_inst_0_bits_inst_bits[0],
             _ibuf_io_inst_0_bits_inst_bits[1],
             _GEN_0[0],
             _GEN_0[1],
             _ibuf_io_inst_0_bits_inst_bits[4],
             _GEN_0[3],
             _ibuf_io_inst_0_bits_inst_bits[6],
             _GEN_0[10],
             _GEN_0[12],
             _ibuf_io_inst_0_bits_inst_bits[25],
             _GEN_0[24],
             _GEN_0[25],
             _GEN_0[26],
             _ibuf_io_inst_0_bits_inst_bits[29],
             _GEN_0[28]},
           &{_ibuf_io_inst_0_bits_inst_bits[0],
             _ibuf_io_inst_0_bits_inst_bits[1],
             _GEN_0[0],
             _GEN_0[1],
             _ibuf_io_inst_0_bits_inst_bits[4],
             _GEN_0[3],
             _ibuf_io_inst_0_bits_inst_bits[6],
             _GEN_0[11],
             _GEN_0[12],
             _ibuf_io_inst_0_bits_inst_bits[25],
             _GEN_0[24],
             _GEN_0[25],
             _GEN_0[26],
             _ibuf_io_inst_0_bits_inst_bits[29],
             _GEN_0[28]},
           &{_ibuf_io_inst_0_bits_inst_bits[0],
             _ibuf_io_inst_0_bits_inst_bits[1],
             _GEN_0[0],
             _GEN_0[1],
             _ibuf_io_inst_0_bits_inst_bits[4],
             _GEN_0[3],
             _ibuf_io_inst_0_bits_inst_bits[6],
             _GEN_0[11],
             _GEN_0[12],
             _ibuf_io_inst_0_bits_inst_bits[25],
             _GEN_0[24],
             _GEN_0[26],
             _ibuf_io_inst_0_bits_inst_bits[29],
             _GEN_0[28],
             _GEN_0[29]},
           &_GEN_115,
           &_GEN_37,
           &{_ibuf_io_inst_0_bits_inst_bits[0],
             _ibuf_io_inst_0_bits_inst_bits[1],
             _GEN_0[0],
             _GEN_0[1],
             _ibuf_io_inst_0_bits_inst_bits[4],
             _GEN_0[3],
             _ibuf_io_inst_0_bits_inst_bits[6],
             _GEN_0[18],
             _GEN_0[19],
             _GEN_0[20],
             _GEN_0[21],
             _GEN_0[22],
             _ibuf_io_inst_0_bits_inst_bits[25],
             _GEN_0[24],
             _ibuf_io_inst_0_bits_inst_bits[27],
             _ibuf_io_inst_0_bits_inst_bits[28],
             _GEN_0[27],
             _ibuf_io_inst_0_bits_inst_bits[30],
             _GEN_0[29]},
           &{_ibuf_io_inst_0_bits_inst_bits[0],
             _ibuf_io_inst_0_bits_inst_bits[1],
             _GEN_0[0],
             _GEN_0[1],
             _ibuf_io_inst_0_bits_inst_bits[4],
             _GEN_0[3],
             _ibuf_io_inst_0_bits_inst_bits[6],
             _GEN_0[20],
             _GEN_0[21],
             _GEN_0[22],
             _ibuf_io_inst_0_bits_inst_bits[25],
             _GEN_0[24],
             _GEN_0[25],
             _GEN_0[27],
             _ibuf_io_inst_0_bits_inst_bits[30],
             _ibuf_io_inst_0_bits_inst_bits[31]},
           &{_ibuf_io_inst_0_bits_inst_bits[0],
             _ibuf_io_inst_0_bits_inst_bits[1],
             _GEN_0[0],
             _GEN_0[1],
             _ibuf_io_inst_0_bits_inst_bits[4],
             _GEN_0[3],
             _ibuf_io_inst_0_bits_inst_bits[6],
             _GEN_0[10],
             _GEN_0[11],
             _GEN_0[12],
             _GEN_0[18],
             _GEN_0[19],
             _GEN_0[20],
             _GEN_0[21],
             _GEN_0[22],
             _ibuf_io_inst_0_bits_inst_bits[25],
             _GEN_0[24],
             _GEN_0[25],
             _ibuf_io_inst_0_bits_inst_bits[29],
             _ibuf_io_inst_0_bits_inst_bits[30],
             _ibuf_io_inst_0_bits_inst_bits[31]},
           &{_ibuf_io_inst_0_bits_inst_bits[0],
             _ibuf_io_inst_0_bits_inst_bits[1],
             _GEN_0[0],
             _GEN_0[1],
             _ibuf_io_inst_0_bits_inst_bits[4],
             _GEN_0[3],
             _ibuf_io_inst_0_bits_inst_bits[6],
             _GEN_0[11],
             _GEN_0[12],
             _GEN_0[18],
             _GEN_0[19],
             _GEN_0[20],
             _GEN_0[21],
             _GEN_0[22],
             _ibuf_io_inst_0_bits_inst_bits[25],
             _GEN_0[24],
             _GEN_0[25],
             _GEN_0[26],
             _ibuf_io_inst_0_bits_inst_bits[29],
             _ibuf_io_inst_0_bits_inst_bits[30],
             _ibuf_io_inst_0_bits_inst_bits[31]}}) & ~(_csr_io_status_isa[3])
      | _ibuf_io_inst_0_bits_rvc & ~(_csr_io_status_isa[2]) | id_csr_en
      & (_csr_io_decode_0_read_illegal | _GEN_117) | ~_ibuf_io_inst_0_bits_rvc
      & id_system_insn & _csr_io_decode_0_system_illegal;
    id_virtual_insn =
      (|_GEN_116)
      & (id_csr_en & ~_GEN_117 & _csr_io_decode_0_virtual_access_illegal
         | ~_ibuf_io_inst_0_bits_rvc & id_system_insn
         & _csr_io_decode_0_virtual_system_illegal);
    id_xcpt =
      _csr_io_interrupt | _bpu_io_debug_if | _bpu_io_xcpt_if
      | _ibuf_io_inst_0_bits_xcpt0_pf_inst | _ibuf_io_inst_0_bits_xcpt0_gf_inst
      | _ibuf_io_inst_0_bits_xcpt0_ae_inst | _ibuf_io_inst_0_bits_xcpt1_pf_inst
      | _ibuf_io_inst_0_bits_xcpt1_gf_inst | _ibuf_io_inst_0_bits_xcpt1_ae_inst
      | id_virtual_insn | id_illegal_insn;
    _GEN_118 = ex_reg_valid & ex_ctrl_wxd;
    _GEN_119 = _GEN_53 & ~mem_ctrl_mem;
    id_bypass_src_1_1 = _GEN_118 & _GEN_56;
    id_bypass_src_1_2 = _GEN_119 & _GEN_57;
    do_bypass_1 =
      ~(|_ibuf_io_inst_0_bits_inst_rs2) | id_bypass_src_1_1 | id_bypass_src_1_2 | _GEN_53
      & _GEN_57;
    _GEN_121 = (|_GEN_49) & ~do_bypass_1;
    mem_npc_misaligned = ~(_csr_io_status_isa[2]) & _GEN_75[1] & ~mem_reg_sfence;
    _GEN_124 = ex_ctrl_jalr & _csr_io_status_debug;
    _GEN_125 = mem_reg_xcpt_interrupt | mem_reg_xcpt;
    _GEN_126 = mem_reg_valid & mem_npc_misaligned;
    mem_xcpt = _GEN_125 | _GEN_126 | mem_reg_valid & mem_ldst_xcpt;
    ctrl_killm = killm_common | mem_xcpt | fpu_kill_mem;
    id_reg_pause <=
      ~(_csr_io_time[4:0] == 5'h0 | _csr_io_inhibit_cycle | io_dmem_perf_release
        | take_pc_mem_wb)
      & (~ctrl_killd & (&_GEN_113) & _ibuf_io_inst_0_bits_inst_bits[23:20] == 4'h0
         | id_reg_pause);
    imem_might_request_reg <= ex_pc_valid | mem_pc_valid | _csr_io_customCSRs_0_value[1];
    if (~ctrl_killd) begin
      automatic logic [7:0]  _GEN_127;
      automatic logic [14:0] _GEN_128;
      automatic logic [15:0] _GEN_129;
      automatic logic [15:0] _GEN_130;
      automatic logic [7:0]  _GEN_131;
      automatic logic [8:0]  _GEN_132;
      automatic logic [7:0]  _GEN_133;
      automatic logic [8:0]  _GEN_134;
      automatic logic [13:0] _GEN_135 =
        {_ibuf_io_inst_0_bits_inst_bits[0],
         _ibuf_io_inst_0_bits_inst_bits[1],
         _ibuf_io_inst_0_bits_inst_bits[2],
         _ibuf_io_inst_0_bits_inst_bits[3],
         _GEN_0[2],
         _ibuf_io_inst_0_bits_inst_bits[5],
         _GEN_0[4],
         _ibuf_io_inst_0_bits_inst_bits[13],
         _GEN_0[12],
         _ibuf_io_inst_0_bits_inst_bits[27],
         _ibuf_io_inst_0_bits_inst_bits[28],
         _GEN_0[27],
         _GEN_0[28],
         _GEN_0[29]};
      automatic logic [4:0]  id_ctrl_mem_cmd;
      automatic logic        id_bypass_src_0_1;
      automatic logic        id_bypass_src_0_2;
      automatic logic [2:0]  _GEN_136;
      automatic logic        _GEN_137;
      automatic logic        do_bypass;
      automatic logic        _GEN_138;
      _GEN_127 =
        {_ibuf_io_inst_0_bits_inst_bits[0],
         _ibuf_io_inst_0_bits_inst_bits[1],
         _GEN_0[0],
         _GEN_0[1],
         _GEN_0[2],
         _ibuf_io_inst_0_bits_inst_bits[5],
         _ibuf_io_inst_0_bits_inst_bits[6],
         _GEN_0[11]};
      _GEN_128 =
        {_ibuf_io_inst_0_bits_inst_bits[0],
         _ibuf_io_inst_0_bits_inst_bits[1],
         _GEN_0[0],
         _GEN_0[1],
         _ibuf_io_inst_0_bits_inst_bits[4],
         _GEN_0[3],
         _GEN_0[4],
         _ibuf_io_inst_0_bits_inst_bits[12],
         _GEN_0[11],
         _GEN_0[24],
         _GEN_0[25],
         _GEN_0[26],
         _GEN_0[27],
         _GEN_0[28],
         _GEN_0[29]};
      _GEN_129 =
        {_ibuf_io_inst_0_bits_inst_bits[0],
         _ibuf_io_inst_0_bits_inst_bits[1],
         _GEN_0[0],
         _ibuf_io_inst_0_bits_inst_bits[3],
         _ibuf_io_inst_0_bits_inst_bits[4],
         _GEN_0[3],
         _GEN_0[4],
         _ibuf_io_inst_0_bits_inst_bits[12],
         _GEN_0[11],
         _GEN_0[23],
         _GEN_0[24],
         _GEN_0[25],
         _GEN_0[26],
         _GEN_0[27],
         _GEN_0[28],
         _GEN_0[29]};
      _GEN_130 =
        {_ibuf_io_inst_0_bits_inst_bits[0],
         _ibuf_io_inst_0_bits_inst_bits[1],
         _GEN_0[0],
         _ibuf_io_inst_0_bits_inst_bits[3],
         _ibuf_io_inst_0_bits_inst_bits[4],
         _GEN_0[3],
         _GEN_0[4],
         _ibuf_io_inst_0_bits_inst_bits[12],
         _GEN_0[11],
         _ibuf_io_inst_0_bits_inst_bits[14],
         _GEN_0[23],
         _GEN_0[24],
         _GEN_0[25],
         _GEN_0[26],
         _GEN_0[27],
         _GEN_0[29]};
      _GEN_131 =
        {_ibuf_io_inst_0_bits_inst_bits[0],
         _ibuf_io_inst_0_bits_inst_bits[1],
         _GEN_0[0],
         _GEN_0[1],
         _ibuf_io_inst_0_bits_inst_bits[5],
         _ibuf_io_inst_0_bits_inst_bits[6],
         _ibuf_io_inst_0_bits_inst_bits[12],
         _ibuf_io_inst_0_bits_inst_bits[14]};
      _GEN_132 =
        {_ibuf_io_inst_0_bits_inst_bits[0],
         _ibuf_io_inst_0_bits_inst_bits[1],
         _GEN_0[0],
         _GEN_0[1],
         _ibuf_io_inst_0_bits_inst_bits[4],
         _ibuf_io_inst_0_bits_inst_bits[5],
         _ibuf_io_inst_0_bits_inst_bits[6],
         _ibuf_io_inst_0_bits_inst_bits[12],
         _ibuf_io_inst_0_bits_inst_bits[14]};
      _GEN_133 =
        {_ibuf_io_inst_0_bits_inst_bits[0],
         _ibuf_io_inst_0_bits_inst_bits[1],
         _GEN_0[0],
         _GEN_0[1],
         _ibuf_io_inst_0_bits_inst_bits[5],
         _ibuf_io_inst_0_bits_inst_bits[6],
         _ibuf_io_inst_0_bits_inst_bits[13],
         _ibuf_io_inst_0_bits_inst_bits[14]};
      _GEN_134 =
        {_ibuf_io_inst_0_bits_inst_bits[0],
         _ibuf_io_inst_0_bits_inst_bits[1],
         _GEN_0[0],
         _GEN_0[1],
         _ibuf_io_inst_0_bits_inst_bits[4],
         _ibuf_io_inst_0_bits_inst_bits[5],
         _ibuf_io_inst_0_bits_inst_bits[6],
         _ibuf_io_inst_0_bits_inst_bits[13],
         _ibuf_io_inst_0_bits_inst_bits[14]};
      id_ctrl_mem_cmd =
        {&_GEN_31,
         &_GEN_21,
         |{&_GEN_28,
           &_GEN_29,
           &_GEN_31,
           &{_ibuf_io_inst_0_bits_inst_bits[0],
             _ibuf_io_inst_0_bits_inst_bits[1],
             _ibuf_io_inst_0_bits_inst_bits[2],
             _ibuf_io_inst_0_bits_inst_bits[3],
             _GEN_0[2],
             _ibuf_io_inst_0_bits_inst_bits[5],
             _GEN_0[4],
             _ibuf_io_inst_0_bits_inst_bits[13],
             _GEN_0[12],
             _GEN_0[25],
             _GEN_0[26],
             _ibuf_io_inst_0_bits_inst_bits[31]}},
         |{&_GEN_29,
           &_GEN_135,
           &{_ibuf_io_inst_0_bits_inst_bits[0],
             _ibuf_io_inst_0_bits_inst_bits[1],
             _ibuf_io_inst_0_bits_inst_bits[2],
             _ibuf_io_inst_0_bits_inst_bits[3],
             _GEN_0[2],
             _ibuf_io_inst_0_bits_inst_bits[5],
             _GEN_0[4],
             _ibuf_io_inst_0_bits_inst_bits[13],
             _GEN_0[12],
             _GEN_0[25],
             _GEN_0[26],
             _ibuf_io_inst_0_bits_inst_bits[30]}},
         |{&_GEN_6,
           &{_ibuf_io_inst_0_bits_inst_bits[0],
             _ibuf_io_inst_0_bits_inst_bits[1],
             _GEN_0[1],
             _GEN_0[2],
             _ibuf_io_inst_0_bits_inst_bits[5],
             _GEN_0[4],
             _ibuf_io_inst_0_bits_inst_bits[13],
             _GEN_0[12]},
           &_GEN_135,
           &{_ibuf_io_inst_0_bits_inst_bits[0],
             _ibuf_io_inst_0_bits_inst_bits[1],
             _ibuf_io_inst_0_bits_inst_bits[2],
             _ibuf_io_inst_0_bits_inst_bits[3],
             _GEN_0[2],
             _ibuf_io_inst_0_bits_inst_bits[5],
             _GEN_0[4],
             _ibuf_io_inst_0_bits_inst_bits[13],
             _GEN_0[12],
             _GEN_0[25],
             _GEN_0[26],
             _ibuf_io_inst_0_bits_inst_bits[29]}}};
      id_bypass_src_0_1 = _GEN_118 & _GEN_54;
      id_bypass_src_0_2 = _GEN_119 & _GEN_55;
      _GEN_136 =
        {_ibuf_io_inst_0_bits_xcpt1_pf_inst,
         _ibuf_io_inst_0_bits_xcpt1_gf_inst,
         _ibuf_io_inst_0_bits_xcpt1_ae_inst};
      _GEN_137 = id_ctrl_mem_cmd == 5'h14;
      do_bypass =
        ~(|_ibuf_io_inst_0_bits_inst_rs1) | id_bypass_src_0_1 | id_bypass_src_0_2
        | _GEN_53 & _GEN_55;
      _GEN_138 = id_illegal_insn | id_virtual_insn;
      ex_ctrl_fp <= |_GEN_50;
      ex_ctrl_branch <= |{&_GEN_127, &_GEN_23};
      ex_ctrl_jal <= &_GEN_14;
      ex_ctrl_jalr <= &_GEN_13;
      ex_ctrl_rxs2 <= |_GEN_49;
      ex_ctrl_rxs1 <= |_GEN_48;
      if (id_xcpt) begin
        automatic logic _GEN_139 =
          _bpu_io_xcpt_if
          | (|{_ibuf_io_inst_0_bits_xcpt0_pf_inst,
               _ibuf_io_inst_0_bits_xcpt0_gf_inst,
               _ibuf_io_inst_0_bits_xcpt0_ae_inst});
        if (_GEN_139)
          ex_ctrl_sel_alu2 <= 3'h0;
        else
          ex_ctrl_sel_alu2 <= {2'h0, |_GEN_136};
        if (_GEN_139 | (|_GEN_136))
          ex_ctrl_sel_alu1 <= 2'h2;
        else
          ex_ctrl_sel_alu1 <= 2'h1;
        ex_ctrl_alu_fn <= 5'h0;
      end
      else begin
        automatic logic [15:0] _GEN_140 =
          {_ibuf_io_inst_0_bits_inst_bits[0],
           _ibuf_io_inst_0_bits_inst_bits[1],
           _GEN_0[0],
           _ibuf_io_inst_0_bits_inst_bits[4],
           _ibuf_io_inst_0_bits_inst_bits[5],
           _GEN_0[4],
           _GEN_0[10],
           _GEN_0[11],
           _GEN_0[12],
           _GEN_0[23],
           _GEN_0[24],
           _GEN_0[25],
           _GEN_0[26],
           _GEN_0[27],
           _ibuf_io_inst_0_bits_inst_bits[30],
           _GEN_0[29]};
        automatic logic [15:0] _GEN_141 =
          {_ibuf_io_inst_0_bits_inst_bits[0],
           _ibuf_io_inst_0_bits_inst_bits[1],
           _GEN_0[0],
           _GEN_0[1],
           _ibuf_io_inst_0_bits_inst_bits[4],
           _GEN_0[3],
           _GEN_0[4],
           _ibuf_io_inst_0_bits_inst_bits[12],
           _GEN_0[11],
           _ibuf_io_inst_0_bits_inst_bits[14],
           _GEN_0[24],
           _GEN_0[25],
           _GEN_0[26],
           _GEN_0[27],
           _ibuf_io_inst_0_bits_inst_bits[30],
           _GEN_0[29]};
        automatic logic [15:0] _GEN_142 =
          {_ibuf_io_inst_0_bits_inst_bits[0],
           _ibuf_io_inst_0_bits_inst_bits[1],
           _GEN_0[0],
           _ibuf_io_inst_0_bits_inst_bits[3],
           _ibuf_io_inst_0_bits_inst_bits[4],
           _GEN_0[4],
           _ibuf_io_inst_0_bits_inst_bits[12],
           _GEN_0[11],
           _ibuf_io_inst_0_bits_inst_bits[14],
           _GEN_0[23],
           _GEN_0[24],
           _GEN_0[25],
           _GEN_0[26],
           _GEN_0[27],
           _ibuf_io_inst_0_bits_inst_bits[30],
           _GEN_0[29]};
        automatic logic [15:0] _GEN_143 =
          {_ibuf_io_inst_0_bits_inst_bits[0],
           _ibuf_io_inst_0_bits_inst_bits[1],
           _GEN_0[0],
           _ibuf_io_inst_0_bits_inst_bits[4],
           _ibuf_io_inst_0_bits_inst_bits[5],
           _GEN_0[4],
           _ibuf_io_inst_0_bits_inst_bits[12],
           _GEN_0[11],
           _ibuf_io_inst_0_bits_inst_bits[14],
           _GEN_0[23],
           _GEN_0[24],
           _GEN_0[25],
           _GEN_0[26],
           _GEN_0[27],
           _ibuf_io_inst_0_bits_inst_bits[30],
           _GEN_0[29]};
        ex_ctrl_sel_alu2 <=
          {1'h0,
           |{&_GEN_1,
             &_GEN_2,
             &_GEN_3,
             &_GEN_4,
             &_GEN_5,
             &_GEN_7,
             &_GEN_8,
             &_GEN_9,
             &_GEN_127,
             &_GEN_12,
             &_GEN_16,
             &_GEN_17,
             &_GEN_19,
             &_GEN_20,
             &_GEN_24,
             &_GEN_25,
             &_GEN_26,
             &_GEN_131,
             &_GEN_133,
             &_GEN_27},
           |{&_GEN_1,
             &_GEN_2,
             &_GEN_3,
             &_GEN_4,
             &_GEN_5,
             &_GEN_13,
             &_GEN_14,
             &_GEN_128,
             &_GEN_129,
             &_GEN_19,
             &_GEN_20,
             &_GEN_24,
             &_GEN_130,
             &_GEN_132,
             &_GEN_134}};
        ex_ctrl_sel_alu1 <=
          {|{&{_ibuf_io_inst_0_bits_inst_bits[0],
               _ibuf_io_inst_0_bits_inst_bits[1],
               _ibuf_io_inst_0_bits_inst_bits[2],
               _GEN_0[1],
               _ibuf_io_inst_0_bits_inst_bits[4],
               _GEN_0[3],
               _GEN_0[4]},
             &_GEN_14},
           |_GEN_48};
        ex_ctrl_alu_fn <=
          {1'h0,
           |{&{_ibuf_io_inst_0_bits_inst_bits[0],
               _ibuf_io_inst_0_bits_inst_bits[1],
               _GEN_0[0],
               _GEN_0[1],
               _ibuf_io_inst_0_bits_inst_bits[4],
               _GEN_0[3],
               _GEN_0[4],
               _ibuf_io_inst_0_bits_inst_bits[13],
               _GEN_0[12]},
             &{_ibuf_io_inst_0_bits_inst_bits[0],
               _ibuf_io_inst_0_bits_inst_bits[1],
               _GEN_0[0],
               _GEN_0[1],
               _ibuf_io_inst_0_bits_inst_bits[4],
               _ibuf_io_inst_0_bits_inst_bits[5],
               _GEN_0[4],
               _ibuf_io_inst_0_bits_inst_bits[13],
               _GEN_0[12],
               _GEN_0[23],
               _GEN_0[24],
               _GEN_0[25],
               _GEN_0[26],
               _GEN_0[27],
               _GEN_0[28],
               _GEN_0[29]},
             &_GEN_23,
             &_GEN_140,
             &_GEN_141,
             &_GEN_142,
             &_GEN_143},
           |{&_GEN_20,
             &{_ibuf_io_inst_0_bits_inst_bits[0],
               _ibuf_io_inst_0_bits_inst_bits[1],
               _GEN_0[0],
               _GEN_0[1],
               _ibuf_io_inst_0_bits_inst_bits[4],
               _ibuf_io_inst_0_bits_inst_bits[5],
               _GEN_0[4],
               _ibuf_io_inst_0_bits_inst_bits[13],
               _GEN_0[23],
               _GEN_0[24],
               _GEN_0[25],
               _GEN_0[26],
               _GEN_0[27],
               _GEN_0[28],
               _GEN_0[29]},
             &{_ibuf_io_inst_0_bits_inst_bits[0],
               _ibuf_io_inst_0_bits_inst_bits[1],
               _GEN_0[0],
               _GEN_0[1],
               _ibuf_io_inst_0_bits_inst_bits[4],
               _GEN_0[3],
               _GEN_0[4],
               _GEN_0[10],
               _ibuf_io_inst_0_bits_inst_bits[14]},
             &{_ibuf_io_inst_0_bits_inst_bits[0],
               _ibuf_io_inst_0_bits_inst_bits[1],
               _GEN_0[0],
               _GEN_0[1],
               _ibuf_io_inst_0_bits_inst_bits[4],
               _ibuf_io_inst_0_bits_inst_bits[5],
               _GEN_0[4],
               _ibuf_io_inst_0_bits_inst_bits[14],
               _GEN_0[24],
               _GEN_0[25],
               _GEN_0[26],
               _GEN_0[27],
               _GEN_0[28],
               _GEN_0[29]},
             &_GEN_23,
             &{_ibuf_io_inst_0_bits_inst_bits[0],
               _ibuf_io_inst_0_bits_inst_bits[1],
               _GEN_0[0],
               _GEN_0[1],
               _ibuf_io_inst_0_bits_inst_bits[4],
               _GEN_0[4],
               _ibuf_io_inst_0_bits_inst_bits[12],
               _GEN_0[11],
               _ibuf_io_inst_0_bits_inst_bits[14],
               _GEN_0[24],
               _GEN_0[25],
               _GEN_0[26],
               _GEN_0[27],
               _GEN_0[28],
               _GEN_0[29]},
             &{_ibuf_io_inst_0_bits_inst_bits[0],
               _ibuf_io_inst_0_bits_inst_bits[1],
               _GEN_0[0],
               _ibuf_io_inst_0_bits_inst_bits[3],
               _ibuf_io_inst_0_bits_inst_bits[4],
               _GEN_0[4],
               _ibuf_io_inst_0_bits_inst_bits[12],
               _GEN_0[11],
               _ibuf_io_inst_0_bits_inst_bits[14],
               _GEN_0[23],
               _GEN_0[24],
               _GEN_0[25],
               _GEN_0[26],
               _GEN_0[27],
               _GEN_0[28],
               _GEN_0[29]},
             &_GEN_27},
           |{&{_ibuf_io_inst_0_bits_inst_bits[0],
               _ibuf_io_inst_0_bits_inst_bits[1],
               _GEN_0[0],
               _GEN_0[1],
               _GEN_0[2],
               _ibuf_io_inst_0_bits_inst_bits[5],
               _ibuf_io_inst_0_bits_inst_bits[6],
               _GEN_0[11],
               _GEN_0[12]},
             &{_ibuf_io_inst_0_bits_inst_bits[0],
               _ibuf_io_inst_0_bits_inst_bits[1],
               _GEN_0[0],
               _GEN_0[1],
               _ibuf_io_inst_0_bits_inst_bits[4],
               _GEN_0[3],
               _GEN_0[4],
               _ibuf_io_inst_0_bits_inst_bits[12],
               _ibuf_io_inst_0_bits_inst_bits[13]},
             &{_ibuf_io_inst_0_bits_inst_bits[0],
               _ibuf_io_inst_0_bits_inst_bits[1],
               _GEN_0[0],
               _GEN_0[1],
               _ibuf_io_inst_0_bits_inst_bits[4],
               _ibuf_io_inst_0_bits_inst_bits[5],
               _GEN_0[4],
               _ibuf_io_inst_0_bits_inst_bits[12],
               _ibuf_io_inst_0_bits_inst_bits[13],
               _GEN_0[24],
               _GEN_0[25],
               _GEN_0[26],
               _GEN_0[27],
               _GEN_0[28],
               _GEN_0[29]},
             &{_ibuf_io_inst_0_bits_inst_bits[0],
               _ibuf_io_inst_0_bits_inst_bits[1],
               _GEN_0[0],
               _GEN_0[1],
               _ibuf_io_inst_0_bits_inst_bits[4],
               _GEN_0[3],
               _GEN_0[4],
               _ibuf_io_inst_0_bits_inst_bits[13],
               _ibuf_io_inst_0_bits_inst_bits[14]},
             &{_ibuf_io_inst_0_bits_inst_bits[0],
               _ibuf_io_inst_0_bits_inst_bits[1],
               _GEN_0[0],
               _GEN_0[1],
               _ibuf_io_inst_0_bits_inst_bits[4],
               _ibuf_io_inst_0_bits_inst_bits[5],
               _GEN_0[4],
               _ibuf_io_inst_0_bits_inst_bits[13],
               _ibuf_io_inst_0_bits_inst_bits[14],
               _GEN_0[24],
               _GEN_0[25],
               _GEN_0[26],
               _GEN_0[27],
               _GEN_0[28],
               _GEN_0[29]},
             &{_ibuf_io_inst_0_bits_inst_bits[0],
               _ibuf_io_inst_0_bits_inst_bits[1],
               _GEN_0[0],
               _GEN_0[1],
               _GEN_0[2],
               _ibuf_io_inst_0_bits_inst_bits[5],
               _ibuf_io_inst_0_bits_inst_bits[6],
               _ibuf_io_inst_0_bits_inst_bits[13],
               _ibuf_io_inst_0_bits_inst_bits[14]},
             &{_ibuf_io_inst_0_bits_inst_bits[0],
               _ibuf_io_inst_0_bits_inst_bits[1],
               _GEN_0[0],
               _GEN_0[1],
               _ibuf_io_inst_0_bits_inst_bits[4],
               _ibuf_io_inst_0_bits_inst_bits[5],
               _GEN_0[4],
               _ibuf_io_inst_0_bits_inst_bits[13],
               _ibuf_io_inst_0_bits_inst_bits[25],
               _GEN_0[24],
               _GEN_0[25],
               _GEN_0[26],
               _GEN_0[27],
               _GEN_0[28],
               _GEN_0[29]},
             &{_ibuf_io_inst_0_bits_inst_bits[0],
               _ibuf_io_inst_0_bits_inst_bits[1],
               _GEN_0[0],
               _ibuf_io_inst_0_bits_inst_bits[4],
               _ibuf_io_inst_0_bits_inst_bits[5],
               _GEN_0[4],
               _ibuf_io_inst_0_bits_inst_bits[13],
               _ibuf_io_inst_0_bits_inst_bits[14],
               _ibuf_io_inst_0_bits_inst_bits[25],
               _GEN_0[24],
               _GEN_0[25],
               _GEN_0[26],
               _GEN_0[27],
               _GEN_0[28],
               _GEN_0[29]},
             &_GEN_140,
             &_GEN_141,
             &_GEN_142,
             &_GEN_143},
           |{&_GEN_16,
             &_GEN_17,
             &{_ibuf_io_inst_0_bits_inst_bits[0],
               _ibuf_io_inst_0_bits_inst_bits[1],
               _GEN_0[0],
               _GEN_0[1],
               _GEN_0[2],
               _ibuf_io_inst_0_bits_inst_bits[5],
               _ibuf_io_inst_0_bits_inst_bits[6],
               _ibuf_io_inst_0_bits_inst_bits[12],
               _GEN_0[11]},
             &_GEN_24,
             &_GEN_25,
             &_GEN_26,
             &{_ibuf_io_inst_0_bits_inst_bits[0],
               _ibuf_io_inst_0_bits_inst_bits[1],
               _GEN_0[0],
               _GEN_0[1],
               _ibuf_io_inst_0_bits_inst_bits[4],
               _ibuf_io_inst_0_bits_inst_bits[5],
               _GEN_0[4],
               _ibuf_io_inst_0_bits_inst_bits[12],
               _ibuf_io_inst_0_bits_inst_bits[14],
               _GEN_0[24],
               _GEN_0[25],
               _GEN_0[26],
               _GEN_0[27],
               _GEN_0[28],
               _GEN_0[29]},
             &{_ibuf_io_inst_0_bits_inst_bits[0],
               _ibuf_io_inst_0_bits_inst_bits[1],
               _GEN_0[0],
               _GEN_0[1],
               _GEN_0[2],
               _ibuf_io_inst_0_bits_inst_bits[5],
               _ibuf_io_inst_0_bits_inst_bits[6],
               _ibuf_io_inst_0_bits_inst_bits[12],
               _ibuf_io_inst_0_bits_inst_bits[14]},
             &{_ibuf_io_inst_0_bits_inst_bits[0],
               _ibuf_io_inst_0_bits_inst_bits[1],
               _GEN_0[0],
               _GEN_0[1],
               _ibuf_io_inst_0_bits_inst_bits[4],
               _GEN_0[3],
               _GEN_0[4],
               _ibuf_io_inst_0_bits_inst_bits[12],
               _ibuf_io_inst_0_bits_inst_bits[13],
               _ibuf_io_inst_0_bits_inst_bits[14]},
             &{_ibuf_io_inst_0_bits_inst_bits[0],
               _ibuf_io_inst_0_bits_inst_bits[1],
               _GEN_0[0],
               _GEN_0[1],
               _ibuf_io_inst_0_bits_inst_bits[4],
               _ibuf_io_inst_0_bits_inst_bits[5],
               _GEN_0[4],
               _ibuf_io_inst_0_bits_inst_bits[12],
               _ibuf_io_inst_0_bits_inst_bits[25],
               _GEN_0[24],
               _GEN_0[25],
               _GEN_0[26],
               _GEN_0[27],
               _GEN_0[28],
               _GEN_0[29]},
             &{_ibuf_io_inst_0_bits_inst_bits[0],
               _ibuf_io_inst_0_bits_inst_bits[1],
               _GEN_0[0],
               _ibuf_io_inst_0_bits_inst_bits[4],
               _ibuf_io_inst_0_bits_inst_bits[5],
               _GEN_0[4],
               _ibuf_io_inst_0_bits_inst_bits[12],
               _ibuf_io_inst_0_bits_inst_bits[14],
               _ibuf_io_inst_0_bits_inst_bits[25],
               _GEN_0[24],
               _GEN_0[25],
               _GEN_0[26],
               _GEN_0[27],
               _GEN_0[28],
               _GEN_0[29]}}};
      end
      ex_ctrl_sel_imm <=
        {|{&_GEN_1,
           &_GEN_2,
           &_GEN_4,
           &_GEN_13,
           &_GEN_128,
           &_GEN_129,
           &{_ibuf_io_inst_0_bits_inst_bits[0],
             _ibuf_io_inst_0_bits_inst_bits[1],
             _GEN_0[1],
             _GEN_0[2],
             _GEN_0[3],
             _GEN_0[4],
             _ibuf_io_inst_0_bits_inst_bits[13],
             _GEN_0[12]},
           &_GEN_20,
           &_GEN_24,
           &_GEN_130,
           &_GEN_132,
           &_GEN_134},
         |{&_GEN_5, &_GEN_14},
         |{&_GEN_127, &_GEN_14, &_GEN_131, &_GEN_133}};
      ex_ctrl_alu_dw <=
        id_xcpt
        | (|{&_GEN_1,
             &_GEN_2,
             &_GEN_3,
             &_GEN_5,
             &{_ibuf_io_inst_0_bits_inst_bits[0],
               _ibuf_io_inst_0_bits_inst_bits[1],
               _GEN_0[0],
               _GEN_0[1],
               _ibuf_io_inst_0_bits_inst_bits[4],
               _ibuf_io_inst_0_bits_inst_bits[5],
               _GEN_0[4],
               _GEN_0[10],
               _GEN_0[11],
               _GEN_0[12],
               _GEN_0[23],
               _GEN_0[24],
               _GEN_0[25],
               _GEN_0[26],
               _GEN_0[27],
               _GEN_0[29]},
             &_GEN_8,
             &_GEN_12,
             &_GEN_14,
             &_GEN_16,
             &_GEN_114,
             &_GEN_19,
             &_GEN_20,
             &_GEN_21,
             &_GEN_22,
             &_GEN_23,
             &_GEN_24,
             &{_ibuf_io_inst_0_bits_inst_bits[0],
               _ibuf_io_inst_0_bits_inst_bits[1],
               _GEN_0[0],
               _GEN_0[1],
               _ibuf_io_inst_0_bits_inst_bits[4],
               _ibuf_io_inst_0_bits_inst_bits[5],
               _GEN_0[4],
               _ibuf_io_inst_0_bits_inst_bits[12],
               _GEN_0[11],
               _ibuf_io_inst_0_bits_inst_bits[14],
               _GEN_0[23],
               _GEN_0[24],
               _GEN_0[25],
               _GEN_0[26],
               _GEN_0[27],
               _GEN_0[29]},
             &_GEN_28,
             &_GEN_29,
             &_GEN_31});
      ex_ctrl_mem <= |_GEN_47;
      if (_GEN_137 & _csr_io_status_v)
        ex_ctrl_mem_cmd <= 5'h15;
      else
        ex_ctrl_mem_cmd <= id_ctrl_mem_cmd;
      ex_ctrl_rfs1 <=
        |{&_GEN_10,
          &_GEN_11,
          &_GEN_33,
          &_GEN_34,
          &_GEN_35,
          &_GEN_36,
          &_GEN_37,
          &_GEN_38,
          &_GEN_40,
          &_GEN_42};
      ex_ctrl_rfs2 <=
        |{&_GEN_10,
          &_GEN_11,
          &{_ibuf_io_inst_0_bits_inst_bits[0],
            _ibuf_io_inst_0_bits_inst_bits[1],
            _ibuf_io_inst_0_bits_inst_bits[2],
            _GEN_0[1],
            _GEN_0[2],
            _ibuf_io_inst_0_bits_inst_bits[5],
            _GEN_0[4],
            _ibuf_io_inst_0_bits_inst_bits[13],
            _GEN_0[12]},
          &_GEN_33,
          &_GEN_34,
          &_GEN_35,
          &_GEN_38};
      ex_ctrl_wfd <=
        |{&_GEN_10,
          &_GEN_11,
          &{_ibuf_io_inst_0_bits_inst_bits[0],
            _ibuf_io_inst_0_bits_inst_bits[1],
            _ibuf_io_inst_0_bits_inst_bits[2],
            _GEN_0[1],
            _GEN_0[2],
            _GEN_0[3],
            _GEN_0[4],
            _ibuf_io_inst_0_bits_inst_bits[13],
            _GEN_0[12]},
          &_GEN_35,
          &{_ibuf_io_inst_0_bits_inst_bits[0],
            _ibuf_io_inst_0_bits_inst_bits[1],
            _GEN_0[0],
            _GEN_0[1],
            _ibuf_io_inst_0_bits_inst_bits[4],
            _GEN_0[3],
            _ibuf_io_inst_0_bits_inst_bits[6],
            _GEN_0[10],
            _GEN_0[12],
            _GEN_0[24],
            _GEN_0[25],
            _GEN_0[26],
            _ibuf_io_inst_0_bits_inst_bits[29],
            _GEN_0[28],
            _GEN_0[29]},
          &_GEN_115,
          &{_ibuf_io_inst_0_bits_inst_bits[0],
            _ibuf_io_inst_0_bits_inst_bits[1],
            _GEN_0[0],
            _GEN_0[1],
            _ibuf_io_inst_0_bits_inst_bits[4],
            _GEN_0[3],
            _ibuf_io_inst_0_bits_inst_bits[6],
            _GEN_0[18],
            _GEN_0[19],
            _GEN_0[20],
            _GEN_0[21],
            _GEN_0[22],
            _ibuf_io_inst_0_bits_inst_bits[25],
            _GEN_0[24],
            _GEN_0[25],
            _GEN_0[26],
            _GEN_0[27],
            _ibuf_io_inst_0_bits_inst_bits[30],
            _GEN_0[29]},
          &_GEN_38,
          &_GEN_41,
          &_GEN_43};
      ex_ctrl_div <= |_GEN_46;
      ex_ctrl_wxd <= |_GEN_45;
      if (id_system_insn & (|_GEN_47))
        ex_ctrl_csr <= 3'h0;
      else if (id_csr_ren)
        ex_ctrl_csr <= 3'h2;
      else
        ex_ctrl_csr <= id_ctrl_csr;
      ex_ctrl_fence_i <= &_GEN_15;
      ex_reg_rvc <= id_xcpt & (|_GEN_136) | _ibuf_io_inst_0_bits_rvc;
      ex_reg_flush_pipe <=
        (&_GEN_15) | id_system_insn | id_csr_en & ~id_csr_ren
        & _csr_io_decode_0_write_flush;
      ex_reg_load_use <= mem_reg_valid & data_hazard_mem & mem_ctrl_mem;
      if (_GEN_137 | id_ctrl_mem_cmd == 5'h15 | id_ctrl_mem_cmd == 5'h16
          | id_ctrl_mem_cmd == 5'h5)
        ex_reg_mem_size <=
          {|_ibuf_io_inst_0_bits_inst_rs2, |_ibuf_io_inst_0_bits_inst_rs1};
      else
        ex_reg_mem_size <= _ibuf_io_inst_0_bits_inst_bits[13:12];
      ex_reg_rs_bypass_0 <= ~_GEN_138 & do_bypass;
      ex_reg_rs_bypass_1 <= do_bypass_1;
      if (_GEN_138) begin
        automatic logic [31:0] inst =
          _ibuf_io_inst_0_bits_rvc
            ? {16'h0, _ibuf_io_inst_0_bits_raw[15:0]}
            : _ibuf_io_inst_0_bits_raw;
        ex_reg_rs_lsb_0 <= inst[1:0];
        ex_reg_rs_msb_0 <= {32'h0, inst[31:2]};
      end
      else if ((|_GEN_48) & ~do_bypass) begin
        ex_reg_rs_lsb_0 <= id_rs_0[1:0];
        ex_reg_rs_msb_0 <= id_rs_0[63:2];
      end
      else if (|_ibuf_io_inst_0_bits_inst_rs1) begin
        if (id_bypass_src_0_1)
          ex_reg_rs_lsb_0 <= 2'h1;
        else
          ex_reg_rs_lsb_0 <= {1'h1, ~id_bypass_src_0_2};
      end
      else
        ex_reg_rs_lsb_0 <= 2'h0;
      if (_GEN_121)
        ex_reg_rs_lsb_1 <= id_rs_1[1:0];
      else if (|_ibuf_io_inst_0_bits_inst_rs2) begin
        if (id_bypass_src_1_1)
          ex_reg_rs_lsb_1 <= 2'h1;
        else
          ex_reg_rs_lsb_1 <= {1'h1, ~id_bypass_src_1_2};
      end
      else
        ex_reg_rs_lsb_1 <= 2'h0;
    end
    ex_ctrl_rocc <= ctrl_killd & ex_ctrl_rocc;
    ex_ctrl_mul <= ctrl_killd & ex_ctrl_mul;
    ex_ctrl_vec <= ctrl_killd & ex_ctrl_vec;
    if (_GEN_123) begin
    end
    else begin
      mem_ctrl_fp <= ex_ctrl_fp;
      mem_ctrl_rocc <= ex_ctrl_rocc;
      mem_ctrl_branch <= ex_ctrl_branch;
      mem_ctrl_jal <= ex_ctrl_jal;
      mem_ctrl_jalr <= ex_ctrl_jalr;
      mem_ctrl_rxs2 <= ex_ctrl_rxs2;
      mem_ctrl_rxs1 <= ex_ctrl_rxs1;
      mem_ctrl_mem <= ex_ctrl_mem;
      mem_ctrl_rfs1 <= ex_ctrl_rfs1;
      mem_ctrl_rfs2 <= ex_ctrl_rfs2;
      mem_ctrl_wfd <= ex_ctrl_wfd;
      mem_ctrl_mul <= ex_ctrl_mul;
      mem_ctrl_div <= ex_ctrl_div;
      mem_ctrl_wxd <= ex_ctrl_wxd;
      mem_ctrl_csr <= ex_ctrl_csr;
      mem_ctrl_fence_i <= _GEN_124 | ex_ctrl_fence_i;
      mem_ctrl_vec <= ex_ctrl_vec;
    end
    if (mem_pc_valid) begin
      wb_ctrl_rocc <= mem_ctrl_rocc;
      wb_ctrl_rxs2 <= mem_ctrl_rxs2;
      wb_ctrl_rxs1 <= mem_ctrl_rxs1;
      wb_ctrl_mem <= mem_ctrl_mem;
      wb_ctrl_rfs1 <= mem_ctrl_rfs1;
      wb_ctrl_rfs2 <= mem_ctrl_rfs2;
      wb_ctrl_wfd <= mem_ctrl_wfd;
      wb_ctrl_div <= mem_ctrl_div;
      wb_ctrl_wxd <= mem_ctrl_wxd;
      wb_ctrl_csr <= mem_ctrl_csr;
      wb_ctrl_fence_i <= mem_ctrl_fence_i;
      wb_ctrl_vec <= mem_ctrl_vec;
      if (_GEN_125)
        wb_reg_cause <= mem_reg_cause;
      else
        wb_reg_cause <= {60'h0, _GEN_126 ? 4'h0 : mem_debug_breakpoint ? 4'hE : 4'h3};
      wb_reg_sfence <= mem_reg_sfence;
      wb_reg_pc <= mem_reg_pc;
      wb_reg_mem_size <= mem_reg_mem_size;
      wb_reg_hls_or_dv <= mem_reg_hls_or_dv;
      wb_reg_inst <= mem_reg_inst;
      wb_reg_raw_inst <= mem_reg_raw_inst;
      if (~mem_reg_xcpt & mem_ctrl_fp & mem_ctrl_wxd)
        wb_reg_wdata <= io_fpu_toint_data;
      else if (~mem_reg_xcpt & (mem_ctrl_jalr ^ mem_npc_misaligned))
        wb_reg_wdata <= {{24{_GEN_74[39]}}, _GEN_74};
      else
        wb_reg_wdata <= mem_reg_wdata;
    end
    ex_reg_xcpt_interrupt <= _GEN_120 & _csr_io_interrupt;
    ex_reg_valid <= ~ctrl_killd;
    if (~ctrl_killd | _csr_io_interrupt | _ibuf_io_inst_0_bits_replay) begin
      ex_reg_btb_resp_entry <= _ibuf_io_btb_resp_entry;
      ex_reg_btb_resp_bht_history <= _ibuf_io_btb_resp_bht_history;
      if (_csr_io_interrupt)
        ex_reg_cause <= _csr_io_interrupt_cause;
      else
        ex_reg_cause <=
          {59'h0,
           _bpu_io_debug_if
             ? 5'hE
             : _bpu_io_xcpt_if
                 ? 5'h3
                 : _ibuf_io_inst_0_bits_xcpt0_pf_inst
                     ? 5'hC
                     : _ibuf_io_inst_0_bits_xcpt0_gf_inst
                         ? 5'h14
                         : _ibuf_io_inst_0_bits_xcpt0_ae_inst
                             ? 5'h1
                             : _ibuf_io_inst_0_bits_xcpt1_pf_inst
                                 ? 5'hC
                                 : _ibuf_io_inst_0_bits_xcpt1_gf_inst
                                     ? 5'h14
                                     : _ibuf_io_inst_0_bits_xcpt1_ae_inst
                                         ? 5'h1
                                         : id_virtual_insn ? 5'h16 : 5'h2};
      ex_reg_pc <= _ibuf_io_pc;
      ex_reg_inst <= _ibuf_io_inst_0_bits_inst_bits;
      ex_reg_raw_inst <= _ibuf_io_inst_0_bits_raw;
    end
    ex_reg_xcpt <= ~ctrl_killd & id_xcpt;
    ex_reg_replay <= _GEN_120 & _ibuf_io_inst_0_bits_replay;
    ex_reg_hls <= ctrl_killd & ex_reg_hls;
    mem_reg_xcpt_interrupt <= ~take_pc_mem_wb & ex_reg_xcpt_interrupt;
    mem_reg_valid <= ~ctrl_killx;
    if (_GEN_123) begin
    end
    else begin
      mem_reg_rvc <= ex_reg_rvc;
      mem_reg_btb_resp_entry <= ex_reg_btb_resp_entry;
      mem_reg_btb_resp_bht_history <= ex_reg_btb_resp_bht_history;
    end
    mem_reg_xcpt <= ~ctrl_killx & (ex_reg_xcpt_interrupt | ex_reg_xcpt);
    mem_reg_replay <= ~take_pc_mem_wb & replay_ex;
    if (_GEN_123) begin
    end
    else begin
      automatic logic _GEN_144 = ex_ctrl_mem_cmd == 5'h7;
      automatic logic _GEN_145 =
        ex_ctrl_mem_cmd == 5'h4 | ex_ctrl_mem_cmd == 5'h9 | ex_ctrl_mem_cmd == 5'hA
        | ex_ctrl_mem_cmd == 5'hB | ex_ctrl_mem_cmd == 5'h8 | ex_ctrl_mem_cmd == 5'hC
        | ex_ctrl_mem_cmd == 5'hD | ex_ctrl_mem_cmd == 5'hE | ex_ctrl_mem_cmd == 5'hF;
      mem_reg_flush_pipe <= _GEN_124 | ex_reg_flush_pipe;
      mem_reg_cause <= ex_reg_cause;
      mem_mem_cmd_bh <= _GEN_144 | ~(ex_reg_mem_size[1]);
      mem_reg_load <=
        ex_ctrl_mem
        & (ex_ctrl_mem_cmd == 5'h0 | ex_ctrl_mem_cmd == 5'h10 | ex_ctrl_mem_cmd == 5'h6
           | _GEN_144 | _GEN_145);
      mem_reg_store <=
        ex_ctrl_mem
        & (ex_ctrl_mem_cmd == 5'h1 | ex_ctrl_mem_cmd == 5'h11 | _GEN_144 | _GEN_145);
    end
    mem_reg_sfence <= ~_GEN_122 & (ex_pc_valid ? ex_sfence : mem_reg_sfence);
    if (_GEN_123) begin
    end
    else begin
      mem_reg_pc <= ex_reg_pc;
      mem_reg_inst <= ex_reg_inst;
      mem_reg_mem_size <= ex_reg_mem_size;
      mem_reg_hls_or_dv <= _io_dmem_req_bits_dv_output;
      mem_reg_raw_inst <= ex_reg_raw_inst;
      mem_reg_wdata <= _alu_io_out;
    end
    if (_GEN_122
        | ~(ex_pc_valid & ex_ctrl_rxs2 & (ex_ctrl_mem | ex_ctrl_rocc | ex_sfence))) begin
    end
    else begin
      automatic logic [3:0][63:0] _GEN_146 =
        {{ex_rs_1},
         {{2{ex_rs_1[31:0]}}},
         {{2{{2{ex_rs_1[15:0]}}}}},
         {{2{{2{{2{ex_rs_1[7:0]}}}}}}}};
      mem_reg_rs2 <= _GEN_146[ex_ctrl_rocc ? 2'h3 : ex_reg_mem_size];
    end
    if (_GEN_123) begin
    end
    else
      mem_br_taken <= _alu_io_cmp_out;
    wb_reg_valid <= ~ctrl_killm;
    wb_reg_xcpt <= mem_xcpt & ~take_pc_wb;
    wb_reg_replay <= (dcache_kill_mem | mem_reg_replay | fpu_kill_mem) & ~take_pc_wb;
    wb_reg_flush_pipe <= ~ctrl_killm & mem_reg_flush_pipe;
    if (~ctrl_killd & _GEN_121)
      ex_reg_rs_msb_1 <= id_rs_1[63:2];
    div_io_kill_REG <= _div_io_req_ready & _GEN_70;
    dcache_blocked_blocked <=
      ~io_dmem_req_ready & ~io_dmem_perf_grant
      & (dcache_blocked_blocked | _io_dmem_req_valid_output | io_dmem_s2_nack);
    rocc_blocked <= ~wb_xcpt & (_GEN_52 & ~replay_wb_common | rocc_blocked);
    io_imem_progress_REG <= wb_reg_valid & ~replay_wb_common;
    if (ex_reg_rs_bypass_0)
      coreMonitorBundle_rd0val_REG <= _GEN_59;
    else
      coreMonitorBundle_rd0val_REG <= _GEN_60;
    coreMonitorBundle_rd0val_REG_1 <= coreMonitorBundle_rd0val_REG;
    if (ex_reg_rs_bypass_1)
      coreMonitorBundle_rd1val_REG <= _GEN_61;
    else
      coreMonitorBundle_rd1val_REG <= _GEN_62;
    coreMonitorBundle_rd1val_REG_1 <= coreMonitorBundle_rd1val_REG;
    if (reset) begin
      id_reg_fence <= 1'h0;
      _GEN_91 <= 32'h0;
      _GEN_103 <= 32'h0;
    end
    else begin
      automatic logic [31:0] _GEN_147;
      automatic logic        _GEN_148;
      automatic logic [31:0] _GEN_149;
      automatic logic        _GEN_150;
      automatic logic [31:0] _GEN_151;
      automatic logic        _GEN_152 = dmem_resp_replay & io_dmem_resp_bits_tag[0];
      automatic logic [31:0] _GEN_153;
      automatic logic        _GEN_154;
      _GEN_147 = r & ~(ll_wen ? 32'h1 << ll_waddr : 32'h0);
      _GEN_148 = wb_set_sboard & wb_wen;
      _GEN_149 = 32'h1 << wb_reg_inst[11:7];
      _GEN_150 =
        ((wb_dcache_miss | wb_ctrl_vec) & wb_ctrl_wfd | io_fpu_sboard_set) & wb_valid;
      _GEN_151 = _GEN_150 ? _GEN_149 : 32'h0;
      _GEN_153 =
        (_GEN_103 | _GEN_151) & ~(_GEN_152 ? 32'h1 << io_dmem_resp_bits_tag[5:1] : 32'h0);
      _GEN_154 = _GEN_150 | _GEN_152;
      id_reg_fence <=
        ~ctrl_killd & ((&_GEN_113) | (|_GEN_44) & _ibuf_io_inst_0_bits_inst_bits[26])
        | id_mem_busy & id_reg_fence;
      if (ll_wen | _GEN_148)
        _GEN_91 <= _GEN_147 | (_GEN_148 ? _GEN_149 : 32'h0);
      else if (ll_wen)
        _GEN_91 <= _GEN_147;
      if (_GEN_154 | io_fpu_sboard_clr)
        _GEN_103 <= _GEN_153 & ~(io_fpu_sboard_clr ? 32'h1 << io_fpu_sboard_clra : 32'h0);
      else if (_GEN_154)
        _GEN_103 <= _GEN_153;
      else
        _GEN_103 <= {32{_GEN_150}} & _GEN_151 | _GEN_103;
    end
  end // always @(posedge)
  IBuf ibuf (
    .clock                        (clock),
    .reset                        (reset),
    .io_imem_valid                (io_imem_resp_valid),
    .io_imem_bits_btb_taken       (io_imem_resp_bits_btb_taken),
    .io_imem_bits_btb_bridx       (io_imem_resp_bits_btb_bridx),
    .io_imem_bits_btb_entry       (io_imem_resp_bits_btb_entry),
    .io_imem_bits_btb_bht_history (io_imem_resp_bits_btb_bht_history),
    .io_imem_bits_pc              (io_imem_resp_bits_pc),
    .io_imem_bits_data            (io_imem_resp_bits_data),
    .io_imem_bits_xcpt_pf_inst    (io_imem_resp_bits_xcpt_pf_inst),
    .io_imem_bits_xcpt_gf_inst    (io_imem_resp_bits_xcpt_gf_inst),
    .io_imem_bits_xcpt_ae_inst    (io_imem_resp_bits_xcpt_ae_inst),
    .io_imem_bits_replay          (io_imem_resp_bits_replay),
    .io_kill                      (take_pc_mem_wb),
    .io_inst_0_ready              (~_GEN_108),
    .io_imem_ready                (io_imem_resp_ready),
    .io_pc                        (_ibuf_io_pc),
    .io_btb_resp_entry            (_ibuf_io_btb_resp_entry),
    .io_btb_resp_bht_history      (_ibuf_io_btb_resp_bht_history),
    .io_inst_0_valid              (_ibuf_io_inst_0_valid),
    .io_inst_0_bits_xcpt0_pf_inst (_ibuf_io_inst_0_bits_xcpt0_pf_inst),
    .io_inst_0_bits_xcpt0_gf_inst (_ibuf_io_inst_0_bits_xcpt0_gf_inst),
    .io_inst_0_bits_xcpt0_ae_inst (_ibuf_io_inst_0_bits_xcpt0_ae_inst),
    .io_inst_0_bits_xcpt1_pf_inst (_ibuf_io_inst_0_bits_xcpt1_pf_inst),
    .io_inst_0_bits_xcpt1_gf_inst (_ibuf_io_inst_0_bits_xcpt1_gf_inst),
    .io_inst_0_bits_xcpt1_ae_inst (_ibuf_io_inst_0_bits_xcpt1_ae_inst),
    .io_inst_0_bits_replay        (_ibuf_io_inst_0_bits_replay),
    .io_inst_0_bits_rvc           (_ibuf_io_inst_0_bits_rvc),
    .io_inst_0_bits_inst_bits     (_ibuf_io_inst_0_bits_inst_bits),
    .io_inst_0_bits_inst_rd       (_ibuf_io_inst_0_bits_inst_rd),
    .io_inst_0_bits_inst_rs1      (_ibuf_io_inst_0_bits_inst_rs1),
    .io_inst_0_bits_inst_rs2      (_ibuf_io_inst_0_bits_inst_rs2),
    .io_inst_0_bits_inst_rs3      (_ibuf_io_inst_0_bits_inst_rs3),
    .io_inst_0_bits_raw           (_ibuf_io_inst_0_bits_raw)
  );
  rf_combMem rf_ext (
    .R0_addr (~_ibuf_io_inst_0_bits_inst_rs1),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R1_addr (~_ibuf_io_inst_0_bits_inst_rs2),
    .R1_en   (1'h1),
    .R1_clk  (clock),
    .W0_addr (~rf_waddr),
    .W0_en   (rf_wen & (|rf_waddr)),
    .W0_clk  (clock),
    .W0_data (coreMonitorBundle_wrdata),
    .R0_data (_rf_ext_R0_data),
    .R1_data (_rf_ext_R1_data)
  );
  CSRFile csr (
    .clock                              (clock),
    .reset                              (reset),
    .io_ungated_clock                   (clock),
    .io_interrupts_debug                (io_interrupts_debug),
    .io_interrupts_mtip                 (io_interrupts_mtip),
    .io_interrupts_msip                 (io_interrupts_msip),
    .io_interrupts_meip                 (io_interrupts_meip),
    .io_interrupts_seip                 (io_interrupts_seip),
    .io_hartid                          (io_hartid),
    .io_rw_addr                         (wb_reg_inst[31:20]),
    .io_rw_cmd                          (wb_ctrl_csr & {wb_reg_valid, 2'h3}),
    .io_rw_wdata                        (wb_reg_wdata),
    .io_decode_0_inst                   (_ibuf_io_inst_0_bits_inst_bits),
    .io_exception                       (wb_xcpt),
    .io_retire                          (wb_valid),
    .io_cause
      (wb_reg_xcpt
         ? wb_reg_cause
         : {59'h0,
            _GEN_78
              ? 5'hF
              : _GEN_79
                  ? 5'hD
                  : _GEN_80
                      ? 5'h17
                      : _GEN_81
                          ? 5'h15
                          : {2'h0,
                             _GEN_82 ? 3'h7 : _GEN_83 ? 3'h5 : {1'h1, _GEN_84, 1'h0}}}),
    .io_pc                              (wb_reg_pc),
    .io_tval
      (wb_xcpt & (tval_any_addr | wb_reg_cause == 64'h2)
         ? {wb_reg_wdata[63:39] == 25'h0 | (&(wb_reg_wdata[63:39]))
              ? wb_reg_wdata[39]
              : ~(wb_reg_wdata[38]),
            wb_reg_wdata[38:0]}
         : 40'h0),
    .io_gva
      (wb_xcpt & (tval_any_addr & _csr_io_status_v | ~wb_reg_xcpt & wb_reg_hls_or_dv)),
    .io_fcsr_flags_valid                (io_fpu_fcsr_flags_valid),
    .io_fcsr_flags_bits
      (io_fpu_fcsr_flags_bits & {5{io_fpu_fcsr_flags_valid}}),
    .io_inst_0
      ({(&(wb_reg_raw_inst[1:0])) ? wb_reg_inst[31:16] : 16'h0, wb_reg_raw_inst[15:0]}),
    .io_rw_rdata                        (_csr_io_rw_rdata),
    .io_decode_0_fp_illegal             (_csr_io_decode_0_fp_illegal),
    .io_decode_0_fp_csr                 (_csr_io_decode_0_fp_csr),
    .io_decode_0_rocc_illegal           (/* unused */),
    .io_decode_0_read_illegal           (_csr_io_decode_0_read_illegal),
    .io_decode_0_write_illegal          (_csr_io_decode_0_write_illegal),
    .io_decode_0_write_flush            (_csr_io_decode_0_write_flush),
    .io_decode_0_system_illegal         (_csr_io_decode_0_system_illegal),
    .io_decode_0_virtual_access_illegal (_csr_io_decode_0_virtual_access_illegal),
    .io_decode_0_virtual_system_illegal (_csr_io_decode_0_virtual_system_illegal),
    .io_csr_stall                       (_csr_io_csr_stall),
    .io_eret                            (_csr_io_eret),
    .io_singleStep                      (_csr_io_singleStep),
    .io_status_debug                    (_csr_io_status_debug),
    .io_status_wfi                      (io_wfi),
    .io_status_isa                      (_csr_io_status_isa),
    .io_status_dprv                     (_csr_io_status_dprv),
    .io_status_dv                       (_csr_io_status_dv),
    .io_status_prv                      (_csr_io_status_prv),
    .io_status_v                        (_csr_io_status_v),
    .io_status_mxr                      (io_ptw_status_mxr),
    .io_status_sum                      (io_ptw_status_sum),
    .io_hstatus_spvp                    (_csr_io_hstatus_spvp),
    .io_ptbr_mode                       (io_ptw_ptbr_mode),
    .io_ptbr_ppn                        (io_ptw_ptbr_ppn),
    .io_evec                            (_csr_io_evec),
    .io_time                            (_csr_io_time),
    .io_fcsr_rm                         (io_fpu_fcsr_rm),
    .io_interrupt                       (_csr_io_interrupt),
    .io_interrupt_cause                 (_csr_io_interrupt_cause),
    .io_bp_0_control_action             (_csr_io_bp_0_control_action),
    .io_bp_0_control_chain              (_csr_io_bp_0_control_chain),
    .io_bp_0_control_tmatch             (_csr_io_bp_0_control_tmatch),
    .io_bp_0_control_m                  (_csr_io_bp_0_control_m),
    .io_bp_0_control_s                  (_csr_io_bp_0_control_s),
    .io_bp_0_control_u                  (_csr_io_bp_0_control_u),
    .io_bp_0_control_x                  (_csr_io_bp_0_control_x),
    .io_bp_0_control_w                  (_csr_io_bp_0_control_w),
    .io_bp_0_control_r                  (_csr_io_bp_0_control_r),
    .io_bp_0_address                    (_csr_io_bp_0_address),
    .io_pmp_0_cfg_l                     (io_ptw_pmp_0_cfg_l),
    .io_pmp_0_cfg_a                     (io_ptw_pmp_0_cfg_a),
    .io_pmp_0_cfg_x                     (io_ptw_pmp_0_cfg_x),
    .io_pmp_0_cfg_w                     (io_ptw_pmp_0_cfg_w),
    .io_pmp_0_cfg_r                     (io_ptw_pmp_0_cfg_r),
    .io_pmp_0_addr                      (io_ptw_pmp_0_addr),
    .io_pmp_0_mask                      (io_ptw_pmp_0_mask),
    .io_pmp_1_cfg_l                     (io_ptw_pmp_1_cfg_l),
    .io_pmp_1_cfg_a                     (io_ptw_pmp_1_cfg_a),
    .io_pmp_1_cfg_x                     (io_ptw_pmp_1_cfg_x),
    .io_pmp_1_cfg_w                     (io_ptw_pmp_1_cfg_w),
    .io_pmp_1_cfg_r                     (io_ptw_pmp_1_cfg_r),
    .io_pmp_1_addr                      (io_ptw_pmp_1_addr),
    .io_pmp_1_mask                      (io_ptw_pmp_1_mask),
    .io_pmp_2_cfg_l                     (io_ptw_pmp_2_cfg_l),
    .io_pmp_2_cfg_a                     (io_ptw_pmp_2_cfg_a),
    .io_pmp_2_cfg_x                     (io_ptw_pmp_2_cfg_x),
    .io_pmp_2_cfg_w                     (io_ptw_pmp_2_cfg_w),
    .io_pmp_2_cfg_r                     (io_ptw_pmp_2_cfg_r),
    .io_pmp_2_addr                      (io_ptw_pmp_2_addr),
    .io_pmp_2_mask                      (io_ptw_pmp_2_mask),
    .io_pmp_3_cfg_l                     (io_ptw_pmp_3_cfg_l),
    .io_pmp_3_cfg_a                     (io_ptw_pmp_3_cfg_a),
    .io_pmp_3_cfg_x                     (io_ptw_pmp_3_cfg_x),
    .io_pmp_3_cfg_w                     (io_ptw_pmp_3_cfg_w),
    .io_pmp_3_cfg_r                     (io_ptw_pmp_3_cfg_r),
    .io_pmp_3_addr                      (io_ptw_pmp_3_addr),
    .io_pmp_3_mask                      (io_ptw_pmp_3_mask),
    .io_pmp_4_cfg_l                     (io_ptw_pmp_4_cfg_l),
    .io_pmp_4_cfg_a                     (io_ptw_pmp_4_cfg_a),
    .io_pmp_4_cfg_x                     (io_ptw_pmp_4_cfg_x),
    .io_pmp_4_cfg_w                     (io_ptw_pmp_4_cfg_w),
    .io_pmp_4_cfg_r                     (io_ptw_pmp_4_cfg_r),
    .io_pmp_4_addr                      (io_ptw_pmp_4_addr),
    .io_pmp_4_mask                      (io_ptw_pmp_4_mask),
    .io_pmp_5_cfg_l                     (io_ptw_pmp_5_cfg_l),
    .io_pmp_5_cfg_a                     (io_ptw_pmp_5_cfg_a),
    .io_pmp_5_cfg_x                     (io_ptw_pmp_5_cfg_x),
    .io_pmp_5_cfg_w                     (io_ptw_pmp_5_cfg_w),
    .io_pmp_5_cfg_r                     (io_ptw_pmp_5_cfg_r),
    .io_pmp_5_addr                      (io_ptw_pmp_5_addr),
    .io_pmp_5_mask                      (io_ptw_pmp_5_mask),
    .io_pmp_6_cfg_l                     (io_ptw_pmp_6_cfg_l),
    .io_pmp_6_cfg_a                     (io_ptw_pmp_6_cfg_a),
    .io_pmp_6_cfg_x                     (io_ptw_pmp_6_cfg_x),
    .io_pmp_6_cfg_w                     (io_ptw_pmp_6_cfg_w),
    .io_pmp_6_cfg_r                     (io_ptw_pmp_6_cfg_r),
    .io_pmp_6_addr                      (io_ptw_pmp_6_addr),
    .io_pmp_6_mask                      (io_ptw_pmp_6_mask),
    .io_pmp_7_cfg_l                     (io_ptw_pmp_7_cfg_l),
    .io_pmp_7_cfg_a                     (io_ptw_pmp_7_cfg_a),
    .io_pmp_7_cfg_x                     (io_ptw_pmp_7_cfg_x),
    .io_pmp_7_cfg_w                     (io_ptw_pmp_7_cfg_w),
    .io_pmp_7_cfg_r                     (io_ptw_pmp_7_cfg_r),
    .io_pmp_7_addr                      (io_ptw_pmp_7_addr),
    .io_pmp_7_mask                      (io_ptw_pmp_7_mask),
    .io_inhibit_cycle                   (_csr_io_inhibit_cycle),
    .io_trace_0_valid                   (_csr_io_trace_0_valid),
    .io_trace_0_iaddr                   (_csr_io_trace_0_iaddr),
    .io_trace_0_insn                    (_csr_io_trace_0_insn),
    .io_trace_0_exception               (_csr_io_trace_0_exception),
    .io_customCSRs_0_value              (_csr_io_customCSRs_0_value)
  );
  BreakpointUnit bpu (
    .io_status_debug        (_csr_io_status_debug),
    .io_status_prv          (_csr_io_status_prv),
    .io_bp_0_control_action (_csr_io_bp_0_control_action),
    .io_bp_0_control_chain  (_csr_io_bp_0_control_chain),
    .io_bp_0_control_tmatch (_csr_io_bp_0_control_tmatch),
    .io_bp_0_control_m      (_csr_io_bp_0_control_m),
    .io_bp_0_control_s      (_csr_io_bp_0_control_s),
    .io_bp_0_control_u      (_csr_io_bp_0_control_u),
    .io_bp_0_control_x      (_csr_io_bp_0_control_x),
    .io_bp_0_control_w      (_csr_io_bp_0_control_w),
    .io_bp_0_control_r      (_csr_io_bp_0_control_r),
    .io_bp_0_address        (_csr_io_bp_0_address),
    .io_pc                  (_ibuf_io_pc[38:0]),
    .io_ea                  (mem_reg_wdata[38:0]),
    .io_xcpt_if             (_bpu_io_xcpt_if),
    .io_xcpt_ld             (_bpu_io_xcpt_ld),
    .io_xcpt_st             (_bpu_io_xcpt_st),
    .io_debug_if            (_bpu_io_debug_if),
    .io_debug_ld            (_bpu_io_debug_ld),
    .io_debug_st            (_bpu_io_debug_st)
  );
  RocketALU alu (
    .io_dw        (ex_ctrl_alu_dw),
    .io_fn        (ex_ctrl_alu_fn),
    .io_in2
      (ex_ctrl_sel_alu2 == 3'h1
         ? {{60{_GEN_69[3]}}, _GEN_69}
         : ex_ctrl_sel_alu2 == 3'h3
             ? {{33{ex_imm_sign}},
                _GEN_64 ? ex_reg_inst[30:20] : {11{ex_imm_sign}},
                ex_ctrl_sel_imm != 3'h2 & ex_ctrl_sel_imm != 3'h3
                  ? {8{ex_imm_sign}}
                  : ex_reg_inst[19:12],
                ~_GEN_65
                  & (ex_ctrl_sel_imm == 3'h3
                       ? ex_reg_inst[20]
                       : _GEN_66 ? ex_reg_inst[7] : ex_imm_sign),
                _GEN_65 ? 6'h0 : ex_reg_inst[30:25],
                _GEN_64
                  ? 4'h0
                  : _GEN_67 | _GEN_66
                      ? ex_reg_inst[11:8]
                      : _GEN_63 ? ex_reg_inst[19:16] : ex_reg_inst[24:21],
                _GEN_67
                  ? ex_reg_inst[7]
                  : ex_ctrl_sel_imm == 3'h4 ? ex_reg_inst[20] : _GEN_63 & ex_reg_inst[15]}
             : ex_ctrl_sel_alu2 == 3'h2 ? ex_rs_1 : 64'h0),
    .io_in1       (_GEN_68[ex_ctrl_sel_alu1]),
    .io_out       (_alu_io_out),
    .io_adder_out (_alu_io_adder_out),
    .io_cmp_out   (_alu_io_cmp_out)
  );
  MulDiv div (
    .clock             (clock),
    .reset             (reset),
    .io_req_valid      (_GEN_70),
    .io_req_bits_fn    (ex_ctrl_alu_fn),
    .io_req_bits_dw    (ex_ctrl_alu_dw),
    .io_req_bits_in1   (ex_rs_0),
    .io_req_bits_in2   (ex_rs_1),
    .io_req_bits_tag   (ex_reg_inst[11:7]),
    .io_kill           (killm_common & div_io_kill_REG),
    .io_resp_ready     (_ll_arb_io_in_0_ready),
    .io_req_ready      (_div_io_req_ready),
    .io_resp_valid     (_div_io_resp_valid),
    .io_resp_bits_data (_div_io_resp_bits_data),
    .io_resp_bits_tag  (_div_io_resp_bits_tag)
  );
  Arbiter3_LLWB ll_arb (
    .io_in_0_valid     (_div_io_resp_valid),
    .io_in_0_bits_data (_div_io_resp_bits_data),
    .io_in_0_bits_tag  (_div_io_resp_bits_tag),
    .io_out_ready      (_GEN),
    .io_in_0_ready     (_ll_arb_io_in_0_ready),
    .io_out_valid      (_ll_arb_io_out_valid),
    .io_out_bits_data  (_ll_arb_io_out_bits_data),
    .io_out_bits_tag   (_ll_arb_io_out_bits_tag)
  );
  PlusArgTimeout PlusArgTimeout (
    .clock    (clock),
    .reset    (reset),
    .io_count (_csr_io_time[31:0])
  );
  assign io_imem_might_request = imem_might_request_reg;
  assign io_imem_req_valid = take_pc_mem_wb;
  assign io_imem_req_bits_pc =
    wb_xcpt | _csr_io_eret ? _csr_io_evec : _GEN_85 ? wb_reg_pc : _GEN_76;
  assign io_imem_req_bits_speculative = ~take_pc_wb;
  assign io_imem_sfence_valid = _io_imem_sfence_valid_output;
  assign io_imem_sfence_bits_rs1 = wb_reg_mem_size[0];
  assign io_imem_sfence_bits_rs2 = wb_reg_mem_size[1];
  assign io_imem_sfence_bits_addr = wb_reg_wdata[38:0];
  assign io_imem_btb_update_valid =
    _GEN_109 & mem_wrong_npc & (~mem_cfi | _GEN_71 | mem_ctrl_jalr | mem_ctrl_jal);
  assign io_imem_btb_update_bits_prediction_entry = mem_reg_btb_resp_entry;
  assign io_imem_btb_update_bits_pc = _io_imem_btb_update_bits_pc_output;
  assign io_imem_btb_update_bits_isValid = mem_cfi;
  assign io_imem_btb_update_bits_br_pc = _io_imem_btb_update_bits_br_pc_output;
  assign io_imem_btb_update_bits_cfiType =
    _GEN_110 & mem_reg_inst[7]
      ? 2'h2
      : mem_ctrl_jalr & {mem_reg_inst[19:18], mem_reg_inst[16:15]} == 4'h1
          ? 2'h3
          : {1'h0, _GEN_110};
  assign io_imem_bht_update_valid = _GEN_109;
  assign io_imem_bht_update_bits_prediction_history = mem_reg_btb_resp_bht_history;
  assign io_imem_bht_update_bits_pc = _io_imem_btb_update_bits_pc_output;
  assign io_imem_bht_update_bits_branch = mem_ctrl_branch;
  assign io_imem_bht_update_bits_taken = mem_br_taken;
  assign io_imem_bht_update_bits_mispredict = mem_wrong_npc;
  assign io_imem_flush_icache = wb_reg_valid & wb_ctrl_fence_i & ~io_dmem_s2_nack;
  assign io_imem_progress = io_imem_progress_REG;
  assign io_dmem_req_valid = _io_dmem_req_valid_output;
  assign io_dmem_req_bits_addr =
    {ex_rs_0[63:39] == 25'h0 | (&(ex_rs_0[63:39]))
       ? _alu_io_adder_out[39]
       : ~(_alu_io_adder_out[38]),
     _alu_io_adder_out[38:0]};
  assign io_dmem_req_bits_tag = {1'h0, ex_reg_inst[11:7], ex_ctrl_fp};
  assign io_dmem_req_bits_cmd = ex_ctrl_mem_cmd;
  assign io_dmem_req_bits_size = ex_reg_mem_size;
  assign io_dmem_req_bits_signed = ~(ex_reg_hls ? ex_reg_inst[20] : ex_reg_inst[14]);
  assign io_dmem_req_bits_dprv =
    ex_reg_hls ? {1'h0, _csr_io_hstatus_spvp} : _csr_io_status_dprv;
  assign io_dmem_req_bits_dv = _io_dmem_req_bits_dv_output;
  assign io_dmem_s1_kill = killm_common | mem_ldst_xcpt | fpu_kill_mem;
  assign io_dmem_s1_data_data = mem_ctrl_fp ? io_fpu_store_data : mem_reg_rs2;
  assign io_ptw_sfence_valid = _io_imem_sfence_valid_output;
  assign io_ptw_sfence_bits_rs1 = wb_reg_mem_size[0];
  assign io_ptw_status_debug = _csr_io_status_debug;
  assign io_ptw_status_prv = _csr_io_status_prv;
  assign io_ptw_customCSRs_csrs_0_value = _csr_io_customCSRs_0_value;
  assign io_fpu_inst = _ibuf_io_inst_0_bits_inst_bits;
  assign io_fpu_fromint_data = ex_rs_0;
  assign io_fpu_ll_resp_val = dmem_resp_valid & io_dmem_resp_bits_tag[0];
  assign io_fpu_ll_resp_type = {1'h0, io_dmem_resp_bits_size};
  assign io_fpu_ll_resp_tag = io_dmem_resp_bits_tag[5:1];
  assign io_fpu_ll_resp_data = io_dmem_resp_bits_data_word_bypass;
  assign io_fpu_valid = ~ctrl_killd & (|_GEN_50);
  assign io_fpu_killx = ctrl_killx;
  assign io_fpu_killm = killm_common;
endmodule

module RocketTile(
  input         clock,
                reset,
                auto_buffer_out_a_ready,
                auto_buffer_out_b_valid,
  input  [2:0]  auto_buffer_out_b_bits_opcode,
  input  [1:0]  auto_buffer_out_b_bits_param,
  input  [3:0]  auto_buffer_out_b_bits_size,
  input  [1:0]  auto_buffer_out_b_bits_source,
  input  [31:0] auto_buffer_out_b_bits_address,
  input  [7:0]  auto_buffer_out_b_bits_mask,
  input         auto_buffer_out_b_bits_corrupt,
                auto_buffer_out_c_ready,
                auto_buffer_out_d_valid,
  input  [2:0]  auto_buffer_out_d_bits_opcode,
  input  [1:0]  auto_buffer_out_d_bits_param,
  input  [3:0]  auto_buffer_out_d_bits_size,
  input  [1:0]  auto_buffer_out_d_bits_source,
                auto_buffer_out_d_bits_sink,
  input         auto_buffer_out_d_bits_denied,
  input  [63:0] auto_buffer_out_d_bits_data,
  input         auto_buffer_out_d_bits_corrupt,
                auto_buffer_out_e_ready,
                auto_int_local_in_3_0,
                auto_int_local_in_2_0,
                auto_int_local_in_1_0,
                auto_int_local_in_1_1,
                auto_int_local_in_0_0,
                auto_hartid_in,
  output        auto_buffer_out_a_valid,
  output [2:0]  auto_buffer_out_a_bits_opcode,
                auto_buffer_out_a_bits_param,
  output [3:0]  auto_buffer_out_a_bits_size,
  output [1:0]  auto_buffer_out_a_bits_source,
  output [31:0] auto_buffer_out_a_bits_address,
  output [7:0]  auto_buffer_out_a_bits_mask,
  output [63:0] auto_buffer_out_a_bits_data,
  output        auto_buffer_out_b_ready,
                auto_buffer_out_c_valid,
  output [2:0]  auto_buffer_out_c_bits_opcode,
                auto_buffer_out_c_bits_param,
  output [3:0]  auto_buffer_out_c_bits_size,
  output [1:0]  auto_buffer_out_c_bits_source,
  output [31:0] auto_buffer_out_c_bits_address,
  output [63:0] auto_buffer_out_c_bits_data,
  output        auto_buffer_out_d_ready,
                auto_buffer_out_e_valid,
  output [1:0]  auto_buffer_out_e_bits_sink,
  output        auto_wfi_out_0
);

  wire        _core_io_imem_might_request;
  wire        _core_io_imem_req_valid;
  wire [39:0] _core_io_imem_req_bits_pc;
  wire        _core_io_imem_req_bits_speculative;
  wire        _core_io_imem_sfence_valid;
  wire        _core_io_imem_sfence_bits_rs1;
  wire        _core_io_imem_sfence_bits_rs2;
  wire [38:0] _core_io_imem_sfence_bits_addr;
  wire        _core_io_imem_resp_ready;
  wire        _core_io_imem_btb_update_valid;
  wire [4:0]  _core_io_imem_btb_update_bits_prediction_entry;
  wire [38:0] _core_io_imem_btb_update_bits_pc;
  wire        _core_io_imem_btb_update_bits_isValid;
  wire [38:0] _core_io_imem_btb_update_bits_br_pc;
  wire [1:0]  _core_io_imem_btb_update_bits_cfiType;
  wire        _core_io_imem_bht_update_valid;
  wire [7:0]  _core_io_imem_bht_update_bits_prediction_history;
  wire [38:0] _core_io_imem_bht_update_bits_pc;
  wire        _core_io_imem_bht_update_bits_branch;
  wire        _core_io_imem_bht_update_bits_taken;
  wire        _core_io_imem_bht_update_bits_mispredict;
  wire        _core_io_imem_flush_icache;
  wire        _core_io_imem_progress;
  wire        _core_io_dmem_req_valid;
  wire [39:0] _core_io_dmem_req_bits_addr;
  wire [6:0]  _core_io_dmem_req_bits_tag;
  wire [4:0]  _core_io_dmem_req_bits_cmd;
  wire [1:0]  _core_io_dmem_req_bits_size;
  wire        _core_io_dmem_req_bits_signed;
  wire [1:0]  _core_io_dmem_req_bits_dprv;
  wire        _core_io_dmem_req_bits_dv;
  wire        _core_io_dmem_s1_kill;
  wire [63:0] _core_io_dmem_s1_data_data;
  wire [3:0]  _core_io_ptw_ptbr_mode;
  wire [43:0] _core_io_ptw_ptbr_ppn;
  wire        _core_io_ptw_sfence_valid;
  wire        _core_io_ptw_sfence_bits_rs1;
  wire        _core_io_ptw_status_debug;
  wire [1:0]  _core_io_ptw_status_prv;
  wire        _core_io_ptw_status_mxr;
  wire        _core_io_ptw_status_sum;
  wire        _core_io_ptw_pmp_0_cfg_l;
  wire [1:0]  _core_io_ptw_pmp_0_cfg_a;
  wire        _core_io_ptw_pmp_0_cfg_x;
  wire        _core_io_ptw_pmp_0_cfg_w;
  wire        _core_io_ptw_pmp_0_cfg_r;
  wire [29:0] _core_io_ptw_pmp_0_addr;
  wire [31:0] _core_io_ptw_pmp_0_mask;
  wire        _core_io_ptw_pmp_1_cfg_l;
  wire [1:0]  _core_io_ptw_pmp_1_cfg_a;
  wire        _core_io_ptw_pmp_1_cfg_x;
  wire        _core_io_ptw_pmp_1_cfg_w;
  wire        _core_io_ptw_pmp_1_cfg_r;
  wire [29:0] _core_io_ptw_pmp_1_addr;
  wire [31:0] _core_io_ptw_pmp_1_mask;
  wire        _core_io_ptw_pmp_2_cfg_l;
  wire [1:0]  _core_io_ptw_pmp_2_cfg_a;
  wire        _core_io_ptw_pmp_2_cfg_x;
  wire        _core_io_ptw_pmp_2_cfg_w;
  wire        _core_io_ptw_pmp_2_cfg_r;
  wire [29:0] _core_io_ptw_pmp_2_addr;
  wire [31:0] _core_io_ptw_pmp_2_mask;
  wire        _core_io_ptw_pmp_3_cfg_l;
  wire [1:0]  _core_io_ptw_pmp_3_cfg_a;
  wire        _core_io_ptw_pmp_3_cfg_x;
  wire        _core_io_ptw_pmp_3_cfg_w;
  wire        _core_io_ptw_pmp_3_cfg_r;
  wire [29:0] _core_io_ptw_pmp_3_addr;
  wire [31:0] _core_io_ptw_pmp_3_mask;
  wire        _core_io_ptw_pmp_4_cfg_l;
  wire [1:0]  _core_io_ptw_pmp_4_cfg_a;
  wire        _core_io_ptw_pmp_4_cfg_x;
  wire        _core_io_ptw_pmp_4_cfg_w;
  wire        _core_io_ptw_pmp_4_cfg_r;
  wire [29:0] _core_io_ptw_pmp_4_addr;
  wire [31:0] _core_io_ptw_pmp_4_mask;
  wire        _core_io_ptw_pmp_5_cfg_l;
  wire [1:0]  _core_io_ptw_pmp_5_cfg_a;
  wire        _core_io_ptw_pmp_5_cfg_x;
  wire        _core_io_ptw_pmp_5_cfg_w;
  wire        _core_io_ptw_pmp_5_cfg_r;
  wire [29:0] _core_io_ptw_pmp_5_addr;
  wire [31:0] _core_io_ptw_pmp_5_mask;
  wire        _core_io_ptw_pmp_6_cfg_l;
  wire [1:0]  _core_io_ptw_pmp_6_cfg_a;
  wire        _core_io_ptw_pmp_6_cfg_x;
  wire        _core_io_ptw_pmp_6_cfg_w;
  wire        _core_io_ptw_pmp_6_cfg_r;
  wire [29:0] _core_io_ptw_pmp_6_addr;
  wire [31:0] _core_io_ptw_pmp_6_mask;
  wire        _core_io_ptw_pmp_7_cfg_l;
  wire [1:0]  _core_io_ptw_pmp_7_cfg_a;
  wire        _core_io_ptw_pmp_7_cfg_x;
  wire        _core_io_ptw_pmp_7_cfg_w;
  wire        _core_io_ptw_pmp_7_cfg_r;
  wire [29:0] _core_io_ptw_pmp_7_addr;
  wire [31:0] _core_io_ptw_pmp_7_mask;
  wire [63:0] _core_io_ptw_customCSRs_csrs_0_value;
  wire [31:0] _core_io_fpu_inst;
  wire [63:0] _core_io_fpu_fromint_data;
  wire [2:0]  _core_io_fpu_fcsr_rm;
  wire        _core_io_fpu_ll_resp_val;
  wire [2:0]  _core_io_fpu_ll_resp_type;
  wire [4:0]  _core_io_fpu_ll_resp_tag;
  wire [63:0] _core_io_fpu_ll_resp_data;
  wire        _core_io_fpu_valid;
  wire        _core_io_fpu_killx;
  wire        _core_io_fpu_killm;
  wire        _core_io_wfi;
  wire        _ptw_io_requestor_0_req_ready;
  wire        _ptw_io_requestor_0_resp_valid;
  wire        _ptw_io_requestor_0_resp_bits_ae_ptw;
  wire        _ptw_io_requestor_0_resp_bits_ae_final;
  wire        _ptw_io_requestor_0_resp_bits_pf;
  wire        _ptw_io_requestor_0_resp_bits_gf;
  wire        _ptw_io_requestor_0_resp_bits_hr;
  wire        _ptw_io_requestor_0_resp_bits_hw;
  wire        _ptw_io_requestor_0_resp_bits_hx;
  wire [43:0] _ptw_io_requestor_0_resp_bits_pte_ppn;
  wire        _ptw_io_requestor_0_resp_bits_pte_d;
  wire        _ptw_io_requestor_0_resp_bits_pte_a;
  wire        _ptw_io_requestor_0_resp_bits_pte_g;
  wire        _ptw_io_requestor_0_resp_bits_pte_u;
  wire        _ptw_io_requestor_0_resp_bits_pte_x;
  wire        _ptw_io_requestor_0_resp_bits_pte_w;
  wire        _ptw_io_requestor_0_resp_bits_pte_r;
  wire        _ptw_io_requestor_0_resp_bits_pte_v;
  wire [1:0]  _ptw_io_requestor_0_resp_bits_level;
  wire        _ptw_io_requestor_0_resp_bits_homogeneous;
  wire        _ptw_io_requestor_0_resp_bits_gpa_is_pte;
  wire [3:0]  _ptw_io_requestor_0_ptbr_mode;
  wire        _ptw_io_requestor_0_status_debug;
  wire        _ptw_io_requestor_0_status_mxr;
  wire        _ptw_io_requestor_0_status_sum;
  wire        _ptw_io_requestor_0_pmp_0_cfg_l;
  wire [1:0]  _ptw_io_requestor_0_pmp_0_cfg_a;
  wire        _ptw_io_requestor_0_pmp_0_cfg_x;
  wire        _ptw_io_requestor_0_pmp_0_cfg_w;
  wire        _ptw_io_requestor_0_pmp_0_cfg_r;
  wire [29:0] _ptw_io_requestor_0_pmp_0_addr;
  wire [31:0] _ptw_io_requestor_0_pmp_0_mask;
  wire        _ptw_io_requestor_0_pmp_1_cfg_l;
  wire [1:0]  _ptw_io_requestor_0_pmp_1_cfg_a;
  wire        _ptw_io_requestor_0_pmp_1_cfg_x;
  wire        _ptw_io_requestor_0_pmp_1_cfg_w;
  wire        _ptw_io_requestor_0_pmp_1_cfg_r;
  wire [29:0] _ptw_io_requestor_0_pmp_1_addr;
  wire [31:0] _ptw_io_requestor_0_pmp_1_mask;
  wire        _ptw_io_requestor_0_pmp_2_cfg_l;
  wire [1:0]  _ptw_io_requestor_0_pmp_2_cfg_a;
  wire        _ptw_io_requestor_0_pmp_2_cfg_x;
  wire        _ptw_io_requestor_0_pmp_2_cfg_w;
  wire        _ptw_io_requestor_0_pmp_2_cfg_r;
  wire [29:0] _ptw_io_requestor_0_pmp_2_addr;
  wire [31:0] _ptw_io_requestor_0_pmp_2_mask;
  wire        _ptw_io_requestor_0_pmp_3_cfg_l;
  wire [1:0]  _ptw_io_requestor_0_pmp_3_cfg_a;
  wire        _ptw_io_requestor_0_pmp_3_cfg_x;
  wire        _ptw_io_requestor_0_pmp_3_cfg_w;
  wire        _ptw_io_requestor_0_pmp_3_cfg_r;
  wire [29:0] _ptw_io_requestor_0_pmp_3_addr;
  wire [31:0] _ptw_io_requestor_0_pmp_3_mask;
  wire        _ptw_io_requestor_0_pmp_4_cfg_l;
  wire [1:0]  _ptw_io_requestor_0_pmp_4_cfg_a;
  wire        _ptw_io_requestor_0_pmp_4_cfg_x;
  wire        _ptw_io_requestor_0_pmp_4_cfg_w;
  wire        _ptw_io_requestor_0_pmp_4_cfg_r;
  wire [29:0] _ptw_io_requestor_0_pmp_4_addr;
  wire [31:0] _ptw_io_requestor_0_pmp_4_mask;
  wire        _ptw_io_requestor_0_pmp_5_cfg_l;
  wire [1:0]  _ptw_io_requestor_0_pmp_5_cfg_a;
  wire        _ptw_io_requestor_0_pmp_5_cfg_x;
  wire        _ptw_io_requestor_0_pmp_5_cfg_w;
  wire        _ptw_io_requestor_0_pmp_5_cfg_r;
  wire [29:0] _ptw_io_requestor_0_pmp_5_addr;
  wire [31:0] _ptw_io_requestor_0_pmp_5_mask;
  wire        _ptw_io_requestor_0_pmp_6_cfg_l;
  wire [1:0]  _ptw_io_requestor_0_pmp_6_cfg_a;
  wire        _ptw_io_requestor_0_pmp_6_cfg_x;
  wire        _ptw_io_requestor_0_pmp_6_cfg_w;
  wire        _ptw_io_requestor_0_pmp_6_cfg_r;
  wire [29:0] _ptw_io_requestor_0_pmp_6_addr;
  wire [31:0] _ptw_io_requestor_0_pmp_6_mask;
  wire        _ptw_io_requestor_0_pmp_7_cfg_l;
  wire [1:0]  _ptw_io_requestor_0_pmp_7_cfg_a;
  wire        _ptw_io_requestor_0_pmp_7_cfg_x;
  wire        _ptw_io_requestor_0_pmp_7_cfg_w;
  wire        _ptw_io_requestor_0_pmp_7_cfg_r;
  wire [29:0] _ptw_io_requestor_0_pmp_7_addr;
  wire [31:0] _ptw_io_requestor_0_pmp_7_mask;
  wire        _ptw_io_requestor_1_req_ready;
  wire        _ptw_io_requestor_1_resp_valid;
  wire        _ptw_io_requestor_1_resp_bits_ae_ptw;
  wire        _ptw_io_requestor_1_resp_bits_ae_final;
  wire        _ptw_io_requestor_1_resp_bits_pf;
  wire        _ptw_io_requestor_1_resp_bits_gf;
  wire        _ptw_io_requestor_1_resp_bits_hr;
  wire        _ptw_io_requestor_1_resp_bits_hw;
  wire        _ptw_io_requestor_1_resp_bits_hx;
  wire [43:0] _ptw_io_requestor_1_resp_bits_pte_ppn;
  wire        _ptw_io_requestor_1_resp_bits_pte_d;
  wire        _ptw_io_requestor_1_resp_bits_pte_a;
  wire        _ptw_io_requestor_1_resp_bits_pte_g;
  wire        _ptw_io_requestor_1_resp_bits_pte_u;
  wire        _ptw_io_requestor_1_resp_bits_pte_x;
  wire        _ptw_io_requestor_1_resp_bits_pte_w;
  wire        _ptw_io_requestor_1_resp_bits_pte_r;
  wire        _ptw_io_requestor_1_resp_bits_pte_v;
  wire [1:0]  _ptw_io_requestor_1_resp_bits_level;
  wire        _ptw_io_requestor_1_resp_bits_homogeneous;
  wire        _ptw_io_requestor_1_resp_bits_gpa_is_pte;
  wire [3:0]  _ptw_io_requestor_1_ptbr_mode;
  wire        _ptw_io_requestor_1_status_debug;
  wire [1:0]  _ptw_io_requestor_1_status_prv;
  wire        _ptw_io_requestor_1_pmp_0_cfg_l;
  wire [1:0]  _ptw_io_requestor_1_pmp_0_cfg_a;
  wire        _ptw_io_requestor_1_pmp_0_cfg_x;
  wire        _ptw_io_requestor_1_pmp_0_cfg_w;
  wire        _ptw_io_requestor_1_pmp_0_cfg_r;
  wire [29:0] _ptw_io_requestor_1_pmp_0_addr;
  wire [31:0] _ptw_io_requestor_1_pmp_0_mask;
  wire        _ptw_io_requestor_1_pmp_1_cfg_l;
  wire [1:0]  _ptw_io_requestor_1_pmp_1_cfg_a;
  wire        _ptw_io_requestor_1_pmp_1_cfg_x;
  wire        _ptw_io_requestor_1_pmp_1_cfg_w;
  wire        _ptw_io_requestor_1_pmp_1_cfg_r;
  wire [29:0] _ptw_io_requestor_1_pmp_1_addr;
  wire [31:0] _ptw_io_requestor_1_pmp_1_mask;
  wire        _ptw_io_requestor_1_pmp_2_cfg_l;
  wire [1:0]  _ptw_io_requestor_1_pmp_2_cfg_a;
  wire        _ptw_io_requestor_1_pmp_2_cfg_x;
  wire        _ptw_io_requestor_1_pmp_2_cfg_w;
  wire        _ptw_io_requestor_1_pmp_2_cfg_r;
  wire [29:0] _ptw_io_requestor_1_pmp_2_addr;
  wire [31:0] _ptw_io_requestor_1_pmp_2_mask;
  wire        _ptw_io_requestor_1_pmp_3_cfg_l;
  wire [1:0]  _ptw_io_requestor_1_pmp_3_cfg_a;
  wire        _ptw_io_requestor_1_pmp_3_cfg_x;
  wire        _ptw_io_requestor_1_pmp_3_cfg_w;
  wire        _ptw_io_requestor_1_pmp_3_cfg_r;
  wire [29:0] _ptw_io_requestor_1_pmp_3_addr;
  wire [31:0] _ptw_io_requestor_1_pmp_3_mask;
  wire        _ptw_io_requestor_1_pmp_4_cfg_l;
  wire [1:0]  _ptw_io_requestor_1_pmp_4_cfg_a;
  wire        _ptw_io_requestor_1_pmp_4_cfg_x;
  wire        _ptw_io_requestor_1_pmp_4_cfg_w;
  wire        _ptw_io_requestor_1_pmp_4_cfg_r;
  wire [29:0] _ptw_io_requestor_1_pmp_4_addr;
  wire [31:0] _ptw_io_requestor_1_pmp_4_mask;
  wire        _ptw_io_requestor_1_pmp_5_cfg_l;
  wire [1:0]  _ptw_io_requestor_1_pmp_5_cfg_a;
  wire        _ptw_io_requestor_1_pmp_5_cfg_x;
  wire        _ptw_io_requestor_1_pmp_5_cfg_w;
  wire        _ptw_io_requestor_1_pmp_5_cfg_r;
  wire [29:0] _ptw_io_requestor_1_pmp_5_addr;
  wire [31:0] _ptw_io_requestor_1_pmp_5_mask;
  wire        _ptw_io_requestor_1_pmp_6_cfg_l;
  wire [1:0]  _ptw_io_requestor_1_pmp_6_cfg_a;
  wire        _ptw_io_requestor_1_pmp_6_cfg_x;
  wire        _ptw_io_requestor_1_pmp_6_cfg_w;
  wire        _ptw_io_requestor_1_pmp_6_cfg_r;
  wire [29:0] _ptw_io_requestor_1_pmp_6_addr;
  wire [31:0] _ptw_io_requestor_1_pmp_6_mask;
  wire        _ptw_io_requestor_1_pmp_7_cfg_l;
  wire [1:0]  _ptw_io_requestor_1_pmp_7_cfg_a;
  wire        _ptw_io_requestor_1_pmp_7_cfg_x;
  wire        _ptw_io_requestor_1_pmp_7_cfg_w;
  wire        _ptw_io_requestor_1_pmp_7_cfg_r;
  wire [29:0] _ptw_io_requestor_1_pmp_7_addr;
  wire [31:0] _ptw_io_requestor_1_pmp_7_mask;
  wire [63:0] _ptw_io_requestor_1_customCSRs_csrs_0_value;
  wire        _ptw_io_mem_req_valid;
  wire [39:0] _ptw_io_mem_req_bits_addr;
  wire        _ptw_io_mem_req_bits_dv;
  wire        _ptw_io_mem_s1_kill;
  wire        _dcacheArb_io_requestor_0_req_ready;
  wire        _dcacheArb_io_requestor_0_s2_nack;
  wire        _dcacheArb_io_requestor_0_resp_valid;
  wire [63:0] _dcacheArb_io_requestor_0_resp_bits_data;
  wire        _dcacheArb_io_requestor_0_s2_xcpt_ae_ld;
  wire        _dcacheArb_io_requestor_1_req_ready;
  wire        _dcacheArb_io_requestor_1_s2_nack;
  wire        _dcacheArb_io_requestor_1_resp_valid;
  wire [6:0]  _dcacheArb_io_requestor_1_resp_bits_tag;
  wire [1:0]  _dcacheArb_io_requestor_1_resp_bits_size;
  wire [63:0] _dcacheArb_io_requestor_1_resp_bits_data;
  wire        _dcacheArb_io_requestor_1_resp_bits_replay;
  wire        _dcacheArb_io_requestor_1_resp_bits_has_data;
  wire [63:0] _dcacheArb_io_requestor_1_resp_bits_data_word_bypass;
  wire        _dcacheArb_io_requestor_1_replay_next;
  wire        _dcacheArb_io_requestor_1_s2_xcpt_ma_ld;
  wire        _dcacheArb_io_requestor_1_s2_xcpt_ma_st;
  wire        _dcacheArb_io_requestor_1_s2_xcpt_pf_ld;
  wire        _dcacheArb_io_requestor_1_s2_xcpt_pf_st;
  wire        _dcacheArb_io_requestor_1_s2_xcpt_gf_ld;
  wire        _dcacheArb_io_requestor_1_s2_xcpt_gf_st;
  wire        _dcacheArb_io_requestor_1_s2_xcpt_ae_ld;
  wire        _dcacheArb_io_requestor_1_s2_xcpt_ae_st;
  wire        _dcacheArb_io_requestor_1_ordered;
  wire        _dcacheArb_io_requestor_1_perf_release;
  wire        _dcacheArb_io_requestor_1_perf_grant;
  wire        _dcacheArb_io_mem_req_valid;
  wire [39:0] _dcacheArb_io_mem_req_bits_addr;
  wire [6:0]  _dcacheArb_io_mem_req_bits_tag;
  wire [4:0]  _dcacheArb_io_mem_req_bits_cmd;
  wire [1:0]  _dcacheArb_io_mem_req_bits_size;
  wire        _dcacheArb_io_mem_req_bits_signed;
  wire [1:0]  _dcacheArb_io_mem_req_bits_dprv;
  wire        _dcacheArb_io_mem_req_bits_dv;
  wire        _dcacheArb_io_mem_req_bits_phys;
  wire        _dcacheArb_io_mem_s1_kill;
  wire [63:0] _dcacheArb_io_mem_s1_data_data;
  wire        _fpuOpt_io_fcsr_flags_valid;
  wire [4:0]  _fpuOpt_io_fcsr_flags_bits;
  wire [63:0] _fpuOpt_io_store_data;
  wire [63:0] _fpuOpt_io_toint_data;
  wire        _fpuOpt_io_fcsr_rdy;
  wire        _fpuOpt_io_nack_mem;
  wire        _fpuOpt_io_illegal_rm;
  wire        _fpuOpt_io_dec_wen;
  wire        _fpuOpt_io_dec_ren1;
  wire        _fpuOpt_io_dec_ren2;
  wire        _fpuOpt_io_dec_ren3;
  wire        _fpuOpt_io_sboard_set;
  wire        _fpuOpt_io_sboard_clr;
  wire [4:0]  _fpuOpt_io_sboard_clra;
  wire        _frontend_auto_icache_master_out_a_valid;
  wire [31:0] _frontend_auto_icache_master_out_a_bits_address;
  wire        _frontend_io_cpu_resp_valid;
  wire        _frontend_io_cpu_resp_bits_btb_taken;
  wire        _frontend_io_cpu_resp_bits_btb_bridx;
  wire [4:0]  _frontend_io_cpu_resp_bits_btb_entry;
  wire [7:0]  _frontend_io_cpu_resp_bits_btb_bht_history;
  wire [39:0] _frontend_io_cpu_resp_bits_pc;
  wire [31:0] _frontend_io_cpu_resp_bits_data;
  wire        _frontend_io_cpu_resp_bits_xcpt_pf_inst;
  wire        _frontend_io_cpu_resp_bits_xcpt_gf_inst;
  wire        _frontend_io_cpu_resp_bits_xcpt_ae_inst;
  wire        _frontend_io_cpu_resp_bits_replay;
  wire        _frontend_io_cpu_gpa_valid;
  wire        _frontend_io_ptw_req_valid;
  wire        _frontend_io_ptw_req_bits_valid;
  wire [26:0] _frontend_io_ptw_req_bits_bits_addr;
  wire        _frontend_io_ptw_req_bits_bits_need_gpa;
  wire        _frontend_io_ptw_req_bits_bits_vstage1;
  wire        _frontend_io_ptw_req_bits_bits_stage2;
  wire        _dcache_auto_out_a_valid;
  wire [2:0]  _dcache_auto_out_a_bits_opcode;
  wire [2:0]  _dcache_auto_out_a_bits_param;
  wire [3:0]  _dcache_auto_out_a_bits_size;
  wire        _dcache_auto_out_a_bits_source;
  wire [31:0] _dcache_auto_out_a_bits_address;
  wire [7:0]  _dcache_auto_out_a_bits_mask;
  wire [63:0] _dcache_auto_out_a_bits_data;
  wire        _dcache_auto_out_b_ready;
  wire        _dcache_auto_out_c_valid;
  wire [2:0]  _dcache_auto_out_c_bits_opcode;
  wire [2:0]  _dcache_auto_out_c_bits_param;
  wire [3:0]  _dcache_auto_out_c_bits_size;
  wire        _dcache_auto_out_c_bits_source;
  wire [31:0] _dcache_auto_out_c_bits_address;
  wire [63:0] _dcache_auto_out_c_bits_data;
  wire        _dcache_auto_out_d_ready;
  wire        _dcache_auto_out_e_valid;
  wire [1:0]  _dcache_auto_out_e_bits_sink;
  wire        _dcache_io_cpu_req_ready;
  wire        _dcache_io_cpu_s2_nack;
  wire        _dcache_io_cpu_resp_valid;
  wire [6:0]  _dcache_io_cpu_resp_bits_tag;
  wire [1:0]  _dcache_io_cpu_resp_bits_size;
  wire [63:0] _dcache_io_cpu_resp_bits_data;
  wire        _dcache_io_cpu_resp_bits_replay;
  wire        _dcache_io_cpu_resp_bits_has_data;
  wire [63:0] _dcache_io_cpu_resp_bits_data_word_bypass;
  wire        _dcache_io_cpu_replay_next;
  wire        _dcache_io_cpu_s2_xcpt_ma_ld;
  wire        _dcache_io_cpu_s2_xcpt_ma_st;
  wire        _dcache_io_cpu_s2_xcpt_pf_ld;
  wire        _dcache_io_cpu_s2_xcpt_pf_st;
  wire        _dcache_io_cpu_s2_xcpt_gf_ld;
  wire        _dcache_io_cpu_s2_xcpt_gf_st;
  wire        _dcache_io_cpu_s2_xcpt_ae_ld;
  wire        _dcache_io_cpu_s2_xcpt_ae_st;
  wire        _dcache_io_cpu_ordered;
  wire        _dcache_io_cpu_perf_release;
  wire        _dcache_io_cpu_perf_grant;
  wire        _dcache_io_ptw_req_valid;
  wire [26:0] _dcache_io_ptw_req_bits_bits_addr;
  wire        _dcache_io_ptw_req_bits_bits_need_gpa;
  wire        _dcache_io_ptw_req_bits_bits_vstage1;
  wire        _dcache_io_ptw_req_bits_bits_stage2;
  wire        _intXbar_auto_anon_out_0;
  wire        _intXbar_auto_anon_out_1;
  wire        _intXbar_auto_anon_out_2;
  wire        _intXbar_auto_anon_out_3;
  wire        _intXbar_auto_anon_out_4;
  wire        _tlMasterXbar_auto_anon_in_1_a_ready;
  wire        _tlMasterXbar_auto_anon_in_1_d_valid;
  wire [2:0]  _tlMasterXbar_auto_anon_in_1_d_bits_opcode;
  wire [3:0]  _tlMasterXbar_auto_anon_in_1_d_bits_size;
  wire [63:0] _tlMasterXbar_auto_anon_in_1_d_bits_data;
  wire        _tlMasterXbar_auto_anon_in_1_d_bits_corrupt;
  wire        _tlMasterXbar_auto_anon_in_0_a_ready;
  wire        _tlMasterXbar_auto_anon_in_0_b_valid;
  wire [1:0]  _tlMasterXbar_auto_anon_in_0_b_bits_param;
  wire [3:0]  _tlMasterXbar_auto_anon_in_0_b_bits_size;
  wire        _tlMasterXbar_auto_anon_in_0_b_bits_source;
  wire [31:0] _tlMasterXbar_auto_anon_in_0_b_bits_address;
  wire        _tlMasterXbar_auto_anon_in_0_c_ready;
  wire        _tlMasterXbar_auto_anon_in_0_d_valid;
  wire [2:0]  _tlMasterXbar_auto_anon_in_0_d_bits_opcode;
  wire [1:0]  _tlMasterXbar_auto_anon_in_0_d_bits_param;
  wire [3:0]  _tlMasterXbar_auto_anon_in_0_d_bits_size;
  wire        _tlMasterXbar_auto_anon_in_0_d_bits_source;
  wire [1:0]  _tlMasterXbar_auto_anon_in_0_d_bits_sink;
  wire        _tlMasterXbar_auto_anon_in_0_d_bits_denied;
  wire [63:0] _tlMasterXbar_auto_anon_in_0_d_bits_data;
  wire        _tlMasterXbar_auto_anon_in_0_e_ready;
  reg         wfiNodeOut_0_REG;
  always @(posedge clock) begin
    if (reset)
      wfiNodeOut_0_REG <= 1'h0;
    else
      wfiNodeOut_0_REG <= _core_io_wfi;
  end // always @(posedge)
  TLXbar_MasterXbar_RocketTile_i2_o1_a32d64s2k2z4c tlMasterXbar (
    .clock                         (clock),
    .reset                         (reset),
    .auto_anon_in_1_a_valid        (_frontend_auto_icache_master_out_a_valid),
    .auto_anon_in_1_a_bits_address (_frontend_auto_icache_master_out_a_bits_address),
    .auto_anon_in_0_a_valid        (_dcache_auto_out_a_valid),
    .auto_anon_in_0_a_bits_opcode  (_dcache_auto_out_a_bits_opcode),
    .auto_anon_in_0_a_bits_param   (_dcache_auto_out_a_bits_param),
    .auto_anon_in_0_a_bits_size    (_dcache_auto_out_a_bits_size),
    .auto_anon_in_0_a_bits_source  (_dcache_auto_out_a_bits_source),
    .auto_anon_in_0_a_bits_address (_dcache_auto_out_a_bits_address),
    .auto_anon_in_0_a_bits_mask    (_dcache_auto_out_a_bits_mask),
    .auto_anon_in_0_a_bits_data    (_dcache_auto_out_a_bits_data),
    .auto_anon_in_0_b_ready        (_dcache_auto_out_b_ready),
    .auto_anon_in_0_c_valid        (_dcache_auto_out_c_valid),
    .auto_anon_in_0_c_bits_opcode  (_dcache_auto_out_c_bits_opcode),
    .auto_anon_in_0_c_bits_param   (_dcache_auto_out_c_bits_param),
    .auto_anon_in_0_c_bits_size    (_dcache_auto_out_c_bits_size),
    .auto_anon_in_0_c_bits_source  (_dcache_auto_out_c_bits_source),
    .auto_anon_in_0_c_bits_address (_dcache_auto_out_c_bits_address),
    .auto_anon_in_0_c_bits_data    (_dcache_auto_out_c_bits_data),
    .auto_anon_in_0_d_ready        (_dcache_auto_out_d_ready),
    .auto_anon_in_0_e_valid        (_dcache_auto_out_e_valid),
    .auto_anon_in_0_e_bits_sink    (_dcache_auto_out_e_bits_sink),
    .auto_anon_out_a_ready         (auto_buffer_out_a_ready),
    .auto_anon_out_b_valid         (auto_buffer_out_b_valid),
    .auto_anon_out_b_bits_opcode   (auto_buffer_out_b_bits_opcode),
    .auto_anon_out_b_bits_param    (auto_buffer_out_b_bits_param),
    .auto_anon_out_b_bits_size     (auto_buffer_out_b_bits_size),
    .auto_anon_out_b_bits_source   (auto_buffer_out_b_bits_source),
    .auto_anon_out_b_bits_address  (auto_buffer_out_b_bits_address),
    .auto_anon_out_b_bits_mask     (auto_buffer_out_b_bits_mask),
    .auto_anon_out_b_bits_corrupt  (auto_buffer_out_b_bits_corrupt),
    .auto_anon_out_c_ready         (auto_buffer_out_c_ready),
    .auto_anon_out_d_valid         (auto_buffer_out_d_valid),
    .auto_anon_out_d_bits_opcode   (auto_buffer_out_d_bits_opcode),
    .auto_anon_out_d_bits_param    (auto_buffer_out_d_bits_param),
    .auto_anon_out_d_bits_size     (auto_buffer_out_d_bits_size),
    .auto_anon_out_d_bits_source   (auto_buffer_out_d_bits_source),
    .auto_anon_out_d_bits_sink     (auto_buffer_out_d_bits_sink),
    .auto_anon_out_d_bits_denied   (auto_buffer_out_d_bits_denied),
    .auto_anon_out_d_bits_data     (auto_buffer_out_d_bits_data),
    .auto_anon_out_d_bits_corrupt  (auto_buffer_out_d_bits_corrupt),
    .auto_anon_out_e_ready         (auto_buffer_out_e_ready),
    .auto_anon_in_1_a_ready        (_tlMasterXbar_auto_anon_in_1_a_ready),
    .auto_anon_in_1_d_valid        (_tlMasterXbar_auto_anon_in_1_d_valid),
    .auto_anon_in_1_d_bits_opcode  (_tlMasterXbar_auto_anon_in_1_d_bits_opcode),
    .auto_anon_in_1_d_bits_size    (_tlMasterXbar_auto_anon_in_1_d_bits_size),
    .auto_anon_in_1_d_bits_data    (_tlMasterXbar_auto_anon_in_1_d_bits_data),
    .auto_anon_in_1_d_bits_corrupt (_tlMasterXbar_auto_anon_in_1_d_bits_corrupt),
    .auto_anon_in_0_a_ready        (_tlMasterXbar_auto_anon_in_0_a_ready),
    .auto_anon_in_0_b_valid        (_tlMasterXbar_auto_anon_in_0_b_valid),
    .auto_anon_in_0_b_bits_param   (_tlMasterXbar_auto_anon_in_0_b_bits_param),
    .auto_anon_in_0_b_bits_size    (_tlMasterXbar_auto_anon_in_0_b_bits_size),
    .auto_anon_in_0_b_bits_source  (_tlMasterXbar_auto_anon_in_0_b_bits_source),
    .auto_anon_in_0_b_bits_address (_tlMasterXbar_auto_anon_in_0_b_bits_address),
    .auto_anon_in_0_c_ready        (_tlMasterXbar_auto_anon_in_0_c_ready),
    .auto_anon_in_0_d_valid        (_tlMasterXbar_auto_anon_in_0_d_valid),
    .auto_anon_in_0_d_bits_opcode  (_tlMasterXbar_auto_anon_in_0_d_bits_opcode),
    .auto_anon_in_0_d_bits_param   (_tlMasterXbar_auto_anon_in_0_d_bits_param),
    .auto_anon_in_0_d_bits_size    (_tlMasterXbar_auto_anon_in_0_d_bits_size),
    .auto_anon_in_0_d_bits_source  (_tlMasterXbar_auto_anon_in_0_d_bits_source),
    .auto_anon_in_0_d_bits_sink    (_tlMasterXbar_auto_anon_in_0_d_bits_sink),
    .auto_anon_in_0_d_bits_denied  (_tlMasterXbar_auto_anon_in_0_d_bits_denied),
    .auto_anon_in_0_d_bits_data    (_tlMasterXbar_auto_anon_in_0_d_bits_data),
    .auto_anon_in_0_e_ready        (_tlMasterXbar_auto_anon_in_0_e_ready),
    .auto_anon_out_a_valid         (auto_buffer_out_a_valid),
    .auto_anon_out_a_bits_opcode   (auto_buffer_out_a_bits_opcode),
    .auto_anon_out_a_bits_param    (auto_buffer_out_a_bits_param),
    .auto_anon_out_a_bits_size     (auto_buffer_out_a_bits_size),
    .auto_anon_out_a_bits_source   (auto_buffer_out_a_bits_source),
    .auto_anon_out_a_bits_address  (auto_buffer_out_a_bits_address),
    .auto_anon_out_a_bits_mask     (auto_buffer_out_a_bits_mask),
    .auto_anon_out_a_bits_data     (auto_buffer_out_a_bits_data),
    .auto_anon_out_b_ready         (auto_buffer_out_b_ready),
    .auto_anon_out_c_valid         (auto_buffer_out_c_valid),
    .auto_anon_out_c_bits_opcode   (auto_buffer_out_c_bits_opcode),
    .auto_anon_out_c_bits_param    (auto_buffer_out_c_bits_param),
    .auto_anon_out_c_bits_size     (auto_buffer_out_c_bits_size),
    .auto_anon_out_c_bits_source   (auto_buffer_out_c_bits_source),
    .auto_anon_out_c_bits_address  (auto_buffer_out_c_bits_address),
    .auto_anon_out_c_bits_data     (auto_buffer_out_c_bits_data),
    .auto_anon_out_d_ready         (auto_buffer_out_d_ready),
    .auto_anon_out_e_valid         (auto_buffer_out_e_valid),
    .auto_anon_out_e_bits_sink     (auto_buffer_out_e_bits_sink)
  );
  IntXbar_i4_o1 intXbar (
    .auto_anon_in_3_0 (auto_int_local_in_3_0),
    .auto_anon_in_2_0 (auto_int_local_in_2_0),
    .auto_anon_in_1_0 (auto_int_local_in_1_0),
    .auto_anon_in_1_1 (auto_int_local_in_1_1),
    .auto_anon_in_0_0 (auto_int_local_in_0_0),
    .auto_anon_out_0  (_intXbar_auto_anon_out_0),
    .auto_anon_out_1  (_intXbar_auto_anon_out_1),
    .auto_anon_out_2  (_intXbar_auto_anon_out_2),
    .auto_anon_out_3  (_intXbar_auto_anon_out_3),
    .auto_anon_out_4  (_intXbar_auto_anon_out_4)
  );
  DCache dcache (
    .clock                             (clock),
    .reset                             (reset),
    .auto_out_a_ready                  (_tlMasterXbar_auto_anon_in_0_a_ready),
    .auto_out_b_valid                  (_tlMasterXbar_auto_anon_in_0_b_valid),
    .auto_out_b_bits_param             (_tlMasterXbar_auto_anon_in_0_b_bits_param),
    .auto_out_b_bits_size              (_tlMasterXbar_auto_anon_in_0_b_bits_size),
    .auto_out_b_bits_source            (_tlMasterXbar_auto_anon_in_0_b_bits_source),
    .auto_out_b_bits_address           (_tlMasterXbar_auto_anon_in_0_b_bits_address),
    .auto_out_c_ready                  (_tlMasterXbar_auto_anon_in_0_c_ready),
    .auto_out_d_valid                  (_tlMasterXbar_auto_anon_in_0_d_valid),
    .auto_out_d_bits_opcode            (_tlMasterXbar_auto_anon_in_0_d_bits_opcode),
    .auto_out_d_bits_param             (_tlMasterXbar_auto_anon_in_0_d_bits_param),
    .auto_out_d_bits_size              (_tlMasterXbar_auto_anon_in_0_d_bits_size),
    .auto_out_d_bits_source            (_tlMasterXbar_auto_anon_in_0_d_bits_source),
    .auto_out_d_bits_sink              (_tlMasterXbar_auto_anon_in_0_d_bits_sink),
    .auto_out_d_bits_denied            (_tlMasterXbar_auto_anon_in_0_d_bits_denied),
    .auto_out_d_bits_data              (_tlMasterXbar_auto_anon_in_0_d_bits_data),
    .auto_out_e_ready                  (_tlMasterXbar_auto_anon_in_0_e_ready),
    .io_cpu_req_valid                  (_dcacheArb_io_mem_req_valid),
    .io_cpu_req_bits_addr              (_dcacheArb_io_mem_req_bits_addr),
    .io_cpu_req_bits_tag               (_dcacheArb_io_mem_req_bits_tag),
    .io_cpu_req_bits_cmd               (_dcacheArb_io_mem_req_bits_cmd),
    .io_cpu_req_bits_size              (_dcacheArb_io_mem_req_bits_size),
    .io_cpu_req_bits_signed            (_dcacheArb_io_mem_req_bits_signed),
    .io_cpu_req_bits_dprv              (_dcacheArb_io_mem_req_bits_dprv),
    .io_cpu_req_bits_dv                (_dcacheArb_io_mem_req_bits_dv),
    .io_cpu_req_bits_phys              (_dcacheArb_io_mem_req_bits_phys),
    .io_cpu_s1_kill                    (_dcacheArb_io_mem_s1_kill),
    .io_cpu_s1_data_data               (_dcacheArb_io_mem_s1_data_data),
    .io_cpu_s1_data_mask               (8'h0),
    .io_ptw_req_ready                  (_ptw_io_requestor_0_req_ready),
    .io_ptw_resp_valid                 (_ptw_io_requestor_0_resp_valid),
    .io_ptw_resp_bits_ae_ptw           (_ptw_io_requestor_0_resp_bits_ae_ptw),
    .io_ptw_resp_bits_ae_final         (_ptw_io_requestor_0_resp_bits_ae_final),
    .io_ptw_resp_bits_pf               (_ptw_io_requestor_0_resp_bits_pf),
    .io_ptw_resp_bits_gf               (_ptw_io_requestor_0_resp_bits_gf),
    .io_ptw_resp_bits_hr               (_ptw_io_requestor_0_resp_bits_hr),
    .io_ptw_resp_bits_hw               (_ptw_io_requestor_0_resp_bits_hw),
    .io_ptw_resp_bits_hx               (_ptw_io_requestor_0_resp_bits_hx),
    .io_ptw_resp_bits_pte_ppn          (_ptw_io_requestor_0_resp_bits_pte_ppn),
    .io_ptw_resp_bits_pte_d            (_ptw_io_requestor_0_resp_bits_pte_d),
    .io_ptw_resp_bits_pte_a            (_ptw_io_requestor_0_resp_bits_pte_a),
    .io_ptw_resp_bits_pte_g            (_ptw_io_requestor_0_resp_bits_pte_g),
    .io_ptw_resp_bits_pte_u            (_ptw_io_requestor_0_resp_bits_pte_u),
    .io_ptw_resp_bits_pte_x            (_ptw_io_requestor_0_resp_bits_pte_x),
    .io_ptw_resp_bits_pte_w            (_ptw_io_requestor_0_resp_bits_pte_w),
    .io_ptw_resp_bits_pte_r            (_ptw_io_requestor_0_resp_bits_pte_r),
    .io_ptw_resp_bits_pte_v            (_ptw_io_requestor_0_resp_bits_pte_v),
    .io_ptw_resp_bits_level            (_ptw_io_requestor_0_resp_bits_level),
    .io_ptw_resp_bits_homogeneous      (_ptw_io_requestor_0_resp_bits_homogeneous),
    .io_ptw_resp_bits_gpa_is_pte       (_ptw_io_requestor_0_resp_bits_gpa_is_pte),
    .io_ptw_ptbr_mode                  (_ptw_io_requestor_0_ptbr_mode),
    .io_ptw_status_debug               (_ptw_io_requestor_0_status_debug),
    .io_ptw_status_mxr                 (_ptw_io_requestor_0_status_mxr),
    .io_ptw_status_sum                 (_ptw_io_requestor_0_status_sum),
    .io_ptw_pmp_0_cfg_l                (_ptw_io_requestor_0_pmp_0_cfg_l),
    .io_ptw_pmp_0_cfg_a                (_ptw_io_requestor_0_pmp_0_cfg_a),
    .io_ptw_pmp_0_cfg_x                (_ptw_io_requestor_0_pmp_0_cfg_x),
    .io_ptw_pmp_0_cfg_w                (_ptw_io_requestor_0_pmp_0_cfg_w),
    .io_ptw_pmp_0_cfg_r                (_ptw_io_requestor_0_pmp_0_cfg_r),
    .io_ptw_pmp_0_addr                 (_ptw_io_requestor_0_pmp_0_addr),
    .io_ptw_pmp_0_mask                 (_ptw_io_requestor_0_pmp_0_mask),
    .io_ptw_pmp_1_cfg_l                (_ptw_io_requestor_0_pmp_1_cfg_l),
    .io_ptw_pmp_1_cfg_a                (_ptw_io_requestor_0_pmp_1_cfg_a),
    .io_ptw_pmp_1_cfg_x                (_ptw_io_requestor_0_pmp_1_cfg_x),
    .io_ptw_pmp_1_cfg_w                (_ptw_io_requestor_0_pmp_1_cfg_w),
    .io_ptw_pmp_1_cfg_r                (_ptw_io_requestor_0_pmp_1_cfg_r),
    .io_ptw_pmp_1_addr                 (_ptw_io_requestor_0_pmp_1_addr),
    .io_ptw_pmp_1_mask                 (_ptw_io_requestor_0_pmp_1_mask),
    .io_ptw_pmp_2_cfg_l                (_ptw_io_requestor_0_pmp_2_cfg_l),
    .io_ptw_pmp_2_cfg_a                (_ptw_io_requestor_0_pmp_2_cfg_a),
    .io_ptw_pmp_2_cfg_x                (_ptw_io_requestor_0_pmp_2_cfg_x),
    .io_ptw_pmp_2_cfg_w                (_ptw_io_requestor_0_pmp_2_cfg_w),
    .io_ptw_pmp_2_cfg_r                (_ptw_io_requestor_0_pmp_2_cfg_r),
    .io_ptw_pmp_2_addr                 (_ptw_io_requestor_0_pmp_2_addr),
    .io_ptw_pmp_2_mask                 (_ptw_io_requestor_0_pmp_2_mask),
    .io_ptw_pmp_3_cfg_l                (_ptw_io_requestor_0_pmp_3_cfg_l),
    .io_ptw_pmp_3_cfg_a                (_ptw_io_requestor_0_pmp_3_cfg_a),
    .io_ptw_pmp_3_cfg_x                (_ptw_io_requestor_0_pmp_3_cfg_x),
    .io_ptw_pmp_3_cfg_w                (_ptw_io_requestor_0_pmp_3_cfg_w),
    .io_ptw_pmp_3_cfg_r                (_ptw_io_requestor_0_pmp_3_cfg_r),
    .io_ptw_pmp_3_addr                 (_ptw_io_requestor_0_pmp_3_addr),
    .io_ptw_pmp_3_mask                 (_ptw_io_requestor_0_pmp_3_mask),
    .io_ptw_pmp_4_cfg_l                (_ptw_io_requestor_0_pmp_4_cfg_l),
    .io_ptw_pmp_4_cfg_a                (_ptw_io_requestor_0_pmp_4_cfg_a),
    .io_ptw_pmp_4_cfg_x                (_ptw_io_requestor_0_pmp_4_cfg_x),
    .io_ptw_pmp_4_cfg_w                (_ptw_io_requestor_0_pmp_4_cfg_w),
    .io_ptw_pmp_4_cfg_r                (_ptw_io_requestor_0_pmp_4_cfg_r),
    .io_ptw_pmp_4_addr                 (_ptw_io_requestor_0_pmp_4_addr),
    .io_ptw_pmp_4_mask                 (_ptw_io_requestor_0_pmp_4_mask),
    .io_ptw_pmp_5_cfg_l                (_ptw_io_requestor_0_pmp_5_cfg_l),
    .io_ptw_pmp_5_cfg_a                (_ptw_io_requestor_0_pmp_5_cfg_a),
    .io_ptw_pmp_5_cfg_x                (_ptw_io_requestor_0_pmp_5_cfg_x),
    .io_ptw_pmp_5_cfg_w                (_ptw_io_requestor_0_pmp_5_cfg_w),
    .io_ptw_pmp_5_cfg_r                (_ptw_io_requestor_0_pmp_5_cfg_r),
    .io_ptw_pmp_5_addr                 (_ptw_io_requestor_0_pmp_5_addr),
    .io_ptw_pmp_5_mask                 (_ptw_io_requestor_0_pmp_5_mask),
    .io_ptw_pmp_6_cfg_l                (_ptw_io_requestor_0_pmp_6_cfg_l),
    .io_ptw_pmp_6_cfg_a                (_ptw_io_requestor_0_pmp_6_cfg_a),
    .io_ptw_pmp_6_cfg_x                (_ptw_io_requestor_0_pmp_6_cfg_x),
    .io_ptw_pmp_6_cfg_w                (_ptw_io_requestor_0_pmp_6_cfg_w),
    .io_ptw_pmp_6_cfg_r                (_ptw_io_requestor_0_pmp_6_cfg_r),
    .io_ptw_pmp_6_addr                 (_ptw_io_requestor_0_pmp_6_addr),
    .io_ptw_pmp_6_mask                 (_ptw_io_requestor_0_pmp_6_mask),
    .io_ptw_pmp_7_cfg_l                (_ptw_io_requestor_0_pmp_7_cfg_l),
    .io_ptw_pmp_7_cfg_a                (_ptw_io_requestor_0_pmp_7_cfg_a),
    .io_ptw_pmp_7_cfg_x                (_ptw_io_requestor_0_pmp_7_cfg_x),
    .io_ptw_pmp_7_cfg_w                (_ptw_io_requestor_0_pmp_7_cfg_w),
    .io_ptw_pmp_7_cfg_r                (_ptw_io_requestor_0_pmp_7_cfg_r),
    .io_ptw_pmp_7_addr                 (_ptw_io_requestor_0_pmp_7_addr),
    .io_ptw_pmp_7_mask                 (_ptw_io_requestor_0_pmp_7_mask),
    .auto_out_a_valid                  (_dcache_auto_out_a_valid),
    .auto_out_a_bits_opcode            (_dcache_auto_out_a_bits_opcode),
    .auto_out_a_bits_param             (_dcache_auto_out_a_bits_param),
    .auto_out_a_bits_size              (_dcache_auto_out_a_bits_size),
    .auto_out_a_bits_source            (_dcache_auto_out_a_bits_source),
    .auto_out_a_bits_address           (_dcache_auto_out_a_bits_address),
    .auto_out_a_bits_mask              (_dcache_auto_out_a_bits_mask),
    .auto_out_a_bits_data              (_dcache_auto_out_a_bits_data),
    .auto_out_b_ready                  (_dcache_auto_out_b_ready),
    .auto_out_c_valid                  (_dcache_auto_out_c_valid),
    .auto_out_c_bits_opcode            (_dcache_auto_out_c_bits_opcode),
    .auto_out_c_bits_param             (_dcache_auto_out_c_bits_param),
    .auto_out_c_bits_size              (_dcache_auto_out_c_bits_size),
    .auto_out_c_bits_source            (_dcache_auto_out_c_bits_source),
    .auto_out_c_bits_address           (_dcache_auto_out_c_bits_address),
    .auto_out_c_bits_data              (_dcache_auto_out_c_bits_data),
    .auto_out_d_ready                  (_dcache_auto_out_d_ready),
    .auto_out_e_valid                  (_dcache_auto_out_e_valid),
    .auto_out_e_bits_sink              (_dcache_auto_out_e_bits_sink),
    .io_cpu_req_ready                  (_dcache_io_cpu_req_ready),
    .io_cpu_s2_nack                    (_dcache_io_cpu_s2_nack),
    .io_cpu_resp_valid                 (_dcache_io_cpu_resp_valid),
    .io_cpu_resp_bits_addr             (/* unused */),
    .io_cpu_resp_bits_tag              (_dcache_io_cpu_resp_bits_tag),
    .io_cpu_resp_bits_cmd              (/* unused */),
    .io_cpu_resp_bits_size             (_dcache_io_cpu_resp_bits_size),
    .io_cpu_resp_bits_signed           (/* unused */),
    .io_cpu_resp_bits_dprv             (/* unused */),
    .io_cpu_resp_bits_dv               (/* unused */),
    .io_cpu_resp_bits_data             (_dcache_io_cpu_resp_bits_data),
    .io_cpu_resp_bits_mask             (/* unused */),
    .io_cpu_resp_bits_replay           (_dcache_io_cpu_resp_bits_replay),
    .io_cpu_resp_bits_has_data         (_dcache_io_cpu_resp_bits_has_data),
    .io_cpu_resp_bits_data_word_bypass (_dcache_io_cpu_resp_bits_data_word_bypass),
    .io_cpu_resp_bits_data_raw         (/* unused */),
    .io_cpu_resp_bits_store_data       (/* unused */),
    .io_cpu_replay_next                (_dcache_io_cpu_replay_next),
    .io_cpu_s2_xcpt_ma_ld              (_dcache_io_cpu_s2_xcpt_ma_ld),
    .io_cpu_s2_xcpt_ma_st              (_dcache_io_cpu_s2_xcpt_ma_st),
    .io_cpu_s2_xcpt_pf_ld              (_dcache_io_cpu_s2_xcpt_pf_ld),
    .io_cpu_s2_xcpt_pf_st              (_dcache_io_cpu_s2_xcpt_pf_st),
    .io_cpu_s2_xcpt_gf_ld              (_dcache_io_cpu_s2_xcpt_gf_ld),
    .io_cpu_s2_xcpt_gf_st              (_dcache_io_cpu_s2_xcpt_gf_st),
    .io_cpu_s2_xcpt_ae_ld              (_dcache_io_cpu_s2_xcpt_ae_ld),
    .io_cpu_s2_xcpt_ae_st              (_dcache_io_cpu_s2_xcpt_ae_st),
    .io_cpu_ordered                    (_dcache_io_cpu_ordered),
    .io_cpu_perf_release               (_dcache_io_cpu_perf_release),
    .io_cpu_perf_grant                 (_dcache_io_cpu_perf_grant),
    .io_ptw_req_valid                  (_dcache_io_ptw_req_valid),
    .io_ptw_req_bits_bits_addr         (_dcache_io_ptw_req_bits_bits_addr),
    .io_ptw_req_bits_bits_need_gpa     (_dcache_io_ptw_req_bits_bits_need_gpa),
    .io_ptw_req_bits_bits_vstage1      (_dcache_io_ptw_req_bits_bits_vstage1),
    .io_ptw_req_bits_bits_stage2       (_dcache_io_ptw_req_bits_bits_stage2)
  );
  Frontend frontend (
    .clock                                     (clock),
    .reset                                     (reset),
    .auto_icache_master_out_a_ready            (_tlMasterXbar_auto_anon_in_1_a_ready),
    .auto_icache_master_out_d_valid            (_tlMasterXbar_auto_anon_in_1_d_valid),
    .auto_icache_master_out_d_bits_opcode
      (_tlMasterXbar_auto_anon_in_1_d_bits_opcode),
    .auto_icache_master_out_d_bits_size        (_tlMasterXbar_auto_anon_in_1_d_bits_size),
    .auto_icache_master_out_d_bits_data        (_tlMasterXbar_auto_anon_in_1_d_bits_data),
    .auto_icache_master_out_d_bits_corrupt
      (_tlMasterXbar_auto_anon_in_1_d_bits_corrupt),
    .io_cpu_might_request                      (_core_io_imem_might_request),
    .io_cpu_req_valid                          (_core_io_imem_req_valid),
    .io_cpu_req_bits_pc                        (_core_io_imem_req_bits_pc),
    .io_cpu_req_bits_speculative               (_core_io_imem_req_bits_speculative),
    .io_cpu_sfence_valid                       (_core_io_imem_sfence_valid),
    .io_cpu_sfence_bits_rs1                    (_core_io_imem_sfence_bits_rs1),
    .io_cpu_sfence_bits_rs2                    (_core_io_imem_sfence_bits_rs2),
    .io_cpu_sfence_bits_addr                   (_core_io_imem_sfence_bits_addr),
    .io_cpu_resp_ready                         (_core_io_imem_resp_ready),
    .io_cpu_btb_update_valid                   (_core_io_imem_btb_update_valid),
    .io_cpu_btb_update_bits_prediction_entry
      (_core_io_imem_btb_update_bits_prediction_entry),
    .io_cpu_btb_update_bits_pc                 (_core_io_imem_btb_update_bits_pc),
    .io_cpu_btb_update_bits_isValid            (_core_io_imem_btb_update_bits_isValid),
    .io_cpu_btb_update_bits_br_pc              (_core_io_imem_btb_update_bits_br_pc),
    .io_cpu_btb_update_bits_cfiType            (_core_io_imem_btb_update_bits_cfiType),
    .io_cpu_bht_update_valid                   (_core_io_imem_bht_update_valid),
    .io_cpu_bht_update_bits_prediction_history
      (_core_io_imem_bht_update_bits_prediction_history),
    .io_cpu_bht_update_bits_pc                 (_core_io_imem_bht_update_bits_pc),
    .io_cpu_bht_update_bits_branch             (_core_io_imem_bht_update_bits_branch),
    .io_cpu_bht_update_bits_taken              (_core_io_imem_bht_update_bits_taken),
    .io_cpu_bht_update_bits_mispredict         (_core_io_imem_bht_update_bits_mispredict),
    .io_cpu_flush_icache                       (_core_io_imem_flush_icache),
    .io_cpu_progress                           (_core_io_imem_progress),
    .io_ptw_req_ready                          (_ptw_io_requestor_1_req_ready),
    .io_ptw_resp_valid                         (_ptw_io_requestor_1_resp_valid),
    .io_ptw_resp_bits_ae_ptw                   (_ptw_io_requestor_1_resp_bits_ae_ptw),
    .io_ptw_resp_bits_ae_final                 (_ptw_io_requestor_1_resp_bits_ae_final),
    .io_ptw_resp_bits_pf                       (_ptw_io_requestor_1_resp_bits_pf),
    .io_ptw_resp_bits_gf                       (_ptw_io_requestor_1_resp_bits_gf),
    .io_ptw_resp_bits_hr                       (_ptw_io_requestor_1_resp_bits_hr),
    .io_ptw_resp_bits_hw                       (_ptw_io_requestor_1_resp_bits_hw),
    .io_ptw_resp_bits_hx                       (_ptw_io_requestor_1_resp_bits_hx),
    .io_ptw_resp_bits_pte_ppn                  (_ptw_io_requestor_1_resp_bits_pte_ppn),
    .io_ptw_resp_bits_pte_d                    (_ptw_io_requestor_1_resp_bits_pte_d),
    .io_ptw_resp_bits_pte_a                    (_ptw_io_requestor_1_resp_bits_pte_a),
    .io_ptw_resp_bits_pte_g                    (_ptw_io_requestor_1_resp_bits_pte_g),
    .io_ptw_resp_bits_pte_u                    (_ptw_io_requestor_1_resp_bits_pte_u),
    .io_ptw_resp_bits_pte_x                    (_ptw_io_requestor_1_resp_bits_pte_x),
    .io_ptw_resp_bits_pte_w                    (_ptw_io_requestor_1_resp_bits_pte_w),
    .io_ptw_resp_bits_pte_r                    (_ptw_io_requestor_1_resp_bits_pte_r),
    .io_ptw_resp_bits_pte_v                    (_ptw_io_requestor_1_resp_bits_pte_v),
    .io_ptw_resp_bits_level                    (_ptw_io_requestor_1_resp_bits_level),
    .io_ptw_resp_bits_homogeneous
      (_ptw_io_requestor_1_resp_bits_homogeneous),
    .io_ptw_resp_bits_gpa_is_pte               (_ptw_io_requestor_1_resp_bits_gpa_is_pte),
    .io_ptw_ptbr_mode                          (_ptw_io_requestor_1_ptbr_mode),
    .io_ptw_status_debug                       (_ptw_io_requestor_1_status_debug),
    .io_ptw_status_prv                         (_ptw_io_requestor_1_status_prv),
    .io_ptw_pmp_0_cfg_l                        (_ptw_io_requestor_1_pmp_0_cfg_l),
    .io_ptw_pmp_0_cfg_a                        (_ptw_io_requestor_1_pmp_0_cfg_a),
    .io_ptw_pmp_0_cfg_x                        (_ptw_io_requestor_1_pmp_0_cfg_x),
    .io_ptw_pmp_0_cfg_w                        (_ptw_io_requestor_1_pmp_0_cfg_w),
    .io_ptw_pmp_0_cfg_r                        (_ptw_io_requestor_1_pmp_0_cfg_r),
    .io_ptw_pmp_0_addr                         (_ptw_io_requestor_1_pmp_0_addr),
    .io_ptw_pmp_0_mask                         (_ptw_io_requestor_1_pmp_0_mask),
    .io_ptw_pmp_1_cfg_l                        (_ptw_io_requestor_1_pmp_1_cfg_l),
    .io_ptw_pmp_1_cfg_a                        (_ptw_io_requestor_1_pmp_1_cfg_a),
    .io_ptw_pmp_1_cfg_x                        (_ptw_io_requestor_1_pmp_1_cfg_x),
    .io_ptw_pmp_1_cfg_w                        (_ptw_io_requestor_1_pmp_1_cfg_w),
    .io_ptw_pmp_1_cfg_r                        (_ptw_io_requestor_1_pmp_1_cfg_r),
    .io_ptw_pmp_1_addr                         (_ptw_io_requestor_1_pmp_1_addr),
    .io_ptw_pmp_1_mask                         (_ptw_io_requestor_1_pmp_1_mask),
    .io_ptw_pmp_2_cfg_l                        (_ptw_io_requestor_1_pmp_2_cfg_l),
    .io_ptw_pmp_2_cfg_a                        (_ptw_io_requestor_1_pmp_2_cfg_a),
    .io_ptw_pmp_2_cfg_x                        (_ptw_io_requestor_1_pmp_2_cfg_x),
    .io_ptw_pmp_2_cfg_w                        (_ptw_io_requestor_1_pmp_2_cfg_w),
    .io_ptw_pmp_2_cfg_r                        (_ptw_io_requestor_1_pmp_2_cfg_r),
    .io_ptw_pmp_2_addr                         (_ptw_io_requestor_1_pmp_2_addr),
    .io_ptw_pmp_2_mask                         (_ptw_io_requestor_1_pmp_2_mask),
    .io_ptw_pmp_3_cfg_l                        (_ptw_io_requestor_1_pmp_3_cfg_l),
    .io_ptw_pmp_3_cfg_a                        (_ptw_io_requestor_1_pmp_3_cfg_a),
    .io_ptw_pmp_3_cfg_x                        (_ptw_io_requestor_1_pmp_3_cfg_x),
    .io_ptw_pmp_3_cfg_w                        (_ptw_io_requestor_1_pmp_3_cfg_w),
    .io_ptw_pmp_3_cfg_r                        (_ptw_io_requestor_1_pmp_3_cfg_r),
    .io_ptw_pmp_3_addr                         (_ptw_io_requestor_1_pmp_3_addr),
    .io_ptw_pmp_3_mask                         (_ptw_io_requestor_1_pmp_3_mask),
    .io_ptw_pmp_4_cfg_l                        (_ptw_io_requestor_1_pmp_4_cfg_l),
    .io_ptw_pmp_4_cfg_a                        (_ptw_io_requestor_1_pmp_4_cfg_a),
    .io_ptw_pmp_4_cfg_x                        (_ptw_io_requestor_1_pmp_4_cfg_x),
    .io_ptw_pmp_4_cfg_w                        (_ptw_io_requestor_1_pmp_4_cfg_w),
    .io_ptw_pmp_4_cfg_r                        (_ptw_io_requestor_1_pmp_4_cfg_r),
    .io_ptw_pmp_4_addr                         (_ptw_io_requestor_1_pmp_4_addr),
    .io_ptw_pmp_4_mask                         (_ptw_io_requestor_1_pmp_4_mask),
    .io_ptw_pmp_5_cfg_l                        (_ptw_io_requestor_1_pmp_5_cfg_l),
    .io_ptw_pmp_5_cfg_a                        (_ptw_io_requestor_1_pmp_5_cfg_a),
    .io_ptw_pmp_5_cfg_x                        (_ptw_io_requestor_1_pmp_5_cfg_x),
    .io_ptw_pmp_5_cfg_w                        (_ptw_io_requestor_1_pmp_5_cfg_w),
    .io_ptw_pmp_5_cfg_r                        (_ptw_io_requestor_1_pmp_5_cfg_r),
    .io_ptw_pmp_5_addr                         (_ptw_io_requestor_1_pmp_5_addr),
    .io_ptw_pmp_5_mask                         (_ptw_io_requestor_1_pmp_5_mask),
    .io_ptw_pmp_6_cfg_l                        (_ptw_io_requestor_1_pmp_6_cfg_l),
    .io_ptw_pmp_6_cfg_a                        (_ptw_io_requestor_1_pmp_6_cfg_a),
    .io_ptw_pmp_6_cfg_x                        (_ptw_io_requestor_1_pmp_6_cfg_x),
    .io_ptw_pmp_6_cfg_w                        (_ptw_io_requestor_1_pmp_6_cfg_w),
    .io_ptw_pmp_6_cfg_r                        (_ptw_io_requestor_1_pmp_6_cfg_r),
    .io_ptw_pmp_6_addr                         (_ptw_io_requestor_1_pmp_6_addr),
    .io_ptw_pmp_6_mask                         (_ptw_io_requestor_1_pmp_6_mask),
    .io_ptw_pmp_7_cfg_l                        (_ptw_io_requestor_1_pmp_7_cfg_l),
    .io_ptw_pmp_7_cfg_a                        (_ptw_io_requestor_1_pmp_7_cfg_a),
    .io_ptw_pmp_7_cfg_x                        (_ptw_io_requestor_1_pmp_7_cfg_x),
    .io_ptw_pmp_7_cfg_w                        (_ptw_io_requestor_1_pmp_7_cfg_w),
    .io_ptw_pmp_7_cfg_r                        (_ptw_io_requestor_1_pmp_7_cfg_r),
    .io_ptw_pmp_7_addr                         (_ptw_io_requestor_1_pmp_7_addr),
    .io_ptw_pmp_7_mask                         (_ptw_io_requestor_1_pmp_7_mask),
    .io_ptw_customCSRs_csrs_0_value
      (_ptw_io_requestor_1_customCSRs_csrs_0_value),
    .auto_icache_master_out_a_valid            (_frontend_auto_icache_master_out_a_valid),
    .auto_icache_master_out_a_bits_address
      (_frontend_auto_icache_master_out_a_bits_address),
    .io_cpu_resp_valid                         (_frontend_io_cpu_resp_valid),
    .io_cpu_resp_bits_btb_taken                (_frontend_io_cpu_resp_bits_btb_taken),
    .io_cpu_resp_bits_btb_bridx                (_frontend_io_cpu_resp_bits_btb_bridx),
    .io_cpu_resp_bits_btb_entry                (_frontend_io_cpu_resp_bits_btb_entry),
    .io_cpu_resp_bits_btb_bht_history
      (_frontend_io_cpu_resp_bits_btb_bht_history),
    .io_cpu_resp_bits_pc                       (_frontend_io_cpu_resp_bits_pc),
    .io_cpu_resp_bits_data                     (_frontend_io_cpu_resp_bits_data),
    .io_cpu_resp_bits_xcpt_pf_inst             (_frontend_io_cpu_resp_bits_xcpt_pf_inst),
    .io_cpu_resp_bits_xcpt_gf_inst             (_frontend_io_cpu_resp_bits_xcpt_gf_inst),
    .io_cpu_resp_bits_xcpt_ae_inst             (_frontend_io_cpu_resp_bits_xcpt_ae_inst),
    .io_cpu_resp_bits_replay                   (_frontend_io_cpu_resp_bits_replay),
    .io_cpu_gpa_valid                          (_frontend_io_cpu_gpa_valid),
    .io_ptw_req_valid                          (_frontend_io_ptw_req_valid),
    .io_ptw_req_bits_valid                     (_frontend_io_ptw_req_bits_valid),
    .io_ptw_req_bits_bits_addr                 (_frontend_io_ptw_req_bits_bits_addr),
    .io_ptw_req_bits_bits_need_gpa             (_frontend_io_ptw_req_bits_bits_need_gpa),
    .io_ptw_req_bits_bits_vstage1              (_frontend_io_ptw_req_bits_bits_vstage1),
    .io_ptw_req_bits_bits_stage2               (_frontend_io_ptw_req_bits_bits_stage2)
  );
  FPU fpuOpt (
    .clock               (clock),
    .reset               (reset),
    .io_inst             (_core_io_fpu_inst),
    .io_fromint_data     (_core_io_fpu_fromint_data),
    .io_fcsr_rm          (_core_io_fpu_fcsr_rm),
    .io_ll_resp_val      (_core_io_fpu_ll_resp_val),
    .io_ll_resp_type     (_core_io_fpu_ll_resp_type),
    .io_ll_resp_tag      (_core_io_fpu_ll_resp_tag),
    .io_ll_resp_data     (_core_io_fpu_ll_resp_data),
    .io_valid            (_core_io_fpu_valid),
    .io_killx            (_core_io_fpu_killx),
    .io_killm            (_core_io_fpu_killm),
    .io_fcsr_flags_valid (_fpuOpt_io_fcsr_flags_valid),
    .io_fcsr_flags_bits  (_fpuOpt_io_fcsr_flags_bits),
    .io_store_data       (_fpuOpt_io_store_data),
    .io_toint_data       (_fpuOpt_io_toint_data),
    .io_fcsr_rdy         (_fpuOpt_io_fcsr_rdy),
    .io_nack_mem         (_fpuOpt_io_nack_mem),
    .io_illegal_rm       (_fpuOpt_io_illegal_rm),
    .io_dec_wen          (_fpuOpt_io_dec_wen),
    .io_dec_ren1         (_fpuOpt_io_dec_ren1),
    .io_dec_ren2         (_fpuOpt_io_dec_ren2),
    .io_dec_ren3         (_fpuOpt_io_dec_ren3),
    .io_sboard_set       (_fpuOpt_io_sboard_set),
    .io_sboard_clr       (_fpuOpt_io_sboard_clr),
    .io_sboard_clra      (_fpuOpt_io_sboard_clra)
  );
  HellaCacheArbiter dcacheArb (
    .clock                                     (clock),
    .io_requestor_0_req_valid                  (_ptw_io_mem_req_valid),
    .io_requestor_0_req_bits_addr              (_ptw_io_mem_req_bits_addr),
    .io_requestor_0_req_bits_dv                (_ptw_io_mem_req_bits_dv),
    .io_requestor_0_s1_kill                    (_ptw_io_mem_s1_kill),
    .io_requestor_1_req_valid                  (_core_io_dmem_req_valid),
    .io_requestor_1_req_bits_addr              (_core_io_dmem_req_bits_addr),
    .io_requestor_1_req_bits_tag               (_core_io_dmem_req_bits_tag),
    .io_requestor_1_req_bits_cmd               (_core_io_dmem_req_bits_cmd),
    .io_requestor_1_req_bits_size              (_core_io_dmem_req_bits_size),
    .io_requestor_1_req_bits_signed            (_core_io_dmem_req_bits_signed),
    .io_requestor_1_req_bits_dprv              (_core_io_dmem_req_bits_dprv),
    .io_requestor_1_req_bits_dv                (_core_io_dmem_req_bits_dv),
    .io_requestor_1_s1_kill                    (_core_io_dmem_s1_kill),
    .io_requestor_1_s1_data_data               (_core_io_dmem_s1_data_data),
    .io_mem_req_ready                          (_dcache_io_cpu_req_ready),
    .io_mem_s2_nack                            (_dcache_io_cpu_s2_nack),
    .io_mem_resp_valid                         (_dcache_io_cpu_resp_valid),
    .io_mem_resp_bits_tag                      (_dcache_io_cpu_resp_bits_tag),
    .io_mem_resp_bits_size                     (_dcache_io_cpu_resp_bits_size),
    .io_mem_resp_bits_data                     (_dcache_io_cpu_resp_bits_data),
    .io_mem_resp_bits_replay                   (_dcache_io_cpu_resp_bits_replay),
    .io_mem_resp_bits_has_data                 (_dcache_io_cpu_resp_bits_has_data),
    .io_mem_resp_bits_data_word_bypass
      (_dcache_io_cpu_resp_bits_data_word_bypass),
    .io_mem_replay_next                        (_dcache_io_cpu_replay_next),
    .io_mem_s2_xcpt_ma_ld                      (_dcache_io_cpu_s2_xcpt_ma_ld),
    .io_mem_s2_xcpt_ma_st                      (_dcache_io_cpu_s2_xcpt_ma_st),
    .io_mem_s2_xcpt_pf_ld                      (_dcache_io_cpu_s2_xcpt_pf_ld),
    .io_mem_s2_xcpt_pf_st                      (_dcache_io_cpu_s2_xcpt_pf_st),
    .io_mem_s2_xcpt_gf_ld                      (_dcache_io_cpu_s2_xcpt_gf_ld),
    .io_mem_s2_xcpt_gf_st                      (_dcache_io_cpu_s2_xcpt_gf_st),
    .io_mem_s2_xcpt_ae_ld                      (_dcache_io_cpu_s2_xcpt_ae_ld),
    .io_mem_s2_xcpt_ae_st                      (_dcache_io_cpu_s2_xcpt_ae_st),
    .io_mem_ordered                            (_dcache_io_cpu_ordered),
    .io_mem_perf_release                       (_dcache_io_cpu_perf_release),
    .io_mem_perf_grant                         (_dcache_io_cpu_perf_grant),
    .io_requestor_0_req_ready                  (_dcacheArb_io_requestor_0_req_ready),
    .io_requestor_0_s2_nack                    (_dcacheArb_io_requestor_0_s2_nack),
    .io_requestor_0_resp_valid                 (_dcacheArb_io_requestor_0_resp_valid),
    .io_requestor_0_resp_bits_data             (_dcacheArb_io_requestor_0_resp_bits_data),
    .io_requestor_0_s2_xcpt_ae_ld              (_dcacheArb_io_requestor_0_s2_xcpt_ae_ld),
    .io_requestor_1_req_ready                  (_dcacheArb_io_requestor_1_req_ready),
    .io_requestor_1_s2_nack                    (_dcacheArb_io_requestor_1_s2_nack),
    .io_requestor_1_resp_valid                 (_dcacheArb_io_requestor_1_resp_valid),
    .io_requestor_1_resp_bits_tag              (_dcacheArb_io_requestor_1_resp_bits_tag),
    .io_requestor_1_resp_bits_size             (_dcacheArb_io_requestor_1_resp_bits_size),
    .io_requestor_1_resp_bits_data             (_dcacheArb_io_requestor_1_resp_bits_data),
    .io_requestor_1_resp_bits_replay
      (_dcacheArb_io_requestor_1_resp_bits_replay),
    .io_requestor_1_resp_bits_has_data
      (_dcacheArb_io_requestor_1_resp_bits_has_data),
    .io_requestor_1_resp_bits_data_word_bypass
      (_dcacheArb_io_requestor_1_resp_bits_data_word_bypass),
    .io_requestor_1_replay_next                (_dcacheArb_io_requestor_1_replay_next),
    .io_requestor_1_s2_xcpt_ma_ld              (_dcacheArb_io_requestor_1_s2_xcpt_ma_ld),
    .io_requestor_1_s2_xcpt_ma_st              (_dcacheArb_io_requestor_1_s2_xcpt_ma_st),
    .io_requestor_1_s2_xcpt_pf_ld              (_dcacheArb_io_requestor_1_s2_xcpt_pf_ld),
    .io_requestor_1_s2_xcpt_pf_st              (_dcacheArb_io_requestor_1_s2_xcpt_pf_st),
    .io_requestor_1_s2_xcpt_gf_ld              (_dcacheArb_io_requestor_1_s2_xcpt_gf_ld),
    .io_requestor_1_s2_xcpt_gf_st              (_dcacheArb_io_requestor_1_s2_xcpt_gf_st),
    .io_requestor_1_s2_xcpt_ae_ld              (_dcacheArb_io_requestor_1_s2_xcpt_ae_ld),
    .io_requestor_1_s2_xcpt_ae_st              (_dcacheArb_io_requestor_1_s2_xcpt_ae_st),
    .io_requestor_1_ordered                    (_dcacheArb_io_requestor_1_ordered),
    .io_requestor_1_perf_release               (_dcacheArb_io_requestor_1_perf_release),
    .io_requestor_1_perf_grant                 (_dcacheArb_io_requestor_1_perf_grant),
    .io_mem_req_valid                          (_dcacheArb_io_mem_req_valid),
    .io_mem_req_bits_addr                      (_dcacheArb_io_mem_req_bits_addr),
    .io_mem_req_bits_tag                       (_dcacheArb_io_mem_req_bits_tag),
    .io_mem_req_bits_cmd                       (_dcacheArb_io_mem_req_bits_cmd),
    .io_mem_req_bits_size                      (_dcacheArb_io_mem_req_bits_size),
    .io_mem_req_bits_signed                    (_dcacheArb_io_mem_req_bits_signed),
    .io_mem_req_bits_dprv                      (_dcacheArb_io_mem_req_bits_dprv),
    .io_mem_req_bits_dv                        (_dcacheArb_io_mem_req_bits_dv),
    .io_mem_req_bits_phys                      (_dcacheArb_io_mem_req_bits_phys),
    .io_mem_s1_kill                            (_dcacheArb_io_mem_s1_kill),
    .io_mem_s1_data_data                       (_dcacheArb_io_mem_s1_data_data)
  );
  PTW ptw (
    .clock                                  (clock),
    .reset                                  (reset),
    .io_requestor_0_req_valid               (_dcache_io_ptw_req_valid),
    .io_requestor_0_req_bits_bits_addr      (_dcache_io_ptw_req_bits_bits_addr),
    .io_requestor_0_req_bits_bits_need_gpa  (_dcache_io_ptw_req_bits_bits_need_gpa),
    .io_requestor_0_req_bits_bits_vstage1   (_dcache_io_ptw_req_bits_bits_vstage1),
    .io_requestor_0_req_bits_bits_stage2    (_dcache_io_ptw_req_bits_bits_stage2),
    .io_requestor_1_req_valid               (_frontend_io_ptw_req_valid),
    .io_requestor_1_req_bits_valid          (_frontend_io_ptw_req_bits_valid),
    .io_requestor_1_req_bits_bits_addr      (_frontend_io_ptw_req_bits_bits_addr),
    .io_requestor_1_req_bits_bits_need_gpa  (_frontend_io_ptw_req_bits_bits_need_gpa),
    .io_requestor_1_req_bits_bits_vstage1   (_frontend_io_ptw_req_bits_bits_vstage1),
    .io_requestor_1_req_bits_bits_stage2    (_frontend_io_ptw_req_bits_bits_stage2),
    .io_mem_req_ready                       (_dcacheArb_io_requestor_0_req_ready),
    .io_mem_s2_nack                         (_dcacheArb_io_requestor_0_s2_nack),
    .io_mem_resp_valid                      (_dcacheArb_io_requestor_0_resp_valid),
    .io_mem_resp_bits_data                  (_dcacheArb_io_requestor_0_resp_bits_data),
    .io_mem_s2_xcpt_ae_ld                   (_dcacheArb_io_requestor_0_s2_xcpt_ae_ld),
    .io_dpath_ptbr_mode                     (_core_io_ptw_ptbr_mode),
    .io_dpath_ptbr_ppn                      (_core_io_ptw_ptbr_ppn),
    .io_dpath_sfence_valid                  (_core_io_ptw_sfence_valid),
    .io_dpath_sfence_bits_rs1               (_core_io_ptw_sfence_bits_rs1),
    .io_dpath_status_debug                  (_core_io_ptw_status_debug),
    .io_dpath_status_prv                    (_core_io_ptw_status_prv),
    .io_dpath_status_mxr                    (_core_io_ptw_status_mxr),
    .io_dpath_status_sum                    (_core_io_ptw_status_sum),
    .io_dpath_pmp_0_cfg_l                   (_core_io_ptw_pmp_0_cfg_l),
    .io_dpath_pmp_0_cfg_a                   (_core_io_ptw_pmp_0_cfg_a),
    .io_dpath_pmp_0_cfg_x                   (_core_io_ptw_pmp_0_cfg_x),
    .io_dpath_pmp_0_cfg_w                   (_core_io_ptw_pmp_0_cfg_w),
    .io_dpath_pmp_0_cfg_r                   (_core_io_ptw_pmp_0_cfg_r),
    .io_dpath_pmp_0_addr                    (_core_io_ptw_pmp_0_addr),
    .io_dpath_pmp_0_mask                    (_core_io_ptw_pmp_0_mask),
    .io_dpath_pmp_1_cfg_l                   (_core_io_ptw_pmp_1_cfg_l),
    .io_dpath_pmp_1_cfg_a                   (_core_io_ptw_pmp_1_cfg_a),
    .io_dpath_pmp_1_cfg_x                   (_core_io_ptw_pmp_1_cfg_x),
    .io_dpath_pmp_1_cfg_w                   (_core_io_ptw_pmp_1_cfg_w),
    .io_dpath_pmp_1_cfg_r                   (_core_io_ptw_pmp_1_cfg_r),
    .io_dpath_pmp_1_addr                    (_core_io_ptw_pmp_1_addr),
    .io_dpath_pmp_1_mask                    (_core_io_ptw_pmp_1_mask),
    .io_dpath_pmp_2_cfg_l                   (_core_io_ptw_pmp_2_cfg_l),
    .io_dpath_pmp_2_cfg_a                   (_core_io_ptw_pmp_2_cfg_a),
    .io_dpath_pmp_2_cfg_x                   (_core_io_ptw_pmp_2_cfg_x),
    .io_dpath_pmp_2_cfg_w                   (_core_io_ptw_pmp_2_cfg_w),
    .io_dpath_pmp_2_cfg_r                   (_core_io_ptw_pmp_2_cfg_r),
    .io_dpath_pmp_2_addr                    (_core_io_ptw_pmp_2_addr),
    .io_dpath_pmp_2_mask                    (_core_io_ptw_pmp_2_mask),
    .io_dpath_pmp_3_cfg_l                   (_core_io_ptw_pmp_3_cfg_l),
    .io_dpath_pmp_3_cfg_a                   (_core_io_ptw_pmp_3_cfg_a),
    .io_dpath_pmp_3_cfg_x                   (_core_io_ptw_pmp_3_cfg_x),
    .io_dpath_pmp_3_cfg_w                   (_core_io_ptw_pmp_3_cfg_w),
    .io_dpath_pmp_3_cfg_r                   (_core_io_ptw_pmp_3_cfg_r),
    .io_dpath_pmp_3_addr                    (_core_io_ptw_pmp_3_addr),
    .io_dpath_pmp_3_mask                    (_core_io_ptw_pmp_3_mask),
    .io_dpath_pmp_4_cfg_l                   (_core_io_ptw_pmp_4_cfg_l),
    .io_dpath_pmp_4_cfg_a                   (_core_io_ptw_pmp_4_cfg_a),
    .io_dpath_pmp_4_cfg_x                   (_core_io_ptw_pmp_4_cfg_x),
    .io_dpath_pmp_4_cfg_w                   (_core_io_ptw_pmp_4_cfg_w),
    .io_dpath_pmp_4_cfg_r                   (_core_io_ptw_pmp_4_cfg_r),
    .io_dpath_pmp_4_addr                    (_core_io_ptw_pmp_4_addr),
    .io_dpath_pmp_4_mask                    (_core_io_ptw_pmp_4_mask),
    .io_dpath_pmp_5_cfg_l                   (_core_io_ptw_pmp_5_cfg_l),
    .io_dpath_pmp_5_cfg_a                   (_core_io_ptw_pmp_5_cfg_a),
    .io_dpath_pmp_5_cfg_x                   (_core_io_ptw_pmp_5_cfg_x),
    .io_dpath_pmp_5_cfg_w                   (_core_io_ptw_pmp_5_cfg_w),
    .io_dpath_pmp_5_cfg_r                   (_core_io_ptw_pmp_5_cfg_r),
    .io_dpath_pmp_5_addr                    (_core_io_ptw_pmp_5_addr),
    .io_dpath_pmp_5_mask                    (_core_io_ptw_pmp_5_mask),
    .io_dpath_pmp_6_cfg_l                   (_core_io_ptw_pmp_6_cfg_l),
    .io_dpath_pmp_6_cfg_a                   (_core_io_ptw_pmp_6_cfg_a),
    .io_dpath_pmp_6_cfg_x                   (_core_io_ptw_pmp_6_cfg_x),
    .io_dpath_pmp_6_cfg_w                   (_core_io_ptw_pmp_6_cfg_w),
    .io_dpath_pmp_6_cfg_r                   (_core_io_ptw_pmp_6_cfg_r),
    .io_dpath_pmp_6_addr                    (_core_io_ptw_pmp_6_addr),
    .io_dpath_pmp_6_mask                    (_core_io_ptw_pmp_6_mask),
    .io_dpath_pmp_7_cfg_l                   (_core_io_ptw_pmp_7_cfg_l),
    .io_dpath_pmp_7_cfg_a                   (_core_io_ptw_pmp_7_cfg_a),
    .io_dpath_pmp_7_cfg_x                   (_core_io_ptw_pmp_7_cfg_x),
    .io_dpath_pmp_7_cfg_w                   (_core_io_ptw_pmp_7_cfg_w),
    .io_dpath_pmp_7_cfg_r                   (_core_io_ptw_pmp_7_cfg_r),
    .io_dpath_pmp_7_addr                    (_core_io_ptw_pmp_7_addr),
    .io_dpath_pmp_7_mask                    (_core_io_ptw_pmp_7_mask),
    .io_dpath_customCSRs_csrs_0_value       (_core_io_ptw_customCSRs_csrs_0_value),
    .io_requestor_0_req_ready               (_ptw_io_requestor_0_req_ready),
    .io_requestor_0_resp_valid              (_ptw_io_requestor_0_resp_valid),
    .io_requestor_0_resp_bits_ae_ptw        (_ptw_io_requestor_0_resp_bits_ae_ptw),
    .io_requestor_0_resp_bits_ae_final      (_ptw_io_requestor_0_resp_bits_ae_final),
    .io_requestor_0_resp_bits_pf            (_ptw_io_requestor_0_resp_bits_pf),
    .io_requestor_0_resp_bits_gf            (_ptw_io_requestor_0_resp_bits_gf),
    .io_requestor_0_resp_bits_hr            (_ptw_io_requestor_0_resp_bits_hr),
    .io_requestor_0_resp_bits_hw            (_ptw_io_requestor_0_resp_bits_hw),
    .io_requestor_0_resp_bits_hx            (_ptw_io_requestor_0_resp_bits_hx),
    .io_requestor_0_resp_bits_pte_ppn       (_ptw_io_requestor_0_resp_bits_pte_ppn),
    .io_requestor_0_resp_bits_pte_d         (_ptw_io_requestor_0_resp_bits_pte_d),
    .io_requestor_0_resp_bits_pte_a         (_ptw_io_requestor_0_resp_bits_pte_a),
    .io_requestor_0_resp_bits_pte_g         (_ptw_io_requestor_0_resp_bits_pte_g),
    .io_requestor_0_resp_bits_pte_u         (_ptw_io_requestor_0_resp_bits_pte_u),
    .io_requestor_0_resp_bits_pte_x         (_ptw_io_requestor_0_resp_bits_pte_x),
    .io_requestor_0_resp_bits_pte_w         (_ptw_io_requestor_0_resp_bits_pte_w),
    .io_requestor_0_resp_bits_pte_r         (_ptw_io_requestor_0_resp_bits_pte_r),
    .io_requestor_0_resp_bits_pte_v         (_ptw_io_requestor_0_resp_bits_pte_v),
    .io_requestor_0_resp_bits_level         (_ptw_io_requestor_0_resp_bits_level),
    .io_requestor_0_resp_bits_homogeneous   (_ptw_io_requestor_0_resp_bits_homogeneous),
    .io_requestor_0_resp_bits_gpa_is_pte    (_ptw_io_requestor_0_resp_bits_gpa_is_pte),
    .io_requestor_0_ptbr_mode               (_ptw_io_requestor_0_ptbr_mode),
    .io_requestor_0_status_debug            (_ptw_io_requestor_0_status_debug),
    .io_requestor_0_status_mxr              (_ptw_io_requestor_0_status_mxr),
    .io_requestor_0_status_sum              (_ptw_io_requestor_0_status_sum),
    .io_requestor_0_pmp_0_cfg_l             (_ptw_io_requestor_0_pmp_0_cfg_l),
    .io_requestor_0_pmp_0_cfg_a             (_ptw_io_requestor_0_pmp_0_cfg_a),
    .io_requestor_0_pmp_0_cfg_x             (_ptw_io_requestor_0_pmp_0_cfg_x),
    .io_requestor_0_pmp_0_cfg_w             (_ptw_io_requestor_0_pmp_0_cfg_w),
    .io_requestor_0_pmp_0_cfg_r             (_ptw_io_requestor_0_pmp_0_cfg_r),
    .io_requestor_0_pmp_0_addr              (_ptw_io_requestor_0_pmp_0_addr),
    .io_requestor_0_pmp_0_mask              (_ptw_io_requestor_0_pmp_0_mask),
    .io_requestor_0_pmp_1_cfg_l             (_ptw_io_requestor_0_pmp_1_cfg_l),
    .io_requestor_0_pmp_1_cfg_a             (_ptw_io_requestor_0_pmp_1_cfg_a),
    .io_requestor_0_pmp_1_cfg_x             (_ptw_io_requestor_0_pmp_1_cfg_x),
    .io_requestor_0_pmp_1_cfg_w             (_ptw_io_requestor_0_pmp_1_cfg_w),
    .io_requestor_0_pmp_1_cfg_r             (_ptw_io_requestor_0_pmp_1_cfg_r),
    .io_requestor_0_pmp_1_addr              (_ptw_io_requestor_0_pmp_1_addr),
    .io_requestor_0_pmp_1_mask              (_ptw_io_requestor_0_pmp_1_mask),
    .io_requestor_0_pmp_2_cfg_l             (_ptw_io_requestor_0_pmp_2_cfg_l),
    .io_requestor_0_pmp_2_cfg_a             (_ptw_io_requestor_0_pmp_2_cfg_a),
    .io_requestor_0_pmp_2_cfg_x             (_ptw_io_requestor_0_pmp_2_cfg_x),
    .io_requestor_0_pmp_2_cfg_w             (_ptw_io_requestor_0_pmp_2_cfg_w),
    .io_requestor_0_pmp_2_cfg_r             (_ptw_io_requestor_0_pmp_2_cfg_r),
    .io_requestor_0_pmp_2_addr              (_ptw_io_requestor_0_pmp_2_addr),
    .io_requestor_0_pmp_2_mask              (_ptw_io_requestor_0_pmp_2_mask),
    .io_requestor_0_pmp_3_cfg_l             (_ptw_io_requestor_0_pmp_3_cfg_l),
    .io_requestor_0_pmp_3_cfg_a             (_ptw_io_requestor_0_pmp_3_cfg_a),
    .io_requestor_0_pmp_3_cfg_x             (_ptw_io_requestor_0_pmp_3_cfg_x),
    .io_requestor_0_pmp_3_cfg_w             (_ptw_io_requestor_0_pmp_3_cfg_w),
    .io_requestor_0_pmp_3_cfg_r             (_ptw_io_requestor_0_pmp_3_cfg_r),
    .io_requestor_0_pmp_3_addr              (_ptw_io_requestor_0_pmp_3_addr),
    .io_requestor_0_pmp_3_mask              (_ptw_io_requestor_0_pmp_3_mask),
    .io_requestor_0_pmp_4_cfg_l             (_ptw_io_requestor_0_pmp_4_cfg_l),
    .io_requestor_0_pmp_4_cfg_a             (_ptw_io_requestor_0_pmp_4_cfg_a),
    .io_requestor_0_pmp_4_cfg_x             (_ptw_io_requestor_0_pmp_4_cfg_x),
    .io_requestor_0_pmp_4_cfg_w             (_ptw_io_requestor_0_pmp_4_cfg_w),
    .io_requestor_0_pmp_4_cfg_r             (_ptw_io_requestor_0_pmp_4_cfg_r),
    .io_requestor_0_pmp_4_addr              (_ptw_io_requestor_0_pmp_4_addr),
    .io_requestor_0_pmp_4_mask              (_ptw_io_requestor_0_pmp_4_mask),
    .io_requestor_0_pmp_5_cfg_l             (_ptw_io_requestor_0_pmp_5_cfg_l),
    .io_requestor_0_pmp_5_cfg_a             (_ptw_io_requestor_0_pmp_5_cfg_a),
    .io_requestor_0_pmp_5_cfg_x             (_ptw_io_requestor_0_pmp_5_cfg_x),
    .io_requestor_0_pmp_5_cfg_w             (_ptw_io_requestor_0_pmp_5_cfg_w),
    .io_requestor_0_pmp_5_cfg_r             (_ptw_io_requestor_0_pmp_5_cfg_r),
    .io_requestor_0_pmp_5_addr              (_ptw_io_requestor_0_pmp_5_addr),
    .io_requestor_0_pmp_5_mask              (_ptw_io_requestor_0_pmp_5_mask),
    .io_requestor_0_pmp_6_cfg_l             (_ptw_io_requestor_0_pmp_6_cfg_l),
    .io_requestor_0_pmp_6_cfg_a             (_ptw_io_requestor_0_pmp_6_cfg_a),
    .io_requestor_0_pmp_6_cfg_x             (_ptw_io_requestor_0_pmp_6_cfg_x),
    .io_requestor_0_pmp_6_cfg_w             (_ptw_io_requestor_0_pmp_6_cfg_w),
    .io_requestor_0_pmp_6_cfg_r             (_ptw_io_requestor_0_pmp_6_cfg_r),
    .io_requestor_0_pmp_6_addr              (_ptw_io_requestor_0_pmp_6_addr),
    .io_requestor_0_pmp_6_mask              (_ptw_io_requestor_0_pmp_6_mask),
    .io_requestor_0_pmp_7_cfg_l             (_ptw_io_requestor_0_pmp_7_cfg_l),
    .io_requestor_0_pmp_7_cfg_a             (_ptw_io_requestor_0_pmp_7_cfg_a),
    .io_requestor_0_pmp_7_cfg_x             (_ptw_io_requestor_0_pmp_7_cfg_x),
    .io_requestor_0_pmp_7_cfg_w             (_ptw_io_requestor_0_pmp_7_cfg_w),
    .io_requestor_0_pmp_7_cfg_r             (_ptw_io_requestor_0_pmp_7_cfg_r),
    .io_requestor_0_pmp_7_addr              (_ptw_io_requestor_0_pmp_7_addr),
    .io_requestor_0_pmp_7_mask              (_ptw_io_requestor_0_pmp_7_mask),
    .io_requestor_1_req_ready               (_ptw_io_requestor_1_req_ready),
    .io_requestor_1_resp_valid              (_ptw_io_requestor_1_resp_valid),
    .io_requestor_1_resp_bits_ae_ptw        (_ptw_io_requestor_1_resp_bits_ae_ptw),
    .io_requestor_1_resp_bits_ae_final      (_ptw_io_requestor_1_resp_bits_ae_final),
    .io_requestor_1_resp_bits_pf            (_ptw_io_requestor_1_resp_bits_pf),
    .io_requestor_1_resp_bits_gf            (_ptw_io_requestor_1_resp_bits_gf),
    .io_requestor_1_resp_bits_hr            (_ptw_io_requestor_1_resp_bits_hr),
    .io_requestor_1_resp_bits_hw            (_ptw_io_requestor_1_resp_bits_hw),
    .io_requestor_1_resp_bits_hx            (_ptw_io_requestor_1_resp_bits_hx),
    .io_requestor_1_resp_bits_pte_ppn       (_ptw_io_requestor_1_resp_bits_pte_ppn),
    .io_requestor_1_resp_bits_pte_d         (_ptw_io_requestor_1_resp_bits_pte_d),
    .io_requestor_1_resp_bits_pte_a         (_ptw_io_requestor_1_resp_bits_pte_a),
    .io_requestor_1_resp_bits_pte_g         (_ptw_io_requestor_1_resp_bits_pte_g),
    .io_requestor_1_resp_bits_pte_u         (_ptw_io_requestor_1_resp_bits_pte_u),
    .io_requestor_1_resp_bits_pte_x         (_ptw_io_requestor_1_resp_bits_pte_x),
    .io_requestor_1_resp_bits_pte_w         (_ptw_io_requestor_1_resp_bits_pte_w),
    .io_requestor_1_resp_bits_pte_r         (_ptw_io_requestor_1_resp_bits_pte_r),
    .io_requestor_1_resp_bits_pte_v         (_ptw_io_requestor_1_resp_bits_pte_v),
    .io_requestor_1_resp_bits_level         (_ptw_io_requestor_1_resp_bits_level),
    .io_requestor_1_resp_bits_homogeneous   (_ptw_io_requestor_1_resp_bits_homogeneous),
    .io_requestor_1_resp_bits_gpa_is_pte    (_ptw_io_requestor_1_resp_bits_gpa_is_pte),
    .io_requestor_1_ptbr_mode               (_ptw_io_requestor_1_ptbr_mode),
    .io_requestor_1_status_debug            (_ptw_io_requestor_1_status_debug),
    .io_requestor_1_status_prv              (_ptw_io_requestor_1_status_prv),
    .io_requestor_1_pmp_0_cfg_l             (_ptw_io_requestor_1_pmp_0_cfg_l),
    .io_requestor_1_pmp_0_cfg_a             (_ptw_io_requestor_1_pmp_0_cfg_a),
    .io_requestor_1_pmp_0_cfg_x             (_ptw_io_requestor_1_pmp_0_cfg_x),
    .io_requestor_1_pmp_0_cfg_w             (_ptw_io_requestor_1_pmp_0_cfg_w),
    .io_requestor_1_pmp_0_cfg_r             (_ptw_io_requestor_1_pmp_0_cfg_r),
    .io_requestor_1_pmp_0_addr              (_ptw_io_requestor_1_pmp_0_addr),
    .io_requestor_1_pmp_0_mask              (_ptw_io_requestor_1_pmp_0_mask),
    .io_requestor_1_pmp_1_cfg_l             (_ptw_io_requestor_1_pmp_1_cfg_l),
    .io_requestor_1_pmp_1_cfg_a             (_ptw_io_requestor_1_pmp_1_cfg_a),
    .io_requestor_1_pmp_1_cfg_x             (_ptw_io_requestor_1_pmp_1_cfg_x),
    .io_requestor_1_pmp_1_cfg_w             (_ptw_io_requestor_1_pmp_1_cfg_w),
    .io_requestor_1_pmp_1_cfg_r             (_ptw_io_requestor_1_pmp_1_cfg_r),
    .io_requestor_1_pmp_1_addr              (_ptw_io_requestor_1_pmp_1_addr),
    .io_requestor_1_pmp_1_mask              (_ptw_io_requestor_1_pmp_1_mask),
    .io_requestor_1_pmp_2_cfg_l             (_ptw_io_requestor_1_pmp_2_cfg_l),
    .io_requestor_1_pmp_2_cfg_a             (_ptw_io_requestor_1_pmp_2_cfg_a),
    .io_requestor_1_pmp_2_cfg_x             (_ptw_io_requestor_1_pmp_2_cfg_x),
    .io_requestor_1_pmp_2_cfg_w             (_ptw_io_requestor_1_pmp_2_cfg_w),
    .io_requestor_1_pmp_2_cfg_r             (_ptw_io_requestor_1_pmp_2_cfg_r),
    .io_requestor_1_pmp_2_addr              (_ptw_io_requestor_1_pmp_2_addr),
    .io_requestor_1_pmp_2_mask              (_ptw_io_requestor_1_pmp_2_mask),
    .io_requestor_1_pmp_3_cfg_l             (_ptw_io_requestor_1_pmp_3_cfg_l),
    .io_requestor_1_pmp_3_cfg_a             (_ptw_io_requestor_1_pmp_3_cfg_a),
    .io_requestor_1_pmp_3_cfg_x             (_ptw_io_requestor_1_pmp_3_cfg_x),
    .io_requestor_1_pmp_3_cfg_w             (_ptw_io_requestor_1_pmp_3_cfg_w),
    .io_requestor_1_pmp_3_cfg_r             (_ptw_io_requestor_1_pmp_3_cfg_r),
    .io_requestor_1_pmp_3_addr              (_ptw_io_requestor_1_pmp_3_addr),
    .io_requestor_1_pmp_3_mask              (_ptw_io_requestor_1_pmp_3_mask),
    .io_requestor_1_pmp_4_cfg_l             (_ptw_io_requestor_1_pmp_4_cfg_l),
    .io_requestor_1_pmp_4_cfg_a             (_ptw_io_requestor_1_pmp_4_cfg_a),
    .io_requestor_1_pmp_4_cfg_x             (_ptw_io_requestor_1_pmp_4_cfg_x),
    .io_requestor_1_pmp_4_cfg_w             (_ptw_io_requestor_1_pmp_4_cfg_w),
    .io_requestor_1_pmp_4_cfg_r             (_ptw_io_requestor_1_pmp_4_cfg_r),
    .io_requestor_1_pmp_4_addr              (_ptw_io_requestor_1_pmp_4_addr),
    .io_requestor_1_pmp_4_mask              (_ptw_io_requestor_1_pmp_4_mask),
    .io_requestor_1_pmp_5_cfg_l             (_ptw_io_requestor_1_pmp_5_cfg_l),
    .io_requestor_1_pmp_5_cfg_a             (_ptw_io_requestor_1_pmp_5_cfg_a),
    .io_requestor_1_pmp_5_cfg_x             (_ptw_io_requestor_1_pmp_5_cfg_x),
    .io_requestor_1_pmp_5_cfg_w             (_ptw_io_requestor_1_pmp_5_cfg_w),
    .io_requestor_1_pmp_5_cfg_r             (_ptw_io_requestor_1_pmp_5_cfg_r),
    .io_requestor_1_pmp_5_addr              (_ptw_io_requestor_1_pmp_5_addr),
    .io_requestor_1_pmp_5_mask              (_ptw_io_requestor_1_pmp_5_mask),
    .io_requestor_1_pmp_6_cfg_l             (_ptw_io_requestor_1_pmp_6_cfg_l),
    .io_requestor_1_pmp_6_cfg_a             (_ptw_io_requestor_1_pmp_6_cfg_a),
    .io_requestor_1_pmp_6_cfg_x             (_ptw_io_requestor_1_pmp_6_cfg_x),
    .io_requestor_1_pmp_6_cfg_w             (_ptw_io_requestor_1_pmp_6_cfg_w),
    .io_requestor_1_pmp_6_cfg_r             (_ptw_io_requestor_1_pmp_6_cfg_r),
    .io_requestor_1_pmp_6_addr              (_ptw_io_requestor_1_pmp_6_addr),
    .io_requestor_1_pmp_6_mask              (_ptw_io_requestor_1_pmp_6_mask),
    .io_requestor_1_pmp_7_cfg_l             (_ptw_io_requestor_1_pmp_7_cfg_l),
    .io_requestor_1_pmp_7_cfg_a             (_ptw_io_requestor_1_pmp_7_cfg_a),
    .io_requestor_1_pmp_7_cfg_x             (_ptw_io_requestor_1_pmp_7_cfg_x),
    .io_requestor_1_pmp_7_cfg_w             (_ptw_io_requestor_1_pmp_7_cfg_w),
    .io_requestor_1_pmp_7_cfg_r             (_ptw_io_requestor_1_pmp_7_cfg_r),
    .io_requestor_1_pmp_7_addr              (_ptw_io_requestor_1_pmp_7_addr),
    .io_requestor_1_pmp_7_mask              (_ptw_io_requestor_1_pmp_7_mask),
    .io_requestor_1_customCSRs_csrs_0_value (_ptw_io_requestor_1_customCSRs_csrs_0_value),
    .io_mem_req_valid                       (_ptw_io_mem_req_valid),
    .io_mem_req_bits_addr                   (_ptw_io_mem_req_bits_addr),
    .io_mem_req_bits_dv                     (_ptw_io_mem_req_bits_dv),
    .io_mem_s1_kill                         (_ptw_io_mem_s1_kill)
  );
  Rocket core (
    .clock                                      (clock),
    .reset                                      (reset),
    .io_hartid                                  (auto_hartid_in),
    .io_interrupts_debug                        (_intXbar_auto_anon_out_0),
    .io_interrupts_mtip                         (_intXbar_auto_anon_out_2),
    .io_interrupts_msip                         (_intXbar_auto_anon_out_1),
    .io_interrupts_meip                         (_intXbar_auto_anon_out_3),
    .io_interrupts_seip                         (_intXbar_auto_anon_out_4),
    .io_imem_resp_valid                         (_frontend_io_cpu_resp_valid),
    .io_imem_resp_bits_btb_taken                (_frontend_io_cpu_resp_bits_btb_taken),
    .io_imem_resp_bits_btb_bridx                (_frontend_io_cpu_resp_bits_btb_bridx),
    .io_imem_resp_bits_btb_entry                (_frontend_io_cpu_resp_bits_btb_entry),
    .io_imem_resp_bits_btb_bht_history
      (_frontend_io_cpu_resp_bits_btb_bht_history),
    .io_imem_resp_bits_pc                       (_frontend_io_cpu_resp_bits_pc),
    .io_imem_resp_bits_data                     (_frontend_io_cpu_resp_bits_data),
    .io_imem_resp_bits_xcpt_pf_inst             (_frontend_io_cpu_resp_bits_xcpt_pf_inst),
    .io_imem_resp_bits_xcpt_gf_inst             (_frontend_io_cpu_resp_bits_xcpt_gf_inst),
    .io_imem_resp_bits_xcpt_ae_inst             (_frontend_io_cpu_resp_bits_xcpt_ae_inst),
    .io_imem_resp_bits_replay                   (_frontend_io_cpu_resp_bits_replay),
    .io_imem_gpa_valid                          (_frontend_io_cpu_gpa_valid),
    .io_dmem_req_ready                          (_dcacheArb_io_requestor_1_req_ready),
    .io_dmem_s2_nack                            (_dcacheArb_io_requestor_1_s2_nack),
    .io_dmem_resp_valid                         (_dcacheArb_io_requestor_1_resp_valid),
    .io_dmem_resp_bits_tag                      (_dcacheArb_io_requestor_1_resp_bits_tag),
    .io_dmem_resp_bits_size
      (_dcacheArb_io_requestor_1_resp_bits_size),
    .io_dmem_resp_bits_data
      (_dcacheArb_io_requestor_1_resp_bits_data),
    .io_dmem_resp_bits_replay
      (_dcacheArb_io_requestor_1_resp_bits_replay),
    .io_dmem_resp_bits_has_data
      (_dcacheArb_io_requestor_1_resp_bits_has_data),
    .io_dmem_resp_bits_data_word_bypass
      (_dcacheArb_io_requestor_1_resp_bits_data_word_bypass),
    .io_dmem_replay_next                        (_dcacheArb_io_requestor_1_replay_next),
    .io_dmem_s2_xcpt_ma_ld                      (_dcacheArb_io_requestor_1_s2_xcpt_ma_ld),
    .io_dmem_s2_xcpt_ma_st                      (_dcacheArb_io_requestor_1_s2_xcpt_ma_st),
    .io_dmem_s2_xcpt_pf_ld                      (_dcacheArb_io_requestor_1_s2_xcpt_pf_ld),
    .io_dmem_s2_xcpt_pf_st                      (_dcacheArb_io_requestor_1_s2_xcpt_pf_st),
    .io_dmem_s2_xcpt_gf_ld                      (_dcacheArb_io_requestor_1_s2_xcpt_gf_ld),
    .io_dmem_s2_xcpt_gf_st                      (_dcacheArb_io_requestor_1_s2_xcpt_gf_st),
    .io_dmem_s2_xcpt_ae_ld                      (_dcacheArb_io_requestor_1_s2_xcpt_ae_ld),
    .io_dmem_s2_xcpt_ae_st                      (_dcacheArb_io_requestor_1_s2_xcpt_ae_st),
    .io_dmem_ordered                            (_dcacheArb_io_requestor_1_ordered),
    .io_dmem_perf_release                       (_dcacheArb_io_requestor_1_perf_release),
    .io_dmem_perf_grant                         (_dcacheArb_io_requestor_1_perf_grant),
    .io_fpu_fcsr_flags_valid                    (_fpuOpt_io_fcsr_flags_valid),
    .io_fpu_fcsr_flags_bits                     (_fpuOpt_io_fcsr_flags_bits),
    .io_fpu_store_data                          (_fpuOpt_io_store_data),
    .io_fpu_toint_data                          (_fpuOpt_io_toint_data),
    .io_fpu_fcsr_rdy                            (_fpuOpt_io_fcsr_rdy),
    .io_fpu_nack_mem                            (_fpuOpt_io_nack_mem),
    .io_fpu_illegal_rm                          (_fpuOpt_io_illegal_rm),
    .io_fpu_dec_wen                             (_fpuOpt_io_dec_wen),
    .io_fpu_dec_ren1                            (_fpuOpt_io_dec_ren1),
    .io_fpu_dec_ren2                            (_fpuOpt_io_dec_ren2),
    .io_fpu_dec_ren3                            (_fpuOpt_io_dec_ren3),
    .io_fpu_sboard_set                          (_fpuOpt_io_sboard_set),
    .io_fpu_sboard_clr                          (_fpuOpt_io_sboard_clr),
    .io_fpu_sboard_clra                         (_fpuOpt_io_sboard_clra),
    .io_imem_might_request                      (_core_io_imem_might_request),
    .io_imem_req_valid                          (_core_io_imem_req_valid),
    .io_imem_req_bits_pc                        (_core_io_imem_req_bits_pc),
    .io_imem_req_bits_speculative               (_core_io_imem_req_bits_speculative),
    .io_imem_sfence_valid                       (_core_io_imem_sfence_valid),
    .io_imem_sfence_bits_rs1                    (_core_io_imem_sfence_bits_rs1),
    .io_imem_sfence_bits_rs2                    (_core_io_imem_sfence_bits_rs2),
    .io_imem_sfence_bits_addr                   (_core_io_imem_sfence_bits_addr),
    .io_imem_resp_ready                         (_core_io_imem_resp_ready),
    .io_imem_btb_update_valid                   (_core_io_imem_btb_update_valid),
    .io_imem_btb_update_bits_prediction_entry
      (_core_io_imem_btb_update_bits_prediction_entry),
    .io_imem_btb_update_bits_pc                 (_core_io_imem_btb_update_bits_pc),
    .io_imem_btb_update_bits_isValid            (_core_io_imem_btb_update_bits_isValid),
    .io_imem_btb_update_bits_br_pc              (_core_io_imem_btb_update_bits_br_pc),
    .io_imem_btb_update_bits_cfiType            (_core_io_imem_btb_update_bits_cfiType),
    .io_imem_bht_update_valid                   (_core_io_imem_bht_update_valid),
    .io_imem_bht_update_bits_prediction_history
      (_core_io_imem_bht_update_bits_prediction_history),
    .io_imem_bht_update_bits_pc                 (_core_io_imem_bht_update_bits_pc),
    .io_imem_bht_update_bits_branch             (_core_io_imem_bht_update_bits_branch),
    .io_imem_bht_update_bits_taken              (_core_io_imem_bht_update_bits_taken),
    .io_imem_bht_update_bits_mispredict
      (_core_io_imem_bht_update_bits_mispredict),
    .io_imem_flush_icache                       (_core_io_imem_flush_icache),
    .io_imem_progress                           (_core_io_imem_progress),
    .io_dmem_req_valid                          (_core_io_dmem_req_valid),
    .io_dmem_req_bits_addr                      (_core_io_dmem_req_bits_addr),
    .io_dmem_req_bits_tag                       (_core_io_dmem_req_bits_tag),
    .io_dmem_req_bits_cmd                       (_core_io_dmem_req_bits_cmd),
    .io_dmem_req_bits_size                      (_core_io_dmem_req_bits_size),
    .io_dmem_req_bits_signed                    (_core_io_dmem_req_bits_signed),
    .io_dmem_req_bits_dprv                      (_core_io_dmem_req_bits_dprv),
    .io_dmem_req_bits_dv                        (_core_io_dmem_req_bits_dv),
    .io_dmem_s1_kill                            (_core_io_dmem_s1_kill),
    .io_dmem_s1_data_data                       (_core_io_dmem_s1_data_data),
    .io_ptw_ptbr_mode                           (_core_io_ptw_ptbr_mode),
    .io_ptw_ptbr_ppn                            (_core_io_ptw_ptbr_ppn),
    .io_ptw_sfence_valid                        (_core_io_ptw_sfence_valid),
    .io_ptw_sfence_bits_rs1                     (_core_io_ptw_sfence_bits_rs1),
    .io_ptw_status_debug                        (_core_io_ptw_status_debug),
    .io_ptw_status_prv                          (_core_io_ptw_status_prv),
    .io_ptw_status_mxr                          (_core_io_ptw_status_mxr),
    .io_ptw_status_sum                          (_core_io_ptw_status_sum),
    .io_ptw_pmp_0_cfg_l                         (_core_io_ptw_pmp_0_cfg_l),
    .io_ptw_pmp_0_cfg_a                         (_core_io_ptw_pmp_0_cfg_a),
    .io_ptw_pmp_0_cfg_x                         (_core_io_ptw_pmp_0_cfg_x),
    .io_ptw_pmp_0_cfg_w                         (_core_io_ptw_pmp_0_cfg_w),
    .io_ptw_pmp_0_cfg_r                         (_core_io_ptw_pmp_0_cfg_r),
    .io_ptw_pmp_0_addr                          (_core_io_ptw_pmp_0_addr),
    .io_ptw_pmp_0_mask                          (_core_io_ptw_pmp_0_mask),
    .io_ptw_pmp_1_cfg_l                         (_core_io_ptw_pmp_1_cfg_l),
    .io_ptw_pmp_1_cfg_a                         (_core_io_ptw_pmp_1_cfg_a),
    .io_ptw_pmp_1_cfg_x                         (_core_io_ptw_pmp_1_cfg_x),
    .io_ptw_pmp_1_cfg_w                         (_core_io_ptw_pmp_1_cfg_w),
    .io_ptw_pmp_1_cfg_r                         (_core_io_ptw_pmp_1_cfg_r),
    .io_ptw_pmp_1_addr                          (_core_io_ptw_pmp_1_addr),
    .io_ptw_pmp_1_mask                          (_core_io_ptw_pmp_1_mask),
    .io_ptw_pmp_2_cfg_l                         (_core_io_ptw_pmp_2_cfg_l),
    .io_ptw_pmp_2_cfg_a                         (_core_io_ptw_pmp_2_cfg_a),
    .io_ptw_pmp_2_cfg_x                         (_core_io_ptw_pmp_2_cfg_x),
    .io_ptw_pmp_2_cfg_w                         (_core_io_ptw_pmp_2_cfg_w),
    .io_ptw_pmp_2_cfg_r                         (_core_io_ptw_pmp_2_cfg_r),
    .io_ptw_pmp_2_addr                          (_core_io_ptw_pmp_2_addr),
    .io_ptw_pmp_2_mask                          (_core_io_ptw_pmp_2_mask),
    .io_ptw_pmp_3_cfg_l                         (_core_io_ptw_pmp_3_cfg_l),
    .io_ptw_pmp_3_cfg_a                         (_core_io_ptw_pmp_3_cfg_a),
    .io_ptw_pmp_3_cfg_x                         (_core_io_ptw_pmp_3_cfg_x),
    .io_ptw_pmp_3_cfg_w                         (_core_io_ptw_pmp_3_cfg_w),
    .io_ptw_pmp_3_cfg_r                         (_core_io_ptw_pmp_3_cfg_r),
    .io_ptw_pmp_3_addr                          (_core_io_ptw_pmp_3_addr),
    .io_ptw_pmp_3_mask                          (_core_io_ptw_pmp_3_mask),
    .io_ptw_pmp_4_cfg_l                         (_core_io_ptw_pmp_4_cfg_l),
    .io_ptw_pmp_4_cfg_a                         (_core_io_ptw_pmp_4_cfg_a),
    .io_ptw_pmp_4_cfg_x                         (_core_io_ptw_pmp_4_cfg_x),
    .io_ptw_pmp_4_cfg_w                         (_core_io_ptw_pmp_4_cfg_w),
    .io_ptw_pmp_4_cfg_r                         (_core_io_ptw_pmp_4_cfg_r),
    .io_ptw_pmp_4_addr                          (_core_io_ptw_pmp_4_addr),
    .io_ptw_pmp_4_mask                          (_core_io_ptw_pmp_4_mask),
    .io_ptw_pmp_5_cfg_l                         (_core_io_ptw_pmp_5_cfg_l),
    .io_ptw_pmp_5_cfg_a                         (_core_io_ptw_pmp_5_cfg_a),
    .io_ptw_pmp_5_cfg_x                         (_core_io_ptw_pmp_5_cfg_x),
    .io_ptw_pmp_5_cfg_w                         (_core_io_ptw_pmp_5_cfg_w),
    .io_ptw_pmp_5_cfg_r                         (_core_io_ptw_pmp_5_cfg_r),
    .io_ptw_pmp_5_addr                          (_core_io_ptw_pmp_5_addr),
    .io_ptw_pmp_5_mask                          (_core_io_ptw_pmp_5_mask),
    .io_ptw_pmp_6_cfg_l                         (_core_io_ptw_pmp_6_cfg_l),
    .io_ptw_pmp_6_cfg_a                         (_core_io_ptw_pmp_6_cfg_a),
    .io_ptw_pmp_6_cfg_x                         (_core_io_ptw_pmp_6_cfg_x),
    .io_ptw_pmp_6_cfg_w                         (_core_io_ptw_pmp_6_cfg_w),
    .io_ptw_pmp_6_cfg_r                         (_core_io_ptw_pmp_6_cfg_r),
    .io_ptw_pmp_6_addr                          (_core_io_ptw_pmp_6_addr),
    .io_ptw_pmp_6_mask                          (_core_io_ptw_pmp_6_mask),
    .io_ptw_pmp_7_cfg_l                         (_core_io_ptw_pmp_7_cfg_l),
    .io_ptw_pmp_7_cfg_a                         (_core_io_ptw_pmp_7_cfg_a),
    .io_ptw_pmp_7_cfg_x                         (_core_io_ptw_pmp_7_cfg_x),
    .io_ptw_pmp_7_cfg_w                         (_core_io_ptw_pmp_7_cfg_w),
    .io_ptw_pmp_7_cfg_r                         (_core_io_ptw_pmp_7_cfg_r),
    .io_ptw_pmp_7_addr                          (_core_io_ptw_pmp_7_addr),
    .io_ptw_pmp_7_mask                          (_core_io_ptw_pmp_7_mask),
    .io_ptw_customCSRs_csrs_0_value             (_core_io_ptw_customCSRs_csrs_0_value),
    .io_fpu_inst                                (_core_io_fpu_inst),
    .io_fpu_fromint_data                        (_core_io_fpu_fromint_data),
    .io_fpu_fcsr_rm                             (_core_io_fpu_fcsr_rm),
    .io_fpu_ll_resp_val                         (_core_io_fpu_ll_resp_val),
    .io_fpu_ll_resp_type                        (_core_io_fpu_ll_resp_type),
    .io_fpu_ll_resp_tag                         (_core_io_fpu_ll_resp_tag),
    .io_fpu_ll_resp_data                        (_core_io_fpu_ll_resp_data),
    .io_fpu_valid                               (_core_io_fpu_valid),
    .io_fpu_killx                               (_core_io_fpu_killx),
    .io_fpu_killm                               (_core_io_fpu_killm),
    .io_wfi                                     (_core_io_wfi)
  );
  assign auto_wfi_out_0 = wfiNodeOut_0_REG;
endmodule

module TLMonitor_24(
  input        clock,
               reset,
               io_in_a_ready,
               io_in_a_valid,
  input [2:0]  io_in_a_bits_opcode,
               io_in_a_bits_param,
  input [3:0]  io_in_a_bits_size,
  input [1:0]  io_in_a_bits_source,
  input [31:0] io_in_a_bits_address,
  input [7:0]  io_in_a_bits_mask,
  input        io_in_b_ready,
               io_in_b_valid,
  input [2:0]  io_in_b_bits_opcode,
  input [1:0]  io_in_b_bits_param,
  input [3:0]  io_in_b_bits_size,
  input [1:0]  io_in_b_bits_source,
  input [31:0] io_in_b_bits_address,
  input [7:0]  io_in_b_bits_mask,
  input        io_in_b_bits_corrupt,
               io_in_c_ready,
               io_in_c_valid,
  input [2:0]  io_in_c_bits_opcode,
               io_in_c_bits_param,
  input [3:0]  io_in_c_bits_size,
  input [1:0]  io_in_c_bits_source,
  input [31:0] io_in_c_bits_address,
  input        io_in_d_ready,
               io_in_d_valid,
  input [2:0]  io_in_d_bits_opcode,
  input [1:0]  io_in_d_bits_param,
  input [3:0]  io_in_d_bits_size,
  input [1:0]  io_in_d_bits_source,
               io_in_d_bits_sink,
  input        io_in_d_bits_denied,
               io_in_d_bits_corrupt,
               io_in_e_ready,
               io_in_e_valid,
  input [1:0]  io_in_e_bits_sink
);

  wire [31:0] _plusarg_reader_1_out;
  wire [31:0] _plusarg_reader_out;
  wire [26:0] _GEN = 27'hFFF << io_in_a_bits_size;
  wire [26:0] _GEN_0 = 27'hFFF << io_in_c_bits_size;
  wire        _GEN_1 = io_in_a_ready & io_in_a_valid;
  reg  [8:0]  a_first_counter;
  reg  [2:0]  opcode;
  reg  [2:0]  param;
  reg  [3:0]  size;
  reg  [1:0]  source;
  reg  [31:0] address;
  wire        _GEN_2 = io_in_d_ready & io_in_d_valid;
  reg  [8:0]  d_first_counter;
  reg  [2:0]  opcode_1;
  reg  [1:0]  param_1;
  reg  [3:0]  size_1;
  reg  [1:0]  source_1;
  reg  [1:0]  sink;
  reg         denied;
  reg  [8:0]  b_first_counter;
  reg  [2:0]  opcode_2;
  reg  [1:0]  param_2;
  reg  [3:0]  size_2;
  reg  [1:0]  source_2;
  reg  [31:0] address_1;
  wire        _GEN_3 = io_in_c_ready & io_in_c_valid;
  reg  [8:0]  c_first_counter;
  reg  [2:0]  opcode_3;
  reg  [2:0]  param_3;
  reg  [3:0]  size_3;
  reg  [1:0]  source_3;
  reg  [31:0] address_2;
  reg  [2:0]  inflight;
  reg  [11:0] inflight_opcodes;
  reg  [23:0] inflight_sizes;
  reg  [8:0]  a_first_counter_1;
  wire        a_first_1 = a_first_counter_1 == 9'h0;
  reg  [8:0]  d_first_counter_1;
  wire        d_first_1 = d_first_counter_1 == 9'h0;
  wire [3:0]  _GEN_4 = 4'h1 << io_in_a_bits_source;
  wire        _GEN_5 = _GEN_1 & a_first_1;
  wire        d_release_ack = io_in_d_bits_opcode == 3'h6;
  wire [3:0]  _GEN_6 = 4'h1 << io_in_d_bits_source;
  reg  [31:0] watchdog;
  reg  [2:0]  inflight_1;
  reg  [23:0] inflight_sizes_1;
  reg  [8:0]  c_first_counter_1;
  wire        c_first_1 = c_first_counter_1 == 9'h0;
  reg  [8:0]  d_first_counter_2;
  wire        d_first_2 = d_first_counter_2 == 9'h0;
  wire        _GEN_7 = io_in_c_bits_opcode[2] & io_in_c_bits_opcode[1];
  wire [3:0]  _GEN_8 = 4'h1 << io_in_c_bits_source;
  wire        _GEN_9 = _GEN_3 & c_first_1 & _GEN_7;
  reg  [31:0] watchdog_1;
  reg  [3:0]  inflight_2;
  reg  [8:0]  d_first_counter_3;
  wire        d_first_3 = d_first_counter_3 == 9'h0;
  wire        _GEN_10 =
    _GEN_2 & d_first_3 & io_in_d_bits_opcode[2] & ~(io_in_d_bits_opcode[1]);
  wire [3:0]  _GEN_11 = {2'h0, io_in_d_bits_sink};
  wire        _GEN_12 = io_in_e_ready & io_in_e_valid;
  wire [3:0]  _GEN_13 = {2'h0, io_in_e_bits_sink};
  wire [3:0]  _GEN_14 = (_GEN_10 ? 4'h1 << _GEN_11 : 4'h0) | inflight_2;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      automatic logic [7:0][2:0] _GEN_15 =
        '{3'h4, 3'h5, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic [7:0][2:0] _GEN_16 =
        '{3'h4, 3'h4, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic            _GEN_17 = io_in_a_bits_source == 2'h0;
      automatic logic            _GEN_18 = io_in_a_bits_source == 2'h1;
      automatic logic            _GEN_19 = io_in_a_bits_source == 2'h2;
      automatic logic            source_ok = _GEN_17 | _GEN_18 | _GEN_19;
      automatic logic [11:0]     _GEN_20 = io_in_a_bits_address[11:0] & ~(_GEN[11:0]);
      automatic logic            _GEN_21 = io_in_a_bits_size > 4'h2;
      automatic logic            mask_size = io_in_a_bits_size[1:0] == 2'h2;
      automatic logic            mask_acc =
        _GEN_21 | mask_size & ~(io_in_a_bits_address[2]);
      automatic logic            mask_acc_1 =
        _GEN_21 | mask_size & io_in_a_bits_address[2];
      automatic logic            mask_size_1 = io_in_a_bits_size[1:0] == 2'h1;
      automatic logic            mask_eq_2 =
        ~(io_in_a_bits_address[2]) & ~(io_in_a_bits_address[1]);
      automatic logic            mask_acc_2 = mask_acc | mask_size_1 & mask_eq_2;
      automatic logic            mask_eq_3 =
        ~(io_in_a_bits_address[2]) & io_in_a_bits_address[1];
      automatic logic            mask_acc_3 = mask_acc | mask_size_1 & mask_eq_3;
      automatic logic            mask_eq_4 =
        io_in_a_bits_address[2] & ~(io_in_a_bits_address[1]);
      automatic logic            mask_acc_4 = mask_acc_1 | mask_size_1 & mask_eq_4;
      automatic logic            mask_eq_5 =
        io_in_a_bits_address[2] & io_in_a_bits_address[1];
      automatic logic            mask_acc_5 = mask_acc_1 | mask_size_1 & mask_eq_5;
      automatic logic [7:0]      mask =
        {mask_acc_5 | mask_eq_5 & io_in_a_bits_address[0],
         mask_acc_5 | mask_eq_5 & ~(io_in_a_bits_address[0]),
         mask_acc_4 | mask_eq_4 & io_in_a_bits_address[0],
         mask_acc_4 | mask_eq_4 & ~(io_in_a_bits_address[0]),
         mask_acc_3 | mask_eq_3 & io_in_a_bits_address[0],
         mask_acc_3 | mask_eq_3 & ~(io_in_a_bits_address[0]),
         mask_acc_2 | mask_eq_2 & io_in_a_bits_address[0],
         mask_acc_2 | mask_eq_2 & ~(io_in_a_bits_address[0])};
      automatic logic            _GEN_22 = io_in_a_bits_size < 4'hD;
      automatic logic            _GEN_23 = _GEN_22 & (_GEN_17 | _GEN_18 | _GEN_19);
      automatic logic            _GEN_24 = io_in_a_bits_size < 4'h7;
      automatic logic            _GEN_25 = io_in_a_bits_address[31:28] == 4'h8;
      automatic logic            _GEN_26 = _GEN_23 & _GEN_24 & _GEN_25;
      automatic logic            _GEN_27 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_28 = io_in_a_bits_address[31:12] == 20'h0;
      automatic logic            _GEN_29 =
        {io_in_a_bits_address[31:14], ~(io_in_a_bits_address[13:12])} == 20'h0;
      automatic logic            _GEN_30 =
        {io_in_a_bits_address[31:17], ~(io_in_a_bits_address[16])} == 16'h0;
      automatic logic            _GEN_31 =
        {io_in_a_bits_address[31:26], io_in_a_bits_address[25:16] ^ 10'h200} == 16'h0;
      automatic logic            _GEN_32 =
        {io_in_a_bits_address[31:28], ~(io_in_a_bits_address[27:26])} == 6'h0;
      automatic logic            _GEN_33 =
        {io_in_a_bits_address[31], ~(io_in_a_bits_address[30:29])} == 3'h0;
      automatic logic            _GEN_34 = _GEN_28 | _GEN_29;
      automatic logic            _GEN_35 =
        _GEN_17 & io_in_a_bits_size == 4'h6 & _GEN_22
        & (_GEN_34 | _GEN_30 | _GEN_31 | _GEN_32 | _GEN_33 | _GEN_25);
      automatic logic            _GEN_36 = io_in_a_bits_param > 3'h2;
      automatic logic            _GEN_37 = io_in_a_bits_mask != 8'hFF;
      automatic logic            _GEN_38 =
        io_in_a_valid & (&io_in_a_bits_opcode) & ~reset;
      automatic logic            _GEN_39 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_40 = _GEN_22 & _GEN_29;
      automatic logic            _GEN_41 = io_in_a_bits_mask != mask;
      automatic logic            _GEN_42 =
        _GEN_23
        & (_GEN_40 | _GEN_24 & (_GEN_28 | _GEN_31 | _GEN_32 | _GEN_25)
           | io_in_a_bits_size < 4'h9 & _GEN_33);
      automatic logic            _GEN_43 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_44 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_45 =
        _GEN_23 & io_in_a_bits_size < 4'h4 & (_GEN_34 | _GEN_31 | _GEN_32);
      automatic logic            _GEN_46 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_47 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h3 & ~reset;
      automatic logic            _GEN_48 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h5 & ~reset;
      automatic logic            source_ok_1 =
        io_in_d_bits_source == 2'h0 | io_in_d_bits_source == 2'h1
        | io_in_d_bits_source == 2'h2;
      automatic logic            _GEN_49 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_50 = io_in_d_bits_size < 4'h3;
      automatic logic            _GEN_51 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_52 = io_in_d_bits_param == 2'h2;
      automatic logic            _GEN_53 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h5 & ~reset;
      automatic logic            _GEN_54 = ~io_in_d_bits_denied | io_in_d_bits_corrupt;
      automatic logic            _GEN_55 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_56 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_57 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_58 = io_in_b_bits_address[31:12] == 20'h0;
      automatic logic            _GEN_59 =
        {io_in_b_bits_address[31:14], ~(io_in_b_bits_address[13:12])} == 20'h0;
      automatic logic            _GEN_60 =
        {io_in_b_bits_address[31:17], ~(io_in_b_bits_address[16])} == 16'h0;
      automatic logic            _GEN_61 =
        {io_in_b_bits_address[31:26], io_in_b_bits_address[25:16] ^ 10'h200} == 16'h0;
      automatic logic            _GEN_62 =
        {io_in_b_bits_address[31:28], ~(io_in_b_bits_address[27:26])} == 6'h0;
      automatic logic            _GEN_63 =
        {io_in_b_bits_address[31], ~(io_in_b_bits_address[30:29])} == 3'h0;
      automatic logic            _GEN_64 = io_in_b_bits_address[31:28] == 4'h8;
      automatic logic            address_ok =
        _GEN_58 | _GEN_59 | _GEN_60 | _GEN_61 | _GEN_62 | _GEN_63 | _GEN_64;
      automatic logic [26:0]     _GEN_65 = 27'hFFF << io_in_b_bits_size;
      automatic logic [11:0]     _GEN_66 = io_in_b_bits_address[11:0] & ~(_GEN_65[11:0]);
      automatic logic            _GEN_67 = io_in_b_bits_size > 4'h2;
      automatic logic            mask_size_3 = io_in_b_bits_size[1:0] == 2'h2;
      automatic logic            mask_acc_14 =
        _GEN_67 | mask_size_3 & ~(io_in_b_bits_address[2]);
      automatic logic            mask_acc_15 =
        _GEN_67 | mask_size_3 & io_in_b_bits_address[2];
      automatic logic            mask_size_4 = io_in_b_bits_size[1:0] == 2'h1;
      automatic logic            mask_eq_16 =
        ~(io_in_b_bits_address[2]) & ~(io_in_b_bits_address[1]);
      automatic logic            mask_acc_16 = mask_acc_14 | mask_size_4 & mask_eq_16;
      automatic logic            mask_eq_17 =
        ~(io_in_b_bits_address[2]) & io_in_b_bits_address[1];
      automatic logic            mask_acc_17 = mask_acc_14 | mask_size_4 & mask_eq_17;
      automatic logic            mask_eq_18 =
        io_in_b_bits_address[2] & ~(io_in_b_bits_address[1]);
      automatic logic            mask_acc_18 = mask_acc_15 | mask_size_4 & mask_eq_18;
      automatic logic            mask_eq_19 =
        io_in_b_bits_address[2] & io_in_b_bits_address[1];
      automatic logic            mask_acc_19 = mask_acc_15 | mask_size_4 & mask_eq_19;
      automatic logic [7:0]      mask_1 =
        {mask_acc_19 | mask_eq_19 & io_in_b_bits_address[0],
         mask_acc_19 | mask_eq_19 & ~(io_in_b_bits_address[0]),
         mask_acc_18 | mask_eq_18 & io_in_b_bits_address[0],
         mask_acc_18 | mask_eq_18 & ~(io_in_b_bits_address[0]),
         mask_acc_17 | mask_eq_17 & io_in_b_bits_address[0],
         mask_acc_17 | mask_eq_17 & ~(io_in_b_bits_address[0]),
         mask_acc_16 | mask_eq_16 & io_in_b_bits_address[0],
         mask_acc_16 | mask_eq_16 & ~(io_in_b_bits_address[0])};
      automatic logic            _GEN_68 =
        io_in_b_valid & io_in_b_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_69 =
        {io_in_b_bits_source == 2'h2, io_in_b_bits_source == 2'h1} != io_in_b_bits_source;
      automatic logic            _GEN_70 = io_in_b_bits_mask != mask_1;
      automatic logic            _GEN_71 =
        io_in_b_valid & io_in_b_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_72 =
        io_in_b_valid & io_in_b_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_73 =
        io_in_b_valid & io_in_b_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_74 =
        io_in_b_valid & io_in_b_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_75 =
        io_in_b_valid & io_in_b_bits_opcode == 3'h3 & ~reset;
      automatic logic            _GEN_76 =
        io_in_b_valid & io_in_b_bits_opcode == 3'h5 & ~reset;
      automatic logic            _GEN_77 = io_in_c_bits_source == 2'h0;
      automatic logic            _GEN_78 = io_in_c_bits_source == 2'h1;
      automatic logic            _GEN_79 = io_in_c_bits_source == 2'h2;
      automatic logic            source_ok_2 = _GEN_77 | _GEN_78 | _GEN_79;
      automatic logic [11:0]     _GEN_80 = io_in_c_bits_address[11:0] & ~(_GEN_0[11:0]);
      automatic logic            _GEN_81 = io_in_c_bits_address[31:12] == 20'h0;
      automatic logic            _GEN_82 =
        {io_in_c_bits_address[31:14], ~(io_in_c_bits_address[13:12])} == 20'h0;
      automatic logic            _GEN_83 =
        {io_in_c_bits_address[31:17], ~(io_in_c_bits_address[16])} == 16'h0;
      automatic logic            _GEN_84 =
        {io_in_c_bits_address[31:26], io_in_c_bits_address[25:16] ^ 10'h200} == 16'h0;
      automatic logic            _GEN_85 =
        {io_in_c_bits_address[31:28], ~(io_in_c_bits_address[27:26])} == 6'h0;
      automatic logic            _GEN_86 =
        {io_in_c_bits_address[31], ~(io_in_c_bits_address[30:29])} == 3'h0;
      automatic logic            _GEN_87 = io_in_c_bits_address[31:28] == 4'h8;
      automatic logic            address_ok_1 =
        _GEN_81 | _GEN_82 | _GEN_83 | _GEN_84 | _GEN_85 | _GEN_86 | _GEN_87;
      automatic logic            _GEN_88 = io_in_c_bits_opcode == 3'h4;
      automatic logic            _GEN_89 = io_in_c_valid & _GEN_88 & ~reset;
      automatic logic            _GEN_90 = io_in_c_bits_size < 4'h3;
      automatic logic            _GEN_91 = io_in_c_bits_opcode == 3'h5;
      automatic logic            _GEN_92 = io_in_c_valid & _GEN_91 & ~reset;
      automatic logic            _GEN_93 = io_in_c_bits_size < 4'hD;
      automatic logic            _GEN_94 =
        _GEN_93 & (_GEN_77 | _GEN_78 | _GEN_79) & io_in_c_bits_size < 4'h7 & _GEN_87;
      automatic logic            _GEN_95 =
        io_in_c_valid & io_in_c_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_96 =
        _GEN_77 & io_in_c_bits_size == 4'h6 & _GEN_93
        & (_GEN_81 | _GEN_82 | _GEN_83 | _GEN_84 | _GEN_85 | _GEN_86 | _GEN_87);
      automatic logic            _GEN_97 =
        io_in_c_valid & (&io_in_c_bits_opcode) & ~reset;
      automatic logic            _GEN_98 =
        io_in_c_valid & io_in_c_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_99 =
        io_in_c_valid & io_in_c_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_100 =
        io_in_c_valid & io_in_c_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_101 = io_in_a_valid & (|a_first_counter) & ~reset;
      automatic logic            _GEN_102 = io_in_d_valid & (|d_first_counter) & ~reset;
      automatic logic            _GEN_103 = io_in_b_valid & (|b_first_counter) & ~reset;
      automatic logic            _GEN_104 = io_in_c_valid & (|c_first_counter) & ~reset;
      automatic logic [11:0]     _GEN_105 =
        inflight_opcodes >> {8'h0, io_in_d_bits_source, 2'h0};
      automatic logic [23:0]     _GEN_106 = {19'h0, io_in_d_bits_source, 3'h0};
      automatic logic            _GEN_107 = io_in_a_valid & a_first_1;
      automatic logic [2:0]      a_set_wo_ready = _GEN_107 ? _GEN_4[2:0] : 3'h0;
      automatic logic            _GEN_108 = io_in_d_valid & d_first_1;
      automatic logic            _GEN_109 = _GEN_108 & ~d_release_ack;
      automatic logic            _GEN_110 = io_in_a_bits_source == io_in_d_bits_source;
      automatic logic            same_cycle_resp = _GEN_107 & _GEN_110;
      automatic logic [2:0]      _GEN_111 = {1'h0, io_in_d_bits_source};
      automatic logic            _GEN_112 = _GEN_109 & same_cycle_resp & ~reset;
      automatic logic            _GEN_113 = _GEN_109 & ~same_cycle_resp & ~reset;
      automatic logic [7:0]      _GEN_114 = {4'h0, io_in_d_bits_size};
      automatic logic            _GEN_115 = io_in_c_valid & c_first_1 & _GEN_7;
      automatic logic [2:0]      c_set_wo_ready = _GEN_115 ? _GEN_8[2:0] : 3'h0;
      automatic logic            _GEN_116 = io_in_d_valid & d_first_2;
      automatic logic            _GEN_117 = _GEN_116 & d_release_ack;
      automatic logic            _GEN_118 = io_in_c_bits_source == io_in_d_bits_source;
      automatic logic            same_cycle_resp_1 = _GEN_115 & _GEN_118;
      automatic logic [2:0]      _GEN_119 = inflight >> io_in_a_bits_source;
      automatic logic [2:0]      _GEN_120 = inflight >> _GEN_111;
      automatic logic [23:0]     _GEN_121 = inflight_sizes >> _GEN_106;
      automatic logic [2:0]      _GEN_122 = inflight_1 >> io_in_c_bits_source;
      automatic logic [2:0]      _GEN_123 = inflight_1 >> _GEN_111;
      automatic logic [23:0]     _GEN_124 = inflight_sizes_1 >> _GEN_106;
      automatic logic [3:0]      _GEN_125 = inflight_2 >> _GEN_11;
      automatic logic [3:0]      _GEN_126 = _GEN_14 >> _GEN_13;
      if (_GEN_27 & ~_GEN_26) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & ~_GEN_35) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock carries invalid source ID (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & ~_GEN_21) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & (|_GEN_20)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & _GEN_36) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock carries invalid grow param (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & _GEN_37) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_38 & ~_GEN_26) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_38 & ~_GEN_35) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_38 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm carries invalid source ID (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_38 & ~_GEN_21) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_38 & (|_GEN_20)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_38 & _GEN_36) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm carries invalid grow param (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_38 & ~(|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_38 & _GEN_37) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_39 & ~_GEN_23) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_39
          & ~(_GEN_40 | _GEN_24
              & (_GEN_28 | _GEN_30 | _GEN_31 | _GEN_32 | _GEN_33 | _GEN_25))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_39 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get carries invalid source ID (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_39 & (|_GEN_20)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get address not aligned to size (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_39 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get carries invalid param (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_39 & _GEN_41) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get contains invalid mask (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & ~_GEN_42) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull carries invalid source ID (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & (|_GEN_20)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull address not aligned to size (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull carries invalid param (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_43 & _GEN_41) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull contains invalid mask (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_44 & ~_GEN_42) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_44 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_44 & (|_GEN_20)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial address not aligned to size (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_44 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial carries invalid param (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_44 & (|(io_in_a_bits_mask & ~mask))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial contains invalid mask (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_46 & ~_GEN_45) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_46 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_46 & (|_GEN_20)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_46 & io_in_a_bits_param > 3'h4) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_46 & _GEN_41) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_47 & ~_GEN_45) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_47 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical carries invalid source ID (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_47 & (|_GEN_20)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical address not aligned to size (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_47 & io_in_a_bits_param[2]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical carries invalid opcode param (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_47 & _GEN_41) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical contains invalid mask (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_48 & ~(_GEN_23 & _GEN_40)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_48 & ~source_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint carries invalid source ID (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_48 & (|_GEN_20)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint address not aligned to size (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_48 & (|(io_in_a_bits_param[2:1]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint carries invalid opcode param (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_48 & _GEN_41) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint contains invalid mask (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & ~reset & (&io_in_d_bits_opcode)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel has invalid opcode (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_49 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_49 & _GEN_50) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_49 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_49 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck is corrupt (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_49 & io_in_d_bits_denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck is denied (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_51 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid source ID (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_51 & _GEN_50) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant smaller than a beat (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_51 & (&io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid cap param (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_51 & _GEN_52) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries toN param (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_51 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant is corrupt (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_53 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid source ID (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_53 & _GEN_50) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData smaller than a beat (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_53 & (&io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid cap param (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_53 & _GEN_52) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries toN param (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_53 & ~_GEN_54) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData is denied but not corrupt (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_55 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_55 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck carries invalid param (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_55 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck is corrupt (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_56 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_56 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData carries invalid param (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_56 & ~_GEN_54) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData is denied but not corrupt (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_57 & ~source_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck carries invalid source ID (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_57 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck carries invalid param (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_57 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck is corrupt (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_b_valid & ~reset & (&io_in_b_bits_opcode)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel has invalid opcode (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_68
          & ~(io_in_b_bits_source == 2'h0 & io_in_b_bits_size == 4'h6
              & io_in_b_bits_size < 4'hD
              & (_GEN_58 | _GEN_59 | _GEN_60 | _GEN_61 | _GEN_62 | _GEN_63
                 | _GEN_64))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel carries Probe type which is unexpected using diplomatic parameters (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_68 & ~address_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel Probe carries unmanaged address (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_68 & _GEN_69) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel Probe carries source that is not first source (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_68 & (|_GEN_66)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel Probe address not aligned to size (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_68 & (&io_in_b_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel Probe carries invalid cap param (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_68 & _GEN_70) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel Probe contains invalid mask (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_68 & io_in_b_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel Probe is corrupt (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_71) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel carries Get type which is unexpected using diplomatic parameters (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_71 & ~address_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel Get carries unmanaged address (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_71 & _GEN_69) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel Get carries source that is not first source (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_71 & (|_GEN_66)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel Get address not aligned to size (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_71 & (|io_in_b_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel Get carries invalid param (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_71 & _GEN_70) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel Get contains invalid mask (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_71 & io_in_b_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel Get is corrupt (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_72) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel carries PutFull type which is unexpected using diplomatic parameters (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_72 & ~address_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel PutFull carries unmanaged address (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_72 & _GEN_69) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel PutFull carries source that is not first source (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_72 & (|_GEN_66)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel PutFull address not aligned to size (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_72 & (|io_in_b_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel PutFull carries invalid param (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_72 & _GEN_70) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel PutFull contains invalid mask (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_73) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_73 & ~address_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel PutPartial carries unmanaged address (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_73 & _GEN_69) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel PutPartial carries source that is not first source (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_73 & (|_GEN_66)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel PutPartial address not aligned to size (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_73 & (|io_in_b_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel PutPartial carries invalid param (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_73 & (|(io_in_b_bits_mask & ~mask_1))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel PutPartial contains invalid mask (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_74) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel carries Arithmetic type unsupported by master (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_74 & ~address_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel Arithmetic carries unmanaged address (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_74 & _GEN_69) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel Arithmetic carries source that is not first source (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_74 & (|_GEN_66)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel Arithmetic address not aligned to size (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_74 & _GEN_70) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel Arithmetic contains invalid mask (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_75) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel carries Logical type unsupported by client (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_75 & ~address_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel Logical carries unmanaged address (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_75 & _GEN_69) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel Logical carries source that is not first source (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_75 & (|_GEN_66)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel Logical address not aligned to size (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_75 & _GEN_70) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel Logical contains invalid mask (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_76) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel carries Hint type unsupported by client (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_76 & ~address_ok) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel Hint carries unmanaged address (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_76 & _GEN_69) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel Hint carries source that is not first source (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_76 & (|_GEN_66)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel Hint address not aligned to size (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_76 & _GEN_70) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel Hint contains invalid mask (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_76 & io_in_b_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel Hint is corrupt (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_89 & ~address_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ProbeAck carries unmanaged address (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_89 & ~source_ok_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ProbeAck carries invalid source ID (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_89 & _GEN_90) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ProbeAck smaller than a beat (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_89 & (|_GEN_80)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ProbeAck address not aligned to size (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_89 & (&(io_in_c_bits_param[2:1]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ProbeAck carries invalid report param (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_92 & ~address_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ProbeAckData carries unmanaged address (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_92 & ~source_ok_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ProbeAckData carries invalid source ID (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_92 & _GEN_90) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ProbeAckData smaller than a beat (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_92 & (|_GEN_80)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ProbeAckData address not aligned to size (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_92 & (&(io_in_c_bits_param[2:1]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ProbeAckData carries invalid report param (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_95 & ~_GEN_94) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel carries Release type unsupported by manager (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_95 & ~_GEN_96) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel carries Release from a client which does not support Probe (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_95 & ~source_ok_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel Release carries invalid source ID (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_95 & _GEN_90) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel Release smaller than a beat (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_95 & (|_GEN_80)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel Release address not aligned to size (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_95 & (&(io_in_c_bits_param[2:1]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel Release carries invalid report param (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_97 & ~_GEN_94) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel carries ReleaseData type unsupported by manager (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_97 & ~_GEN_96) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel carries Release from a client which does not support Probe (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_97 & ~source_ok_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ReleaseData carries invalid source ID (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_97 & _GEN_90) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ReleaseData smaller than a beat (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_97 & (|_GEN_80)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ReleaseData address not aligned to size (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_97 & (&(io_in_c_bits_param[2:1]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel ReleaseData carries invalid report param (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_98 & ~address_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel AccessAck carries unmanaged address (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_98 & ~source_ok_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel AccessAck carries invalid source ID (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_98 & (|_GEN_80)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel AccessAck address not aligned to size (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_98 & (|io_in_c_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel AccessAck carries invalid param (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_99 & ~address_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel AccessAckData carries unmanaged address (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_99 & ~source_ok_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel AccessAckData carries invalid source ID (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_99 & (|_GEN_80)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel AccessAckData address not aligned to size (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_99 & (|io_in_c_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel AccessAckData carries invalid param (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_100 & ~address_ok_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel HintAck carries unmanaged address (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_100 & ~source_ok_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel HintAck carries invalid source ID (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_100 & (|_GEN_80)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel HintAck address not aligned to size (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_100 & (|io_in_c_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel HintAck carries invalid param (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_101 & io_in_a_bits_opcode != opcode) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel opcode changed within multibeat operation (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_101 & io_in_a_bits_param != param) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel param changed within multibeat operation (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_101 & io_in_a_bits_size != size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel size changed within multibeat operation (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_101 & io_in_a_bits_source != source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel source changed within multibeat operation (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_101 & io_in_a_bits_address != address) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel address changed with multibeat operation (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_102 & io_in_d_bits_opcode != opcode_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel opcode changed within multibeat operation (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_102 & io_in_d_bits_param != param_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel param changed within multibeat operation (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_102 & io_in_d_bits_size != size_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel size changed within multibeat operation (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_102 & io_in_d_bits_source != source_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel source changed within multibeat operation (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_102 & io_in_d_bits_sink != sink) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel sink changed with multibeat operation (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_102 & io_in_d_bits_denied != denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel denied changed with multibeat operation (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_103 & io_in_b_bits_opcode != opcode_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel opcode changed within multibeat operation (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_103 & io_in_b_bits_param != param_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel param changed within multibeat operation (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_103 & io_in_b_bits_size != size_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel size changed within multibeat operation (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_103 & io_in_b_bits_source != source_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel source changed within multibeat operation (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_103 & io_in_b_bits_address != address_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'B' channel addresss changed with multibeat operation (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_104 & io_in_c_bits_opcode != opcode_3) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel opcode changed within multibeat operation (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_104 & io_in_c_bits_param != param_3) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel param changed within multibeat operation (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_104 & io_in_c_bits_size != size_3) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel size changed within multibeat operation (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_104 & io_in_c_bits_source != source_3) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel source changed within multibeat operation (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_104 & io_in_c_bits_address != address_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel address changed with multibeat operation (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_5 & ~reset & _GEN_119[0]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel re-used a source ID (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_109 & ~reset & ~(_GEN_120[0] | same_cycle_resp)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_112
          & ~(io_in_d_bits_opcode == _GEN_16[io_in_a_bits_opcode]
              | io_in_d_bits_opcode == _GEN_15[io_in_a_bits_opcode])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_112 & io_in_a_bits_size != io_in_d_bits_size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_113
          & ~(io_in_d_bits_opcode == _GEN_16[_GEN_105[3:1]]
              | io_in_d_bits_opcode == _GEN_15[_GEN_105[3:1]])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_113 & _GEN_114 != {1'h0, _GEN_121[7:1]}) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_108 & a_first_1 & io_in_a_valid & _GEN_110 & ~d_release_ack & ~reset
          & ~(~io_in_d_ready | io_in_a_ready)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ready check\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(a_set_wo_ready != (_GEN_109 ? _GEN_6[2:0] : 3'h0)
              | a_set_wo_ready == 3'h0)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' and 'D' concurrent, despite minlatency > 0 (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight == 3'h0 | _plusarg_reader_out == 32'h0
              | watchdog < _plusarg_reader_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_9 & ~reset & _GEN_122[0]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' channel re-used a source ID (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_117 & ~reset & ~(_GEN_123[0] | same_cycle_resp_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_117 & same_cycle_resp_1 & ~reset
          & io_in_d_bits_size != io_in_c_bits_size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_117 & ~same_cycle_resp_1 & ~reset
          & _GEN_114 != {1'h0, _GEN_124[7:1]}) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_116 & c_first_1 & io_in_c_valid & _GEN_118 & d_release_ack
          & ~(_GEN_88 | _GEN_91) & ~reset & ~(~io_in_d_ready | io_in_c_ready)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ready check\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if ((|c_set_wo_ready) & ~reset
          & c_set_wo_ready == (_GEN_117 ? _GEN_6[2:0] : 3'h0)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'C' and 'D' concurrent, despite minlatency > 0 (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight_1 == 3'h0 | _plusarg_reader_1_out == 32'h0
              | watchdog_1 < _plusarg_reader_1_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_10 & ~reset & _GEN_125[0]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel re-used a sink ID (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_12 & ~reset & ~(_GEN_126[0])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'E' channel acknowledged for nothing inflight (connected at src/main/scala/tilelink/CrossingHelper.scala:65:80)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    automatic logic b_first_done;
    b_first_done = io_in_b_ready & io_in_b_valid;
    if (reset) begin
      a_first_counter <= 9'h0;
      d_first_counter <= 9'h0;
      b_first_counter <= 9'h0;
      c_first_counter <= 9'h0;
      inflight <= 3'h0;
      inflight_opcodes <= 12'h0;
      inflight_sizes <= 24'h0;
      a_first_counter_1 <= 9'h0;
      d_first_counter_1 <= 9'h0;
      watchdog <= 32'h0;
      inflight_1 <= 3'h0;
      inflight_sizes_1 <= 24'h0;
      c_first_counter_1 <= 9'h0;
      d_first_counter_2 <= 9'h0;
      watchdog_1 <= 32'h0;
      inflight_2 <= 4'h0;
      d_first_counter_3 <= 9'h0;
    end
    else begin
      automatic logic        _GEN_127 = _GEN_2 & d_first_1 & ~d_release_ack;
      automatic logic [46:0] _GEN_128 = 47'hFF << {42'h0, io_in_d_bits_source, 3'h0};
      automatic logic        _GEN_129 = _GEN_2 & d_first_2 & d_release_ack;
      automatic logic [46:0] _GEN_130 = 47'hF << {43'h0, io_in_d_bits_source, 2'h0};
      automatic logic [34:0] _GEN_131 =
        {31'h0, _GEN_5 ? {io_in_a_bits_opcode, 1'h1} : 4'h0}
        << {31'h0, io_in_a_bits_source, 2'h0};
      automatic logic [35:0] _GEN_132 =
        {31'h0, _GEN_5 ? {io_in_a_bits_size, 1'h1} : 5'h0}
        << {31'h0, io_in_a_bits_source, 3'h0};
      automatic logic [35:0] _GEN_133 =
        {31'h0, _GEN_9 ? {io_in_c_bits_size, 1'h1} : 5'h0}
        << {31'h0, io_in_c_bits_source, 3'h0};
      if (_GEN_1) begin
        if (|a_first_counter)
          a_first_counter <= a_first_counter - 9'h1;
        else if (io_in_a_bits_opcode[2])
          a_first_counter <= 9'h0;
        else
          a_first_counter <= ~(_GEN[11:3]);
        if (a_first_1) begin
          if (io_in_a_bits_opcode[2])
            a_first_counter_1 <= 9'h0;
          else
            a_first_counter_1 <= ~(_GEN[11:3]);
        end
        else
          a_first_counter_1 <= a_first_counter_1 - 9'h1;
      end
      if (_GEN_2) begin
        automatic logic [26:0] _GEN_134 = 27'hFFF << io_in_d_bits_size;
        if (|d_first_counter)
          d_first_counter <= d_first_counter - 9'h1;
        else if (io_in_d_bits_opcode[0])
          d_first_counter <= ~(_GEN_134[11:3]);
        else
          d_first_counter <= 9'h0;
        if (d_first_1) begin
          if (io_in_d_bits_opcode[0])
            d_first_counter_1 <= ~(_GEN_134[11:3]);
          else
            d_first_counter_1 <= 9'h0;
        end
        else
          d_first_counter_1 <= d_first_counter_1 - 9'h1;
        if (d_first_2) begin
          if (io_in_d_bits_opcode[0])
            d_first_counter_2 <= ~(_GEN_134[11:3]);
          else
            d_first_counter_2 <= 9'h0;
        end
        else
          d_first_counter_2 <= d_first_counter_2 - 9'h1;
        if (d_first_3) begin
          if (io_in_d_bits_opcode[0])
            d_first_counter_3 <= ~(_GEN_134[11:3]);
          else
            d_first_counter_3 <= 9'h0;
        end
        else
          d_first_counter_3 <= d_first_counter_3 - 9'h1;
      end
      if (b_first_done) begin
        if (|b_first_counter)
          b_first_counter <= b_first_counter - 9'h1;
        else
          b_first_counter <= 9'h0;
      end
      if (_GEN_3) begin
        if (|c_first_counter)
          c_first_counter <= c_first_counter - 9'h1;
        else if (io_in_c_bits_opcode[0])
          c_first_counter <= ~(_GEN_0[11:3]);
        else
          c_first_counter <= 9'h0;
        if (c_first_1) begin
          if (io_in_c_bits_opcode[0])
            c_first_counter_1 <= ~(_GEN_0[11:3]);
          else
            c_first_counter_1 <= 9'h0;
        end
        else
          c_first_counter_1 <= c_first_counter_1 - 9'h1;
      end
      inflight <=
        (inflight | (_GEN_5 ? _GEN_4[2:0] : 3'h0)) & ~(_GEN_127 ? _GEN_6[2:0] : 3'h0);
      inflight_opcodes <=
        (inflight_opcodes | (_GEN_5 ? _GEN_131[11:0] : 12'h0))
        & ~(_GEN_127 ? _GEN_130[11:0] : 12'h0);
      inflight_sizes <=
        (inflight_sizes | (_GEN_5 ? _GEN_132[23:0] : 24'h0))
        & ~(_GEN_127 ? _GEN_128[23:0] : 24'h0);
      if (_GEN_1 | _GEN_2)
        watchdog <= 32'h0;
      else
        watchdog <= watchdog + 32'h1;
      inflight_1 <=
        (inflight_1 | (_GEN_9 ? _GEN_8[2:0] : 3'h0)) & ~(_GEN_129 ? _GEN_6[2:0] : 3'h0);
      inflight_sizes_1 <=
        (inflight_sizes_1 | (_GEN_9 ? _GEN_133[23:0] : 24'h0))
        & ~(_GEN_129 ? _GEN_128[23:0] : 24'h0);
      if (_GEN_3 | _GEN_2)
        watchdog_1 <= 32'h0;
      else
        watchdog_1 <= watchdog_1 + 32'h1;
      inflight_2 <= _GEN_14 & ~(_GEN_12 ? 4'h1 << _GEN_13 : 4'h0);
    end
    if (_GEN_1 & ~(|a_first_counter)) begin
      opcode <= io_in_a_bits_opcode;
      param <= io_in_a_bits_param;
      size <= io_in_a_bits_size;
      source <= io_in_a_bits_source;
      address <= io_in_a_bits_address;
    end
    if (_GEN_2 & ~(|d_first_counter)) begin
      opcode_1 <= io_in_d_bits_opcode;
      param_1 <= io_in_d_bits_param;
      size_1 <= io_in_d_bits_size;
      source_1 <= io_in_d_bits_source;
      sink <= io_in_d_bits_sink;
      denied <= io_in_d_bits_denied;
    end
    if (b_first_done & ~(|b_first_counter)) begin
      opcode_2 <= io_in_b_bits_opcode;
      param_2 <= io_in_b_bits_param;
      size_2 <= io_in_b_bits_size;
      source_2 <= io_in_b_bits_source;
      address_1 <= io_in_b_bits_address;
    end
    if (_GEN_3 & ~(|c_first_counter)) begin
      opcode_3 <= io_in_c_bits_opcode;
      param_3 <= io_in_c_bits_param;
      size_3 <= io_in_c_bits_size;
      source_3 <= io_in_c_bits_source;
      address_2 <= io_in_c_bits_address;
    end
  end // always @(posedge)
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader (
    .out (_plusarg_reader_out)
  );
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader_1 (
    .out (_plusarg_reader_1_out)
  );
endmodule

module Queue2_TLBundleA_a32d64s2k2z4c(
  input         clock,
                reset,
                io_enq_valid,
  input  [2:0]  io_enq_bits_opcode,
                io_enq_bits_param,
  input  [3:0]  io_enq_bits_size,
  input  [1:0]  io_enq_bits_source,
  input  [31:0] io_enq_bits_address,
  input  [7:0]  io_enq_bits_mask,
  input  [63:0] io_enq_bits_data,
  input         io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
  output [2:0]  io_deq_bits_opcode,
                io_deq_bits_param,
  output [3:0]  io_deq_bits_size,
  output [1:0]  io_deq_bits_source,
  output [31:0] io_deq_bits_address,
  output [7:0]  io_deq_bits_mask,
  output [63:0] io_deq_bits_data,
  output        io_deq_bits_corrupt
);

  wire [116:0] _ram_ext_R0_data;
  reg          wrap;
  reg          wrap_1;
  reg          maybe_full;
  wire         ptr_match = wrap == wrap_1;
  wire         empty = ptr_match & ~maybe_full;
  wire         full = ptr_match & maybe_full;
  wire         do_enq = ~full & io_enq_valid;
  always @(posedge clock) begin
    if (reset) begin
      wrap <= 1'h0;
      wrap_1 <= 1'h0;
      maybe_full <= 1'h0;
    end
    else begin
      automatic logic do_deq = io_deq_ready & ~empty;
      if (do_enq)
        wrap <= wrap - 1'h1;
      if (do_deq)
        wrap_1 <= wrap_1 - 1'h1;
      if (do_enq != do_deq)
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_combMem_17 ram_ext (
    .R0_addr (wrap_1),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (wrap),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data
      ({1'h0,
        io_enq_bits_data,
        io_enq_bits_mask,
        io_enq_bits_address,
        io_enq_bits_source,
        io_enq_bits_size,
        io_enq_bits_param,
        io_enq_bits_opcode}),
    .R0_data (_ram_ext_R0_data)
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
  assign io_deq_bits_opcode = _ram_ext_R0_data[2:0];
  assign io_deq_bits_param = _ram_ext_R0_data[5:3];
  assign io_deq_bits_size = _ram_ext_R0_data[9:6];
  assign io_deq_bits_source = _ram_ext_R0_data[11:10];
  assign io_deq_bits_address = _ram_ext_R0_data[43:12];
  assign io_deq_bits_mask = _ram_ext_R0_data[51:44];
  assign io_deq_bits_data = _ram_ext_R0_data[115:52];
  assign io_deq_bits_corrupt = _ram_ext_R0_data[116];
endmodule

module Queue2_TLBundleD_a32d64s2k2z4c(
  input         clock,
                reset,
                io_enq_valid,
  input  [2:0]  io_enq_bits_opcode,
  input  [1:0]  io_enq_bits_param,
  input  [3:0]  io_enq_bits_size,
  input  [1:0]  io_enq_bits_source,
                io_enq_bits_sink,
  input         io_enq_bits_denied,
  input  [63:0] io_enq_bits_data,
  input         io_enq_bits_corrupt,
                io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
  output [2:0]  io_deq_bits_opcode,
  output [1:0]  io_deq_bits_param,
  output [3:0]  io_deq_bits_size,
  output [1:0]  io_deq_bits_source,
                io_deq_bits_sink,
  output        io_deq_bits_denied,
  output [63:0] io_deq_bits_data,
  output        io_deq_bits_corrupt
);

  wire [78:0] _ram_ext_R0_data;
  reg         wrap;
  reg         wrap_1;
  reg         maybe_full;
  wire        ptr_match = wrap == wrap_1;
  wire        empty = ptr_match & ~maybe_full;
  wire        full = ptr_match & maybe_full;
  wire        do_enq = ~full & io_enq_valid;
  always @(posedge clock) begin
    if (reset) begin
      wrap <= 1'h0;
      wrap_1 <= 1'h0;
      maybe_full <= 1'h0;
    end
    else begin
      automatic logic do_deq = io_deq_ready & ~empty;
      if (do_enq)
        wrap <= wrap - 1'h1;
      if (do_deq)
        wrap_1 <= wrap_1 - 1'h1;
      if (do_enq != do_deq)
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_combMem_11 ram_ext (
    .R0_addr (wrap_1),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (wrap),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data
      ({io_enq_bits_corrupt,
        io_enq_bits_data,
        io_enq_bits_denied,
        io_enq_bits_sink,
        io_enq_bits_source,
        io_enq_bits_size,
        io_enq_bits_param,
        io_enq_bits_opcode}),
    .R0_data (_ram_ext_R0_data)
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
  assign io_deq_bits_opcode = _ram_ext_R0_data[2:0];
  assign io_deq_bits_param = _ram_ext_R0_data[4:3];
  assign io_deq_bits_size = _ram_ext_R0_data[8:5];
  assign io_deq_bits_source = _ram_ext_R0_data[10:9];
  assign io_deq_bits_sink = _ram_ext_R0_data[12:11];
  assign io_deq_bits_denied = _ram_ext_R0_data[13];
  assign io_deq_bits_data = _ram_ext_R0_data[77:14];
  assign io_deq_bits_corrupt = _ram_ext_R0_data[78];
endmodule

module Queue2_TLBundleB_a32d64s2k2z4c(
  input         clock,
                reset,
                io_enq_valid,
  input  [1:0]  io_enq_bits_param,
  input  [31:0] io_enq_bits_address,
  input         io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
  output [2:0]  io_deq_bits_opcode,
  output [1:0]  io_deq_bits_param,
  output [3:0]  io_deq_bits_size,
  output [1:0]  io_deq_bits_source,
  output [31:0] io_deq_bits_address,
  output [7:0]  io_deq_bits_mask,
  output        io_deq_bits_corrupt
);

  wire [115:0] _ram_ext_R0_data;
  reg          wrap;
  reg          wrap_1;
  reg          maybe_full;
  wire         ptr_match = wrap == wrap_1;
  wire         empty = ptr_match & ~maybe_full;
  wire         full = ptr_match & maybe_full;
  wire         do_enq = ~full & io_enq_valid;
  always @(posedge clock) begin
    if (reset) begin
      wrap <= 1'h0;
      wrap_1 <= 1'h0;
      maybe_full <= 1'h0;
    end
    else begin
      automatic logic do_deq = io_deq_ready & ~empty;
      if (do_enq)
        wrap <= wrap - 1'h1;
      if (do_deq)
        wrap_1 <= wrap_1 - 1'h1;
      if (do_enq != do_deq)
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_combMem_16 ram_ext (
    .R0_addr (wrap_1),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (wrap),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data ({73'hFF, io_enq_bits_address, 6'h6, io_enq_bits_param, 3'h6}),
    .R0_data (_ram_ext_R0_data)
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
  assign io_deq_bits_opcode = _ram_ext_R0_data[2:0];
  assign io_deq_bits_param = _ram_ext_R0_data[4:3];
  assign io_deq_bits_size = _ram_ext_R0_data[8:5];
  assign io_deq_bits_source = _ram_ext_R0_data[10:9];
  assign io_deq_bits_address = _ram_ext_R0_data[42:11];
  assign io_deq_bits_mask = _ram_ext_R0_data[50:43];
  assign io_deq_bits_corrupt = _ram_ext_R0_data[115];
endmodule

module Queue2_TLBundleC_a32d64s2k2z4c(
  input         clock,
                reset,
                io_enq_valid,
  input  [2:0]  io_enq_bits_opcode,
                io_enq_bits_param,
  input  [3:0]  io_enq_bits_size,
  input  [1:0]  io_enq_bits_source,
  input  [31:0] io_enq_bits_address,
  input  [63:0] io_enq_bits_data,
  input         io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
  output [2:0]  io_deq_bits_opcode,
                io_deq_bits_param,
  output [3:0]  io_deq_bits_size,
  output [1:0]  io_deq_bits_source,
  output [31:0] io_deq_bits_address,
  output [63:0] io_deq_bits_data,
  output        io_deq_bits_corrupt
);

  wire [108:0] _ram_ext_R0_data;
  reg          wrap;
  reg          wrap_1;
  reg          maybe_full;
  wire         ptr_match = wrap == wrap_1;
  wire         empty = ptr_match & ~maybe_full;
  wire         full = ptr_match & maybe_full;
  wire         do_enq = ~full & io_enq_valid;
  always @(posedge clock) begin
    if (reset) begin
      wrap <= 1'h0;
      wrap_1 <= 1'h0;
      maybe_full <= 1'h0;
    end
    else begin
      automatic logic do_deq = io_deq_ready & ~empty;
      if (do_enq)
        wrap <= wrap - 1'h1;
      if (do_deq)
        wrap_1 <= wrap_1 - 1'h1;
      if (do_enq != do_deq)
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_combMem_15 ram_ext (
    .R0_addr (wrap_1),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (wrap),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data
      ({1'h0,
        io_enq_bits_data,
        io_enq_bits_address,
        io_enq_bits_source,
        io_enq_bits_size,
        io_enq_bits_param,
        io_enq_bits_opcode}),
    .R0_data (_ram_ext_R0_data)
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
  assign io_deq_bits_opcode = _ram_ext_R0_data[2:0];
  assign io_deq_bits_param = _ram_ext_R0_data[5:3];
  assign io_deq_bits_size = _ram_ext_R0_data[9:6];
  assign io_deq_bits_source = _ram_ext_R0_data[11:10];
  assign io_deq_bits_address = _ram_ext_R0_data[43:12];
  assign io_deq_bits_data = _ram_ext_R0_data[107:44];
  assign io_deq_bits_corrupt = _ram_ext_R0_data[108];
endmodule

module Queue2_TLBundleE_a32d64s2k2z4c(
  input        clock,
               reset,
               io_enq_valid,
  input  [1:0] io_enq_bits_sink,
  output       io_enq_ready,
               io_deq_valid,
  output [1:0] io_deq_bits_sink
);

  reg  wrap;
  reg  wrap_1;
  reg  maybe_full;
  wire ptr_match = wrap == wrap_1;
  wire empty = ptr_match & ~maybe_full;
  wire full = ptr_match & maybe_full;
  wire do_enq = ~full & io_enq_valid;
  always @(posedge clock) begin
    if (reset) begin
      wrap <= 1'h0;
      wrap_1 <= 1'h0;
      maybe_full <= 1'h0;
    end
    else begin
      if (do_enq)
        wrap <= wrap - 1'h1;
      if (~empty)
        wrap_1 <= wrap_1 - 1'h1;
      if (do_enq != ~empty)
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_sink_combMem ram_sink_ext (
    .R0_addr (wrap_1),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (wrap),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_sink),
    .R0_data (io_deq_bits_sink)
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
endmodule

module TLBuffer_a32d64s2k2z4c_1(
  input         clock,
                reset,
                auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
                auto_in_a_bits_param,
  input  [3:0]  auto_in_a_bits_size,
  input  [1:0]  auto_in_a_bits_source,
  input  [31:0] auto_in_a_bits_address,
  input  [7:0]  auto_in_a_bits_mask,
  input  [63:0] auto_in_a_bits_data,
  input         auto_in_b_ready,
                auto_in_c_valid,
  input  [2:0]  auto_in_c_bits_opcode,
                auto_in_c_bits_param,
  input  [3:0]  auto_in_c_bits_size,
  input  [1:0]  auto_in_c_bits_source,
  input  [31:0] auto_in_c_bits_address,
  input  [63:0] auto_in_c_bits_data,
  input         auto_in_d_ready,
                auto_in_e_valid,
  input  [1:0]  auto_in_e_bits_sink,
  input         auto_out_a_ready,
                auto_out_b_valid,
  input  [1:0]  auto_out_b_bits_param,
  input  [31:0] auto_out_b_bits_address,
  input         auto_out_c_ready,
                auto_out_d_valid,
  input  [2:0]  auto_out_d_bits_opcode,
  input  [1:0]  auto_out_d_bits_param,
  input  [3:0]  auto_out_d_bits_size,
  input  [1:0]  auto_out_d_bits_source,
                auto_out_d_bits_sink,
  input         auto_out_d_bits_denied,
  input  [63:0] auto_out_d_bits_data,
  input         auto_out_d_bits_corrupt,
  output        auto_in_a_ready,
                auto_in_b_valid,
  output [2:0]  auto_in_b_bits_opcode,
  output [1:0]  auto_in_b_bits_param,
  output [3:0]  auto_in_b_bits_size,
  output [1:0]  auto_in_b_bits_source,
  output [31:0] auto_in_b_bits_address,
  output [7:0]  auto_in_b_bits_mask,
  output        auto_in_b_bits_corrupt,
                auto_in_c_ready,
                auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
  output [1:0]  auto_in_d_bits_param,
  output [3:0]  auto_in_d_bits_size,
  output [1:0]  auto_in_d_bits_source,
                auto_in_d_bits_sink,
  output        auto_in_d_bits_denied,
  output [63:0] auto_in_d_bits_data,
  output        auto_in_d_bits_corrupt,
                auto_in_e_ready,
                auto_out_a_valid,
  output [2:0]  auto_out_a_bits_opcode,
                auto_out_a_bits_param,
  output [3:0]  auto_out_a_bits_size,
  output [1:0]  auto_out_a_bits_source,
  output [31:0] auto_out_a_bits_address,
  output [7:0]  auto_out_a_bits_mask,
  output [63:0] auto_out_a_bits_data,
  output        auto_out_a_bits_corrupt,
                auto_out_b_ready,
                auto_out_c_valid,
  output [2:0]  auto_out_c_bits_opcode,
                auto_out_c_bits_param,
  output [3:0]  auto_out_c_bits_size,
  output [1:0]  auto_out_c_bits_source,
  output [31:0] auto_out_c_bits_address,
  output [63:0] auto_out_c_bits_data,
  output        auto_out_c_bits_corrupt,
                auto_out_d_ready,
                auto_out_e_valid,
  output [1:0]  auto_out_e_bits_sink
);

  wire        _nodeOut_e_q_io_enq_ready;
  wire        _nodeOut_c_q_io_enq_ready;
  wire        _nodeIn_b_q_io_deq_valid;
  wire [2:0]  _nodeIn_b_q_io_deq_bits_opcode;
  wire [1:0]  _nodeIn_b_q_io_deq_bits_param;
  wire [3:0]  _nodeIn_b_q_io_deq_bits_size;
  wire [1:0]  _nodeIn_b_q_io_deq_bits_source;
  wire [31:0] _nodeIn_b_q_io_deq_bits_address;
  wire [7:0]  _nodeIn_b_q_io_deq_bits_mask;
  wire        _nodeIn_b_q_io_deq_bits_corrupt;
  wire        _nodeIn_d_q_io_deq_valid;
  wire [2:0]  _nodeIn_d_q_io_deq_bits_opcode;
  wire [1:0]  _nodeIn_d_q_io_deq_bits_param;
  wire [3:0]  _nodeIn_d_q_io_deq_bits_size;
  wire [1:0]  _nodeIn_d_q_io_deq_bits_source;
  wire [1:0]  _nodeIn_d_q_io_deq_bits_sink;
  wire        _nodeIn_d_q_io_deq_bits_denied;
  wire        _nodeIn_d_q_io_deq_bits_corrupt;
  wire        _nodeOut_a_q_io_enq_ready;
  TLMonitor_24 monitor (
    .clock                (clock),
    .reset                (reset),
    .io_in_a_ready        (_nodeOut_a_q_io_enq_ready),
    .io_in_a_valid        (auto_in_a_valid),
    .io_in_a_bits_opcode  (auto_in_a_bits_opcode),
    .io_in_a_bits_param   (auto_in_a_bits_param),
    .io_in_a_bits_size    (auto_in_a_bits_size),
    .io_in_a_bits_source  (auto_in_a_bits_source),
    .io_in_a_bits_address (auto_in_a_bits_address),
    .io_in_a_bits_mask    (auto_in_a_bits_mask),
    .io_in_b_ready        (auto_in_b_ready),
    .io_in_b_valid        (_nodeIn_b_q_io_deq_valid),
    .io_in_b_bits_opcode  (_nodeIn_b_q_io_deq_bits_opcode),
    .io_in_b_bits_param   (_nodeIn_b_q_io_deq_bits_param),
    .io_in_b_bits_size    (_nodeIn_b_q_io_deq_bits_size),
    .io_in_b_bits_source  (_nodeIn_b_q_io_deq_bits_source),
    .io_in_b_bits_address (_nodeIn_b_q_io_deq_bits_address),
    .io_in_b_bits_mask    (_nodeIn_b_q_io_deq_bits_mask),
    .io_in_b_bits_corrupt (_nodeIn_b_q_io_deq_bits_corrupt),
    .io_in_c_ready        (_nodeOut_c_q_io_enq_ready),
    .io_in_c_valid        (auto_in_c_valid),
    .io_in_c_bits_opcode  (auto_in_c_bits_opcode),
    .io_in_c_bits_param   (auto_in_c_bits_param),
    .io_in_c_bits_size    (auto_in_c_bits_size),
    .io_in_c_bits_source  (auto_in_c_bits_source),
    .io_in_c_bits_address (auto_in_c_bits_address),
    .io_in_d_ready        (auto_in_d_ready),
    .io_in_d_valid        (_nodeIn_d_q_io_deq_valid),
    .io_in_d_bits_opcode  (_nodeIn_d_q_io_deq_bits_opcode),
    .io_in_d_bits_param   (_nodeIn_d_q_io_deq_bits_param),
    .io_in_d_bits_size    (_nodeIn_d_q_io_deq_bits_size),
    .io_in_d_bits_source  (_nodeIn_d_q_io_deq_bits_source),
    .io_in_d_bits_sink    (_nodeIn_d_q_io_deq_bits_sink),
    .io_in_d_bits_denied  (_nodeIn_d_q_io_deq_bits_denied),
    .io_in_d_bits_corrupt (_nodeIn_d_q_io_deq_bits_corrupt),
    .io_in_e_ready        (_nodeOut_e_q_io_enq_ready),
    .io_in_e_valid        (auto_in_e_valid),
    .io_in_e_bits_sink    (auto_in_e_bits_sink)
  );
  Queue2_TLBundleA_a32d64s2k2z4c nodeOut_a_q (
    .clock               (clock),
    .reset               (reset),
    .io_enq_valid        (auto_in_a_valid),
    .io_enq_bits_opcode  (auto_in_a_bits_opcode),
    .io_enq_bits_param   (auto_in_a_bits_param),
    .io_enq_bits_size    (auto_in_a_bits_size),
    .io_enq_bits_source  (auto_in_a_bits_source),
    .io_enq_bits_address (auto_in_a_bits_address),
    .io_enq_bits_mask    (auto_in_a_bits_mask),
    .io_enq_bits_data    (auto_in_a_bits_data),
    .io_deq_ready        (auto_out_a_ready),
    .io_enq_ready        (_nodeOut_a_q_io_enq_ready),
    .io_deq_valid        (auto_out_a_valid),
    .io_deq_bits_opcode  (auto_out_a_bits_opcode),
    .io_deq_bits_param   (auto_out_a_bits_param),
    .io_deq_bits_size    (auto_out_a_bits_size),
    .io_deq_bits_source  (auto_out_a_bits_source),
    .io_deq_bits_address (auto_out_a_bits_address),
    .io_deq_bits_mask    (auto_out_a_bits_mask),
    .io_deq_bits_data    (auto_out_a_bits_data),
    .io_deq_bits_corrupt (auto_out_a_bits_corrupt)
  );
  Queue2_TLBundleD_a32d64s2k2z4c nodeIn_d_q (
    .clock               (clock),
    .reset               (reset),
    .io_enq_valid        (auto_out_d_valid),
    .io_enq_bits_opcode  (auto_out_d_bits_opcode),
    .io_enq_bits_param   (auto_out_d_bits_param),
    .io_enq_bits_size    (auto_out_d_bits_size),
    .io_enq_bits_source  (auto_out_d_bits_source),
    .io_enq_bits_sink    (auto_out_d_bits_sink),
    .io_enq_bits_denied  (auto_out_d_bits_denied),
    .io_enq_bits_data    (auto_out_d_bits_data),
    .io_enq_bits_corrupt (auto_out_d_bits_corrupt),
    .io_deq_ready        (auto_in_d_ready),
    .io_enq_ready        (auto_out_d_ready),
    .io_deq_valid        (_nodeIn_d_q_io_deq_valid),
    .io_deq_bits_opcode  (_nodeIn_d_q_io_deq_bits_opcode),
    .io_deq_bits_param   (_nodeIn_d_q_io_deq_bits_param),
    .io_deq_bits_size    (_nodeIn_d_q_io_deq_bits_size),
    .io_deq_bits_source  (_nodeIn_d_q_io_deq_bits_source),
    .io_deq_bits_sink    (_nodeIn_d_q_io_deq_bits_sink),
    .io_deq_bits_denied  (_nodeIn_d_q_io_deq_bits_denied),
    .io_deq_bits_data    (auto_in_d_bits_data),
    .io_deq_bits_corrupt (_nodeIn_d_q_io_deq_bits_corrupt)
  );
  Queue2_TLBundleB_a32d64s2k2z4c nodeIn_b_q (
    .clock               (clock),
    .reset               (reset),
    .io_enq_valid        (auto_out_b_valid),
    .io_enq_bits_param   (auto_out_b_bits_param),
    .io_enq_bits_address (auto_out_b_bits_address),
    .io_deq_ready        (auto_in_b_ready),
    .io_enq_ready        (auto_out_b_ready),
    .io_deq_valid        (_nodeIn_b_q_io_deq_valid),
    .io_deq_bits_opcode  (_nodeIn_b_q_io_deq_bits_opcode),
    .io_deq_bits_param   (_nodeIn_b_q_io_deq_bits_param),
    .io_deq_bits_size    (_nodeIn_b_q_io_deq_bits_size),
    .io_deq_bits_source  (_nodeIn_b_q_io_deq_bits_source),
    .io_deq_bits_address (_nodeIn_b_q_io_deq_bits_address),
    .io_deq_bits_mask    (_nodeIn_b_q_io_deq_bits_mask),
    .io_deq_bits_corrupt (_nodeIn_b_q_io_deq_bits_corrupt)
  );
  Queue2_TLBundleC_a32d64s2k2z4c nodeOut_c_q (
    .clock               (clock),
    .reset               (reset),
    .io_enq_valid        (auto_in_c_valid),
    .io_enq_bits_opcode  (auto_in_c_bits_opcode),
    .io_enq_bits_param   (auto_in_c_bits_param),
    .io_enq_bits_size    (auto_in_c_bits_size),
    .io_enq_bits_source  (auto_in_c_bits_source),
    .io_enq_bits_address (auto_in_c_bits_address),
    .io_enq_bits_data    (auto_in_c_bits_data),
    .io_deq_ready        (auto_out_c_ready),
    .io_enq_ready        (_nodeOut_c_q_io_enq_ready),
    .io_deq_valid        (auto_out_c_valid),
    .io_deq_bits_opcode  (auto_out_c_bits_opcode),
    .io_deq_bits_param   (auto_out_c_bits_param),
    .io_deq_bits_size    (auto_out_c_bits_size),
    .io_deq_bits_source  (auto_out_c_bits_source),
    .io_deq_bits_address (auto_out_c_bits_address),
    .io_deq_bits_data    (auto_out_c_bits_data),
    .io_deq_bits_corrupt (auto_out_c_bits_corrupt)
  );
  Queue2_TLBundleE_a32d64s2k2z4c nodeOut_e_q (
    .clock            (clock),
    .reset            (reset),
    .io_enq_valid     (auto_in_e_valid),
    .io_enq_bits_sink (auto_in_e_bits_sink),
    .io_enq_ready     (_nodeOut_e_q_io_enq_ready),
    .io_deq_valid     (auto_out_e_valid),
    .io_deq_bits_sink (auto_out_e_bits_sink)
  );
  assign auto_in_a_ready = _nodeOut_a_q_io_enq_ready;
  assign auto_in_b_valid = _nodeIn_b_q_io_deq_valid;
  assign auto_in_b_bits_opcode = _nodeIn_b_q_io_deq_bits_opcode;
  assign auto_in_b_bits_param = _nodeIn_b_q_io_deq_bits_param;
  assign auto_in_b_bits_size = _nodeIn_b_q_io_deq_bits_size;
  assign auto_in_b_bits_source = _nodeIn_b_q_io_deq_bits_source;
  assign auto_in_b_bits_address = _nodeIn_b_q_io_deq_bits_address;
  assign auto_in_b_bits_mask = _nodeIn_b_q_io_deq_bits_mask;
  assign auto_in_b_bits_corrupt = _nodeIn_b_q_io_deq_bits_corrupt;
  assign auto_in_c_ready = _nodeOut_c_q_io_enq_ready;
  assign auto_in_d_valid = _nodeIn_d_q_io_deq_valid;
  assign auto_in_d_bits_opcode = _nodeIn_d_q_io_deq_bits_opcode;
  assign auto_in_d_bits_param = _nodeIn_d_q_io_deq_bits_param;
  assign auto_in_d_bits_size = _nodeIn_d_q_io_deq_bits_size;
  assign auto_in_d_bits_source = _nodeIn_d_q_io_deq_bits_source;
  assign auto_in_d_bits_sink = _nodeIn_d_q_io_deq_bits_sink;
  assign auto_in_d_bits_denied = _nodeIn_d_q_io_deq_bits_denied;
  assign auto_in_d_bits_corrupt = _nodeIn_d_q_io_deq_bits_corrupt;
  assign auto_in_e_ready = _nodeOut_e_q_io_enq_ready;
endmodule

module SynchronizerShiftReg_w1_d3(
  input  clock,
         io_d,
  output io_q
);

  NonSyncResetSynchronizerPrimitiveShiftReg_d3 output_chain (
    .clock (clock),
    .io_d  (io_d),
    .io_q  (io_q)
  );
endmodule

module IntSyncAsyncCrossingSink_n1x1(
  input  clock,
         auto_in_sync_0,
  output auto_out_0
);

  SynchronizerShiftReg_w1_d3 chain (
    .clock (clock),
    .io_d  (auto_in_sync_0),
    .io_q  (auto_out_0)
  );
endmodule

module IntSyncSyncCrossingSink_n1x2(
  input  auto_in_sync_0,
         auto_in_sync_1,
  output auto_out_0,
         auto_out_1
);

  assign auto_out_0 = auto_in_sync_0;
  assign auto_out_1 = auto_in_sync_1;
endmodule

module IntSyncSyncCrossingSink_n1x1(
  input  auto_in_sync_0,
  output auto_out_0
);

  assign auto_out_0 = auto_in_sync_0;
endmodule

module AsyncResetRegVec_w1_i0(
  input  clock,
         reset,
         io_d,
  output io_q
);

  reg reg_0;
  always @(posedge clock or posedge reset) begin
    if (reset)
      reg_0 <= 1'h0;
    else
      reg_0 <= io_d;
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin
      if (reset)
        reg_0 = 1'h0;
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_q = reg_0;
endmodule

module IntSyncCrossingSource_n1x1(
  input  clock,
         reset,
         auto_in_0,
  output auto_out_sync_0
);

  AsyncResetRegVec_w1_i0 reg_0 (
    .clock (clock),
    .reset (reset),
    .io_d  (auto_in_0),
    .io_q  (auto_out_sync_0)
  );
endmodule

module TilePRCIDomain(
  input         auto_intsink_in_sync_0,
                auto_element_reset_domain_rockettile_hartid_in,
                auto_int_in_clock_xing_in_2_sync_0,
                auto_int_in_clock_xing_in_1_sync_0,
                auto_int_in_clock_xing_in_0_sync_0,
                auto_int_in_clock_xing_in_0_sync_1,
                auto_tl_master_clock_xing_out_a_ready,
                auto_tl_master_clock_xing_out_b_valid,
  input  [1:0]  auto_tl_master_clock_xing_out_b_bits_param,
  input  [31:0] auto_tl_master_clock_xing_out_b_bits_address,
  input         auto_tl_master_clock_xing_out_c_ready,
                auto_tl_master_clock_xing_out_d_valid,
  input  [2:0]  auto_tl_master_clock_xing_out_d_bits_opcode,
  input  [1:0]  auto_tl_master_clock_xing_out_d_bits_param,
  input  [3:0]  auto_tl_master_clock_xing_out_d_bits_size,
  input  [1:0]  auto_tl_master_clock_xing_out_d_bits_source,
                auto_tl_master_clock_xing_out_d_bits_sink,
  input         auto_tl_master_clock_xing_out_d_bits_denied,
  input  [63:0] auto_tl_master_clock_xing_out_d_bits_data,
  input         auto_tl_master_clock_xing_out_d_bits_corrupt,
                auto_tap_clock_in_clock,
                auto_tap_clock_in_reset,
  output        auto_tl_master_clock_xing_out_a_valid,
  output [2:0]  auto_tl_master_clock_xing_out_a_bits_opcode,
                auto_tl_master_clock_xing_out_a_bits_param,
  output [3:0]  auto_tl_master_clock_xing_out_a_bits_size,
  output [1:0]  auto_tl_master_clock_xing_out_a_bits_source,
  output [31:0] auto_tl_master_clock_xing_out_a_bits_address,
  output [7:0]  auto_tl_master_clock_xing_out_a_bits_mask,
  output [63:0] auto_tl_master_clock_xing_out_a_bits_data,
  output        auto_tl_master_clock_xing_out_a_bits_corrupt,
                auto_tl_master_clock_xing_out_b_ready,
                auto_tl_master_clock_xing_out_c_valid,
  output [2:0]  auto_tl_master_clock_xing_out_c_bits_opcode,
                auto_tl_master_clock_xing_out_c_bits_param,
  output [3:0]  auto_tl_master_clock_xing_out_c_bits_size,
  output [1:0]  auto_tl_master_clock_xing_out_c_bits_source,
  output [31:0] auto_tl_master_clock_xing_out_c_bits_address,
  output [63:0] auto_tl_master_clock_xing_out_c_bits_data,
  output        auto_tl_master_clock_xing_out_c_bits_corrupt,
                auto_tl_master_clock_xing_out_d_ready,
                auto_tl_master_clock_xing_out_e_valid,
  output [1:0]  auto_tl_master_clock_xing_out_e_bits_sink
);

  wire        _intsink_3_auto_out_0;
  wire        _intsink_2_auto_out_0;
  wire        _intsink_1_auto_out_0;
  wire        _intsink_1_auto_out_1;
  wire        _intsink_auto_out_0;
  wire        _buffer_auto_in_a_ready;
  wire        _buffer_auto_in_b_valid;
  wire [2:0]  _buffer_auto_in_b_bits_opcode;
  wire [1:0]  _buffer_auto_in_b_bits_param;
  wire [3:0]  _buffer_auto_in_b_bits_size;
  wire [1:0]  _buffer_auto_in_b_bits_source;
  wire [31:0] _buffer_auto_in_b_bits_address;
  wire [7:0]  _buffer_auto_in_b_bits_mask;
  wire        _buffer_auto_in_b_bits_corrupt;
  wire        _buffer_auto_in_c_ready;
  wire        _buffer_auto_in_d_valid;
  wire [2:0]  _buffer_auto_in_d_bits_opcode;
  wire [1:0]  _buffer_auto_in_d_bits_param;
  wire [3:0]  _buffer_auto_in_d_bits_size;
  wire [1:0]  _buffer_auto_in_d_bits_source;
  wire [1:0]  _buffer_auto_in_d_bits_sink;
  wire        _buffer_auto_in_d_bits_denied;
  wire [63:0] _buffer_auto_in_d_bits_data;
  wire        _buffer_auto_in_d_bits_corrupt;
  wire        _buffer_auto_in_e_ready;
  wire        _element_reset_domain_rockettile_auto_buffer_out_a_valid;
  wire [2:0]  _element_reset_domain_rockettile_auto_buffer_out_a_bits_opcode;
  wire [2:0]  _element_reset_domain_rockettile_auto_buffer_out_a_bits_param;
  wire [3:0]  _element_reset_domain_rockettile_auto_buffer_out_a_bits_size;
  wire [1:0]  _element_reset_domain_rockettile_auto_buffer_out_a_bits_source;
  wire [31:0] _element_reset_domain_rockettile_auto_buffer_out_a_bits_address;
  wire [7:0]  _element_reset_domain_rockettile_auto_buffer_out_a_bits_mask;
  wire [63:0] _element_reset_domain_rockettile_auto_buffer_out_a_bits_data;
  wire        _element_reset_domain_rockettile_auto_buffer_out_b_ready;
  wire        _element_reset_domain_rockettile_auto_buffer_out_c_valid;
  wire [2:0]  _element_reset_domain_rockettile_auto_buffer_out_c_bits_opcode;
  wire [2:0]  _element_reset_domain_rockettile_auto_buffer_out_c_bits_param;
  wire [3:0]  _element_reset_domain_rockettile_auto_buffer_out_c_bits_size;
  wire [1:0]  _element_reset_domain_rockettile_auto_buffer_out_c_bits_source;
  wire [31:0] _element_reset_domain_rockettile_auto_buffer_out_c_bits_address;
  wire [63:0] _element_reset_domain_rockettile_auto_buffer_out_c_bits_data;
  wire        _element_reset_domain_rockettile_auto_buffer_out_d_ready;
  wire        _element_reset_domain_rockettile_auto_buffer_out_e_valid;
  wire [1:0]  _element_reset_domain_rockettile_auto_buffer_out_e_bits_sink;
  wire        _element_reset_domain_rockettile_auto_wfi_out_0;
  RocketTile element_reset_domain_rockettile (
    .clock                          (auto_tap_clock_in_clock),
    .reset                          (auto_tap_clock_in_reset),
    .auto_buffer_out_a_ready        (_buffer_auto_in_a_ready),
    .auto_buffer_out_b_valid        (_buffer_auto_in_b_valid),
    .auto_buffer_out_b_bits_opcode  (_buffer_auto_in_b_bits_opcode),
    .auto_buffer_out_b_bits_param   (_buffer_auto_in_b_bits_param),
    .auto_buffer_out_b_bits_size    (_buffer_auto_in_b_bits_size),
    .auto_buffer_out_b_bits_source  (_buffer_auto_in_b_bits_source),
    .auto_buffer_out_b_bits_address (_buffer_auto_in_b_bits_address),
    .auto_buffer_out_b_bits_mask    (_buffer_auto_in_b_bits_mask),
    .auto_buffer_out_b_bits_corrupt (_buffer_auto_in_b_bits_corrupt),
    .auto_buffer_out_c_ready        (_buffer_auto_in_c_ready),
    .auto_buffer_out_d_valid        (_buffer_auto_in_d_valid),
    .auto_buffer_out_d_bits_opcode  (_buffer_auto_in_d_bits_opcode),
    .auto_buffer_out_d_bits_param   (_buffer_auto_in_d_bits_param),
    .auto_buffer_out_d_bits_size    (_buffer_auto_in_d_bits_size),
    .auto_buffer_out_d_bits_source  (_buffer_auto_in_d_bits_source),
    .auto_buffer_out_d_bits_sink    (_buffer_auto_in_d_bits_sink),
    .auto_buffer_out_d_bits_denied  (_buffer_auto_in_d_bits_denied),
    .auto_buffer_out_d_bits_data    (_buffer_auto_in_d_bits_data),
    .auto_buffer_out_d_bits_corrupt (_buffer_auto_in_d_bits_corrupt),
    .auto_buffer_out_e_ready        (_buffer_auto_in_e_ready),
    .auto_int_local_in_3_0          (_intsink_3_auto_out_0),
    .auto_int_local_in_2_0          (_intsink_2_auto_out_0),
    .auto_int_local_in_1_0          (_intsink_1_auto_out_0),
    .auto_int_local_in_1_1          (_intsink_1_auto_out_1),
    .auto_int_local_in_0_0          (_intsink_auto_out_0),
    .auto_hartid_in                 (auto_element_reset_domain_rockettile_hartid_in),
    .auto_buffer_out_a_valid
      (_element_reset_domain_rockettile_auto_buffer_out_a_valid),
    .auto_buffer_out_a_bits_opcode
      (_element_reset_domain_rockettile_auto_buffer_out_a_bits_opcode),
    .auto_buffer_out_a_bits_param
      (_element_reset_domain_rockettile_auto_buffer_out_a_bits_param),
    .auto_buffer_out_a_bits_size
      (_element_reset_domain_rockettile_auto_buffer_out_a_bits_size),
    .auto_buffer_out_a_bits_source
      (_element_reset_domain_rockettile_auto_buffer_out_a_bits_source),
    .auto_buffer_out_a_bits_address
      (_element_reset_domain_rockettile_auto_buffer_out_a_bits_address),
    .auto_buffer_out_a_bits_mask
      (_element_reset_domain_rockettile_auto_buffer_out_a_bits_mask),
    .auto_buffer_out_a_bits_data
      (_element_reset_domain_rockettile_auto_buffer_out_a_bits_data),
    .auto_buffer_out_b_ready
      (_element_reset_domain_rockettile_auto_buffer_out_b_ready),
    .auto_buffer_out_c_valid
      (_element_reset_domain_rockettile_auto_buffer_out_c_valid),
    .auto_buffer_out_c_bits_opcode
      (_element_reset_domain_rockettile_auto_buffer_out_c_bits_opcode),
    .auto_buffer_out_c_bits_param
      (_element_reset_domain_rockettile_auto_buffer_out_c_bits_param),
    .auto_buffer_out_c_bits_size
      (_element_reset_domain_rockettile_auto_buffer_out_c_bits_size),
    .auto_buffer_out_c_bits_source
      (_element_reset_domain_rockettile_auto_buffer_out_c_bits_source),
    .auto_buffer_out_c_bits_address
      (_element_reset_domain_rockettile_auto_buffer_out_c_bits_address),
    .auto_buffer_out_c_bits_data
      (_element_reset_domain_rockettile_auto_buffer_out_c_bits_data),
    .auto_buffer_out_d_ready
      (_element_reset_domain_rockettile_auto_buffer_out_d_ready),
    .auto_buffer_out_e_valid
      (_element_reset_domain_rockettile_auto_buffer_out_e_valid),
    .auto_buffer_out_e_bits_sink
      (_element_reset_domain_rockettile_auto_buffer_out_e_bits_sink),
    .auto_wfi_out_0                 (_element_reset_domain_rockettile_auto_wfi_out_0)
  );
  TLBuffer_a32d64s2k2z4c_1 buffer (
    .clock                   (auto_tap_clock_in_clock),
    .reset                   (auto_tap_clock_in_reset),
    .auto_in_a_valid         (_element_reset_domain_rockettile_auto_buffer_out_a_valid),
    .auto_in_a_bits_opcode
      (_element_reset_domain_rockettile_auto_buffer_out_a_bits_opcode),
    .auto_in_a_bits_param
      (_element_reset_domain_rockettile_auto_buffer_out_a_bits_param),
    .auto_in_a_bits_size
      (_element_reset_domain_rockettile_auto_buffer_out_a_bits_size),
    .auto_in_a_bits_source
      (_element_reset_domain_rockettile_auto_buffer_out_a_bits_source),
    .auto_in_a_bits_address
      (_element_reset_domain_rockettile_auto_buffer_out_a_bits_address),
    .auto_in_a_bits_mask
      (_element_reset_domain_rockettile_auto_buffer_out_a_bits_mask),
    .auto_in_a_bits_data
      (_element_reset_domain_rockettile_auto_buffer_out_a_bits_data),
    .auto_in_b_ready         (_element_reset_domain_rockettile_auto_buffer_out_b_ready),
    .auto_in_c_valid         (_element_reset_domain_rockettile_auto_buffer_out_c_valid),
    .auto_in_c_bits_opcode
      (_element_reset_domain_rockettile_auto_buffer_out_c_bits_opcode),
    .auto_in_c_bits_param
      (_element_reset_domain_rockettile_auto_buffer_out_c_bits_param),
    .auto_in_c_bits_size
      (_element_reset_domain_rockettile_auto_buffer_out_c_bits_size),
    .auto_in_c_bits_source
      (_element_reset_domain_rockettile_auto_buffer_out_c_bits_source),
    .auto_in_c_bits_address
      (_element_reset_domain_rockettile_auto_buffer_out_c_bits_address),
    .auto_in_c_bits_data
      (_element_reset_domain_rockettile_auto_buffer_out_c_bits_data),
    .auto_in_d_ready         (_element_reset_domain_rockettile_auto_buffer_out_d_ready),
    .auto_in_e_valid         (_element_reset_domain_rockettile_auto_buffer_out_e_valid),
    .auto_in_e_bits_sink
      (_element_reset_domain_rockettile_auto_buffer_out_e_bits_sink),
    .auto_out_a_ready        (auto_tl_master_clock_xing_out_a_ready),
    .auto_out_b_valid        (auto_tl_master_clock_xing_out_b_valid),
    .auto_out_b_bits_param   (auto_tl_master_clock_xing_out_b_bits_param),
    .auto_out_b_bits_address (auto_tl_master_clock_xing_out_b_bits_address),
    .auto_out_c_ready        (auto_tl_master_clock_xing_out_c_ready),
    .auto_out_d_valid        (auto_tl_master_clock_xing_out_d_valid),
    .auto_out_d_bits_opcode  (auto_tl_master_clock_xing_out_d_bits_opcode),
    .auto_out_d_bits_param   (auto_tl_master_clock_xing_out_d_bits_param),
    .auto_out_d_bits_size    (auto_tl_master_clock_xing_out_d_bits_size),
    .auto_out_d_bits_source  (auto_tl_master_clock_xing_out_d_bits_source),
    .auto_out_d_bits_sink    (auto_tl_master_clock_xing_out_d_bits_sink),
    .auto_out_d_bits_denied  (auto_tl_master_clock_xing_out_d_bits_denied),
    .auto_out_d_bits_data    (auto_tl_master_clock_xing_out_d_bits_data),
    .auto_out_d_bits_corrupt (auto_tl_master_clock_xing_out_d_bits_corrupt),
    .auto_in_a_ready         (_buffer_auto_in_a_ready),
    .auto_in_b_valid         (_buffer_auto_in_b_valid),
    .auto_in_b_bits_opcode   (_buffer_auto_in_b_bits_opcode),
    .auto_in_b_bits_param    (_buffer_auto_in_b_bits_param),
    .auto_in_b_bits_size     (_buffer_auto_in_b_bits_size),
    .auto_in_b_bits_source   (_buffer_auto_in_b_bits_source),
    .auto_in_b_bits_address  (_buffer_auto_in_b_bits_address),
    .auto_in_b_bits_mask     (_buffer_auto_in_b_bits_mask),
    .auto_in_b_bits_corrupt  (_buffer_auto_in_b_bits_corrupt),
    .auto_in_c_ready         (_buffer_auto_in_c_ready),
    .auto_in_d_valid         (_buffer_auto_in_d_valid),
    .auto_in_d_bits_opcode   (_buffer_auto_in_d_bits_opcode),
    .auto_in_d_bits_param    (_buffer_auto_in_d_bits_param),
    .auto_in_d_bits_size     (_buffer_auto_in_d_bits_size),
    .auto_in_d_bits_source   (_buffer_auto_in_d_bits_source),
    .auto_in_d_bits_sink     (_buffer_auto_in_d_bits_sink),
    .auto_in_d_bits_denied   (_buffer_auto_in_d_bits_denied),
    .auto_in_d_bits_data     (_buffer_auto_in_d_bits_data),
    .auto_in_d_bits_corrupt  (_buffer_auto_in_d_bits_corrupt),
    .auto_in_e_ready         (_buffer_auto_in_e_ready),
    .auto_out_a_valid        (auto_tl_master_clock_xing_out_a_valid),
    .auto_out_a_bits_opcode  (auto_tl_master_clock_xing_out_a_bits_opcode),
    .auto_out_a_bits_param   (auto_tl_master_clock_xing_out_a_bits_param),
    .auto_out_a_bits_size    (auto_tl_master_clock_xing_out_a_bits_size),
    .auto_out_a_bits_source  (auto_tl_master_clock_xing_out_a_bits_source),
    .auto_out_a_bits_address (auto_tl_master_clock_xing_out_a_bits_address),
    .auto_out_a_bits_mask    (auto_tl_master_clock_xing_out_a_bits_mask),
    .auto_out_a_bits_data    (auto_tl_master_clock_xing_out_a_bits_data),
    .auto_out_a_bits_corrupt (auto_tl_master_clock_xing_out_a_bits_corrupt),
    .auto_out_b_ready        (auto_tl_master_clock_xing_out_b_ready),
    .auto_out_c_valid        (auto_tl_master_clock_xing_out_c_valid),
    .auto_out_c_bits_opcode  (auto_tl_master_clock_xing_out_c_bits_opcode),
    .auto_out_c_bits_param   (auto_tl_master_clock_xing_out_c_bits_param),
    .auto_out_c_bits_size    (auto_tl_master_clock_xing_out_c_bits_size),
    .auto_out_c_bits_source  (auto_tl_master_clock_xing_out_c_bits_source),
    .auto_out_c_bits_address (auto_tl_master_clock_xing_out_c_bits_address),
    .auto_out_c_bits_data    (auto_tl_master_clock_xing_out_c_bits_data),
    .auto_out_c_bits_corrupt (auto_tl_master_clock_xing_out_c_bits_corrupt),
    .auto_out_d_ready        (auto_tl_master_clock_xing_out_d_ready),
    .auto_out_e_valid        (auto_tl_master_clock_xing_out_e_valid),
    .auto_out_e_bits_sink    (auto_tl_master_clock_xing_out_e_bits_sink)
  );
  IntSyncAsyncCrossingSink_n1x1 intsink (
    .clock          (auto_tap_clock_in_clock),
    .auto_in_sync_0 (auto_intsink_in_sync_0),
    .auto_out_0     (_intsink_auto_out_0)
  );
  IntSyncSyncCrossingSink_n1x2 intsink_1 (
    .auto_in_sync_0 (auto_int_in_clock_xing_in_0_sync_0),
    .auto_in_sync_1 (auto_int_in_clock_xing_in_0_sync_1),
    .auto_out_0     (_intsink_1_auto_out_0),
    .auto_out_1     (_intsink_1_auto_out_1)
  );
  IntSyncSyncCrossingSink_n1x1 intsink_2 (
    .auto_in_sync_0 (auto_int_in_clock_xing_in_1_sync_0),
    .auto_out_0     (_intsink_2_auto_out_0)
  );
  IntSyncSyncCrossingSink_n1x1 intsink_3 (
    .auto_in_sync_0 (auto_int_in_clock_xing_in_2_sync_0),
    .auto_out_0     (_intsink_3_auto_out_0)
  );
  IntSyncCrossingSource_n1x1 intsource (
    .clock           (auto_tap_clock_in_clock),
    .reset           (auto_tap_clock_in_reset),
    .auto_in_0       (1'h0),
    .auto_out_sync_0 (/* unused */)
  );
  IntSyncCrossingSource_n1x1 intsource_1 (
    .clock           (auto_tap_clock_in_clock),
    .reset           (auto_tap_clock_in_reset),
    .auto_in_0       (_element_reset_domain_rockettile_auto_wfi_out_0),
    .auto_out_sync_0 (/* unused */)
  );
  IntSyncCrossingSource_n1x1 intsource_2 (
    .clock           (auto_tap_clock_in_clock),
    .reset           (auto_tap_clock_in_reset),
    .auto_in_0       (1'h0),
    .auto_out_sync_0 (/* unused */)
  );
endmodule

module BundleBridgeNexus_11(
  output auto_out
);

  wire outputs_0 = 1'h0;
  assign auto_out = outputs_0;
endmodule

module TLMonitor_25(
  input        clock,
               reset,
               io_in_a_ready,
               io_in_a_valid,
  input [2:0]  io_in_a_bits_opcode,
               io_in_a_bits_param,
  input [1:0]  io_in_a_bits_size,
  input [8:0]  io_in_a_bits_source,
  input [25:0] io_in_a_bits_address,
  input [7:0]  io_in_a_bits_mask,
  input        io_in_a_bits_corrupt,
               io_in_d_ready,
               io_in_d_valid,
  input [2:0]  io_in_d_bits_opcode,
  input [1:0]  io_in_d_bits_size,
  input [8:0]  io_in_d_bits_source
);

  wire [31:0]   _plusarg_reader_1_out;
  wire [31:0]   _plusarg_reader_out;
  wire          a_first_done = io_in_a_ready & io_in_a_valid;
  reg           a_first_counter;
  reg  [2:0]    opcode;
  reg  [2:0]    param;
  reg  [1:0]    size;
  reg  [8:0]    source;
  reg  [25:0]   address;
  reg           d_first_counter;
  reg  [2:0]    opcode_1;
  reg  [1:0]    param_1;
  reg  [1:0]    size_1;
  reg  [8:0]    source_1;
  reg           sink;
  reg           denied;
  reg  [303:0]  inflight;
  reg  [1215:0] inflight_opcodes;
  reg  [1215:0] inflight_sizes;
  reg           a_first_counter_1;
  reg           d_first_counter_1;
  wire          _GEN = a_first_done & ~a_first_counter_1;
  wire          d_release_ack = io_in_d_bits_opcode == 3'h6;
  reg  [31:0]   watchdog;
  reg  [303:0]  inflight_1;
  reg  [1215:0] inflight_sizes_1;
  reg           d_first_counter_2;
  reg  [31:0]   watchdog_1;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      automatic logic [7:0][2:0] _GEN_0 =
        '{3'h4, 3'h5, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic [7:0][2:0] _GEN_1 =
        '{3'h4, 3'h4, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic            _GEN_2 = io_in_a_bits_source < 9'h130;
      automatic logic [5:0]      _GEN_3 = 6'h7 << io_in_a_bits_size;
      automatic logic [2:0]      _GEN_4 = io_in_a_bits_address[2:0] & ~(_GEN_3[2:0]);
      automatic logic            mask_size = io_in_a_bits_size == 2'h2;
      automatic logic            mask_acc =
        (&io_in_a_bits_size) | mask_size & ~(io_in_a_bits_address[2]);
      automatic logic            mask_acc_1 =
        (&io_in_a_bits_size) | mask_size & io_in_a_bits_address[2];
      automatic logic            mask_size_1 = io_in_a_bits_size == 2'h1;
      automatic logic            mask_eq_2 =
        ~(io_in_a_bits_address[2]) & ~(io_in_a_bits_address[1]);
      automatic logic            mask_acc_2 = mask_acc | mask_size_1 & mask_eq_2;
      automatic logic            mask_eq_3 =
        ~(io_in_a_bits_address[2]) & io_in_a_bits_address[1];
      automatic logic            mask_acc_3 = mask_acc | mask_size_1 & mask_eq_3;
      automatic logic            mask_eq_4 =
        io_in_a_bits_address[2] & ~(io_in_a_bits_address[1]);
      automatic logic            mask_acc_4 = mask_acc_1 | mask_size_1 & mask_eq_4;
      automatic logic            mask_eq_5 =
        io_in_a_bits_address[2] & io_in_a_bits_address[1];
      automatic logic            mask_acc_5 = mask_acc_1 | mask_size_1 & mask_eq_5;
      automatic logic [7:0]      mask =
        {mask_acc_5 | mask_eq_5 & io_in_a_bits_address[0],
         mask_acc_5 | mask_eq_5 & ~(io_in_a_bits_address[0]),
         mask_acc_4 | mask_eq_4 & io_in_a_bits_address[0],
         mask_acc_4 | mask_eq_4 & ~(io_in_a_bits_address[0]),
         mask_acc_3 | mask_eq_3 & io_in_a_bits_address[0],
         mask_acc_3 | mask_eq_3 & ~(io_in_a_bits_address[0]),
         mask_acc_2 | mask_eq_2 & io_in_a_bits_address[0],
         mask_acc_2 | mask_eq_2 & ~(io_in_a_bits_address[0])};
      automatic logic            _GEN_5 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_6 = io_in_a_bits_param > 3'h2;
      automatic logic            _GEN_7 = io_in_a_bits_mask != 8'hFF;
      automatic logic            _GEN_8 = io_in_a_valid & (&io_in_a_bits_opcode) & ~reset;
      automatic logic            _GEN_9 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_10 = _GEN_9 & ~_GEN_2;
      automatic logic            _GEN_11 = io_in_a_bits_address[25:16] != 10'h200;
      automatic logic            _GEN_12 = io_in_a_bits_mask != mask;
      automatic logic            _GEN_13 = _GEN_2 & ~_GEN_11;
      automatic logic            _GEN_14 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_15 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_16 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_17 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h3 & ~reset;
      automatic logic            _GEN_18 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h5 & ~reset;
      automatic logic            _GEN_19 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_20 = io_in_d_bits_source > 9'h12F;
      automatic logic            _GEN_21 = io_in_d_bits_size != 2'h3;
      automatic logic            _GEN_22 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_23 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h5 & ~reset;
      automatic logic            _GEN_24 = io_in_a_valid & a_first_counter & ~reset;
      automatic logic            _GEN_25 = io_in_d_valid & d_first_counter & ~reset;
      automatic logic [1215:0]   _GEN_26 = {1205'h0, io_in_d_bits_source, 2'h0};
      automatic logic [1215:0]   _GEN_27 = inflight_opcodes >> _GEN_26;
      automatic logic            _GEN_28 = io_in_d_valid & ~d_first_counter_1;
      automatic logic            _GEN_29 = _GEN_28 & ~d_release_ack;
      automatic logic            _GEN_30 = io_in_a_bits_source == io_in_d_bits_source;
      automatic logic            same_cycle_resp =
        io_in_a_valid & ~a_first_counter_1 & _GEN_30;
      automatic logic [303:0]    _GEN_31 = {295'h0, io_in_d_bits_source};
      automatic logic            _GEN_32 = _GEN_29 & same_cycle_resp & ~reset;
      automatic logic            _GEN_33 = _GEN_29 & ~same_cycle_resp & ~reset;
      automatic logic [3:0]      _GEN_34 = {2'h0, io_in_d_bits_size};
      automatic logic            _GEN_35 =
        io_in_d_valid & ~d_first_counter_2 & d_release_ack & ~reset;
      automatic logic [303:0]    _GEN_36 = inflight >> io_in_a_bits_source;
      automatic logic [303:0]    _GEN_37 = inflight >> _GEN_31;
      automatic logic [1215:0]   _GEN_38 = inflight_sizes >> _GEN_26;
      automatic logic [303:0]    _GEN_39 = inflight_1 >> _GEN_31;
      automatic logic [1215:0]   _GEN_40 = inflight_sizes_1 >> _GEN_26;
      if (_GEN_5) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_5 & ~_GEN_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock carries invalid source ID (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_5 & ~(&io_in_a_bits_size)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_5 & (|_GEN_4)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_5 & _GEN_6) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock carries invalid grow param (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_5 & _GEN_7) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_5 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock is corrupt (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_8) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_8 & ~_GEN_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm carries invalid source ID (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_8 & ~(&io_in_a_bits_size)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_8 & (|_GEN_4)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_8 & _GEN_6) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm carries invalid grow param (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_8 & ~(|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_8 & _GEN_7) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_8 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm is corrupt (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_10) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_9 & _GEN_11) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_10) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get carries invalid source ID (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_9 & (|_GEN_4)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get address not aligned to size (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_9 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get carries invalid param (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_9 & _GEN_12) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get contains invalid mask (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_9 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get is corrupt (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & ~_GEN_13) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & ~_GEN_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull carries invalid source ID (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & (|_GEN_4)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull address not aligned to size (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull carries invalid param (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & _GEN_12) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull contains invalid mask (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & ~_GEN_13) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & ~_GEN_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & (|_GEN_4)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial address not aligned to size (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial carries invalid param (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & (|(io_in_a_bits_mask & ~mask))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial contains invalid mask (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16 & ~_GEN_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16 & (|_GEN_4)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16 & io_in_a_bits_param > 3'h4) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16 & _GEN_12) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & ~_GEN_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical carries invalid source ID (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & (|_GEN_4)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical address not aligned to size (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & io_in_a_bits_param[2]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical carries invalid opcode param (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & _GEN_12) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical contains invalid mask (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & ~_GEN_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint carries invalid source ID (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & (|_GEN_4)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint address not aligned to size (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & (|(io_in_a_bits_param[2:1]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint carries invalid opcode param (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & _GEN_12) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint contains invalid mask (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint is corrupt (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & ~reset & (&io_in_d_bits_opcode)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel has invalid opcode (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & _GEN_20) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & _GEN_21) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & _GEN_20) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid source ID (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid sink ID (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & _GEN_21) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant smaller than a beat (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_23 & _GEN_20) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid source ID (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_23) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid sink ID (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_23 & _GEN_21) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData smaller than a beat (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & io_in_d_bits_opcode == 3'h0 & ~reset & _GEN_20) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & io_in_d_bits_opcode == 3'h1 & ~reset & _GEN_20) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & io_in_d_bits_opcode == 3'h2 & ~reset & _GEN_20) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck carries invalid source ID (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_24 & io_in_a_bits_opcode != opcode) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel opcode changed within multibeat operation (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_24 & io_in_a_bits_param != param) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel param changed within multibeat operation (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_24 & io_in_a_bits_size != size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel size changed within multibeat operation (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_24 & io_in_a_bits_source != source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel source changed within multibeat operation (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_24 & io_in_a_bits_address != address) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel address changed with multibeat operation (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25 & io_in_d_bits_opcode != opcode_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel opcode changed within multibeat operation (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25 & (|param_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel param changed within multibeat operation (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25 & io_in_d_bits_size != size_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel size changed within multibeat operation (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25 & io_in_d_bits_source != source_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel source changed within multibeat operation (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25 & sink) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel sink changed with multibeat operation (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25 & denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel denied changed with multibeat operation (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN & ~reset & _GEN_36[0]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel re-used a source ID (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_29 & ~reset & ~(_GEN_37[0] | same_cycle_resp)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32
          & ~(io_in_d_bits_opcode == _GEN_1[io_in_a_bits_opcode]
              | io_in_d_bits_opcode == _GEN_0[io_in_a_bits_opcode])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & io_in_a_bits_size != io_in_d_bits_size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_33
          & ~(io_in_d_bits_opcode == _GEN_1[_GEN_27[3:1]]
              | io_in_d_bits_opcode == _GEN_0[_GEN_27[3:1]])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_33 & _GEN_34 != {1'h0, _GEN_38[3:1]}) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_28 & ~a_first_counter_1 & io_in_a_valid & _GEN_30 & ~d_release_ack & ~reset
          & ~(~io_in_d_ready | io_in_a_ready)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ready check\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight == 304'h0 | _plusarg_reader_out == 32'h0
              | watchdog < _plusarg_reader_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_35 & ~(_GEN_39[0])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_35 & _GEN_34 != {1'h0, _GEN_40[3:1]}) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight_1 == 304'h0 | _plusarg_reader_1_out == 32'h0
              | watchdog_1 < _plusarg_reader_1_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/devices/tilelink/CLINT.scala:113:37)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    automatic logic d_first_done;
    automatic logic _GEN_41;
    d_first_done = io_in_d_ready & io_in_d_valid;
    _GEN_41 = d_first_done & ~d_first_counter;
    if (reset) begin
      a_first_counter <= 1'h0;
      d_first_counter <= 1'h0;
      inflight <= 304'h0;
      inflight_opcodes <= 1216'h0;
      inflight_sizes <= 1216'h0;
      a_first_counter_1 <= 1'h0;
      d_first_counter_1 <= 1'h0;
      watchdog <= 32'h0;
      inflight_1 <= 304'h0;
      inflight_sizes_1 <= 1216'h0;
      d_first_counter_2 <= 1'h0;
      watchdog_1 <= 32'h0;
    end
    else begin
      automatic logic          _GEN_42;
      automatic logic [511:0]  _GEN_43 = 512'h1 << io_in_d_bits_source;
      automatic logic [4110:0] _GEN_44 = 4111'hF << {4100'h0, io_in_d_bits_source, 2'h0};
      automatic logic [1215:0] d_sizes_clr;
      automatic logic          _GEN_45;
      automatic logic [511:0]  _GEN_46 = 512'h1 << io_in_a_bits_source;
      automatic logic [4098:0] _GEN_47 =
        {4095'h0, _GEN ? {io_in_a_bits_opcode, 1'h1} : 4'h0}
        << {4088'h0, io_in_a_bits_source, 2'h0};
      automatic logic [4097:0] _GEN_48 =
        {4095'h0, _GEN ? {io_in_a_bits_size, 1'h1} : 3'h0}
        << {4087'h0, io_in_a_bits_source, 2'h0};
      _GEN_42 = d_first_done & ~d_first_counter_1 & ~d_release_ack;
      d_sizes_clr = _GEN_42 ? _GEN_44[1215:0] : 1216'h0;
      _GEN_45 = d_first_done & ~d_first_counter_2 & d_release_ack;
      a_first_counter <= (~a_first_done | a_first_counter - 1'h1) & a_first_counter;
      d_first_counter <= (~d_first_done | d_first_counter - 1'h1) & d_first_counter;
      inflight <=
        (inflight | (_GEN ? _GEN_46[303:0] : 304'h0))
        & ~(_GEN_42 ? _GEN_43[303:0] : 304'h0);
      inflight_opcodes <=
        (inflight_opcodes | (_GEN ? _GEN_47[1215:0] : 1216'h0)) & ~d_sizes_clr;
      inflight_sizes <=
        (inflight_sizes | (_GEN ? _GEN_48[1215:0] : 1216'h0)) & ~d_sizes_clr;
      a_first_counter_1 <= (~a_first_done | a_first_counter_1 - 1'h1) & a_first_counter_1;
      d_first_counter_1 <= (~d_first_done | d_first_counter_1 - 1'h1) & d_first_counter_1;
      if (a_first_done | d_first_done)
        watchdog <= 32'h0;
      else
        watchdog <= watchdog + 32'h1;
      inflight_1 <= inflight_1 & ~(_GEN_45 ? _GEN_43[303:0] : 304'h0);
      inflight_sizes_1 <= inflight_sizes_1 & ~(_GEN_45 ? _GEN_44[1215:0] : 1216'h0);
      d_first_counter_2 <= (~d_first_done | d_first_counter_2 - 1'h1) & d_first_counter_2;
      if (d_first_done)
        watchdog_1 <= 32'h0;
      else
        watchdog_1 <= watchdog_1 + 32'h1;
    end
    if (a_first_done & ~a_first_counter) begin
      opcode <= io_in_a_bits_opcode;
      param <= io_in_a_bits_param;
      size <= io_in_a_bits_size;
      source <= io_in_a_bits_source;
      address <= io_in_a_bits_address;
    end
    if (_GEN_41) begin
      opcode_1 <= io_in_d_bits_opcode;
      param_1 <= 2'h0;
      size_1 <= io_in_d_bits_size;
      source_1 <= io_in_d_bits_source;
    end
    sink <= ~_GEN_41 & sink;
    denied <= ~_GEN_41 & denied;
  end // always @(posedge)
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader (
    .out (_plusarg_reader_out)
  );
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader_1 (
    .out (_plusarg_reader_1_out)
  );
endmodule

module CLINT(
  input         clock,
                reset,
                auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
                auto_in_a_bits_param,
  input  [1:0]  auto_in_a_bits_size,
  input  [8:0]  auto_in_a_bits_source,
  input  [25:0] auto_in_a_bits_address,
  input  [7:0]  auto_in_a_bits_mask,
  input  [63:0] auto_in_a_bits_data,
  input         auto_in_a_bits_corrupt,
                auto_in_d_ready,
                io_rtcTick,
  output        auto_int_out_0,
                auto_int_out_1,
                auto_in_a_ready,
                auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
  output [1:0]  auto_in_d_bits_size,
  output [8:0]  auto_in_d_bits_source,
  output [63:0] auto_in_d_bits_data
);

  wire             out_woready_9;
  wire             out_woready_17;
  reg  [63:0]      time_0;
  reg  [63:0]      pad;
  reg              ipi_0;
  wire             out_front_bits_read = auto_in_a_bits_opcode == 3'h4;
  wire             _GEN = auto_in_a_bits_address[13:3] == 11'h0;
  wire             valids_1_0 = out_woready_9 & auto_in_a_bits_mask[0];
  wire             valids_1_1 = out_woready_9 & auto_in_a_bits_mask[1];
  wire             valids_1_2 = out_woready_9 & auto_in_a_bits_mask[2];
  wire             valids_1_3 = out_woready_9 & auto_in_a_bits_mask[3];
  wire             valids_1_4 = out_woready_9 & auto_in_a_bits_mask[4];
  wire             valids_1_5 = out_woready_9 & auto_in_a_bits_mask[5];
  wire             valids_1_6 = out_woready_9 & auto_in_a_bits_mask[6];
  wire             valids_1_7 = out_woready_9 & auto_in_a_bits_mask[7];
  wire             valids_0 = out_woready_17 & auto_in_a_bits_mask[0];
  wire             valids_1 = out_woready_17 & auto_in_a_bits_mask[1];
  wire             valids_2 = out_woready_17 & auto_in_a_bits_mask[2];
  wire             valids_3 = out_woready_17 & auto_in_a_bits_mask[3];
  wire             valids_4 = out_woready_17 & auto_in_a_bits_mask[4];
  wire             valids_5 = out_woready_17 & auto_in_a_bits_mask[5];
  wire             valids_6 = out_woready_17 & auto_in_a_bits_mask[6];
  wire             valids_7 = out_woready_17 & auto_in_a_bits_mask[7];
  wire             _GEN_0 = auto_in_a_valid & auto_in_d_ready & ~out_front_bits_read;
  assign out_woready_17 = _GEN_0 & auto_in_a_bits_address[15:14] == 2'h1 & _GEN;
  assign out_woready_9 =
    _GEN_0 & auto_in_a_bits_address[15:14] == 2'h2 & (&(auto_in_a_bits_address[13:3]));
  wire [3:0]       _GEN_1 = {{1'h1}, {&(auto_in_a_bits_address[13:3])}, {_GEN}, {_GEN}};
  wire [3:0][63:0] _GEN_2 = {{64'h0}, {time_0}, {pad}, {{63'h0, ipi_0}}};
  wire [2:0]       nodeIn_d_bits_opcode = {2'h0, out_front_bits_read};
  always @(posedge clock) begin
    if (reset) begin
      time_0 <= 64'h0;
      ipi_0 <= 1'h0;
    end
    else begin
      if (valids_1_0 | valids_1_1 | valids_1_2 | valids_1_3 | valids_1_4 | valids_1_5
          | valids_1_6 | valids_1_7)
        time_0 <=
          {valids_1_7 ? auto_in_a_bits_data[63:56] : time_0[63:56],
           valids_1_6 ? auto_in_a_bits_data[55:48] : time_0[55:48],
           valids_1_5 ? auto_in_a_bits_data[47:40] : time_0[47:40],
           valids_1_4 ? auto_in_a_bits_data[39:32] : time_0[39:32],
           valids_1_3 ? auto_in_a_bits_data[31:24] : time_0[31:24],
           valids_1_2 ? auto_in_a_bits_data[23:16] : time_0[23:16],
           valids_1_1 ? auto_in_a_bits_data[15:8] : time_0[15:8],
           valids_1_0 ? auto_in_a_bits_data[7:0] : time_0[7:0]};
      else if (io_rtcTick)
        time_0 <= time_0 + 64'h1;
      if (_GEN_0 & auto_in_a_bits_address[15:14] == 2'h0 & _GEN & auto_in_a_bits_mask[0])
        ipi_0 <= auto_in_a_bits_data[0];
    end
    if (valids_0 | valids_1 | valids_2 | valids_3 | valids_4 | valids_5 | valids_6
        | valids_7)
      pad <=
        {valids_7 ? auto_in_a_bits_data[63:56] : pad[63:56],
         valids_6 ? auto_in_a_bits_data[55:48] : pad[55:48],
         valids_5 ? auto_in_a_bits_data[47:40] : pad[47:40],
         valids_4 ? auto_in_a_bits_data[39:32] : pad[39:32],
         valids_3 ? auto_in_a_bits_data[31:24] : pad[31:24],
         valids_2 ? auto_in_a_bits_data[23:16] : pad[23:16],
         valids_1 ? auto_in_a_bits_data[15:8] : pad[15:8],
         valids_0 ? auto_in_a_bits_data[7:0] : pad[7:0]};
  end // always @(posedge)
  TLMonitor_25 monitor (
    .clock                (clock),
    .reset                (reset),
    .io_in_a_ready        (auto_in_d_ready),
    .io_in_a_valid        (auto_in_a_valid),
    .io_in_a_bits_opcode  (auto_in_a_bits_opcode),
    .io_in_a_bits_param   (auto_in_a_bits_param),
    .io_in_a_bits_size    (auto_in_a_bits_size),
    .io_in_a_bits_source  (auto_in_a_bits_source),
    .io_in_a_bits_address (auto_in_a_bits_address),
    .io_in_a_bits_mask    (auto_in_a_bits_mask),
    .io_in_a_bits_corrupt (auto_in_a_bits_corrupt),
    .io_in_d_ready        (auto_in_d_ready),
    .io_in_d_valid        (auto_in_a_valid),
    .io_in_d_bits_opcode  (nodeIn_d_bits_opcode),
    .io_in_d_bits_size    (auto_in_a_bits_size),
    .io_in_d_bits_source  (auto_in_a_bits_source)
  );
  assign auto_int_out_0 = ipi_0;
  assign auto_int_out_1 = time_0 >= pad;
  assign auto_in_a_ready = auto_in_d_ready;
  assign auto_in_d_valid = auto_in_a_valid;
  assign auto_in_d_bits_opcode = nodeIn_d_bits_opcode;
  assign auto_in_d_bits_size = auto_in_a_bits_size;
  assign auto_in_d_bits_source = auto_in_a_bits_source;
  assign auto_in_d_bits_data =
    _GEN_1[auto_in_a_bits_address[15:14]] ? _GEN_2[auto_in_a_bits_address[15:14]] : 64'h0;
endmodule

module CLINTClockSinkDomain(
  input         auto_clint_in_a_valid,
  input  [2:0]  auto_clint_in_a_bits_opcode,
                auto_clint_in_a_bits_param,
  input  [1:0]  auto_clint_in_a_bits_size,
  input  [8:0]  auto_clint_in_a_bits_source,
  input  [25:0] auto_clint_in_a_bits_address,
  input  [7:0]  auto_clint_in_a_bits_mask,
  input  [63:0] auto_clint_in_a_bits_data,
  input         auto_clint_in_a_bits_corrupt,
                auto_clint_in_d_ready,
                auto_clock_in_clock,
                auto_clock_in_reset,
                tick,
  output        auto_clint_in_a_ready,
                auto_clint_in_d_valid,
  output [2:0]  auto_clint_in_d_bits_opcode,
  output [1:0]  auto_clint_in_d_bits_size,
  output [8:0]  auto_clint_in_d_bits_source,
  output [63:0] auto_clint_in_d_bits_data,
  output        auto_int_in_clock_xing_out_sync_0,
                auto_int_in_clock_xing_out_sync_1,
                clock,
                reset
);

  wire _clint_auto_int_out_0;
  wire _clint_auto_int_out_1;
  CLINT clint (
    .clock                  (auto_clock_in_clock),
    .reset                  (auto_clock_in_reset),
    .auto_in_a_valid        (auto_clint_in_a_valid),
    .auto_in_a_bits_opcode  (auto_clint_in_a_bits_opcode),
    .auto_in_a_bits_param   (auto_clint_in_a_bits_param),
    .auto_in_a_bits_size    (auto_clint_in_a_bits_size),
    .auto_in_a_bits_source  (auto_clint_in_a_bits_source),
    .auto_in_a_bits_address (auto_clint_in_a_bits_address),
    .auto_in_a_bits_mask    (auto_clint_in_a_bits_mask),
    .auto_in_a_bits_data    (auto_clint_in_a_bits_data),
    .auto_in_a_bits_corrupt (auto_clint_in_a_bits_corrupt),
    .auto_in_d_ready        (auto_clint_in_d_ready),
    .io_rtcTick             (tick),
    .auto_int_out_0         (_clint_auto_int_out_0),
    .auto_int_out_1         (_clint_auto_int_out_1),
    .auto_in_a_ready        (auto_clint_in_a_ready),
    .auto_in_d_valid        (auto_clint_in_d_valid),
    .auto_in_d_bits_opcode  (auto_clint_in_d_bits_opcode),
    .auto_in_d_bits_size    (auto_clint_in_d_bits_size),
    .auto_in_d_bits_source  (auto_clint_in_d_bits_source),
    .auto_in_d_bits_data    (auto_clint_in_d_bits_data)
  );
  IntSyncCrossingSource_n1x2 intsource (
    .clock           (auto_clock_in_clock),
    .reset           (auto_clock_in_reset),
    .auto_in_0       (_clint_auto_int_out_0),
    .auto_in_1       (_clint_auto_int_out_1),
    .auto_out_sync_0 (auto_int_in_clock_xing_out_sync_0),
    .auto_out_sync_1 (auto_int_in_clock_xing_out_sync_1)
  );
  assign clock = auto_clock_in_clock;
  assign reset = auto_clock_in_reset;
endmodule

module TLMonitor_26(
  input        clock,
               reset,
               io_in_a_ready,
               io_in_a_valid,
  input [2:0]  io_in_a_bits_opcode,
               io_in_a_bits_param,
  input [1:0]  io_in_a_bits_size,
  input [8:0]  io_in_a_bits_source,
  input [27:0] io_in_a_bits_address,
  input [7:0]  io_in_a_bits_mask,
  input        io_in_a_bits_corrupt,
               io_in_d_ready,
               io_in_d_valid,
  input [2:0]  io_in_d_bits_opcode,
  input [1:0]  io_in_d_bits_size,
  input [8:0]  io_in_d_bits_source
);

  wire [31:0]   _plusarg_reader_1_out;
  wire [31:0]   _plusarg_reader_out;
  wire          a_first_done = io_in_a_ready & io_in_a_valid;
  reg           a_first_counter;
  reg  [2:0]    opcode;
  reg  [2:0]    param;
  reg  [1:0]    size;
  reg  [8:0]    source;
  reg  [27:0]   address;
  reg           d_first_counter;
  reg  [2:0]    opcode_1;
  reg  [1:0]    param_1;
  reg  [1:0]    size_1;
  reg  [8:0]    source_1;
  reg           sink;
  reg           denied;
  reg  [303:0]  inflight;
  reg  [1215:0] inflight_opcodes;
  reg  [1215:0] inflight_sizes;
  reg           a_first_counter_1;
  reg           d_first_counter_1;
  wire [511:0]  _GEN = 512'h1 << io_in_a_bits_source;
  wire          _GEN_0 = a_first_done & ~a_first_counter_1;
  wire          d_release_ack = io_in_d_bits_opcode == 3'h6;
  wire [511:0]  _GEN_1 = 512'h1 << io_in_d_bits_source;
  reg  [31:0]   watchdog;
  reg  [303:0]  inflight_1;
  reg  [1215:0] inflight_sizes_1;
  reg           d_first_counter_2;
  reg  [31:0]   watchdog_1;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      automatic logic [7:0][2:0] _GEN_2 =
        '{3'h4, 3'h5, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic [7:0][2:0] _GEN_3 =
        '{3'h4, 3'h4, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic            _GEN_4 = io_in_a_bits_source < 9'h130;
      automatic logic [5:0]      _GEN_5 = 6'h7 << io_in_a_bits_size;
      automatic logic [2:0]      _GEN_6 = io_in_a_bits_address[2:0] & ~(_GEN_5[2:0]);
      automatic logic            mask_size = io_in_a_bits_size == 2'h2;
      automatic logic            mask_acc =
        (&io_in_a_bits_size) | mask_size & ~(io_in_a_bits_address[2]);
      automatic logic            mask_acc_1 =
        (&io_in_a_bits_size) | mask_size & io_in_a_bits_address[2];
      automatic logic            mask_size_1 = io_in_a_bits_size == 2'h1;
      automatic logic            mask_eq_2 =
        ~(io_in_a_bits_address[2]) & ~(io_in_a_bits_address[1]);
      automatic logic            mask_acc_2 = mask_acc | mask_size_1 & mask_eq_2;
      automatic logic            mask_eq_3 =
        ~(io_in_a_bits_address[2]) & io_in_a_bits_address[1];
      automatic logic            mask_acc_3 = mask_acc | mask_size_1 & mask_eq_3;
      automatic logic            mask_eq_4 =
        io_in_a_bits_address[2] & ~(io_in_a_bits_address[1]);
      automatic logic            mask_acc_4 = mask_acc_1 | mask_size_1 & mask_eq_4;
      automatic logic            mask_eq_5 =
        io_in_a_bits_address[2] & io_in_a_bits_address[1];
      automatic logic            mask_acc_5 = mask_acc_1 | mask_size_1 & mask_eq_5;
      automatic logic [7:0]      mask =
        {mask_acc_5 | mask_eq_5 & io_in_a_bits_address[0],
         mask_acc_5 | mask_eq_5 & ~(io_in_a_bits_address[0]),
         mask_acc_4 | mask_eq_4 & io_in_a_bits_address[0],
         mask_acc_4 | mask_eq_4 & ~(io_in_a_bits_address[0]),
         mask_acc_3 | mask_eq_3 & io_in_a_bits_address[0],
         mask_acc_3 | mask_eq_3 & ~(io_in_a_bits_address[0]),
         mask_acc_2 | mask_eq_2 & io_in_a_bits_address[0],
         mask_acc_2 | mask_eq_2 & ~(io_in_a_bits_address[0])};
      automatic logic            _GEN_7 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_8 = io_in_a_bits_param > 3'h2;
      automatic logic            _GEN_9 = io_in_a_bits_mask != 8'hFF;
      automatic logic            _GEN_10 =
        io_in_a_valid & (&io_in_a_bits_opcode) & ~reset;
      automatic logic            _GEN_11 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_12 = _GEN_11 & ~_GEN_4;
      automatic logic            _GEN_13 = io_in_a_bits_address[27:26] != 2'h3;
      automatic logic            _GEN_14 = io_in_a_bits_mask != mask;
      automatic logic            _GEN_15 = _GEN_4 & ~_GEN_13;
      automatic logic            _GEN_16 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_17 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_18 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_19 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h3 & ~reset;
      automatic logic            _GEN_20 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h5 & ~reset;
      automatic logic            _GEN_21 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_22 = io_in_d_bits_source > 9'h12F;
      automatic logic            _GEN_23 = io_in_d_bits_size != 2'h3;
      automatic logic            _GEN_24 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_25 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h5 & ~reset;
      automatic logic            _GEN_26 = io_in_a_valid & a_first_counter & ~reset;
      automatic logic            _GEN_27 = io_in_d_valid & d_first_counter & ~reset;
      automatic logic [1215:0]   _GEN_28 = {1205'h0, io_in_d_bits_source, 2'h0};
      automatic logic [1215:0]   _GEN_29 = inflight_opcodes >> _GEN_28;
      automatic logic            _GEN_30 = io_in_a_valid & ~a_first_counter_1;
      automatic logic [303:0]    a_set_wo_ready = _GEN_30 ? _GEN[303:0] : 304'h0;
      automatic logic            _GEN_31 = io_in_d_valid & ~d_first_counter_1;
      automatic logic            _GEN_32 = _GEN_31 & ~d_release_ack;
      automatic logic            _GEN_33 = io_in_a_bits_source == io_in_d_bits_source;
      automatic logic            same_cycle_resp = _GEN_30 & _GEN_33;
      automatic logic [303:0]    _GEN_34 = {295'h0, io_in_d_bits_source};
      automatic logic            _GEN_35 = _GEN_32 & same_cycle_resp & ~reset;
      automatic logic            _GEN_36 = _GEN_32 & ~same_cycle_resp & ~reset;
      automatic logic [3:0]      _GEN_37 = {2'h0, io_in_d_bits_size};
      automatic logic            _GEN_38 =
        io_in_d_valid & ~d_first_counter_2 & d_release_ack & ~reset;
      automatic logic [303:0]    _GEN_39 = inflight >> io_in_a_bits_source;
      automatic logic [303:0]    _GEN_40 = inflight >> _GEN_34;
      automatic logic [1215:0]   _GEN_41 = inflight_sizes >> _GEN_28;
      automatic logic [303:0]    _GEN_42 = inflight_1 >> _GEN_34;
      automatic logic [1215:0]   _GEN_43 = inflight_sizes_1 >> _GEN_28;
      if (_GEN_7) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_7 & ~_GEN_4) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock carries invalid source ID (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_7 & ~(&io_in_a_bits_size)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_7 & (|_GEN_6)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_7 & _GEN_8) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock carries invalid grow param (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_7 & _GEN_9) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_7 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock is corrupt (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_10) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_10 & ~_GEN_4) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm carries invalid source ID (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_10 & ~(&io_in_a_bits_size)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_10 & (|_GEN_6)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_10 & _GEN_8) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm carries invalid grow param (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_10 & ~(|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_10 & _GEN_9) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_10 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm is corrupt (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_12) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_11 & _GEN_13) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_12) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get carries invalid source ID (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_11 & (|_GEN_6)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get address not aligned to size (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_11 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get carries invalid param (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_11 & _GEN_14) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get contains invalid mask (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_11 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get is corrupt (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16 & ~_GEN_15) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16 & ~_GEN_4) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull carries invalid source ID (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16 & (|_GEN_6)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull address not aligned to size (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull carries invalid param (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16 & _GEN_14) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull contains invalid mask (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & ~_GEN_15) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & ~_GEN_4) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & (|_GEN_6)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial address not aligned to size (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial carries invalid param (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & (|(io_in_a_bits_mask & ~mask))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial contains invalid mask (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & ~_GEN_4) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & (|_GEN_6)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & io_in_a_bits_param > 3'h4) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & _GEN_14) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & ~_GEN_4) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical carries invalid source ID (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & (|_GEN_6)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical address not aligned to size (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & io_in_a_bits_param[2]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical carries invalid opcode param (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & _GEN_14) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical contains invalid mask (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & ~_GEN_4) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint carries invalid source ID (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & (|_GEN_6)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint address not aligned to size (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & (|(io_in_a_bits_param[2:1]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint carries invalid opcode param (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & _GEN_14) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint contains invalid mask (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint is corrupt (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & ~reset & (&io_in_d_bits_opcode)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel has invalid opcode (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_21 & _GEN_22) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_21 & _GEN_23) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_24 & _GEN_22) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid source ID (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_24) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid sink ID (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_24 & _GEN_23) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant smaller than a beat (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25 & _GEN_22) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid source ID (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid sink ID (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25 & _GEN_23) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData smaller than a beat (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & io_in_d_bits_opcode == 3'h0 & ~reset & _GEN_22) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & io_in_d_bits_opcode == 3'h1 & ~reset & _GEN_22) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & io_in_d_bits_opcode == 3'h2 & ~reset & _GEN_22) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck carries invalid source ID (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_26 & io_in_a_bits_opcode != opcode) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel opcode changed within multibeat operation (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_26 & io_in_a_bits_param != param) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel param changed within multibeat operation (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_26 & io_in_a_bits_size != size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel size changed within multibeat operation (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_26 & io_in_a_bits_source != source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel source changed within multibeat operation (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_26 & io_in_a_bits_address != address) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel address changed with multibeat operation (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & io_in_d_bits_opcode != opcode_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel opcode changed within multibeat operation (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & (|param_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel param changed within multibeat operation (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & io_in_d_bits_size != size_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel size changed within multibeat operation (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & io_in_d_bits_source != source_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel source changed within multibeat operation (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & sink) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel sink changed with multibeat operation (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel denied changed with multibeat operation (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_0 & ~reset & _GEN_39[0]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel re-used a source ID (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & ~reset & ~(_GEN_40[0] | same_cycle_resp)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_35
          & ~(io_in_d_bits_opcode == _GEN_3[io_in_a_bits_opcode]
              | io_in_d_bits_opcode == _GEN_2[io_in_a_bits_opcode])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_35 & io_in_a_bits_size != io_in_d_bits_size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_36
          & ~(io_in_d_bits_opcode == _GEN_3[_GEN_29[3:1]]
              | io_in_d_bits_opcode == _GEN_2[_GEN_29[3:1]])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_36 & _GEN_37 != {1'h0, _GEN_41[3:1]}) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_31 & ~a_first_counter_1 & io_in_a_valid & _GEN_33 & ~d_release_ack & ~reset
          & ~(~io_in_d_ready | io_in_a_ready)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ready check\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(a_set_wo_ready != (_GEN_32 ? _GEN_1[303:0] : 304'h0)
              | a_set_wo_ready == 304'h0)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' and 'D' concurrent, despite minlatency > 0 (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight == 304'h0 | _plusarg_reader_out == 32'h0
              | watchdog < _plusarg_reader_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_38 & ~(_GEN_42[0])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_38 & _GEN_37 != {1'h0, _GEN_43[3:1]}) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight_1 == 304'h0 | _plusarg_reader_1_out == 32'h0
              | watchdog_1 < _plusarg_reader_1_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/devices/tilelink/Plic.scala:368:35)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    automatic logic d_first_done;
    automatic logic _GEN_44;
    d_first_done = io_in_d_ready & io_in_d_valid;
    _GEN_44 = d_first_done & ~d_first_counter;
    if (reset) begin
      a_first_counter <= 1'h0;
      d_first_counter <= 1'h0;
      inflight <= 304'h0;
      inflight_opcodes <= 1216'h0;
      inflight_sizes <= 1216'h0;
      a_first_counter_1 <= 1'h0;
      d_first_counter_1 <= 1'h0;
      watchdog <= 32'h0;
      inflight_1 <= 304'h0;
      inflight_sizes_1 <= 1216'h0;
      d_first_counter_2 <= 1'h0;
      watchdog_1 <= 32'h0;
    end
    else begin
      automatic logic          _GEN_45;
      automatic logic [4110:0] _GEN_46 = 4111'hF << {4100'h0, io_in_d_bits_source, 2'h0};
      automatic logic [1215:0] d_sizes_clr;
      automatic logic          _GEN_47;
      automatic logic [4098:0] _GEN_48 =
        {4095'h0, _GEN_0 ? {io_in_a_bits_opcode, 1'h1} : 4'h0}
        << {4088'h0, io_in_a_bits_source, 2'h0};
      automatic logic [4097:0] _GEN_49 =
        {4095'h0, _GEN_0 ? {io_in_a_bits_size, 1'h1} : 3'h0}
        << {4087'h0, io_in_a_bits_source, 2'h0};
      _GEN_45 = d_first_done & ~d_first_counter_1 & ~d_release_ack;
      d_sizes_clr = _GEN_45 ? _GEN_46[1215:0] : 1216'h0;
      _GEN_47 = d_first_done & ~d_first_counter_2 & d_release_ack;
      a_first_counter <= (~a_first_done | a_first_counter - 1'h1) & a_first_counter;
      d_first_counter <= (~d_first_done | d_first_counter - 1'h1) & d_first_counter;
      inflight <=
        (inflight | (_GEN_0 ? _GEN[303:0] : 304'h0))
        & ~(_GEN_45 ? _GEN_1[303:0] : 304'h0);
      inflight_opcodes <=
        (inflight_opcodes | (_GEN_0 ? _GEN_48[1215:0] : 1216'h0)) & ~d_sizes_clr;
      inflight_sizes <=
        (inflight_sizes | (_GEN_0 ? _GEN_49[1215:0] : 1216'h0)) & ~d_sizes_clr;
      a_first_counter_1 <= (~a_first_done | a_first_counter_1 - 1'h1) & a_first_counter_1;
      d_first_counter_1 <= (~d_first_done | d_first_counter_1 - 1'h1) & d_first_counter_1;
      if (a_first_done | d_first_done)
        watchdog <= 32'h0;
      else
        watchdog <= watchdog + 32'h1;
      inflight_1 <= inflight_1 & ~(_GEN_47 ? _GEN_1[303:0] : 304'h0);
      inflight_sizes_1 <= inflight_sizes_1 & ~(_GEN_47 ? _GEN_46[1215:0] : 1216'h0);
      d_first_counter_2 <= (~d_first_done | d_first_counter_2 - 1'h1) & d_first_counter_2;
      if (d_first_done)
        watchdog_1 <= 32'h0;
      else
        watchdog_1 <= watchdog_1 + 32'h1;
    end
    if (a_first_done & ~a_first_counter) begin
      opcode <= io_in_a_bits_opcode;
      param <= io_in_a_bits_param;
      size <= io_in_a_bits_size;
      source <= io_in_a_bits_source;
      address <= io_in_a_bits_address;
    end
    if (_GEN_44) begin
      opcode_1 <= io_in_d_bits_opcode;
      param_1 <= 2'h0;
      size_1 <= io_in_d_bits_size;
      source_1 <= io_in_d_bits_source;
    end
    sink <= ~_GEN_44 & sink;
    denied <= ~_GEN_44 & denied;
  end // always @(posedge)
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader (
    .out (_plusarg_reader_out)
  );
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader_1 (
    .out (_plusarg_reader_1_out)
  );
endmodule

module LevelGateway(
  input  clock,
         reset,
         io_interrupt,
         io_plic_ready,
         io_plic_complete,
  output io_plic_valid
);

  reg inFlight;
  always @(posedge clock) begin
    if (reset)
      inFlight <= 1'h0;
    else
      inFlight <= ~io_plic_complete & (io_interrupt & io_plic_ready | inFlight);
  end // always @(posedge)
  assign io_plic_valid = io_interrupt & ~inFlight;
endmodule

module PLICFanIn(
  input  [1:0] io_prio_0,
               io_prio_1,
               io_ip,
  output [1:0] io_dev,
               io_max
);

  wire [2:0] effectivePriority_1 = {io_ip[0], io_prio_0};
  wire       _GEN = effectivePriority_1 < 3'h5;
  wire [2:0] _GEN_0 = _GEN ? 3'h4 : effectivePriority_1;
  wire       _GEN_1 = _GEN_0 >= {io_ip[1], io_prio_1};
  assign io_dev = _GEN_1 ? {1'h0, ~_GEN} : 2'h2;
  assign io_max = _GEN_1 ? _GEN_0[1:0] : io_prio_1;
endmodule

module Queue1_RegMapperInput_i23_m8(
  input         clock,
                reset,
                io_enq_valid,
                io_enq_bits_read,
  input  [22:0] io_enq_bits_index,
  input  [63:0] io_enq_bits_data,
  input  [7:0]  io_enq_bits_mask,
  input  [8:0]  io_enq_bits_extra_tlrr_extra_source,
  input  [1:0]  io_enq_bits_extra_tlrr_extra_size,
  input         io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
                io_deq_bits_read,
  output [22:0] io_deq_bits_index,
  output [63:0] io_deq_bits_data,
  output [7:0]  io_deq_bits_mask,
  output [8:0]  io_deq_bits_extra_tlrr_extra_source,
  output [1:0]  io_deq_bits_extra_tlrr_extra_size
);

  reg [106:0] ram;
  reg         full;
  always @(posedge clock) begin
    automatic logic do_enq;
    do_enq = ~full & io_enq_valid;
    if (do_enq)
      ram <=
        {io_enq_bits_extra_tlrr_extra_size,
         io_enq_bits_extra_tlrr_extra_source,
         io_enq_bits_mask,
         io_enq_bits_data,
         io_enq_bits_index,
         io_enq_bits_read};
    if (reset)
      full <= 1'h0;
    else if (do_enq != (io_deq_ready & full))
      full <= do_enq;
  end // always @(posedge)
  assign io_enq_ready = ~full;
  assign io_deq_valid = full;
  assign io_deq_bits_read = ram[0];
  assign io_deq_bits_index = ram[23:1];
  assign io_deq_bits_data = ram[87:24];
  assign io_deq_bits_mask = ram[95:88];
  assign io_deq_bits_extra_tlrr_extra_source = ram[104:96];
  assign io_deq_bits_extra_tlrr_extra_size = ram[106:105];
endmodule

module TLPLIC(
  input         clock,
                reset,
                auto_int_in_0,
                auto_int_in_1,
                auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
                auto_in_a_bits_param,
  input  [1:0]  auto_in_a_bits_size,
  input  [8:0]  auto_in_a_bits_source,
  input  [27:0] auto_in_a_bits_address,
  input  [7:0]  auto_in_a_bits_mask,
  input  [63:0] auto_in_a_bits_data,
  input         auto_in_a_bits_corrupt,
                auto_in_d_ready,
  output        auto_int_out_1_0,
                auto_int_out_0_0,
                auto_in_a_ready,
                auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
  output [1:0]  auto_in_d_bits_size,
  output [8:0]  auto_in_d_bits_source,
  output [63:0] auto_in_d_bits_data
);

  wire        out_woready_8;
  wire        out_woready_11;
  wire        _GEN;
  wire        out_backSel_20;
  wire        out_backSel_16;
  wire        completer_0;
  wire        completer_1;
  wire [1:0]  completerDev;
  wire        _out_back_front_q_io_enq_ready;
  wire        _out_back_front_q_io_deq_valid;
  wire        _out_back_front_q_io_deq_bits_read;
  wire [22:0] _out_back_front_q_io_deq_bits_index;
  wire [63:0] _out_back_front_q_io_deq_bits_data;
  wire [7:0]  _out_back_front_q_io_deq_bits_mask;
  wire [8:0]  _out_back_front_q_io_deq_bits_extra_tlrr_extra_source;
  wire [1:0]  _out_back_front_q_io_deq_bits_extra_tlrr_extra_size;
  wire [1:0]  _fanin_1_io_dev;
  wire [1:0]  _fanin_1_io_max;
  wire [1:0]  _fanin_io_dev;
  wire [1:0]  _fanin_io_max;
  wire        _gateways_gateway_1_io_plic_valid;
  wire        _gateways_gateway_io_plic_valid;
  reg  [1:0]  priority_0;
  reg  [1:0]  priority_1;
  reg  [1:0]  threshold_0;
  reg  [1:0]  threshold_1;
  reg         pending_0;
  reg         pending_1;
  reg  [1:0]  enables_0_0;
  reg  [1:0]  enables_1_0;
  reg  [1:0]  maxDevs_0;
  reg  [1:0]  maxDevs_1;
  wire [1:0]  pendingUInt = {pending_1, pending_0};
  reg  [1:0]  intnodeOut_0_REG;
  reg  [1:0]  intnodeOut_0_REG_1;
  wire [3:0]  _GEN_0 = 4'h1 << completerDev;
  wire [1:0]  _GEN_1 = completer_0 | completer_1 ? _GEN_0[2:1] : 2'h0;
  wire        _GEN_2 =
    {_out_back_front_q_io_deq_bits_index[22:19],
     _out_back_front_q_io_deq_bits_index[17:11],
     _out_back_front_q_io_deq_bits_index[8:5],
     _out_back_front_q_io_deq_bits_index[3:1]} == 18'h0;
  wire [31:0] _GEN_3 =
    {{8{_out_back_front_q_io_deq_bits_mask[7]}},
     {8{_out_back_front_q_io_deq_bits_mask[6]}},
     {8{_out_back_front_q_io_deq_bits_mask[5]}},
     {8{_out_back_front_q_io_deq_bits_mask[4]}}};
  wire        claimer_1 = _GEN & out_backSel_20 & _GEN_2 & (|_GEN_3);
  assign completerDev = _out_back_front_q_io_deq_bits_data[33:32];
  wire [2:0]  _GEN_4 = {1'h0, completerDev};
  wire [2:0]  _GEN_5 = {enables_1_0, 1'h0} >> _GEN_4;
  assign completer_1 = out_woready_8 & (&_GEN_3) & _GEN_5[0];
  wire        claimer_0 = _GEN & out_backSel_16 & _GEN_2 & (|_GEN_3);
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      automatic logic [1:0] _GEN_6 = {claimer_1, claimer_0};
      automatic logic [1:0] _GEN_7 = {completer_1, completer_0};
      if (~reset & (|(_GEN_6 & _GEN_6 - 2'h1))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Plic.scala:251 assert((claimer.asUInt & (claimer.asUInt - 1.U)) === 0.U) // One-Hot\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & (|(_GEN_7 & _GEN_7 - 2'h1))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Plic.scala:268 assert((completer.asUInt & (completer.asUInt - 1.U)) === 0.U) // One-Hot\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  wire [2:0]  _GEN_8 = {enables_0_0, 1'h0} >> _GEN_4;
  assign completer_0 = out_woready_11 & (&_GEN_3) & _GEN_8[0];
  wire [4:0]  out_oindex =
    {_out_back_front_q_io_deq_bits_index[18],
     _out_back_front_q_io_deq_bits_index[10:9],
     _out_back_front_q_io_deq_bits_index[4],
     _out_back_front_q_io_deq_bits_index[0]};
  wire [4:0]  _GEN_9 =
    {_out_back_front_q_io_deq_bits_index[18],
     _out_back_front_q_io_deq_bits_index[10:9],
     _out_back_front_q_io_deq_bits_index[4],
     _out_back_front_q_io_deq_bits_index[0]};
  assign out_backSel_16 = _GEN_9 == 5'h10;
  assign out_backSel_20 = _GEN_9 == 5'h14;
  wire        _GEN_10 = _out_back_front_q_io_deq_valid & auto_in_d_ready;
  assign _GEN = _GEN_10 & _out_back_front_q_io_deq_bits_read;
  wire        _GEN_11 = _GEN_10 & ~_out_back_front_q_io_deq_bits_read;
  assign out_woready_11 = _GEN_11 & out_backSel_16 & _GEN_2;
  assign out_woready_8 = _GEN_11 & out_backSel_20 & _GEN_2;
  wire        _GEN_12 = out_oindex == 5'h0;
  wire        _GEN_13 = out_oindex == 5'h1;
  wire        _GEN_14 = out_oindex == 5'h4;
  wire        _GEN_15 = out_oindex == 5'h8;
  wire        _GEN_16 = out_oindex == 5'hA;
  wire        _GEN_17 = out_oindex == 5'h10;
  wire        _GEN_18 = out_oindex == 5'h14;
  wire [2:0]  nodeIn_d_bits_opcode = {2'h0, _out_back_front_q_io_deq_bits_read};
  always @(posedge clock) begin
    if (_GEN_11 & _GEN_9 == 5'h0 & _GEN_2 & _out_back_front_q_io_deq_bits_mask[4])
      priority_0 <= completerDev;
    if (_GEN_11 & _GEN_9 == 5'h1 & _GEN_2 & _out_back_front_q_io_deq_bits_mask[0])
      priority_1 <= _out_back_front_q_io_deq_bits_data[1:0];
    if (out_woready_11 & _out_back_front_q_io_deq_bits_mask[0])
      threshold_0 <= _out_back_front_q_io_deq_bits_data[1:0];
    if (out_woready_8 & _out_back_front_q_io_deq_bits_mask[0])
      threshold_1 <= _out_back_front_q_io_deq_bits_data[1:0];
    if (_GEN_11 & _GEN_9 == 5'h8 & _GEN_2 & _out_back_front_q_io_deq_bits_mask[0])
      enables_0_0 <= _out_back_front_q_io_deq_bits_data[2:1];
    if (_GEN_11 & _GEN_9 == 5'hA & _GEN_2 & _out_back_front_q_io_deq_bits_mask[0])
      enables_1_0 <= _out_back_front_q_io_deq_bits_data[2:1];
    maxDevs_0 <= _fanin_io_dev;
    maxDevs_1 <= _fanin_1_io_dev;
    intnodeOut_0_REG <= _fanin_io_max;
    intnodeOut_0_REG_1 <= _fanin_1_io_max;
    if (reset) begin
      pending_0 <= 1'h0;
      pending_1 <= 1'h0;
    end
    else begin
      automatic logic [1:0] claiming =
        (claimer_0 ? maxDevs_0 : 2'h0) | (claimer_1 ? maxDevs_1 : 2'h0);
      automatic logic       claimedDevs_1;
      automatic logic       claimedDevs_2;
      claimedDevs_1 = claiming == 2'h1;
      claimedDevs_2 = claiming == 2'h2;
      if (claimedDevs_1 | _gateways_gateway_io_plic_valid)
        pending_0 <= ~claimedDevs_1;
      if (claimedDevs_2 | _gateways_gateway_1_io_plic_valid)
        pending_1 <= ~claimedDevs_2;
    end
  end // always @(posedge)
  TLMonitor_26 monitor (
    .clock                (clock),
    .reset                (reset),
    .io_in_a_ready        (_out_back_front_q_io_enq_ready),
    .io_in_a_valid        (auto_in_a_valid),
    .io_in_a_bits_opcode  (auto_in_a_bits_opcode),
    .io_in_a_bits_param   (auto_in_a_bits_param),
    .io_in_a_bits_size    (auto_in_a_bits_size),
    .io_in_a_bits_source  (auto_in_a_bits_source),
    .io_in_a_bits_address (auto_in_a_bits_address),
    .io_in_a_bits_mask    (auto_in_a_bits_mask),
    .io_in_a_bits_corrupt (auto_in_a_bits_corrupt),
    .io_in_d_ready        (auto_in_d_ready),
    .io_in_d_valid        (_out_back_front_q_io_deq_valid),
    .io_in_d_bits_opcode  (nodeIn_d_bits_opcode),
    .io_in_d_bits_size    (_out_back_front_q_io_deq_bits_extra_tlrr_extra_size),
    .io_in_d_bits_source  (_out_back_front_q_io_deq_bits_extra_tlrr_extra_source)
  );
  LevelGateway gateways_gateway (
    .clock            (clock),
    .reset            (reset),
    .io_interrupt     (auto_int_in_0),
    .io_plic_ready    (~pending_0),
    .io_plic_complete (_GEN_1[0]),
    .io_plic_valid    (_gateways_gateway_io_plic_valid)
  );
  LevelGateway gateways_gateway_1 (
    .clock            (clock),
    .reset            (reset),
    .io_interrupt     (auto_int_in_1),
    .io_plic_ready    (~pending_1),
    .io_plic_complete (_GEN_1[1]),
    .io_plic_valid    (_gateways_gateway_1_io_plic_valid)
  );
  PLICFanIn fanin (
    .io_prio_0 (priority_0),
    .io_prio_1 (priority_1),
    .io_ip     (enables_0_0 & pendingUInt),
    .io_dev    (_fanin_io_dev),
    .io_max    (_fanin_io_max)
  );
  PLICFanIn fanin_1 (
    .io_prio_0 (priority_0),
    .io_prio_1 (priority_1),
    .io_ip     (enables_1_0 & pendingUInt),
    .io_dev    (_fanin_1_io_dev),
    .io_max    (_fanin_1_io_max)
  );
  Queue1_RegMapperInput_i23_m8 out_back_front_q (
    .clock                               (clock),
    .reset                               (reset),
    .io_enq_valid                        (auto_in_a_valid),
    .io_enq_bits_read                    (auto_in_a_bits_opcode == 3'h4),
    .io_enq_bits_index                   (auto_in_a_bits_address[25:3]),
    .io_enq_bits_data                    (auto_in_a_bits_data),
    .io_enq_bits_mask                    (auto_in_a_bits_mask),
    .io_enq_bits_extra_tlrr_extra_source (auto_in_a_bits_source),
    .io_enq_bits_extra_tlrr_extra_size   (auto_in_a_bits_size),
    .io_deq_ready                        (auto_in_d_ready),
    .io_enq_ready                        (_out_back_front_q_io_enq_ready),
    .io_deq_valid                        (_out_back_front_q_io_deq_valid),
    .io_deq_bits_read                    (_out_back_front_q_io_deq_bits_read),
    .io_deq_bits_index                   (_out_back_front_q_io_deq_bits_index),
    .io_deq_bits_data                    (_out_back_front_q_io_deq_bits_data),
    .io_deq_bits_mask                    (_out_back_front_q_io_deq_bits_mask),
    .io_deq_bits_extra_tlrr_extra_source
      (_out_back_front_q_io_deq_bits_extra_tlrr_extra_source),
    .io_deq_bits_extra_tlrr_extra_size
      (_out_back_front_q_io_deq_bits_extra_tlrr_extra_size)
  );
  assign auto_int_out_1_0 = intnodeOut_0_REG_1 > threshold_1;
  assign auto_int_out_0_0 = intnodeOut_0_REG > threshold_0;
  assign auto_in_a_ready = _out_back_front_q_io_enq_ready;
  assign auto_in_d_valid = _out_back_front_q_io_deq_valid;
  assign auto_in_d_bits_opcode = nodeIn_d_bits_opcode;
  assign auto_in_d_bits_size = _out_back_front_q_io_deq_bits_extra_tlrr_extra_size;
  assign auto_in_d_bits_source = _out_back_front_q_io_deq_bits_extra_tlrr_extra_source;
  assign auto_in_d_bits_data =
    ~(_GEN_12 | _GEN_13 | _GEN_14 | _GEN_15 | _GEN_16 | _GEN_17 | _GEN_18) | _GEN_2
      ? (_GEN_12
           ? {30'h0, priority_0, 32'h0}
           : _GEN_13
               ? {62'h0, priority_1}
               : _GEN_14
                   ? {61'h0, pending_1, pending_0, 1'h0}
                   : _GEN_15
                       ? {61'h0, enables_0_0, 1'h0}
                       : _GEN_16
                           ? {61'h0, enables_1_0, 1'h0}
                           : _GEN_17
                               ? {30'h0, maxDevs_0, 30'h0, threshold_0}
                               : _GEN_18 ? {30'h0, maxDevs_1, 30'h0, threshold_1} : 64'h0)
      : 64'h0;
endmodule

module PLICClockSinkDomain(
  input         auto_plic_int_in_0,
                auto_plic_int_in_1,
                auto_plic_in_a_valid,
  input  [2:0]  auto_plic_in_a_bits_opcode,
                auto_plic_in_a_bits_param,
  input  [1:0]  auto_plic_in_a_bits_size,
  input  [8:0]  auto_plic_in_a_bits_source,
  input  [27:0] auto_plic_in_a_bits_address,
  input  [7:0]  auto_plic_in_a_bits_mask,
  input  [63:0] auto_plic_in_a_bits_data,
  input         auto_plic_in_a_bits_corrupt,
                auto_plic_in_d_ready,
                auto_clock_in_clock,
                auto_clock_in_reset,
  output        auto_plic_in_a_ready,
                auto_plic_in_d_valid,
  output [2:0]  auto_plic_in_d_bits_opcode,
  output [1:0]  auto_plic_in_d_bits_size,
  output [8:0]  auto_plic_in_d_bits_source,
  output [63:0] auto_plic_in_d_bits_data,
  output        auto_int_in_clock_xing_out_1_sync_0,
                auto_int_in_clock_xing_out_0_sync_0
);

  wire _plic_auto_int_out_1_0;
  wire _plic_auto_int_out_0_0;
  TLPLIC plic (
    .clock                  (auto_clock_in_clock),
    .reset                  (auto_clock_in_reset),
    .auto_int_in_0          (auto_plic_int_in_0),
    .auto_int_in_1          (auto_plic_int_in_1),
    .auto_in_a_valid        (auto_plic_in_a_valid),
    .auto_in_a_bits_opcode  (auto_plic_in_a_bits_opcode),
    .auto_in_a_bits_param   (auto_plic_in_a_bits_param),
    .auto_in_a_bits_size    (auto_plic_in_a_bits_size),
    .auto_in_a_bits_source  (auto_plic_in_a_bits_source),
    .auto_in_a_bits_address (auto_plic_in_a_bits_address),
    .auto_in_a_bits_mask    (auto_plic_in_a_bits_mask),
    .auto_in_a_bits_data    (auto_plic_in_a_bits_data),
    .auto_in_a_bits_corrupt (auto_plic_in_a_bits_corrupt),
    .auto_in_d_ready        (auto_plic_in_d_ready),
    .auto_int_out_1_0       (_plic_auto_int_out_1_0),
    .auto_int_out_0_0       (_plic_auto_int_out_0_0),
    .auto_in_a_ready        (auto_plic_in_a_ready),
    .auto_in_d_valid        (auto_plic_in_d_valid),
    .auto_in_d_bits_opcode  (auto_plic_in_d_bits_opcode),
    .auto_in_d_bits_size    (auto_plic_in_d_bits_size),
    .auto_in_d_bits_source  (auto_plic_in_d_bits_source),
    .auto_in_d_bits_data    (auto_plic_in_d_bits_data)
  );
  IntSyncCrossingSource_n1x1 intsource (
    .clock           (auto_clock_in_clock),
    .reset           (auto_clock_in_reset),
    .auto_in_0       (_plic_auto_int_out_0_0),
    .auto_out_sync_0 (auto_int_in_clock_xing_out_0_sync_0)
  );
  IntSyncCrossingSource_n1x1 intsource_1 (
    .clock           (auto_clock_in_clock),
    .reset           (auto_clock_in_reset),
    .auto_in_0       (_plic_auto_int_out_1_0),
    .auto_out_sync_0 (auto_int_in_clock_xing_out_1_sync_0)
  );
endmodule

module TLMonitor_27(
  input       clock,
              reset,
              io_in_a_ready,
              io_in_a_valid,
  input [2:0] io_in_a_bits_opcode,
  input [8:0] io_in_a_bits_address,
  input       io_in_d_ready,
              io_in_d_valid,
  input [2:0] io_in_d_bits_opcode,
  input [1:0] io_in_d_bits_param,
              io_in_d_bits_size,
  input       io_in_d_bits_sink,
              io_in_d_bits_denied,
              io_in_d_bits_corrupt
);

  wire [31:0] _plusarg_reader_1_out;
  wire [31:0] _plusarg_reader_out;
  wire        a_first_done = io_in_a_ready & io_in_a_valid;
  reg         a_first_counter;
  reg  [2:0]  opcode;
  reg  [2:0]  param;
  reg  [1:0]  size;
  reg         source;
  reg  [8:0]  address;
  reg         d_first_counter;
  reg  [2:0]  opcode_1;
  reg  [1:0]  param_1;
  reg  [1:0]  size_1;
  reg         source_1;
  reg         sink;
  reg         denied;
  reg  [1:0]  inflight;
  reg  [3:0]  inflight_opcodes;
  reg  [3:0]  inflight_sizes;
  reg         a_first_counter_1;
  reg         d_first_counter_1;
  wire        a_set = a_first_done & ~a_first_counter_1;
  wire        d_release_ack = io_in_d_bits_opcode == 3'h6;
  reg  [31:0] watchdog;
  reg  [1:0]  inflight_1;
  reg  [3:0]  inflight_sizes_1;
  reg         d_first_counter_2;
  reg  [31:0] watchdog_1;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      automatic logic [7:0][2:0] _GEN = '{3'h4, 3'h5, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic [7:0][2:0] _GEN_0 =
        '{3'h4, 3'h4, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic            _GEN_1 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_2 = io_in_a_valid & (&io_in_a_bits_opcode) & ~reset;
      automatic logic            _GEN_3 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_4 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_5 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h3 & ~reset;
      automatic logic            _GEN_6 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h5 & ~reset;
      automatic logic            _GEN_7 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_8 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_9 = io_in_d_bits_param == 2'h2;
      automatic logic            _GEN_10 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h5 & ~reset;
      automatic logic            _GEN_11 = ~io_in_d_bits_denied | io_in_d_bits_corrupt;
      automatic logic            _GEN_12 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_13 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_14 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_15 = io_in_a_valid & a_first_counter & ~reset;
      automatic logic            _GEN_16 = io_in_d_valid & d_first_counter & ~reset;
      automatic logic            _GEN_17 = io_in_a_valid & ~a_first_counter_1;
      automatic logic            _GEN_18 = io_in_d_valid & ~d_first_counter_1;
      automatic logic            _GEN_19 = _GEN_18 & ~d_release_ack;
      automatic logic            _GEN_20 = _GEN_19 & _GEN_17 & ~reset;
      automatic logic            _GEN_21 = _GEN_19 & ~_GEN_17 & ~reset;
      automatic logic [3:0]      _GEN_22 = {2'h0, io_in_d_bits_size};
      automatic logic            _GEN_23 =
        io_in_d_valid & ~d_first_counter_2 & d_release_ack & ~reset;
      if (_GEN_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_1 & (|(io_in_a_bits_address[1:0]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_2 & (|(io_in_a_bits_address[1:0]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_a_valid & io_in_a_bits_opcode == 3'h4 & ~reset
          & (|(io_in_a_bits_address[1:0]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get address not aligned to size (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_a_valid & io_in_a_bits_opcode == 3'h0 & ~reset
          & (|(io_in_a_bits_address[1:0]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull address not aligned to size (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_3) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_3 & (|(io_in_a_bits_address[1:0]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial address not aligned to size (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_4) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_4 & (|(io_in_a_bits_address[1:0]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_5) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_5 & (|(io_in_a_bits_address[1:0]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical address not aligned to size (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_6) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_6 & (|(io_in_a_bits_address[1:0]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint address not aligned to size (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & ~reset & (&io_in_d_bits_opcode)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel has invalid opcode (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_7 & ~(io_in_d_bits_size[1])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_7 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_7 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck is corrupt (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_7 & io_in_d_bits_denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck is denied (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_8) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid sink ID (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_8 & ~(io_in_d_bits_size[1])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant smaller than a beat (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_8 & (&io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid cap param (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_8 & _GEN_9) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries toN param (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_8 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant is corrupt (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_10) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid sink ID (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_10 & ~(io_in_d_bits_size[1])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData smaller than a beat (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_10 & (&io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid cap param (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_10 & _GEN_9) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries toN param (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_10 & ~_GEN_11) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData is denied but not corrupt (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_12 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck carries invalid param (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_12 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck is corrupt (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_13 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData carries invalid param (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_13 & ~_GEN_11) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData is denied but not corrupt (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck carries invalid param (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck is corrupt (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & io_in_a_bits_opcode != opcode) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel opcode changed within multibeat operation (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & (|param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel param changed within multibeat operation (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & size != 2'h2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel size changed within multibeat operation (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel source changed within multibeat operation (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & io_in_a_bits_address != address) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel address changed with multibeat operation (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16 & io_in_d_bits_opcode != opcode_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel opcode changed within multibeat operation (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16 & io_in_d_bits_param != param_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel param changed within multibeat operation (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16 & io_in_d_bits_size != size_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel size changed within multibeat operation (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16 & source_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel source changed within multibeat operation (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16 & io_in_d_bits_sink != sink) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel sink changed with multibeat operation (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16 & io_in_d_bits_denied != denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel denied changed with multibeat operation (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (a_set & ~reset & inflight[0]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel re-used a source ID (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & ~reset & ~(inflight[0] | _GEN_17)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20
          & ~(io_in_d_bits_opcode == _GEN_0[io_in_a_bits_opcode]
              | io_in_d_bits_opcode == _GEN[io_in_a_bits_opcode])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & io_in_d_bits_size != 2'h2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_21
          & ~(io_in_d_bits_opcode == _GEN_0[inflight_opcodes[3:1]]
              | io_in_d_bits_opcode == _GEN[inflight_opcodes[3:1]])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_21 & _GEN_22 != {1'h0, inflight_sizes[3:1]}) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & ~a_first_counter_1 & io_in_a_valid & ~d_release_ack & ~reset
          & ~(~io_in_d_ready | io_in_a_ready)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ready check\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight == 2'h0 | _plusarg_reader_out == 32'h0
              | watchdog < _plusarg_reader_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_23 & ~(inflight_1[0])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_23 & _GEN_22 != {1'h0, inflight_sizes_1[3:1]}) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight_1 == 2'h0 | _plusarg_reader_1_out == 32'h0
              | watchdog_1 < _plusarg_reader_1_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/devices/debug/Debug.scala:679:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    automatic logic _GEN_24 = a_first_done & ~a_first_counter;
    automatic logic d_first_done;
    automatic logic _GEN_25;
    d_first_done = io_in_d_ready & io_in_d_valid;
    _GEN_25 = d_first_done & ~d_first_counter;
    if (reset) begin
      a_first_counter <= 1'h0;
      d_first_counter <= 1'h0;
      inflight <= 2'h0;
      inflight_opcodes <= 4'h0;
      inflight_sizes <= 4'h0;
      a_first_counter_1 <= 1'h0;
      d_first_counter_1 <= 1'h0;
      watchdog <= 32'h0;
      inflight_1 <= 2'h0;
      inflight_sizes_1 <= 4'h0;
      d_first_counter_2 <= 1'h0;
      watchdog_1 <= 32'h0;
    end
    else begin
      automatic logic       d_clr;
      automatic logic [3:0] d_sizes_clr;
      automatic logic       d_clr_1;
      d_clr = d_first_done & ~d_first_counter_1 & ~d_release_ack;
      d_sizes_clr = {4{d_clr}};
      d_clr_1 = d_first_done & ~d_first_counter_2 & d_release_ack;
      a_first_counter <= (~a_first_done | a_first_counter - 1'h1) & a_first_counter;
      d_first_counter <= (~d_first_done | d_first_counter - 1'h1) & d_first_counter;
      inflight <= {1'h0, (inflight[0] | a_set) & ~d_clr};
      inflight_opcodes <=
        (inflight_opcodes | (a_set ? {io_in_a_bits_opcode, 1'h1} : 4'h0)) & ~d_sizes_clr;
      inflight_sizes <=
        (inflight_sizes | (a_set ? {1'h0, a_set ? 3'h5 : 3'h0} : 4'h0)) & ~d_sizes_clr;
      a_first_counter_1 <= (~a_first_done | a_first_counter_1 - 1'h1) & a_first_counter_1;
      d_first_counter_1 <= (~d_first_done | d_first_counter_1 - 1'h1) & d_first_counter_1;
      if (a_first_done | d_first_done)
        watchdog <= 32'h0;
      else
        watchdog <= watchdog + 32'h1;
      inflight_1 <= {1'h0, inflight_1[0] & ~d_clr_1};
      inflight_sizes_1 <= inflight_sizes_1 & ~{4{d_clr_1}};
      d_first_counter_2 <= (~d_first_done | d_first_counter_2 - 1'h1) & d_first_counter_2;
      if (d_first_done)
        watchdog_1 <= 32'h0;
      else
        watchdog_1 <= watchdog_1 + 32'h1;
    end
    if (_GEN_24) begin
      opcode <= io_in_a_bits_opcode;
      param <= 3'h0;
      size <= 2'h2;
      address <= io_in_a_bits_address;
    end
    source <= ~_GEN_24 & source;
    if (_GEN_25) begin
      opcode_1 <= io_in_d_bits_opcode;
      param_1 <= io_in_d_bits_param;
      size_1 <= io_in_d_bits_size;
      sink <= io_in_d_bits_sink;
      denied <= io_in_d_bits_denied;
    end
    source_1 <= ~_GEN_25 & source_1;
  end // always @(posedge)
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader (
    .out (_plusarg_reader_out)
  );
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader_1 (
    .out (_plusarg_reader_1_out)
  );
endmodule

module TLXbar_dmixbar_i1_o2_a9d32s1k1z2u(
  input         clock,
                reset,
                auto_anon_in_a_valid,
  input  [2:0]  auto_anon_in_a_bits_opcode,
  input  [8:0]  auto_anon_in_a_bits_address,
  input  [31:0] auto_anon_in_a_bits_data,
  input         auto_anon_in_d_ready,
                auto_anon_out_1_a_ready,
                auto_anon_out_1_d_valid,
  input  [2:0]  auto_anon_out_1_d_bits_opcode,
  input  [31:0] auto_anon_out_1_d_bits_data,
  input         auto_anon_out_0_a_ready,
                auto_anon_out_0_d_valid,
  input  [2:0]  auto_anon_out_0_d_bits_opcode,
  input  [1:0]  auto_anon_out_0_d_bits_param,
                auto_anon_out_0_d_bits_size,
  input         auto_anon_out_0_d_bits_sink,
                auto_anon_out_0_d_bits_denied,
  input  [31:0] auto_anon_out_0_d_bits_data,
  input         auto_anon_out_0_d_bits_corrupt,
  output        auto_anon_in_a_ready,
                auto_anon_in_d_valid,
                auto_anon_in_d_bits_denied,
  output [31:0] auto_anon_in_d_bits_data,
  output        auto_anon_in_d_bits_corrupt,
                auto_anon_out_1_a_valid,
  output [2:0]  auto_anon_out_1_a_bits_opcode,
  output [6:0]  auto_anon_out_1_a_bits_address,
  output [31:0] auto_anon_out_1_a_bits_data,
  output        auto_anon_out_1_d_ready,
                auto_anon_out_0_a_valid,
  output [2:0]  auto_anon_out_0_a_bits_opcode,
  output [8:0]  auto_anon_out_0_a_bits_address,
  output [31:0] auto_anon_out_0_a_bits_data,
  output        auto_anon_out_0_d_ready
);

  wire [4:0] _GEN = auto_anon_in_a_bits_address[6:2] ^ 5'h11;
  wire       requestAIO_0_0 =
    auto_anon_in_a_bits_address[8:6] == 3'h0
    | {auto_anon_in_a_bits_address[8:7], _GEN[4:2], _GEN[0]} == 6'h0
    | {auto_anon_in_a_bits_address[8:7], auto_anon_in_a_bits_address[6:3] ^ 4'hB} == 6'h0
    | {auto_anon_in_a_bits_address[8:7], ~(auto_anon_in_a_bits_address[6:5])} == 4'h0
    | {auto_anon_in_a_bits_address[8], ~(auto_anon_in_a_bits_address[7])} == 2'h0
    | auto_anon_in_a_bits_address[8];
  wire       requestAIO_0_1 =
    {auto_anon_in_a_bits_address[8:7],
     auto_anon_in_a_bits_address[6:4] ^ 3'h4,
     auto_anon_in_a_bits_address[2]} == 6'h0
    | {auto_anon_in_a_bits_address[8:7], auto_anon_in_a_bits_address[6:3] ^ 4'hA} == 6'h0;
  wire       in_0_a_ready =
    requestAIO_0_0 & auto_anon_out_0_a_ready | requestAIO_0_1 & auto_anon_out_1_a_ready;
  reg        beatsLeft;
  wire [1:0] readys_valid = {auto_anon_out_1_d_valid, auto_anon_out_0_d_valid};
  reg  [1:0] readys_mask;
  wire [1:0] _GEN_0 = readys_valid & ~readys_mask;
  wire [1:0] readys_readys =
    ~({readys_mask[1], _GEN_0[1] | readys_mask[0]}
      & ({_GEN_0[0], auto_anon_out_1_d_valid} | _GEN_0));
  wire       winner_0 = readys_readys[0] & auto_anon_out_0_d_valid;
  wire       winner_1 = readys_readys[1] & auto_anon_out_1_d_valid;
  wire       _GEN_1 = auto_anon_out_0_d_valid | auto_anon_out_1_d_valid;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (~reset & ~(~winner_0 | ~winner_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Arbiter.scala:77 assert((prefixOR zip winner) map { case (p,w) => !p || !w } reduce {_ && _})\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_GEN_1 | winner_0 | winner_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Arbiter.scala:79 assert (!valids.reduce(_||_) || winner.reduce(_||_))\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  reg        state_0;
  reg        state_1;
  wire       muxState_0 = beatsLeft ? state_0 : winner_0;
  wire       muxState_1 = beatsLeft ? state_1 : winner_1;
  wire       in_0_d_valid =
    beatsLeft
      ? state_0 & auto_anon_out_0_d_valid | state_1 & auto_anon_out_1_d_valid
      : _GEN_1;
  wire       in_0_d_bits_corrupt = muxState_0 & auto_anon_out_0_d_bits_corrupt;
  wire       in_0_d_bits_denied = muxState_0 & auto_anon_out_0_d_bits_denied;
  always @(posedge clock) begin
    if (reset) begin
      beatsLeft <= 1'h0;
      readys_mask <= 2'h3;
      state_0 <= 1'h0;
      state_1 <= 1'h0;
    end
    else begin
      automatic logic latch = ~beatsLeft & auto_anon_in_d_ready;
      beatsLeft <= ~latch & beatsLeft - (auto_anon_in_d_ready & in_0_d_valid);
      if (latch & (|readys_valid)) begin
        automatic logic [1:0] _GEN_2 = readys_readys & readys_valid;
        readys_mask <= _GEN_2 | {_GEN_2[0], 1'h0};
      end
      if (beatsLeft) begin
      end
      else begin
        state_0 <= winner_0;
        state_1 <= winner_1;
      end
    end
  end // always @(posedge)
  TLMonitor_27 monitor (
    .clock                (clock),
    .reset                (reset),
    .io_in_a_ready        (in_0_a_ready),
    .io_in_a_valid        (auto_anon_in_a_valid),
    .io_in_a_bits_opcode  (auto_anon_in_a_bits_opcode),
    .io_in_a_bits_address (auto_anon_in_a_bits_address),
    .io_in_d_ready        (auto_anon_in_d_ready),
    .io_in_d_valid        (in_0_d_valid),
    .io_in_d_bits_opcode
      ((muxState_0 ? auto_anon_out_0_d_bits_opcode : 3'h0)
       | (muxState_1 ? auto_anon_out_1_d_bits_opcode : 3'h0)),
    .io_in_d_bits_param   (muxState_0 ? auto_anon_out_0_d_bits_param : 2'h0),
    .io_in_d_bits_size
      ((muxState_0 ? auto_anon_out_0_d_bits_size : 2'h0) | {muxState_1, 1'h0}),
    .io_in_d_bits_sink    (muxState_0 & auto_anon_out_0_d_bits_sink),
    .io_in_d_bits_denied  (in_0_d_bits_denied),
    .io_in_d_bits_corrupt (in_0_d_bits_corrupt)
  );
  assign auto_anon_in_a_ready = in_0_a_ready;
  assign auto_anon_in_d_valid = in_0_d_valid;
  assign auto_anon_in_d_bits_denied = in_0_d_bits_denied;
  assign auto_anon_in_d_bits_data =
    (muxState_0 ? auto_anon_out_0_d_bits_data : 32'h0)
    | (muxState_1 ? auto_anon_out_1_d_bits_data : 32'h0);
  assign auto_anon_in_d_bits_corrupt = in_0_d_bits_corrupt;
  assign auto_anon_out_1_a_valid = auto_anon_in_a_valid & requestAIO_0_1;
  assign auto_anon_out_1_a_bits_opcode = auto_anon_in_a_bits_opcode;
  assign auto_anon_out_1_a_bits_address = auto_anon_in_a_bits_address[6:0];
  assign auto_anon_out_1_a_bits_data = auto_anon_in_a_bits_data;
  assign auto_anon_out_1_d_ready =
    auto_anon_in_d_ready & (beatsLeft ? state_1 : readys_readys[1]);
  assign auto_anon_out_0_a_valid = auto_anon_in_a_valid & requestAIO_0_0;
  assign auto_anon_out_0_a_bits_opcode = auto_anon_in_a_bits_opcode;
  assign auto_anon_out_0_a_bits_address = auto_anon_in_a_bits_address;
  assign auto_anon_out_0_a_bits_data = auto_anon_in_a_bits_data;
  assign auto_anon_out_0_d_ready =
    auto_anon_in_d_ready & (beatsLeft ? state_0 : readys_readys[0]);
endmodule

module DMIToTL(
  input         auto_out_a_ready,
                auto_out_d_valid,
                auto_out_d_bits_denied,
  input  [31:0] auto_out_d_bits_data,
  input         auto_out_d_bits_corrupt,
                io_dmi_req_valid,
  input  [6:0]  io_dmi_req_bits_addr,
  input  [31:0] io_dmi_req_bits_data,
  input  [1:0]  io_dmi_req_bits_op,
  input         io_dmi_resp_ready,
  output        auto_out_a_valid,
  output [2:0]  auto_out_a_bits_opcode,
  output [8:0]  auto_out_a_bits_address,
  output [31:0] auto_out_a_bits_data,
  output        auto_out_d_ready,
                io_dmi_req_ready,
                io_dmi_resp_valid,
  output [31:0] io_dmi_resp_bits_data,
  output [1:0]  io_dmi_resp_bits_resp
);

  wire _GEN = io_dmi_req_bits_op == 2'h2;
  wire _GEN_0 = io_dmi_req_bits_op == 2'h1;
  assign auto_out_a_valid = io_dmi_req_valid;
  assign auto_out_a_bits_opcode = _GEN ? 3'h0 : {_GEN_0, 2'h0};
  assign auto_out_a_bits_address = _GEN | _GEN_0 ? {io_dmi_req_bits_addr, 2'h0} : 9'h48;
  assign auto_out_a_bits_data = _GEN ? io_dmi_req_bits_data : 32'h0;
  assign auto_out_d_ready = io_dmi_resp_ready;
  assign io_dmi_req_ready = auto_out_a_ready;
  assign io_dmi_resp_valid = auto_out_d_valid;
  assign io_dmi_resp_bits_data = auto_out_d_bits_data;
  assign io_dmi_resp_bits_resp = {1'h0, auto_out_d_bits_corrupt | auto_out_d_bits_denied};
endmodule

module TLMonitor_28(
  input       clock,
              reset,
              io_in_a_ready,
              io_in_a_valid,
  input [2:0] io_in_a_bits_opcode,
  input [6:0] io_in_a_bits_address,
  input       io_in_d_ready,
              io_in_d_valid,
  input [2:0] io_in_d_bits_opcode
);

  wire [31:0] _plusarg_reader_1_out;
  wire [31:0] _plusarg_reader_out;
  wire        a_first_done = io_in_a_ready & io_in_a_valid;
  reg         a_first_counter;
  reg  [2:0]  opcode;
  reg  [2:0]  param;
  reg  [1:0]  size;
  reg         source;
  reg  [6:0]  address;
  reg         d_first_counter;
  reg  [2:0]  opcode_1;
  reg  [1:0]  param_1;
  reg  [1:0]  size_1;
  reg         source_1;
  reg         sink;
  reg         denied;
  reg  [1:0]  inflight;
  reg  [3:0]  inflight_opcodes;
  reg  [3:0]  inflight_sizes;
  reg         a_first_counter_1;
  reg         d_first_counter_1;
  wire        a_set = a_first_done & ~a_first_counter_1;
  wire        d_release_ack = io_in_d_bits_opcode == 3'h6;
  reg  [31:0] watchdog;
  reg  [1:0]  inflight_1;
  reg  [3:0]  inflight_sizes_1;
  reg         d_first_counter_2;
  reg  [31:0] watchdog_1;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      automatic logic [7:0][2:0] _GEN = '{3'h4, 3'h5, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic [7:0][2:0] _GEN_0 =
        '{3'h4, 3'h4, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic            _GEN_1 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_2 = io_in_a_valid & (&io_in_a_bits_opcode) & ~reset;
      automatic logic            _GEN_3 =
        {io_in_a_bits_address[6:4] ^ 3'h4, io_in_a_bits_address[2]} == 4'h0
        | io_in_a_bits_address[6:3] == 4'hA;
      automatic logic            _GEN_4 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_5 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_6 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_7 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_8 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h3 & ~reset;
      automatic logic            _GEN_9 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h5 & ~reset;
      automatic logic            _GEN_10 = io_in_a_valid & a_first_counter & ~reset;
      automatic logic            _GEN_11 = io_in_d_valid & d_first_counter & ~reset;
      automatic logic            _GEN_12 = io_in_a_valid & ~a_first_counter_1;
      automatic logic            _GEN_13 = io_in_d_valid & ~d_first_counter_1;
      automatic logic            _GEN_14 = _GEN_13 & ~d_release_ack;
      automatic logic            _GEN_15 = _GEN_14 & ~_GEN_12 & ~reset;
      automatic logic            _GEN_16 =
        io_in_d_valid & ~d_first_counter_2 & d_release_ack & ~reset;
      if (_GEN_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/debug/Debug.scala:706:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at src/main/scala/devices/debug/Debug.scala:706:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_1 & (|(io_in_a_bits_address[1:0]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at src/main/scala/devices/debug/Debug.scala:706:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/debug/Debug.scala:706:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at src/main/scala/devices/debug/Debug.scala:706:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_2 & (|(io_in_a_bits_address[1:0]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at src/main/scala/devices/debug/Debug.scala:706:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at src/main/scala/devices/debug/Debug.scala:706:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_4 & ~_GEN_3) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at src/main/scala/devices/debug/Debug.scala:706:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_4 & (|(io_in_a_bits_address[1:0]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get address not aligned to size (connected at src/main/scala/devices/debug/Debug.scala:706:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_5 & ~_GEN_3) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/debug/Debug.scala:706:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_5 & (|(io_in_a_bits_address[1:0]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull address not aligned to size (connected at src/main/scala/devices/debug/Debug.scala:706:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_6) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/debug/Debug.scala:706:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_6 & (|(io_in_a_bits_address[1:0]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial address not aligned to size (connected at src/main/scala/devices/debug/Debug.scala:706:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_7) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/debug/Debug.scala:706:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_7 & (|(io_in_a_bits_address[1:0]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at src/main/scala/devices/debug/Debug.scala:706:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_8) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/debug/Debug.scala:706:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_8 & (|(io_in_a_bits_address[1:0]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical address not aligned to size (connected at src/main/scala/devices/debug/Debug.scala:706:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_9) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/debug/Debug.scala:706:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_9 & (|(io_in_a_bits_address[1:0]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint address not aligned to size (connected at src/main/scala/devices/debug/Debug.scala:706:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & ~reset & (&io_in_d_bits_opcode)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel has invalid opcode (connected at src/main/scala/devices/debug/Debug.scala:706:19)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & io_in_d_bits_opcode == 3'h4 & ~reset) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid sink ID (connected at src/main/scala/devices/debug/Debug.scala:706:19)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & io_in_d_bits_opcode == 3'h5 & ~reset) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid sink ID (connected at src/main/scala/devices/debug/Debug.scala:706:19)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_10 & io_in_a_bits_opcode != opcode) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel opcode changed within multibeat operation (connected at src/main/scala/devices/debug/Debug.scala:706:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_10 & (|param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel param changed within multibeat operation (connected at src/main/scala/devices/debug/Debug.scala:706:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_10 & size != 2'h2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel size changed within multibeat operation (connected at src/main/scala/devices/debug/Debug.scala:706:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_10 & source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel source changed within multibeat operation (connected at src/main/scala/devices/debug/Debug.scala:706:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_10 & io_in_a_bits_address != address) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel address changed with multibeat operation (connected at src/main/scala/devices/debug/Debug.scala:706:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_11 & io_in_d_bits_opcode != opcode_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel opcode changed within multibeat operation (connected at src/main/scala/devices/debug/Debug.scala:706:19)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_11 & (|param_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel param changed within multibeat operation (connected at src/main/scala/devices/debug/Debug.scala:706:19)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_11 & size_1 != 2'h2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel size changed within multibeat operation (connected at src/main/scala/devices/debug/Debug.scala:706:19)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_11 & source_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel source changed within multibeat operation (connected at src/main/scala/devices/debug/Debug.scala:706:19)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_11 & sink) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel sink changed with multibeat operation (connected at src/main/scala/devices/debug/Debug.scala:706:19)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_11 & denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel denied changed with multibeat operation (connected at src/main/scala/devices/debug/Debug.scala:706:19)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (a_set & ~reset & inflight[0]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel re-used a source ID (connected at src/main/scala/devices/debug/Debug.scala:706:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & ~reset & ~(inflight[0] | _GEN_12)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/devices/debug/Debug.scala:706:19)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & _GEN_12 & ~reset
          & ~(io_in_d_bits_opcode == _GEN_0[io_in_a_bits_opcode]
              | io_in_d_bits_opcode == _GEN[io_in_a_bits_opcode])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/devices/debug/Debug.scala:706:19)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15
          & ~(io_in_d_bits_opcode == _GEN_0[inflight_opcodes[3:1]]
              | io_in_d_bits_opcode == _GEN[inflight_opcodes[3:1]])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/devices/debug/Debug.scala:706:19)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & inflight_sizes[3:1] != 3'h2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/devices/debug/Debug.scala:706:19)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_13 & ~a_first_counter_1 & io_in_a_valid & ~d_release_ack & ~reset
          & ~(~io_in_d_ready | io_in_a_ready)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ready check\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight == 2'h0 | _plusarg_reader_out == 32'h0
              | watchdog < _plusarg_reader_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/devices/debug/Debug.scala:706:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16 & ~(inflight_1[0])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/devices/debug/Debug.scala:706:19)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16 & inflight_sizes_1[3:1] != 3'h2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/devices/debug/Debug.scala:706:19)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight_1 == 2'h0 | _plusarg_reader_1_out == 32'h0
              | watchdog_1 < _plusarg_reader_1_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/devices/debug/Debug.scala:706:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    automatic logic _GEN_17 = a_first_done & ~a_first_counter;
    automatic logic d_first_done;
    automatic logic _GEN_18;
    d_first_done = io_in_d_ready & io_in_d_valid;
    _GEN_18 = d_first_done & ~d_first_counter;
    if (reset) begin
      a_first_counter <= 1'h0;
      d_first_counter <= 1'h0;
      inflight <= 2'h0;
      inflight_opcodes <= 4'h0;
      inflight_sizes <= 4'h0;
      a_first_counter_1 <= 1'h0;
      d_first_counter_1 <= 1'h0;
      watchdog <= 32'h0;
      inflight_1 <= 2'h0;
      inflight_sizes_1 <= 4'h0;
      d_first_counter_2 <= 1'h0;
      watchdog_1 <= 32'h0;
    end
    else begin
      automatic logic       d_clr;
      automatic logic [3:0] d_sizes_clr;
      automatic logic       d_clr_1;
      d_clr = d_first_done & ~d_first_counter_1 & ~d_release_ack;
      d_sizes_clr = {4{d_clr}};
      d_clr_1 = d_first_done & ~d_first_counter_2 & d_release_ack;
      a_first_counter <= (~a_first_done | a_first_counter - 1'h1) & a_first_counter;
      d_first_counter <= (~d_first_done | d_first_counter - 1'h1) & d_first_counter;
      inflight <= {1'h0, (inflight[0] | a_set) & ~d_clr};
      inflight_opcodes <=
        (inflight_opcodes | (a_set ? {io_in_a_bits_opcode, 1'h1} : 4'h0)) & ~d_sizes_clr;
      inflight_sizes <=
        (inflight_sizes | (a_set ? {1'h0, a_set ? 3'h5 : 3'h0} : 4'h0)) & ~d_sizes_clr;
      a_first_counter_1 <= (~a_first_done | a_first_counter_1 - 1'h1) & a_first_counter_1;
      d_first_counter_1 <= (~d_first_done | d_first_counter_1 - 1'h1) & d_first_counter_1;
      if (a_first_done | d_first_done)
        watchdog <= 32'h0;
      else
        watchdog <= watchdog + 32'h1;
      inflight_1 <= {1'h0, inflight_1[0] & ~d_clr_1};
      inflight_sizes_1 <= inflight_sizes_1 & ~{4{d_clr_1}};
      d_first_counter_2 <= (~d_first_done | d_first_counter_2 - 1'h1) & d_first_counter_2;
      if (d_first_done)
        watchdog_1 <= 32'h0;
      else
        watchdog_1 <= watchdog_1 + 32'h1;
    end
    if (_GEN_17) begin
      opcode <= io_in_a_bits_opcode;
      param <= 3'h0;
      size <= 2'h2;
      address <= io_in_a_bits_address;
    end
    source <= ~_GEN_17 & source;
    if (_GEN_18) begin
      opcode_1 <= io_in_d_bits_opcode;
      param_1 <= 2'h0;
      size_1 <= 2'h2;
    end
    source_1 <= ~_GEN_18 & source_1;
    sink <= ~_GEN_18 & sink;
    denied <= ~_GEN_18 & denied;
  end // always @(posedge)
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader (
    .out (_plusarg_reader_out)
  );
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader_1 (
    .out (_plusarg_reader_1_out)
  );
endmodule

module TLDebugModuleOuter(
  input         clock,
                reset,
                auto_dmi_in_a_valid,
  input  [2:0]  auto_dmi_in_a_bits_opcode,
  input  [6:0]  auto_dmi_in_a_bits_address,
  input  [31:0] auto_dmi_in_a_bits_data,
  input         auto_dmi_in_d_ready,
                io_ctrl_dmactiveAck,
                io_innerCtrl_ready,
                io_hgDebugInt_0,
  output        auto_dmi_in_a_ready,
                auto_dmi_in_d_valid,
  output [2:0]  auto_dmi_in_d_bits_opcode,
  output [31:0] auto_dmi_in_d_bits_data,
  output        auto_int_out_0,
                io_ctrl_ndreset,
                io_ctrl_dmactive,
                io_innerCtrl_valid,
                io_innerCtrl_bits_resumereq,
  output [9:0]  io_innerCtrl_bits_hartsel,
  output        io_innerCtrl_bits_ackhavereset,
                io_innerCtrl_bits_hrmask_0
);

  wire       out_woready_12;
  wire       DMCONTROLWrData_setresethaltreq;
  wire       DMCONTROLWrData_clrresethaltreq;
  reg        DMCONTROLReg_haltreq;
  reg  [9:0] DMCONTROLReg_hartsello;
  reg        DMCONTROLReg_ndmreset;
  reg        DMCONTROLReg_dmactive;
  reg        hrmaskReg_0;
  wire       _GEN = DMCONTROLReg_hartsello == 10'h0;
  wire       hrmaskNxt_0 =
    ~(~DMCONTROLReg_dmactive | out_woready_12 & DMCONTROLWrData_clrresethaltreq & _GEN)
    & (out_woready_12 & DMCONTROLWrData_setresethaltreq & _GEN | hrmaskReg_0);
  wire       out_front_bits_read = auto_dmi_in_a_bits_opcode == 3'h4;
  wire       _GEN_0 =
    {auto_dmi_in_a_bits_address[4], auto_dmi_in_a_bits_address[2]} == 2'h0;
  assign DMCONTROLWrData_clrresethaltreq = auto_dmi_in_a_bits_data[2];
  assign DMCONTROLWrData_setresethaltreq = auto_dmi_in_a_bits_data[3];
  assign out_woready_12 =
    auto_dmi_in_a_valid & auto_dmi_in_d_ready & ~out_front_bits_read
    & ~(auto_dmi_in_a_bits_address[3]) & _GEN_0;
  wire [2:0] dmiNodeIn_d_bits_opcode = {2'h0, out_front_bits_read};
  reg        debugIntRegs_0;
  reg        innerCtrlValidReg;
  reg        innerCtrlResumeReqReg;
  reg        innerCtrlAckHaveResetReg;
  wire       _io_innerCtrl_valid_output = out_woready_12 | innerCtrlValidReg;
  wire       _io_innerCtrl_bits_resumereq_output =
    out_woready_12 & auto_dmi_in_a_bits_data[30] | innerCtrlResumeReqReg;
  wire       _io_innerCtrl_bits_ackhavereset_output =
    out_woready_12 & auto_dmi_in_a_bits_data[28] | innerCtrlAckHaveResetReg;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      DMCONTROLReg_haltreq <= 1'h0;
      DMCONTROLReg_hartsello <= 10'h0;
      DMCONTROLReg_ndmreset <= 1'h0;
      DMCONTROLReg_dmactive <= 1'h0;
      hrmaskReg_0 <= 1'h0;
      debugIntRegs_0 <= 1'h0;
      innerCtrlValidReg <= 1'h0;
      innerCtrlResumeReqReg <= 1'h0;
      innerCtrlAckHaveResetReg <= 1'h0;
    end
    else begin
      DMCONTROLReg_haltreq <=
        DMCONTROLReg_dmactive
        & (out_woready_12 ? auto_dmi_in_a_bits_data[31] : DMCONTROLReg_haltreq);
      if (DMCONTROLReg_dmactive) begin
      end
      else
        DMCONTROLReg_hartsello <= 10'h0;
      DMCONTROLReg_ndmreset <=
        DMCONTROLReg_dmactive
        & (out_woready_12 ? auto_dmi_in_a_bits_data[1] : DMCONTROLReg_ndmreset);
      if (out_woready_12)
        DMCONTROLReg_dmactive <= auto_dmi_in_a_bits_data[0];
      hrmaskReg_0 <= hrmaskNxt_0;
      debugIntRegs_0 <=
        DMCONTROLReg_dmactive
        & (out_woready_12 ? auto_dmi_in_a_bits_data[31] : debugIntRegs_0);
      innerCtrlValidReg <= _io_innerCtrl_valid_output & ~io_innerCtrl_ready;
      innerCtrlResumeReqReg <= _io_innerCtrl_bits_resumereq_output & ~io_innerCtrl_ready;
      innerCtrlAckHaveResetReg <=
        _io_innerCtrl_bits_ackhavereset_output & ~io_innerCtrl_ready;
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin
      if (reset) begin
        DMCONTROLReg_haltreq = 1'h0;
        DMCONTROLReg_hartsello = 10'h0;
        DMCONTROLReg_ndmreset = 1'h0;
        DMCONTROLReg_dmactive = 1'h0;
        hrmaskReg_0 = 1'h0;
        debugIntRegs_0 = 1'h0;
        innerCtrlValidReg = 1'h0;
        innerCtrlResumeReqReg = 1'h0;
        innerCtrlAckHaveResetReg = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  TLMonitor_28 monitor (
    .clock                (clock),
    .reset                (reset),
    .io_in_a_ready        (auto_dmi_in_d_ready),
    .io_in_a_valid        (auto_dmi_in_a_valid),
    .io_in_a_bits_opcode  (auto_dmi_in_a_bits_opcode),
    .io_in_a_bits_address (auto_dmi_in_a_bits_address),
    .io_in_d_ready        (auto_dmi_in_d_ready),
    .io_in_d_valid        (auto_dmi_in_a_valid),
    .io_in_d_bits_opcode  (dmiNodeIn_d_bits_opcode)
  );
  assign auto_dmi_in_a_ready = auto_dmi_in_d_ready;
  assign auto_dmi_in_d_valid = auto_dmi_in_a_valid;
  assign auto_dmi_in_d_bits_opcode = dmiNodeIn_d_bits_opcode;
  assign auto_dmi_in_d_bits_data =
    _GEN_0
      ? (auto_dmi_in_a_bits_address[3]
           ? 32'h112380
           : {DMCONTROLReg_haltreq,
              29'h0,
              DMCONTROLReg_ndmreset,
              DMCONTROLReg_dmactive & io_ctrl_dmactiveAck})
      : 32'h0;
  assign auto_int_out_0 = debugIntRegs_0 | io_hgDebugInt_0;
  assign io_ctrl_ndreset = DMCONTROLReg_ndmreset;
  assign io_ctrl_dmactive = DMCONTROLReg_dmactive;
  assign io_innerCtrl_valid = _io_innerCtrl_valid_output;
  assign io_innerCtrl_bits_resumereq = _io_innerCtrl_bits_resumereq_output;
  assign io_innerCtrl_bits_hartsel = DMCONTROLReg_hartsello;
  assign io_innerCtrl_bits_ackhavereset = _io_innerCtrl_bits_ackhavereset_output;
  assign io_innerCtrl_bits_hrmask_0 = hrmaskNxt_0;
endmodule

module IntSyncCrossingSource_n1x1_Registered(
  input  auto_in_0,
  output auto_out_sync_0
);

  assign auto_out_sync_0 = auto_in_0;
endmodule

module TLMonitor_29(
  input       clock,
              reset,
              io_in_a_ready,
              io_in_a_valid,
  input [2:0] io_in_a_bits_opcode,
  input [8:0] io_in_a_bits_address,
  input       io_in_d_ready,
              io_in_d_valid,
  input [2:0] io_in_d_bits_opcode,
  input [1:0] io_in_d_bits_param,
              io_in_d_bits_size,
  input       io_in_d_bits_source,
              io_in_d_bits_sink,
              io_in_d_bits_denied,
              io_in_d_bits_corrupt
);

  wire [31:0] _plusarg_reader_1_out;
  wire [31:0] _plusarg_reader_out;
  wire        a_first_done = io_in_a_ready & io_in_a_valid;
  reg         a_first_counter;
  reg  [2:0]  opcode;
  reg  [2:0]  param;
  reg  [1:0]  size;
  reg         source;
  reg  [8:0]  address;
  reg         d_first_counter;
  reg  [2:0]  opcode_1;
  reg  [1:0]  param_1;
  reg  [1:0]  size_1;
  reg         source_1;
  reg         sink;
  reg         denied;
  reg  [1:0]  inflight;
  reg  [3:0]  inflight_opcodes;
  reg  [3:0]  inflight_sizes;
  reg         a_first_counter_1;
  reg         d_first_counter_1;
  wire        a_set = a_first_done & ~a_first_counter_1;
  wire        d_release_ack = io_in_d_bits_opcode == 3'h6;
  reg  [31:0] watchdog;
  reg  [1:0]  inflight_1;
  reg  [3:0]  inflight_sizes_1;
  reg         d_first_counter_2;
  reg  [31:0] watchdog_1;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      automatic logic [7:0][2:0] _GEN = '{3'h4, 3'h5, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic [7:0][2:0] _GEN_0 =
        '{3'h4, 3'h4, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic            _GEN_1 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_2 = io_in_a_valid & (&io_in_a_bits_opcode) & ~reset;
      automatic logic [4:0]      _GEN_3 = io_in_a_bits_address[6:2] ^ 5'h11;
      automatic logic            _GEN_4 =
        io_in_a_bits_address[8:6] == 3'h0
        | {io_in_a_bits_address[8:7], _GEN_3[4:2], _GEN_3[0]} == 6'h0
        | {io_in_a_bits_address[8:7], io_in_a_bits_address[6:3] ^ 4'hB} == 6'h0
        | {io_in_a_bits_address[8:7], ~(io_in_a_bits_address[6:5])} == 4'h0
        | {io_in_a_bits_address[8], ~(io_in_a_bits_address[7])} == 2'h0
        | io_in_a_bits_address[8];
      automatic logic            _GEN_5 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_6 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_7 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_8 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_9 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h3 & ~reset;
      automatic logic            _GEN_10 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h5 & ~reset;
      automatic logic            _GEN_11 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_12 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_13 = io_in_d_bits_param == 2'h2;
      automatic logic            _GEN_14 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h5 & ~reset;
      automatic logic            _GEN_15 = ~io_in_d_bits_denied | io_in_d_bits_corrupt;
      automatic logic            _GEN_16 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_17 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_18 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_19 = io_in_a_valid & a_first_counter & ~reset;
      automatic logic            _GEN_20 = io_in_d_valid & d_first_counter & ~reset;
      automatic logic [3:0]      _GEN_21 = {1'h0, io_in_d_bits_source, 2'h0};
      automatic logic [3:0]      _GEN_22 = inflight_opcodes >> _GEN_21;
      automatic logic            _GEN_23 = io_in_d_valid & ~d_first_counter_1;
      automatic logic [1:0]      _GEN_24 = {1'h0, io_in_d_bits_source};
      automatic logic            _GEN_25 = _GEN_23 & ~d_release_ack;
      automatic logic            same_cycle_resp =
        io_in_a_valid & ~a_first_counter_1 & ~io_in_d_bits_source;
      automatic logic            _GEN_26 = _GEN_25 & same_cycle_resp & ~reset;
      automatic logic            _GEN_27 = _GEN_25 & ~same_cycle_resp & ~reset;
      automatic logic [3:0]      _GEN_28 = {2'h0, io_in_d_bits_size};
      automatic logic            _GEN_29 =
        io_in_d_valid & ~d_first_counter_2 & d_release_ack & ~reset;
      automatic logic [1:0]      _GEN_30 = inflight >> _GEN_24;
      automatic logic [3:0]      _GEN_31 = inflight_sizes >> _GEN_21;
      automatic logic [1:0]      _GEN_32 = inflight_1 >> _GEN_24;
      automatic logic [3:0]      _GEN_33 = inflight_sizes_1 >> _GEN_21;
      if (_GEN_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_1 & (|(io_in_a_bits_address[1:0]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_2 & (|(io_in_a_bits_address[1:0]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_5 & ~_GEN_4) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_5 & (|(io_in_a_bits_address[1:0]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get address not aligned to size (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_6 & ~_GEN_4) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_6 & (|(io_in_a_bits_address[1:0]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull address not aligned to size (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_7) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_7 & (|(io_in_a_bits_address[1:0]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial address not aligned to size (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_8) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_8 & (|(io_in_a_bits_address[1:0]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_9) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_9 & (|(io_in_a_bits_address[1:0]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical address not aligned to size (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_10) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_10 & (|(io_in_a_bits_address[1:0]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint address not aligned to size (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & ~reset & (&io_in_d_bits_opcode)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel has invalid opcode (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_11 & io_in_d_bits_source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_11 & ~(io_in_d_bits_size[1])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_11 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_11 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck is corrupt (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_11 & io_in_d_bits_denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck is denied (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_12 & io_in_d_bits_source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid source ID (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_12) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid sink ID (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_12 & ~(io_in_d_bits_size[1])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant smaller than a beat (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_12 & (&io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid cap param (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_12 & _GEN_13) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries toN param (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_12 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant is corrupt (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & io_in_d_bits_source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid source ID (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid sink ID (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & ~(io_in_d_bits_size[1])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData smaller than a beat (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & (&io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid cap param (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & _GEN_13) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries toN param (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & ~_GEN_15) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData is denied but not corrupt (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16 & io_in_d_bits_source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck carries invalid param (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck is corrupt (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & io_in_d_bits_source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData carries invalid param (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & ~_GEN_15) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData is denied but not corrupt (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & io_in_d_bits_source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck carries invalid source ID (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck carries invalid param (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck is corrupt (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & io_in_a_bits_opcode != opcode) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel opcode changed within multibeat operation (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & (|param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel param changed within multibeat operation (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & size != 2'h2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel size changed within multibeat operation (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel source changed within multibeat operation (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & io_in_a_bits_address != address) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel address changed with multibeat operation (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & io_in_d_bits_opcode != opcode_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel opcode changed within multibeat operation (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & io_in_d_bits_param != param_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel param changed within multibeat operation (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & io_in_d_bits_size != size_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel size changed within multibeat operation (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & io_in_d_bits_source != source_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel source changed within multibeat operation (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & io_in_d_bits_sink != sink) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel sink changed with multibeat operation (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & io_in_d_bits_denied != denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel denied changed with multibeat operation (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (a_set & ~reset & inflight[0]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel re-used a source ID (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25 & ~reset & ~(_GEN_30[0] | same_cycle_resp)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_26
          & ~(io_in_d_bits_opcode == _GEN_0[io_in_a_bits_opcode]
              | io_in_d_bits_opcode == _GEN[io_in_a_bits_opcode])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_26 & io_in_d_bits_size != 2'h2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27
          & ~(io_in_d_bits_opcode == _GEN_0[_GEN_22[3:1]]
              | io_in_d_bits_opcode == _GEN[_GEN_22[3:1]])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & _GEN_28 != {1'h0, _GEN_31[3:1]}) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_23 & ~a_first_counter_1 & io_in_a_valid & ~io_in_d_bits_source
          & ~d_release_ack & ~reset & ~(~io_in_d_ready | io_in_a_ready)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ready check\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight == 2'h0 | _plusarg_reader_out == 32'h0
              | watchdog < _plusarg_reader_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_29 & ~(_GEN_32[0])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_29 & _GEN_28 != {1'h0, _GEN_33[3:1]}) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight_1 == 2'h0 | _plusarg_reader_1_out == 32'h0
              | watchdog_1 < _plusarg_reader_1_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    automatic logic _GEN_34 = a_first_done & ~a_first_counter;
    automatic logic d_first_done;
    d_first_done = io_in_d_ready & io_in_d_valid;
    if (reset) begin
      a_first_counter <= 1'h0;
      d_first_counter <= 1'h0;
      inflight <= 2'h0;
      inflight_opcodes <= 4'h0;
      inflight_sizes <= 4'h0;
      a_first_counter_1 <= 1'h0;
      d_first_counter_1 <= 1'h0;
      watchdog <= 32'h0;
      inflight_1 <= 2'h0;
      inflight_sizes_1 <= 4'h0;
      d_first_counter_2 <= 1'h0;
      watchdog_1 <= 32'h0;
    end
    else begin
      automatic logic        _GEN_35;
      automatic logic [30:0] _GEN_36 = 31'hF << {28'h0, io_in_d_bits_source, 2'h0};
      automatic logic [3:0]  d_sizes_clr;
      automatic logic        _GEN_37;
      _GEN_35 = d_first_done & ~d_first_counter_1 & ~d_release_ack;
      d_sizes_clr = _GEN_35 ? _GEN_36[3:0] : 4'h0;
      _GEN_37 = d_first_done & ~d_first_counter_2 & d_release_ack;
      a_first_counter <= (~a_first_done | a_first_counter - 1'h1) & a_first_counter;
      d_first_counter <= (~d_first_done | d_first_counter - 1'h1) & d_first_counter;
      inflight <= {1'h0, (inflight[0] | a_set) & ~(_GEN_35 & ~io_in_d_bits_source)};
      inflight_opcodes <=
        (inflight_opcodes | (a_set ? {io_in_a_bits_opcode, 1'h1} : 4'h0)) & ~d_sizes_clr;
      inflight_sizes <=
        (inflight_sizes | (a_set ? {1'h0, a_set ? 3'h5 : 3'h0} : 4'h0)) & ~d_sizes_clr;
      a_first_counter_1 <= (~a_first_done | a_first_counter_1 - 1'h1) & a_first_counter_1;
      d_first_counter_1 <= (~d_first_done | d_first_counter_1 - 1'h1) & d_first_counter_1;
      if (a_first_done | d_first_done)
        watchdog <= 32'h0;
      else
        watchdog <= watchdog + 32'h1;
      inflight_1 <= {1'h0, inflight_1[0] & ~(_GEN_37 & ~io_in_d_bits_source)};
      inflight_sizes_1 <= inflight_sizes_1 & ~(_GEN_37 ? _GEN_36[3:0] : 4'h0);
      d_first_counter_2 <= (~d_first_done | d_first_counter_2 - 1'h1) & d_first_counter_2;
      if (d_first_done)
        watchdog_1 <= 32'h0;
      else
        watchdog_1 <= watchdog_1 + 32'h1;
    end
    if (_GEN_34) begin
      opcode <= io_in_a_bits_opcode;
      param <= 3'h0;
      size <= 2'h2;
      address <= io_in_a_bits_address;
    end
    source <= ~_GEN_34 & source;
    if (d_first_done & ~d_first_counter) begin
      opcode_1 <= io_in_d_bits_opcode;
      param_1 <= io_in_d_bits_param;
      size_1 <= io_in_d_bits_size;
      source_1 <= io_in_d_bits_source;
      sink <= io_in_d_bits_sink;
      denied <= io_in_d_bits_denied;
    end
  end // always @(posedge)
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader (
    .out (_plusarg_reader_out)
  );
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader_1 (
    .out (_plusarg_reader_1_out)
  );
endmodule

module TLBusBypassBar(
  input          clock,
                 reset,
                 auto_in_a_valid,
  input  [2:0]   auto_in_a_bits_opcode,
  input  [8:0]   auto_in_a_bits_address,
  input  [31:0]  auto_in_a_bits_data,
  input          auto_in_d_ready,
                 auto_out_1_a_ready,
                 auto_out_1_d_valid,
  input  [2:0]   auto_out_1_d_bits_opcode,
  input  [1:0]   auto_out_1_d_bits_param,
                 auto_out_1_d_bits_size,
  input          auto_out_1_d_bits_source,
                 auto_out_1_d_bits_sink,
                 auto_out_1_d_bits_denied,
  input  [31:0]  auto_out_1_d_bits_data,
  input          auto_out_1_d_bits_corrupt,
                 auto_out_0_a_ready,
                 auto_out_0_d_valid,
  input  [2:0]   auto_out_0_d_bits_opcode,
  input  [1:0]   auto_out_0_d_bits_size,
  input          auto_out_0_d_bits_denied,
                 auto_out_0_d_bits_corrupt,
                 io_bypass,
  output         auto_in_a_ready,
                 auto_in_d_valid,
  output [2:0]   auto_in_d_bits_opcode,
  output [1:0]   auto_in_d_bits_param,
                 auto_in_d_bits_size,
  output         auto_in_d_bits_sink,
                 auto_in_d_bits_denied,
  output [31:0]  auto_in_d_bits_data,
  output         auto_in_d_bits_corrupt,
                 auto_out_1_a_valid,
  output [2:0]   auto_out_1_a_bits_opcode,
  output [8:0]   auto_out_1_a_bits_address,
  output [31:0]  auto_out_1_a_bits_data,
  output         auto_out_1_d_ready,
                 auto_out_0_a_valid,
  output [2:0]   auto_out_0_a_bits_opcode,
  output [127:0] auto_out_0_a_bits_address,
  output         auto_out_0_d_ready
);

  reg        in_reset;
  reg        bypass_reg;
  wire       bypass = in_reset ? io_bypass : bypass_reg;
  reg  [1:0] flight;
  reg        counter;
  reg        counter_3;
  reg        stall_counter;
  wire       stall = bypass != io_bypass & ~stall_counter;
  wire       _GEN = ~stall & auto_in_a_valid;
  wire       nodeIn_a_ready = ~stall & (bypass ? auto_out_0_a_ready : auto_out_1_a_ready);
  wire       nodeIn_d_valid = bypass ? auto_out_0_d_valid : auto_out_1_d_valid;
  wire [2:0] nodeIn_d_bits_opcode =
    bypass ? auto_out_0_d_bits_opcode : auto_out_1_d_bits_opcode;
  wire [1:0] nodeIn_d_bits_param = bypass ? 2'h0 : auto_out_1_d_bits_param;
  wire [1:0] nodeIn_d_bits_size =
    bypass ? auto_out_0_d_bits_size : auto_out_1_d_bits_size;
  wire       nodeIn_d_bits_sink = ~bypass & auto_out_1_d_bits_sink;
  wire       nodeIn_d_bits_denied =
    bypass ? auto_out_0_d_bits_denied : auto_out_1_d_bits_denied;
  wire       nodeIn_d_bits_corrupt =
    bypass ? auto_out_0_d_bits_corrupt : auto_out_1_d_bits_corrupt;
  always @(posedge clock) begin
    automatic logic       done;
    automatic logic       d_dec;
    automatic logic [1:0] next_flight;
    done = nodeIn_a_ready & auto_in_a_valid;
    d_dec = auto_in_d_ready & nodeIn_d_valid;
    next_flight =
      flight
      + {1'h0, d_dec & ~counter_3 & nodeIn_d_bits_opcode[2] & ~(nodeIn_d_bits_opcode[1])}
      + {1'h0, done & ~counter} - {1'h0, d_dec};
    if (reset) begin
      in_reset <= 1'h1;
      flight <= 2'h0;
      counter <= 1'h0;
      counter_3 <= 1'h0;
      stall_counter <= 1'h0;
    end
    else begin
      in_reset <= 1'h0;
      flight <= next_flight;
      counter <= (~done | counter - 1'h1) & counter;
      counter_3 <= (~d_dec | counter_3 - 1'h1) & counter_3;
      stall_counter <= (~done | stall_counter - 1'h1) & stall_counter;
    end
    if (in_reset | next_flight == 2'h0)
      bypass_reg <= io_bypass;
  end // always @(posedge)
  TLMonitor_29 monitor (
    .clock                (clock),
    .reset                (reset),
    .io_in_a_ready        (nodeIn_a_ready),
    .io_in_a_valid        (auto_in_a_valid),
    .io_in_a_bits_opcode  (auto_in_a_bits_opcode),
    .io_in_a_bits_address (auto_in_a_bits_address),
    .io_in_d_ready        (auto_in_d_ready),
    .io_in_d_valid        (nodeIn_d_valid),
    .io_in_d_bits_opcode  (nodeIn_d_bits_opcode),
    .io_in_d_bits_param   (nodeIn_d_bits_param),
    .io_in_d_bits_size    (nodeIn_d_bits_size),
    .io_in_d_bits_source  (~bypass & auto_out_1_d_bits_source),
    .io_in_d_bits_sink    (nodeIn_d_bits_sink),
    .io_in_d_bits_denied  (nodeIn_d_bits_denied),
    .io_in_d_bits_corrupt (nodeIn_d_bits_corrupt)
  );
  assign auto_in_a_ready = nodeIn_a_ready;
  assign auto_in_d_valid = nodeIn_d_valid;
  assign auto_in_d_bits_opcode = nodeIn_d_bits_opcode;
  assign auto_in_d_bits_param = nodeIn_d_bits_param;
  assign auto_in_d_bits_size = nodeIn_d_bits_size;
  assign auto_in_d_bits_sink = nodeIn_d_bits_sink;
  assign auto_in_d_bits_denied = nodeIn_d_bits_denied;
  assign auto_in_d_bits_data = bypass ? 32'h0 : auto_out_1_d_bits_data;
  assign auto_in_d_bits_corrupt = nodeIn_d_bits_corrupt;
  assign auto_out_1_a_valid = _GEN & ~bypass;
  assign auto_out_1_a_bits_opcode = auto_in_a_bits_opcode;
  assign auto_out_1_a_bits_address = auto_in_a_bits_address;
  assign auto_out_1_a_bits_data = auto_in_a_bits_data;
  assign auto_out_1_d_ready = auto_in_d_ready & ~bypass;
  assign auto_out_0_a_valid = _GEN & bypass;
  assign auto_out_0_a_bits_opcode = auto_in_a_bits_opcode;
  assign auto_out_0_a_bits_address = {119'h0, auto_in_a_bits_address};
  assign auto_out_0_d_ready = auto_in_d_ready & bypass;
endmodule

module TLMonitor_30(
  input         clock,
                reset,
                io_in_a_ready,
                io_in_a_valid,
  input [2:0]   io_in_a_bits_opcode,
  input [127:0] io_in_a_bits_address,
  input         io_in_d_ready,
                io_in_d_valid,
  input [2:0]   io_in_d_bits_opcode,
  input [1:0]   io_in_d_bits_size,
  input         io_in_d_bits_denied,
                io_in_d_bits_corrupt
);

  wire [31:0]  _plusarg_reader_1_out;
  wire [31:0]  _plusarg_reader_out;
  wire         a_first_done = io_in_a_ready & io_in_a_valid;
  reg          a_first_counter;
  reg  [2:0]   opcode;
  reg  [2:0]   param;
  reg  [1:0]   size;
  reg          source;
  reg  [127:0] address;
  reg          d_first_counter;
  reg  [2:0]   opcode_1;
  reg  [1:0]   param_1;
  reg  [1:0]   size_1;
  reg          source_1;
  reg          sink;
  reg          denied;
  reg  [1:0]   inflight;
  reg  [3:0]   inflight_opcodes;
  reg  [3:0]   inflight_sizes;
  reg          a_first_counter_1;
  reg          d_first_counter_1;
  wire         a_set = a_first_done & ~a_first_counter_1;
  wire         d_release_ack = io_in_d_bits_opcode == 3'h6;
  reg  [31:0]  watchdog;
  reg  [1:0]   inflight_1;
  reg  [3:0]   inflight_sizes_1;
  reg          d_first_counter_2;
  reg  [31:0]  watchdog_1;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      automatic logic [7:0][2:0] _GEN = '{3'h4, 3'h5, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic [7:0][2:0] _GEN_0 =
        '{3'h4, 3'h4, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic            _GEN_1 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_2 = io_in_a_valid & (&io_in_a_bits_opcode) & ~reset;
      automatic logic            _GEN_3 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_4 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_5 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h3 & ~reset;
      automatic logic            _GEN_6 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h5 & ~reset;
      automatic logic            _GEN_7 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_8 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_9 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h5 & ~reset;
      automatic logic            _GEN_10 = ~io_in_d_bits_denied | io_in_d_bits_corrupt;
      automatic logic            _GEN_11 = io_in_a_valid & a_first_counter & ~reset;
      automatic logic            _GEN_12 = io_in_d_valid & d_first_counter & ~reset;
      automatic logic            _GEN_13 = io_in_a_valid & ~a_first_counter_1;
      automatic logic            _GEN_14 = io_in_d_valid & ~d_first_counter_1;
      automatic logic            _GEN_15 = _GEN_14 & ~d_release_ack;
      automatic logic            _GEN_16 = _GEN_15 & _GEN_13 & ~reset;
      automatic logic            _GEN_17 = _GEN_15 & ~_GEN_13 & ~reset;
      automatic logic [3:0]      _GEN_18 = {2'h0, io_in_d_bits_size};
      automatic logic            _GEN_19 =
        io_in_d_valid & ~d_first_counter_2 & d_release_ack & ~reset;
      if (_GEN_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/BusBypass.scala:33:14)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at src/main/scala/devices/tilelink/BusBypass.scala:33:14)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_1 & (|(io_in_a_bits_address[1:0]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at src/main/scala/devices/tilelink/BusBypass.scala:33:14)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/BusBypass.scala:33:14)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at src/main/scala/devices/tilelink/BusBypass.scala:33:14)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_2 & (|(io_in_a_bits_address[1:0]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at src/main/scala/devices/tilelink/BusBypass.scala:33:14)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at src/main/scala/devices/tilelink/BusBypass.scala:33:14)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_a_valid & io_in_a_bits_opcode == 3'h4 & ~reset
          & (|(io_in_a_bits_address[1:0]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get address not aligned to size (connected at src/main/scala/devices/tilelink/BusBypass.scala:33:14)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_a_valid & io_in_a_bits_opcode == 3'h0 & ~reset
          & (|(io_in_a_bits_address[1:0]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull address not aligned to size (connected at src/main/scala/devices/tilelink/BusBypass.scala:33:14)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_3) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/BusBypass.scala:33:14)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_3 & (|(io_in_a_bits_address[1:0]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial address not aligned to size (connected at src/main/scala/devices/tilelink/BusBypass.scala:33:14)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_4) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/BusBypass.scala:33:14)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_4 & (|(io_in_a_bits_address[1:0]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at src/main/scala/devices/tilelink/BusBypass.scala:33:14)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_5) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/BusBypass.scala:33:14)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_5 & (|(io_in_a_bits_address[1:0]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical address not aligned to size (connected at src/main/scala/devices/tilelink/BusBypass.scala:33:14)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_6) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/BusBypass.scala:33:14)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_6 & (|(io_in_a_bits_address[1:0]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint address not aligned to size (connected at src/main/scala/devices/tilelink/BusBypass.scala:33:14)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & ~reset & (&io_in_d_bits_opcode)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel has invalid opcode (connected at src/main/scala/devices/tilelink/BusBypass.scala:33:14)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_7 & ~(io_in_d_bits_size[1])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at src/main/scala/devices/tilelink/BusBypass.scala:33:14)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_7 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck is corrupt (connected at src/main/scala/devices/tilelink/BusBypass.scala:33:14)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_7 & io_in_d_bits_denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck is denied (connected at src/main/scala/devices/tilelink/BusBypass.scala:33:14)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_8 & ~(io_in_d_bits_size[1])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant smaller than a beat (connected at src/main/scala/devices/tilelink/BusBypass.scala:33:14)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_8 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant is corrupt (connected at src/main/scala/devices/tilelink/BusBypass.scala:33:14)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_9 & ~(io_in_d_bits_size[1])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData smaller than a beat (connected at src/main/scala/devices/tilelink/BusBypass.scala:33:14)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_9 & ~_GEN_10) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData is denied but not corrupt (connected at src/main/scala/devices/tilelink/BusBypass.scala:33:14)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & io_in_d_bits_opcode == 3'h0 & ~reset
          & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck is corrupt (connected at src/main/scala/devices/tilelink/BusBypass.scala:33:14)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & io_in_d_bits_opcode == 3'h1 & ~reset & ~_GEN_10) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData is denied but not corrupt (connected at src/main/scala/devices/tilelink/BusBypass.scala:33:14)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & io_in_d_bits_opcode == 3'h2 & ~reset
          & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck is corrupt (connected at src/main/scala/devices/tilelink/BusBypass.scala:33:14)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_11 & io_in_a_bits_opcode != opcode) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel opcode changed within multibeat operation (connected at src/main/scala/devices/tilelink/BusBypass.scala:33:14)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_11 & (|param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel param changed within multibeat operation (connected at src/main/scala/devices/tilelink/BusBypass.scala:33:14)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_11 & size != 2'h2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel size changed within multibeat operation (connected at src/main/scala/devices/tilelink/BusBypass.scala:33:14)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_11 & source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel source changed within multibeat operation (connected at src/main/scala/devices/tilelink/BusBypass.scala:33:14)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_11 & io_in_a_bits_address != address) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel address changed with multibeat operation (connected at src/main/scala/devices/tilelink/BusBypass.scala:33:14)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_12 & io_in_d_bits_opcode != opcode_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel opcode changed within multibeat operation (connected at src/main/scala/devices/tilelink/BusBypass.scala:33:14)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_12 & (|param_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel param changed within multibeat operation (connected at src/main/scala/devices/tilelink/BusBypass.scala:33:14)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_12 & io_in_d_bits_size != size_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel size changed within multibeat operation (connected at src/main/scala/devices/tilelink/BusBypass.scala:33:14)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_12 & source_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel source changed within multibeat operation (connected at src/main/scala/devices/tilelink/BusBypass.scala:33:14)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_12 & sink) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel sink changed with multibeat operation (connected at src/main/scala/devices/tilelink/BusBypass.scala:33:14)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_12 & io_in_d_bits_denied != denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel denied changed with multibeat operation (connected at src/main/scala/devices/tilelink/BusBypass.scala:33:14)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (a_set & ~reset & inflight[0]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel re-used a source ID (connected at src/main/scala/devices/tilelink/BusBypass.scala:33:14)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & ~reset & ~(inflight[0] | _GEN_13)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/devices/tilelink/BusBypass.scala:33:14)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16
          & ~(io_in_d_bits_opcode == _GEN_0[io_in_a_bits_opcode]
              | io_in_d_bits_opcode == _GEN[io_in_a_bits_opcode])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/devices/tilelink/BusBypass.scala:33:14)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16 & io_in_d_bits_size != 2'h2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/devices/tilelink/BusBypass.scala:33:14)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17
          & ~(io_in_d_bits_opcode == _GEN_0[inflight_opcodes[3:1]]
              | io_in_d_bits_opcode == _GEN[inflight_opcodes[3:1]])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/devices/tilelink/BusBypass.scala:33:14)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & _GEN_18 != {1'h0, inflight_sizes[3:1]}) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/devices/tilelink/BusBypass.scala:33:14)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & ~a_first_counter_1 & io_in_a_valid & ~d_release_ack & ~reset
          & ~(~io_in_d_ready | io_in_a_ready)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ready check\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight == 2'h0 | _plusarg_reader_out == 32'h0
              | watchdog < _plusarg_reader_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/devices/tilelink/BusBypass.scala:33:14)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & ~(inflight_1[0])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/devices/tilelink/BusBypass.scala:33:14)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & _GEN_18 != {1'h0, inflight_sizes_1[3:1]}) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/devices/tilelink/BusBypass.scala:33:14)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight_1 == 2'h0 | _plusarg_reader_1_out == 32'h0
              | watchdog_1 < _plusarg_reader_1_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/devices/tilelink/BusBypass.scala:33:14)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    automatic logic _GEN_20 = a_first_done & ~a_first_counter;
    automatic logic d_first_done;
    automatic logic _GEN_21;
    d_first_done = io_in_d_ready & io_in_d_valid;
    _GEN_21 = d_first_done & ~d_first_counter;
    if (reset) begin
      a_first_counter <= 1'h0;
      d_first_counter <= 1'h0;
      inflight <= 2'h0;
      inflight_opcodes <= 4'h0;
      inflight_sizes <= 4'h0;
      a_first_counter_1 <= 1'h0;
      d_first_counter_1 <= 1'h0;
      watchdog <= 32'h0;
      inflight_1 <= 2'h0;
      inflight_sizes_1 <= 4'h0;
      d_first_counter_2 <= 1'h0;
      watchdog_1 <= 32'h0;
    end
    else begin
      automatic logic       d_clr;
      automatic logic [3:0] d_sizes_clr;
      automatic logic       d_clr_1;
      d_clr = d_first_done & ~d_first_counter_1 & ~d_release_ack;
      d_sizes_clr = {4{d_clr}};
      d_clr_1 = d_first_done & ~d_first_counter_2 & d_release_ack;
      a_first_counter <= (~a_first_done | a_first_counter - 1'h1) & a_first_counter;
      d_first_counter <= (~d_first_done | d_first_counter - 1'h1) & d_first_counter;
      inflight <= {1'h0, (inflight[0] | a_set) & ~d_clr};
      inflight_opcodes <=
        (inflight_opcodes | (a_set ? {io_in_a_bits_opcode, 1'h1} : 4'h0)) & ~d_sizes_clr;
      inflight_sizes <=
        (inflight_sizes | (a_set ? {1'h0, a_set ? 3'h5 : 3'h0} : 4'h0)) & ~d_sizes_clr;
      a_first_counter_1 <= (~a_first_done | a_first_counter_1 - 1'h1) & a_first_counter_1;
      d_first_counter_1 <= (~d_first_done | d_first_counter_1 - 1'h1) & d_first_counter_1;
      if (a_first_done | d_first_done)
        watchdog <= 32'h0;
      else
        watchdog <= watchdog + 32'h1;
      inflight_1 <= {1'h0, inflight_1[0] & ~d_clr_1};
      inflight_sizes_1 <= inflight_sizes_1 & ~{4{d_clr_1}};
      d_first_counter_2 <= (~d_first_done | d_first_counter_2 - 1'h1) & d_first_counter_2;
      if (d_first_done)
        watchdog_1 <= 32'h0;
      else
        watchdog_1 <= watchdog_1 + 32'h1;
    end
    if (_GEN_20) begin
      opcode <= io_in_a_bits_opcode;
      param <= 3'h0;
      size <= 2'h2;
      address <= io_in_a_bits_address;
    end
    source <= ~_GEN_20 & source;
    if (_GEN_21) begin
      opcode_1 <= io_in_d_bits_opcode;
      param_1 <= 2'h0;
      size_1 <= io_in_d_bits_size;
      denied <= io_in_d_bits_denied;
    end
    source_1 <= ~_GEN_21 & source_1;
    sink <= ~_GEN_21 & sink;
  end // always @(posedge)
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader (
    .out (_plusarg_reader_out)
  );
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader_1 (
    .out (_plusarg_reader_1_out)
  );
endmodule

module TLError_1(
  input          clock,
                 reset,
                 auto_in_a_valid,
  input  [2:0]   auto_in_a_bits_opcode,
  input  [127:0] auto_in_a_bits_address,
  input          auto_in_d_ready,
  output         auto_in_a_ready,
                 auto_in_d_valid,
  output [2:0]   auto_in_d_bits_opcode,
  output [1:0]   auto_in_d_bits_size,
  output         auto_in_d_bits_denied,
                 auto_in_d_bits_corrupt
);

  wire            da_ready;
  wire [2:0]      da_bits_opcode;
  wire [7:0][2:0] _GEN = '{3'h4, 3'h4, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
  reg             idle;
  reg             counter;
  wire            nodeIn_a_ready = da_ready & idle;
  wire            winner_1 = auto_in_a_valid & idle;
  assign da_bits_opcode = _GEN[auto_in_a_bits_opcode];
  reg             beatsLeft;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (~reset & ~(idle | ~counter)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Error.scala:34 assert (idle || da_first) // we only send Grant, never GrantData => simplified flow control below\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  reg             state_1;
  wire            nodeIn_d_bits_denied = beatsLeft ? state_1 : winner_1;
  assign da_ready = auto_in_d_ready & (~beatsLeft | state_1);
  wire            nodeIn_d_valid = (~beatsLeft | state_1) & winner_1;
  wire            nodeIn_d_bits_corrupt = nodeIn_d_bits_denied & da_bits_opcode[0];
  wire [1:0]      nodeIn_d_bits_size = {nodeIn_d_bits_denied, 1'h0};
  wire [2:0]      nodeIn_d_bits_opcode = nodeIn_d_bits_denied ? da_bits_opcode : 3'h0;
  always @(posedge clock) begin
    if (reset) begin
      idle <= 1'h1;
      counter <= 1'h0;
      beatsLeft <= 1'h0;
      state_1 <= 1'h0;
    end
    else begin
      automatic logic done = da_ready & winner_1;
      idle <= ~(done & da_bits_opcode == 3'h4) & idle;
      counter <= (~done | counter - 1'h1) & counter;
      beatsLeft <=
        ~(~beatsLeft & auto_in_d_ready) & beatsLeft - (auto_in_d_ready & nodeIn_d_valid);
      if (beatsLeft) begin
      end
      else
        state_1 <= winner_1;
    end
  end // always @(posedge)
  TLMonitor_30 monitor (
    .clock                (clock),
    .reset                (reset),
    .io_in_a_ready        (nodeIn_a_ready),
    .io_in_a_valid        (auto_in_a_valid),
    .io_in_a_bits_opcode  (auto_in_a_bits_opcode),
    .io_in_a_bits_address (auto_in_a_bits_address),
    .io_in_d_ready        (auto_in_d_ready),
    .io_in_d_valid        (nodeIn_d_valid),
    .io_in_d_bits_opcode  (nodeIn_d_bits_opcode),
    .io_in_d_bits_size    (nodeIn_d_bits_size),
    .io_in_d_bits_denied  (nodeIn_d_bits_denied),
    .io_in_d_bits_corrupt (nodeIn_d_bits_corrupt)
  );
  assign auto_in_a_ready = nodeIn_a_ready;
  assign auto_in_d_valid = nodeIn_d_valid;
  assign auto_in_d_bits_opcode = nodeIn_d_bits_opcode;
  assign auto_in_d_bits_size = nodeIn_d_bits_size;
  assign auto_in_d_bits_denied = nodeIn_d_bits_denied;
  assign auto_in_d_bits_corrupt = nodeIn_d_bits_corrupt;
endmodule

module TLBusBypass(
  input         clock,
                reset,
                auto_node_out_out_a_ready,
                auto_node_out_out_d_valid,
  input  [2:0]  auto_node_out_out_d_bits_opcode,
  input  [1:0]  auto_node_out_out_d_bits_param,
                auto_node_out_out_d_bits_size,
  input         auto_node_out_out_d_bits_source,
                auto_node_out_out_d_bits_sink,
                auto_node_out_out_d_bits_denied,
  input  [31:0] auto_node_out_out_d_bits_data,
  input         auto_node_out_out_d_bits_corrupt,
                auto_node_in_in_a_valid,
  input  [2:0]  auto_node_in_in_a_bits_opcode,
  input  [8:0]  auto_node_in_in_a_bits_address,
  input  [31:0] auto_node_in_in_a_bits_data,
  input         auto_node_in_in_d_ready,
                io_bypass,
  output        auto_node_out_out_a_valid,
  output [2:0]  auto_node_out_out_a_bits_opcode,
  output [8:0]  auto_node_out_out_a_bits_address,
  output [31:0] auto_node_out_out_a_bits_data,
  output        auto_node_out_out_d_ready,
                auto_node_in_in_a_ready,
                auto_node_in_in_d_valid,
  output [2:0]  auto_node_in_in_d_bits_opcode,
  output [1:0]  auto_node_in_in_d_bits_param,
                auto_node_in_in_d_bits_size,
  output        auto_node_in_in_d_bits_sink,
                auto_node_in_in_d_bits_denied,
  output [31:0] auto_node_in_in_d_bits_data,
  output        auto_node_in_in_d_bits_corrupt
);

  wire         _error_auto_in_a_ready;
  wire         _error_auto_in_d_valid;
  wire [2:0]   _error_auto_in_d_bits_opcode;
  wire [1:0]   _error_auto_in_d_bits_size;
  wire         _error_auto_in_d_bits_denied;
  wire         _error_auto_in_d_bits_corrupt;
  wire         _bar_auto_out_0_a_valid;
  wire [2:0]   _bar_auto_out_0_a_bits_opcode;
  wire [127:0] _bar_auto_out_0_a_bits_address;
  wire         _bar_auto_out_0_d_ready;
  TLBusBypassBar bar (
    .clock                     (clock),
    .reset                     (reset),
    .auto_in_a_valid           (auto_node_in_in_a_valid),
    .auto_in_a_bits_opcode     (auto_node_in_in_a_bits_opcode),
    .auto_in_a_bits_address    (auto_node_in_in_a_bits_address),
    .auto_in_a_bits_data       (auto_node_in_in_a_bits_data),
    .auto_in_d_ready           (auto_node_in_in_d_ready),
    .auto_out_1_a_ready        (auto_node_out_out_a_ready),
    .auto_out_1_d_valid        (auto_node_out_out_d_valid),
    .auto_out_1_d_bits_opcode  (auto_node_out_out_d_bits_opcode),
    .auto_out_1_d_bits_param   (auto_node_out_out_d_bits_param),
    .auto_out_1_d_bits_size    (auto_node_out_out_d_bits_size),
    .auto_out_1_d_bits_source  (auto_node_out_out_d_bits_source),
    .auto_out_1_d_bits_sink    (auto_node_out_out_d_bits_sink),
    .auto_out_1_d_bits_denied  (auto_node_out_out_d_bits_denied),
    .auto_out_1_d_bits_data    (auto_node_out_out_d_bits_data),
    .auto_out_1_d_bits_corrupt (auto_node_out_out_d_bits_corrupt),
    .auto_out_0_a_ready        (_error_auto_in_a_ready),
    .auto_out_0_d_valid        (_error_auto_in_d_valid),
    .auto_out_0_d_bits_opcode  (_error_auto_in_d_bits_opcode),
    .auto_out_0_d_bits_size    (_error_auto_in_d_bits_size),
    .auto_out_0_d_bits_denied  (_error_auto_in_d_bits_denied),
    .auto_out_0_d_bits_corrupt (_error_auto_in_d_bits_corrupt),
    .io_bypass                 (io_bypass),
    .auto_in_a_ready           (auto_node_in_in_a_ready),
    .auto_in_d_valid           (auto_node_in_in_d_valid),
    .auto_in_d_bits_opcode     (auto_node_in_in_d_bits_opcode),
    .auto_in_d_bits_param      (auto_node_in_in_d_bits_param),
    .auto_in_d_bits_size       (auto_node_in_in_d_bits_size),
    .auto_in_d_bits_sink       (auto_node_in_in_d_bits_sink),
    .auto_in_d_bits_denied     (auto_node_in_in_d_bits_denied),
    .auto_in_d_bits_data       (auto_node_in_in_d_bits_data),
    .auto_in_d_bits_corrupt    (auto_node_in_in_d_bits_corrupt),
    .auto_out_1_a_valid        (auto_node_out_out_a_valid),
    .auto_out_1_a_bits_opcode  (auto_node_out_out_a_bits_opcode),
    .auto_out_1_a_bits_address (auto_node_out_out_a_bits_address),
    .auto_out_1_a_bits_data    (auto_node_out_out_a_bits_data),
    .auto_out_1_d_ready        (auto_node_out_out_d_ready),
    .auto_out_0_a_valid        (_bar_auto_out_0_a_valid),
    .auto_out_0_a_bits_opcode  (_bar_auto_out_0_a_bits_opcode),
    .auto_out_0_a_bits_address (_bar_auto_out_0_a_bits_address),
    .auto_out_0_d_ready        (_bar_auto_out_0_d_ready)
  );
  TLError_1 error (
    .clock                  (clock),
    .reset                  (reset),
    .auto_in_a_valid        (_bar_auto_out_0_a_valid),
    .auto_in_a_bits_opcode  (_bar_auto_out_0_a_bits_opcode),
    .auto_in_a_bits_address (_bar_auto_out_0_a_bits_address),
    .auto_in_d_ready        (_bar_auto_out_0_d_ready),
    .auto_in_a_ready        (_error_auto_in_a_ready),
    .auto_in_d_valid        (_error_auto_in_d_valid),
    .auto_in_d_bits_opcode  (_error_auto_in_d_bits_opcode),
    .auto_in_d_bits_size    (_error_auto_in_d_bits_size),
    .auto_in_d_bits_denied  (_error_auto_in_d_bits_denied),
    .auto_in_d_bits_corrupt (_error_auto_in_d_bits_corrupt)
  );
endmodule

module TLMonitor_31(
  input       clock,
              reset,
              io_in_a_ready,
              io_in_a_valid,
  input [2:0] io_in_a_bits_opcode,
  input [8:0] io_in_a_bits_address,
  input       io_in_d_ready,
              io_in_d_valid,
  input [2:0] io_in_d_bits_opcode,
  input [1:0] io_in_d_bits_param,
              io_in_d_bits_size,
  input       io_in_d_bits_source,
              io_in_d_bits_sink,
              io_in_d_bits_denied,
              io_in_d_bits_corrupt
);

  wire [31:0] _plusarg_reader_1_out;
  wire [31:0] _plusarg_reader_out;
  wire        a_first_done = io_in_a_ready & io_in_a_valid;
  reg         a_first_counter;
  reg  [2:0]  opcode;
  reg  [2:0]  param;
  reg  [1:0]  size;
  reg         source;
  reg  [8:0]  address;
  reg         d_first_counter;
  reg  [2:0]  opcode_1;
  reg  [1:0]  param_1;
  reg  [1:0]  size_1;
  reg         source_1;
  reg         sink;
  reg         denied;
  reg  [1:0]  inflight;
  reg  [3:0]  inflight_opcodes;
  reg  [3:0]  inflight_sizes;
  reg         a_first_counter_1;
  reg         d_first_counter_1;
  wire        a_set = a_first_done & ~a_first_counter_1;
  wire        d_release_ack = io_in_d_bits_opcode == 3'h6;
  reg  [31:0] watchdog;
  reg  [1:0]  inflight_1;
  reg  [3:0]  inflight_sizes_1;
  reg         d_first_counter_2;
  reg  [31:0] watchdog_1;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      automatic logic [7:0][2:0] _GEN = '{3'h4, 3'h5, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic [7:0][2:0] _GEN_0 =
        '{3'h4, 3'h4, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic            _GEN_1 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_2 = io_in_a_valid & (&io_in_a_bits_opcode) & ~reset;
      automatic logic [4:0]      _GEN_3 = io_in_a_bits_address[6:2] ^ 5'h11;
      automatic logic            _GEN_4 =
        io_in_a_bits_address[8:6] == 3'h0
        | {io_in_a_bits_address[8:7], _GEN_3[4:2], _GEN_3[0]} == 6'h0
        | {io_in_a_bits_address[8:7], io_in_a_bits_address[6:3] ^ 4'hB} == 6'h0
        | {io_in_a_bits_address[8:7], ~(io_in_a_bits_address[6:5])} == 4'h0
        | {io_in_a_bits_address[8], ~(io_in_a_bits_address[7])} == 2'h0
        | io_in_a_bits_address[8];
      automatic logic            _GEN_5 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_6 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_7 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_8 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_9 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h3 & ~reset;
      automatic logic            _GEN_10 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h5 & ~reset;
      automatic logic            _GEN_11 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_12 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_13 = io_in_d_bits_param == 2'h2;
      automatic logic            _GEN_14 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h5 & ~reset;
      automatic logic            _GEN_15 = ~io_in_d_bits_denied | io_in_d_bits_corrupt;
      automatic logic            _GEN_16 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_17 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_18 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_19 = io_in_a_valid & a_first_counter & ~reset;
      automatic logic            _GEN_20 = io_in_d_valid & d_first_counter & ~reset;
      automatic logic [3:0]      _GEN_21 = {1'h0, io_in_d_bits_source, 2'h0};
      automatic logic [3:0]      _GEN_22 = inflight_opcodes >> _GEN_21;
      automatic logic            a_set_wo_ready = io_in_a_valid & ~a_first_counter_1;
      automatic logic            _GEN_23 = io_in_d_valid & ~d_first_counter_1;
      automatic logic            _GEN_24 = _GEN_23 & ~d_release_ack;
      automatic logic [1:0]      _GEN_25 = {1'h0, io_in_d_bits_source};
      automatic logic            same_cycle_resp = a_set_wo_ready & ~io_in_d_bits_source;
      automatic logic            _GEN_26 = _GEN_24 & same_cycle_resp & ~reset;
      automatic logic            _GEN_27 = _GEN_24 & ~same_cycle_resp & ~reset;
      automatic logic [3:0]      _GEN_28 = {2'h0, io_in_d_bits_size};
      automatic logic            _GEN_29 =
        io_in_d_valid & ~d_first_counter_2 & d_release_ack & ~reset;
      automatic logic [1:0]      _GEN_30 = inflight >> _GEN_25;
      automatic logic [3:0]      _GEN_31 = inflight_sizes >> _GEN_21;
      automatic logic [1:0]      _GEN_32 = inflight_1 >> _GEN_25;
      automatic logic [3:0]      _GEN_33 = inflight_sizes_1 >> _GEN_21;
      if (_GEN_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_1 & (|(io_in_a_bits_address[1:0]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_2 & (|(io_in_a_bits_address[1:0]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_5 & ~_GEN_4) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_5 & (|(io_in_a_bits_address[1:0]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get address not aligned to size (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_6 & ~_GEN_4) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_6 & (|(io_in_a_bits_address[1:0]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull address not aligned to size (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_7) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_7 & (|(io_in_a_bits_address[1:0]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial address not aligned to size (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_8) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_8 & (|(io_in_a_bits_address[1:0]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_9) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_9 & (|(io_in_a_bits_address[1:0]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical address not aligned to size (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_10) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_10 & (|(io_in_a_bits_address[1:0]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint address not aligned to size (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & ~reset & (&io_in_d_bits_opcode)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel has invalid opcode (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_11 & io_in_d_bits_source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_11 & ~(io_in_d_bits_size[1])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_11 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_11 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck is corrupt (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_11 & io_in_d_bits_denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck is denied (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_12 & io_in_d_bits_source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid source ID (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_12) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid sink ID (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_12 & ~(io_in_d_bits_size[1])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant smaller than a beat (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_12 & (&io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid cap param (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_12 & _GEN_13) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries toN param (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_12 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant is corrupt (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_12 & io_in_d_bits_denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant is denied (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & io_in_d_bits_source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid source ID (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid sink ID (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & ~(io_in_d_bits_size[1])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData smaller than a beat (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & (&io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid cap param (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & _GEN_13) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries toN param (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & ~_GEN_15) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData is denied but not corrupt (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & io_in_d_bits_denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData is denied (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16 & io_in_d_bits_source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck carries invalid param (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck is corrupt (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16 & io_in_d_bits_denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck is denied (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & io_in_d_bits_source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData carries invalid param (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & ~_GEN_15) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData is denied but not corrupt (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & io_in_d_bits_denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData is denied (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & io_in_d_bits_source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck carries invalid source ID (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & (|io_in_d_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck carries invalid param (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & io_in_d_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck is corrupt (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & io_in_d_bits_denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck is denied (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & io_in_a_bits_opcode != opcode) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel opcode changed within multibeat operation (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & (|param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel param changed within multibeat operation (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & size != 2'h2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel size changed within multibeat operation (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel source changed within multibeat operation (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & io_in_a_bits_address != address) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel address changed with multibeat operation (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & io_in_d_bits_opcode != opcode_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel opcode changed within multibeat operation (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & io_in_d_bits_param != param_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel param changed within multibeat operation (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & io_in_d_bits_size != size_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel size changed within multibeat operation (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & io_in_d_bits_source != source_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel source changed within multibeat operation (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & io_in_d_bits_sink != sink) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel sink changed with multibeat operation (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & io_in_d_bits_denied != denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel denied changed with multibeat operation (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (a_set & ~reset & inflight[0]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel re-used a source ID (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_24 & ~reset & ~(_GEN_30[0] | same_cycle_resp)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_26
          & ~(io_in_d_bits_opcode == _GEN_0[io_in_a_bits_opcode]
              | io_in_d_bits_opcode == _GEN[io_in_a_bits_opcode])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_26 & io_in_d_bits_size != 2'h2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27
          & ~(io_in_d_bits_opcode == _GEN_0[_GEN_22[3:1]]
              | io_in_d_bits_opcode == _GEN[_GEN_22[3:1]])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & _GEN_28 != {1'h0, _GEN_31[3:1]}) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_23 & ~a_first_counter_1 & io_in_a_valid & ~io_in_d_bits_source
          & ~d_release_ack & ~reset & ~(~io_in_d_ready | io_in_a_ready)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ready check\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(a_set_wo_ready != (_GEN_24 & ~io_in_d_bits_source) | ~a_set_wo_ready)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' and 'D' concurrent, despite minlatency > 0 (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight == 2'h0 | _plusarg_reader_out == 32'h0
              | watchdog < _plusarg_reader_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_29 & ~(_GEN_32[0])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_29 & _GEN_28 != {1'h0, _GEN_33[3:1]}) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight_1 == 2'h0 | _plusarg_reader_1_out == 32'h0
              | watchdog_1 < _plusarg_reader_1_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/devices/debug/Debug.scala:705:46)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    automatic logic _GEN_34 = a_first_done & ~a_first_counter;
    automatic logic d_first_done;
    d_first_done = io_in_d_ready & io_in_d_valid;
    if (reset) begin
      a_first_counter <= 1'h0;
      d_first_counter <= 1'h0;
      inflight <= 2'h0;
      inflight_opcodes <= 4'h0;
      inflight_sizes <= 4'h0;
      a_first_counter_1 <= 1'h0;
      d_first_counter_1 <= 1'h0;
      watchdog <= 32'h0;
      inflight_1 <= 2'h0;
      inflight_sizes_1 <= 4'h0;
      d_first_counter_2 <= 1'h0;
      watchdog_1 <= 32'h0;
    end
    else begin
      automatic logic        _GEN_35;
      automatic logic [30:0] _GEN_36 = 31'hF << {28'h0, io_in_d_bits_source, 2'h0};
      automatic logic [3:0]  d_sizes_clr;
      automatic logic        _GEN_37;
      _GEN_35 = d_first_done & ~d_first_counter_1 & ~d_release_ack;
      d_sizes_clr = _GEN_35 ? _GEN_36[3:0] : 4'h0;
      _GEN_37 = d_first_done & ~d_first_counter_2 & d_release_ack;
      a_first_counter <= (~a_first_done | a_first_counter - 1'h1) & a_first_counter;
      d_first_counter <= (~d_first_done | d_first_counter - 1'h1) & d_first_counter;
      inflight <= {1'h0, (inflight[0] | a_set) & ~(_GEN_35 & ~io_in_d_bits_source)};
      inflight_opcodes <=
        (inflight_opcodes | (a_set ? {io_in_a_bits_opcode, 1'h1} : 4'h0)) & ~d_sizes_clr;
      inflight_sizes <=
        (inflight_sizes | (a_set ? {1'h0, a_set ? 3'h5 : 3'h0} : 4'h0)) & ~d_sizes_clr;
      a_first_counter_1 <= (~a_first_done | a_first_counter_1 - 1'h1) & a_first_counter_1;
      d_first_counter_1 <= (~d_first_done | d_first_counter_1 - 1'h1) & d_first_counter_1;
      if (a_first_done | d_first_done)
        watchdog <= 32'h0;
      else
        watchdog <= watchdog + 32'h1;
      inflight_1 <= {1'h0, inflight_1[0] & ~(_GEN_37 & ~io_in_d_bits_source)};
      inflight_sizes_1 <= inflight_sizes_1 & ~(_GEN_37 ? _GEN_36[3:0] : 4'h0);
      d_first_counter_2 <= (~d_first_done | d_first_counter_2 - 1'h1) & d_first_counter_2;
      if (d_first_done)
        watchdog_1 <= 32'h0;
      else
        watchdog_1 <= watchdog_1 + 32'h1;
    end
    if (_GEN_34) begin
      opcode <= io_in_a_bits_opcode;
      param <= 3'h0;
      size <= 2'h2;
      address <= io_in_a_bits_address;
    end
    source <= ~_GEN_34 & source;
    if (d_first_done & ~d_first_counter) begin
      opcode_1 <= io_in_d_bits_opcode;
      param_1 <= io_in_d_bits_param;
      size_1 <= io_in_d_bits_size;
      source_1 <= io_in_d_bits_source;
      sink <= io_in_d_bits_sink;
      denied <= io_in_d_bits_denied;
    end
  end // always @(posedge)
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader (
    .out (_plusarg_reader_out)
  );
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader_1 (
    .out (_plusarg_reader_1_out)
  );
endmodule

module AsyncResetSynchronizerPrimitiveShiftReg_d3_i0(
  input  clock,
         reset,
         io_d,
  output io_q
);

  reg sync_0;
  reg sync_1;
  reg sync_2;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      sync_0 <= 1'h0;
      sync_1 <= 1'h0;
      sync_2 <= 1'h0;
    end
    else begin
      sync_0 <= sync_1;
      sync_1 <= sync_2;
      sync_2 <= io_d;
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin
      if (reset) begin
        sync_0 = 1'h0;
        sync_1 = 1'h0;
        sync_2 = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_q = sync_0;
endmodule

module AsyncResetSynchronizerShiftReg_w1_d3_i0(
  input  clock,
         reset,
         io_d,
  output io_q
);

  AsyncResetSynchronizerPrimitiveShiftReg_d3_i0 output_chain (
    .clock (clock),
    .reset (reset),
    .io_d  (io_d),
    .io_q  (io_q)
  );
endmodule

module AsyncResetSynchronizerShiftReg_w1_d3_i0_1(
  input  clock,
         reset,
         io_d,
  output io_q
);

  AsyncResetSynchronizerPrimitiveShiftReg_d3_i0 output_chain (
    .clock (clock),
    .reset (reset),
    .io_d  (io_d),
    .io_q  (io_q)
  );
endmodule

module AsyncValidSync(
  input  io_in,
         clock,
         reset,
  output io_out
);

  AsyncResetSynchronizerShiftReg_w1_d3_i0_1 io_out_source_valid_0 (
    .clock (clock),
    .reset (reset),
    .io_d  (io_in),
    .io_q  (io_out)
  );
endmodule

module AsyncQueueSource_TLBundleA_a9d32s1k1z2u(
  input         clock,
                reset,
                io_enq_valid,
  input  [2:0]  io_enq_bits_opcode,
  input  [8:0]  io_enq_bits_address,
  input  [31:0] io_enq_bits_data,
  input         io_async_ridx,
                io_async_safe_ridx_valid,
                io_async_safe_sink_reset_n,
  output        io_enq_ready,
  output [2:0]  io_async_mem_0_opcode,
                io_async_mem_0_param,
  output [1:0]  io_async_mem_0_size,
  output        io_async_mem_0_source,
  output [8:0]  io_async_mem_0_address,
  output [3:0]  io_async_mem_0_mask,
  output [31:0] io_async_mem_0_data,
  output        io_async_mem_0_corrupt,
                io_async_widx,
                io_async_safe_widx_valid,
                io_async_safe_source_reset_n
);

  wire        _io_enq_ready_output;
  wire        _sink_valid_io_out;
  wire        _sink_extend_io_out;
  wire        _source_valid_0_io_out;
  wire        _ridx_ridx_gray_io_q;
  reg  [2:0]  mem_0_opcode;
  reg  [2:0]  mem_0_param;
  reg  [1:0]  mem_0_size;
  reg         mem_0_source;
  reg  [8:0]  mem_0_address;
  reg  [3:0]  mem_0_mask;
  reg  [31:0] mem_0_data;
  reg         mem_0_corrupt;
  wire        _GEN = _io_enq_ready_output & io_enq_valid;
  reg         widx_widx_bin;
  reg         ready_reg;
  assign _io_enq_ready_output = ready_reg & _sink_valid_io_out;
  reg         widx_gray;
  wire        _GEN_0 = reset | ~io_async_safe_sink_reset_n;
  always @(posedge clock) begin
    if (_GEN) begin
      mem_0_opcode <= io_enq_bits_opcode;
      mem_0_param <= 3'h0;
      mem_0_size <= 2'h2;
      mem_0_address <= io_enq_bits_address;
      mem_0_mask <= 4'hF;
      mem_0_data <= io_enq_bits_data;
    end
    mem_0_source <= ~_GEN & mem_0_source;
    mem_0_corrupt <= ~_GEN & mem_0_corrupt;
  end // always @(posedge)
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      widx_widx_bin <= 1'h0;
      ready_reg <= 1'h0;
      widx_gray <= 1'h0;
    end
    else begin
      automatic logic widx;
      widx = _sink_valid_io_out & widx_widx_bin + _GEN;
      widx_widx_bin <= widx;
      ready_reg <= _sink_valid_io_out & widx != ~_ridx_ridx_gray_io_q;
      widx_gray <= widx;
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin
      if (reset) begin
        widx_widx_bin = 1'h0;
        ready_reg = 1'h0;
        widx_gray = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  AsyncResetSynchronizerShiftReg_w1_d3_i0 ridx_ridx_gray (
    .clock (clock),
    .reset (reset),
    .io_d  (io_async_ridx),
    .io_q  (_ridx_ridx_gray_io_q)
  );
  AsyncValidSync source_valid_0 (
    .io_in  (1'h1),
    .clock  (clock),
    .reset  (_GEN_0),
    .io_out (_source_valid_0_io_out)
  );
  AsyncValidSync source_valid_1 (
    .io_in  (_source_valid_0_io_out),
    .clock  (clock),
    .reset  (_GEN_0),
    .io_out (io_async_safe_widx_valid)
  );
  AsyncValidSync sink_extend (
    .io_in  (io_async_safe_ridx_valid),
    .clock  (clock),
    .reset  (_GEN_0),
    .io_out (_sink_extend_io_out)
  );
  AsyncValidSync sink_valid (
    .io_in  (_sink_extend_io_out),
    .clock  (clock),
    .reset  (reset),
    .io_out (_sink_valid_io_out)
  );
  assign io_enq_ready = _io_enq_ready_output;
  assign io_async_mem_0_opcode = mem_0_opcode;
  assign io_async_mem_0_param = mem_0_param;
  assign io_async_mem_0_size = mem_0_size;
  assign io_async_mem_0_source = mem_0_source;
  assign io_async_mem_0_address = mem_0_address;
  assign io_async_mem_0_mask = mem_0_mask;
  assign io_async_mem_0_data = mem_0_data;
  assign io_async_mem_0_corrupt = mem_0_corrupt;
  assign io_async_widx = widx_gray;
  assign io_async_safe_source_reset_n = ~reset;
endmodule

module ClockCrossingReg_w43(
  input         clock,
  input  [42:0] io_d,
  input         io_en,
  output [42:0] io_q
);

  reg [42:0] cdc_reg;
  always @(posedge clock) begin
    if (io_en)
      cdc_reg <= io_d;
  end // always @(posedge)
  assign io_q = cdc_reg;
endmodule

module AsyncQueueSink_TLBundleD_a9d32s1k1z2u(
  input         clock,
                reset,
                io_deq_ready,
  input  [2:0]  io_async_mem_0_opcode,
  input  [1:0]  io_async_mem_0_param,
                io_async_mem_0_size,
  input         io_async_mem_0_source,
                io_async_mem_0_sink,
                io_async_mem_0_denied,
  input  [31:0] io_async_mem_0_data,
  input         io_async_mem_0_corrupt,
                io_async_widx,
                io_async_safe_widx_valid,
                io_async_safe_source_reset_n,
  output        io_deq_valid,
  output [2:0]  io_deq_bits_opcode,
  output [1:0]  io_deq_bits_param,
                io_deq_bits_size,
  output        io_deq_bits_source,
                io_deq_bits_sink,
                io_deq_bits_denied,
  output [31:0] io_deq_bits_data,
  output        io_deq_bits_corrupt,
                io_async_ridx,
                io_async_safe_ridx_valid,
                io_async_safe_sink_reset_n
);

  wire        _io_deq_valid_output;
  wire        _source_valid_io_out;
  wire        _source_extend_io_out;
  wire        _sink_valid_0_io_out;
  wire [42:0] _io_deq_bits_deq_bits_reg_io_q;
  wire        _widx_widx_gray_io_q;
  reg         ridx_ridx_bin;
  wire        ridx =
    _source_valid_io_out & ridx_ridx_bin + (io_deq_ready & _io_deq_valid_output);
  wire        valid = _source_valid_io_out & ridx != _widx_widx_gray_io_q;
  reg         valid_reg;
  assign _io_deq_valid_output = valid_reg & _source_valid_io_out;
  reg         ridx_gray;
  wire        _GEN = reset | ~io_async_safe_source_reset_n;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      ridx_ridx_bin <= 1'h0;
      valid_reg <= 1'h0;
      ridx_gray <= 1'h0;
    end
    else begin
      ridx_ridx_bin <= ridx;
      valid_reg <= valid;
      ridx_gray <= ridx;
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin
      if (reset) begin
        ridx_ridx_bin = 1'h0;
        valid_reg = 1'h0;
        ridx_gray = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  AsyncResetSynchronizerShiftReg_w1_d3_i0 widx_widx_gray (
    .clock (clock),
    .reset (reset),
    .io_d  (io_async_widx),
    .io_q  (_widx_widx_gray_io_q)
  );
  ClockCrossingReg_w43 io_deq_bits_deq_bits_reg (
    .clock (clock),
    .io_d
      ({io_async_mem_0_opcode,
        io_async_mem_0_param,
        io_async_mem_0_size,
        io_async_mem_0_source,
        io_async_mem_0_sink,
        io_async_mem_0_denied,
        io_async_mem_0_data,
        io_async_mem_0_corrupt}),
    .io_en (valid),
    .io_q  (_io_deq_bits_deq_bits_reg_io_q)
  );
  AsyncValidSync sink_valid_0 (
    .io_in  (1'h1),
    .clock  (clock),
    .reset  (_GEN),
    .io_out (_sink_valid_0_io_out)
  );
  AsyncValidSync sink_valid_1 (
    .io_in  (_sink_valid_0_io_out),
    .clock  (clock),
    .reset  (_GEN),
    .io_out (io_async_safe_ridx_valid)
  );
  AsyncValidSync source_extend (
    .io_in  (io_async_safe_widx_valid),
    .clock  (clock),
    .reset  (_GEN),
    .io_out (_source_extend_io_out)
  );
  AsyncValidSync source_valid (
    .io_in  (_source_extend_io_out),
    .clock  (clock),
    .reset  (reset),
    .io_out (_source_valid_io_out)
  );
  assign io_deq_valid = _io_deq_valid_output;
  assign io_deq_bits_opcode = _io_deq_bits_deq_bits_reg_io_q[42:40];
  assign io_deq_bits_param = _io_deq_bits_deq_bits_reg_io_q[39:38];
  assign io_deq_bits_size = _io_deq_bits_deq_bits_reg_io_q[37:36];
  assign io_deq_bits_source = _io_deq_bits_deq_bits_reg_io_q[35];
  assign io_deq_bits_sink = _io_deq_bits_deq_bits_reg_io_q[34];
  assign io_deq_bits_denied = _io_deq_bits_deq_bits_reg_io_q[33];
  assign io_deq_bits_data = _io_deq_bits_deq_bits_reg_io_q[32:1];
  assign io_deq_bits_corrupt = _io_deq_bits_deq_bits_reg_io_q[0];
  assign io_async_ridx = ridx_gray;
  assign io_async_safe_sink_reset_n = ~reset;
endmodule

module TLAsyncCrossingSource_a9d32s1k1z2u(
  input         clock,
                reset,
                auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
  input  [8:0]  auto_in_a_bits_address,
  input  [31:0] auto_in_a_bits_data,
  input         auto_in_d_ready,
                auto_out_a_ridx,
                auto_out_a_safe_ridx_valid,
                auto_out_a_safe_sink_reset_n,
  input  [2:0]  auto_out_d_mem_0_opcode,
  input  [1:0]  auto_out_d_mem_0_param,
                auto_out_d_mem_0_size,
  input         auto_out_d_mem_0_source,
                auto_out_d_mem_0_sink,
                auto_out_d_mem_0_denied,
  input  [31:0] auto_out_d_mem_0_data,
  input         auto_out_d_mem_0_corrupt,
                auto_out_d_widx,
                auto_out_d_safe_widx_valid,
                auto_out_d_safe_source_reset_n,
  output        auto_in_a_ready,
                auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
  output [1:0]  auto_in_d_bits_param,
                auto_in_d_bits_size,
  output        auto_in_d_bits_source,
                auto_in_d_bits_sink,
                auto_in_d_bits_denied,
  output [31:0] auto_in_d_bits_data,
  output        auto_in_d_bits_corrupt,
  output [2:0]  auto_out_a_mem_0_opcode,
                auto_out_a_mem_0_param,
  output [1:0]  auto_out_a_mem_0_size,
  output        auto_out_a_mem_0_source,
  output [8:0]  auto_out_a_mem_0_address,
  output [3:0]  auto_out_a_mem_0_mask,
  output [31:0] auto_out_a_mem_0_data,
  output        auto_out_a_mem_0_corrupt,
                auto_out_a_widx,
                auto_out_a_safe_widx_valid,
                auto_out_a_safe_source_reset_n,
                auto_out_d_ridx,
                auto_out_d_safe_ridx_valid,
                auto_out_d_safe_sink_reset_n
);

  wire       _nodeIn_d_sink_io_deq_valid;
  wire [2:0] _nodeIn_d_sink_io_deq_bits_opcode;
  wire [1:0] _nodeIn_d_sink_io_deq_bits_param;
  wire [1:0] _nodeIn_d_sink_io_deq_bits_size;
  wire       _nodeIn_d_sink_io_deq_bits_source;
  wire       _nodeIn_d_sink_io_deq_bits_sink;
  wire       _nodeIn_d_sink_io_deq_bits_denied;
  wire       _nodeIn_d_sink_io_deq_bits_corrupt;
  wire       _nodeOut_a_source_io_enq_ready;
  TLMonitor_31 monitor (
    .clock                (clock),
    .reset                (reset),
    .io_in_a_ready        (_nodeOut_a_source_io_enq_ready),
    .io_in_a_valid        (auto_in_a_valid),
    .io_in_a_bits_opcode  (auto_in_a_bits_opcode),
    .io_in_a_bits_address (auto_in_a_bits_address),
    .io_in_d_ready        (auto_in_d_ready),
    .io_in_d_valid        (_nodeIn_d_sink_io_deq_valid),
    .io_in_d_bits_opcode  (_nodeIn_d_sink_io_deq_bits_opcode),
    .io_in_d_bits_param   (_nodeIn_d_sink_io_deq_bits_param),
    .io_in_d_bits_size    (_nodeIn_d_sink_io_deq_bits_size),
    .io_in_d_bits_source  (_nodeIn_d_sink_io_deq_bits_source),
    .io_in_d_bits_sink    (_nodeIn_d_sink_io_deq_bits_sink),
    .io_in_d_bits_denied  (_nodeIn_d_sink_io_deq_bits_denied),
    .io_in_d_bits_corrupt (_nodeIn_d_sink_io_deq_bits_corrupt)
  );
  AsyncQueueSource_TLBundleA_a9d32s1k1z2u nodeOut_a_source (
    .clock                        (clock),
    .reset                        (reset),
    .io_enq_valid                 (auto_in_a_valid),
    .io_enq_bits_opcode           (auto_in_a_bits_opcode),
    .io_enq_bits_address          (auto_in_a_bits_address),
    .io_enq_bits_data             (auto_in_a_bits_data),
    .io_async_ridx                (auto_out_a_ridx),
    .io_async_safe_ridx_valid     (auto_out_a_safe_ridx_valid),
    .io_async_safe_sink_reset_n   (auto_out_a_safe_sink_reset_n),
    .io_enq_ready                 (_nodeOut_a_source_io_enq_ready),
    .io_async_mem_0_opcode        (auto_out_a_mem_0_opcode),
    .io_async_mem_0_param         (auto_out_a_mem_0_param),
    .io_async_mem_0_size          (auto_out_a_mem_0_size),
    .io_async_mem_0_source        (auto_out_a_mem_0_source),
    .io_async_mem_0_address       (auto_out_a_mem_0_address),
    .io_async_mem_0_mask          (auto_out_a_mem_0_mask),
    .io_async_mem_0_data          (auto_out_a_mem_0_data),
    .io_async_mem_0_corrupt       (auto_out_a_mem_0_corrupt),
    .io_async_widx                (auto_out_a_widx),
    .io_async_safe_widx_valid     (auto_out_a_safe_widx_valid),
    .io_async_safe_source_reset_n (auto_out_a_safe_source_reset_n)
  );
  AsyncQueueSink_TLBundleD_a9d32s1k1z2u nodeIn_d_sink (
    .clock                        (clock),
    .reset                        (reset),
    .io_deq_ready                 (auto_in_d_ready),
    .io_async_mem_0_opcode        (auto_out_d_mem_0_opcode),
    .io_async_mem_0_param         (auto_out_d_mem_0_param),
    .io_async_mem_0_size          (auto_out_d_mem_0_size),
    .io_async_mem_0_source        (auto_out_d_mem_0_source),
    .io_async_mem_0_sink          (auto_out_d_mem_0_sink),
    .io_async_mem_0_denied        (auto_out_d_mem_0_denied),
    .io_async_mem_0_data          (auto_out_d_mem_0_data),
    .io_async_mem_0_corrupt       (auto_out_d_mem_0_corrupt),
    .io_async_widx                (auto_out_d_widx),
    .io_async_safe_widx_valid     (auto_out_d_safe_widx_valid),
    .io_async_safe_source_reset_n (auto_out_d_safe_source_reset_n),
    .io_deq_valid                 (_nodeIn_d_sink_io_deq_valid),
    .io_deq_bits_opcode           (_nodeIn_d_sink_io_deq_bits_opcode),
    .io_deq_bits_param            (_nodeIn_d_sink_io_deq_bits_param),
    .io_deq_bits_size             (_nodeIn_d_sink_io_deq_bits_size),
    .io_deq_bits_source           (_nodeIn_d_sink_io_deq_bits_source),
    .io_deq_bits_sink             (_nodeIn_d_sink_io_deq_bits_sink),
    .io_deq_bits_denied           (_nodeIn_d_sink_io_deq_bits_denied),
    .io_deq_bits_data             (auto_in_d_bits_data),
    .io_deq_bits_corrupt          (_nodeIn_d_sink_io_deq_bits_corrupt),
    .io_async_ridx                (auto_out_d_ridx),
    .io_async_safe_ridx_valid     (auto_out_d_safe_ridx_valid),
    .io_async_safe_sink_reset_n   (auto_out_d_safe_sink_reset_n)
  );
  assign auto_in_a_ready = _nodeOut_a_source_io_enq_ready;
  assign auto_in_d_valid = _nodeIn_d_sink_io_deq_valid;
  assign auto_in_d_bits_opcode = _nodeIn_d_sink_io_deq_bits_opcode;
  assign auto_in_d_bits_param = _nodeIn_d_sink_io_deq_bits_param;
  assign auto_in_d_bits_size = _nodeIn_d_sink_io_deq_bits_size;
  assign auto_in_d_bits_source = _nodeIn_d_sink_io_deq_bits_source;
  assign auto_in_d_bits_sink = _nodeIn_d_sink_io_deq_bits_sink;
  assign auto_in_d_bits_denied = _nodeIn_d_sink_io_deq_bits_denied;
  assign auto_in_d_bits_corrupt = _nodeIn_d_sink_io_deq_bits_corrupt;
endmodule

module AsyncQueueSource_DebugInternalBundle(
  input        clock,
               reset,
               io_enq_valid,
               io_enq_bits_resumereq,
  input  [9:0] io_enq_bits_hartsel,
  input        io_enq_bits_ackhavereset,
               io_enq_bits_hrmask_0,
               io_async_ridx,
               io_async_safe_ridx_valid,
               io_async_safe_sink_reset_n,
  output       io_enq_ready,
               io_async_mem_0_resumereq,
  output [9:0] io_async_mem_0_hartsel,
  output       io_async_mem_0_ackhavereset,
               io_async_mem_0_hasel,
               io_async_mem_0_hamask_0,
               io_async_mem_0_hrmask_0,
               io_async_widx,
               io_async_safe_widx_valid,
               io_async_safe_source_reset_n
);

  wire       _io_enq_ready_output;
  wire       _sink_valid_io_out;
  wire       _sink_extend_io_out;
  wire       _source_valid_0_io_out;
  wire       _ridx_ridx_gray_io_q;
  reg        mem_0_resumereq;
  reg  [9:0] mem_0_hartsel;
  reg        mem_0_ackhavereset;
  reg        mem_0_hasel;
  reg        mem_0_hamask_0;
  reg        mem_0_hrmask_0;
  wire       _GEN = _io_enq_ready_output & io_enq_valid;
  reg        widx_widx_bin;
  reg        ready_reg;
  assign _io_enq_ready_output = ready_reg & _sink_valid_io_out;
  reg        widx_gray;
  wire       _GEN_0 = reset | ~io_async_safe_sink_reset_n;
  always @(posedge clock) begin
    if (_GEN) begin
      mem_0_resumereq <= io_enq_bits_resumereq;
      mem_0_hartsel <= io_enq_bits_hartsel;
      mem_0_ackhavereset <= io_enq_bits_ackhavereset;
      mem_0_hrmask_0 <= io_enq_bits_hrmask_0;
    end
    mem_0_hasel <= ~_GEN & mem_0_hasel;
    mem_0_hamask_0 <= ~_GEN & mem_0_hamask_0;
  end // always @(posedge)
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      widx_widx_bin <= 1'h0;
      ready_reg <= 1'h0;
      widx_gray <= 1'h0;
    end
    else begin
      automatic logic widx;
      widx = _sink_valid_io_out & widx_widx_bin + _GEN;
      widx_widx_bin <= widx;
      ready_reg <= _sink_valid_io_out & widx != ~_ridx_ridx_gray_io_q;
      widx_gray <= widx;
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin
      if (reset) begin
        widx_widx_bin = 1'h0;
        ready_reg = 1'h0;
        widx_gray = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  AsyncResetSynchronizerShiftReg_w1_d3_i0 ridx_ridx_gray (
    .clock (clock),
    .reset (reset),
    .io_d  (io_async_ridx),
    .io_q  (_ridx_ridx_gray_io_q)
  );
  AsyncValidSync source_valid_0 (
    .io_in  (1'h1),
    .clock  (clock),
    .reset  (_GEN_0),
    .io_out (_source_valid_0_io_out)
  );
  AsyncValidSync source_valid_1 (
    .io_in  (_source_valid_0_io_out),
    .clock  (clock),
    .reset  (_GEN_0),
    .io_out (io_async_safe_widx_valid)
  );
  AsyncValidSync sink_extend (
    .io_in  (io_async_safe_ridx_valid),
    .clock  (clock),
    .reset  (_GEN_0),
    .io_out (_sink_extend_io_out)
  );
  AsyncValidSync sink_valid (
    .io_in  (_sink_extend_io_out),
    .clock  (clock),
    .reset  (reset),
    .io_out (_sink_valid_io_out)
  );
  assign io_enq_ready = _io_enq_ready_output;
  assign io_async_mem_0_resumereq = mem_0_resumereq;
  assign io_async_mem_0_hartsel = mem_0_hartsel;
  assign io_async_mem_0_ackhavereset = mem_0_ackhavereset;
  assign io_async_mem_0_hasel = mem_0_hasel;
  assign io_async_mem_0_hamask_0 = mem_0_hamask_0;
  assign io_async_mem_0_hrmask_0 = mem_0_hrmask_0;
  assign io_async_widx = widx_gray;
  assign io_async_safe_source_reset_n = ~reset;
endmodule

module TLDebugModuleOuterAsync(
  input         auto_asource_out_a_ridx,
                auto_asource_out_a_safe_ridx_valid,
                auto_asource_out_a_safe_sink_reset_n,
  input  [2:0]  auto_asource_out_d_mem_0_opcode,
  input  [1:0]  auto_asource_out_d_mem_0_param,
                auto_asource_out_d_mem_0_size,
  input         auto_asource_out_d_mem_0_source,
                auto_asource_out_d_mem_0_sink,
                auto_asource_out_d_mem_0_denied,
  input  [31:0] auto_asource_out_d_mem_0_data,
  input         auto_asource_out_d_mem_0_corrupt,
                auto_asource_out_d_widx,
                auto_asource_out_d_safe_widx_valid,
                auto_asource_out_d_safe_source_reset_n,
                io_dmi_clock,
                io_dmi_reset,
                io_dmi_req_valid,
  input  [6:0]  io_dmi_req_bits_addr,
  input  [31:0] io_dmi_req_bits_data,
  input  [1:0]  io_dmi_req_bits_op,
  input         io_dmi_resp_ready,
                io_ctrl_dmactiveAck,
                io_innerCtrl_ridx,
                io_innerCtrl_safe_ridx_valid,
                io_innerCtrl_safe_sink_reset_n,
                io_hgDebugInt_0,
  output [2:0]  auto_asource_out_a_mem_0_opcode,
                auto_asource_out_a_mem_0_param,
  output [1:0]  auto_asource_out_a_mem_0_size,
  output        auto_asource_out_a_mem_0_source,
  output [8:0]  auto_asource_out_a_mem_0_address,
  output [3:0]  auto_asource_out_a_mem_0_mask,
  output [31:0] auto_asource_out_a_mem_0_data,
  output        auto_asource_out_a_mem_0_corrupt,
                auto_asource_out_a_widx,
                auto_asource_out_a_safe_widx_valid,
                auto_asource_out_a_safe_source_reset_n,
                auto_asource_out_d_ridx,
                auto_asource_out_d_safe_ridx_valid,
                auto_asource_out_d_safe_sink_reset_n,
                auto_int_out_sync_0,
                io_dmi_req_ready,
                io_dmi_resp_valid,
  output [31:0] io_dmi_resp_bits_data,
  output [1:0]  io_dmi_resp_bits_resp,
  output        io_ctrl_ndreset,
                io_ctrl_dmactive,
                io_innerCtrl_mem_0_resumereq,
  output [9:0]  io_innerCtrl_mem_0_hartsel,
  output        io_innerCtrl_mem_0_ackhavereset,
                io_innerCtrl_mem_0_hasel,
                io_innerCtrl_mem_0_hamask_0,
                io_innerCtrl_mem_0_hrmask_0,
                io_innerCtrl_widx,
                io_innerCtrl_safe_widx_valid,
                io_innerCtrl_safe_source_reset_n
);

  wire        _io_innerCtrl_source_io_enq_ready;
  wire        _dmactiveAck_dmactiveAckSync_io_q;
  wire        _asource_auto_in_a_ready;
  wire        _asource_auto_in_d_valid;
  wire [2:0]  _asource_auto_in_d_bits_opcode;
  wire [1:0]  _asource_auto_in_d_bits_param;
  wire [1:0]  _asource_auto_in_d_bits_size;
  wire        _asource_auto_in_d_bits_source;
  wire        _asource_auto_in_d_bits_sink;
  wire        _asource_auto_in_d_bits_denied;
  wire [31:0] _asource_auto_in_d_bits_data;
  wire        _asource_auto_in_d_bits_corrupt;
  wire        _dmiBypass_auto_node_out_out_a_valid;
  wire [2:0]  _dmiBypass_auto_node_out_out_a_bits_opcode;
  wire [8:0]  _dmiBypass_auto_node_out_out_a_bits_address;
  wire [31:0] _dmiBypass_auto_node_out_out_a_bits_data;
  wire        _dmiBypass_auto_node_out_out_d_ready;
  wire        _dmiBypass_auto_node_in_in_a_ready;
  wire        _dmiBypass_auto_node_in_in_d_valid;
  wire [2:0]  _dmiBypass_auto_node_in_in_d_bits_opcode;
  wire [1:0]  _dmiBypass_auto_node_in_in_d_bits_param;
  wire [1:0]  _dmiBypass_auto_node_in_in_d_bits_size;
  wire        _dmiBypass_auto_node_in_in_d_bits_sink;
  wire        _dmiBypass_auto_node_in_in_d_bits_denied;
  wire [31:0] _dmiBypass_auto_node_in_in_d_bits_data;
  wire        _dmiBypass_auto_node_in_in_d_bits_corrupt;
  wire        _dmOuter_auto_dmi_in_a_ready;
  wire        _dmOuter_auto_dmi_in_d_valid;
  wire [2:0]  _dmOuter_auto_dmi_in_d_bits_opcode;
  wire [31:0] _dmOuter_auto_dmi_in_d_bits_data;
  wire        _dmOuter_auto_int_out_0;
  wire        _dmOuter_io_ctrl_dmactive;
  wire        _dmOuter_io_innerCtrl_valid;
  wire        _dmOuter_io_innerCtrl_bits_resumereq;
  wire [9:0]  _dmOuter_io_innerCtrl_bits_hartsel;
  wire        _dmOuter_io_innerCtrl_bits_ackhavereset;
  wire        _dmOuter_io_innerCtrl_bits_hrmask_0;
  wire        _dmi2tl_auto_out_a_valid;
  wire [2:0]  _dmi2tl_auto_out_a_bits_opcode;
  wire [8:0]  _dmi2tl_auto_out_a_bits_address;
  wire [31:0] _dmi2tl_auto_out_a_bits_data;
  wire        _dmi2tl_auto_out_d_ready;
  wire        _dmiXbar_auto_anon_in_a_ready;
  wire        _dmiXbar_auto_anon_in_d_valid;
  wire        _dmiXbar_auto_anon_in_d_bits_denied;
  wire [31:0] _dmiXbar_auto_anon_in_d_bits_data;
  wire        _dmiXbar_auto_anon_in_d_bits_corrupt;
  wire        _dmiXbar_auto_anon_out_1_a_valid;
  wire [2:0]  _dmiXbar_auto_anon_out_1_a_bits_opcode;
  wire [6:0]  _dmiXbar_auto_anon_out_1_a_bits_address;
  wire [31:0] _dmiXbar_auto_anon_out_1_a_bits_data;
  wire        _dmiXbar_auto_anon_out_1_d_ready;
  wire        _dmiXbar_auto_anon_out_0_a_valid;
  wire [2:0]  _dmiXbar_auto_anon_out_0_a_bits_opcode;
  wire [8:0]  _dmiXbar_auto_anon_out_0_a_bits_address;
  wire [31:0] _dmiXbar_auto_anon_out_0_a_bits_data;
  wire        _dmiXbar_auto_anon_out_0_d_ready;
  TLXbar_dmixbar_i1_o2_a9d32s1k1z2u dmiXbar (
    .clock                          (io_dmi_clock),
    .reset                          (io_dmi_reset),
    .auto_anon_in_a_valid           (_dmi2tl_auto_out_a_valid),
    .auto_anon_in_a_bits_opcode     (_dmi2tl_auto_out_a_bits_opcode),
    .auto_anon_in_a_bits_address    (_dmi2tl_auto_out_a_bits_address),
    .auto_anon_in_a_bits_data       (_dmi2tl_auto_out_a_bits_data),
    .auto_anon_in_d_ready           (_dmi2tl_auto_out_d_ready),
    .auto_anon_out_1_a_ready        (_dmOuter_auto_dmi_in_a_ready),
    .auto_anon_out_1_d_valid        (_dmOuter_auto_dmi_in_d_valid),
    .auto_anon_out_1_d_bits_opcode  (_dmOuter_auto_dmi_in_d_bits_opcode),
    .auto_anon_out_1_d_bits_data    (_dmOuter_auto_dmi_in_d_bits_data),
    .auto_anon_out_0_a_ready        (_dmiBypass_auto_node_in_in_a_ready),
    .auto_anon_out_0_d_valid        (_dmiBypass_auto_node_in_in_d_valid),
    .auto_anon_out_0_d_bits_opcode  (_dmiBypass_auto_node_in_in_d_bits_opcode),
    .auto_anon_out_0_d_bits_param   (_dmiBypass_auto_node_in_in_d_bits_param),
    .auto_anon_out_0_d_bits_size    (_dmiBypass_auto_node_in_in_d_bits_size),
    .auto_anon_out_0_d_bits_sink    (_dmiBypass_auto_node_in_in_d_bits_sink),
    .auto_anon_out_0_d_bits_denied  (_dmiBypass_auto_node_in_in_d_bits_denied),
    .auto_anon_out_0_d_bits_data    (_dmiBypass_auto_node_in_in_d_bits_data),
    .auto_anon_out_0_d_bits_corrupt (_dmiBypass_auto_node_in_in_d_bits_corrupt),
    .auto_anon_in_a_ready           (_dmiXbar_auto_anon_in_a_ready),
    .auto_anon_in_d_valid           (_dmiXbar_auto_anon_in_d_valid),
    .auto_anon_in_d_bits_denied     (_dmiXbar_auto_anon_in_d_bits_denied),
    .auto_anon_in_d_bits_data       (_dmiXbar_auto_anon_in_d_bits_data),
    .auto_anon_in_d_bits_corrupt    (_dmiXbar_auto_anon_in_d_bits_corrupt),
    .auto_anon_out_1_a_valid        (_dmiXbar_auto_anon_out_1_a_valid),
    .auto_anon_out_1_a_bits_opcode  (_dmiXbar_auto_anon_out_1_a_bits_opcode),
    .auto_anon_out_1_a_bits_address (_dmiXbar_auto_anon_out_1_a_bits_address),
    .auto_anon_out_1_a_bits_data    (_dmiXbar_auto_anon_out_1_a_bits_data),
    .auto_anon_out_1_d_ready        (_dmiXbar_auto_anon_out_1_d_ready),
    .auto_anon_out_0_a_valid        (_dmiXbar_auto_anon_out_0_a_valid),
    .auto_anon_out_0_a_bits_opcode  (_dmiXbar_auto_anon_out_0_a_bits_opcode),
    .auto_anon_out_0_a_bits_address (_dmiXbar_auto_anon_out_0_a_bits_address),
    .auto_anon_out_0_a_bits_data    (_dmiXbar_auto_anon_out_0_a_bits_data),
    .auto_anon_out_0_d_ready        (_dmiXbar_auto_anon_out_0_d_ready)
  );
  DMIToTL dmi2tl (
    .auto_out_a_ready        (_dmiXbar_auto_anon_in_a_ready),
    .auto_out_d_valid        (_dmiXbar_auto_anon_in_d_valid),
    .auto_out_d_bits_denied  (_dmiXbar_auto_anon_in_d_bits_denied),
    .auto_out_d_bits_data    (_dmiXbar_auto_anon_in_d_bits_data),
    .auto_out_d_bits_corrupt (_dmiXbar_auto_anon_in_d_bits_corrupt),
    .io_dmi_req_valid        (io_dmi_req_valid),
    .io_dmi_req_bits_addr    (io_dmi_req_bits_addr),
    .io_dmi_req_bits_data    (io_dmi_req_bits_data),
    .io_dmi_req_bits_op      (io_dmi_req_bits_op),
    .io_dmi_resp_ready       (io_dmi_resp_ready),
    .auto_out_a_valid        (_dmi2tl_auto_out_a_valid),
    .auto_out_a_bits_opcode  (_dmi2tl_auto_out_a_bits_opcode),
    .auto_out_a_bits_address (_dmi2tl_auto_out_a_bits_address),
    .auto_out_a_bits_data    (_dmi2tl_auto_out_a_bits_data),
    .auto_out_d_ready        (_dmi2tl_auto_out_d_ready),
    .io_dmi_req_ready        (io_dmi_req_ready),
    .io_dmi_resp_valid       (io_dmi_resp_valid),
    .io_dmi_resp_bits_data   (io_dmi_resp_bits_data),
    .io_dmi_resp_bits_resp   (io_dmi_resp_bits_resp)
  );
  TLDebugModuleOuter dmOuter (
    .clock                          (io_dmi_clock),
    .reset                          (io_dmi_reset),
    .auto_dmi_in_a_valid            (_dmiXbar_auto_anon_out_1_a_valid),
    .auto_dmi_in_a_bits_opcode      (_dmiXbar_auto_anon_out_1_a_bits_opcode),
    .auto_dmi_in_a_bits_address     (_dmiXbar_auto_anon_out_1_a_bits_address),
    .auto_dmi_in_a_bits_data        (_dmiXbar_auto_anon_out_1_a_bits_data),
    .auto_dmi_in_d_ready            (_dmiXbar_auto_anon_out_1_d_ready),
    .io_ctrl_dmactiveAck            (_dmactiveAck_dmactiveAckSync_io_q),
    .io_innerCtrl_ready             (_io_innerCtrl_source_io_enq_ready),
    .io_hgDebugInt_0                (io_hgDebugInt_0),
    .auto_dmi_in_a_ready            (_dmOuter_auto_dmi_in_a_ready),
    .auto_dmi_in_d_valid            (_dmOuter_auto_dmi_in_d_valid),
    .auto_dmi_in_d_bits_opcode      (_dmOuter_auto_dmi_in_d_bits_opcode),
    .auto_dmi_in_d_bits_data        (_dmOuter_auto_dmi_in_d_bits_data),
    .auto_int_out_0                 (_dmOuter_auto_int_out_0),
    .io_ctrl_ndreset                (io_ctrl_ndreset),
    .io_ctrl_dmactive               (_dmOuter_io_ctrl_dmactive),
    .io_innerCtrl_valid             (_dmOuter_io_innerCtrl_valid),
    .io_innerCtrl_bits_resumereq    (_dmOuter_io_innerCtrl_bits_resumereq),
    .io_innerCtrl_bits_hartsel      (_dmOuter_io_innerCtrl_bits_hartsel),
    .io_innerCtrl_bits_ackhavereset (_dmOuter_io_innerCtrl_bits_ackhavereset),
    .io_innerCtrl_bits_hrmask_0     (_dmOuter_io_innerCtrl_bits_hrmask_0)
  );
  IntSyncCrossingSource_n1x1_Registered intsource (
    .auto_in_0       (_dmOuter_auto_int_out_0),
    .auto_out_sync_0 (auto_int_out_sync_0)
  );
  TLBusBypass dmiBypass (
    .clock                            (io_dmi_clock),
    .reset                            (io_dmi_reset),
    .auto_node_out_out_a_ready        (_asource_auto_in_a_ready),
    .auto_node_out_out_d_valid        (_asource_auto_in_d_valid),
    .auto_node_out_out_d_bits_opcode  (_asource_auto_in_d_bits_opcode),
    .auto_node_out_out_d_bits_param   (_asource_auto_in_d_bits_param),
    .auto_node_out_out_d_bits_size    (_asource_auto_in_d_bits_size),
    .auto_node_out_out_d_bits_source  (_asource_auto_in_d_bits_source),
    .auto_node_out_out_d_bits_sink    (_asource_auto_in_d_bits_sink),
    .auto_node_out_out_d_bits_denied  (_asource_auto_in_d_bits_denied),
    .auto_node_out_out_d_bits_data    (_asource_auto_in_d_bits_data),
    .auto_node_out_out_d_bits_corrupt (_asource_auto_in_d_bits_corrupt),
    .auto_node_in_in_a_valid          (_dmiXbar_auto_anon_out_0_a_valid),
    .auto_node_in_in_a_bits_opcode    (_dmiXbar_auto_anon_out_0_a_bits_opcode),
    .auto_node_in_in_a_bits_address   (_dmiXbar_auto_anon_out_0_a_bits_address),
    .auto_node_in_in_a_bits_data      (_dmiXbar_auto_anon_out_0_a_bits_data),
    .auto_node_in_in_d_ready          (_dmiXbar_auto_anon_out_0_d_ready),
    .io_bypass
      (~_dmOuter_io_ctrl_dmactive | ~_dmactiveAck_dmactiveAckSync_io_q),
    .auto_node_out_out_a_valid        (_dmiBypass_auto_node_out_out_a_valid),
    .auto_node_out_out_a_bits_opcode  (_dmiBypass_auto_node_out_out_a_bits_opcode),
    .auto_node_out_out_a_bits_address (_dmiBypass_auto_node_out_out_a_bits_address),
    .auto_node_out_out_a_bits_data    (_dmiBypass_auto_node_out_out_a_bits_data),
    .auto_node_out_out_d_ready        (_dmiBypass_auto_node_out_out_d_ready),
    .auto_node_in_in_a_ready          (_dmiBypass_auto_node_in_in_a_ready),
    .auto_node_in_in_d_valid          (_dmiBypass_auto_node_in_in_d_valid),
    .auto_node_in_in_d_bits_opcode    (_dmiBypass_auto_node_in_in_d_bits_opcode),
    .auto_node_in_in_d_bits_param     (_dmiBypass_auto_node_in_in_d_bits_param),
    .auto_node_in_in_d_bits_size      (_dmiBypass_auto_node_in_in_d_bits_size),
    .auto_node_in_in_d_bits_sink      (_dmiBypass_auto_node_in_in_d_bits_sink),
    .auto_node_in_in_d_bits_denied    (_dmiBypass_auto_node_in_in_d_bits_denied),
    .auto_node_in_in_d_bits_data      (_dmiBypass_auto_node_in_in_d_bits_data),
    .auto_node_in_in_d_bits_corrupt   (_dmiBypass_auto_node_in_in_d_bits_corrupt)
  );
  TLAsyncCrossingSource_a9d32s1k1z2u asource (
    .clock                          (io_dmi_clock),
    .reset                          (io_dmi_reset),
    .auto_in_a_valid                (_dmiBypass_auto_node_out_out_a_valid),
    .auto_in_a_bits_opcode          (_dmiBypass_auto_node_out_out_a_bits_opcode),
    .auto_in_a_bits_address         (_dmiBypass_auto_node_out_out_a_bits_address),
    .auto_in_a_bits_data            (_dmiBypass_auto_node_out_out_a_bits_data),
    .auto_in_d_ready                (_dmiBypass_auto_node_out_out_d_ready),
    .auto_out_a_ridx                (auto_asource_out_a_ridx),
    .auto_out_a_safe_ridx_valid     (auto_asource_out_a_safe_ridx_valid),
    .auto_out_a_safe_sink_reset_n   (auto_asource_out_a_safe_sink_reset_n),
    .auto_out_d_mem_0_opcode        (auto_asource_out_d_mem_0_opcode),
    .auto_out_d_mem_0_param         (auto_asource_out_d_mem_0_param),
    .auto_out_d_mem_0_size          (auto_asource_out_d_mem_0_size),
    .auto_out_d_mem_0_source        (auto_asource_out_d_mem_0_source),
    .auto_out_d_mem_0_sink          (auto_asource_out_d_mem_0_sink),
    .auto_out_d_mem_0_denied        (auto_asource_out_d_mem_0_denied),
    .auto_out_d_mem_0_data          (auto_asource_out_d_mem_0_data),
    .auto_out_d_mem_0_corrupt       (auto_asource_out_d_mem_0_corrupt),
    .auto_out_d_widx                (auto_asource_out_d_widx),
    .auto_out_d_safe_widx_valid     (auto_asource_out_d_safe_widx_valid),
    .auto_out_d_safe_source_reset_n (auto_asource_out_d_safe_source_reset_n),
    .auto_in_a_ready                (_asource_auto_in_a_ready),
    .auto_in_d_valid                (_asource_auto_in_d_valid),
    .auto_in_d_bits_opcode          (_asource_auto_in_d_bits_opcode),
    .auto_in_d_bits_param           (_asource_auto_in_d_bits_param),
    .auto_in_d_bits_size            (_asource_auto_in_d_bits_size),
    .auto_in_d_bits_source          (_asource_auto_in_d_bits_source),
    .auto_in_d_bits_sink            (_asource_auto_in_d_bits_sink),
    .auto_in_d_bits_denied          (_asource_auto_in_d_bits_denied),
    .auto_in_d_bits_data            (_asource_auto_in_d_bits_data),
    .auto_in_d_bits_corrupt         (_asource_auto_in_d_bits_corrupt),
    .auto_out_a_mem_0_opcode        (auto_asource_out_a_mem_0_opcode),
    .auto_out_a_mem_0_param         (auto_asource_out_a_mem_0_param),
    .auto_out_a_mem_0_size          (auto_asource_out_a_mem_0_size),
    .auto_out_a_mem_0_source        (auto_asource_out_a_mem_0_source),
    .auto_out_a_mem_0_address       (auto_asource_out_a_mem_0_address),
    .auto_out_a_mem_0_mask          (auto_asource_out_a_mem_0_mask),
    .auto_out_a_mem_0_data          (auto_asource_out_a_mem_0_data),
    .auto_out_a_mem_0_corrupt       (auto_asource_out_a_mem_0_corrupt),
    .auto_out_a_widx                (auto_asource_out_a_widx),
    .auto_out_a_safe_widx_valid     (auto_asource_out_a_safe_widx_valid),
    .auto_out_a_safe_source_reset_n (auto_asource_out_a_safe_source_reset_n),
    .auto_out_d_ridx                (auto_asource_out_d_ridx),
    .auto_out_d_safe_ridx_valid     (auto_asource_out_d_safe_ridx_valid),
    .auto_out_d_safe_sink_reset_n   (auto_asource_out_d_safe_sink_reset_n)
  );
  AsyncResetSynchronizerShiftReg_w1_d3_i0 dmactiveAck_dmactiveAckSync (
    .clock (io_dmi_clock),
    .reset (io_dmi_reset),
    .io_d  (io_ctrl_dmactiveAck),
    .io_q  (_dmactiveAck_dmactiveAckSync_io_q)
  );
  AsyncQueueSource_DebugInternalBundle io_innerCtrl_source (
    .clock                        (io_dmi_clock),
    .reset                        (io_dmi_reset),
    .io_enq_valid                 (_dmOuter_io_innerCtrl_valid),
    .io_enq_bits_resumereq        (_dmOuter_io_innerCtrl_bits_resumereq),
    .io_enq_bits_hartsel          (_dmOuter_io_innerCtrl_bits_hartsel),
    .io_enq_bits_ackhavereset     (_dmOuter_io_innerCtrl_bits_ackhavereset),
    .io_enq_bits_hrmask_0         (_dmOuter_io_innerCtrl_bits_hrmask_0),
    .io_async_ridx                (io_innerCtrl_ridx),
    .io_async_safe_ridx_valid     (io_innerCtrl_safe_ridx_valid),
    .io_async_safe_sink_reset_n   (io_innerCtrl_safe_sink_reset_n),
    .io_enq_ready                 (_io_innerCtrl_source_io_enq_ready),
    .io_async_mem_0_resumereq     (io_innerCtrl_mem_0_resumereq),
    .io_async_mem_0_hartsel       (io_innerCtrl_mem_0_hartsel),
    .io_async_mem_0_ackhavereset  (io_innerCtrl_mem_0_ackhavereset),
    .io_async_mem_0_hasel         (io_innerCtrl_mem_0_hasel),
    .io_async_mem_0_hamask_0      (io_innerCtrl_mem_0_hamask_0),
    .io_async_mem_0_hrmask_0      (io_innerCtrl_mem_0_hrmask_0),
    .io_async_widx                (io_innerCtrl_widx),
    .io_async_safe_widx_valid     (io_innerCtrl_safe_widx_valid),
    .io_async_safe_source_reset_n (io_innerCtrl_safe_source_reset_n)
  );
  assign io_ctrl_dmactive = _dmOuter_io_ctrl_dmactive;
endmodule

module TLMonitor_32(
  input       clock,
              reset,
              io_in_a_ready,
              io_in_a_valid,
  input [2:0] io_in_a_bits_opcode,
              io_in_a_bits_param,
  input [1:0] io_in_a_bits_size,
  input       io_in_a_bits_source,
  input [8:0] io_in_a_bits_address,
  input [3:0] io_in_a_bits_mask,
  input       io_in_a_bits_corrupt,
              io_in_d_ready,
              io_in_d_valid,
  input [2:0] io_in_d_bits_opcode,
  input [1:0] io_in_d_bits_size,
  input       io_in_d_bits_source
);

  wire [31:0] _plusarg_reader_1_out;
  wire [31:0] _plusarg_reader_out;
  wire        a_first_done = io_in_a_ready & io_in_a_valid;
  reg         a_first_counter;
  reg  [2:0]  opcode;
  reg  [2:0]  param;
  reg  [1:0]  size;
  reg         source;
  reg  [8:0]  address;
  reg         d_first_counter;
  reg  [2:0]  opcode_1;
  reg  [1:0]  param_1;
  reg  [1:0]  size_1;
  reg         source_1;
  reg         sink;
  reg         denied;
  reg  [1:0]  inflight;
  reg  [3:0]  inflight_opcodes;
  reg  [3:0]  inflight_sizes;
  reg         a_first_counter_1;
  reg         d_first_counter_1;
  wire        _GEN = a_first_done & ~a_first_counter_1;
  wire        d_release_ack = io_in_d_bits_opcode == 3'h6;
  reg  [31:0] watchdog;
  reg  [1:0]  inflight_1;
  reg  [3:0]  inflight_sizes_1;
  reg         d_first_counter_2;
  reg  [31:0] watchdog_1;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      automatic logic [7:0][2:0] _GEN_0 =
        '{3'h4, 3'h5, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic [7:0][2:0] _GEN_1 =
        '{3'h4, 3'h4, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic [4:0]      _GEN_2 = 5'h3 << io_in_a_bits_size;
      automatic logic [1:0]      _GEN_3 = io_in_a_bits_address[1:0] & ~(_GEN_2[1:0]);
      automatic logic            mask_acc =
        io_in_a_bits_size[1] | io_in_a_bits_size[0] & ~(io_in_a_bits_address[1]);
      automatic logic            mask_acc_1 =
        io_in_a_bits_size[1] | io_in_a_bits_size[0] & io_in_a_bits_address[1];
      automatic logic [3:0]      mask =
        {mask_acc_1 | io_in_a_bits_address[1] & io_in_a_bits_address[0],
         mask_acc_1 | io_in_a_bits_address[1] & ~(io_in_a_bits_address[0]),
         mask_acc | ~(io_in_a_bits_address[1]) & io_in_a_bits_address[0],
         mask_acc | ~(io_in_a_bits_address[1]) & ~(io_in_a_bits_address[0])};
      automatic logic            _GEN_4 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_5 = io_in_a_bits_param > 3'h2;
      automatic logic            _GEN_6 = io_in_a_bits_mask != 4'hF;
      automatic logic            _GEN_7 = io_in_a_valid & (&io_in_a_bits_opcode) & ~reset;
      automatic logic            _GEN_8 =
        io_in_a_bits_size == 2'h2 & ~io_in_a_bits_source;
      automatic logic            _GEN_9 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h4 & ~reset;
      automatic logic [4:0]      _GEN_10 = io_in_a_bits_address[6:2] ^ 5'h11;
      automatic logic            _GEN_11 =
        io_in_a_bits_size != 2'h3
        & (io_in_a_bits_address[8:6] == 3'h0
           | {io_in_a_bits_address[8:7], _GEN_10[4:2], _GEN_10[0]} == 6'h0
           | {io_in_a_bits_address[8:7], io_in_a_bits_address[6:3] ^ 4'hB} == 6'h0
           | {io_in_a_bits_address[8:7], ~(io_in_a_bits_address[6:5])} == 4'h0
           | {io_in_a_bits_address[8], ~(io_in_a_bits_address[7])} == 2'h0
           | io_in_a_bits_address[8]);
      automatic logic            _GEN_12 = io_in_a_bits_mask != mask;
      automatic logic            _GEN_13 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_14 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_15 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_16 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h3 & ~reset;
      automatic logic            _GEN_17 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h5 & ~reset;
      automatic logic            _GEN_18 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_19 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_20 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h5 & ~reset;
      automatic logic            _GEN_21 = io_in_a_valid & a_first_counter & ~reset;
      automatic logic            _GEN_22 = io_in_d_valid & d_first_counter & ~reset;
      automatic logic [3:0]      _GEN_23 = {1'h0, io_in_d_bits_source, 2'h0};
      automatic logic [3:0]      _GEN_24 = inflight_opcodes >> _GEN_23;
      automatic logic            _GEN_25 = io_in_d_valid & ~d_first_counter_1;
      automatic logic [1:0]      _GEN_26 = {1'h0, io_in_d_bits_source};
      automatic logic            _GEN_27 = _GEN_25 & ~d_release_ack;
      automatic logic            _GEN_28 = io_in_a_bits_source == io_in_d_bits_source;
      automatic logic            same_cycle_resp =
        io_in_a_valid & ~a_first_counter_1 & _GEN_28;
      automatic logic            _GEN_29 = _GEN_27 & same_cycle_resp & ~reset;
      automatic logic            _GEN_30 = _GEN_27 & ~same_cycle_resp & ~reset;
      automatic logic [3:0]      _GEN_31 = {2'h0, io_in_d_bits_size};
      automatic logic            _GEN_32 =
        io_in_d_valid & ~d_first_counter_2 & d_release_ack & ~reset;
      automatic logic [1:0]      _GEN_33 = inflight >> io_in_a_bits_source;
      automatic logic [1:0]      _GEN_34 = inflight >> _GEN_26;
      automatic logic [3:0]      _GEN_35 = inflight_sizes >> _GEN_23;
      automatic logic [1:0]      _GEN_36 = inflight_1 >> _GEN_26;
      automatic logic [3:0]      _GEN_37 = inflight_sizes_1 >> _GEN_23;
      if (_GEN_4) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_4 & io_in_a_bits_source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock carries invalid source ID (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_4 & ~(io_in_a_bits_size[1])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_4 & (|_GEN_3)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_4 & _GEN_5) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock carries invalid grow param (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_4 & _GEN_6) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_4 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock is corrupt (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_7) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_7 & io_in_a_bits_source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm carries invalid source ID (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_7 & ~(io_in_a_bits_size[1])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_7 & (|_GEN_3)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_7 & _GEN_5) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm carries invalid grow param (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_7 & ~(|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_7 & _GEN_6) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_7 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm is corrupt (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_9 & ~_GEN_8) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_9 & ~_GEN_11) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_9 & io_in_a_bits_source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get carries invalid source ID (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_9 & (|_GEN_3)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get address not aligned to size (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_9 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get carries invalid param (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_9 & _GEN_12) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get contains invalid mask (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_9 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get is corrupt (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_13 & ~(_GEN_8 & _GEN_11)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_13 & io_in_a_bits_source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull carries invalid source ID (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_13 & (|_GEN_3)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull address not aligned to size (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_13 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull carries invalid param (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_13 & _GEN_12) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull contains invalid mask (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & io_in_a_bits_source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & (|_GEN_3)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial address not aligned to size (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial carries invalid param (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & (|(io_in_a_bits_mask & ~mask))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial contains invalid mask (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & io_in_a_bits_source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & (|_GEN_3)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & io_in_a_bits_param > 3'h4) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & _GEN_12) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16 & io_in_a_bits_source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical carries invalid source ID (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16 & (|_GEN_3)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical address not aligned to size (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16 & io_in_a_bits_param[2]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical carries invalid opcode param (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16 & _GEN_12) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical contains invalid mask (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & io_in_a_bits_source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint carries invalid source ID (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & (|_GEN_3)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint address not aligned to size (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & (|(io_in_a_bits_param[2:1]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint carries invalid opcode param (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & _GEN_12) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint contains invalid mask (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint is corrupt (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & ~reset & (&io_in_d_bits_opcode)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel has invalid opcode (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & io_in_d_bits_source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & ~(io_in_d_bits_size[1])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & io_in_d_bits_source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid source ID (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid sink ID (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & ~(io_in_d_bits_size[1])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant smaller than a beat (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & io_in_d_bits_source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid source ID (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid sink ID (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & ~(io_in_d_bits_size[1])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData smaller than a beat (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & io_in_d_bits_opcode == 3'h0 & ~reset
          & io_in_d_bits_source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & io_in_d_bits_opcode == 3'h1 & ~reset
          & io_in_d_bits_source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & io_in_d_bits_opcode == 3'h2 & ~reset
          & io_in_d_bits_source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck carries invalid source ID (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_21 & io_in_a_bits_opcode != opcode) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel opcode changed within multibeat operation (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_21 & io_in_a_bits_param != param) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel param changed within multibeat operation (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_21 & io_in_a_bits_size != size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel size changed within multibeat operation (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_21 & io_in_a_bits_source != source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel source changed within multibeat operation (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_21 & io_in_a_bits_address != address) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel address changed with multibeat operation (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & io_in_d_bits_opcode != opcode_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel opcode changed within multibeat operation (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & (|param_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel param changed within multibeat operation (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & io_in_d_bits_size != size_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel size changed within multibeat operation (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & io_in_d_bits_source != source_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel source changed within multibeat operation (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & sink) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel sink changed with multibeat operation (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel denied changed with multibeat operation (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN & ~reset & _GEN_33[0]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel re-used a source ID (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_27 & ~reset & ~(_GEN_34[0] | same_cycle_resp)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_29
          & ~(io_in_d_bits_opcode == _GEN_1[io_in_a_bits_opcode]
              | io_in_d_bits_opcode == _GEN_0[io_in_a_bits_opcode])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_29 & io_in_a_bits_size != io_in_d_bits_size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30
          & ~(io_in_d_bits_opcode == _GEN_1[_GEN_24[3:1]]
              | io_in_d_bits_opcode == _GEN_0[_GEN_24[3:1]])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & _GEN_31 != {1'h0, _GEN_35[3:1]}) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25 & ~a_first_counter_1 & io_in_a_valid & _GEN_28 & ~d_release_ack & ~reset
          & ~(~io_in_d_ready | io_in_a_ready)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ready check\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight == 2'h0 | _plusarg_reader_out == 32'h0
              | watchdog < _plusarg_reader_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & ~(_GEN_36[0])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & _GEN_31 != {1'h0, _GEN_37[3:1]}) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight_1 == 2'h0 | _plusarg_reader_1_out == 32'h0
              | watchdog_1 < _plusarg_reader_1_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/devices/debug/Debug.scala:1862:19)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    automatic logic d_first_done;
    automatic logic _GEN_38;
    d_first_done = io_in_d_ready & io_in_d_valid;
    _GEN_38 = d_first_done & ~d_first_counter;
    if (reset) begin
      a_first_counter <= 1'h0;
      d_first_counter <= 1'h0;
      inflight <= 2'h0;
      inflight_opcodes <= 4'h0;
      inflight_sizes <= 4'h0;
      a_first_counter_1 <= 1'h0;
      d_first_counter_1 <= 1'h0;
      watchdog <= 32'h0;
      inflight_1 <= 2'h0;
      inflight_sizes_1 <= 4'h0;
      d_first_counter_2 <= 1'h0;
      watchdog_1 <= 32'h0;
    end
    else begin
      automatic logic        _GEN_39;
      automatic logic [30:0] _GEN_40 = 31'hF << {28'h0, io_in_d_bits_source, 2'h0};
      automatic logic [3:0]  d_sizes_clr;
      automatic logic        _GEN_41;
      automatic logic [18:0] _GEN_42 =
        {15'h0, _GEN ? {io_in_a_bits_opcode, 1'h1} : 4'h0}
        << {16'h0, io_in_a_bits_source, 2'h0};
      automatic logic [17:0] _GEN_43 =
        {15'h0, _GEN ? {io_in_a_bits_size, 1'h1} : 3'h0}
        << {15'h0, io_in_a_bits_source, 2'h0};
      _GEN_39 = d_first_done & ~d_first_counter_1 & ~d_release_ack;
      d_sizes_clr = _GEN_39 ? _GEN_40[3:0] : 4'h0;
      _GEN_41 = d_first_done & ~d_first_counter_2 & d_release_ack;
      a_first_counter <= (~a_first_done | a_first_counter - 1'h1) & a_first_counter;
      d_first_counter <= (~d_first_done | d_first_counter - 1'h1) & d_first_counter;
      inflight <=
        {1'h0,
         (inflight[0] | _GEN & ~io_in_a_bits_source) & ~(_GEN_39 & ~io_in_d_bits_source)};
      inflight_opcodes <=
        (inflight_opcodes | (_GEN ? _GEN_42[3:0] : 4'h0)) & ~d_sizes_clr;
      inflight_sizes <= (inflight_sizes | (_GEN ? _GEN_43[3:0] : 4'h0)) & ~d_sizes_clr;
      a_first_counter_1 <= (~a_first_done | a_first_counter_1 - 1'h1) & a_first_counter_1;
      d_first_counter_1 <= (~d_first_done | d_first_counter_1 - 1'h1) & d_first_counter_1;
      if (a_first_done | d_first_done)
        watchdog <= 32'h0;
      else
        watchdog <= watchdog + 32'h1;
      inflight_1 <= {1'h0, inflight_1[0] & ~(_GEN_41 & ~io_in_d_bits_source)};
      inflight_sizes_1 <= inflight_sizes_1 & ~(_GEN_41 ? _GEN_40[3:0] : 4'h0);
      d_first_counter_2 <= (~d_first_done | d_first_counter_2 - 1'h1) & d_first_counter_2;
      if (d_first_done)
        watchdog_1 <= 32'h0;
      else
        watchdog_1 <= watchdog_1 + 32'h1;
    end
    if (a_first_done & ~a_first_counter) begin
      opcode <= io_in_a_bits_opcode;
      param <= io_in_a_bits_param;
      size <= io_in_a_bits_size;
      source <= io_in_a_bits_source;
      address <= io_in_a_bits_address;
    end
    if (_GEN_38) begin
      opcode_1 <= io_in_d_bits_opcode;
      param_1 <= 2'h0;
      size_1 <= io_in_d_bits_size;
      source_1 <= io_in_d_bits_source;
    end
    sink <= ~_GEN_38 & sink;
    denied <= ~_GEN_38 & denied;
  end // always @(posedge)
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader (
    .out (_plusarg_reader_out)
  );
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader_1 (
    .out (_plusarg_reader_1_out)
  );
endmodule

module TLMonitor_33(
  input        clock,
               reset,
               io_in_a_ready,
               io_in_a_valid,
  input [2:0]  io_in_a_bits_opcode,
               io_in_a_bits_param,
  input [1:0]  io_in_a_bits_size,
  input [8:0]  io_in_a_bits_source,
  input [11:0] io_in_a_bits_address,
  input [7:0]  io_in_a_bits_mask,
  input        io_in_a_bits_corrupt,
               io_in_d_ready,
               io_in_d_valid,
  input [2:0]  io_in_d_bits_opcode,
  input [1:0]  io_in_d_bits_size,
  input [8:0]  io_in_d_bits_source
);

  wire [31:0]   _plusarg_reader_1_out;
  wire [31:0]   _plusarg_reader_out;
  wire          a_first_done = io_in_a_ready & io_in_a_valid;
  reg           a_first_counter;
  reg  [2:0]    opcode;
  reg  [2:0]    param;
  reg  [1:0]    size;
  reg  [8:0]    source;
  reg  [11:0]   address;
  reg           d_first_counter;
  reg  [2:0]    opcode_1;
  reg  [1:0]    param_1;
  reg  [1:0]    size_1;
  reg  [8:0]    source_1;
  reg           sink;
  reg           denied;
  reg  [303:0]  inflight;
  reg  [1215:0] inflight_opcodes;
  reg  [1215:0] inflight_sizes;
  reg           a_first_counter_1;
  reg           d_first_counter_1;
  wire          _GEN = a_first_done & ~a_first_counter_1;
  wire          d_release_ack = io_in_d_bits_opcode == 3'h6;
  reg  [31:0]   watchdog;
  reg  [303:0]  inflight_1;
  reg  [1215:0] inflight_sizes_1;
  reg           d_first_counter_2;
  reg  [31:0]   watchdog_1;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      automatic logic [7:0][2:0] _GEN_0 =
        '{3'h4, 3'h5, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic [7:0][2:0] _GEN_1 =
        '{3'h4, 3'h4, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic [5:0]      _GEN_2 = 6'h7 << io_in_a_bits_size;
      automatic logic [2:0]      _GEN_3 = io_in_a_bits_address[2:0] & ~(_GEN_2[2:0]);
      automatic logic            mask_size = io_in_a_bits_size == 2'h2;
      automatic logic            mask_acc =
        (&io_in_a_bits_size) | mask_size & ~(io_in_a_bits_address[2]);
      automatic logic            mask_acc_1 =
        (&io_in_a_bits_size) | mask_size & io_in_a_bits_address[2];
      automatic logic            mask_size_1 = io_in_a_bits_size == 2'h1;
      automatic logic            mask_eq_2 =
        ~(io_in_a_bits_address[2]) & ~(io_in_a_bits_address[1]);
      automatic logic            mask_acc_2 = mask_acc | mask_size_1 & mask_eq_2;
      automatic logic            mask_eq_3 =
        ~(io_in_a_bits_address[2]) & io_in_a_bits_address[1];
      automatic logic            mask_acc_3 = mask_acc | mask_size_1 & mask_eq_3;
      automatic logic            mask_eq_4 =
        io_in_a_bits_address[2] & ~(io_in_a_bits_address[1]);
      automatic logic            mask_acc_4 = mask_acc_1 | mask_size_1 & mask_eq_4;
      automatic logic            mask_eq_5 =
        io_in_a_bits_address[2] & io_in_a_bits_address[1];
      automatic logic            mask_acc_5 = mask_acc_1 | mask_size_1 & mask_eq_5;
      automatic logic [7:0]      mask =
        {mask_acc_5 | mask_eq_5 & io_in_a_bits_address[0],
         mask_acc_5 | mask_eq_5 & ~(io_in_a_bits_address[0]),
         mask_acc_4 | mask_eq_4 & io_in_a_bits_address[0],
         mask_acc_4 | mask_eq_4 & ~(io_in_a_bits_address[0]),
         mask_acc_3 | mask_eq_3 & io_in_a_bits_address[0],
         mask_acc_3 | mask_eq_3 & ~(io_in_a_bits_address[0]),
         mask_acc_2 | mask_eq_2 & io_in_a_bits_address[0],
         mask_acc_2 | mask_eq_2 & ~(io_in_a_bits_address[0])};
      automatic logic            _GEN_4 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_5 = io_in_a_bits_source > 9'h12F;
      automatic logic            _GEN_6 = io_in_a_bits_param > 3'h2;
      automatic logic            _GEN_7 = io_in_a_bits_mask != 8'hFF;
      automatic logic            _GEN_8 = io_in_a_valid & (&io_in_a_bits_opcode) & ~reset;
      automatic logic            _GEN_9 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_10 = io_in_a_bits_mask != mask;
      automatic logic            _GEN_11 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_12 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_13 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_14 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h3 & ~reset;
      automatic logic            _GEN_15 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h5 & ~reset;
      automatic logic            _GEN_16 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_17 = io_in_d_bits_source > 9'h12F;
      automatic logic            _GEN_18 = io_in_d_bits_size != 2'h3;
      automatic logic            _GEN_19 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_20 =
        io_in_d_valid & io_in_d_bits_opcode == 3'h5 & ~reset;
      automatic logic            _GEN_21 = io_in_a_valid & a_first_counter & ~reset;
      automatic logic            _GEN_22 = io_in_d_valid & d_first_counter & ~reset;
      automatic logic [1215:0]   _GEN_23 = {1205'h0, io_in_d_bits_source, 2'h0};
      automatic logic [1215:0]   _GEN_24 = inflight_opcodes >> _GEN_23;
      automatic logic            _GEN_25 = io_in_d_valid & ~d_first_counter_1;
      automatic logic            _GEN_26 = _GEN_25 & ~d_release_ack;
      automatic logic            _GEN_27 = io_in_a_bits_source == io_in_d_bits_source;
      automatic logic            same_cycle_resp =
        io_in_a_valid & ~a_first_counter_1 & _GEN_27;
      automatic logic [303:0]    _GEN_28 = {295'h0, io_in_d_bits_source};
      automatic logic            _GEN_29 = _GEN_26 & same_cycle_resp & ~reset;
      automatic logic            _GEN_30 = _GEN_26 & ~same_cycle_resp & ~reset;
      automatic logic [3:0]      _GEN_31 = {2'h0, io_in_d_bits_size};
      automatic logic            _GEN_32 =
        io_in_d_valid & ~d_first_counter_2 & d_release_ack & ~reset;
      automatic logic [303:0]    _GEN_33 = inflight >> io_in_a_bits_source;
      automatic logic [303:0]    _GEN_34 = inflight >> _GEN_28;
      automatic logic [1215:0]   _GEN_35 = inflight_sizes >> _GEN_23;
      automatic logic [303:0]    _GEN_36 = inflight_1 >> _GEN_28;
      automatic logic [1215:0]   _GEN_37 = inflight_sizes_1 >> _GEN_23;
      if (_GEN_4) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_4 & _GEN_5) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock carries invalid source ID (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_4 & ~(&io_in_a_bits_size)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_4 & (|_GEN_3)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_4 & _GEN_6) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock carries invalid grow param (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_4 & _GEN_7) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_4 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock is corrupt (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_8) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_8 & _GEN_5) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm carries invalid source ID (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_8 & ~(&io_in_a_bits_size)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_8 & (|_GEN_3)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_8 & _GEN_6) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm carries invalid grow param (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_8 & ~(|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_8 & _GEN_7) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_8 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm is corrupt (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_9 & _GEN_5) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get carries invalid source ID (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_9 & (|_GEN_3)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get address not aligned to size (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_9 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get carries invalid param (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_9 & _GEN_10) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get contains invalid mask (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_9 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get is corrupt (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_11 & _GEN_5) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull carries invalid source ID (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_11 & (|_GEN_3)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull address not aligned to size (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_11 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull carries invalid param (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_11 & _GEN_10) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull contains invalid mask (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_12 & _GEN_5) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_12 & (|_GEN_3)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial address not aligned to size (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_12 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial carries invalid param (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_12 & (|(io_in_a_bits_mask & ~mask))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial contains invalid mask (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_13) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_13 & _GEN_5) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_13 & (|_GEN_3)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_13 & io_in_a_bits_param > 3'h4) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_13 & _GEN_10) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & _GEN_5) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical carries invalid source ID (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & (|_GEN_3)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical address not aligned to size (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & io_in_a_bits_param[2]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical carries invalid opcode param (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & _GEN_10) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical contains invalid mask (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & _GEN_5) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint carries invalid source ID (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & (|_GEN_3)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint address not aligned to size (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & (|(io_in_a_bits_param[2:1]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint carries invalid opcode param (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & _GEN_10) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint contains invalid mask (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint is corrupt (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & ~reset & (&io_in_d_bits_opcode)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel has invalid opcode (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16 & _GEN_17) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16 & _GEN_18) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & _GEN_17) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid source ID (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid sink ID (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & _GEN_18) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant smaller than a beat (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & _GEN_17) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid source ID (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid sink ID (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_20 & _GEN_18) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData smaller than a beat (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & io_in_d_bits_opcode == 3'h0 & ~reset & _GEN_17) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & io_in_d_bits_opcode == 3'h1 & ~reset & _GEN_17) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & io_in_d_bits_opcode == 3'h2 & ~reset & _GEN_17) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel HintAck carries invalid source ID (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_21 & io_in_a_bits_opcode != opcode) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel opcode changed within multibeat operation (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_21 & io_in_a_bits_param != param) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel param changed within multibeat operation (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_21 & io_in_a_bits_size != size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel size changed within multibeat operation (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_21 & io_in_a_bits_source != source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel source changed within multibeat operation (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_21 & io_in_a_bits_address != address) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel address changed with multibeat operation (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & io_in_d_bits_opcode != opcode_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel opcode changed within multibeat operation (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & (|param_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel param changed within multibeat operation (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & io_in_d_bits_size != size_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel size changed within multibeat operation (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & io_in_d_bits_source != source_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel source changed within multibeat operation (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & sink) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel sink changed with multibeat operation (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_22 & denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel denied changed with multibeat operation (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN & ~reset & _GEN_33[0]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel re-used a source ID (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_26 & ~reset & ~(_GEN_34[0] | same_cycle_resp)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_29
          & ~(io_in_d_bits_opcode == _GEN_1[io_in_a_bits_opcode]
              | io_in_d_bits_opcode == _GEN_0[io_in_a_bits_opcode])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_29 & io_in_a_bits_size != io_in_d_bits_size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30
          & ~(io_in_d_bits_opcode == _GEN_1[_GEN_24[3:1]]
              | io_in_d_bits_opcode == _GEN_0[_GEN_24[3:1]])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_30 & _GEN_31 != {1'h0, _GEN_35[3:1]}) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_25 & ~a_first_counter_1 & io_in_a_valid & _GEN_27 & ~d_release_ack & ~reset
          & ~(~io_in_d_ready | io_in_a_ready)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ready check\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight == 304'h0 | _plusarg_reader_out == 32'h0
              | watchdog < _plusarg_reader_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & ~(_GEN_36[0])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_32 & _GEN_31 != {1'h0, _GEN_37[3:1]}) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight_1 == 304'h0 | _plusarg_reader_1_out == 32'h0
              | watchdog_1 < _plusarg_reader_1_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/devices/debug/Periphery.scala:90:15)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    automatic logic d_first_done;
    automatic logic _GEN_38;
    d_first_done = io_in_d_ready & io_in_d_valid;
    _GEN_38 = d_first_done & ~d_first_counter;
    if (reset) begin
      a_first_counter <= 1'h0;
      d_first_counter <= 1'h0;
      inflight <= 304'h0;
      inflight_opcodes <= 1216'h0;
      inflight_sizes <= 1216'h0;
      a_first_counter_1 <= 1'h0;
      d_first_counter_1 <= 1'h0;
      watchdog <= 32'h0;
      inflight_1 <= 304'h0;
      inflight_sizes_1 <= 1216'h0;
      d_first_counter_2 <= 1'h0;
      watchdog_1 <= 32'h0;
    end
    else begin
      automatic logic          _GEN_39;
      automatic logic [511:0]  _GEN_40 = 512'h1 << io_in_d_bits_source;
      automatic logic [4110:0] _GEN_41 = 4111'hF << {4100'h0, io_in_d_bits_source, 2'h0};
      automatic logic [1215:0] d_sizes_clr;
      automatic logic          _GEN_42;
      automatic logic [511:0]  _GEN_43 = 512'h1 << io_in_a_bits_source;
      automatic logic [4098:0] _GEN_44 =
        {4095'h0, _GEN ? {io_in_a_bits_opcode, 1'h1} : 4'h0}
        << {4088'h0, io_in_a_bits_source, 2'h0};
      automatic logic [4097:0] _GEN_45 =
        {4095'h0, _GEN ? {io_in_a_bits_size, 1'h1} : 3'h0}
        << {4087'h0, io_in_a_bits_source, 2'h0};
      _GEN_39 = d_first_done & ~d_first_counter_1 & ~d_release_ack;
      d_sizes_clr = _GEN_39 ? _GEN_41[1215:0] : 1216'h0;
      _GEN_42 = d_first_done & ~d_first_counter_2 & d_release_ack;
      a_first_counter <= (~a_first_done | a_first_counter - 1'h1) & a_first_counter;
      d_first_counter <= (~d_first_done | d_first_counter - 1'h1) & d_first_counter;
      inflight <=
        (inflight | (_GEN ? _GEN_43[303:0] : 304'h0))
        & ~(_GEN_39 ? _GEN_40[303:0] : 304'h0);
      inflight_opcodes <=
        (inflight_opcodes | (_GEN ? _GEN_44[1215:0] : 1216'h0)) & ~d_sizes_clr;
      inflight_sizes <=
        (inflight_sizes | (_GEN ? _GEN_45[1215:0] : 1216'h0)) & ~d_sizes_clr;
      a_first_counter_1 <= (~a_first_done | a_first_counter_1 - 1'h1) & a_first_counter_1;
      d_first_counter_1 <= (~d_first_done | d_first_counter_1 - 1'h1) & d_first_counter_1;
      if (a_first_done | d_first_done)
        watchdog <= 32'h0;
      else
        watchdog <= watchdog + 32'h1;
      inflight_1 <= inflight_1 & ~(_GEN_42 ? _GEN_40[303:0] : 304'h0);
      inflight_sizes_1 <= inflight_sizes_1 & ~(_GEN_42 ? _GEN_41[1215:0] : 1216'h0);
      d_first_counter_2 <= (~d_first_done | d_first_counter_2 - 1'h1) & d_first_counter_2;
      if (d_first_done)
        watchdog_1 <= 32'h0;
      else
        watchdog_1 <= watchdog_1 + 32'h1;
    end
    if (a_first_done & ~a_first_counter) begin
      opcode <= io_in_a_bits_opcode;
      param <= io_in_a_bits_param;
      size <= io_in_a_bits_size;
      source <= io_in_a_bits_source;
      address <= io_in_a_bits_address;
    end
    if (_GEN_38) begin
      opcode_1 <= io_in_d_bits_opcode;
      param_1 <= 2'h0;
      size_1 <= io_in_d_bits_size;
      source_1 <= io_in_d_bits_source;
    end
    sink <= ~_GEN_38 & sink;
    denied <= ~_GEN_38 & denied;
  end // always @(posedge)
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader (
    .out (_plusarg_reader_out)
  );
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader_1 (
    .out (_plusarg_reader_1_out)
  );
endmodule

module TLDebugModuleInner(
  input         clock,
                reset,
                auto_tl_in_a_valid,
  input  [2:0]  auto_tl_in_a_bits_opcode,
                auto_tl_in_a_bits_param,
  input  [1:0]  auto_tl_in_a_bits_size,
  input  [8:0]  auto_tl_in_a_bits_source,
  input  [11:0] auto_tl_in_a_bits_address,
  input  [7:0]  auto_tl_in_a_bits_mask,
  input  [63:0] auto_tl_in_a_bits_data,
  input         auto_tl_in_a_bits_corrupt,
                auto_tl_in_d_ready,
                auto_dmi_in_a_valid,
  input  [2:0]  auto_dmi_in_a_bits_opcode,
                auto_dmi_in_a_bits_param,
  input  [1:0]  auto_dmi_in_a_bits_size,
  input         auto_dmi_in_a_bits_source,
  input  [8:0]  auto_dmi_in_a_bits_address,
  input  [3:0]  auto_dmi_in_a_bits_mask,
  input  [31:0] auto_dmi_in_a_bits_data,
  input         auto_dmi_in_a_bits_corrupt,
                auto_dmi_in_d_ready,
                io_dmactive,
                io_innerCtrl_valid,
                io_innerCtrl_bits_resumereq,
  input  [9:0]  io_innerCtrl_bits_hartsel,
  input         io_innerCtrl_bits_ackhavereset,
                io_innerCtrl_bits_hrmask_0,
                io_hartIsInReset_0,
  output        auto_tl_in_a_ready,
                auto_tl_in_d_valid,
  output [2:0]  auto_tl_in_d_bits_opcode,
  output [1:0]  auto_tl_in_d_bits_size,
  output [8:0]  auto_tl_in_d_bits_source,
  output [63:0] auto_tl_in_d_bits_data,
  output        auto_dmi_in_a_ready,
                auto_dmi_in_d_valid,
  output [2:0]  auto_dmi_in_d_bits_opcode,
  output [1:0]  auto_dmi_in_d_bits_size,
  output        auto_dmi_in_d_bits_source,
  output [31:0] auto_dmi_in_d_bits_data,
  output        io_hgDebugInt_0
);

  reg  [1:0]         ctrlStateReg;
  wire               out_woready_1_345;
  wire               out_woready_1_528;
  wire               out_woready_31;
  wire               out_woready_7;
  wire               out_woready_54;
  wire               out_woready_93;
  wire               out_woready_23;
  wire               out_woready_35;
  wire               out_woready_11;
  wire               out_woready_97;
  wire               out_woready_15;
  wire               out_woready_46;
  wire               out_woready_42;
  wire               out_woready_102;
  wire               out_woready_19;
  wire               out_woready_82;
  wire               out_woready_50;
  wire               out_woready_78;
  wire               out_woready_38;
  wire               out_woready_3;
  wire               out_woready_27;
  wire               _GEN;
  wire               out_roready_31;
  wire               out_roready_7;
  wire               out_roready_54;
  wire               out_roready_93;
  wire               out_roready_23;
  wire               out_roready_35;
  wire               out_roready_11;
  wire               out_roready_97;
  wire               out_roready_15;
  wire               out_roready_46;
  wire               out_roready_42;
  wire               out_roready_102;
  wire               out_roready_19;
  wire               out_roready_82;
  wire               out_roready_50;
  wire               out_roready_78;
  wire               out_roready_3;
  wire               out_roready_27;
  wire               out_backSel_7;
  wire               out_backSel_6;
  wire               _hartIsInResetSync_0_debug_hartReset_0_io_q;
  reg                hartHalted;
  reg                resumeReqRegs;
  reg                haveResetBitRegs;
  wire               hamaskWrSel_0 = io_innerCtrl_bits_hartsel == 10'h0;
  reg                hrmaskReg_0;
  reg                hrDebugIntReg_0;
  wire               resumereq = io_innerCtrl_valid & io_innerCtrl_bits_resumereq;
  reg  [4:0]         ABSTRACTCSReg_progbufsize;
  reg  [2:0]         ABSTRACTCSReg_cmderr;
  reg  [3:0]         ABSTRACTCSReg_datacount;
  reg  [15:0]        ABSTRACTAUTOReg_autoexecprogbuf;
  reg  [11:0]        ABSTRACTAUTOReg_autoexecdata;
  reg  [7:0]         COMMANDReg_cmdtype;
  reg  [23:0]        COMMANDReg_control;
  reg  [7:0]         abstractDataMem_0;
  reg  [7:0]         abstractDataMem_1;
  reg  [7:0]         abstractDataMem_2;
  reg  [7:0]         abstractDataMem_3;
  reg  [7:0]         abstractDataMem_4;
  reg  [7:0]         abstractDataMem_5;
  reg  [7:0]         abstractDataMem_6;
  reg  [7:0]         abstractDataMem_7;
  reg  [7:0]         programBufferMem_0;
  reg  [7:0]         programBufferMem_1;
  reg  [7:0]         programBufferMem_2;
  reg  [7:0]         programBufferMem_3;
  reg  [7:0]         programBufferMem_4;
  reg  [7:0]         programBufferMem_5;
  reg  [7:0]         programBufferMem_6;
  reg  [7:0]         programBufferMem_7;
  reg  [7:0]         programBufferMem_8;
  reg  [7:0]         programBufferMem_9;
  reg  [7:0]         programBufferMem_10;
  reg  [7:0]         programBufferMem_11;
  reg  [7:0]         programBufferMem_12;
  reg  [7:0]         programBufferMem_13;
  reg  [7:0]         programBufferMem_14;
  reg  [7:0]         programBufferMem_15;
  reg  [7:0]         programBufferMem_16;
  reg  [7:0]         programBufferMem_17;
  reg  [7:0]         programBufferMem_18;
  reg  [7:0]         programBufferMem_19;
  reg  [7:0]         programBufferMem_20;
  reg  [7:0]         programBufferMem_21;
  reg  [7:0]         programBufferMem_22;
  reg  [7:0]         programBufferMem_23;
  reg  [7:0]         programBufferMem_24;
  reg  [7:0]         programBufferMem_25;
  reg  [7:0]         programBufferMem_26;
  reg  [7:0]         programBufferMem_27;
  reg  [7:0]         programBufferMem_28;
  reg  [7:0]         programBufferMem_29;
  reg  [7:0]         programBufferMem_30;
  reg  [7:0]         programBufferMem_31;
  reg  [7:0]         programBufferMem_32;
  reg  [7:0]         programBufferMem_33;
  reg  [7:0]         programBufferMem_34;
  reg  [7:0]         programBufferMem_35;
  reg  [7:0]         programBufferMem_36;
  reg  [7:0]         programBufferMem_37;
  reg  [7:0]         programBufferMem_38;
  reg  [7:0]         programBufferMem_39;
  reg  [7:0]         programBufferMem_40;
  reg  [7:0]         programBufferMem_41;
  reg  [7:0]         programBufferMem_42;
  reg  [7:0]         programBufferMem_43;
  reg  [7:0]         programBufferMem_44;
  reg  [7:0]         programBufferMem_45;
  reg  [7:0]         programBufferMem_46;
  reg  [7:0]         programBufferMem_47;
  reg  [7:0]         programBufferMem_48;
  reg  [7:0]         programBufferMem_49;
  reg  [7:0]         programBufferMem_50;
  reg  [7:0]         programBufferMem_51;
  reg  [7:0]         programBufferMem_52;
  reg  [7:0]         programBufferMem_53;
  reg  [7:0]         programBufferMem_54;
  reg  [7:0]         programBufferMem_55;
  reg  [7:0]         programBufferMem_56;
  reg  [7:0]         programBufferMem_57;
  reg  [7:0]         programBufferMem_58;
  reg  [7:0]         programBufferMem_59;
  reg  [7:0]         programBufferMem_60;
  reg  [7:0]         programBufferMem_61;
  reg  [7:0]         programBufferMem_62;
  reg  [7:0]         programBufferMem_63;
  wire               out_front_bits_read = auto_dmi_in_a_bits_opcode == 3'h4;
  wire [1:0]         _GEN_0 =
    {auto_dmi_in_a_bits_address[8], auto_dmi_in_a_bits_address[6]};
  wire               _GEN_1 = _GEN_0 == 2'h0;
  wire               _GEN_2 = _GEN_0 == 2'h1;
  wire [7:0]         _GEN_3 = {8{auto_dmi_in_a_bits_mask[2]}};
  wire [7:0]         _GEN_4 = {8{auto_dmi_in_a_bits_mask[3]}};
  wire               dmiAbstractDataWrEnMaybe_4 =
    out_woready_3 & auto_dmi_in_a_bits_mask[0];
  wire               dmiAbstractDataWrEnMaybe_5 =
    out_woready_3 & auto_dmi_in_a_bits_mask[1];
  wire               dmiAbstractDataWrEnMaybe_6 =
    out_woready_3 & auto_dmi_in_a_bits_mask[2];
  wire               dmiAbstractDataWrEnMaybe_7 =
    out_woready_3 & auto_dmi_in_a_bits_mask[3];
  wire               dmiProgramBufferWrEnMaybe_56 =
    out_woready_7 & auto_dmi_in_a_bits_mask[0];
  wire               dmiProgramBufferWrEnMaybe_57 =
    out_woready_7 & auto_dmi_in_a_bits_mask[1];
  wire               dmiProgramBufferWrEnMaybe_58 =
    out_woready_7 & auto_dmi_in_a_bits_mask[2];
  wire               dmiProgramBufferWrEnMaybe_59 =
    out_woready_7 & auto_dmi_in_a_bits_mask[3];
  wire               dmiProgramBufferWrEnMaybe_36 =
    out_woready_11 & auto_dmi_in_a_bits_mask[0];
  wire               dmiProgramBufferWrEnMaybe_37 =
    out_woready_11 & auto_dmi_in_a_bits_mask[1];
  wire               dmiProgramBufferWrEnMaybe_38 =
    out_woready_11 & auto_dmi_in_a_bits_mask[2];
  wire               dmiProgramBufferWrEnMaybe_39 =
    out_woready_11 & auto_dmi_in_a_bits_mask[3];
  wire               dmiProgramBufferWrEnMaybe_28 =
    out_woready_15 & auto_dmi_in_a_bits_mask[0];
  wire               dmiProgramBufferWrEnMaybe_29 =
    out_woready_15 & auto_dmi_in_a_bits_mask[1];
  wire               dmiProgramBufferWrEnMaybe_30 =
    out_woready_15 & auto_dmi_in_a_bits_mask[2];
  wire               dmiProgramBufferWrEnMaybe_31 =
    out_woready_15 & auto_dmi_in_a_bits_mask[3];
  wire               dmiProgramBufferWrEnMaybe_12 =
    out_woready_19 & auto_dmi_in_a_bits_mask[0];
  wire               dmiProgramBufferWrEnMaybe_13 =
    out_woready_19 & auto_dmi_in_a_bits_mask[1];
  wire               dmiProgramBufferWrEnMaybe_14 =
    out_woready_19 & auto_dmi_in_a_bits_mask[2];
  wire               dmiProgramBufferWrEnMaybe_15 =
    out_woready_19 & auto_dmi_in_a_bits_mask[3];
  wire               dmiProgramBufferWrEnMaybe_44 =
    out_woready_23 & auto_dmi_in_a_bits_mask[0];
  wire               dmiProgramBufferWrEnMaybe_45 =
    out_woready_23 & auto_dmi_in_a_bits_mask[1];
  wire               dmiProgramBufferWrEnMaybe_46 =
    out_woready_23 & auto_dmi_in_a_bits_mask[2];
  wire               dmiProgramBufferWrEnMaybe_47 =
    out_woready_23 & auto_dmi_in_a_bits_mask[3];
  wire               dmiAbstractDataWrEnMaybe_0 =
    out_woready_27 & auto_dmi_in_a_bits_mask[0];
  wire               dmiAbstractDataWrEnMaybe_1 =
    out_woready_27 & auto_dmi_in_a_bits_mask[1];
  wire               dmiAbstractDataWrEnMaybe_2 =
    out_woready_27 & auto_dmi_in_a_bits_mask[2];
  wire               dmiAbstractDataWrEnMaybe_3 =
    out_woready_27 & auto_dmi_in_a_bits_mask[3];
  wire               dmiProgramBufferWrEnMaybe_60 =
    out_woready_31 & auto_dmi_in_a_bits_mask[0];
  wire               dmiProgramBufferWrEnMaybe_61 =
    out_woready_31 & auto_dmi_in_a_bits_mask[1];
  wire               dmiProgramBufferWrEnMaybe_62 =
    out_woready_31 & auto_dmi_in_a_bits_mask[2];
  wire               dmiProgramBufferWrEnMaybe_63 =
    out_woready_31 & auto_dmi_in_a_bits_mask[3];
  wire               dmiProgramBufferWrEnMaybe_40 =
    out_woready_35 & auto_dmi_in_a_bits_mask[0];
  wire               dmiProgramBufferWrEnMaybe_41 =
    out_woready_35 & auto_dmi_in_a_bits_mask[1];
  wire               dmiProgramBufferWrEnMaybe_42 =
    out_woready_35 & auto_dmi_in_a_bits_mask[2];
  wire               dmiProgramBufferWrEnMaybe_43 =
    out_woready_35 & auto_dmi_in_a_bits_mask[3];
  wire               autoexecdataWrEnMaybe = out_woready_38 & auto_dmi_in_a_bits_mask[0];
  wire               autoexecprogbufWrEnMaybe = out_woready_38 & (&{_GEN_4, _GEN_3});
  wire               dmiProgramBufferWrEnMaybe_20 =
    out_woready_42 & auto_dmi_in_a_bits_mask[0];
  wire               dmiProgramBufferWrEnMaybe_21 =
    out_woready_42 & auto_dmi_in_a_bits_mask[1];
  wire               dmiProgramBufferWrEnMaybe_22 =
    out_woready_42 & auto_dmi_in_a_bits_mask[2];
  wire               dmiProgramBufferWrEnMaybe_23 =
    out_woready_42 & auto_dmi_in_a_bits_mask[3];
  wire               dmiProgramBufferWrEnMaybe_24 =
    out_woready_46 & auto_dmi_in_a_bits_mask[0];
  wire               dmiProgramBufferWrEnMaybe_25 =
    out_woready_46 & auto_dmi_in_a_bits_mask[1];
  wire               dmiProgramBufferWrEnMaybe_26 =
    out_woready_46 & auto_dmi_in_a_bits_mask[2];
  wire               dmiProgramBufferWrEnMaybe_27 =
    out_woready_46 & auto_dmi_in_a_bits_mask[3];
  wire               dmiProgramBufferWrEnMaybe_4 =
    out_woready_50 & auto_dmi_in_a_bits_mask[0];
  wire               dmiProgramBufferWrEnMaybe_5 =
    out_woready_50 & auto_dmi_in_a_bits_mask[1];
  wire               dmiProgramBufferWrEnMaybe_6 =
    out_woready_50 & auto_dmi_in_a_bits_mask[2];
  wire               dmiProgramBufferWrEnMaybe_7 =
    out_woready_50 & auto_dmi_in_a_bits_mask[3];
  wire               dmiProgramBufferWrEnMaybe_52 =
    out_woready_54 & auto_dmi_in_a_bits_mask[0];
  wire               dmiProgramBufferWrEnMaybe_53 =
    out_woready_54 & auto_dmi_in_a_bits_mask[1];
  wire               dmiProgramBufferWrEnMaybe_54 =
    out_woready_54 & auto_dmi_in_a_bits_mask[2];
  wire               dmiProgramBufferWrEnMaybe_55 =
    out_woready_54 & auto_dmi_in_a_bits_mask[3];
  wire               dmiProgramBufferWrEnMaybe_0 =
    out_woready_78 & auto_dmi_in_a_bits_mask[0];
  wire               dmiProgramBufferWrEnMaybe_1 =
    out_woready_78 & auto_dmi_in_a_bits_mask[1];
  wire               dmiProgramBufferWrEnMaybe_2 =
    out_woready_78 & auto_dmi_in_a_bits_mask[2];
  wire               dmiProgramBufferWrEnMaybe_3 =
    out_woready_78 & auto_dmi_in_a_bits_mask[3];
  wire               dmiProgramBufferWrEnMaybe_8 =
    out_woready_82 & auto_dmi_in_a_bits_mask[0];
  wire               dmiProgramBufferWrEnMaybe_9 =
    out_woready_82 & auto_dmi_in_a_bits_mask[1];
  wire               dmiProgramBufferWrEnMaybe_10 =
    out_woready_82 & auto_dmi_in_a_bits_mask[2];
  wire               dmiProgramBufferWrEnMaybe_11 =
    out_woready_82 & auto_dmi_in_a_bits_mask[3];
  wire               ABSTRACTCSWrEnMaybe =
    _GEN & out_backSel_6 & _GEN_2 & auto_dmi_in_a_bits_mask[1];
  wire               dmiProgramBufferWrEnMaybe_48 =
    out_woready_93 & auto_dmi_in_a_bits_mask[0];
  wire               dmiProgramBufferWrEnMaybe_49 =
    out_woready_93 & auto_dmi_in_a_bits_mask[1];
  wire               dmiProgramBufferWrEnMaybe_50 =
    out_woready_93 & auto_dmi_in_a_bits_mask[2];
  wire               dmiProgramBufferWrEnMaybe_51 =
    out_woready_93 & auto_dmi_in_a_bits_mask[3];
  wire               dmiProgramBufferWrEnMaybe_32 =
    out_woready_97 & auto_dmi_in_a_bits_mask[0];
  wire               dmiProgramBufferWrEnMaybe_33 =
    out_woready_97 & auto_dmi_in_a_bits_mask[1];
  wire               dmiProgramBufferWrEnMaybe_34 =
    out_woready_97 & auto_dmi_in_a_bits_mask[2];
  wire               dmiProgramBufferWrEnMaybe_35 =
    out_woready_97 & auto_dmi_in_a_bits_mask[3];
  wire               COMMANDWrEnMaybe =
    _GEN & out_backSel_7 & _GEN_2
    & (&{_GEN_4,
         _GEN_3,
         {8{auto_dmi_in_a_bits_mask[1]}},
         {8{auto_dmi_in_a_bits_mask[0]}}});
  wire [31:0]        COMMANDWrDataVal =
    COMMANDWrEnMaybe ? auto_dmi_in_a_bits_data : 32'h0;
  wire               dmiProgramBufferWrEnMaybe_16 =
    out_woready_102 & auto_dmi_in_a_bits_mask[0];
  wire               dmiProgramBufferWrEnMaybe_17 =
    out_woready_102 & auto_dmi_in_a_bits_mask[1];
  wire               dmiProgramBufferWrEnMaybe_18 =
    out_woready_102 & auto_dmi_in_a_bits_mask[2];
  wire               dmiProgramBufferWrEnMaybe_19 =
    out_woready_102 & auto_dmi_in_a_bits_mask[3];
  wire [4:0]         out_oindex =
    {auto_dmi_in_a_bits_address[7], auto_dmi_in_a_bits_address[5:2]};
  wire [4:0]         _GEN_5 =
    {auto_dmi_in_a_bits_address[7], auto_dmi_in_a_bits_address[5:2]};
  wire               out_backSel_4 = _GEN_5 == 5'h4;
  wire               out_backSel_5 = _GEN_5 == 5'h5;
  assign out_backSel_6 = _GEN_5 == 5'h6;
  assign out_backSel_7 = _GEN_5 == 5'h7;
  wire               out_backSel_16 = _GEN_5 == 5'h10;
  wire               out_backSel_17 = _GEN_5 == 5'h11;
  wire               out_backSel_18 = _GEN_5 == 5'h12;
  wire               out_backSel_19 = _GEN_5 == 5'h13;
  wire               out_backSel_20 = _GEN_5 == 5'h14;
  wire               out_backSel_21 = _GEN_5 == 5'h15;
  wire               out_backSel_22 = _GEN_5 == 5'h16;
  wire               out_backSel_23 = _GEN_5 == 5'h17;
  wire               out_backSel_24 = _GEN_5 == 5'h18;
  wire               out_backSel_25 = _GEN_5 == 5'h19;
  wire               out_backSel_26 = _GEN_5 == 5'h1A;
  wire               out_backSel_27 = _GEN_5 == 5'h1B;
  wire               out_backSel_28 = _GEN_5 == 5'h1C;
  wire               out_backSel_29 = _GEN_5 == 5'h1D;
  wire               out_backSel_30 = _GEN_5 == 5'h1E;
  wire               _GEN_6 = auto_dmi_in_a_valid & auto_dmi_in_d_ready;
  wire               _GEN_7 = _GEN_6 & out_front_bits_read;
  assign out_roready_27 = _GEN_7 & out_backSel_4 & _GEN_1;
  assign out_roready_3 = _GEN_7 & out_backSel_5 & _GEN_1;
  assign out_roready_78 = _GEN_7 & out_backSel_16 & _GEN_1;
  assign out_roready_50 = _GEN_7 & out_backSel_17 & _GEN_1;
  assign out_roready_82 = _GEN_7 & out_backSel_18 & _GEN_1;
  assign out_roready_19 = _GEN_7 & out_backSel_19 & _GEN_1;
  assign out_roready_102 = _GEN_7 & out_backSel_20 & _GEN_1;
  assign out_roready_42 = _GEN_7 & out_backSel_21 & _GEN_1;
  assign out_roready_46 = _GEN_7 & out_backSel_22 & _GEN_1;
  assign out_roready_15 = _GEN_7 & out_backSel_23 & _GEN_1;
  assign out_roready_97 = _GEN_7 & out_backSel_24 & _GEN_1;
  assign out_roready_11 = _GEN_7 & out_backSel_25 & _GEN_1;
  assign out_roready_35 = _GEN_7 & out_backSel_26 & _GEN_1;
  assign out_roready_23 = _GEN_7 & out_backSel_27 & _GEN_1;
  assign out_roready_93 = _GEN_7 & out_backSel_28 & _GEN_1;
  assign out_roready_54 = _GEN_7 & out_backSel_29 & _GEN_1;
  assign out_roready_7 = _GEN_7 & out_backSel_30 & _GEN_1;
  assign out_roready_31 = _GEN_7 & (&_GEN_5) & _GEN_1;
  assign _GEN = _GEN_6 & ~out_front_bits_read;
  assign out_woready_27 = _GEN & out_backSel_4 & _GEN_1;
  assign out_woready_3 = _GEN & out_backSel_5 & _GEN_1;
  assign out_woready_38 = _GEN & _GEN_5 == 5'h8 & _GEN_2;
  assign out_woready_78 = _GEN & out_backSel_16 & _GEN_1;
  assign out_woready_50 = _GEN & out_backSel_17 & _GEN_1;
  assign out_woready_82 = _GEN & out_backSel_18 & _GEN_1;
  assign out_woready_19 = _GEN & out_backSel_19 & _GEN_1;
  assign out_woready_102 = _GEN & out_backSel_20 & _GEN_1;
  assign out_woready_42 = _GEN & out_backSel_21 & _GEN_1;
  assign out_woready_46 = _GEN & out_backSel_22 & _GEN_1;
  assign out_woready_15 = _GEN & out_backSel_23 & _GEN_1;
  assign out_woready_97 = _GEN & out_backSel_24 & _GEN_1;
  assign out_woready_11 = _GEN & out_backSel_25 & _GEN_1;
  assign out_woready_35 = _GEN & out_backSel_26 & _GEN_1;
  assign out_woready_23 = _GEN & out_backSel_27 & _GEN_1;
  assign out_woready_93 = _GEN & out_backSel_28 & _GEN_1;
  assign out_woready_54 = _GEN & out_backSel_29 & _GEN_1;
  assign out_woready_7 = _GEN & out_backSel_30 & _GEN_1;
  assign out_woready_31 = _GEN & (&_GEN_5) & _GEN_1;
  wire [31:0]        _GEN_8 =
    {{_GEN_1},
     {_GEN_1},
     {_GEN_1},
     {_GEN_1},
     {_GEN_1},
     {_GEN_1},
     {_GEN_1},
     {_GEN_1},
     {_GEN_1},
     {_GEN_1},
     {_GEN_1},
     {_GEN_1},
     {_GEN_1},
     {_GEN_1},
     {_GEN_1},
     {_GEN_1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {_GEN_2},
     {_GEN_2},
     {_GEN_2},
     {_GEN_1},
     {_GEN_1},
     {_GEN_2},
     {1'h1},
     {_GEN_2},
     {_GEN_0 == 2'h2}};
  wire [31:0][31:0]  _GEN_9 =
    {{{programBufferMem_63,
       programBufferMem_62,
       programBufferMem_61,
       programBufferMem_60}},
     {{programBufferMem_59,
       programBufferMem_58,
       programBufferMem_57,
       programBufferMem_56}},
     {{programBufferMem_55,
       programBufferMem_54,
       programBufferMem_53,
       programBufferMem_52}},
     {{programBufferMem_51,
       programBufferMem_50,
       programBufferMem_49,
       programBufferMem_48}},
     {{programBufferMem_47,
       programBufferMem_46,
       programBufferMem_45,
       programBufferMem_44}},
     {{programBufferMem_43,
       programBufferMem_42,
       programBufferMem_41,
       programBufferMem_40}},
     {{programBufferMem_39,
       programBufferMem_38,
       programBufferMem_37,
       programBufferMem_36}},
     {{programBufferMem_35,
       programBufferMem_34,
       programBufferMem_33,
       programBufferMem_32}},
     {{programBufferMem_31,
       programBufferMem_30,
       programBufferMem_29,
       programBufferMem_28}},
     {{programBufferMem_27,
       programBufferMem_26,
       programBufferMem_25,
       programBufferMem_24}},
     {{programBufferMem_23,
       programBufferMem_22,
       programBufferMem_21,
       programBufferMem_20}},
     {{programBufferMem_19,
       programBufferMem_18,
       programBufferMem_17,
       programBufferMem_16}},
     {{programBufferMem_15,
       programBufferMem_14,
       programBufferMem_13,
       programBufferMem_12}},
     {{programBufferMem_11, programBufferMem_10, programBufferMem_9, programBufferMem_8}},
     {{programBufferMem_7, programBufferMem_6, programBufferMem_5, programBufferMem_4}},
     {{programBufferMem_3, programBufferMem_2, programBufferMem_1, programBufferMem_0}},
     {32'h0},
     {32'h0},
     {32'h0},
     {32'h0},
     {32'h0},
     {32'h0},
     {32'h0},
     {{ABSTRACTAUTOReg_autoexecprogbuf, 14'h0, ABSTRACTAUTOReg_autoexecdata[1:0]}},
     {{COMMANDReg_cmdtype, COMMANDReg_control}},
     {{3'h0,
       ABSTRACTCSReg_progbufsize,
       11'h0,
       |ctrlStateReg,
       1'h0,
       ABSTRACTCSReg_cmderr,
       4'h0,
       ABSTRACTCSReg_datacount}},
     {{abstractDataMem_7, abstractDataMem_6, abstractDataMem_5, abstractDataMem_4}},
     {{abstractDataMem_3, abstractDataMem_2, abstractDataMem_1, abstractDataMem_0}},
     {{31'h0, hartHalted}},
     {32'h0},
     {{12'h0,
       {2{haveResetBitRegs}},
       {2{(~resumereq | ~hamaskWrSel_0) & ~resumeReqRegs}},
       4'h0,
       {2{~hartHalted}},
       {2{hartHalted}},
       8'hA2}},
     {{31'h0, hartHalted}}};
  wire [2:0]         dmiNodeIn_d_bits_opcode = {2'h0, out_front_bits_read};
  reg                goReg;
  reg  [31:0]        abstractGeneratedMem_0;
  reg  [31:0]        abstractGeneratedMem_1;
  wire               out_front_1_bits_read = auto_tl_in_a_bits_opcode == 3'h4;
  wire [9:0]         _GEN_10 =
    {{2{auto_tl_in_a_bits_mask[1]}}, {8{auto_tl_in_a_bits_mask[0]}}};
  wire               hartResumingWrEn = out_woready_1_345 & (&_GEN_10);
  wire [9:0]         _GEN_11 =
    {{2{auto_tl_in_a_bits_mask[5]}}, {8{auto_tl_in_a_bits_mask[4]}}};
  wire               hartExceptionWrEn = out_woready_1_345 & (&_GEN_11);
  wire               hartHaltedWrEn = out_woready_1_528 & (&_GEN_10);
  wire               hartGoingWrEn = out_woready_1_528 & (&_GEN_11);
  wire               _GEN_12 =
    auto_tl_in_a_valid & auto_tl_in_d_ready & ~out_front_1_bits_read;
  assign out_woready_1_528 =
    _GEN_12 & auto_tl_in_a_bits_address[10:3] == 8'h20 & ~(auto_tl_in_a_bits_address[11]);
  assign out_woready_1_345 =
    _GEN_12 & auto_tl_in_a_bits_address[10:3] == 8'h21 & ~(auto_tl_in_a_bits_address[11]);
  wire               out_woready_1_922 =
    _GEN_12 & auto_tl_in_a_bits_address[10:3] == 8'h68 & ~(auto_tl_in_a_bits_address[11]);
  wire               out_woready_1_510 =
    _GEN_12 & auto_tl_in_a_bits_address[10:3] == 8'h69 & ~(auto_tl_in_a_bits_address[11]);
  wire               out_woready_1_191 =
    _GEN_12 & auto_tl_in_a_bits_address[10:3] == 8'h6A & ~(auto_tl_in_a_bits_address[11]);
  wire               out_woready_1_1074 =
    _GEN_12 & auto_tl_in_a_bits_address[10:3] == 8'h6B & ~(auto_tl_in_a_bits_address[11]);
  wire               out_woready_1_722 =
    _GEN_12 & auto_tl_in_a_bits_address[10:3] == 8'h6C & ~(auto_tl_in_a_bits_address[11]);
  wire               out_woready_1_442 =
    _GEN_12 & auto_tl_in_a_bits_address[10:3] == 8'h6D & ~(auto_tl_in_a_bits_address[11]);
  wire               out_woready_1_111 =
    _GEN_12 & auto_tl_in_a_bits_address[10:3] == 8'h6E & ~(auto_tl_in_a_bits_address[11]);
  wire               out_woready_1_1146 =
    _GEN_12 & auto_tl_in_a_bits_address[10:3] == 8'h6F & ~(auto_tl_in_a_bits_address[11]);
  wire               out_woready_1_818 =
    _GEN_12 & auto_tl_in_a_bits_address[10:3] == 8'h70 & ~(auto_tl_in_a_bits_address[11]);
  wire [255:0]       _GEN_13 =
    {{~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {~(auto_tl_in_a_bits_address[11])},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {~(auto_tl_in_a_bits_address[11])},
     {~(auto_tl_in_a_bits_address[11])},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {auto_tl_in_a_bits_address[11]},
     {auto_tl_in_a_bits_address[11]},
     {auto_tl_in_a_bits_address[11]},
     {auto_tl_in_a_bits_address[11]},
     {auto_tl_in_a_bits_address[11]},
     {auto_tl_in_a_bits_address[11]},
     {auto_tl_in_a_bits_address[11]},
     {auto_tl_in_a_bits_address[11]},
     {auto_tl_in_a_bits_address[11]},
     {auto_tl_in_a_bits_address[11]},
     {auto_tl_in_a_bits_address[11]}};
  wire [255:0][63:0] _GEN_14 =
    {{{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {{6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg,
       6'h0,
       resumeReqRegs,
       goReg}},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {{abstractDataMem_7,
       abstractDataMem_6,
       abstractDataMem_5,
       abstractDataMem_4,
       abstractDataMem_3,
       abstractDataMem_2,
       abstractDataMem_1,
       abstractDataMem_0}},
     {{programBufferMem_63,
       programBufferMem_62,
       programBufferMem_61,
       programBufferMem_60,
       programBufferMem_59,
       programBufferMem_58,
       programBufferMem_57,
       programBufferMem_56}},
     {{programBufferMem_55,
       programBufferMem_54,
       programBufferMem_53,
       programBufferMem_52,
       programBufferMem_51,
       programBufferMem_50,
       programBufferMem_49,
       programBufferMem_48}},
     {{programBufferMem_47,
       programBufferMem_46,
       programBufferMem_45,
       programBufferMem_44,
       programBufferMem_43,
       programBufferMem_42,
       programBufferMem_41,
       programBufferMem_40}},
     {{programBufferMem_39,
       programBufferMem_38,
       programBufferMem_37,
       programBufferMem_36,
       programBufferMem_35,
       programBufferMem_34,
       programBufferMem_33,
       programBufferMem_32}},
     {{programBufferMem_31,
       programBufferMem_30,
       programBufferMem_29,
       programBufferMem_28,
       programBufferMem_27,
       programBufferMem_26,
       programBufferMem_25,
       programBufferMem_24}},
     {{programBufferMem_23,
       programBufferMem_22,
       programBufferMem_21,
       programBufferMem_20,
       programBufferMem_19,
       programBufferMem_18,
       programBufferMem_17,
       programBufferMem_16}},
     {{programBufferMem_15,
       programBufferMem_14,
       programBufferMem_13,
       programBufferMem_12,
       programBufferMem_11,
       programBufferMem_10,
       programBufferMem_9,
       programBufferMem_8}},
     {{programBufferMem_7,
       programBufferMem_6,
       programBufferMem_5,
       programBufferMem_4,
       programBufferMem_3,
       programBufferMem_2,
       programBufferMem_1,
       programBufferMem_0}},
     {{abstractGeneratedMem_1, abstractGeneratedMem_0}},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h380006F},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h0},
     {64'h100073},
     {64'h100026237B200073},
     {64'h7B20247310802423},
     {64'hF140247330000067},
     {64'h100022237B202473},
     {64'h4086300147413},
     {64'hFE0408E300347413},
     {64'h4004440310802023},
     {64'hF14024737B241073},
     {64'hFF0000F0440006F},
     {64'h380006F00C0006F}};
  wire [2:0]         tlNodeIn_d_bits_opcode = {2'h0, out_front_1_bits_read};
  wire               commandRegIsAccessRegister = COMMANDReg_cmdtype == 8'h0;
  wire               _GEN_15 =
    ~(COMMANDReg_control[17]) | (|(COMMANDReg_control[15:12]))
    & COMMANDReg_control[15:0] < 16'h1020
    & (COMMANDReg_control[22:20] == 3'h2 | COMMANDReg_control[22:20] == 3'h3);
  wire               commandRegIsUnsupported = ~commandRegIsAccessRegister | ~_GEN_15;
  wire               commandRegBadHaltResume =
    commandRegIsAccessRegister & _GEN_15 & ~hartHalted;
  wire               _GEN_16 = ctrlStateReg == 2'h1;
  wire               _GEN_17 = commandRegIsUnsupported | commandRegBadHaltResume;
  wire               goAbstract = (|ctrlStateReg) & _GEN_16 & ~_GEN_17;
  wire               _GEN_18 = ctrlStateReg == 2'h2;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      automatic logic _GEN_19 = (|ctrlStateReg) & ~_GEN_16;
      if (io_dmactive & ~goAbstract & hartGoingWrEn & ~reset
          & (|(auto_tl_in_a_bits_data[41:32]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: Unexpected 'GOING' hart.\n    at Debug.scala:1506 assert(hartGoingId === 0.U, \"Unexpected 'GOING' hart.\")//Chisel3 #540 %%%%x, expected %%%%x\", hartGoingId, 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & _GEN_18 & hartExceptionWrEn & ~reset
          & (|(auto_tl_in_a_bits_data[41:32]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: Unexpected 'EXCEPTION' hart\n    at Debug.scala:1827 assert(hartExceptionId === 0.U, \"Unexpected 'EXCEPTION' hart\")//Chisel3 #540, %%%%x, expected %%%%x\", hartExceptionId, 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_19 & ~_GEN_18 & (&ctrlStateReg) & ~reset) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: Should not be in custom state unless we need it.\n    at Debug.scala:1832 assert(needCustom.B, \"Should not be in custom state unless we need it.\")\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~io_dmactive | ~hartExceptionWrEn | _GEN_18)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: Unexpected EXCEPTION write: should only get it in Debug Module EXEC state\n    at Debug.scala:1845 assert ((!io.dmactive || !hartExceptionWrEn || ctrlStateReg === CtrlState(Exec)),\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    hartHalted <=
      io_dmactive & (hartHaltedWrEn | ~hartResumingWrEn & hartHalted)
      & ~_hartIsInResetSync_0_debug_hartReset_0_io_q;
    resumeReqRegs <=
      io_dmactive
      & (resumereq
           ? (resumeReqRegs | hamaskWrSel_0)
             & ~_hartIsInResetSync_0_debug_hartReset_0_io_q
           : ~hartResumingWrEn & resumeReqRegs
             & ~_hartIsInResetSync_0_debug_hartReset_0_io_q);
    haveResetBitRegs <=
      io_dmactive
      & (io_innerCtrl_valid & io_innerCtrl_bits_ackhavereset
           ? haveResetBitRegs & ~hamaskWrSel_0
             | _hartIsInResetSync_0_debug_hartReset_0_io_q
           : haveResetBitRegs | _hartIsInResetSync_0_debug_hartReset_0_io_q);
    if (io_dmactive) begin
      automatic logic dmiAbstractDataAccessVec_0 =
        dmiAbstractDataWrEnMaybe_0 | out_roready_27 & auto_dmi_in_a_bits_mask[0];
      automatic logic dmiAbstractDataAccessVec_4 =
        dmiAbstractDataWrEnMaybe_4 | out_roready_3 & auto_dmi_in_a_bits_mask[0];
      automatic logic dmiProgramBufferAccessVec_0 =
        dmiProgramBufferWrEnMaybe_0 | out_roready_78 & auto_dmi_in_a_bits_mask[0];
      automatic logic dmiProgramBufferAccessVec_4 =
        dmiProgramBufferWrEnMaybe_4 | out_roready_50 & auto_dmi_in_a_bits_mask[0];
      automatic logic dmiProgramBufferAccessVec_8 =
        dmiProgramBufferWrEnMaybe_8 | out_roready_82 & auto_dmi_in_a_bits_mask[0];
      automatic logic dmiProgramBufferAccessVec_12 =
        dmiProgramBufferWrEnMaybe_12 | out_roready_19 & auto_dmi_in_a_bits_mask[0];
      automatic logic dmiProgramBufferAccessVec_16 =
        dmiProgramBufferWrEnMaybe_16 | out_roready_102 & auto_dmi_in_a_bits_mask[0];
      automatic logic dmiProgramBufferAccessVec_20 =
        dmiProgramBufferWrEnMaybe_20 | out_roready_42 & auto_dmi_in_a_bits_mask[0];
      automatic logic dmiProgramBufferAccessVec_24 =
        dmiProgramBufferWrEnMaybe_24 | out_roready_46 & auto_dmi_in_a_bits_mask[0];
      automatic logic dmiProgramBufferAccessVec_28 =
        dmiProgramBufferWrEnMaybe_28 | out_roready_15 & auto_dmi_in_a_bits_mask[0];
      automatic logic dmiProgramBufferAccessVec_32 =
        dmiProgramBufferWrEnMaybe_32 | out_roready_97 & auto_dmi_in_a_bits_mask[0];
      automatic logic dmiProgramBufferAccessVec_36 =
        dmiProgramBufferWrEnMaybe_36 | out_roready_11 & auto_dmi_in_a_bits_mask[0];
      automatic logic dmiProgramBufferAccessVec_40 =
        dmiProgramBufferWrEnMaybe_40 | out_roready_35 & auto_dmi_in_a_bits_mask[0];
      automatic logic dmiProgramBufferAccessVec_44 =
        dmiProgramBufferWrEnMaybe_44 | out_roready_23 & auto_dmi_in_a_bits_mask[0];
      automatic logic dmiProgramBufferAccessVec_48 =
        dmiProgramBufferWrEnMaybe_48 | out_roready_93 & auto_dmi_in_a_bits_mask[0];
      automatic logic dmiProgramBufferAccessVec_52 =
        dmiProgramBufferWrEnMaybe_52 | out_roready_54 & auto_dmi_in_a_bits_mask[0];
      automatic logic dmiProgramBufferAccessVec_56 =
        dmiProgramBufferWrEnMaybe_56 | out_roready_7 & auto_dmi_in_a_bits_mask[0];
      automatic logic dmiProgramBufferAccessVec_60 =
        dmiProgramBufferWrEnMaybe_60 | out_roready_31 & auto_dmi_in_a_bits_mask[0];
      automatic logic autoexec;
      automatic logic COMMANDWrEn;
      automatic logic _GEN_20 = ABSTRACTCSReg_cmderr == 3'h0;
      automatic logic _GEN_21;
      autoexec =
        dmiAbstractDataAccessVec_0 & ABSTRACTAUTOReg_autoexecdata[0]
        | dmiAbstractDataAccessVec_4 & ABSTRACTAUTOReg_autoexecdata[1]
        | dmiProgramBufferAccessVec_0 & ABSTRACTAUTOReg_autoexecprogbuf[0]
        | dmiProgramBufferAccessVec_4 & ABSTRACTAUTOReg_autoexecprogbuf[1]
        | dmiProgramBufferAccessVec_8 & ABSTRACTAUTOReg_autoexecprogbuf[2]
        | dmiProgramBufferAccessVec_12 & ABSTRACTAUTOReg_autoexecprogbuf[3]
        | dmiProgramBufferAccessVec_16 & ABSTRACTAUTOReg_autoexecprogbuf[4]
        | dmiProgramBufferAccessVec_20 & ABSTRACTAUTOReg_autoexecprogbuf[5]
        | dmiProgramBufferAccessVec_24 & ABSTRACTAUTOReg_autoexecprogbuf[6]
        | dmiProgramBufferAccessVec_28 & ABSTRACTAUTOReg_autoexecprogbuf[7]
        | dmiProgramBufferAccessVec_32 & ABSTRACTAUTOReg_autoexecprogbuf[8]
        | dmiProgramBufferAccessVec_36 & ABSTRACTAUTOReg_autoexecprogbuf[9]
        | dmiProgramBufferAccessVec_40 & ABSTRACTAUTOReg_autoexecprogbuf[10]
        | dmiProgramBufferAccessVec_44 & ABSTRACTAUTOReg_autoexecprogbuf[11]
        | dmiProgramBufferAccessVec_48 & ABSTRACTAUTOReg_autoexecprogbuf[12]
        | dmiProgramBufferAccessVec_52 & ABSTRACTAUTOReg_autoexecprogbuf[13]
        | dmiProgramBufferAccessVec_56 & ABSTRACTAUTOReg_autoexecprogbuf[14]
        | dmiProgramBufferAccessVec_60 & ABSTRACTAUTOReg_autoexecprogbuf[15];
      COMMANDWrEn = COMMANDWrEnMaybe & ~(|ctrlStateReg);
      _GEN_21 =
        COMMANDWrEn & ~(|(COMMANDWrDataVal[31:24])) & _GEN_20 | autoexec
        & commandRegIsAccessRegister & _GEN_20;
      if (ABSTRACTCSWrEnMaybe & (|ctrlStateReg) | autoexecdataWrEnMaybe & (|ctrlStateReg)
          | autoexecprogbufWrEnMaybe & (|ctrlStateReg) | COMMANDWrEnMaybe
          & (|ctrlStateReg)
          | (dmiAbstractDataAccessVec_0 | dmiAbstractDataWrEnMaybe_1 | out_roready_27
             & auto_dmi_in_a_bits_mask[1] | dmiAbstractDataWrEnMaybe_2 | out_roready_27
             & auto_dmi_in_a_bits_mask[2] | dmiAbstractDataWrEnMaybe_3 | out_roready_27
             & auto_dmi_in_a_bits_mask[3] | dmiAbstractDataAccessVec_4
             | dmiAbstractDataWrEnMaybe_5 | out_roready_3 & auto_dmi_in_a_bits_mask[1]
             | dmiAbstractDataWrEnMaybe_6 | out_roready_3 & auto_dmi_in_a_bits_mask[2]
             | dmiAbstractDataWrEnMaybe_7 | out_roready_3 & auto_dmi_in_a_bits_mask[3])
          & (|ctrlStateReg)
          | (dmiProgramBufferAccessVec_0 | dmiProgramBufferWrEnMaybe_1 | out_roready_78
             & auto_dmi_in_a_bits_mask[1] | dmiProgramBufferWrEnMaybe_2 | out_roready_78
             & auto_dmi_in_a_bits_mask[2] | dmiProgramBufferWrEnMaybe_3 | out_roready_78
             & auto_dmi_in_a_bits_mask[3] | dmiProgramBufferAccessVec_4
             | dmiProgramBufferWrEnMaybe_5 | out_roready_50 & auto_dmi_in_a_bits_mask[1]
             | dmiProgramBufferWrEnMaybe_6 | out_roready_50 & auto_dmi_in_a_bits_mask[2]
             | dmiProgramBufferWrEnMaybe_7 | out_roready_50 & auto_dmi_in_a_bits_mask[3]
             | dmiProgramBufferAccessVec_8 | dmiProgramBufferWrEnMaybe_9 | out_roready_82
             & auto_dmi_in_a_bits_mask[1] | dmiProgramBufferWrEnMaybe_10 | out_roready_82
             & auto_dmi_in_a_bits_mask[2] | dmiProgramBufferWrEnMaybe_11 | out_roready_82
             & auto_dmi_in_a_bits_mask[3] | dmiProgramBufferAccessVec_12
             | dmiProgramBufferWrEnMaybe_13 | out_roready_19 & auto_dmi_in_a_bits_mask[1]
             | dmiProgramBufferWrEnMaybe_14 | out_roready_19 & auto_dmi_in_a_bits_mask[2]
             | dmiProgramBufferWrEnMaybe_15 | out_roready_19 & auto_dmi_in_a_bits_mask[3]
             | dmiProgramBufferAccessVec_16 | dmiProgramBufferWrEnMaybe_17
             | out_roready_102 & auto_dmi_in_a_bits_mask[1] | dmiProgramBufferWrEnMaybe_18
             | out_roready_102 & auto_dmi_in_a_bits_mask[2] | dmiProgramBufferWrEnMaybe_19
             | out_roready_102 & auto_dmi_in_a_bits_mask[3] | dmiProgramBufferAccessVec_20
             | dmiProgramBufferWrEnMaybe_21 | out_roready_42 & auto_dmi_in_a_bits_mask[1]
             | dmiProgramBufferWrEnMaybe_22 | out_roready_42 & auto_dmi_in_a_bits_mask[2]
             | dmiProgramBufferWrEnMaybe_23 | out_roready_42 & auto_dmi_in_a_bits_mask[3]
             | dmiProgramBufferAccessVec_24 | dmiProgramBufferWrEnMaybe_25
             | out_roready_46 & auto_dmi_in_a_bits_mask[1] | dmiProgramBufferWrEnMaybe_26
             | out_roready_46 & auto_dmi_in_a_bits_mask[2] | dmiProgramBufferWrEnMaybe_27
             | out_roready_46 & auto_dmi_in_a_bits_mask[3] | dmiProgramBufferAccessVec_28
             | dmiProgramBufferWrEnMaybe_29 | out_roready_15 & auto_dmi_in_a_bits_mask[1]
             | dmiProgramBufferWrEnMaybe_30 | out_roready_15 & auto_dmi_in_a_bits_mask[2]
             | dmiProgramBufferWrEnMaybe_31 | out_roready_15 & auto_dmi_in_a_bits_mask[3]
             | dmiProgramBufferAccessVec_32 | dmiProgramBufferWrEnMaybe_33
             | out_roready_97 & auto_dmi_in_a_bits_mask[1] | dmiProgramBufferWrEnMaybe_34
             | out_roready_97 & auto_dmi_in_a_bits_mask[2] | dmiProgramBufferWrEnMaybe_35
             | out_roready_97 & auto_dmi_in_a_bits_mask[3] | dmiProgramBufferAccessVec_36
             | dmiProgramBufferWrEnMaybe_37 | out_roready_11 & auto_dmi_in_a_bits_mask[1]
             | dmiProgramBufferWrEnMaybe_38 | out_roready_11 & auto_dmi_in_a_bits_mask[2]
             | dmiProgramBufferWrEnMaybe_39 | out_roready_11 & auto_dmi_in_a_bits_mask[3]
             | dmiProgramBufferAccessVec_40 | dmiProgramBufferWrEnMaybe_41
             | out_roready_35 & auto_dmi_in_a_bits_mask[1] | dmiProgramBufferWrEnMaybe_42
             | out_roready_35 & auto_dmi_in_a_bits_mask[2] | dmiProgramBufferWrEnMaybe_43
             | out_roready_35 & auto_dmi_in_a_bits_mask[3] | dmiProgramBufferAccessVec_44
             | dmiProgramBufferWrEnMaybe_45 | out_roready_23 & auto_dmi_in_a_bits_mask[1]
             | dmiProgramBufferWrEnMaybe_46 | out_roready_23 & auto_dmi_in_a_bits_mask[2]
             | dmiProgramBufferWrEnMaybe_47 | out_roready_23 & auto_dmi_in_a_bits_mask[3]
             | dmiProgramBufferAccessVec_48 | dmiProgramBufferWrEnMaybe_49
             | out_roready_93 & auto_dmi_in_a_bits_mask[1] | dmiProgramBufferWrEnMaybe_50
             | out_roready_93 & auto_dmi_in_a_bits_mask[2] | dmiProgramBufferWrEnMaybe_51
             | out_roready_93 & auto_dmi_in_a_bits_mask[3] | dmiProgramBufferAccessVec_52
             | dmiProgramBufferWrEnMaybe_53 | out_roready_54 & auto_dmi_in_a_bits_mask[1]
             | dmiProgramBufferWrEnMaybe_54 | out_roready_54 & auto_dmi_in_a_bits_mask[2]
             | dmiProgramBufferWrEnMaybe_55 | out_roready_54 & auto_dmi_in_a_bits_mask[3]
             | dmiProgramBufferAccessVec_56 | dmiProgramBufferWrEnMaybe_57 | out_roready_7
             & auto_dmi_in_a_bits_mask[1] | dmiProgramBufferWrEnMaybe_58 | out_roready_7
             & auto_dmi_in_a_bits_mask[2] | dmiProgramBufferWrEnMaybe_59 | out_roready_7
             & auto_dmi_in_a_bits_mask[3] | dmiProgramBufferAccessVec_60
             | dmiProgramBufferWrEnMaybe_61 | out_roready_31 & auto_dmi_in_a_bits_mask[1]
             | dmiProgramBufferWrEnMaybe_62 | out_roready_31 & auto_dmi_in_a_bits_mask[2]
             | dmiProgramBufferWrEnMaybe_63 | out_roready_31 & auto_dmi_in_a_bits_mask[3])
          & (|ctrlStateReg))
        ABSTRACTCSReg_cmderr <= 3'h1;
      else if (~(~(|ctrlStateReg) | _GEN_16) & _GEN_18 & hartExceptionWrEn)
        ABSTRACTCSReg_cmderr <= 3'h3;
      else if ((|ctrlStateReg)
                 ? _GEN_16 & commandRegIsUnsupported
                 : ~_GEN_21
                   & (COMMANDWrEn & (|(COMMANDWrDataVal[31:24])) | autoexec
                      & commandRegIsUnsupported))
        ABSTRACTCSReg_cmderr <= 3'h2;
      else if ((|ctrlStateReg) & _GEN_16 & ~commandRegIsUnsupported
               & commandRegBadHaltResume)
        ABSTRACTCSReg_cmderr <= 3'h4;
      else
        ABSTRACTCSReg_cmderr <=
          ({3{~(ABSTRACTCSWrEnMaybe & ~(|ctrlStateReg))}}
           | ~(auto_dmi_in_a_bits_data[10:8])) & ABSTRACTCSReg_cmderr;
      if (autoexecprogbufWrEnMaybe & ~(|ctrlStateReg))
        ABSTRACTAUTOReg_autoexecprogbuf <= auto_dmi_in_a_bits_data[31:16];
      if (autoexecdataWrEnMaybe & ~(|ctrlStateReg))
        ABSTRACTAUTOReg_autoexecdata <= {10'h0, auto_dmi_in_a_bits_data[1:0]};
      if (COMMANDWrEn) begin
        COMMANDReg_cmdtype <= COMMANDWrDataVal[31:24];
        COMMANDReg_control <= COMMANDWrDataVal[23:0];
      end
      if (out_woready_1_818 & auto_tl_in_a_bits_mask[0])
        abstractDataMem_0 <= auto_tl_in_a_bits_data[7:0];
      else if (dmiAbstractDataWrEnMaybe_0 & ~(|ctrlStateReg))
        abstractDataMem_0 <= auto_dmi_in_a_bits_data[7:0];
      if (out_woready_1_818 & auto_tl_in_a_bits_mask[1])
        abstractDataMem_1 <= auto_tl_in_a_bits_data[15:8];
      else if (dmiAbstractDataWrEnMaybe_1 & ~(|ctrlStateReg))
        abstractDataMem_1 <= auto_dmi_in_a_bits_data[15:8];
      if (out_woready_1_818 & auto_tl_in_a_bits_mask[2])
        abstractDataMem_2 <= auto_tl_in_a_bits_data[23:16];
      else if (dmiAbstractDataWrEnMaybe_2 & ~(|ctrlStateReg))
        abstractDataMem_2 <= auto_dmi_in_a_bits_data[23:16];
      if (out_woready_1_818 & auto_tl_in_a_bits_mask[3])
        abstractDataMem_3 <= auto_tl_in_a_bits_data[31:24];
      else if (dmiAbstractDataWrEnMaybe_3 & ~(|ctrlStateReg))
        abstractDataMem_3 <= auto_dmi_in_a_bits_data[31:24];
      if (out_woready_1_818 & auto_tl_in_a_bits_mask[4])
        abstractDataMem_4 <= auto_tl_in_a_bits_data[39:32];
      else if (dmiAbstractDataWrEnMaybe_4 & ~(|ctrlStateReg))
        abstractDataMem_4 <= auto_dmi_in_a_bits_data[7:0];
      if (out_woready_1_818 & auto_tl_in_a_bits_mask[5])
        abstractDataMem_5 <= auto_tl_in_a_bits_data[47:40];
      else if (dmiAbstractDataWrEnMaybe_5 & ~(|ctrlStateReg))
        abstractDataMem_5 <= auto_dmi_in_a_bits_data[15:8];
      if (out_woready_1_818 & auto_tl_in_a_bits_mask[6])
        abstractDataMem_6 <= auto_tl_in_a_bits_data[55:48];
      else if (dmiAbstractDataWrEnMaybe_6 & ~(|ctrlStateReg))
        abstractDataMem_6 <= auto_dmi_in_a_bits_data[23:16];
      if (out_woready_1_818 & auto_tl_in_a_bits_mask[7])
        abstractDataMem_7 <= auto_tl_in_a_bits_data[63:56];
      else if (dmiAbstractDataWrEnMaybe_7 & ~(|ctrlStateReg))
        abstractDataMem_7 <= auto_dmi_in_a_bits_data[31:24];
      if (out_woready_1_922 & auto_tl_in_a_bits_mask[0])
        programBufferMem_0 <= auto_tl_in_a_bits_data[7:0];
      else if (dmiProgramBufferWrEnMaybe_0 & ~(|ctrlStateReg))
        programBufferMem_0 <= auto_dmi_in_a_bits_data[7:0];
      if (out_woready_1_922 & auto_tl_in_a_bits_mask[1])
        programBufferMem_1 <= auto_tl_in_a_bits_data[15:8];
      else if (dmiProgramBufferWrEnMaybe_1 & ~(|ctrlStateReg))
        programBufferMem_1 <= auto_dmi_in_a_bits_data[15:8];
      if (out_woready_1_922 & auto_tl_in_a_bits_mask[2])
        programBufferMem_2 <= auto_tl_in_a_bits_data[23:16];
      else if (dmiProgramBufferWrEnMaybe_2 & ~(|ctrlStateReg))
        programBufferMem_2 <= auto_dmi_in_a_bits_data[23:16];
      if (out_woready_1_922 & auto_tl_in_a_bits_mask[3])
        programBufferMem_3 <= auto_tl_in_a_bits_data[31:24];
      else if (dmiProgramBufferWrEnMaybe_3 & ~(|ctrlStateReg))
        programBufferMem_3 <= auto_dmi_in_a_bits_data[31:24];
      if (out_woready_1_922 & auto_tl_in_a_bits_mask[4])
        programBufferMem_4 <= auto_tl_in_a_bits_data[39:32];
      else if (dmiProgramBufferWrEnMaybe_4 & ~(|ctrlStateReg))
        programBufferMem_4 <= auto_dmi_in_a_bits_data[7:0];
      if (out_woready_1_922 & auto_tl_in_a_bits_mask[5])
        programBufferMem_5 <= auto_tl_in_a_bits_data[47:40];
      else if (dmiProgramBufferWrEnMaybe_5 & ~(|ctrlStateReg))
        programBufferMem_5 <= auto_dmi_in_a_bits_data[15:8];
      if (out_woready_1_922 & auto_tl_in_a_bits_mask[6])
        programBufferMem_6 <= auto_tl_in_a_bits_data[55:48];
      else if (dmiProgramBufferWrEnMaybe_6 & ~(|ctrlStateReg))
        programBufferMem_6 <= auto_dmi_in_a_bits_data[23:16];
      if (out_woready_1_922 & auto_tl_in_a_bits_mask[7])
        programBufferMem_7 <= auto_tl_in_a_bits_data[63:56];
      else if (dmiProgramBufferWrEnMaybe_7 & ~(|ctrlStateReg))
        programBufferMem_7 <= auto_dmi_in_a_bits_data[31:24];
      if (out_woready_1_510 & auto_tl_in_a_bits_mask[0])
        programBufferMem_8 <= auto_tl_in_a_bits_data[7:0];
      else if (dmiProgramBufferWrEnMaybe_8 & ~(|ctrlStateReg))
        programBufferMem_8 <= auto_dmi_in_a_bits_data[7:0];
      if (out_woready_1_510 & auto_tl_in_a_bits_mask[1])
        programBufferMem_9 <= auto_tl_in_a_bits_data[15:8];
      else if (dmiProgramBufferWrEnMaybe_9 & ~(|ctrlStateReg))
        programBufferMem_9 <= auto_dmi_in_a_bits_data[15:8];
      if (out_woready_1_510 & auto_tl_in_a_bits_mask[2])
        programBufferMem_10 <= auto_tl_in_a_bits_data[23:16];
      else if (dmiProgramBufferWrEnMaybe_10 & ~(|ctrlStateReg))
        programBufferMem_10 <= auto_dmi_in_a_bits_data[23:16];
      if (out_woready_1_510 & auto_tl_in_a_bits_mask[3])
        programBufferMem_11 <= auto_tl_in_a_bits_data[31:24];
      else if (dmiProgramBufferWrEnMaybe_11 & ~(|ctrlStateReg))
        programBufferMem_11 <= auto_dmi_in_a_bits_data[31:24];
      if (out_woready_1_510 & auto_tl_in_a_bits_mask[4])
        programBufferMem_12 <= auto_tl_in_a_bits_data[39:32];
      else if (dmiProgramBufferWrEnMaybe_12 & ~(|ctrlStateReg))
        programBufferMem_12 <= auto_dmi_in_a_bits_data[7:0];
      if (out_woready_1_510 & auto_tl_in_a_bits_mask[5])
        programBufferMem_13 <= auto_tl_in_a_bits_data[47:40];
      else if (dmiProgramBufferWrEnMaybe_13 & ~(|ctrlStateReg))
        programBufferMem_13 <= auto_dmi_in_a_bits_data[15:8];
      if (out_woready_1_510 & auto_tl_in_a_bits_mask[6])
        programBufferMem_14 <= auto_tl_in_a_bits_data[55:48];
      else if (dmiProgramBufferWrEnMaybe_14 & ~(|ctrlStateReg))
        programBufferMem_14 <= auto_dmi_in_a_bits_data[23:16];
      if (out_woready_1_510 & auto_tl_in_a_bits_mask[7])
        programBufferMem_15 <= auto_tl_in_a_bits_data[63:56];
      else if (dmiProgramBufferWrEnMaybe_15 & ~(|ctrlStateReg))
        programBufferMem_15 <= auto_dmi_in_a_bits_data[31:24];
      if (out_woready_1_191 & auto_tl_in_a_bits_mask[0])
        programBufferMem_16 <= auto_tl_in_a_bits_data[7:0];
      else if (dmiProgramBufferWrEnMaybe_16 & ~(|ctrlStateReg))
        programBufferMem_16 <= auto_dmi_in_a_bits_data[7:0];
      if (out_woready_1_191 & auto_tl_in_a_bits_mask[1])
        programBufferMem_17 <= auto_tl_in_a_bits_data[15:8];
      else if (dmiProgramBufferWrEnMaybe_17 & ~(|ctrlStateReg))
        programBufferMem_17 <= auto_dmi_in_a_bits_data[15:8];
      if (out_woready_1_191 & auto_tl_in_a_bits_mask[2])
        programBufferMem_18 <= auto_tl_in_a_bits_data[23:16];
      else if (dmiProgramBufferWrEnMaybe_18 & ~(|ctrlStateReg))
        programBufferMem_18 <= auto_dmi_in_a_bits_data[23:16];
      if (out_woready_1_191 & auto_tl_in_a_bits_mask[3])
        programBufferMem_19 <= auto_tl_in_a_bits_data[31:24];
      else if (dmiProgramBufferWrEnMaybe_19 & ~(|ctrlStateReg))
        programBufferMem_19 <= auto_dmi_in_a_bits_data[31:24];
      if (out_woready_1_191 & auto_tl_in_a_bits_mask[4])
        programBufferMem_20 <= auto_tl_in_a_bits_data[39:32];
      else if (dmiProgramBufferWrEnMaybe_20 & ~(|ctrlStateReg))
        programBufferMem_20 <= auto_dmi_in_a_bits_data[7:0];
      if (out_woready_1_191 & auto_tl_in_a_bits_mask[5])
        programBufferMem_21 <= auto_tl_in_a_bits_data[47:40];
      else if (dmiProgramBufferWrEnMaybe_21 & ~(|ctrlStateReg))
        programBufferMem_21 <= auto_dmi_in_a_bits_data[15:8];
      if (out_woready_1_191 & auto_tl_in_a_bits_mask[6])
        programBufferMem_22 <= auto_tl_in_a_bits_data[55:48];
      else if (dmiProgramBufferWrEnMaybe_22 & ~(|ctrlStateReg))
        programBufferMem_22 <= auto_dmi_in_a_bits_data[23:16];
      if (out_woready_1_191 & auto_tl_in_a_bits_mask[7])
        programBufferMem_23 <= auto_tl_in_a_bits_data[63:56];
      else if (dmiProgramBufferWrEnMaybe_23 & ~(|ctrlStateReg))
        programBufferMem_23 <= auto_dmi_in_a_bits_data[31:24];
      if (out_woready_1_1074 & auto_tl_in_a_bits_mask[0])
        programBufferMem_24 <= auto_tl_in_a_bits_data[7:0];
      else if (dmiProgramBufferWrEnMaybe_24 & ~(|ctrlStateReg))
        programBufferMem_24 <= auto_dmi_in_a_bits_data[7:0];
      if (out_woready_1_1074 & auto_tl_in_a_bits_mask[1])
        programBufferMem_25 <= auto_tl_in_a_bits_data[15:8];
      else if (dmiProgramBufferWrEnMaybe_25 & ~(|ctrlStateReg))
        programBufferMem_25 <= auto_dmi_in_a_bits_data[15:8];
      if (out_woready_1_1074 & auto_tl_in_a_bits_mask[2])
        programBufferMem_26 <= auto_tl_in_a_bits_data[23:16];
      else if (dmiProgramBufferWrEnMaybe_26 & ~(|ctrlStateReg))
        programBufferMem_26 <= auto_dmi_in_a_bits_data[23:16];
      if (out_woready_1_1074 & auto_tl_in_a_bits_mask[3])
        programBufferMem_27 <= auto_tl_in_a_bits_data[31:24];
      else if (dmiProgramBufferWrEnMaybe_27 & ~(|ctrlStateReg))
        programBufferMem_27 <= auto_dmi_in_a_bits_data[31:24];
      if (out_woready_1_1074 & auto_tl_in_a_bits_mask[4])
        programBufferMem_28 <= auto_tl_in_a_bits_data[39:32];
      else if (dmiProgramBufferWrEnMaybe_28 & ~(|ctrlStateReg))
        programBufferMem_28 <= auto_dmi_in_a_bits_data[7:0];
      if (out_woready_1_1074 & auto_tl_in_a_bits_mask[5])
        programBufferMem_29 <= auto_tl_in_a_bits_data[47:40];
      else if (dmiProgramBufferWrEnMaybe_29 & ~(|ctrlStateReg))
        programBufferMem_29 <= auto_dmi_in_a_bits_data[15:8];
      if (out_woready_1_1074 & auto_tl_in_a_bits_mask[6])
        programBufferMem_30 <= auto_tl_in_a_bits_data[55:48];
      else if (dmiProgramBufferWrEnMaybe_30 & ~(|ctrlStateReg))
        programBufferMem_30 <= auto_dmi_in_a_bits_data[23:16];
      if (out_woready_1_1074 & auto_tl_in_a_bits_mask[7])
        programBufferMem_31 <= auto_tl_in_a_bits_data[63:56];
      else if (dmiProgramBufferWrEnMaybe_31 & ~(|ctrlStateReg))
        programBufferMem_31 <= auto_dmi_in_a_bits_data[31:24];
      if (out_woready_1_722 & auto_tl_in_a_bits_mask[0])
        programBufferMem_32 <= auto_tl_in_a_bits_data[7:0];
      else if (dmiProgramBufferWrEnMaybe_32 & ~(|ctrlStateReg))
        programBufferMem_32 <= auto_dmi_in_a_bits_data[7:0];
      if (out_woready_1_722 & auto_tl_in_a_bits_mask[1])
        programBufferMem_33 <= auto_tl_in_a_bits_data[15:8];
      else if (dmiProgramBufferWrEnMaybe_33 & ~(|ctrlStateReg))
        programBufferMem_33 <= auto_dmi_in_a_bits_data[15:8];
      if (out_woready_1_722 & auto_tl_in_a_bits_mask[2])
        programBufferMem_34 <= auto_tl_in_a_bits_data[23:16];
      else if (dmiProgramBufferWrEnMaybe_34 & ~(|ctrlStateReg))
        programBufferMem_34 <= auto_dmi_in_a_bits_data[23:16];
      if (out_woready_1_722 & auto_tl_in_a_bits_mask[3])
        programBufferMem_35 <= auto_tl_in_a_bits_data[31:24];
      else if (dmiProgramBufferWrEnMaybe_35 & ~(|ctrlStateReg))
        programBufferMem_35 <= auto_dmi_in_a_bits_data[31:24];
      if (out_woready_1_722 & auto_tl_in_a_bits_mask[4])
        programBufferMem_36 <= auto_tl_in_a_bits_data[39:32];
      else if (dmiProgramBufferWrEnMaybe_36 & ~(|ctrlStateReg))
        programBufferMem_36 <= auto_dmi_in_a_bits_data[7:0];
      if (out_woready_1_722 & auto_tl_in_a_bits_mask[5])
        programBufferMem_37 <= auto_tl_in_a_bits_data[47:40];
      else if (dmiProgramBufferWrEnMaybe_37 & ~(|ctrlStateReg))
        programBufferMem_37 <= auto_dmi_in_a_bits_data[15:8];
      if (out_woready_1_722 & auto_tl_in_a_bits_mask[6])
        programBufferMem_38 <= auto_tl_in_a_bits_data[55:48];
      else if (dmiProgramBufferWrEnMaybe_38 & ~(|ctrlStateReg))
        programBufferMem_38 <= auto_dmi_in_a_bits_data[23:16];
      if (out_woready_1_722 & auto_tl_in_a_bits_mask[7])
        programBufferMem_39 <= auto_tl_in_a_bits_data[63:56];
      else if (dmiProgramBufferWrEnMaybe_39 & ~(|ctrlStateReg))
        programBufferMem_39 <= auto_dmi_in_a_bits_data[31:24];
      if (out_woready_1_442 & auto_tl_in_a_bits_mask[0])
        programBufferMem_40 <= auto_tl_in_a_bits_data[7:0];
      else if (dmiProgramBufferWrEnMaybe_40 & ~(|ctrlStateReg))
        programBufferMem_40 <= auto_dmi_in_a_bits_data[7:0];
      if (out_woready_1_442 & auto_tl_in_a_bits_mask[1])
        programBufferMem_41 <= auto_tl_in_a_bits_data[15:8];
      else if (dmiProgramBufferWrEnMaybe_41 & ~(|ctrlStateReg))
        programBufferMem_41 <= auto_dmi_in_a_bits_data[15:8];
      if (out_woready_1_442 & auto_tl_in_a_bits_mask[2])
        programBufferMem_42 <= auto_tl_in_a_bits_data[23:16];
      else if (dmiProgramBufferWrEnMaybe_42 & ~(|ctrlStateReg))
        programBufferMem_42 <= auto_dmi_in_a_bits_data[23:16];
      if (out_woready_1_442 & auto_tl_in_a_bits_mask[3])
        programBufferMem_43 <= auto_tl_in_a_bits_data[31:24];
      else if (dmiProgramBufferWrEnMaybe_43 & ~(|ctrlStateReg))
        programBufferMem_43 <= auto_dmi_in_a_bits_data[31:24];
      if (out_woready_1_442 & auto_tl_in_a_bits_mask[4])
        programBufferMem_44 <= auto_tl_in_a_bits_data[39:32];
      else if (dmiProgramBufferWrEnMaybe_44 & ~(|ctrlStateReg))
        programBufferMem_44 <= auto_dmi_in_a_bits_data[7:0];
      if (out_woready_1_442 & auto_tl_in_a_bits_mask[5])
        programBufferMem_45 <= auto_tl_in_a_bits_data[47:40];
      else if (dmiProgramBufferWrEnMaybe_45 & ~(|ctrlStateReg))
        programBufferMem_45 <= auto_dmi_in_a_bits_data[15:8];
      if (out_woready_1_442 & auto_tl_in_a_bits_mask[6])
        programBufferMem_46 <= auto_tl_in_a_bits_data[55:48];
      else if (dmiProgramBufferWrEnMaybe_46 & ~(|ctrlStateReg))
        programBufferMem_46 <= auto_dmi_in_a_bits_data[23:16];
      if (out_woready_1_442 & auto_tl_in_a_bits_mask[7])
        programBufferMem_47 <= auto_tl_in_a_bits_data[63:56];
      else if (dmiProgramBufferWrEnMaybe_47 & ~(|ctrlStateReg))
        programBufferMem_47 <= auto_dmi_in_a_bits_data[31:24];
      if (out_woready_1_111 & auto_tl_in_a_bits_mask[0])
        programBufferMem_48 <= auto_tl_in_a_bits_data[7:0];
      else if (dmiProgramBufferWrEnMaybe_48 & ~(|ctrlStateReg))
        programBufferMem_48 <= auto_dmi_in_a_bits_data[7:0];
      if (out_woready_1_111 & auto_tl_in_a_bits_mask[1])
        programBufferMem_49 <= auto_tl_in_a_bits_data[15:8];
      else if (dmiProgramBufferWrEnMaybe_49 & ~(|ctrlStateReg))
        programBufferMem_49 <= auto_dmi_in_a_bits_data[15:8];
      if (out_woready_1_111 & auto_tl_in_a_bits_mask[2])
        programBufferMem_50 <= auto_tl_in_a_bits_data[23:16];
      else if (dmiProgramBufferWrEnMaybe_50 & ~(|ctrlStateReg))
        programBufferMem_50 <= auto_dmi_in_a_bits_data[23:16];
      if (out_woready_1_111 & auto_tl_in_a_bits_mask[3])
        programBufferMem_51 <= auto_tl_in_a_bits_data[31:24];
      else if (dmiProgramBufferWrEnMaybe_51 & ~(|ctrlStateReg))
        programBufferMem_51 <= auto_dmi_in_a_bits_data[31:24];
      if (out_woready_1_111 & auto_tl_in_a_bits_mask[4])
        programBufferMem_52 <= auto_tl_in_a_bits_data[39:32];
      else if (dmiProgramBufferWrEnMaybe_52 & ~(|ctrlStateReg))
        programBufferMem_52 <= auto_dmi_in_a_bits_data[7:0];
      if (out_woready_1_111 & auto_tl_in_a_bits_mask[5])
        programBufferMem_53 <= auto_tl_in_a_bits_data[47:40];
      else if (dmiProgramBufferWrEnMaybe_53 & ~(|ctrlStateReg))
        programBufferMem_53 <= auto_dmi_in_a_bits_data[15:8];
      if (out_woready_1_111 & auto_tl_in_a_bits_mask[6])
        programBufferMem_54 <= auto_tl_in_a_bits_data[55:48];
      else if (dmiProgramBufferWrEnMaybe_54 & ~(|ctrlStateReg))
        programBufferMem_54 <= auto_dmi_in_a_bits_data[23:16];
      if (out_woready_1_111 & auto_tl_in_a_bits_mask[7])
        programBufferMem_55 <= auto_tl_in_a_bits_data[63:56];
      else if (dmiProgramBufferWrEnMaybe_55 & ~(|ctrlStateReg))
        programBufferMem_55 <= auto_dmi_in_a_bits_data[31:24];
      if (out_woready_1_1146 & auto_tl_in_a_bits_mask[0])
        programBufferMem_56 <= auto_tl_in_a_bits_data[7:0];
      else if (dmiProgramBufferWrEnMaybe_56 & ~(|ctrlStateReg))
        programBufferMem_56 <= auto_dmi_in_a_bits_data[7:0];
      if (out_woready_1_1146 & auto_tl_in_a_bits_mask[1])
        programBufferMem_57 <= auto_tl_in_a_bits_data[15:8];
      else if (dmiProgramBufferWrEnMaybe_57 & ~(|ctrlStateReg))
        programBufferMem_57 <= auto_dmi_in_a_bits_data[15:8];
      if (out_woready_1_1146 & auto_tl_in_a_bits_mask[2])
        programBufferMem_58 <= auto_tl_in_a_bits_data[23:16];
      else if (dmiProgramBufferWrEnMaybe_58 & ~(|ctrlStateReg))
        programBufferMem_58 <= auto_dmi_in_a_bits_data[23:16];
      if (out_woready_1_1146 & auto_tl_in_a_bits_mask[3])
        programBufferMem_59 <= auto_tl_in_a_bits_data[31:24];
      else if (dmiProgramBufferWrEnMaybe_59 & ~(|ctrlStateReg))
        programBufferMem_59 <= auto_dmi_in_a_bits_data[31:24];
      if (out_woready_1_1146 & auto_tl_in_a_bits_mask[4])
        programBufferMem_60 <= auto_tl_in_a_bits_data[39:32];
      else if (dmiProgramBufferWrEnMaybe_60 & ~(|ctrlStateReg))
        programBufferMem_60 <= auto_dmi_in_a_bits_data[7:0];
      if (out_woready_1_1146 & auto_tl_in_a_bits_mask[5])
        programBufferMem_61 <= auto_tl_in_a_bits_data[47:40];
      else if (dmiProgramBufferWrEnMaybe_61 & ~(|ctrlStateReg))
        programBufferMem_61 <= auto_dmi_in_a_bits_data[15:8];
      if (out_woready_1_1146 & auto_tl_in_a_bits_mask[6])
        programBufferMem_62 <= auto_tl_in_a_bits_data[55:48];
      else if (dmiProgramBufferWrEnMaybe_62 & ~(|ctrlStateReg))
        programBufferMem_62 <= auto_dmi_in_a_bits_data[23:16];
      if (out_woready_1_1146 & auto_tl_in_a_bits_mask[7])
        programBufferMem_63 <= auto_tl_in_a_bits_data[63:56];
      else if (dmiProgramBufferWrEnMaybe_63 & ~(|ctrlStateReg))
        programBufferMem_63 <= auto_dmi_in_a_bits_data[31:24];
      if (|ctrlStateReg) begin
        if (_GEN_16)
          ctrlStateReg <= {~_GEN_17, 1'h0};
        else if (_GEN_18 & (hartExceptionWrEn | ~goReg & hartHaltedWrEn))
          ctrlStateReg <= 2'h0;
      end
      else if (_GEN_21)
        ctrlStateReg <= 2'h1;
    end
    else begin
      ABSTRACTCSReg_progbufsize <= 5'h10;
      ABSTRACTCSReg_cmderr <= 3'h0;
      ABSTRACTCSReg_datacount <= 4'h2;
      ABSTRACTAUTOReg_autoexecprogbuf <= 16'h0;
      ABSTRACTAUTOReg_autoexecdata <= 12'h0;
      COMMANDReg_cmdtype <= 8'h0;
      COMMANDReg_control <= 24'h0;
      abstractDataMem_0 <= 8'h0;
      abstractDataMem_1 <= 8'h0;
      abstractDataMem_2 <= 8'h0;
      abstractDataMem_3 <= 8'h0;
      abstractDataMem_4 <= 8'h0;
      abstractDataMem_5 <= 8'h0;
      abstractDataMem_6 <= 8'h0;
      abstractDataMem_7 <= 8'h0;
      programBufferMem_0 <= 8'h0;
      programBufferMem_1 <= 8'h0;
      programBufferMem_2 <= 8'h0;
      programBufferMem_3 <= 8'h0;
      programBufferMem_4 <= 8'h0;
      programBufferMem_5 <= 8'h0;
      programBufferMem_6 <= 8'h0;
      programBufferMem_7 <= 8'h0;
      programBufferMem_8 <= 8'h0;
      programBufferMem_9 <= 8'h0;
      programBufferMem_10 <= 8'h0;
      programBufferMem_11 <= 8'h0;
      programBufferMem_12 <= 8'h0;
      programBufferMem_13 <= 8'h0;
      programBufferMem_14 <= 8'h0;
      programBufferMem_15 <= 8'h0;
      programBufferMem_16 <= 8'h0;
      programBufferMem_17 <= 8'h0;
      programBufferMem_18 <= 8'h0;
      programBufferMem_19 <= 8'h0;
      programBufferMem_20 <= 8'h0;
      programBufferMem_21 <= 8'h0;
      programBufferMem_22 <= 8'h0;
      programBufferMem_23 <= 8'h0;
      programBufferMem_24 <= 8'h0;
      programBufferMem_25 <= 8'h0;
      programBufferMem_26 <= 8'h0;
      programBufferMem_27 <= 8'h0;
      programBufferMem_28 <= 8'h0;
      programBufferMem_29 <= 8'h0;
      programBufferMem_30 <= 8'h0;
      programBufferMem_31 <= 8'h0;
      programBufferMem_32 <= 8'h0;
      programBufferMem_33 <= 8'h0;
      programBufferMem_34 <= 8'h0;
      programBufferMem_35 <= 8'h0;
      programBufferMem_36 <= 8'h0;
      programBufferMem_37 <= 8'h0;
      programBufferMem_38 <= 8'h0;
      programBufferMem_39 <= 8'h0;
      programBufferMem_40 <= 8'h0;
      programBufferMem_41 <= 8'h0;
      programBufferMem_42 <= 8'h0;
      programBufferMem_43 <= 8'h0;
      programBufferMem_44 <= 8'h0;
      programBufferMem_45 <= 8'h0;
      programBufferMem_46 <= 8'h0;
      programBufferMem_47 <= 8'h0;
      programBufferMem_48 <= 8'h0;
      programBufferMem_49 <= 8'h0;
      programBufferMem_50 <= 8'h0;
      programBufferMem_51 <= 8'h0;
      programBufferMem_52 <= 8'h0;
      programBufferMem_53 <= 8'h0;
      programBufferMem_54 <= 8'h0;
      programBufferMem_55 <= 8'h0;
      programBufferMem_56 <= 8'h0;
      programBufferMem_57 <= 8'h0;
      programBufferMem_58 <= 8'h0;
      programBufferMem_59 <= 8'h0;
      programBufferMem_60 <= 8'h0;
      programBufferMem_61 <= 8'h0;
      programBufferMem_62 <= 8'h0;
      programBufferMem_63 <= 8'h0;
      ctrlStateReg <= 2'h0;
    end
    goReg <= io_dmactive & (goAbstract | ~hartGoingWrEn & goReg);
    if (goAbstract) begin
      if (COMMANDReg_control[17]) begin
        if (COMMANDReg_control[16])
          abstractGeneratedMem_0 <=
            {17'h7000, COMMANDReg_control[22:20], COMMANDReg_control[4:0], 7'h3};
        else
          abstractGeneratedMem_0 <=
            {7'h1C, COMMANDReg_control[4:0], 5'h0, COMMANDReg_control[22:20], 12'h23};
      end
      else
        abstractGeneratedMem_0 <= 32'h13;
      if (COMMANDReg_control[18])
        abstractGeneratedMem_1 <= 32'h13;
      else
        abstractGeneratedMem_1 <= 32'h100073;
    end
    if (reset)
      hrmaskReg_0 <= 1'h0;
    else
      hrmaskReg_0 <=
        io_dmactive & (io_innerCtrl_valid ? io_innerCtrl_bits_hrmask_0 : hrmaskReg_0);
  end // always @(posedge)
  always @(posedge clock or posedge reset) begin
    if (reset)
      hrDebugIntReg_0 <= 1'h0;
    else
      hrDebugIntReg_0 <=
        io_dmactive & hrmaskReg_0
        & (_hartIsInResetSync_0_debug_hartReset_0_io_q | hrDebugIntReg_0 & ~hartHalted);
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin
      if (reset)
        hrDebugIntReg_0 = 1'h0;
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  TLMonitor_32 monitor (
    .clock                (clock),
    .reset                (reset),
    .io_in_a_ready        (auto_dmi_in_d_ready),
    .io_in_a_valid        (auto_dmi_in_a_valid),
    .io_in_a_bits_opcode  (auto_dmi_in_a_bits_opcode),
    .io_in_a_bits_param   (auto_dmi_in_a_bits_param),
    .io_in_a_bits_size    (auto_dmi_in_a_bits_size),
    .io_in_a_bits_source  (auto_dmi_in_a_bits_source),
    .io_in_a_bits_address (auto_dmi_in_a_bits_address),
    .io_in_a_bits_mask    (auto_dmi_in_a_bits_mask),
    .io_in_a_bits_corrupt (auto_dmi_in_a_bits_corrupt),
    .io_in_d_ready        (auto_dmi_in_d_ready),
    .io_in_d_valid        (auto_dmi_in_a_valid),
    .io_in_d_bits_opcode  (dmiNodeIn_d_bits_opcode),
    .io_in_d_bits_size    (auto_dmi_in_a_bits_size),
    .io_in_d_bits_source  (auto_dmi_in_a_bits_source)
  );
  TLMonitor_33 monitor_1 (
    .clock                (clock),
    .reset                (reset),
    .io_in_a_ready        (auto_tl_in_d_ready),
    .io_in_a_valid        (auto_tl_in_a_valid),
    .io_in_a_bits_opcode  (auto_tl_in_a_bits_opcode),
    .io_in_a_bits_param   (auto_tl_in_a_bits_param),
    .io_in_a_bits_size    (auto_tl_in_a_bits_size),
    .io_in_a_bits_source  (auto_tl_in_a_bits_source),
    .io_in_a_bits_address (auto_tl_in_a_bits_address),
    .io_in_a_bits_mask    (auto_tl_in_a_bits_mask),
    .io_in_a_bits_corrupt (auto_tl_in_a_bits_corrupt),
    .io_in_d_ready        (auto_tl_in_d_ready),
    .io_in_d_valid        (auto_tl_in_a_valid),
    .io_in_d_bits_opcode  (tlNodeIn_d_bits_opcode),
    .io_in_d_bits_size    (auto_tl_in_a_bits_size),
    .io_in_d_bits_source  (auto_tl_in_a_bits_source)
  );
  AsyncResetSynchronizerShiftReg_w1_d3_i0 hartIsInResetSync_0_debug_hartReset_0 (
    .clock (clock),
    .reset (reset),
    .io_d  (io_hartIsInReset_0),
    .io_q  (_hartIsInResetSync_0_debug_hartReset_0_io_q)
  );
  assign auto_tl_in_a_ready = auto_tl_in_d_ready;
  assign auto_tl_in_d_valid = auto_tl_in_a_valid;
  assign auto_tl_in_d_bits_opcode = tlNodeIn_d_bits_opcode;
  assign auto_tl_in_d_bits_size = auto_tl_in_a_bits_size;
  assign auto_tl_in_d_bits_source = auto_tl_in_a_bits_source;
  assign auto_tl_in_d_bits_data =
    _GEN_13[auto_tl_in_a_bits_address[10:3]]
      ? _GEN_14[auto_tl_in_a_bits_address[10:3]]
      : 64'h0;
  assign auto_dmi_in_a_ready = auto_dmi_in_d_ready;
  assign auto_dmi_in_d_valid = auto_dmi_in_a_valid;
  assign auto_dmi_in_d_bits_opcode = dmiNodeIn_d_bits_opcode;
  assign auto_dmi_in_d_bits_size = auto_dmi_in_a_bits_size;
  assign auto_dmi_in_d_bits_source = auto_dmi_in_a_bits_source;
  assign auto_dmi_in_d_bits_data = _GEN_8[out_oindex] ? _GEN_9[out_oindex] : 32'h0;
  assign io_hgDebugInt_0 = hrDebugIntReg_0;
endmodule

module ClockCrossingReg_w55(
  input         clock,
  input  [54:0] io_d,
  input         io_en,
  output [54:0] io_q
);

  reg [54:0] cdc_reg;
  always @(posedge clock) begin
    if (io_en)
      cdc_reg <= io_d;
  end // always @(posedge)
  assign io_q = cdc_reg;
endmodule

module AsyncQueueSink_TLBundleA_a9d32s1k1z2u(
  input         clock,
                reset,
                io_deq_ready,
  input  [2:0]  io_async_mem_0_opcode,
                io_async_mem_0_param,
  input  [1:0]  io_async_mem_0_size,
  input         io_async_mem_0_source,
  input  [8:0]  io_async_mem_0_address,
  input  [3:0]  io_async_mem_0_mask,
  input  [31:0] io_async_mem_0_data,
  input         io_async_mem_0_corrupt,
                io_async_widx,
                io_async_safe_widx_valid,
                io_async_safe_source_reset_n,
  output        io_deq_valid,
  output [2:0]  io_deq_bits_opcode,
                io_deq_bits_param,
  output [1:0]  io_deq_bits_size,
  output        io_deq_bits_source,
  output [8:0]  io_deq_bits_address,
  output [3:0]  io_deq_bits_mask,
  output [31:0] io_deq_bits_data,
  output        io_deq_bits_corrupt,
                io_async_ridx,
                io_async_safe_ridx_valid,
                io_async_safe_sink_reset_n
);

  wire        _io_deq_valid_output;
  wire        _source_valid_io_out;
  wire        _source_extend_io_out;
  wire        _sink_valid_0_io_out;
  wire [54:0] _io_deq_bits_deq_bits_reg_io_q;
  wire        _widx_widx_gray_io_q;
  reg         ridx_ridx_bin;
  wire        ridx =
    _source_valid_io_out & ridx_ridx_bin + (io_deq_ready & _io_deq_valid_output);
  wire        valid = _source_valid_io_out & ridx != _widx_widx_gray_io_q;
  reg         valid_reg;
  assign _io_deq_valid_output = valid_reg & _source_valid_io_out;
  reg         ridx_gray;
  wire        _GEN = reset | ~io_async_safe_source_reset_n;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      ridx_ridx_bin <= 1'h0;
      valid_reg <= 1'h0;
      ridx_gray <= 1'h0;
    end
    else begin
      ridx_ridx_bin <= ridx;
      valid_reg <= valid;
      ridx_gray <= ridx;
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin
      if (reset) begin
        ridx_ridx_bin = 1'h0;
        valid_reg = 1'h0;
        ridx_gray = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  AsyncResetSynchronizerShiftReg_w1_d3_i0 widx_widx_gray (
    .clock (clock),
    .reset (reset),
    .io_d  (io_async_widx),
    .io_q  (_widx_widx_gray_io_q)
  );
  ClockCrossingReg_w55 io_deq_bits_deq_bits_reg (
    .clock (clock),
    .io_d
      ({io_async_mem_0_opcode,
        io_async_mem_0_param,
        io_async_mem_0_size,
        io_async_mem_0_source,
        io_async_mem_0_address,
        io_async_mem_0_mask,
        io_async_mem_0_data,
        io_async_mem_0_corrupt}),
    .io_en (valid),
    .io_q  (_io_deq_bits_deq_bits_reg_io_q)
  );
  AsyncValidSync sink_valid_0 (
    .io_in  (1'h1),
    .clock  (clock),
    .reset  (_GEN),
    .io_out (_sink_valid_0_io_out)
  );
  AsyncValidSync sink_valid_1 (
    .io_in  (_sink_valid_0_io_out),
    .clock  (clock),
    .reset  (_GEN),
    .io_out (io_async_safe_ridx_valid)
  );
  AsyncValidSync source_extend (
    .io_in  (io_async_safe_widx_valid),
    .clock  (clock),
    .reset  (_GEN),
    .io_out (_source_extend_io_out)
  );
  AsyncValidSync source_valid (
    .io_in  (_source_extend_io_out),
    .clock  (clock),
    .reset  (reset),
    .io_out (_source_valid_io_out)
  );
  assign io_deq_valid = _io_deq_valid_output;
  assign io_deq_bits_opcode = _io_deq_bits_deq_bits_reg_io_q[54:52];
  assign io_deq_bits_param = _io_deq_bits_deq_bits_reg_io_q[51:49];
  assign io_deq_bits_size = _io_deq_bits_deq_bits_reg_io_q[48:47];
  assign io_deq_bits_source = _io_deq_bits_deq_bits_reg_io_q[46];
  assign io_deq_bits_address = _io_deq_bits_deq_bits_reg_io_q[45:37];
  assign io_deq_bits_mask = _io_deq_bits_deq_bits_reg_io_q[36:33];
  assign io_deq_bits_data = _io_deq_bits_deq_bits_reg_io_q[32:1];
  assign io_deq_bits_corrupt = _io_deq_bits_deq_bits_reg_io_q[0];
  assign io_async_ridx = ridx_gray;
  assign io_async_safe_sink_reset_n = ~reset;
endmodule

module AsyncQueueSource_TLBundleD_a9d32s1k1z2u(
  input         clock,
                reset,
                io_enq_valid,
  input  [2:0]  io_enq_bits_opcode,
  input  [1:0]  io_enq_bits_size,
  input         io_enq_bits_source,
  input  [31:0] io_enq_bits_data,
  input         io_async_ridx,
                io_async_safe_ridx_valid,
                io_async_safe_sink_reset_n,
  output        io_enq_ready,
  output [2:0]  io_async_mem_0_opcode,
  output [1:0]  io_async_mem_0_param,
                io_async_mem_0_size,
  output        io_async_mem_0_source,
                io_async_mem_0_sink,
                io_async_mem_0_denied,
  output [31:0] io_async_mem_0_data,
  output        io_async_mem_0_corrupt,
                io_async_widx,
                io_async_safe_widx_valid,
                io_async_safe_source_reset_n
);

  wire        _io_enq_ready_output;
  wire        _sink_valid_io_out;
  wire        _sink_extend_io_out;
  wire        _source_valid_0_io_out;
  wire        _ridx_ridx_gray_io_q;
  reg  [2:0]  mem_0_opcode;
  reg  [1:0]  mem_0_param;
  reg  [1:0]  mem_0_size;
  reg         mem_0_source;
  reg         mem_0_sink;
  reg         mem_0_denied;
  reg  [31:0] mem_0_data;
  reg         mem_0_corrupt;
  wire        _GEN = _io_enq_ready_output & io_enq_valid;
  reg         widx_widx_bin;
  reg         ready_reg;
  assign _io_enq_ready_output = ready_reg & _sink_valid_io_out;
  reg         widx_gray;
  wire        _GEN_0 = reset | ~io_async_safe_sink_reset_n;
  always @(posedge clock) begin
    if (_GEN) begin
      mem_0_opcode <= io_enq_bits_opcode;
      mem_0_param <= 2'h0;
      mem_0_size <= io_enq_bits_size;
      mem_0_source <= io_enq_bits_source;
      mem_0_data <= io_enq_bits_data;
    end
    mem_0_sink <= ~_GEN & mem_0_sink;
    mem_0_denied <= ~_GEN & mem_0_denied;
    mem_0_corrupt <= ~_GEN & mem_0_corrupt;
  end // always @(posedge)
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      widx_widx_bin <= 1'h0;
      ready_reg <= 1'h0;
      widx_gray <= 1'h0;
    end
    else begin
      automatic logic widx;
      widx = _sink_valid_io_out & widx_widx_bin + _GEN;
      widx_widx_bin <= widx;
      ready_reg <= _sink_valid_io_out & widx != ~_ridx_ridx_gray_io_q;
      widx_gray <= widx;
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin
      if (reset) begin
        widx_widx_bin = 1'h0;
        ready_reg = 1'h0;
        widx_gray = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  AsyncResetSynchronizerShiftReg_w1_d3_i0 ridx_ridx_gray (
    .clock (clock),
    .reset (reset),
    .io_d  (io_async_ridx),
    .io_q  (_ridx_ridx_gray_io_q)
  );
  AsyncValidSync source_valid_0 (
    .io_in  (1'h1),
    .clock  (clock),
    .reset  (_GEN_0),
    .io_out (_source_valid_0_io_out)
  );
  AsyncValidSync source_valid_1 (
    .io_in  (_source_valid_0_io_out),
    .clock  (clock),
    .reset  (_GEN_0),
    .io_out (io_async_safe_widx_valid)
  );
  AsyncValidSync sink_extend (
    .io_in  (io_async_safe_ridx_valid),
    .clock  (clock),
    .reset  (_GEN_0),
    .io_out (_sink_extend_io_out)
  );
  AsyncValidSync sink_valid (
    .io_in  (_sink_extend_io_out),
    .clock  (clock),
    .reset  (reset),
    .io_out (_sink_valid_io_out)
  );
  assign io_enq_ready = _io_enq_ready_output;
  assign io_async_mem_0_opcode = mem_0_opcode;
  assign io_async_mem_0_param = mem_0_param;
  assign io_async_mem_0_size = mem_0_size;
  assign io_async_mem_0_source = mem_0_source;
  assign io_async_mem_0_sink = mem_0_sink;
  assign io_async_mem_0_denied = mem_0_denied;
  assign io_async_mem_0_data = mem_0_data;
  assign io_async_mem_0_corrupt = mem_0_corrupt;
  assign io_async_widx = widx_gray;
  assign io_async_safe_source_reset_n = ~reset;
endmodule

module TLAsyncCrossingSink_a9d32s1k1z2u(
  input         clock,
                reset,
  input  [2:0]  auto_in_a_mem_0_opcode,
                auto_in_a_mem_0_param,
  input  [1:0]  auto_in_a_mem_0_size,
  input         auto_in_a_mem_0_source,
  input  [8:0]  auto_in_a_mem_0_address,
  input  [3:0]  auto_in_a_mem_0_mask,
  input  [31:0] auto_in_a_mem_0_data,
  input         auto_in_a_mem_0_corrupt,
                auto_in_a_widx,
                auto_in_a_safe_widx_valid,
                auto_in_a_safe_source_reset_n,
                auto_in_d_ridx,
                auto_in_d_safe_ridx_valid,
                auto_in_d_safe_sink_reset_n,
                auto_out_a_ready,
                auto_out_d_valid,
  input  [2:0]  auto_out_d_bits_opcode,
  input  [1:0]  auto_out_d_bits_size,
  input         auto_out_d_bits_source,
  input  [31:0] auto_out_d_bits_data,
  output        auto_in_a_ridx,
                auto_in_a_safe_ridx_valid,
                auto_in_a_safe_sink_reset_n,
  output [2:0]  auto_in_d_mem_0_opcode,
  output [1:0]  auto_in_d_mem_0_param,
                auto_in_d_mem_0_size,
  output        auto_in_d_mem_0_source,
                auto_in_d_mem_0_sink,
                auto_in_d_mem_0_denied,
  output [31:0] auto_in_d_mem_0_data,
  output        auto_in_d_mem_0_corrupt,
                auto_in_d_widx,
                auto_in_d_safe_widx_valid,
                auto_in_d_safe_source_reset_n,
                auto_out_a_valid,
  output [2:0]  auto_out_a_bits_opcode,
                auto_out_a_bits_param,
  output [1:0]  auto_out_a_bits_size,
  output        auto_out_a_bits_source,
  output [8:0]  auto_out_a_bits_address,
  output [3:0]  auto_out_a_bits_mask,
  output [31:0] auto_out_a_bits_data,
  output        auto_out_a_bits_corrupt,
                auto_out_d_ready
);

  AsyncQueueSink_TLBundleA_a9d32s1k1z2u nodeOut_a_sink (
    .clock                        (clock),
    .reset                        (reset),
    .io_deq_ready                 (auto_out_a_ready),
    .io_async_mem_0_opcode        (auto_in_a_mem_0_opcode),
    .io_async_mem_0_param         (auto_in_a_mem_0_param),
    .io_async_mem_0_size          (auto_in_a_mem_0_size),
    .io_async_mem_0_source        (auto_in_a_mem_0_source),
    .io_async_mem_0_address       (auto_in_a_mem_0_address),
    .io_async_mem_0_mask          (auto_in_a_mem_0_mask),
    .io_async_mem_0_data          (auto_in_a_mem_0_data),
    .io_async_mem_0_corrupt       (auto_in_a_mem_0_corrupt),
    .io_async_widx                (auto_in_a_widx),
    .io_async_safe_widx_valid     (auto_in_a_safe_widx_valid),
    .io_async_safe_source_reset_n (auto_in_a_safe_source_reset_n),
    .io_deq_valid                 (auto_out_a_valid),
    .io_deq_bits_opcode           (auto_out_a_bits_opcode),
    .io_deq_bits_param            (auto_out_a_bits_param),
    .io_deq_bits_size             (auto_out_a_bits_size),
    .io_deq_bits_source           (auto_out_a_bits_source),
    .io_deq_bits_address          (auto_out_a_bits_address),
    .io_deq_bits_mask             (auto_out_a_bits_mask),
    .io_deq_bits_data             (auto_out_a_bits_data),
    .io_deq_bits_corrupt          (auto_out_a_bits_corrupt),
    .io_async_ridx                (auto_in_a_ridx),
    .io_async_safe_ridx_valid     (auto_in_a_safe_ridx_valid),
    .io_async_safe_sink_reset_n   (auto_in_a_safe_sink_reset_n)
  );
  AsyncQueueSource_TLBundleD_a9d32s1k1z2u nodeIn_d_source (
    .clock                        (clock),
    .reset                        (reset),
    .io_enq_valid                 (auto_out_d_valid),
    .io_enq_bits_opcode           (auto_out_d_bits_opcode),
    .io_enq_bits_size             (auto_out_d_bits_size),
    .io_enq_bits_source           (auto_out_d_bits_source),
    .io_enq_bits_data             (auto_out_d_bits_data),
    .io_async_ridx                (auto_in_d_ridx),
    .io_async_safe_ridx_valid     (auto_in_d_safe_ridx_valid),
    .io_async_safe_sink_reset_n   (auto_in_d_safe_sink_reset_n),
    .io_enq_ready                 (auto_out_d_ready),
    .io_async_mem_0_opcode        (auto_in_d_mem_0_opcode),
    .io_async_mem_0_param         (auto_in_d_mem_0_param),
    .io_async_mem_0_size          (auto_in_d_mem_0_size),
    .io_async_mem_0_source        (auto_in_d_mem_0_source),
    .io_async_mem_0_sink          (auto_in_d_mem_0_sink),
    .io_async_mem_0_denied        (auto_in_d_mem_0_denied),
    .io_async_mem_0_data          (auto_in_d_mem_0_data),
    .io_async_mem_0_corrupt       (auto_in_d_mem_0_corrupt),
    .io_async_widx                (auto_in_d_widx),
    .io_async_safe_widx_valid     (auto_in_d_safe_widx_valid),
    .io_async_safe_source_reset_n (auto_in_d_safe_source_reset_n)
  );
endmodule

module ClockCrossingReg_w15(
  input         clock,
  input  [14:0] io_d,
  input         io_en,
  output [14:0] io_q
);

  reg [14:0] cdc_reg;
  always @(posedge clock) begin
    if (io_en)
      cdc_reg <= io_d;
  end // always @(posedge)
  assign io_q = cdc_reg;
endmodule

module AsyncQueueSink_DebugInternalBundle(
  input        clock,
               reset,
               io_async_mem_0_resumereq,
  input  [9:0] io_async_mem_0_hartsel,
  input        io_async_mem_0_ackhavereset,
               io_async_mem_0_hasel,
               io_async_mem_0_hamask_0,
               io_async_mem_0_hrmask_0,
               io_async_widx,
               io_async_safe_widx_valid,
               io_async_safe_source_reset_n,
  output       io_deq_valid,
               io_deq_bits_resumereq,
  output [9:0] io_deq_bits_hartsel,
  output       io_deq_bits_ackhavereset,
               io_deq_bits_hrmask_0,
               io_async_ridx,
               io_async_safe_ridx_valid,
               io_async_safe_sink_reset_n
);

  wire        _io_deq_valid_output;
  wire        _source_valid_io_out;
  wire        _source_extend_io_out;
  wire        _sink_valid_0_io_out;
  wire [14:0] _io_deq_bits_deq_bits_reg_io_q;
  wire        _widx_widx_gray_io_q;
  reg         ridx_ridx_bin;
  wire        ridx = _source_valid_io_out & ridx_ridx_bin + _io_deq_valid_output;
  wire        valid = _source_valid_io_out & ridx != _widx_widx_gray_io_q;
  reg         valid_reg;
  assign _io_deq_valid_output = valid_reg & _source_valid_io_out;
  reg         ridx_gray;
  wire        _GEN = reset | ~io_async_safe_source_reset_n;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      ridx_ridx_bin <= 1'h0;
      valid_reg <= 1'h0;
      ridx_gray <= 1'h0;
    end
    else begin
      ridx_ridx_bin <= ridx;
      valid_reg <= valid;
      ridx_gray <= ridx;
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin
      if (reset) begin
        ridx_ridx_bin = 1'h0;
        valid_reg = 1'h0;
        ridx_gray = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  AsyncResetSynchronizerShiftReg_w1_d3_i0 widx_widx_gray (
    .clock (clock),
    .reset (reset),
    .io_d  (io_async_widx),
    .io_q  (_widx_widx_gray_io_q)
  );
  ClockCrossingReg_w15 io_deq_bits_deq_bits_reg (
    .clock (clock),
    .io_d
      ({io_async_mem_0_resumereq,
        io_async_mem_0_hartsel,
        io_async_mem_0_ackhavereset,
        io_async_mem_0_hasel,
        io_async_mem_0_hamask_0,
        io_async_mem_0_hrmask_0}),
    .io_en (valid),
    .io_q  (_io_deq_bits_deq_bits_reg_io_q)
  );
  AsyncValidSync sink_valid_0 (
    .io_in  (1'h1),
    .clock  (clock),
    .reset  (_GEN),
    .io_out (_sink_valid_0_io_out)
  );
  AsyncValidSync sink_valid_1 (
    .io_in  (_sink_valid_0_io_out),
    .clock  (clock),
    .reset  (_GEN),
    .io_out (io_async_safe_ridx_valid)
  );
  AsyncValidSync source_extend (
    .io_in  (io_async_safe_widx_valid),
    .clock  (clock),
    .reset  (_GEN),
    .io_out (_source_extend_io_out)
  );
  AsyncValidSync source_valid (
    .io_in  (_source_extend_io_out),
    .clock  (clock),
    .reset  (reset),
    .io_out (_source_valid_io_out)
  );
  assign io_deq_valid = _io_deq_valid_output;
  assign io_deq_bits_resumereq = _io_deq_bits_deq_bits_reg_io_q[14];
  assign io_deq_bits_hartsel = _io_deq_bits_deq_bits_reg_io_q[13:4];
  assign io_deq_bits_ackhavereset = _io_deq_bits_deq_bits_reg_io_q[3];
  assign io_deq_bits_hrmask_0 = _io_deq_bits_deq_bits_reg_io_q[0];
  assign io_async_ridx = ridx_gray;
  assign io_async_safe_sink_reset_n = ~reset;
endmodule

module TLDebugModuleInnerAsync(
  input  [2:0]  auto_dmiXing_in_a_mem_0_opcode,
                auto_dmiXing_in_a_mem_0_param,
  input  [1:0]  auto_dmiXing_in_a_mem_0_size,
  input         auto_dmiXing_in_a_mem_0_source,
  input  [8:0]  auto_dmiXing_in_a_mem_0_address,
  input  [3:0]  auto_dmiXing_in_a_mem_0_mask,
  input  [31:0] auto_dmiXing_in_a_mem_0_data,
  input         auto_dmiXing_in_a_mem_0_corrupt,
                auto_dmiXing_in_a_widx,
                auto_dmiXing_in_a_safe_widx_valid,
                auto_dmiXing_in_a_safe_source_reset_n,
                auto_dmiXing_in_d_ridx,
                auto_dmiXing_in_d_safe_ridx_valid,
                auto_dmiXing_in_d_safe_sink_reset_n,
                auto_dmInner_tl_in_a_valid,
  input  [2:0]  auto_dmInner_tl_in_a_bits_opcode,
                auto_dmInner_tl_in_a_bits_param,
  input  [1:0]  auto_dmInner_tl_in_a_bits_size,
  input  [8:0]  auto_dmInner_tl_in_a_bits_source,
  input  [11:0] auto_dmInner_tl_in_a_bits_address,
  input  [7:0]  auto_dmInner_tl_in_a_bits_mask,
  input  [63:0] auto_dmInner_tl_in_a_bits_data,
  input         auto_dmInner_tl_in_a_bits_corrupt,
                auto_dmInner_tl_in_d_ready,
                io_debug_clock,
                io_debug_reset,
                io_dmactive,
                io_innerCtrl_mem_0_resumereq,
  input  [9:0]  io_innerCtrl_mem_0_hartsel,
  input         io_innerCtrl_mem_0_ackhavereset,
                io_innerCtrl_mem_0_hasel,
                io_innerCtrl_mem_0_hamask_0,
                io_innerCtrl_mem_0_hrmask_0,
                io_innerCtrl_widx,
                io_innerCtrl_safe_widx_valid,
                io_innerCtrl_safe_source_reset_n,
                io_hartIsInReset_0,
  output        auto_dmiXing_in_a_ridx,
                auto_dmiXing_in_a_safe_ridx_valid,
                auto_dmiXing_in_a_safe_sink_reset_n,
  output [2:0]  auto_dmiXing_in_d_mem_0_opcode,
  output [1:0]  auto_dmiXing_in_d_mem_0_param,
                auto_dmiXing_in_d_mem_0_size,
  output        auto_dmiXing_in_d_mem_0_source,
                auto_dmiXing_in_d_mem_0_sink,
                auto_dmiXing_in_d_mem_0_denied,
  output [31:0] auto_dmiXing_in_d_mem_0_data,
  output        auto_dmiXing_in_d_mem_0_corrupt,
                auto_dmiXing_in_d_widx,
                auto_dmiXing_in_d_safe_widx_valid,
                auto_dmiXing_in_d_safe_source_reset_n,
                auto_dmInner_tl_in_a_ready,
                auto_dmInner_tl_in_d_valid,
  output [2:0]  auto_dmInner_tl_in_d_bits_opcode,
  output [1:0]  auto_dmInner_tl_in_d_bits_size,
  output [8:0]  auto_dmInner_tl_in_d_bits_source,
  output [63:0] auto_dmInner_tl_in_d_bits_data,
  output        io_innerCtrl_ridx,
                io_innerCtrl_safe_ridx_valid,
                io_innerCtrl_safe_sink_reset_n,
                io_hgDebugInt_0
);

  wire        _dmactive_synced_dmInner_io_innerCtrl_sink_io_deq_valid;
  wire        _dmactive_synced_dmInner_io_innerCtrl_sink_io_deq_bits_resumereq;
  wire [9:0]  _dmactive_synced_dmInner_io_innerCtrl_sink_io_deq_bits_hartsel;
  wire        _dmactive_synced_dmInner_io_innerCtrl_sink_io_deq_bits_ackhavereset;
  wire        _dmactive_synced_dmInner_io_innerCtrl_sink_io_deq_bits_hrmask_0;
  wire        _dmactive_synced_dmactive_synced_dmactiveSync_io_q;
  wire        _dmiXing_auto_out_a_valid;
  wire [2:0]  _dmiXing_auto_out_a_bits_opcode;
  wire [2:0]  _dmiXing_auto_out_a_bits_param;
  wire [1:0]  _dmiXing_auto_out_a_bits_size;
  wire        _dmiXing_auto_out_a_bits_source;
  wire [8:0]  _dmiXing_auto_out_a_bits_address;
  wire [3:0]  _dmiXing_auto_out_a_bits_mask;
  wire [31:0] _dmiXing_auto_out_a_bits_data;
  wire        _dmiXing_auto_out_a_bits_corrupt;
  wire        _dmiXing_auto_out_d_ready;
  wire        _dmInner_auto_dmi_in_a_ready;
  wire        _dmInner_auto_dmi_in_d_valid;
  wire [2:0]  _dmInner_auto_dmi_in_d_bits_opcode;
  wire [1:0]  _dmInner_auto_dmi_in_d_bits_size;
  wire        _dmInner_auto_dmi_in_d_bits_source;
  wire [31:0] _dmInner_auto_dmi_in_d_bits_data;
  TLDebugModuleInner dmInner (
    .clock                          (io_debug_clock),
    .reset                          (io_debug_reset),
    .auto_tl_in_a_valid             (auto_dmInner_tl_in_a_valid),
    .auto_tl_in_a_bits_opcode       (auto_dmInner_tl_in_a_bits_opcode),
    .auto_tl_in_a_bits_param        (auto_dmInner_tl_in_a_bits_param),
    .auto_tl_in_a_bits_size         (auto_dmInner_tl_in_a_bits_size),
    .auto_tl_in_a_bits_source       (auto_dmInner_tl_in_a_bits_source),
    .auto_tl_in_a_bits_address      (auto_dmInner_tl_in_a_bits_address),
    .auto_tl_in_a_bits_mask         (auto_dmInner_tl_in_a_bits_mask),
    .auto_tl_in_a_bits_data         (auto_dmInner_tl_in_a_bits_data),
    .auto_tl_in_a_bits_corrupt      (auto_dmInner_tl_in_a_bits_corrupt),
    .auto_tl_in_d_ready             (auto_dmInner_tl_in_d_ready),
    .auto_dmi_in_a_valid            (_dmiXing_auto_out_a_valid),
    .auto_dmi_in_a_bits_opcode      (_dmiXing_auto_out_a_bits_opcode),
    .auto_dmi_in_a_bits_param       (_dmiXing_auto_out_a_bits_param),
    .auto_dmi_in_a_bits_size        (_dmiXing_auto_out_a_bits_size),
    .auto_dmi_in_a_bits_source      (_dmiXing_auto_out_a_bits_source),
    .auto_dmi_in_a_bits_address     (_dmiXing_auto_out_a_bits_address),
    .auto_dmi_in_a_bits_mask        (_dmiXing_auto_out_a_bits_mask),
    .auto_dmi_in_a_bits_data        (_dmiXing_auto_out_a_bits_data),
    .auto_dmi_in_a_bits_corrupt     (_dmiXing_auto_out_a_bits_corrupt),
    .auto_dmi_in_d_ready            (_dmiXing_auto_out_d_ready),
    .io_dmactive                    (_dmactive_synced_dmactive_synced_dmactiveSync_io_q),
    .io_innerCtrl_valid
      (_dmactive_synced_dmInner_io_innerCtrl_sink_io_deq_valid),
    .io_innerCtrl_bits_resumereq
      (_dmactive_synced_dmInner_io_innerCtrl_sink_io_deq_bits_resumereq),
    .io_innerCtrl_bits_hartsel
      (_dmactive_synced_dmInner_io_innerCtrl_sink_io_deq_bits_hartsel),
    .io_innerCtrl_bits_ackhavereset
      (_dmactive_synced_dmInner_io_innerCtrl_sink_io_deq_bits_ackhavereset),
    .io_innerCtrl_bits_hrmask_0
      (_dmactive_synced_dmInner_io_innerCtrl_sink_io_deq_bits_hrmask_0),
    .io_hartIsInReset_0             (io_hartIsInReset_0),
    .auto_tl_in_a_ready             (auto_dmInner_tl_in_a_ready),
    .auto_tl_in_d_valid             (auto_dmInner_tl_in_d_valid),
    .auto_tl_in_d_bits_opcode       (auto_dmInner_tl_in_d_bits_opcode),
    .auto_tl_in_d_bits_size         (auto_dmInner_tl_in_d_bits_size),
    .auto_tl_in_d_bits_source       (auto_dmInner_tl_in_d_bits_source),
    .auto_tl_in_d_bits_data         (auto_dmInner_tl_in_d_bits_data),
    .auto_dmi_in_a_ready            (_dmInner_auto_dmi_in_a_ready),
    .auto_dmi_in_d_valid            (_dmInner_auto_dmi_in_d_valid),
    .auto_dmi_in_d_bits_opcode      (_dmInner_auto_dmi_in_d_bits_opcode),
    .auto_dmi_in_d_bits_size        (_dmInner_auto_dmi_in_d_bits_size),
    .auto_dmi_in_d_bits_source      (_dmInner_auto_dmi_in_d_bits_source),
    .auto_dmi_in_d_bits_data        (_dmInner_auto_dmi_in_d_bits_data),
    .io_hgDebugInt_0                (io_hgDebugInt_0)
  );
  TLAsyncCrossingSink_a9d32s1k1z2u dmiXing (
    .clock                         (io_debug_clock),
    .reset                         (io_debug_reset),
    .auto_in_a_mem_0_opcode        (auto_dmiXing_in_a_mem_0_opcode),
    .auto_in_a_mem_0_param         (auto_dmiXing_in_a_mem_0_param),
    .auto_in_a_mem_0_size          (auto_dmiXing_in_a_mem_0_size),
    .auto_in_a_mem_0_source        (auto_dmiXing_in_a_mem_0_source),
    .auto_in_a_mem_0_address       (auto_dmiXing_in_a_mem_0_address),
    .auto_in_a_mem_0_mask          (auto_dmiXing_in_a_mem_0_mask),
    .auto_in_a_mem_0_data          (auto_dmiXing_in_a_mem_0_data),
    .auto_in_a_mem_0_corrupt       (auto_dmiXing_in_a_mem_0_corrupt),
    .auto_in_a_widx                (auto_dmiXing_in_a_widx),
    .auto_in_a_safe_widx_valid     (auto_dmiXing_in_a_safe_widx_valid),
    .auto_in_a_safe_source_reset_n (auto_dmiXing_in_a_safe_source_reset_n),
    .auto_in_d_ridx                (auto_dmiXing_in_d_ridx),
    .auto_in_d_safe_ridx_valid     (auto_dmiXing_in_d_safe_ridx_valid),
    .auto_in_d_safe_sink_reset_n   (auto_dmiXing_in_d_safe_sink_reset_n),
    .auto_out_a_ready              (_dmInner_auto_dmi_in_a_ready),
    .auto_out_d_valid              (_dmInner_auto_dmi_in_d_valid),
    .auto_out_d_bits_opcode        (_dmInner_auto_dmi_in_d_bits_opcode),
    .auto_out_d_bits_size          (_dmInner_auto_dmi_in_d_bits_size),
    .auto_out_d_bits_source        (_dmInner_auto_dmi_in_d_bits_source),
    .auto_out_d_bits_data          (_dmInner_auto_dmi_in_d_bits_data),
    .auto_in_a_ridx                (auto_dmiXing_in_a_ridx),
    .auto_in_a_safe_ridx_valid     (auto_dmiXing_in_a_safe_ridx_valid),
    .auto_in_a_safe_sink_reset_n   (auto_dmiXing_in_a_safe_sink_reset_n),
    .auto_in_d_mem_0_opcode        (auto_dmiXing_in_d_mem_0_opcode),
    .auto_in_d_mem_0_param         (auto_dmiXing_in_d_mem_0_param),
    .auto_in_d_mem_0_size          (auto_dmiXing_in_d_mem_0_size),
    .auto_in_d_mem_0_source        (auto_dmiXing_in_d_mem_0_source),
    .auto_in_d_mem_0_sink          (auto_dmiXing_in_d_mem_0_sink),
    .auto_in_d_mem_0_denied        (auto_dmiXing_in_d_mem_0_denied),
    .auto_in_d_mem_0_data          (auto_dmiXing_in_d_mem_0_data),
    .auto_in_d_mem_0_corrupt       (auto_dmiXing_in_d_mem_0_corrupt),
    .auto_in_d_widx                (auto_dmiXing_in_d_widx),
    .auto_in_d_safe_widx_valid     (auto_dmiXing_in_d_safe_widx_valid),
    .auto_in_d_safe_source_reset_n (auto_dmiXing_in_d_safe_source_reset_n),
    .auto_out_a_valid              (_dmiXing_auto_out_a_valid),
    .auto_out_a_bits_opcode        (_dmiXing_auto_out_a_bits_opcode),
    .auto_out_a_bits_param         (_dmiXing_auto_out_a_bits_param),
    .auto_out_a_bits_size          (_dmiXing_auto_out_a_bits_size),
    .auto_out_a_bits_source        (_dmiXing_auto_out_a_bits_source),
    .auto_out_a_bits_address       (_dmiXing_auto_out_a_bits_address),
    .auto_out_a_bits_mask          (_dmiXing_auto_out_a_bits_mask),
    .auto_out_a_bits_data          (_dmiXing_auto_out_a_bits_data),
    .auto_out_a_bits_corrupt       (_dmiXing_auto_out_a_bits_corrupt),
    .auto_out_d_ready              (_dmiXing_auto_out_d_ready)
  );
  AsyncResetSynchronizerShiftReg_w1_d3_i0 dmactive_synced_dmactive_synced_dmactiveSync (
    .clock (io_debug_clock),
    .reset (io_debug_reset),
    .io_d  (io_dmactive),
    .io_q  (_dmactive_synced_dmactive_synced_dmactiveSync_io_q)
  );
  AsyncQueueSink_DebugInternalBundle dmactive_synced_dmInner_io_innerCtrl_sink (
    .clock                        (io_debug_clock),
    .reset                        (io_debug_reset),
    .io_async_mem_0_resumereq     (io_innerCtrl_mem_0_resumereq),
    .io_async_mem_0_hartsel       (io_innerCtrl_mem_0_hartsel),
    .io_async_mem_0_ackhavereset  (io_innerCtrl_mem_0_ackhavereset),
    .io_async_mem_0_hasel         (io_innerCtrl_mem_0_hasel),
    .io_async_mem_0_hamask_0      (io_innerCtrl_mem_0_hamask_0),
    .io_async_mem_0_hrmask_0      (io_innerCtrl_mem_0_hrmask_0),
    .io_async_widx                (io_innerCtrl_widx),
    .io_async_safe_widx_valid     (io_innerCtrl_safe_widx_valid),
    .io_async_safe_source_reset_n (io_innerCtrl_safe_source_reset_n),
    .io_deq_valid
      (_dmactive_synced_dmInner_io_innerCtrl_sink_io_deq_valid),
    .io_deq_bits_resumereq
      (_dmactive_synced_dmInner_io_innerCtrl_sink_io_deq_bits_resumereq),
    .io_deq_bits_hartsel
      (_dmactive_synced_dmInner_io_innerCtrl_sink_io_deq_bits_hartsel),
    .io_deq_bits_ackhavereset
      (_dmactive_synced_dmInner_io_innerCtrl_sink_io_deq_bits_ackhavereset),
    .io_deq_bits_hrmask_0
      (_dmactive_synced_dmInner_io_innerCtrl_sink_io_deq_bits_hrmask_0),
    .io_async_ridx                (io_innerCtrl_ridx),
    .io_async_safe_ridx_valid     (io_innerCtrl_safe_ridx_valid),
    .io_async_safe_sink_reset_n   (io_innerCtrl_safe_sink_reset_n)
  );
endmodule

module TLDebugModule(
  input         auto_dmInner_dmInner_tl_in_a_valid,
  input  [2:0]  auto_dmInner_dmInner_tl_in_a_bits_opcode,
                auto_dmInner_dmInner_tl_in_a_bits_param,
  input  [1:0]  auto_dmInner_dmInner_tl_in_a_bits_size,
  input  [8:0]  auto_dmInner_dmInner_tl_in_a_bits_source,
  input  [11:0] auto_dmInner_dmInner_tl_in_a_bits_address,
  input  [7:0]  auto_dmInner_dmInner_tl_in_a_bits_mask,
  input  [63:0] auto_dmInner_dmInner_tl_in_a_bits_data,
  input         auto_dmInner_dmInner_tl_in_a_bits_corrupt,
                auto_dmInner_dmInner_tl_in_d_ready,
                io_debug_clock,
                io_debug_reset,
                io_ctrl_dmactiveAck,
                io_dmi_dmi_req_valid,
  input  [6:0]  io_dmi_dmi_req_bits_addr,
  input  [31:0] io_dmi_dmi_req_bits_data,
  input  [1:0]  io_dmi_dmi_req_bits_op,
  input         io_dmi_dmi_resp_ready,
                io_dmi_dmiClock,
                io_dmi_dmiReset,
                io_hartIsInReset_0,
  output        auto_dmInner_dmInner_tl_in_a_ready,
                auto_dmInner_dmInner_tl_in_d_valid,
  output [2:0]  auto_dmInner_dmInner_tl_in_d_bits_opcode,
  output [1:0]  auto_dmInner_dmInner_tl_in_d_bits_size,
  output [8:0]  auto_dmInner_dmInner_tl_in_d_bits_source,
  output [63:0] auto_dmInner_dmInner_tl_in_d_bits_data,
  output        auto_dmOuter_int_out_sync_0,
                io_ctrl_ndreset,
                io_ctrl_dmactive,
                io_dmi_dmi_req_ready,
                io_dmi_dmi_resp_valid,
  output [31:0] io_dmi_dmi_resp_bits_data,
  output [1:0]  io_dmi_dmi_resp_bits_resp
);

  wire        _dmInner_auto_dmiXing_in_a_ridx;
  wire        _dmInner_auto_dmiXing_in_a_safe_ridx_valid;
  wire        _dmInner_auto_dmiXing_in_a_safe_sink_reset_n;
  wire [2:0]  _dmInner_auto_dmiXing_in_d_mem_0_opcode;
  wire [1:0]  _dmInner_auto_dmiXing_in_d_mem_0_param;
  wire [1:0]  _dmInner_auto_dmiXing_in_d_mem_0_size;
  wire        _dmInner_auto_dmiXing_in_d_mem_0_source;
  wire        _dmInner_auto_dmiXing_in_d_mem_0_sink;
  wire        _dmInner_auto_dmiXing_in_d_mem_0_denied;
  wire [31:0] _dmInner_auto_dmiXing_in_d_mem_0_data;
  wire        _dmInner_auto_dmiXing_in_d_mem_0_corrupt;
  wire        _dmInner_auto_dmiXing_in_d_widx;
  wire        _dmInner_auto_dmiXing_in_d_safe_widx_valid;
  wire        _dmInner_auto_dmiXing_in_d_safe_source_reset_n;
  wire        _dmInner_io_innerCtrl_ridx;
  wire        _dmInner_io_innerCtrl_safe_ridx_valid;
  wire        _dmInner_io_innerCtrl_safe_sink_reset_n;
  wire        _dmInner_io_hgDebugInt_0;
  wire [2:0]  _dmOuter_auto_asource_out_a_mem_0_opcode;
  wire [2:0]  _dmOuter_auto_asource_out_a_mem_0_param;
  wire [1:0]  _dmOuter_auto_asource_out_a_mem_0_size;
  wire        _dmOuter_auto_asource_out_a_mem_0_source;
  wire [8:0]  _dmOuter_auto_asource_out_a_mem_0_address;
  wire [3:0]  _dmOuter_auto_asource_out_a_mem_0_mask;
  wire [31:0] _dmOuter_auto_asource_out_a_mem_0_data;
  wire        _dmOuter_auto_asource_out_a_mem_0_corrupt;
  wire        _dmOuter_auto_asource_out_a_widx;
  wire        _dmOuter_auto_asource_out_a_safe_widx_valid;
  wire        _dmOuter_auto_asource_out_a_safe_source_reset_n;
  wire        _dmOuter_auto_asource_out_d_ridx;
  wire        _dmOuter_auto_asource_out_d_safe_ridx_valid;
  wire        _dmOuter_auto_asource_out_d_safe_sink_reset_n;
  wire        _dmOuter_io_ctrl_dmactive;
  wire        _dmOuter_io_innerCtrl_mem_0_resumereq;
  wire [9:0]  _dmOuter_io_innerCtrl_mem_0_hartsel;
  wire        _dmOuter_io_innerCtrl_mem_0_ackhavereset;
  wire        _dmOuter_io_innerCtrl_mem_0_hasel;
  wire        _dmOuter_io_innerCtrl_mem_0_hamask_0;
  wire        _dmOuter_io_innerCtrl_mem_0_hrmask_0;
  wire        _dmOuter_io_innerCtrl_widx;
  wire        _dmOuter_io_innerCtrl_safe_widx_valid;
  wire        _dmOuter_io_innerCtrl_safe_source_reset_n;
  TLDebugModuleOuterAsync dmOuter (
    .auto_asource_out_a_ridx                (_dmInner_auto_dmiXing_in_a_ridx),
    .auto_asource_out_a_safe_ridx_valid     (_dmInner_auto_dmiXing_in_a_safe_ridx_valid),
    .auto_asource_out_a_safe_sink_reset_n
      (_dmInner_auto_dmiXing_in_a_safe_sink_reset_n),
    .auto_asource_out_d_mem_0_opcode        (_dmInner_auto_dmiXing_in_d_mem_0_opcode),
    .auto_asource_out_d_mem_0_param         (_dmInner_auto_dmiXing_in_d_mem_0_param),
    .auto_asource_out_d_mem_0_size          (_dmInner_auto_dmiXing_in_d_mem_0_size),
    .auto_asource_out_d_mem_0_source        (_dmInner_auto_dmiXing_in_d_mem_0_source),
    .auto_asource_out_d_mem_0_sink          (_dmInner_auto_dmiXing_in_d_mem_0_sink),
    .auto_asource_out_d_mem_0_denied        (_dmInner_auto_dmiXing_in_d_mem_0_denied),
    .auto_asource_out_d_mem_0_data          (_dmInner_auto_dmiXing_in_d_mem_0_data),
    .auto_asource_out_d_mem_0_corrupt       (_dmInner_auto_dmiXing_in_d_mem_0_corrupt),
    .auto_asource_out_d_widx                (_dmInner_auto_dmiXing_in_d_widx),
    .auto_asource_out_d_safe_widx_valid     (_dmInner_auto_dmiXing_in_d_safe_widx_valid),
    .auto_asource_out_d_safe_source_reset_n
      (_dmInner_auto_dmiXing_in_d_safe_source_reset_n),
    .io_dmi_clock                           (io_dmi_dmiClock),
    .io_dmi_reset                           (io_dmi_dmiReset),
    .io_dmi_req_valid                       (io_dmi_dmi_req_valid),
    .io_dmi_req_bits_addr                   (io_dmi_dmi_req_bits_addr),
    .io_dmi_req_bits_data                   (io_dmi_dmi_req_bits_data),
    .io_dmi_req_bits_op                     (io_dmi_dmi_req_bits_op),
    .io_dmi_resp_ready                      (io_dmi_dmi_resp_ready),
    .io_ctrl_dmactiveAck                    (io_ctrl_dmactiveAck),
    .io_innerCtrl_ridx                      (_dmInner_io_innerCtrl_ridx),
    .io_innerCtrl_safe_ridx_valid           (_dmInner_io_innerCtrl_safe_ridx_valid),
    .io_innerCtrl_safe_sink_reset_n         (_dmInner_io_innerCtrl_safe_sink_reset_n),
    .io_hgDebugInt_0                        (_dmInner_io_hgDebugInt_0),
    .auto_asource_out_a_mem_0_opcode        (_dmOuter_auto_asource_out_a_mem_0_opcode),
    .auto_asource_out_a_mem_0_param         (_dmOuter_auto_asource_out_a_mem_0_param),
    .auto_asource_out_a_mem_0_size          (_dmOuter_auto_asource_out_a_mem_0_size),
    .auto_asource_out_a_mem_0_source        (_dmOuter_auto_asource_out_a_mem_0_source),
    .auto_asource_out_a_mem_0_address       (_dmOuter_auto_asource_out_a_mem_0_address),
    .auto_asource_out_a_mem_0_mask          (_dmOuter_auto_asource_out_a_mem_0_mask),
    .auto_asource_out_a_mem_0_data          (_dmOuter_auto_asource_out_a_mem_0_data),
    .auto_asource_out_a_mem_0_corrupt       (_dmOuter_auto_asource_out_a_mem_0_corrupt),
    .auto_asource_out_a_widx                (_dmOuter_auto_asource_out_a_widx),
    .auto_asource_out_a_safe_widx_valid     (_dmOuter_auto_asource_out_a_safe_widx_valid),
    .auto_asource_out_a_safe_source_reset_n
      (_dmOuter_auto_asource_out_a_safe_source_reset_n),
    .auto_asource_out_d_ridx                (_dmOuter_auto_asource_out_d_ridx),
    .auto_asource_out_d_safe_ridx_valid     (_dmOuter_auto_asource_out_d_safe_ridx_valid),
    .auto_asource_out_d_safe_sink_reset_n
      (_dmOuter_auto_asource_out_d_safe_sink_reset_n),
    .auto_int_out_sync_0                    (auto_dmOuter_int_out_sync_0),
    .io_dmi_req_ready                       (io_dmi_dmi_req_ready),
    .io_dmi_resp_valid                      (io_dmi_dmi_resp_valid),
    .io_dmi_resp_bits_data                  (io_dmi_dmi_resp_bits_data),
    .io_dmi_resp_bits_resp                  (io_dmi_dmi_resp_bits_resp),
    .io_ctrl_ndreset                        (io_ctrl_ndreset),
    .io_ctrl_dmactive                       (_dmOuter_io_ctrl_dmactive),
    .io_innerCtrl_mem_0_resumereq           (_dmOuter_io_innerCtrl_mem_0_resumereq),
    .io_innerCtrl_mem_0_hartsel             (_dmOuter_io_innerCtrl_mem_0_hartsel),
    .io_innerCtrl_mem_0_ackhavereset        (_dmOuter_io_innerCtrl_mem_0_ackhavereset),
    .io_innerCtrl_mem_0_hasel               (_dmOuter_io_innerCtrl_mem_0_hasel),
    .io_innerCtrl_mem_0_hamask_0            (_dmOuter_io_innerCtrl_mem_0_hamask_0),
    .io_innerCtrl_mem_0_hrmask_0            (_dmOuter_io_innerCtrl_mem_0_hrmask_0),
    .io_innerCtrl_widx                      (_dmOuter_io_innerCtrl_widx),
    .io_innerCtrl_safe_widx_valid           (_dmOuter_io_innerCtrl_safe_widx_valid),
    .io_innerCtrl_safe_source_reset_n       (_dmOuter_io_innerCtrl_safe_source_reset_n)
  );
  TLDebugModuleInnerAsync dmInner (
    .auto_dmiXing_in_a_mem_0_opcode        (_dmOuter_auto_asource_out_a_mem_0_opcode),
    .auto_dmiXing_in_a_mem_0_param         (_dmOuter_auto_asource_out_a_mem_0_param),
    .auto_dmiXing_in_a_mem_0_size          (_dmOuter_auto_asource_out_a_mem_0_size),
    .auto_dmiXing_in_a_mem_0_source        (_dmOuter_auto_asource_out_a_mem_0_source),
    .auto_dmiXing_in_a_mem_0_address       (_dmOuter_auto_asource_out_a_mem_0_address),
    .auto_dmiXing_in_a_mem_0_mask          (_dmOuter_auto_asource_out_a_mem_0_mask),
    .auto_dmiXing_in_a_mem_0_data          (_dmOuter_auto_asource_out_a_mem_0_data),
    .auto_dmiXing_in_a_mem_0_corrupt       (_dmOuter_auto_asource_out_a_mem_0_corrupt),
    .auto_dmiXing_in_a_widx                (_dmOuter_auto_asource_out_a_widx),
    .auto_dmiXing_in_a_safe_widx_valid     (_dmOuter_auto_asource_out_a_safe_widx_valid),
    .auto_dmiXing_in_a_safe_source_reset_n
      (_dmOuter_auto_asource_out_a_safe_source_reset_n),
    .auto_dmiXing_in_d_ridx                (_dmOuter_auto_asource_out_d_ridx),
    .auto_dmiXing_in_d_safe_ridx_valid     (_dmOuter_auto_asource_out_d_safe_ridx_valid),
    .auto_dmiXing_in_d_safe_sink_reset_n
      (_dmOuter_auto_asource_out_d_safe_sink_reset_n),
    .auto_dmInner_tl_in_a_valid            (auto_dmInner_dmInner_tl_in_a_valid),
    .auto_dmInner_tl_in_a_bits_opcode      (auto_dmInner_dmInner_tl_in_a_bits_opcode),
    .auto_dmInner_tl_in_a_bits_param       (auto_dmInner_dmInner_tl_in_a_bits_param),
    .auto_dmInner_tl_in_a_bits_size        (auto_dmInner_dmInner_tl_in_a_bits_size),
    .auto_dmInner_tl_in_a_bits_source      (auto_dmInner_dmInner_tl_in_a_bits_source),
    .auto_dmInner_tl_in_a_bits_address     (auto_dmInner_dmInner_tl_in_a_bits_address),
    .auto_dmInner_tl_in_a_bits_mask        (auto_dmInner_dmInner_tl_in_a_bits_mask),
    .auto_dmInner_tl_in_a_bits_data        (auto_dmInner_dmInner_tl_in_a_bits_data),
    .auto_dmInner_tl_in_a_bits_corrupt     (auto_dmInner_dmInner_tl_in_a_bits_corrupt),
    .auto_dmInner_tl_in_d_ready            (auto_dmInner_dmInner_tl_in_d_ready),
    .io_debug_clock                        (io_debug_clock),
    .io_debug_reset                        (io_debug_reset),
    .io_dmactive                           (_dmOuter_io_ctrl_dmactive),
    .io_innerCtrl_mem_0_resumereq          (_dmOuter_io_innerCtrl_mem_0_resumereq),
    .io_innerCtrl_mem_0_hartsel            (_dmOuter_io_innerCtrl_mem_0_hartsel),
    .io_innerCtrl_mem_0_ackhavereset       (_dmOuter_io_innerCtrl_mem_0_ackhavereset),
    .io_innerCtrl_mem_0_hasel              (_dmOuter_io_innerCtrl_mem_0_hasel),
    .io_innerCtrl_mem_0_hamask_0           (_dmOuter_io_innerCtrl_mem_0_hamask_0),
    .io_innerCtrl_mem_0_hrmask_0           (_dmOuter_io_innerCtrl_mem_0_hrmask_0),
    .io_innerCtrl_widx                     (_dmOuter_io_innerCtrl_widx),
    .io_innerCtrl_safe_widx_valid          (_dmOuter_io_innerCtrl_safe_widx_valid),
    .io_innerCtrl_safe_source_reset_n      (_dmOuter_io_innerCtrl_safe_source_reset_n),
    .io_hartIsInReset_0                    (io_hartIsInReset_0),
    .auto_dmiXing_in_a_ridx                (_dmInner_auto_dmiXing_in_a_ridx),
    .auto_dmiXing_in_a_safe_ridx_valid     (_dmInner_auto_dmiXing_in_a_safe_ridx_valid),
    .auto_dmiXing_in_a_safe_sink_reset_n   (_dmInner_auto_dmiXing_in_a_safe_sink_reset_n),
    .auto_dmiXing_in_d_mem_0_opcode        (_dmInner_auto_dmiXing_in_d_mem_0_opcode),
    .auto_dmiXing_in_d_mem_0_param         (_dmInner_auto_dmiXing_in_d_mem_0_param),
    .auto_dmiXing_in_d_mem_0_size          (_dmInner_auto_dmiXing_in_d_mem_0_size),
    .auto_dmiXing_in_d_mem_0_source        (_dmInner_auto_dmiXing_in_d_mem_0_source),
    .auto_dmiXing_in_d_mem_0_sink          (_dmInner_auto_dmiXing_in_d_mem_0_sink),
    .auto_dmiXing_in_d_mem_0_denied        (_dmInner_auto_dmiXing_in_d_mem_0_denied),
    .auto_dmiXing_in_d_mem_0_data          (_dmInner_auto_dmiXing_in_d_mem_0_data),
    .auto_dmiXing_in_d_mem_0_corrupt       (_dmInner_auto_dmiXing_in_d_mem_0_corrupt),
    .auto_dmiXing_in_d_widx                (_dmInner_auto_dmiXing_in_d_widx),
    .auto_dmiXing_in_d_safe_widx_valid     (_dmInner_auto_dmiXing_in_d_safe_widx_valid),
    .auto_dmiXing_in_d_safe_source_reset_n
      (_dmInner_auto_dmiXing_in_d_safe_source_reset_n),
    .auto_dmInner_tl_in_a_ready            (auto_dmInner_dmInner_tl_in_a_ready),
    .auto_dmInner_tl_in_d_valid            (auto_dmInner_dmInner_tl_in_d_valid),
    .auto_dmInner_tl_in_d_bits_opcode      (auto_dmInner_dmInner_tl_in_d_bits_opcode),
    .auto_dmInner_tl_in_d_bits_size        (auto_dmInner_dmInner_tl_in_d_bits_size),
    .auto_dmInner_tl_in_d_bits_source      (auto_dmInner_dmInner_tl_in_d_bits_source),
    .auto_dmInner_tl_in_d_bits_data        (auto_dmInner_dmInner_tl_in_d_bits_data),
    .io_innerCtrl_ridx                     (_dmInner_io_innerCtrl_ridx),
    .io_innerCtrl_safe_ridx_valid          (_dmInner_io_innerCtrl_safe_ridx_valid),
    .io_innerCtrl_safe_sink_reset_n        (_dmInner_io_innerCtrl_safe_sink_reset_n),
    .io_hgDebugInt_0                       (_dmInner_io_hgDebugInt_0)
  );
  assign io_ctrl_dmactive = _dmOuter_io_ctrl_dmactive;
endmodule

module TLMonitor_34(
  input        clock,
               reset,
               io_in_a_ready,
               io_in_a_valid,
  input [2:0]  io_in_a_bits_opcode,
               io_in_a_bits_param,
  input [1:0]  io_in_a_bits_size,
  input [8:0]  io_in_a_bits_source,
  input [16:0] io_in_a_bits_address,
  input [7:0]  io_in_a_bits_mask,
  input        io_in_a_bits_corrupt,
               io_in_d_ready,
               io_in_d_valid,
  input [1:0]  io_in_d_bits_size,
  input [8:0]  io_in_d_bits_source
);

  wire [31:0]   _plusarg_reader_out;
  wire          a_first_done = io_in_a_ready & io_in_a_valid;
  reg           a_first_counter;
  reg  [2:0]    opcode;
  reg  [2:0]    param;
  reg  [1:0]    size;
  reg  [8:0]    source;
  reg  [16:0]   address;
  reg           d_first_counter;
  reg  [2:0]    opcode_1;
  reg  [1:0]    param_1;
  reg  [1:0]    size_1;
  reg  [8:0]    source_1;
  reg           sink;
  reg           denied;
  reg  [303:0]  inflight;
  reg  [1215:0] inflight_opcodes;
  reg  [1215:0] inflight_sizes;
  reg           a_first_counter_1;
  reg           d_first_counter_1;
  wire          _GEN = a_first_done & ~a_first_counter_1;
  reg  [31:0]   watchdog;
  reg  [31:0]   watchdog_1;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      automatic logic [7:0][2:0] _GEN_0 =
        '{3'h4, 3'h5, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic [7:0][2:0] _GEN_1 =
        '{3'h4, 3'h4, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic [5:0]      _GEN_2 = 6'h7 << io_in_a_bits_size;
      automatic logic [2:0]      _GEN_3 = io_in_a_bits_address[2:0] & ~(_GEN_2[2:0]);
      automatic logic            mask_size = io_in_a_bits_size == 2'h2;
      automatic logic            mask_acc =
        (&io_in_a_bits_size) | mask_size & ~(io_in_a_bits_address[2]);
      automatic logic            mask_acc_1 =
        (&io_in_a_bits_size) | mask_size & io_in_a_bits_address[2];
      automatic logic            mask_size_1 = io_in_a_bits_size == 2'h1;
      automatic logic            mask_eq_2 =
        ~(io_in_a_bits_address[2]) & ~(io_in_a_bits_address[1]);
      automatic logic            mask_acc_2 = mask_acc | mask_size_1 & mask_eq_2;
      automatic logic            mask_eq_3 =
        ~(io_in_a_bits_address[2]) & io_in_a_bits_address[1];
      automatic logic            mask_acc_3 = mask_acc | mask_size_1 & mask_eq_3;
      automatic logic            mask_eq_4 =
        io_in_a_bits_address[2] & ~(io_in_a_bits_address[1]);
      automatic logic            mask_acc_4 = mask_acc_1 | mask_size_1 & mask_eq_4;
      automatic logic            mask_eq_5 =
        io_in_a_bits_address[2] & io_in_a_bits_address[1];
      automatic logic            mask_acc_5 = mask_acc_1 | mask_size_1 & mask_eq_5;
      automatic logic [7:0]      mask =
        {mask_acc_5 | mask_eq_5 & io_in_a_bits_address[0],
         mask_acc_5 | mask_eq_5 & ~(io_in_a_bits_address[0]),
         mask_acc_4 | mask_eq_4 & io_in_a_bits_address[0],
         mask_acc_4 | mask_eq_4 & ~(io_in_a_bits_address[0]),
         mask_acc_3 | mask_eq_3 & io_in_a_bits_address[0],
         mask_acc_3 | mask_eq_3 & ~(io_in_a_bits_address[0]),
         mask_acc_2 | mask_eq_2 & io_in_a_bits_address[0],
         mask_acc_2 | mask_eq_2 & ~(io_in_a_bits_address[0])};
      automatic logic            _GEN_4 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h6 & ~reset;
      automatic logic            _GEN_5 = io_in_a_bits_source > 9'h12F;
      automatic logic            _GEN_6 = io_in_a_bits_param > 3'h2;
      automatic logic            _GEN_7 = io_in_a_bits_mask != 8'hFF;
      automatic logic            _GEN_8 = io_in_a_valid & (&io_in_a_bits_opcode) & ~reset;
      automatic logic            _GEN_9 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h4 & ~reset;
      automatic logic            _GEN_10 = _GEN_9 & _GEN_5;
      automatic logic            _GEN_11 = io_in_a_bits_mask != mask;
      automatic logic            _GEN_12 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h0 & ~reset;
      automatic logic            _GEN_13 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h1 & ~reset;
      automatic logic            _GEN_14 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h2 & ~reset;
      automatic logic            _GEN_15 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h3 & ~reset;
      automatic logic            _GEN_16 =
        io_in_a_valid & io_in_a_bits_opcode == 3'h5 & ~reset;
      automatic logic            _GEN_17 = io_in_a_valid & a_first_counter & ~reset;
      automatic logic            _GEN_18 = io_in_d_valid & d_first_counter & ~reset;
      automatic logic [1215:0]   _GEN_19 = {1205'h0, io_in_d_bits_source, 2'h0};
      automatic logic [1215:0]   _GEN_20 = inflight_opcodes >> _GEN_19;
      automatic logic            _GEN_21 = io_in_d_valid & ~d_first_counter_1;
      automatic logic            _GEN_22 = io_in_a_bits_source == io_in_d_bits_source;
      automatic logic            same_cycle_resp =
        io_in_a_valid & ~a_first_counter_1 & _GEN_22;
      automatic logic            _GEN_23 = _GEN_21 & same_cycle_resp & ~reset;
      automatic logic            _GEN_24 = _GEN_21 & ~same_cycle_resp & ~reset;
      automatic logic [303:0]    _GEN_25 = inflight >> io_in_a_bits_source;
      automatic logic [303:0]    _GEN_26 = inflight >> io_in_d_bits_source;
      automatic logic [1215:0]   _GEN_27 = inflight_sizes >> _GEN_19;
      if (_GEN_4) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_4 & _GEN_5) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock carries invalid source ID (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_4 & ~(&io_in_a_bits_size)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_4 & (|_GEN_3)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_4 & _GEN_6) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock carries invalid grow param (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_4 & _GEN_7) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_4 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquireBlock is corrupt (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_8) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_8 & _GEN_5) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm carries invalid source ID (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_8 & ~(&io_in_a_bits_size)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_8 & (|_GEN_3)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_8 & _GEN_6) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm carries invalid grow param (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_8 & ~(|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_8 & _GEN_7) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_8 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel AcquirePerm is corrupt (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_10) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_9 & ~(io_in_a_bits_address[16])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_10) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get carries invalid source ID (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_9 & (|_GEN_3)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get address not aligned to size (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_9 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get carries invalid param (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_9 & _GEN_11) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get contains invalid mask (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_9 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Get is corrupt (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_12) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_12 & _GEN_5) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull carries invalid source ID (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_12 & (|_GEN_3)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull address not aligned to size (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_12 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull carries invalid param (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_12 & _GEN_11) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull contains invalid mask (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_13) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_13 & _GEN_5) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_13 & (|_GEN_3)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial address not aligned to size (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_13 & (|io_in_a_bits_param)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial carries invalid param (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_13 & (|(io_in_a_bits_mask & ~mask))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutPartial contains invalid mask (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & _GEN_5) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & (|_GEN_3)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & io_in_a_bits_param > 3'h4) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_14 & _GEN_11) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & _GEN_5) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical carries invalid source ID (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & (|_GEN_3)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical address not aligned to size (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & io_in_a_bits_param[2]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical carries invalid opcode param (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & _GEN_11) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Logical contains invalid mask (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16 & _GEN_5) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint carries invalid source ID (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16 & (|_GEN_3)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint address not aligned to size (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16 & (|(io_in_a_bits_param[2:1]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint carries invalid opcode param (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16 & _GEN_11) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint contains invalid mask (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_16 & io_in_a_bits_corrupt) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel Hint is corrupt (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & ~reset & io_in_d_bits_source > 9'h12F) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & io_in_a_bits_opcode != opcode) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel opcode changed within multibeat operation (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & io_in_a_bits_param != param) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel param changed within multibeat operation (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & io_in_a_bits_size != size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel size changed within multibeat operation (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & io_in_a_bits_source != source) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel source changed within multibeat operation (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & io_in_a_bits_address != address) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel address changed with multibeat operation (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & opcode_1 != 3'h1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel opcode changed within multibeat operation (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & (|param_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel param changed within multibeat operation (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & io_in_d_bits_size != size_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel size changed within multibeat operation (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & io_in_d_bits_source != source_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel source changed within multibeat operation (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & sink) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel sink changed with multibeat operation (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_18 & denied) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel denied changed with multibeat operation (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN & ~reset & _GEN_25[0]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel re-used a source ID (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_21 & ~reset & ~(_GEN_26[0] | same_cycle_resp)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_23
          & ~(_GEN_1[io_in_a_bits_opcode] == 3'h1
              | _GEN_0[io_in_a_bits_opcode] == 3'h1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_23 & io_in_a_bits_size != io_in_d_bits_size) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_24 & ~(_GEN_1[_GEN_20[3:1]] == 3'h1 | _GEN_0[_GEN_20[3:1]] == 3'h1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_24 & {2'h0, io_in_d_bits_size} != {1'h0, _GEN_27[3:1]}) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_21 & ~a_first_counter_1 & io_in_a_valid & _GEN_22 & ~reset
          & ~(~io_in_d_ready | io_in_a_ready)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ready check\n    at Monitor.scala:52 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight == 304'h0 | _plusarg_reader_out == 32'h0
              | watchdog < _plusarg_reader_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/devices/tilelink/BootROM.scala:89:18)\n    at Monitor.scala:45 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    automatic logic d_first_done;
    automatic logic _GEN_28;
    d_first_done = io_in_d_ready & io_in_d_valid;
    _GEN_28 = d_first_done & ~d_first_counter;
    if (reset) begin
      a_first_counter <= 1'h0;
      d_first_counter <= 1'h0;
      inflight <= 304'h0;
      inflight_opcodes <= 1216'h0;
      inflight_sizes <= 1216'h0;
      a_first_counter_1 <= 1'h0;
      d_first_counter_1 <= 1'h0;
      watchdog <= 32'h0;
      watchdog_1 <= 32'h0;
    end
    else begin
      automatic logic          _GEN_29;
      automatic logic [4110:0] _GEN_30 = 4111'hF << {4100'h0, io_in_d_bits_source, 2'h0};
      automatic logic [1215:0] d_sizes_clr;
      automatic logic [511:0]  _GEN_31 = 512'h1 << io_in_d_bits_source;
      automatic logic [511:0]  _GEN_32 = 512'h1 << io_in_a_bits_source;
      automatic logic [4098:0] _GEN_33 =
        {4095'h0, _GEN ? {io_in_a_bits_opcode, 1'h1} : 4'h0}
        << {4088'h0, io_in_a_bits_source, 2'h0};
      automatic logic [4097:0] _GEN_34 =
        {4095'h0, _GEN ? {io_in_a_bits_size, 1'h1} : 3'h0}
        << {4087'h0, io_in_a_bits_source, 2'h0};
      _GEN_29 = d_first_done & ~d_first_counter_1;
      d_sizes_clr = _GEN_29 ? _GEN_30[1215:0] : 1216'h0;
      a_first_counter <= (~a_first_done | a_first_counter - 1'h1) & a_first_counter;
      d_first_counter <= (~d_first_done | d_first_counter - 1'h1) & d_first_counter;
      inflight <=
        (inflight | (_GEN ? _GEN_32[303:0] : 304'h0))
        & ~(_GEN_29 ? _GEN_31[303:0] : 304'h0);
      inflight_opcodes <=
        (inflight_opcodes | (_GEN ? _GEN_33[1215:0] : 1216'h0)) & ~d_sizes_clr;
      inflight_sizes <=
        (inflight_sizes | (_GEN ? _GEN_34[1215:0] : 1216'h0)) & ~d_sizes_clr;
      a_first_counter_1 <= (~a_first_done | a_first_counter_1 - 1'h1) & a_first_counter_1;
      d_first_counter_1 <= (~d_first_done | d_first_counter_1 - 1'h1) & d_first_counter_1;
      if (a_first_done | d_first_done)
        watchdog <= 32'h0;
      else
        watchdog <= watchdog + 32'h1;
      if (d_first_done)
        watchdog_1 <= 32'h0;
      else
        watchdog_1 <= watchdog_1 + 32'h1;
    end
    if (a_first_done & ~a_first_counter) begin
      opcode <= io_in_a_bits_opcode;
      param <= io_in_a_bits_param;
      size <= io_in_a_bits_size;
      source <= io_in_a_bits_source;
      address <= io_in_a_bits_address;
    end
    if (_GEN_28) begin
      opcode_1 <= 3'h1;
      param_1 <= 2'h0;
      size_1 <= io_in_d_bits_size;
      source_1 <= io_in_d_bits_source;
    end
    sink <= ~_GEN_28 & sink;
    denied <= ~_GEN_28 & denied;
  end // always @(posedge)
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader (
    .out (_plusarg_reader_out)
  );
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader_1 (
    .out (/* unused */)
  );
endmodule

module TLROM(
  input         clock,
                reset,
                auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
                auto_in_a_bits_param,
  input  [1:0]  auto_in_a_bits_size,
  input  [8:0]  auto_in_a_bits_source,
  input  [16:0] auto_in_a_bits_address,
  input  [7:0]  auto_in_a_bits_mask,
  input         auto_in_a_bits_corrupt,
                auto_in_d_ready,
  output        auto_in_a_ready,
                auto_in_d_valid,
  output [1:0]  auto_in_d_bits_size,
  output [8:0]  auto_in_d_bits_source,
  output [63:0] auto_in_d_bits_data
);

  wire [511:0][63:0] _GEN =
    '{64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h7665646E2C766373,
      64'h697200797469726F,
      64'h6972702D78616D2C,
      64'h7663736972007374,
      64'h7075727265746E69,
      64'h746E657261702D,
      64'h747075727265746E,
      64'h6900686361747461,
      64'h2D67756265640073,
      64'h656D616E2D676572,
      64'h6465646E657478,
      64'h652D737470757272,
      64'h65746E690073656D,
      64'h616E2D7475707475,
      64'h6F2D6B636F6C6300,
      64'h736C6C65632D6B63,
      64'h6F6C632300736567,
      64'h6E617200656C646E,
      64'h6168700072656C6C,
      64'h6F72746E6F632D74,
      64'h7075727265746E69,
      64'h736C6C65632D74,
      64'h7075727265746E69,
      64'h230074696C70732D,
      64'h626C740073757461,
      64'h747300736E6F6967,
      64'h6572706D702C7663,
      64'h7369720079746972,
      64'h616C756E61726770,
      64'h6D702C7663736972,
      64'h6173692C766373,
      64'h6972006765720065,
      64'h686361632D6C6576,
      64'h656C2D7478656E00,
      64'h657079742D756D6D,
      64'h657A69732D626C,
      64'h742D690073746573,
      64'h2D626C742D690065,
      64'h7A69732D65686361,
      64'h632D690073746573,
      64'h2D65686361632D69,
      64'h657A69732D6B63,
      64'h6F6C622D65686361,
      64'h632D6900746E756F,
      64'h632D746E696F706B,
      64'h616572622D636578,
      64'h652D657261776472,
      64'h616800657079745F,
      64'h6563697665640065,
      64'h7A69732D626C742D,
      64'h6400737465732D62,
      64'h6C742D6400657A69,
      64'h732D65686361632D,
      64'h6400737465732D65,
      64'h686361632D640065,
      64'h7A69732D6B636F6C,
      64'h622D65686361632D,
      64'h640079636E657571,
      64'h6572662D6B636F6C,
      64'h630079636E657571,
      64'h6572662D65736162,
      64'h656D6974006C6564,
      64'h6F6D00656C626974,
      64'h61706D6F6300736C,
      64'h6C65632D657A6973,
      64'h2300736C6C65632D,
      64'h7373657264646123,
      64'h900000002000000,
      64'h200000002000000,
      64'h6D656DC8010000,
      64'h400000003000000,
      64'h10000000100,
      64'h1A01000008000000,
      64'h300000000306D6F,
      64'h722C657669666973,
      64'h1B0000000C000000,
      64'h300000000000030,
      64'h30303031406D6F72,
      64'h100000002000000,
      64'h6B636F6C632D64,
      64'h657869661B000000,
      64'hC00000003000000,
      64'h6B636F6C635F,
      64'h73756270A1010000,
      64'hB00000003000000,
      64'hE1F5053F000000,
      64'h400000003000000,
      64'h94010000,
      64'h400000003000000,
      64'h6B636F6C635F,
      64'h7375627001000000,
      64'h200000000000020,
      64'h6000000060,
      64'h8D0100000C000000,
      64'h300000000007375,
      64'h622D656C706D6973,
      64'h1B0000000B000000,
      64'h300000001000000,
      64'hF00000004000000,
      64'h300000001000000,
      64'h4000000,
      64'h300000000303030,
      64'h3030303036403469,
      64'h78612D74726F702D,
      64'h6F696D6D01000000,
      64'h200000003000000,
      64'h8501000004000000,
      64'h300000002000000,
      64'hE02000004000000,
      64'h300000003000000,
      64'hFB01000004000000,
      64'h3000000006C6F72,
      64'h746E6F63C8010000,
      64'h800000003000000,
      64'h40000000C,
      64'h1A01000008000000,
      64'h300000009000000,
      64'h20000000B000000,
      64'h2000000B4010000,
      64'h1000000003000000,
      64'h7001000000000000,
      64'h300000000306369,
      64'h6C702C7663736972,
      64'h1B0000000C000000,
      64'h300000001000000,
      64'h5F01000004000000,
      64'h300000000000000,
      64'h3030303030306340,
      64'h72656C6C6F72746E,
      64'h6F632D7470757272,
      64'h65746E6901000000,
      64'h200000002000000,
      64'h1000000F0010000,
      64'h800000003000000,
      64'h3000000DF010000,
      64'h400000003000000,
      64'h73747075727265,
      64'h746E692D6C616E72,
      64'h6574786501000000,
      64'h200000000100000,
      64'h3000001A010000,
      64'h800000003000000,
      64'h30726F7272,
      64'h652C657669666973,
      64'h1B0000000E000000,
      64'h300000000000030,
      64'h3030334065636976,
      64'h65642D726F727265,
      64'h100000002000000,
      64'h6C6F72746E6F63,
      64'hC801000008000000,
      64'h300000000100000,
      64'h1A010000,
      64'h800000003000000,
      64'hFFFF000002000000,
      64'hB401000008000000,
      64'h300000000696D64,
      64'hD201000004000000,
      64'h300000000000000,
      64'h3331302D67756265,
      64'h642C766373697200,
      64'h3331302D67756265,
      64'h642C657669666973,
      64'h1B00000021000000,
      64'h300000000003040,
      64'h72656C6C6F72746E,
      64'h6F632D6775626564,
      64'h100000002000000,
      64'h6C6F72746E6F63,
      64'hC801000008000000,
      64'h300000000000100,
      64'h21A010000,
      64'h800000003000000,
      64'h700000002000000,
      64'h300000002000000,
      64'hB401000010000000,
      64'h300000000000000,
      64'h30746E696C632C76,
      64'h637369721B000000,
      64'hD00000003000000,
      64'h3030303030,
      64'h303240746E696C63,
      64'h100000002000000,
      64'h6B636F6C632D64,
      64'h657869661B000000,
      64'hC00000003000000,
      64'h6B636F6C635F,
      64'h73756263A1010000,
      64'hB00000003000000,
      64'hE1F5053F000000,
      64'h400000003000000,
      64'h94010000,
      64'h400000003000000,
      64'h6B636F6C635F,
      64'h7375626301000000,
      64'h8D01000000000000,
      64'h300000000737562,
      64'h2D656C706D697300,
      64'h636F732D6E776F6E,
      64'h6B6E752D70696863,
      64'h74656B636F722C73,
      64'h7069686365657266,
      64'h1B0000002C000000,
      64'h300000001000000,
      64'hF00000004000000,
      64'h300000001000000,
      64'h4000000,
      64'h300000000636F73,
      64'h100000002000000,
      64'h100000085010000,
      64'h400000003000000,
      64'h1000000080,
      64'h1A01000008000000,
      64'h300000000007972,
      64'h6F6D656D92000000,
      64'h700000003000000,
      64'h30303030303030,
      64'h384079726F6D656D,
      64'h100000002000000,
      64'h200000002000000,
      64'h200000085010000,
      64'h400000003000000,
      64'h7001000000000000,
      64'h300000000006374,
      64'h6E692D7570632C76,
      64'h637369721B000000,
      64'hF00000003000000,
      64'h10000005F010000,
      64'h400000003000000,
      64'h72656C6C,
      64'h6F72746E6F632D74,
      64'h7075727265746E69,
      64'h100000055010000,
      64'h3000000,
      64'h40420F002C000000,
      64'h400000003000000,
      64'h79616B6F,
      64'h4E01000005000000,
      64'h300000008000000,
      64'h3D01000004000000,
      64'h300000004000000,
      64'h2801000004000000,
      64'h300000000007465,
      64'h6B636F72785F6D70,
      64'h68697A5F6965636E,
      64'h6566697A5F727363,
      64'h697A636466616D69,
      64'h343676721E010000,
      64'h2700000003000000,
      64'h1A010000,
      64'h400000003000000,
      64'h100000009010000,
      64'h400000003000000,
      64'h393376732C76,
      64'h6373697200010000,
      64'hB00000003000000,
      64'h20000000F5000000,
      64'h400000003000000,
      64'h1000000EA000000,
      64'h400000003000000,
      64'h400000DD000000,
      64'h400000003000000,
      64'h40000000D0000000,
      64'h400000003000000,
      64'h40000000BD000000,
      64'h400000003000000,
      64'h10000009E000000,
      64'h400000003000000,
      64'h75706392000000,
      64'h400000003000000,
      64'h2000000087000000,
      64'h400000003000000,
      64'h10000007C000000,
      64'h400000003000000,
      64'h4000006F000000,
      64'h400000003000000,
      64'h4000000062000000,
      64'h400000003000000,
      64'h400000004F000000,
      64'h400000003000000,
      64'h76637369,
      64'h72003074656B636F,
      64'h722C657669666973,
      64'h1B00000015000000,
      64'h300000000000000,
      64'h3F00000004000000,
      64'h300000000000030,
      64'h4075706301000000,
      64'h40420F002C000000,
      64'h400000003000000,
      64'hF000000,
      64'h400000003000000,
      64'h100000000000000,
      64'h400000003000000,
      64'h73757063,
      64'h100000000000000,
      64'h6E776F6E6B6E752D,
      64'h7069686374656B63,
      64'h6F722C7370696863,
      64'h6565726626000000,
      64'h1D00000003000000,
      64'h7665642D,
      64'h6E776F6E6B6E752D,
      64'h7069686374656B63,
      64'h6F722C7370696863,
      64'h656572661B000000,
      64'h2100000003000000,
      64'h10000000F000000,
      64'h400000003000000,
      64'h100000000000000,
      64'h400000003000000,
      64'h1000000,
      64'h0,
      64'h0,
      64'hA807000019020000,
      64'h10000000,
      64'h1100000028000000,
      64'hE007000038000000,
      64'hF9090000EDFE0DD0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'hBFF5,
      64'h1050007330405073,
      64'h385859300000597,
      64'hF14025737C105073,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h8402,
      64'h705859300000597,
      64'hF140257301F41413,
      64'h10041B7C105073};
  TLMonitor_34 monitor (
    .clock                (clock),
    .reset                (reset),
    .io_in_a_ready        (auto_in_d_ready),
    .io_in_a_valid        (auto_in_a_valid),
    .io_in_a_bits_opcode  (auto_in_a_bits_opcode),
    .io_in_a_bits_param   (auto_in_a_bits_param),
    .io_in_a_bits_size    (auto_in_a_bits_size),
    .io_in_a_bits_source  (auto_in_a_bits_source),
    .io_in_a_bits_address (auto_in_a_bits_address),
    .io_in_a_bits_mask    (auto_in_a_bits_mask),
    .io_in_a_bits_corrupt (auto_in_a_bits_corrupt),
    .io_in_d_ready        (auto_in_d_ready),
    .io_in_d_valid        (auto_in_a_valid),
    .io_in_d_bits_size    (auto_in_a_bits_size),
    .io_in_d_bits_source  (auto_in_a_bits_source)
  );
  assign auto_in_a_ready = auto_in_d_ready;
  assign auto_in_d_valid = auto_in_a_valid;
  assign auto_in_d_bits_size = auto_in_a_bits_size;
  assign auto_in_d_bits_source = auto_in_a_bits_source;
  assign auto_in_d_bits_data =
    (|(auto_in_a_bits_address[15:12])) ? 64'h0 : _GEN[auto_in_a_bits_address[11:3]];
endmodule

module BootROMClockSinkDomain(
  input         auto_bootrom_in_a_valid,
  input  [2:0]  auto_bootrom_in_a_bits_opcode,
                auto_bootrom_in_a_bits_param,
  input  [1:0]  auto_bootrom_in_a_bits_size,
  input  [8:0]  auto_bootrom_in_a_bits_source,
  input  [16:0] auto_bootrom_in_a_bits_address,
  input  [7:0]  auto_bootrom_in_a_bits_mask,
  input         auto_bootrom_in_a_bits_corrupt,
                auto_bootrom_in_d_ready,
                auto_clock_in_clock,
                auto_clock_in_reset,
  output        auto_bootrom_in_a_ready,
                auto_bootrom_in_d_valid,
  output [1:0]  auto_bootrom_in_d_bits_size,
  output [8:0]  auto_bootrom_in_d_bits_source,
  output [63:0] auto_bootrom_in_d_bits_data
);

  TLROM bootrom (
    .clock                  (auto_clock_in_clock),
    .reset                  (auto_clock_in_reset),
    .auto_in_a_valid        (auto_bootrom_in_a_valid),
    .auto_in_a_bits_opcode  (auto_bootrom_in_a_bits_opcode),
    .auto_in_a_bits_param   (auto_bootrom_in_a_bits_param),
    .auto_in_a_bits_size    (auto_bootrom_in_a_bits_size),
    .auto_in_a_bits_source  (auto_bootrom_in_a_bits_source),
    .auto_in_a_bits_address (auto_bootrom_in_a_bits_address),
    .auto_in_a_bits_mask    (auto_bootrom_in_a_bits_mask),
    .auto_in_a_bits_corrupt (auto_bootrom_in_a_bits_corrupt),
    .auto_in_d_ready        (auto_bootrom_in_d_ready),
    .auto_in_a_ready        (auto_bootrom_in_a_ready),
    .auto_in_d_valid        (auto_bootrom_in_d_valid),
    .auto_in_d_bits_size    (auto_bootrom_in_d_bits_size),
    .auto_in_d_bits_source  (auto_bootrom_in_d_bits_source),
    .auto_in_d_bits_data    (auto_bootrom_in_d_bits_data)
  );
endmodule

module ExampleRocketSystem(
  input         io_aggregator_5_clock,
                io_aggregator_5_reset,
                io_aggregator_4_clock,
                io_aggregator_4_reset,
                io_aggregator_3_clock,
                io_aggregator_3_reset,
                io_aggregator_2_clock,
                io_aggregator_2_reset,
                io_aggregator_1_clock,
                io_aggregator_1_reset,
                io_aggregator_0_clock,
                io_aggregator_0_reset,
                resetctrl_hartIsInReset_0,
                debug_clock,
                debug_reset,
                debug_clockeddmi_dmi_req_valid,
  input  [6:0]  debug_clockeddmi_dmi_req_bits_addr,
  input  [31:0] debug_clockeddmi_dmi_req_bits_data,
  input  [1:0]  debug_clockeddmi_dmi_req_bits_op,
  input         debug_clockeddmi_dmi_resp_ready,
                debug_clockeddmi_dmiClock,
                debug_clockeddmi_dmiReset,
                debug_dmactiveAck,
                mem_axi4_0_aw_ready,
                mem_axi4_0_w_ready,
                mem_axi4_0_b_valid,
  input  [3:0]  mem_axi4_0_b_bits_id,
  input  [1:0]  mem_axi4_0_b_bits_resp,
  input         mem_axi4_0_ar_ready,
                mem_axi4_0_r_valid,
  input  [3:0]  mem_axi4_0_r_bits_id,
  input  [63:0] mem_axi4_0_r_bits_data,
  input  [1:0]  mem_axi4_0_r_bits_resp,
  input         mem_axi4_0_r_bits_last,
                mmio_axi4_0_aw_ready,
                mmio_axi4_0_w_ready,
                mmio_axi4_0_b_valid,
  input  [3:0]  mmio_axi4_0_b_bits_id,
  input  [1:0]  mmio_axi4_0_b_bits_resp,
  input         mmio_axi4_0_ar_ready,
                mmio_axi4_0_r_valid,
  input  [3:0]  mmio_axi4_0_r_bits_id,
  input  [63:0] mmio_axi4_0_r_bits_data,
  input  [1:0]  mmio_axi4_0_r_bits_resp,
  input         mmio_axi4_0_r_bits_last,
                l2_frontend_bus_axi4_0_aw_valid,
  input  [7:0]  l2_frontend_bus_axi4_0_aw_bits_id,
  input  [31:0] l2_frontend_bus_axi4_0_aw_bits_addr,
  input  [7:0]  l2_frontend_bus_axi4_0_aw_bits_len,
  input  [2:0]  l2_frontend_bus_axi4_0_aw_bits_size,
  input  [1:0]  l2_frontend_bus_axi4_0_aw_bits_burst,
  input         l2_frontend_bus_axi4_0_aw_bits_lock,
  input  [3:0]  l2_frontend_bus_axi4_0_aw_bits_cache,
  input  [2:0]  l2_frontend_bus_axi4_0_aw_bits_prot,
  input  [3:0]  l2_frontend_bus_axi4_0_aw_bits_qos,
  input         l2_frontend_bus_axi4_0_w_valid,
  input  [63:0] l2_frontend_bus_axi4_0_w_bits_data,
  input  [7:0]  l2_frontend_bus_axi4_0_w_bits_strb,
  input         l2_frontend_bus_axi4_0_w_bits_last,
                l2_frontend_bus_axi4_0_b_ready,
                l2_frontend_bus_axi4_0_ar_valid,
  input  [7:0]  l2_frontend_bus_axi4_0_ar_bits_id,
  input  [31:0] l2_frontend_bus_axi4_0_ar_bits_addr,
  input  [7:0]  l2_frontend_bus_axi4_0_ar_bits_len,
  input  [2:0]  l2_frontend_bus_axi4_0_ar_bits_size,
  input  [1:0]  l2_frontend_bus_axi4_0_ar_bits_burst,
  input         l2_frontend_bus_axi4_0_ar_bits_lock,
  input  [3:0]  l2_frontend_bus_axi4_0_ar_bits_cache,
  input  [2:0]  l2_frontend_bus_axi4_0_ar_bits_prot,
  input  [3:0]  l2_frontend_bus_axi4_0_ar_bits_qos,
  input         l2_frontend_bus_axi4_0_r_ready,
  input  [1:0]  interrupts,
  output        debug_clockeddmi_dmi_req_ready,
                debug_clockeddmi_dmi_resp_valid,
  output [31:0] debug_clockeddmi_dmi_resp_bits_data,
  output [1:0]  debug_clockeddmi_dmi_resp_bits_resp,
  output        debug_ndreset,
                debug_dmactive,
                mem_axi4_0_aw_valid,
  output [3:0]  mem_axi4_0_aw_bits_id,
  output [31:0] mem_axi4_0_aw_bits_addr,
  output [7:0]  mem_axi4_0_aw_bits_len,
  output [2:0]  mem_axi4_0_aw_bits_size,
  output [1:0]  mem_axi4_0_aw_bits_burst,
  output        mem_axi4_0_aw_bits_lock,
  output [3:0]  mem_axi4_0_aw_bits_cache,
  output [2:0]  mem_axi4_0_aw_bits_prot,
  output [3:0]  mem_axi4_0_aw_bits_qos,
  output        mem_axi4_0_w_valid,
  output [63:0] mem_axi4_0_w_bits_data,
  output [7:0]  mem_axi4_0_w_bits_strb,
  output        mem_axi4_0_w_bits_last,
                mem_axi4_0_b_ready,
                mem_axi4_0_ar_valid,
  output [3:0]  mem_axi4_0_ar_bits_id,
  output [31:0] mem_axi4_0_ar_bits_addr,
  output [7:0]  mem_axi4_0_ar_bits_len,
  output [2:0]  mem_axi4_0_ar_bits_size,
  output [1:0]  mem_axi4_0_ar_bits_burst,
  output        mem_axi4_0_ar_bits_lock,
  output [3:0]  mem_axi4_0_ar_bits_cache,
  output [2:0]  mem_axi4_0_ar_bits_prot,
  output [3:0]  mem_axi4_0_ar_bits_qos,
  output        mem_axi4_0_r_ready,
                mmio_axi4_0_aw_valid,
  output [3:0]  mmio_axi4_0_aw_bits_id,
  output [30:0] mmio_axi4_0_aw_bits_addr,
  output [7:0]  mmio_axi4_0_aw_bits_len,
  output [2:0]  mmio_axi4_0_aw_bits_size,
  output [1:0]  mmio_axi4_0_aw_bits_burst,
  output        mmio_axi4_0_aw_bits_lock,
  output [3:0]  mmio_axi4_0_aw_bits_cache,
  output [2:0]  mmio_axi4_0_aw_bits_prot,
  output [3:0]  mmio_axi4_0_aw_bits_qos,
  output        mmio_axi4_0_w_valid,
  output [63:0] mmio_axi4_0_w_bits_data,
  output [7:0]  mmio_axi4_0_w_bits_strb,
  output        mmio_axi4_0_w_bits_last,
                mmio_axi4_0_b_ready,
                mmio_axi4_0_ar_valid,
  output [3:0]  mmio_axi4_0_ar_bits_id,
  output [30:0] mmio_axi4_0_ar_bits_addr,
  output [7:0]  mmio_axi4_0_ar_bits_len,
  output [2:0]  mmio_axi4_0_ar_bits_size,
  output [1:0]  mmio_axi4_0_ar_bits_burst,
  output        mmio_axi4_0_ar_bits_lock,
  output [3:0]  mmio_axi4_0_ar_bits_cache,
  output [2:0]  mmio_axi4_0_ar_bits_prot,
  output [3:0]  mmio_axi4_0_ar_bits_qos,
  output        mmio_axi4_0_r_ready,
                l2_frontend_bus_axi4_0_aw_ready,
                l2_frontend_bus_axi4_0_w_ready,
                l2_frontend_bus_axi4_0_b_valid,
  output [7:0]  l2_frontend_bus_axi4_0_b_bits_id,
  output [1:0]  l2_frontend_bus_axi4_0_b_bits_resp,
  output        l2_frontend_bus_axi4_0_ar_ready,
                l2_frontend_bus_axi4_0_r_valid,
  output [7:0]  l2_frontend_bus_axi4_0_r_bits_id,
  output [63:0] l2_frontend_bus_axi4_0_r_bits_data,
  output [1:0]  l2_frontend_bus_axi4_0_r_bits_resp,
  output        l2_frontend_bus_axi4_0_r_bits_last
);

  wire        _bootrom_domain_auto_bootrom_in_a_ready;
  wire        _bootrom_domain_auto_bootrom_in_d_valid;
  wire [1:0]  _bootrom_domain_auto_bootrom_in_d_bits_size;
  wire [8:0]  _bootrom_domain_auto_bootrom_in_d_bits_source;
  wire [63:0] _bootrom_domain_auto_bootrom_in_d_bits_data;
  wire        _tlDM_auto_dmInner_dmInner_tl_in_a_ready;
  wire        _tlDM_auto_dmInner_dmInner_tl_in_d_valid;
  wire [2:0]  _tlDM_auto_dmInner_dmInner_tl_in_d_bits_opcode;
  wire [1:0]  _tlDM_auto_dmInner_dmInner_tl_in_d_bits_size;
  wire [8:0]  _tlDM_auto_dmInner_dmInner_tl_in_d_bits_source;
  wire [63:0] _tlDM_auto_dmInner_dmInner_tl_in_d_bits_data;
  wire        _tlDM_auto_dmOuter_int_out_sync_0;
  wire        _plic_domain_auto_plic_in_a_ready;
  wire        _plic_domain_auto_plic_in_d_valid;
  wire [2:0]  _plic_domain_auto_plic_in_d_bits_opcode;
  wire [1:0]  _plic_domain_auto_plic_in_d_bits_size;
  wire [8:0]  _plic_domain_auto_plic_in_d_bits_source;
  wire [63:0] _plic_domain_auto_plic_in_d_bits_data;
  wire        _plic_domain_auto_int_in_clock_xing_out_1_sync_0;
  wire        _plic_domain_auto_int_in_clock_xing_out_0_sync_0;
  wire        _clint_domain_auto_clint_in_a_ready;
  wire        _clint_domain_auto_clint_in_d_valid;
  wire [2:0]  _clint_domain_auto_clint_in_d_bits_opcode;
  wire [1:0]  _clint_domain_auto_clint_in_d_bits_size;
  wire [8:0]  _clint_domain_auto_clint_in_d_bits_source;
  wire [63:0] _clint_domain_auto_clint_in_d_bits_data;
  wire        _clint_domain_auto_int_in_clock_xing_out_sync_0;
  wire        _clint_domain_auto_int_in_clock_xing_out_sync_1;
  wire        _clint_domain_clock;
  wire        _clint_domain_reset;
  wire        _tileHartIdNexusNode_auto_out;
  wire        _tile_prci_domain_auto_tl_master_clock_xing_out_a_valid;
  wire [2:0]  _tile_prci_domain_auto_tl_master_clock_xing_out_a_bits_opcode;
  wire [2:0]  _tile_prci_domain_auto_tl_master_clock_xing_out_a_bits_param;
  wire [3:0]  _tile_prci_domain_auto_tl_master_clock_xing_out_a_bits_size;
  wire [1:0]  _tile_prci_domain_auto_tl_master_clock_xing_out_a_bits_source;
  wire [31:0] _tile_prci_domain_auto_tl_master_clock_xing_out_a_bits_address;
  wire [7:0]  _tile_prci_domain_auto_tl_master_clock_xing_out_a_bits_mask;
  wire [63:0] _tile_prci_domain_auto_tl_master_clock_xing_out_a_bits_data;
  wire        _tile_prci_domain_auto_tl_master_clock_xing_out_a_bits_corrupt;
  wire        _tile_prci_domain_auto_tl_master_clock_xing_out_b_ready;
  wire        _tile_prci_domain_auto_tl_master_clock_xing_out_c_valid;
  wire [2:0]  _tile_prci_domain_auto_tl_master_clock_xing_out_c_bits_opcode;
  wire [2:0]  _tile_prci_domain_auto_tl_master_clock_xing_out_c_bits_param;
  wire [3:0]  _tile_prci_domain_auto_tl_master_clock_xing_out_c_bits_size;
  wire [1:0]  _tile_prci_domain_auto_tl_master_clock_xing_out_c_bits_source;
  wire [31:0] _tile_prci_domain_auto_tl_master_clock_xing_out_c_bits_address;
  wire [63:0] _tile_prci_domain_auto_tl_master_clock_xing_out_c_bits_data;
  wire        _tile_prci_domain_auto_tl_master_clock_xing_out_c_bits_corrupt;
  wire        _tile_prci_domain_auto_tl_master_clock_xing_out_d_ready;
  wire        _tile_prci_domain_auto_tl_master_clock_xing_out_e_valid;
  wire [1:0]  _tile_prci_domain_auto_tl_master_clock_xing_out_e_bits_sink;
  wire        _coh_wrapper_auto_coupler_to_bus_named_mbus_bus_xing_out_a_valid;
  wire [2:0]  _coh_wrapper_auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_opcode;
  wire [2:0]  _coh_wrapper_auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_param;
  wire [2:0]  _coh_wrapper_auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_size;
  wire [6:0]  _coh_wrapper_auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_source;
  wire [31:0] _coh_wrapper_auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_address;
  wire
    _coh_wrapper_auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_user_amba_prot_bufferable;
  wire
    _coh_wrapper_auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_user_amba_prot_modifiable;
  wire
    _coh_wrapper_auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_user_amba_prot_readalloc;
  wire
    _coh_wrapper_auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_user_amba_prot_writealloc;
  wire
    _coh_wrapper_auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_user_amba_prot_privileged;
  wire
    _coh_wrapper_auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_user_amba_prot_secure;
  wire
    _coh_wrapper_auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_user_amba_prot_fetch;
  wire [7:0]  _coh_wrapper_auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_mask;
  wire [63:0] _coh_wrapper_auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_data;
  wire        _coh_wrapper_auto_coupler_to_bus_named_mbus_bus_xing_out_d_ready;
  wire        _coh_wrapper_auto_coherent_jbar_anon_in_a_ready;
  wire        _coh_wrapper_auto_coherent_jbar_anon_in_b_valid;
  wire [1:0]  _coh_wrapper_auto_coherent_jbar_anon_in_b_bits_param;
  wire [31:0] _coh_wrapper_auto_coherent_jbar_anon_in_b_bits_address;
  wire        _coh_wrapper_auto_coherent_jbar_anon_in_c_ready;
  wire        _coh_wrapper_auto_coherent_jbar_anon_in_d_valid;
  wire [2:0]  _coh_wrapper_auto_coherent_jbar_anon_in_d_bits_opcode;
  wire [1:0]  _coh_wrapper_auto_coherent_jbar_anon_in_d_bits_param;
  wire [2:0]  _coh_wrapper_auto_coherent_jbar_anon_in_d_bits_size;
  wire [4:0]  _coh_wrapper_auto_coherent_jbar_anon_in_d_bits_source;
  wire [1:0]  _coh_wrapper_auto_coherent_jbar_anon_in_d_bits_sink;
  wire        _coh_wrapper_auto_coherent_jbar_anon_in_d_bits_denied;
  wire [63:0] _coh_wrapper_auto_coherent_jbar_anon_in_d_bits_data;
  wire        _coh_wrapper_auto_coherent_jbar_anon_in_d_bits_corrupt;
  wire        _coh_wrapper_auto_coh_clock_groups_out_member_mbus_0_clock;
  wire        _coh_wrapper_auto_coh_clock_groups_out_member_mbus_0_reset;
  wire        _mbus_auto_bus_xing_in_a_ready;
  wire        _mbus_auto_bus_xing_in_d_valid;
  wire [2:0]  _mbus_auto_bus_xing_in_d_bits_opcode;
  wire [2:0]  _mbus_auto_bus_xing_in_d_bits_size;
  wire [6:0]  _mbus_auto_bus_xing_in_d_bits_source;
  wire        _mbus_auto_bus_xing_in_d_bits_denied;
  wire [63:0] _mbus_auto_bus_xing_in_d_bits_data;
  wire        _mbus_auto_bus_xing_in_d_bits_corrupt;
  wire        _cbus_auto_coupler_to_bootrom_fragmenter_anon_out_a_valid;
  wire [2:0]  _cbus_auto_coupler_to_bootrom_fragmenter_anon_out_a_bits_opcode;
  wire [2:0]  _cbus_auto_coupler_to_bootrom_fragmenter_anon_out_a_bits_param;
  wire [1:0]  _cbus_auto_coupler_to_bootrom_fragmenter_anon_out_a_bits_size;
  wire [8:0]  _cbus_auto_coupler_to_bootrom_fragmenter_anon_out_a_bits_source;
  wire [16:0] _cbus_auto_coupler_to_bootrom_fragmenter_anon_out_a_bits_address;
  wire [7:0]  _cbus_auto_coupler_to_bootrom_fragmenter_anon_out_a_bits_mask;
  wire        _cbus_auto_coupler_to_bootrom_fragmenter_anon_out_a_bits_corrupt;
  wire        _cbus_auto_coupler_to_bootrom_fragmenter_anon_out_d_ready;
  wire        _cbus_auto_coupler_to_debug_fragmenter_anon_out_a_valid;
  wire [2:0]  _cbus_auto_coupler_to_debug_fragmenter_anon_out_a_bits_opcode;
  wire [2:0]  _cbus_auto_coupler_to_debug_fragmenter_anon_out_a_bits_param;
  wire [1:0]  _cbus_auto_coupler_to_debug_fragmenter_anon_out_a_bits_size;
  wire [8:0]  _cbus_auto_coupler_to_debug_fragmenter_anon_out_a_bits_source;
  wire [11:0] _cbus_auto_coupler_to_debug_fragmenter_anon_out_a_bits_address;
  wire [7:0]  _cbus_auto_coupler_to_debug_fragmenter_anon_out_a_bits_mask;
  wire [63:0] _cbus_auto_coupler_to_debug_fragmenter_anon_out_a_bits_data;
  wire        _cbus_auto_coupler_to_debug_fragmenter_anon_out_a_bits_corrupt;
  wire        _cbus_auto_coupler_to_debug_fragmenter_anon_out_d_ready;
  wire        _cbus_auto_coupler_to_plic_fragmenter_anon_out_a_valid;
  wire [2:0]  _cbus_auto_coupler_to_plic_fragmenter_anon_out_a_bits_opcode;
  wire [2:0]  _cbus_auto_coupler_to_plic_fragmenter_anon_out_a_bits_param;
  wire [1:0]  _cbus_auto_coupler_to_plic_fragmenter_anon_out_a_bits_size;
  wire [8:0]  _cbus_auto_coupler_to_plic_fragmenter_anon_out_a_bits_source;
  wire [27:0] _cbus_auto_coupler_to_plic_fragmenter_anon_out_a_bits_address;
  wire [7:0]  _cbus_auto_coupler_to_plic_fragmenter_anon_out_a_bits_mask;
  wire [63:0] _cbus_auto_coupler_to_plic_fragmenter_anon_out_a_bits_data;
  wire        _cbus_auto_coupler_to_plic_fragmenter_anon_out_a_bits_corrupt;
  wire        _cbus_auto_coupler_to_plic_fragmenter_anon_out_d_ready;
  wire        _cbus_auto_coupler_to_clint_fragmenter_anon_out_a_valid;
  wire [2:0]  _cbus_auto_coupler_to_clint_fragmenter_anon_out_a_bits_opcode;
  wire [2:0]  _cbus_auto_coupler_to_clint_fragmenter_anon_out_a_bits_param;
  wire [1:0]  _cbus_auto_coupler_to_clint_fragmenter_anon_out_a_bits_size;
  wire [8:0]  _cbus_auto_coupler_to_clint_fragmenter_anon_out_a_bits_source;
  wire [25:0] _cbus_auto_coupler_to_clint_fragmenter_anon_out_a_bits_address;
  wire [7:0]  _cbus_auto_coupler_to_clint_fragmenter_anon_out_a_bits_mask;
  wire [63:0] _cbus_auto_coupler_to_clint_fragmenter_anon_out_a_bits_data;
  wire        _cbus_auto_coupler_to_clint_fragmenter_anon_out_a_bits_corrupt;
  wire        _cbus_auto_coupler_to_clint_fragmenter_anon_out_d_ready;
  wire        _cbus_auto_fixedClockNode_anon_out_3_clock;
  wire        _cbus_auto_fixedClockNode_anon_out_3_reset;
  wire        _cbus_auto_fixedClockNode_anon_out_1_clock;
  wire        _cbus_auto_fixedClockNode_anon_out_1_reset;
  wire        _cbus_auto_fixedClockNode_anon_out_0_clock;
  wire        _cbus_auto_fixedClockNode_anon_out_0_reset;
  wire        _cbus_auto_bus_xing_in_a_ready;
  wire        _cbus_auto_bus_xing_in_d_valid;
  wire [2:0]  _cbus_auto_bus_xing_in_d_bits_opcode;
  wire [1:0]  _cbus_auto_bus_xing_in_d_bits_param;
  wire [3:0]  _cbus_auto_bus_xing_in_d_bits_size;
  wire [4:0]  _cbus_auto_bus_xing_in_d_bits_source;
  wire        _cbus_auto_bus_xing_in_d_bits_sink;
  wire        _cbus_auto_bus_xing_in_d_bits_denied;
  wire [63:0] _cbus_auto_bus_xing_in_d_bits_data;
  wire        _cbus_auto_bus_xing_in_d_bits_corrupt;
  wire        _fbus_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_valid;
  wire [2:0]  _fbus_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_opcode;
  wire [2:0]  _fbus_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_param;
  wire [3:0]  _fbus_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_size;
  wire [3:0]  _fbus_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_source;
  wire [31:0] _fbus_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_address;
  wire
    _fbus_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_user_amba_prot_bufferable;
  wire
    _fbus_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_user_amba_prot_modifiable;
  wire
    _fbus_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_user_amba_prot_readalloc;
  wire
    _fbus_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_user_amba_prot_writealloc;
  wire
    _fbus_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_user_amba_prot_privileged;
  wire
    _fbus_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_user_amba_prot_secure;
  wire
    _fbus_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_user_amba_prot_fetch;
  wire [7:0]  _fbus_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_mask;
  wire [63:0] _fbus_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_data;
  wire        _fbus_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_corrupt;
  wire        _fbus_coupler_from_port_named_slave_port_axi4_auto_tl_out_d_ready;
  wire        _fbus_buffer_auto_in_a_ready;
  wire        _fbus_buffer_auto_in_d_valid;
  wire [2:0]  _fbus_buffer_auto_in_d_bits_opcode;
  wire [1:0]  _fbus_buffer_auto_in_d_bits_param;
  wire [3:0]  _fbus_buffer_auto_in_d_bits_size;
  wire [3:0]  _fbus_buffer_auto_in_d_bits_source;
  wire [1:0]  _fbus_buffer_auto_in_d_bits_sink;
  wire        _fbus_buffer_auto_in_d_bits_denied;
  wire [63:0] _fbus_buffer_auto_in_d_bits_data;
  wire        _fbus_buffer_auto_in_d_bits_corrupt;
  wire        _fbus_buffer_auto_out_a_valid;
  wire [2:0]  _fbus_buffer_auto_out_a_bits_opcode;
  wire [2:0]  _fbus_buffer_auto_out_a_bits_param;
  wire [3:0]  _fbus_buffer_auto_out_a_bits_size;
  wire [3:0]  _fbus_buffer_auto_out_a_bits_source;
  wire [31:0] _fbus_buffer_auto_out_a_bits_address;
  wire        _fbus_buffer_auto_out_a_bits_user_amba_prot_bufferable;
  wire        _fbus_buffer_auto_out_a_bits_user_amba_prot_modifiable;
  wire        _fbus_buffer_auto_out_a_bits_user_amba_prot_readalloc;
  wire        _fbus_buffer_auto_out_a_bits_user_amba_prot_writealloc;
  wire        _fbus_buffer_auto_out_a_bits_user_amba_prot_privileged;
  wire        _fbus_buffer_auto_out_a_bits_user_amba_prot_secure;
  wire        _fbus_buffer_auto_out_a_bits_user_amba_prot_fetch;
  wire [7:0]  _fbus_buffer_auto_out_a_bits_mask;
  wire [63:0] _fbus_buffer_auto_out_a_bits_data;
  wire        _fbus_buffer_auto_out_a_bits_corrupt;
  wire        _fbus_buffer_auto_out_d_ready;
  wire        _sbus_auto_coupler_from_rockettile_tl_master_clock_xing_in_a_ready;
  wire        _sbus_auto_coupler_from_rockettile_tl_master_clock_xing_in_b_valid;
  wire [1:0]  _sbus_auto_coupler_from_rockettile_tl_master_clock_xing_in_b_bits_param;
  wire [31:0] _sbus_auto_coupler_from_rockettile_tl_master_clock_xing_in_b_bits_address;
  wire        _sbus_auto_coupler_from_rockettile_tl_master_clock_xing_in_c_ready;
  wire        _sbus_auto_coupler_from_rockettile_tl_master_clock_xing_in_d_valid;
  wire [2:0]  _sbus_auto_coupler_from_rockettile_tl_master_clock_xing_in_d_bits_opcode;
  wire [1:0]  _sbus_auto_coupler_from_rockettile_tl_master_clock_xing_in_d_bits_param;
  wire [3:0]  _sbus_auto_coupler_from_rockettile_tl_master_clock_xing_in_d_bits_size;
  wire [1:0]  _sbus_auto_coupler_from_rockettile_tl_master_clock_xing_in_d_bits_source;
  wire [1:0]  _sbus_auto_coupler_from_rockettile_tl_master_clock_xing_in_d_bits_sink;
  wire        _sbus_auto_coupler_from_rockettile_tl_master_clock_xing_in_d_bits_denied;
  wire [63:0] _sbus_auto_coupler_from_rockettile_tl_master_clock_xing_in_d_bits_data;
  wire        _sbus_auto_coupler_from_rockettile_tl_master_clock_xing_in_d_bits_corrupt;
  wire        _sbus_auto_coupler_to_bus_named_coh_widget_anon_out_a_valid;
  wire [2:0]  _sbus_auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_opcode;
  wire [2:0]  _sbus_auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_param;
  wire [2:0]  _sbus_auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_size;
  wire [4:0]  _sbus_auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_source;
  wire [31:0] _sbus_auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_address;
  wire
    _sbus_auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_user_amba_prot_bufferable;
  wire
    _sbus_auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_user_amba_prot_modifiable;
  wire
    _sbus_auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_user_amba_prot_readalloc;
  wire
    _sbus_auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_user_amba_prot_writealloc;
  wire
    _sbus_auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_user_amba_prot_privileged;
  wire
    _sbus_auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_user_amba_prot_secure;
  wire
    _sbus_auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_user_amba_prot_fetch;
  wire [7:0]  _sbus_auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_mask;
  wire [63:0] _sbus_auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_data;
  wire        _sbus_auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_corrupt;
  wire        _sbus_auto_coupler_to_bus_named_coh_widget_anon_out_b_ready;
  wire        _sbus_auto_coupler_to_bus_named_coh_widget_anon_out_c_valid;
  wire [2:0]  _sbus_auto_coupler_to_bus_named_coh_widget_anon_out_c_bits_opcode;
  wire [2:0]  _sbus_auto_coupler_to_bus_named_coh_widget_anon_out_c_bits_param;
  wire [2:0]  _sbus_auto_coupler_to_bus_named_coh_widget_anon_out_c_bits_size;
  wire [4:0]  _sbus_auto_coupler_to_bus_named_coh_widget_anon_out_c_bits_source;
  wire [31:0] _sbus_auto_coupler_to_bus_named_coh_widget_anon_out_c_bits_address;
  wire [63:0] _sbus_auto_coupler_to_bus_named_coh_widget_anon_out_c_bits_data;
  wire        _sbus_auto_coupler_to_bus_named_coh_widget_anon_out_c_bits_corrupt;
  wire        _sbus_auto_coupler_to_bus_named_coh_widget_anon_out_d_ready;
  wire        _sbus_auto_coupler_to_bus_named_coh_widget_anon_out_e_valid;
  wire [1:0]  _sbus_auto_coupler_to_bus_named_coh_widget_anon_out_e_bits_sink;
  wire        _sbus_auto_coupler_from_bus_named_fbus_bus_xing_in_a_ready;
  wire        _sbus_auto_coupler_from_bus_named_fbus_bus_xing_in_d_valid;
  wire [2:0]  _sbus_auto_coupler_from_bus_named_fbus_bus_xing_in_d_bits_opcode;
  wire [1:0]  _sbus_auto_coupler_from_bus_named_fbus_bus_xing_in_d_bits_param;
  wire [3:0]  _sbus_auto_coupler_from_bus_named_fbus_bus_xing_in_d_bits_size;
  wire [3:0]  _sbus_auto_coupler_from_bus_named_fbus_bus_xing_in_d_bits_source;
  wire [1:0]  _sbus_auto_coupler_from_bus_named_fbus_bus_xing_in_d_bits_sink;
  wire        _sbus_auto_coupler_from_bus_named_fbus_bus_xing_in_d_bits_denied;
  wire [63:0] _sbus_auto_coupler_from_bus_named_fbus_bus_xing_in_d_bits_data;
  wire        _sbus_auto_coupler_from_bus_named_fbus_bus_xing_in_d_bits_corrupt;
  wire        _sbus_auto_coupler_to_bus_named_cbus_bus_xing_out_a_valid;
  wire [2:0]  _sbus_auto_coupler_to_bus_named_cbus_bus_xing_out_a_bits_opcode;
  wire [2:0]  _sbus_auto_coupler_to_bus_named_cbus_bus_xing_out_a_bits_param;
  wire [3:0]  _sbus_auto_coupler_to_bus_named_cbus_bus_xing_out_a_bits_size;
  wire [4:0]  _sbus_auto_coupler_to_bus_named_cbus_bus_xing_out_a_bits_source;
  wire [27:0] _sbus_auto_coupler_to_bus_named_cbus_bus_xing_out_a_bits_address;
  wire [7:0]  _sbus_auto_coupler_to_bus_named_cbus_bus_xing_out_a_bits_mask;
  wire [63:0] _sbus_auto_coupler_to_bus_named_cbus_bus_xing_out_a_bits_data;
  wire        _sbus_auto_coupler_to_bus_named_cbus_bus_xing_out_a_bits_corrupt;
  wire        _sbus_auto_coupler_to_bus_named_cbus_bus_xing_out_d_ready;
  wire        _sbus_auto_fixedClockNode_anon_out_1_clock;
  wire        _sbus_auto_fixedClockNode_anon_out_1_reset;
  wire        _sbus_auto_fixedClockNode_anon_out_0_clock;
  wire        _sbus_auto_fixedClockNode_anon_out_0_reset;
  wire        _sbus_auto_sbus_clock_groups_out_2_member_coh_1_clock;
  wire        _sbus_auto_sbus_clock_groups_out_2_member_coh_1_reset;
  wire        _sbus_auto_sbus_clock_groups_out_2_member_coh_0_clock;
  wire        _sbus_auto_sbus_clock_groups_out_2_member_coh_0_reset;
  wire        _sbus_auto_sbus_clock_groups_out_1_member_fbus_0_clock;
  wire        _sbus_auto_sbus_clock_groups_out_1_member_fbus_0_reset;
  wire        _sbus_auto_sbus_clock_groups_out_0_member_cbus_0_clock;
  wire        _sbus_auto_sbus_clock_groups_out_0_member_cbus_0_reset;
  wire        _ibus_intsource_auto_out_sync_0;
  wire        _ibus_intsource_auto_out_sync_1;
  wire        _ibus_intsink_auto_out_0;
  wire        _ibus_intsink_auto_out_1;
  wire        _ibus_int_bus_auto_anon_out_0;
  wire        _ibus_int_bus_auto_anon_out_1;
  reg  [6:0]  int_rtc_tick_c_value;
  wire        int_rtc_tick = int_rtc_tick_c_value == 7'h63;
  always @(posedge _clint_domain_clock) begin
    if (_clint_domain_reset)
      int_rtc_tick_c_value <= 7'h0;
    else if (int_rtc_tick)
      int_rtc_tick_c_value <= 7'h0;
    else
      int_rtc_tick_c_value <= int_rtc_tick_c_value + 7'h1;
  end // always @(posedge)
  IntXbar_i1_o1 ibus_int_bus (
    .auto_anon_in_0  (_ibus_intsink_auto_out_0),
    .auto_anon_in_1  (_ibus_intsink_auto_out_1),
    .auto_anon_out_0 (_ibus_int_bus_auto_anon_out_0),
    .auto_anon_out_1 (_ibus_int_bus_auto_anon_out_1)
  );
  IntSyncAsyncCrossingSink_n1x2 ibus_intsink (
    .clock          (_sbus_auto_fixedClockNode_anon_out_0_clock),
    .auto_in_sync_0 (_ibus_intsource_auto_out_sync_0),
    .auto_in_sync_1 (_ibus_intsource_auto_out_sync_1),
    .auto_out_0     (_ibus_intsink_auto_out_0),
    .auto_out_1     (_ibus_intsink_auto_out_1)
  );
  IntSyncCrossingSource_n1x2 ibus_intsource (
    .clock           (_sbus_auto_fixedClockNode_anon_out_0_clock),
    .reset           (_sbus_auto_fixedClockNode_anon_out_0_reset),
    .auto_in_0       (interrupts[0]),
    .auto_in_1       (interrupts[1]),
    .auto_out_sync_0 (_ibus_intsource_auto_out_sync_0),
    .auto_out_sync_1 (_ibus_intsource_auto_out_sync_1)
  );
  SystemBus sbus (
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_ready
      (mmio_axi4_0_aw_ready),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_ready
      (mmio_axi4_0_w_ready),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_b_valid
      (mmio_axi4_0_b_valid),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_b_bits_id
      (mmio_axi4_0_b_bits_id),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_b_bits_resp
      (mmio_axi4_0_b_bits_resp),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_ready
      (mmio_axi4_0_ar_ready),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_valid
      (mmio_axi4_0_r_valid),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_bits_id
      (mmio_axi4_0_r_bits_id),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_bits_data
      (mmio_axi4_0_r_bits_data),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_bits_resp
      (mmio_axi4_0_r_bits_resp),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_bits_last
      (mmio_axi4_0_r_bits_last),
    .auto_coupler_from_rockettile_tl_master_clock_xing_in_a_valid
      (_tile_prci_domain_auto_tl_master_clock_xing_out_a_valid),
    .auto_coupler_from_rockettile_tl_master_clock_xing_in_a_bits_opcode
      (_tile_prci_domain_auto_tl_master_clock_xing_out_a_bits_opcode),
    .auto_coupler_from_rockettile_tl_master_clock_xing_in_a_bits_param
      (_tile_prci_domain_auto_tl_master_clock_xing_out_a_bits_param),
    .auto_coupler_from_rockettile_tl_master_clock_xing_in_a_bits_size
      (_tile_prci_domain_auto_tl_master_clock_xing_out_a_bits_size),
    .auto_coupler_from_rockettile_tl_master_clock_xing_in_a_bits_source
      (_tile_prci_domain_auto_tl_master_clock_xing_out_a_bits_source),
    .auto_coupler_from_rockettile_tl_master_clock_xing_in_a_bits_address
      (_tile_prci_domain_auto_tl_master_clock_xing_out_a_bits_address),
    .auto_coupler_from_rockettile_tl_master_clock_xing_in_a_bits_mask
      (_tile_prci_domain_auto_tl_master_clock_xing_out_a_bits_mask),
    .auto_coupler_from_rockettile_tl_master_clock_xing_in_a_bits_data
      (_tile_prci_domain_auto_tl_master_clock_xing_out_a_bits_data),
    .auto_coupler_from_rockettile_tl_master_clock_xing_in_a_bits_corrupt
      (_tile_prci_domain_auto_tl_master_clock_xing_out_a_bits_corrupt),
    .auto_coupler_from_rockettile_tl_master_clock_xing_in_b_ready
      (_tile_prci_domain_auto_tl_master_clock_xing_out_b_ready),
    .auto_coupler_from_rockettile_tl_master_clock_xing_in_c_valid
      (_tile_prci_domain_auto_tl_master_clock_xing_out_c_valid),
    .auto_coupler_from_rockettile_tl_master_clock_xing_in_c_bits_opcode
      (_tile_prci_domain_auto_tl_master_clock_xing_out_c_bits_opcode),
    .auto_coupler_from_rockettile_tl_master_clock_xing_in_c_bits_param
      (_tile_prci_domain_auto_tl_master_clock_xing_out_c_bits_param),
    .auto_coupler_from_rockettile_tl_master_clock_xing_in_c_bits_size
      (_tile_prci_domain_auto_tl_master_clock_xing_out_c_bits_size),
    .auto_coupler_from_rockettile_tl_master_clock_xing_in_c_bits_source
      (_tile_prci_domain_auto_tl_master_clock_xing_out_c_bits_source),
    .auto_coupler_from_rockettile_tl_master_clock_xing_in_c_bits_address
      (_tile_prci_domain_auto_tl_master_clock_xing_out_c_bits_address),
    .auto_coupler_from_rockettile_tl_master_clock_xing_in_c_bits_data
      (_tile_prci_domain_auto_tl_master_clock_xing_out_c_bits_data),
    .auto_coupler_from_rockettile_tl_master_clock_xing_in_c_bits_corrupt
      (_tile_prci_domain_auto_tl_master_clock_xing_out_c_bits_corrupt),
    .auto_coupler_from_rockettile_tl_master_clock_xing_in_d_ready
      (_tile_prci_domain_auto_tl_master_clock_xing_out_d_ready),
    .auto_coupler_from_rockettile_tl_master_clock_xing_in_e_valid
      (_tile_prci_domain_auto_tl_master_clock_xing_out_e_valid),
    .auto_coupler_from_rockettile_tl_master_clock_xing_in_e_bits_sink
      (_tile_prci_domain_auto_tl_master_clock_xing_out_e_bits_sink),
    .auto_coupler_to_bus_named_coh_widget_anon_out_a_ready
      (_coh_wrapper_auto_coherent_jbar_anon_in_a_ready),
    .auto_coupler_to_bus_named_coh_widget_anon_out_b_valid
      (_coh_wrapper_auto_coherent_jbar_anon_in_b_valid),
    .auto_coupler_to_bus_named_coh_widget_anon_out_b_bits_param
      (_coh_wrapper_auto_coherent_jbar_anon_in_b_bits_param),
    .auto_coupler_to_bus_named_coh_widget_anon_out_b_bits_address
      (_coh_wrapper_auto_coherent_jbar_anon_in_b_bits_address),
    .auto_coupler_to_bus_named_coh_widget_anon_out_c_ready
      (_coh_wrapper_auto_coherent_jbar_anon_in_c_ready),
    .auto_coupler_to_bus_named_coh_widget_anon_out_d_valid
      (_coh_wrapper_auto_coherent_jbar_anon_in_d_valid),
    .auto_coupler_to_bus_named_coh_widget_anon_out_d_bits_opcode
      (_coh_wrapper_auto_coherent_jbar_anon_in_d_bits_opcode),
    .auto_coupler_to_bus_named_coh_widget_anon_out_d_bits_param
      (_coh_wrapper_auto_coherent_jbar_anon_in_d_bits_param),
    .auto_coupler_to_bus_named_coh_widget_anon_out_d_bits_size
      (_coh_wrapper_auto_coherent_jbar_anon_in_d_bits_size),
    .auto_coupler_to_bus_named_coh_widget_anon_out_d_bits_source
      (_coh_wrapper_auto_coherent_jbar_anon_in_d_bits_source),
    .auto_coupler_to_bus_named_coh_widget_anon_out_d_bits_sink
      (_coh_wrapper_auto_coherent_jbar_anon_in_d_bits_sink),
    .auto_coupler_to_bus_named_coh_widget_anon_out_d_bits_denied
      (_coh_wrapper_auto_coherent_jbar_anon_in_d_bits_denied),
    .auto_coupler_to_bus_named_coh_widget_anon_out_d_bits_data
      (_coh_wrapper_auto_coherent_jbar_anon_in_d_bits_data),
    .auto_coupler_to_bus_named_coh_widget_anon_out_d_bits_corrupt
      (_coh_wrapper_auto_coherent_jbar_anon_in_d_bits_corrupt),
    .auto_coupler_from_bus_named_fbus_bus_xing_in_a_valid
      (_fbus_buffer_auto_out_a_valid),
    .auto_coupler_from_bus_named_fbus_bus_xing_in_a_bits_opcode
      (_fbus_buffer_auto_out_a_bits_opcode),
    .auto_coupler_from_bus_named_fbus_bus_xing_in_a_bits_param
      (_fbus_buffer_auto_out_a_bits_param),
    .auto_coupler_from_bus_named_fbus_bus_xing_in_a_bits_size
      (_fbus_buffer_auto_out_a_bits_size),
    .auto_coupler_from_bus_named_fbus_bus_xing_in_a_bits_source
      (_fbus_buffer_auto_out_a_bits_source),
    .auto_coupler_from_bus_named_fbus_bus_xing_in_a_bits_address
      (_fbus_buffer_auto_out_a_bits_address),
    .auto_coupler_from_bus_named_fbus_bus_xing_in_a_bits_user_amba_prot_bufferable
      (_fbus_buffer_auto_out_a_bits_user_amba_prot_bufferable),
    .auto_coupler_from_bus_named_fbus_bus_xing_in_a_bits_user_amba_prot_modifiable
      (_fbus_buffer_auto_out_a_bits_user_amba_prot_modifiable),
    .auto_coupler_from_bus_named_fbus_bus_xing_in_a_bits_user_amba_prot_readalloc
      (_fbus_buffer_auto_out_a_bits_user_amba_prot_readalloc),
    .auto_coupler_from_bus_named_fbus_bus_xing_in_a_bits_user_amba_prot_writealloc
      (_fbus_buffer_auto_out_a_bits_user_amba_prot_writealloc),
    .auto_coupler_from_bus_named_fbus_bus_xing_in_a_bits_user_amba_prot_privileged
      (_fbus_buffer_auto_out_a_bits_user_amba_prot_privileged),
    .auto_coupler_from_bus_named_fbus_bus_xing_in_a_bits_user_amba_prot_secure
      (_fbus_buffer_auto_out_a_bits_user_amba_prot_secure),
    .auto_coupler_from_bus_named_fbus_bus_xing_in_a_bits_user_amba_prot_fetch
      (_fbus_buffer_auto_out_a_bits_user_amba_prot_fetch),
    .auto_coupler_from_bus_named_fbus_bus_xing_in_a_bits_mask
      (_fbus_buffer_auto_out_a_bits_mask),
    .auto_coupler_from_bus_named_fbus_bus_xing_in_a_bits_data
      (_fbus_buffer_auto_out_a_bits_data),
    .auto_coupler_from_bus_named_fbus_bus_xing_in_a_bits_corrupt
      (_fbus_buffer_auto_out_a_bits_corrupt),
    .auto_coupler_from_bus_named_fbus_bus_xing_in_d_ready
      (_fbus_buffer_auto_out_d_ready),
    .auto_coupler_to_bus_named_cbus_bus_xing_out_a_ready
      (_cbus_auto_bus_xing_in_a_ready),
    .auto_coupler_to_bus_named_cbus_bus_xing_out_d_valid
      (_cbus_auto_bus_xing_in_d_valid),
    .auto_coupler_to_bus_named_cbus_bus_xing_out_d_bits_opcode
      (_cbus_auto_bus_xing_in_d_bits_opcode),
    .auto_coupler_to_bus_named_cbus_bus_xing_out_d_bits_param
      (_cbus_auto_bus_xing_in_d_bits_param),
    .auto_coupler_to_bus_named_cbus_bus_xing_out_d_bits_size
      (_cbus_auto_bus_xing_in_d_bits_size),
    .auto_coupler_to_bus_named_cbus_bus_xing_out_d_bits_source
      (_cbus_auto_bus_xing_in_d_bits_source),
    .auto_coupler_to_bus_named_cbus_bus_xing_out_d_bits_sink
      (_cbus_auto_bus_xing_in_d_bits_sink),
    .auto_coupler_to_bus_named_cbus_bus_xing_out_d_bits_denied
      (_cbus_auto_bus_xing_in_d_bits_denied),
    .auto_coupler_to_bus_named_cbus_bus_xing_out_d_bits_data
      (_cbus_auto_bus_xing_in_d_bits_data),
    .auto_coupler_to_bus_named_cbus_bus_xing_out_d_bits_corrupt
      (_cbus_auto_bus_xing_in_d_bits_corrupt),
    .auto_sbus_clock_groups_in_member_sbus_5_clock
      (io_aggregator_5_clock),
    .auto_sbus_clock_groups_in_member_sbus_5_reset
      (io_aggregator_5_reset),
    .auto_sbus_clock_groups_in_member_sbus_4_clock
      (io_aggregator_4_clock),
    .auto_sbus_clock_groups_in_member_sbus_4_reset
      (io_aggregator_4_reset),
    .auto_sbus_clock_groups_in_member_sbus_3_clock
      (io_aggregator_3_clock),
    .auto_sbus_clock_groups_in_member_sbus_3_reset
      (io_aggregator_3_reset),
    .auto_sbus_clock_groups_in_member_sbus_1_clock
      (io_aggregator_1_clock),
    .auto_sbus_clock_groups_in_member_sbus_1_reset
      (io_aggregator_1_reset),
    .auto_sbus_clock_groups_in_member_sbus_0_clock
      (io_aggregator_0_clock),
    .auto_sbus_clock_groups_in_member_sbus_0_reset
      (io_aggregator_0_reset),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_valid
      (mmio_axi4_0_aw_valid),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_id
      (mmio_axi4_0_aw_bits_id),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_addr
      (mmio_axi4_0_aw_bits_addr),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_len
      (mmio_axi4_0_aw_bits_len),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_size
      (mmio_axi4_0_aw_bits_size),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_burst
      (mmio_axi4_0_aw_bits_burst),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_lock
      (mmio_axi4_0_aw_bits_lock),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_cache
      (mmio_axi4_0_aw_bits_cache),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_prot
      (mmio_axi4_0_aw_bits_prot),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_qos
      (mmio_axi4_0_aw_bits_qos),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_valid
      (mmio_axi4_0_w_valid),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_bits_data
      (mmio_axi4_0_w_bits_data),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_bits_strb
      (mmio_axi4_0_w_bits_strb),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_bits_last
      (mmio_axi4_0_w_bits_last),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_b_ready
      (mmio_axi4_0_b_ready),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_valid
      (mmio_axi4_0_ar_valid),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_id
      (mmio_axi4_0_ar_bits_id),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_addr
      (mmio_axi4_0_ar_bits_addr),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_len
      (mmio_axi4_0_ar_bits_len),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_size
      (mmio_axi4_0_ar_bits_size),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_burst
      (mmio_axi4_0_ar_bits_burst),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_lock
      (mmio_axi4_0_ar_bits_lock),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_cache
      (mmio_axi4_0_ar_bits_cache),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_prot
      (mmio_axi4_0_ar_bits_prot),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_qos
      (mmio_axi4_0_ar_bits_qos),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_ready
      (mmio_axi4_0_r_ready),
    .auto_coupler_from_rockettile_tl_master_clock_xing_in_a_ready
      (_sbus_auto_coupler_from_rockettile_tl_master_clock_xing_in_a_ready),
    .auto_coupler_from_rockettile_tl_master_clock_xing_in_b_valid
      (_sbus_auto_coupler_from_rockettile_tl_master_clock_xing_in_b_valid),
    .auto_coupler_from_rockettile_tl_master_clock_xing_in_b_bits_param
      (_sbus_auto_coupler_from_rockettile_tl_master_clock_xing_in_b_bits_param),
    .auto_coupler_from_rockettile_tl_master_clock_xing_in_b_bits_address
      (_sbus_auto_coupler_from_rockettile_tl_master_clock_xing_in_b_bits_address),
    .auto_coupler_from_rockettile_tl_master_clock_xing_in_c_ready
      (_sbus_auto_coupler_from_rockettile_tl_master_clock_xing_in_c_ready),
    .auto_coupler_from_rockettile_tl_master_clock_xing_in_d_valid
      (_sbus_auto_coupler_from_rockettile_tl_master_clock_xing_in_d_valid),
    .auto_coupler_from_rockettile_tl_master_clock_xing_in_d_bits_opcode
      (_sbus_auto_coupler_from_rockettile_tl_master_clock_xing_in_d_bits_opcode),
    .auto_coupler_from_rockettile_tl_master_clock_xing_in_d_bits_param
      (_sbus_auto_coupler_from_rockettile_tl_master_clock_xing_in_d_bits_param),
    .auto_coupler_from_rockettile_tl_master_clock_xing_in_d_bits_size
      (_sbus_auto_coupler_from_rockettile_tl_master_clock_xing_in_d_bits_size),
    .auto_coupler_from_rockettile_tl_master_clock_xing_in_d_bits_source
      (_sbus_auto_coupler_from_rockettile_tl_master_clock_xing_in_d_bits_source),
    .auto_coupler_from_rockettile_tl_master_clock_xing_in_d_bits_sink
      (_sbus_auto_coupler_from_rockettile_tl_master_clock_xing_in_d_bits_sink),
    .auto_coupler_from_rockettile_tl_master_clock_xing_in_d_bits_denied
      (_sbus_auto_coupler_from_rockettile_tl_master_clock_xing_in_d_bits_denied),
    .auto_coupler_from_rockettile_tl_master_clock_xing_in_d_bits_data
      (_sbus_auto_coupler_from_rockettile_tl_master_clock_xing_in_d_bits_data),
    .auto_coupler_from_rockettile_tl_master_clock_xing_in_d_bits_corrupt
      (_sbus_auto_coupler_from_rockettile_tl_master_clock_xing_in_d_bits_corrupt),
    .auto_coupler_to_bus_named_coh_widget_anon_out_a_valid
      (_sbus_auto_coupler_to_bus_named_coh_widget_anon_out_a_valid),
    .auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_opcode
      (_sbus_auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_opcode),
    .auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_param
      (_sbus_auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_param),
    .auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_size
      (_sbus_auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_size),
    .auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_source
      (_sbus_auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_source),
    .auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_address
      (_sbus_auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_address),
    .auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_user_amba_prot_bufferable
      (_sbus_auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_user_amba_prot_bufferable),
    .auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_user_amba_prot_modifiable
      (_sbus_auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_user_amba_prot_modifiable),
    .auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_user_amba_prot_readalloc
      (_sbus_auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_user_amba_prot_readalloc),
    .auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_user_amba_prot_writealloc
      (_sbus_auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_user_amba_prot_writealloc),
    .auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_user_amba_prot_privileged
      (_sbus_auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_user_amba_prot_privileged),
    .auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_user_amba_prot_secure
      (_sbus_auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_user_amba_prot_secure),
    .auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_user_amba_prot_fetch
      (_sbus_auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_user_amba_prot_fetch),
    .auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_mask
      (_sbus_auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_mask),
    .auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_data
      (_sbus_auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_data),
    .auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_corrupt
      (_sbus_auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_corrupt),
    .auto_coupler_to_bus_named_coh_widget_anon_out_b_ready
      (_sbus_auto_coupler_to_bus_named_coh_widget_anon_out_b_ready),
    .auto_coupler_to_bus_named_coh_widget_anon_out_c_valid
      (_sbus_auto_coupler_to_bus_named_coh_widget_anon_out_c_valid),
    .auto_coupler_to_bus_named_coh_widget_anon_out_c_bits_opcode
      (_sbus_auto_coupler_to_bus_named_coh_widget_anon_out_c_bits_opcode),
    .auto_coupler_to_bus_named_coh_widget_anon_out_c_bits_param
      (_sbus_auto_coupler_to_bus_named_coh_widget_anon_out_c_bits_param),
    .auto_coupler_to_bus_named_coh_widget_anon_out_c_bits_size
      (_sbus_auto_coupler_to_bus_named_coh_widget_anon_out_c_bits_size),
    .auto_coupler_to_bus_named_coh_widget_anon_out_c_bits_source
      (_sbus_auto_coupler_to_bus_named_coh_widget_anon_out_c_bits_source),
    .auto_coupler_to_bus_named_coh_widget_anon_out_c_bits_address
      (_sbus_auto_coupler_to_bus_named_coh_widget_anon_out_c_bits_address),
    .auto_coupler_to_bus_named_coh_widget_anon_out_c_bits_data
      (_sbus_auto_coupler_to_bus_named_coh_widget_anon_out_c_bits_data),
    .auto_coupler_to_bus_named_coh_widget_anon_out_c_bits_corrupt
      (_sbus_auto_coupler_to_bus_named_coh_widget_anon_out_c_bits_corrupt),
    .auto_coupler_to_bus_named_coh_widget_anon_out_d_ready
      (_sbus_auto_coupler_to_bus_named_coh_widget_anon_out_d_ready),
    .auto_coupler_to_bus_named_coh_widget_anon_out_e_valid
      (_sbus_auto_coupler_to_bus_named_coh_widget_anon_out_e_valid),
    .auto_coupler_to_bus_named_coh_widget_anon_out_e_bits_sink
      (_sbus_auto_coupler_to_bus_named_coh_widget_anon_out_e_bits_sink),
    .auto_coupler_from_bus_named_fbus_bus_xing_in_a_ready
      (_sbus_auto_coupler_from_bus_named_fbus_bus_xing_in_a_ready),
    .auto_coupler_from_bus_named_fbus_bus_xing_in_d_valid
      (_sbus_auto_coupler_from_bus_named_fbus_bus_xing_in_d_valid),
    .auto_coupler_from_bus_named_fbus_bus_xing_in_d_bits_opcode
      (_sbus_auto_coupler_from_bus_named_fbus_bus_xing_in_d_bits_opcode),
    .auto_coupler_from_bus_named_fbus_bus_xing_in_d_bits_param
      (_sbus_auto_coupler_from_bus_named_fbus_bus_xing_in_d_bits_param),
    .auto_coupler_from_bus_named_fbus_bus_xing_in_d_bits_size
      (_sbus_auto_coupler_from_bus_named_fbus_bus_xing_in_d_bits_size),
    .auto_coupler_from_bus_named_fbus_bus_xing_in_d_bits_source
      (_sbus_auto_coupler_from_bus_named_fbus_bus_xing_in_d_bits_source),
    .auto_coupler_from_bus_named_fbus_bus_xing_in_d_bits_sink
      (_sbus_auto_coupler_from_bus_named_fbus_bus_xing_in_d_bits_sink),
    .auto_coupler_from_bus_named_fbus_bus_xing_in_d_bits_denied
      (_sbus_auto_coupler_from_bus_named_fbus_bus_xing_in_d_bits_denied),
    .auto_coupler_from_bus_named_fbus_bus_xing_in_d_bits_data
      (_sbus_auto_coupler_from_bus_named_fbus_bus_xing_in_d_bits_data),
    .auto_coupler_from_bus_named_fbus_bus_xing_in_d_bits_corrupt
      (_sbus_auto_coupler_from_bus_named_fbus_bus_xing_in_d_bits_corrupt),
    .auto_coupler_to_bus_named_cbus_bus_xing_out_a_valid
      (_sbus_auto_coupler_to_bus_named_cbus_bus_xing_out_a_valid),
    .auto_coupler_to_bus_named_cbus_bus_xing_out_a_bits_opcode
      (_sbus_auto_coupler_to_bus_named_cbus_bus_xing_out_a_bits_opcode),
    .auto_coupler_to_bus_named_cbus_bus_xing_out_a_bits_param
      (_sbus_auto_coupler_to_bus_named_cbus_bus_xing_out_a_bits_param),
    .auto_coupler_to_bus_named_cbus_bus_xing_out_a_bits_size
      (_sbus_auto_coupler_to_bus_named_cbus_bus_xing_out_a_bits_size),
    .auto_coupler_to_bus_named_cbus_bus_xing_out_a_bits_source
      (_sbus_auto_coupler_to_bus_named_cbus_bus_xing_out_a_bits_source),
    .auto_coupler_to_bus_named_cbus_bus_xing_out_a_bits_address
      (_sbus_auto_coupler_to_bus_named_cbus_bus_xing_out_a_bits_address),
    .auto_coupler_to_bus_named_cbus_bus_xing_out_a_bits_mask
      (_sbus_auto_coupler_to_bus_named_cbus_bus_xing_out_a_bits_mask),
    .auto_coupler_to_bus_named_cbus_bus_xing_out_a_bits_data
      (_sbus_auto_coupler_to_bus_named_cbus_bus_xing_out_a_bits_data),
    .auto_coupler_to_bus_named_cbus_bus_xing_out_a_bits_corrupt
      (_sbus_auto_coupler_to_bus_named_cbus_bus_xing_out_a_bits_corrupt),
    .auto_coupler_to_bus_named_cbus_bus_xing_out_d_ready
      (_sbus_auto_coupler_to_bus_named_cbus_bus_xing_out_d_ready),
    .auto_fixedClockNode_anon_out_1_clock
      (_sbus_auto_fixedClockNode_anon_out_1_clock),
    .auto_fixedClockNode_anon_out_1_reset
      (_sbus_auto_fixedClockNode_anon_out_1_reset),
    .auto_fixedClockNode_anon_out_0_clock
      (_sbus_auto_fixedClockNode_anon_out_0_clock),
    .auto_fixedClockNode_anon_out_0_reset
      (_sbus_auto_fixedClockNode_anon_out_0_reset),
    .auto_sbus_clock_groups_out_2_member_coh_1_clock
      (_sbus_auto_sbus_clock_groups_out_2_member_coh_1_clock),
    .auto_sbus_clock_groups_out_2_member_coh_1_reset
      (_sbus_auto_sbus_clock_groups_out_2_member_coh_1_reset),
    .auto_sbus_clock_groups_out_2_member_coh_0_clock
      (_sbus_auto_sbus_clock_groups_out_2_member_coh_0_clock),
    .auto_sbus_clock_groups_out_2_member_coh_0_reset
      (_sbus_auto_sbus_clock_groups_out_2_member_coh_0_reset),
    .auto_sbus_clock_groups_out_1_member_fbus_0_clock
      (_sbus_auto_sbus_clock_groups_out_1_member_fbus_0_clock),
    .auto_sbus_clock_groups_out_1_member_fbus_0_reset
      (_sbus_auto_sbus_clock_groups_out_1_member_fbus_0_reset),
    .auto_sbus_clock_groups_out_0_member_cbus_0_clock
      (_sbus_auto_sbus_clock_groups_out_0_member_cbus_0_clock),
    .auto_sbus_clock_groups_out_0_member_cbus_0_reset
      (_sbus_auto_sbus_clock_groups_out_0_member_cbus_0_reset)
  );
  TLBuffer_a32d64s4k2z4u fbus_buffer (
    .clock
      (_sbus_auto_sbus_clock_groups_out_1_member_fbus_0_clock),
    .reset
      (_sbus_auto_sbus_clock_groups_out_1_member_fbus_0_reset),
    .auto_in_a_valid
      (_fbus_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_valid),
    .auto_in_a_bits_opcode
      (_fbus_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_opcode),
    .auto_in_a_bits_param
      (_fbus_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_param),
    .auto_in_a_bits_size
      (_fbus_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_size),
    .auto_in_a_bits_source
      (_fbus_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_source),
    .auto_in_a_bits_address
      (_fbus_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_address),
    .auto_in_a_bits_user_amba_prot_bufferable
      (_fbus_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_user_amba_prot_bufferable),
    .auto_in_a_bits_user_amba_prot_modifiable
      (_fbus_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_user_amba_prot_modifiable),
    .auto_in_a_bits_user_amba_prot_readalloc
      (_fbus_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_user_amba_prot_readalloc),
    .auto_in_a_bits_user_amba_prot_writealloc
      (_fbus_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_user_amba_prot_writealloc),
    .auto_in_a_bits_user_amba_prot_privileged
      (_fbus_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_user_amba_prot_privileged),
    .auto_in_a_bits_user_amba_prot_secure
      (_fbus_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_user_amba_prot_secure),
    .auto_in_a_bits_user_amba_prot_fetch
      (_fbus_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_user_amba_prot_fetch),
    .auto_in_a_bits_mask
      (_fbus_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_mask),
    .auto_in_a_bits_data
      (_fbus_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_data),
    .auto_in_a_bits_corrupt
      (_fbus_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_corrupt),
    .auto_in_d_ready
      (_fbus_coupler_from_port_named_slave_port_axi4_auto_tl_out_d_ready),
    .auto_out_a_ready
      (_sbus_auto_coupler_from_bus_named_fbus_bus_xing_in_a_ready),
    .auto_out_d_valid
      (_sbus_auto_coupler_from_bus_named_fbus_bus_xing_in_d_valid),
    .auto_out_d_bits_opcode
      (_sbus_auto_coupler_from_bus_named_fbus_bus_xing_in_d_bits_opcode),
    .auto_out_d_bits_param
      (_sbus_auto_coupler_from_bus_named_fbus_bus_xing_in_d_bits_param),
    .auto_out_d_bits_size
      (_sbus_auto_coupler_from_bus_named_fbus_bus_xing_in_d_bits_size),
    .auto_out_d_bits_source
      (_sbus_auto_coupler_from_bus_named_fbus_bus_xing_in_d_bits_source),
    .auto_out_d_bits_sink
      (_sbus_auto_coupler_from_bus_named_fbus_bus_xing_in_d_bits_sink),
    .auto_out_d_bits_denied
      (_sbus_auto_coupler_from_bus_named_fbus_bus_xing_in_d_bits_denied),
    .auto_out_d_bits_data
      (_sbus_auto_coupler_from_bus_named_fbus_bus_xing_in_d_bits_data),
    .auto_out_d_bits_corrupt
      (_sbus_auto_coupler_from_bus_named_fbus_bus_xing_in_d_bits_corrupt),
    .auto_in_a_ready                           (_fbus_buffer_auto_in_a_ready),
    .auto_in_d_valid                           (_fbus_buffer_auto_in_d_valid),
    .auto_in_d_bits_opcode                     (_fbus_buffer_auto_in_d_bits_opcode),
    .auto_in_d_bits_param                      (_fbus_buffer_auto_in_d_bits_param),
    .auto_in_d_bits_size                       (_fbus_buffer_auto_in_d_bits_size),
    .auto_in_d_bits_source                     (_fbus_buffer_auto_in_d_bits_source),
    .auto_in_d_bits_sink                       (_fbus_buffer_auto_in_d_bits_sink),
    .auto_in_d_bits_denied                     (_fbus_buffer_auto_in_d_bits_denied),
    .auto_in_d_bits_data                       (_fbus_buffer_auto_in_d_bits_data),
    .auto_in_d_bits_corrupt                    (_fbus_buffer_auto_in_d_bits_corrupt),
    .auto_out_a_valid                          (_fbus_buffer_auto_out_a_valid),
    .auto_out_a_bits_opcode                    (_fbus_buffer_auto_out_a_bits_opcode),
    .auto_out_a_bits_param                     (_fbus_buffer_auto_out_a_bits_param),
    .auto_out_a_bits_size                      (_fbus_buffer_auto_out_a_bits_size),
    .auto_out_a_bits_source                    (_fbus_buffer_auto_out_a_bits_source),
    .auto_out_a_bits_address                   (_fbus_buffer_auto_out_a_bits_address),
    .auto_out_a_bits_user_amba_prot_bufferable
      (_fbus_buffer_auto_out_a_bits_user_amba_prot_bufferable),
    .auto_out_a_bits_user_amba_prot_modifiable
      (_fbus_buffer_auto_out_a_bits_user_amba_prot_modifiable),
    .auto_out_a_bits_user_amba_prot_readalloc
      (_fbus_buffer_auto_out_a_bits_user_amba_prot_readalloc),
    .auto_out_a_bits_user_amba_prot_writealloc
      (_fbus_buffer_auto_out_a_bits_user_amba_prot_writealloc),
    .auto_out_a_bits_user_amba_prot_privileged
      (_fbus_buffer_auto_out_a_bits_user_amba_prot_privileged),
    .auto_out_a_bits_user_amba_prot_secure
      (_fbus_buffer_auto_out_a_bits_user_amba_prot_secure),
    .auto_out_a_bits_user_amba_prot_fetch
      (_fbus_buffer_auto_out_a_bits_user_amba_prot_fetch),
    .auto_out_a_bits_mask                      (_fbus_buffer_auto_out_a_bits_mask),
    .auto_out_a_bits_data                      (_fbus_buffer_auto_out_a_bits_data),
    .auto_out_a_bits_corrupt                   (_fbus_buffer_auto_out_a_bits_corrupt),
    .auto_out_d_ready                          (_fbus_buffer_auto_out_d_ready)
  );
  TLInterconnectCoupler_fbus_from_port_named_slave_port_axi4 fbus_coupler_from_port_named_slave_port_axi4 (
    .clock
      (_sbus_auto_sbus_clock_groups_out_1_member_fbus_0_clock),
    .reset
      (_sbus_auto_sbus_clock_groups_out_1_member_fbus_0_reset),
    .auto_axi4index_in_aw_valid                   (l2_frontend_bus_axi4_0_aw_valid),
    .auto_axi4index_in_aw_bits_id                 (l2_frontend_bus_axi4_0_aw_bits_id),
    .auto_axi4index_in_aw_bits_addr               (l2_frontend_bus_axi4_0_aw_bits_addr),
    .auto_axi4index_in_aw_bits_len                (l2_frontend_bus_axi4_0_aw_bits_len),
    .auto_axi4index_in_aw_bits_size               (l2_frontend_bus_axi4_0_aw_bits_size),
    .auto_axi4index_in_aw_bits_burst              (l2_frontend_bus_axi4_0_aw_bits_burst),
    .auto_axi4index_in_aw_bits_lock               (l2_frontend_bus_axi4_0_aw_bits_lock),
    .auto_axi4index_in_aw_bits_cache              (l2_frontend_bus_axi4_0_aw_bits_cache),
    .auto_axi4index_in_aw_bits_prot               (l2_frontend_bus_axi4_0_aw_bits_prot),
    .auto_axi4index_in_aw_bits_qos                (l2_frontend_bus_axi4_0_aw_bits_qos),
    .auto_axi4index_in_w_valid                    (l2_frontend_bus_axi4_0_w_valid),
    .auto_axi4index_in_w_bits_data                (l2_frontend_bus_axi4_0_w_bits_data),
    .auto_axi4index_in_w_bits_strb                (l2_frontend_bus_axi4_0_w_bits_strb),
    .auto_axi4index_in_w_bits_last                (l2_frontend_bus_axi4_0_w_bits_last),
    .auto_axi4index_in_b_ready                    (l2_frontend_bus_axi4_0_b_ready),
    .auto_axi4index_in_ar_valid                   (l2_frontend_bus_axi4_0_ar_valid),
    .auto_axi4index_in_ar_bits_id                 (l2_frontend_bus_axi4_0_ar_bits_id),
    .auto_axi4index_in_ar_bits_addr               (l2_frontend_bus_axi4_0_ar_bits_addr),
    .auto_axi4index_in_ar_bits_len                (l2_frontend_bus_axi4_0_ar_bits_len),
    .auto_axi4index_in_ar_bits_size               (l2_frontend_bus_axi4_0_ar_bits_size),
    .auto_axi4index_in_ar_bits_burst              (l2_frontend_bus_axi4_0_ar_bits_burst),
    .auto_axi4index_in_ar_bits_lock               (l2_frontend_bus_axi4_0_ar_bits_lock),
    .auto_axi4index_in_ar_bits_cache              (l2_frontend_bus_axi4_0_ar_bits_cache),
    .auto_axi4index_in_ar_bits_prot               (l2_frontend_bus_axi4_0_ar_bits_prot),
    .auto_axi4index_in_ar_bits_qos                (l2_frontend_bus_axi4_0_ar_bits_qos),
    .auto_axi4index_in_r_ready                    (l2_frontend_bus_axi4_0_r_ready),
    .auto_tl_out_a_ready                          (_fbus_buffer_auto_in_a_ready),
    .auto_tl_out_d_valid                          (_fbus_buffer_auto_in_d_valid),
    .auto_tl_out_d_bits_opcode                    (_fbus_buffer_auto_in_d_bits_opcode),
    .auto_tl_out_d_bits_param                     (_fbus_buffer_auto_in_d_bits_param),
    .auto_tl_out_d_bits_size                      (_fbus_buffer_auto_in_d_bits_size),
    .auto_tl_out_d_bits_source                    (_fbus_buffer_auto_in_d_bits_source),
    .auto_tl_out_d_bits_sink                      (_fbus_buffer_auto_in_d_bits_sink),
    .auto_tl_out_d_bits_denied                    (_fbus_buffer_auto_in_d_bits_denied),
    .auto_tl_out_d_bits_data                      (_fbus_buffer_auto_in_d_bits_data),
    .auto_tl_out_d_bits_corrupt                   (_fbus_buffer_auto_in_d_bits_corrupt),
    .auto_axi4index_in_aw_ready                   (l2_frontend_bus_axi4_0_aw_ready),
    .auto_axi4index_in_w_ready                    (l2_frontend_bus_axi4_0_w_ready),
    .auto_axi4index_in_b_valid                    (l2_frontend_bus_axi4_0_b_valid),
    .auto_axi4index_in_b_bits_id                  (l2_frontend_bus_axi4_0_b_bits_id),
    .auto_axi4index_in_b_bits_resp                (l2_frontend_bus_axi4_0_b_bits_resp),
    .auto_axi4index_in_ar_ready                   (l2_frontend_bus_axi4_0_ar_ready),
    .auto_axi4index_in_r_valid                    (l2_frontend_bus_axi4_0_r_valid),
    .auto_axi4index_in_r_bits_id                  (l2_frontend_bus_axi4_0_r_bits_id),
    .auto_axi4index_in_r_bits_data                (l2_frontend_bus_axi4_0_r_bits_data),
    .auto_axi4index_in_r_bits_resp                (l2_frontend_bus_axi4_0_r_bits_resp),
    .auto_axi4index_in_r_bits_last                (l2_frontend_bus_axi4_0_r_bits_last),
    .auto_tl_out_a_valid
      (_fbus_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_valid),
    .auto_tl_out_a_bits_opcode
      (_fbus_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_opcode),
    .auto_tl_out_a_bits_param
      (_fbus_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_param),
    .auto_tl_out_a_bits_size
      (_fbus_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_size),
    .auto_tl_out_a_bits_source
      (_fbus_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_source),
    .auto_tl_out_a_bits_address
      (_fbus_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_address),
    .auto_tl_out_a_bits_user_amba_prot_bufferable
      (_fbus_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_user_amba_prot_bufferable),
    .auto_tl_out_a_bits_user_amba_prot_modifiable
      (_fbus_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_user_amba_prot_modifiable),
    .auto_tl_out_a_bits_user_amba_prot_readalloc
      (_fbus_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_user_amba_prot_readalloc),
    .auto_tl_out_a_bits_user_amba_prot_writealloc
      (_fbus_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_user_amba_prot_writealloc),
    .auto_tl_out_a_bits_user_amba_prot_privileged
      (_fbus_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_user_amba_prot_privileged),
    .auto_tl_out_a_bits_user_amba_prot_secure
      (_fbus_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_user_amba_prot_secure),
    .auto_tl_out_a_bits_user_amba_prot_fetch
      (_fbus_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_user_amba_prot_fetch),
    .auto_tl_out_a_bits_mask
      (_fbus_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_mask),
    .auto_tl_out_a_bits_data
      (_fbus_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_data),
    .auto_tl_out_a_bits_corrupt
      (_fbus_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_corrupt),
    .auto_tl_out_d_ready
      (_fbus_coupler_from_port_named_slave_port_axi4_auto_tl_out_d_ready)
  );
  PeripheryBus_cbus cbus (
    .auto_coupler_to_bootrom_fragmenter_anon_out_a_ready
      (_bootrom_domain_auto_bootrom_in_a_ready),
    .auto_coupler_to_bootrom_fragmenter_anon_out_d_valid
      (_bootrom_domain_auto_bootrom_in_d_valid),
    .auto_coupler_to_bootrom_fragmenter_anon_out_d_bits_size
      (_bootrom_domain_auto_bootrom_in_d_bits_size),
    .auto_coupler_to_bootrom_fragmenter_anon_out_d_bits_source
      (_bootrom_domain_auto_bootrom_in_d_bits_source),
    .auto_coupler_to_bootrom_fragmenter_anon_out_d_bits_data
      (_bootrom_domain_auto_bootrom_in_d_bits_data),
    .auto_coupler_to_debug_fragmenter_anon_out_a_ready
      (_tlDM_auto_dmInner_dmInner_tl_in_a_ready),
    .auto_coupler_to_debug_fragmenter_anon_out_d_valid
      (_tlDM_auto_dmInner_dmInner_tl_in_d_valid),
    .auto_coupler_to_debug_fragmenter_anon_out_d_bits_opcode
      (_tlDM_auto_dmInner_dmInner_tl_in_d_bits_opcode),
    .auto_coupler_to_debug_fragmenter_anon_out_d_bits_size
      (_tlDM_auto_dmInner_dmInner_tl_in_d_bits_size),
    .auto_coupler_to_debug_fragmenter_anon_out_d_bits_source
      (_tlDM_auto_dmInner_dmInner_tl_in_d_bits_source),
    .auto_coupler_to_debug_fragmenter_anon_out_d_bits_data
      (_tlDM_auto_dmInner_dmInner_tl_in_d_bits_data),
    .auto_coupler_to_plic_fragmenter_anon_out_a_ready
      (_plic_domain_auto_plic_in_a_ready),
    .auto_coupler_to_plic_fragmenter_anon_out_d_valid
      (_plic_domain_auto_plic_in_d_valid),
    .auto_coupler_to_plic_fragmenter_anon_out_d_bits_opcode
      (_plic_domain_auto_plic_in_d_bits_opcode),
    .auto_coupler_to_plic_fragmenter_anon_out_d_bits_size
      (_plic_domain_auto_plic_in_d_bits_size),
    .auto_coupler_to_plic_fragmenter_anon_out_d_bits_source
      (_plic_domain_auto_plic_in_d_bits_source),
    .auto_coupler_to_plic_fragmenter_anon_out_d_bits_data
      (_plic_domain_auto_plic_in_d_bits_data),
    .auto_coupler_to_clint_fragmenter_anon_out_a_ready
      (_clint_domain_auto_clint_in_a_ready),
    .auto_coupler_to_clint_fragmenter_anon_out_d_valid
      (_clint_domain_auto_clint_in_d_valid),
    .auto_coupler_to_clint_fragmenter_anon_out_d_bits_opcode
      (_clint_domain_auto_clint_in_d_bits_opcode),
    .auto_coupler_to_clint_fragmenter_anon_out_d_bits_size
      (_clint_domain_auto_clint_in_d_bits_size),
    .auto_coupler_to_clint_fragmenter_anon_out_d_bits_source
      (_clint_domain_auto_clint_in_d_bits_source),
    .auto_coupler_to_clint_fragmenter_anon_out_d_bits_data
      (_clint_domain_auto_clint_in_d_bits_data),
    .auto_cbus_clock_groups_in_member_cbus_0_clock
      (_sbus_auto_sbus_clock_groups_out_0_member_cbus_0_clock),
    .auto_cbus_clock_groups_in_member_cbus_0_reset
      (_sbus_auto_sbus_clock_groups_out_0_member_cbus_0_reset),
    .auto_bus_xing_in_a_valid
      (_sbus_auto_coupler_to_bus_named_cbus_bus_xing_out_a_valid),
    .auto_bus_xing_in_a_bits_opcode
      (_sbus_auto_coupler_to_bus_named_cbus_bus_xing_out_a_bits_opcode),
    .auto_bus_xing_in_a_bits_param
      (_sbus_auto_coupler_to_bus_named_cbus_bus_xing_out_a_bits_param),
    .auto_bus_xing_in_a_bits_size
      (_sbus_auto_coupler_to_bus_named_cbus_bus_xing_out_a_bits_size),
    .auto_bus_xing_in_a_bits_source
      (_sbus_auto_coupler_to_bus_named_cbus_bus_xing_out_a_bits_source),
    .auto_bus_xing_in_a_bits_address
      (_sbus_auto_coupler_to_bus_named_cbus_bus_xing_out_a_bits_address),
    .auto_bus_xing_in_a_bits_mask
      (_sbus_auto_coupler_to_bus_named_cbus_bus_xing_out_a_bits_mask),
    .auto_bus_xing_in_a_bits_data
      (_sbus_auto_coupler_to_bus_named_cbus_bus_xing_out_a_bits_data),
    .auto_bus_xing_in_a_bits_corrupt
      (_sbus_auto_coupler_to_bus_named_cbus_bus_xing_out_a_bits_corrupt),
    .auto_bus_xing_in_d_ready
      (_sbus_auto_coupler_to_bus_named_cbus_bus_xing_out_d_ready),
    .auto_coupler_to_bootrom_fragmenter_anon_out_a_valid
      (_cbus_auto_coupler_to_bootrom_fragmenter_anon_out_a_valid),
    .auto_coupler_to_bootrom_fragmenter_anon_out_a_bits_opcode
      (_cbus_auto_coupler_to_bootrom_fragmenter_anon_out_a_bits_opcode),
    .auto_coupler_to_bootrom_fragmenter_anon_out_a_bits_param
      (_cbus_auto_coupler_to_bootrom_fragmenter_anon_out_a_bits_param),
    .auto_coupler_to_bootrom_fragmenter_anon_out_a_bits_size
      (_cbus_auto_coupler_to_bootrom_fragmenter_anon_out_a_bits_size),
    .auto_coupler_to_bootrom_fragmenter_anon_out_a_bits_source
      (_cbus_auto_coupler_to_bootrom_fragmenter_anon_out_a_bits_source),
    .auto_coupler_to_bootrom_fragmenter_anon_out_a_bits_address
      (_cbus_auto_coupler_to_bootrom_fragmenter_anon_out_a_bits_address),
    .auto_coupler_to_bootrom_fragmenter_anon_out_a_bits_mask
      (_cbus_auto_coupler_to_bootrom_fragmenter_anon_out_a_bits_mask),
    .auto_coupler_to_bootrom_fragmenter_anon_out_a_bits_corrupt
      (_cbus_auto_coupler_to_bootrom_fragmenter_anon_out_a_bits_corrupt),
    .auto_coupler_to_bootrom_fragmenter_anon_out_d_ready
      (_cbus_auto_coupler_to_bootrom_fragmenter_anon_out_d_ready),
    .auto_coupler_to_debug_fragmenter_anon_out_a_valid
      (_cbus_auto_coupler_to_debug_fragmenter_anon_out_a_valid),
    .auto_coupler_to_debug_fragmenter_anon_out_a_bits_opcode
      (_cbus_auto_coupler_to_debug_fragmenter_anon_out_a_bits_opcode),
    .auto_coupler_to_debug_fragmenter_anon_out_a_bits_param
      (_cbus_auto_coupler_to_debug_fragmenter_anon_out_a_bits_param),
    .auto_coupler_to_debug_fragmenter_anon_out_a_bits_size
      (_cbus_auto_coupler_to_debug_fragmenter_anon_out_a_bits_size),
    .auto_coupler_to_debug_fragmenter_anon_out_a_bits_source
      (_cbus_auto_coupler_to_debug_fragmenter_anon_out_a_bits_source),
    .auto_coupler_to_debug_fragmenter_anon_out_a_bits_address
      (_cbus_auto_coupler_to_debug_fragmenter_anon_out_a_bits_address),
    .auto_coupler_to_debug_fragmenter_anon_out_a_bits_mask
      (_cbus_auto_coupler_to_debug_fragmenter_anon_out_a_bits_mask),
    .auto_coupler_to_debug_fragmenter_anon_out_a_bits_data
      (_cbus_auto_coupler_to_debug_fragmenter_anon_out_a_bits_data),
    .auto_coupler_to_debug_fragmenter_anon_out_a_bits_corrupt
      (_cbus_auto_coupler_to_debug_fragmenter_anon_out_a_bits_corrupt),
    .auto_coupler_to_debug_fragmenter_anon_out_d_ready
      (_cbus_auto_coupler_to_debug_fragmenter_anon_out_d_ready),
    .auto_coupler_to_plic_fragmenter_anon_out_a_valid
      (_cbus_auto_coupler_to_plic_fragmenter_anon_out_a_valid),
    .auto_coupler_to_plic_fragmenter_anon_out_a_bits_opcode
      (_cbus_auto_coupler_to_plic_fragmenter_anon_out_a_bits_opcode),
    .auto_coupler_to_plic_fragmenter_anon_out_a_bits_param
      (_cbus_auto_coupler_to_plic_fragmenter_anon_out_a_bits_param),
    .auto_coupler_to_plic_fragmenter_anon_out_a_bits_size
      (_cbus_auto_coupler_to_plic_fragmenter_anon_out_a_bits_size),
    .auto_coupler_to_plic_fragmenter_anon_out_a_bits_source
      (_cbus_auto_coupler_to_plic_fragmenter_anon_out_a_bits_source),
    .auto_coupler_to_plic_fragmenter_anon_out_a_bits_address
      (_cbus_auto_coupler_to_plic_fragmenter_anon_out_a_bits_address),
    .auto_coupler_to_plic_fragmenter_anon_out_a_bits_mask
      (_cbus_auto_coupler_to_plic_fragmenter_anon_out_a_bits_mask),
    .auto_coupler_to_plic_fragmenter_anon_out_a_bits_data
      (_cbus_auto_coupler_to_plic_fragmenter_anon_out_a_bits_data),
    .auto_coupler_to_plic_fragmenter_anon_out_a_bits_corrupt
      (_cbus_auto_coupler_to_plic_fragmenter_anon_out_a_bits_corrupt),
    .auto_coupler_to_plic_fragmenter_anon_out_d_ready
      (_cbus_auto_coupler_to_plic_fragmenter_anon_out_d_ready),
    .auto_coupler_to_clint_fragmenter_anon_out_a_valid
      (_cbus_auto_coupler_to_clint_fragmenter_anon_out_a_valid),
    .auto_coupler_to_clint_fragmenter_anon_out_a_bits_opcode
      (_cbus_auto_coupler_to_clint_fragmenter_anon_out_a_bits_opcode),
    .auto_coupler_to_clint_fragmenter_anon_out_a_bits_param
      (_cbus_auto_coupler_to_clint_fragmenter_anon_out_a_bits_param),
    .auto_coupler_to_clint_fragmenter_anon_out_a_bits_size
      (_cbus_auto_coupler_to_clint_fragmenter_anon_out_a_bits_size),
    .auto_coupler_to_clint_fragmenter_anon_out_a_bits_source
      (_cbus_auto_coupler_to_clint_fragmenter_anon_out_a_bits_source),
    .auto_coupler_to_clint_fragmenter_anon_out_a_bits_address
      (_cbus_auto_coupler_to_clint_fragmenter_anon_out_a_bits_address),
    .auto_coupler_to_clint_fragmenter_anon_out_a_bits_mask
      (_cbus_auto_coupler_to_clint_fragmenter_anon_out_a_bits_mask),
    .auto_coupler_to_clint_fragmenter_anon_out_a_bits_data
      (_cbus_auto_coupler_to_clint_fragmenter_anon_out_a_bits_data),
    .auto_coupler_to_clint_fragmenter_anon_out_a_bits_corrupt
      (_cbus_auto_coupler_to_clint_fragmenter_anon_out_a_bits_corrupt),
    .auto_coupler_to_clint_fragmenter_anon_out_d_ready
      (_cbus_auto_coupler_to_clint_fragmenter_anon_out_d_ready),
    .auto_fixedClockNode_anon_out_3_clock
      (_cbus_auto_fixedClockNode_anon_out_3_clock),
    .auto_fixedClockNode_anon_out_3_reset
      (_cbus_auto_fixedClockNode_anon_out_3_reset),
    .auto_fixedClockNode_anon_out_1_clock
      (_cbus_auto_fixedClockNode_anon_out_1_clock),
    .auto_fixedClockNode_anon_out_1_reset
      (_cbus_auto_fixedClockNode_anon_out_1_reset),
    .auto_fixedClockNode_anon_out_0_clock
      (_cbus_auto_fixedClockNode_anon_out_0_clock),
    .auto_fixedClockNode_anon_out_0_reset
      (_cbus_auto_fixedClockNode_anon_out_0_reset),
    .auto_bus_xing_in_a_ready
      (_cbus_auto_bus_xing_in_a_ready),
    .auto_bus_xing_in_d_valid
      (_cbus_auto_bus_xing_in_d_valid),
    .auto_bus_xing_in_d_bits_opcode
      (_cbus_auto_bus_xing_in_d_bits_opcode),
    .auto_bus_xing_in_d_bits_param
      (_cbus_auto_bus_xing_in_d_bits_param),
    .auto_bus_xing_in_d_bits_size
      (_cbus_auto_bus_xing_in_d_bits_size),
    .auto_bus_xing_in_d_bits_source
      (_cbus_auto_bus_xing_in_d_bits_source),
    .auto_bus_xing_in_d_bits_sink
      (_cbus_auto_bus_xing_in_d_bits_sink),
    .auto_bus_xing_in_d_bits_denied
      (_cbus_auto_bus_xing_in_d_bits_denied),
    .auto_bus_xing_in_d_bits_data
      (_cbus_auto_bus_xing_in_d_bits_data),
    .auto_bus_xing_in_d_bits_corrupt
      (_cbus_auto_bus_xing_in_d_bits_corrupt)
  );
  MemoryBus mbus (
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_ready
      (mem_axi4_0_aw_ready),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_ready
      (mem_axi4_0_w_ready),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_b_valid
      (mem_axi4_0_b_valid),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_b_bits_id
      (mem_axi4_0_b_bits_id),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_b_bits_resp
      (mem_axi4_0_b_bits_resp),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_ready
      (mem_axi4_0_ar_ready),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_valid
      (mem_axi4_0_r_valid),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_bits_id
      (mem_axi4_0_r_bits_id),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_bits_data
      (mem_axi4_0_r_bits_data),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_bits_resp
      (mem_axi4_0_r_bits_resp),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_bits_last
      (mem_axi4_0_r_bits_last),
    .auto_mbus_clock_groups_in_member_mbus_0_clock
      (_coh_wrapper_auto_coh_clock_groups_out_member_mbus_0_clock),
    .auto_mbus_clock_groups_in_member_mbus_0_reset
      (_coh_wrapper_auto_coh_clock_groups_out_member_mbus_0_reset),
    .auto_bus_xing_in_a_valid
      (_coh_wrapper_auto_coupler_to_bus_named_mbus_bus_xing_out_a_valid),
    .auto_bus_xing_in_a_bits_opcode
      (_coh_wrapper_auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_opcode),
    .auto_bus_xing_in_a_bits_param
      (_coh_wrapper_auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_param),
    .auto_bus_xing_in_a_bits_size
      (_coh_wrapper_auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_size),
    .auto_bus_xing_in_a_bits_source
      (_coh_wrapper_auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_source),
    .auto_bus_xing_in_a_bits_address
      (_coh_wrapper_auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_address),
    .auto_bus_xing_in_a_bits_user_amba_prot_bufferable
      (_coh_wrapper_auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_user_amba_prot_bufferable),
    .auto_bus_xing_in_a_bits_user_amba_prot_modifiable
      (_coh_wrapper_auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_user_amba_prot_modifiable),
    .auto_bus_xing_in_a_bits_user_amba_prot_readalloc
      (_coh_wrapper_auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_user_amba_prot_readalloc),
    .auto_bus_xing_in_a_bits_user_amba_prot_writealloc
      (_coh_wrapper_auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_user_amba_prot_writealloc),
    .auto_bus_xing_in_a_bits_user_amba_prot_privileged
      (_coh_wrapper_auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_user_amba_prot_privileged),
    .auto_bus_xing_in_a_bits_user_amba_prot_secure
      (_coh_wrapper_auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_user_amba_prot_secure),
    .auto_bus_xing_in_a_bits_user_amba_prot_fetch
      (_coh_wrapper_auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_user_amba_prot_fetch),
    .auto_bus_xing_in_a_bits_mask
      (_coh_wrapper_auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_mask),
    .auto_bus_xing_in_a_bits_data
      (_coh_wrapper_auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_data),
    .auto_bus_xing_in_d_ready
      (_coh_wrapper_auto_coupler_to_bus_named_mbus_bus_xing_out_d_ready),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_valid
      (mem_axi4_0_aw_valid),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_id
      (mem_axi4_0_aw_bits_id),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_addr
      (mem_axi4_0_aw_bits_addr),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_len
      (mem_axi4_0_aw_bits_len),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_size
      (mem_axi4_0_aw_bits_size),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_burst
      (mem_axi4_0_aw_bits_burst),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_lock
      (mem_axi4_0_aw_bits_lock),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_cache
      (mem_axi4_0_aw_bits_cache),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_prot
      (mem_axi4_0_aw_bits_prot),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_qos
      (mem_axi4_0_aw_bits_qos),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_valid
      (mem_axi4_0_w_valid),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_bits_data
      (mem_axi4_0_w_bits_data),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_bits_strb
      (mem_axi4_0_w_bits_strb),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_bits_last
      (mem_axi4_0_w_bits_last),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_b_ready
      (mem_axi4_0_b_ready),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_valid
      (mem_axi4_0_ar_valid),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_id
      (mem_axi4_0_ar_bits_id),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_addr
      (mem_axi4_0_ar_bits_addr),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_len
      (mem_axi4_0_ar_bits_len),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_size
      (mem_axi4_0_ar_bits_size),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_burst
      (mem_axi4_0_ar_bits_burst),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_lock
      (mem_axi4_0_ar_bits_lock),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_cache
      (mem_axi4_0_ar_bits_cache),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_prot
      (mem_axi4_0_ar_bits_prot),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_qos
      (mem_axi4_0_ar_bits_qos),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_ready
      (mem_axi4_0_r_ready),
    .auto_bus_xing_in_a_ready
      (_mbus_auto_bus_xing_in_a_ready),
    .auto_bus_xing_in_d_valid
      (_mbus_auto_bus_xing_in_d_valid),
    .auto_bus_xing_in_d_bits_opcode
      (_mbus_auto_bus_xing_in_d_bits_opcode),
    .auto_bus_xing_in_d_bits_size
      (_mbus_auto_bus_xing_in_d_bits_size),
    .auto_bus_xing_in_d_bits_source
      (_mbus_auto_bus_xing_in_d_bits_source),
    .auto_bus_xing_in_d_bits_denied
      (_mbus_auto_bus_xing_in_d_bits_denied),
    .auto_bus_xing_in_d_bits_data
      (_mbus_auto_bus_xing_in_d_bits_data),
    .auto_bus_xing_in_d_bits_corrupt
      (_mbus_auto_bus_xing_in_d_bits_corrupt)
  );
  CoherenceManagerWrapper coh_wrapper (
    .auto_coupler_to_bus_named_mbus_bus_xing_out_a_ready
      (_mbus_auto_bus_xing_in_a_ready),
    .auto_coupler_to_bus_named_mbus_bus_xing_out_d_valid
      (_mbus_auto_bus_xing_in_d_valid),
    .auto_coupler_to_bus_named_mbus_bus_xing_out_d_bits_opcode
      (_mbus_auto_bus_xing_in_d_bits_opcode),
    .auto_coupler_to_bus_named_mbus_bus_xing_out_d_bits_size
      (_mbus_auto_bus_xing_in_d_bits_size),
    .auto_coupler_to_bus_named_mbus_bus_xing_out_d_bits_source
      (_mbus_auto_bus_xing_in_d_bits_source),
    .auto_coupler_to_bus_named_mbus_bus_xing_out_d_bits_denied
      (_mbus_auto_bus_xing_in_d_bits_denied),
    .auto_coupler_to_bus_named_mbus_bus_xing_out_d_bits_data
      (_mbus_auto_bus_xing_in_d_bits_data),
    .auto_coupler_to_bus_named_mbus_bus_xing_out_d_bits_corrupt
      (_mbus_auto_bus_xing_in_d_bits_corrupt),
    .auto_coherent_jbar_anon_in_a_valid
      (_sbus_auto_coupler_to_bus_named_coh_widget_anon_out_a_valid),
    .auto_coherent_jbar_anon_in_a_bits_opcode
      (_sbus_auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_opcode),
    .auto_coherent_jbar_anon_in_a_bits_param
      (_sbus_auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_param),
    .auto_coherent_jbar_anon_in_a_bits_size
      (_sbus_auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_size),
    .auto_coherent_jbar_anon_in_a_bits_source
      (_sbus_auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_source),
    .auto_coherent_jbar_anon_in_a_bits_address
      (_sbus_auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_address),
    .auto_coherent_jbar_anon_in_a_bits_user_amba_prot_bufferable
      (_sbus_auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_user_amba_prot_bufferable),
    .auto_coherent_jbar_anon_in_a_bits_user_amba_prot_modifiable
      (_sbus_auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_user_amba_prot_modifiable),
    .auto_coherent_jbar_anon_in_a_bits_user_amba_prot_readalloc
      (_sbus_auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_user_amba_prot_readalloc),
    .auto_coherent_jbar_anon_in_a_bits_user_amba_prot_writealloc
      (_sbus_auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_user_amba_prot_writealloc),
    .auto_coherent_jbar_anon_in_a_bits_user_amba_prot_privileged
      (_sbus_auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_user_amba_prot_privileged),
    .auto_coherent_jbar_anon_in_a_bits_user_amba_prot_secure
      (_sbus_auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_user_amba_prot_secure),
    .auto_coherent_jbar_anon_in_a_bits_user_amba_prot_fetch
      (_sbus_auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_user_amba_prot_fetch),
    .auto_coherent_jbar_anon_in_a_bits_mask
      (_sbus_auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_mask),
    .auto_coherent_jbar_anon_in_a_bits_data
      (_sbus_auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_data),
    .auto_coherent_jbar_anon_in_a_bits_corrupt
      (_sbus_auto_coupler_to_bus_named_coh_widget_anon_out_a_bits_corrupt),
    .auto_coherent_jbar_anon_in_b_ready
      (_sbus_auto_coupler_to_bus_named_coh_widget_anon_out_b_ready),
    .auto_coherent_jbar_anon_in_c_valid
      (_sbus_auto_coupler_to_bus_named_coh_widget_anon_out_c_valid),
    .auto_coherent_jbar_anon_in_c_bits_opcode
      (_sbus_auto_coupler_to_bus_named_coh_widget_anon_out_c_bits_opcode),
    .auto_coherent_jbar_anon_in_c_bits_param
      (_sbus_auto_coupler_to_bus_named_coh_widget_anon_out_c_bits_param),
    .auto_coherent_jbar_anon_in_c_bits_size
      (_sbus_auto_coupler_to_bus_named_coh_widget_anon_out_c_bits_size),
    .auto_coherent_jbar_anon_in_c_bits_source
      (_sbus_auto_coupler_to_bus_named_coh_widget_anon_out_c_bits_source),
    .auto_coherent_jbar_anon_in_c_bits_address
      (_sbus_auto_coupler_to_bus_named_coh_widget_anon_out_c_bits_address),
    .auto_coherent_jbar_anon_in_c_bits_data
      (_sbus_auto_coupler_to_bus_named_coh_widget_anon_out_c_bits_data),
    .auto_coherent_jbar_anon_in_c_bits_corrupt
      (_sbus_auto_coupler_to_bus_named_coh_widget_anon_out_c_bits_corrupt),
    .auto_coherent_jbar_anon_in_d_ready
      (_sbus_auto_coupler_to_bus_named_coh_widget_anon_out_d_ready),
    .auto_coherent_jbar_anon_in_e_valid
      (_sbus_auto_coupler_to_bus_named_coh_widget_anon_out_e_valid),
    .auto_coherent_jbar_anon_in_e_bits_sink
      (_sbus_auto_coupler_to_bus_named_coh_widget_anon_out_e_bits_sink),
    .auto_coh_clock_groups_in_member_coh_1_clock
      (_sbus_auto_sbus_clock_groups_out_2_member_coh_1_clock),
    .auto_coh_clock_groups_in_member_coh_1_reset
      (_sbus_auto_sbus_clock_groups_out_2_member_coh_1_reset),
    .auto_coh_clock_groups_in_member_coh_0_clock
      (_sbus_auto_sbus_clock_groups_out_2_member_coh_0_clock),
    .auto_coh_clock_groups_in_member_coh_0_reset
      (_sbus_auto_sbus_clock_groups_out_2_member_coh_0_reset),
    .auto_coupler_to_bus_named_mbus_bus_xing_out_a_valid
      (_coh_wrapper_auto_coupler_to_bus_named_mbus_bus_xing_out_a_valid),
    .auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_opcode
      (_coh_wrapper_auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_opcode),
    .auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_param
      (_coh_wrapper_auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_param),
    .auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_size
      (_coh_wrapper_auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_size),
    .auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_source
      (_coh_wrapper_auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_source),
    .auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_address
      (_coh_wrapper_auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_address),
    .auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_user_amba_prot_bufferable
      (_coh_wrapper_auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_user_amba_prot_bufferable),
    .auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_user_amba_prot_modifiable
      (_coh_wrapper_auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_user_amba_prot_modifiable),
    .auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_user_amba_prot_readalloc
      (_coh_wrapper_auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_user_amba_prot_readalloc),
    .auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_user_amba_prot_writealloc
      (_coh_wrapper_auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_user_amba_prot_writealloc),
    .auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_user_amba_prot_privileged
      (_coh_wrapper_auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_user_amba_prot_privileged),
    .auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_user_amba_prot_secure
      (_coh_wrapper_auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_user_amba_prot_secure),
    .auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_user_amba_prot_fetch
      (_coh_wrapper_auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_user_amba_prot_fetch),
    .auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_mask
      (_coh_wrapper_auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_mask),
    .auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_data
      (_coh_wrapper_auto_coupler_to_bus_named_mbus_bus_xing_out_a_bits_data),
    .auto_coupler_to_bus_named_mbus_bus_xing_out_d_ready
      (_coh_wrapper_auto_coupler_to_bus_named_mbus_bus_xing_out_d_ready),
    .auto_coherent_jbar_anon_in_a_ready
      (_coh_wrapper_auto_coherent_jbar_anon_in_a_ready),
    .auto_coherent_jbar_anon_in_b_valid
      (_coh_wrapper_auto_coherent_jbar_anon_in_b_valid),
    .auto_coherent_jbar_anon_in_b_bits_param
      (_coh_wrapper_auto_coherent_jbar_anon_in_b_bits_param),
    .auto_coherent_jbar_anon_in_b_bits_address
      (_coh_wrapper_auto_coherent_jbar_anon_in_b_bits_address),
    .auto_coherent_jbar_anon_in_c_ready
      (_coh_wrapper_auto_coherent_jbar_anon_in_c_ready),
    .auto_coherent_jbar_anon_in_d_valid
      (_coh_wrapper_auto_coherent_jbar_anon_in_d_valid),
    .auto_coherent_jbar_anon_in_d_bits_opcode
      (_coh_wrapper_auto_coherent_jbar_anon_in_d_bits_opcode),
    .auto_coherent_jbar_anon_in_d_bits_param
      (_coh_wrapper_auto_coherent_jbar_anon_in_d_bits_param),
    .auto_coherent_jbar_anon_in_d_bits_size
      (_coh_wrapper_auto_coherent_jbar_anon_in_d_bits_size),
    .auto_coherent_jbar_anon_in_d_bits_source
      (_coh_wrapper_auto_coherent_jbar_anon_in_d_bits_source),
    .auto_coherent_jbar_anon_in_d_bits_sink
      (_coh_wrapper_auto_coherent_jbar_anon_in_d_bits_sink),
    .auto_coherent_jbar_anon_in_d_bits_denied
      (_coh_wrapper_auto_coherent_jbar_anon_in_d_bits_denied),
    .auto_coherent_jbar_anon_in_d_bits_data
      (_coh_wrapper_auto_coherent_jbar_anon_in_d_bits_data),
    .auto_coherent_jbar_anon_in_d_bits_corrupt
      (_coh_wrapper_auto_coherent_jbar_anon_in_d_bits_corrupt),
    .auto_coh_clock_groups_out_member_mbus_0_clock
      (_coh_wrapper_auto_coh_clock_groups_out_member_mbus_0_clock),
    .auto_coh_clock_groups_out_member_mbus_0_reset
      (_coh_wrapper_auto_coh_clock_groups_out_member_mbus_0_reset)
  );
  TilePRCIDomain tile_prci_domain (
    .auto_intsink_in_sync_0                         (_tlDM_auto_dmOuter_int_out_sync_0),
    .auto_element_reset_domain_rockettile_hartid_in (_tileHartIdNexusNode_auto_out),
    .auto_int_in_clock_xing_in_2_sync_0
      (_plic_domain_auto_int_in_clock_xing_out_1_sync_0),
    .auto_int_in_clock_xing_in_1_sync_0
      (_plic_domain_auto_int_in_clock_xing_out_0_sync_0),
    .auto_int_in_clock_xing_in_0_sync_0
      (_clint_domain_auto_int_in_clock_xing_out_sync_0),
    .auto_int_in_clock_xing_in_0_sync_1
      (_clint_domain_auto_int_in_clock_xing_out_sync_1),
    .auto_tl_master_clock_xing_out_a_ready
      (_sbus_auto_coupler_from_rockettile_tl_master_clock_xing_in_a_ready),
    .auto_tl_master_clock_xing_out_b_valid
      (_sbus_auto_coupler_from_rockettile_tl_master_clock_xing_in_b_valid),
    .auto_tl_master_clock_xing_out_b_bits_param
      (_sbus_auto_coupler_from_rockettile_tl_master_clock_xing_in_b_bits_param),
    .auto_tl_master_clock_xing_out_b_bits_address
      (_sbus_auto_coupler_from_rockettile_tl_master_clock_xing_in_b_bits_address),
    .auto_tl_master_clock_xing_out_c_ready
      (_sbus_auto_coupler_from_rockettile_tl_master_clock_xing_in_c_ready),
    .auto_tl_master_clock_xing_out_d_valid
      (_sbus_auto_coupler_from_rockettile_tl_master_clock_xing_in_d_valid),
    .auto_tl_master_clock_xing_out_d_bits_opcode
      (_sbus_auto_coupler_from_rockettile_tl_master_clock_xing_in_d_bits_opcode),
    .auto_tl_master_clock_xing_out_d_bits_param
      (_sbus_auto_coupler_from_rockettile_tl_master_clock_xing_in_d_bits_param),
    .auto_tl_master_clock_xing_out_d_bits_size
      (_sbus_auto_coupler_from_rockettile_tl_master_clock_xing_in_d_bits_size),
    .auto_tl_master_clock_xing_out_d_bits_source
      (_sbus_auto_coupler_from_rockettile_tl_master_clock_xing_in_d_bits_source),
    .auto_tl_master_clock_xing_out_d_bits_sink
      (_sbus_auto_coupler_from_rockettile_tl_master_clock_xing_in_d_bits_sink),
    .auto_tl_master_clock_xing_out_d_bits_denied
      (_sbus_auto_coupler_from_rockettile_tl_master_clock_xing_in_d_bits_denied),
    .auto_tl_master_clock_xing_out_d_bits_data
      (_sbus_auto_coupler_from_rockettile_tl_master_clock_xing_in_d_bits_data),
    .auto_tl_master_clock_xing_out_d_bits_corrupt
      (_sbus_auto_coupler_from_rockettile_tl_master_clock_xing_in_d_bits_corrupt),
    .auto_tap_clock_in_clock
      (_sbus_auto_fixedClockNode_anon_out_1_clock),
    .auto_tap_clock_in_reset
      (_sbus_auto_fixedClockNode_anon_out_1_reset),
    .auto_tl_master_clock_xing_out_a_valid
      (_tile_prci_domain_auto_tl_master_clock_xing_out_a_valid),
    .auto_tl_master_clock_xing_out_a_bits_opcode
      (_tile_prci_domain_auto_tl_master_clock_xing_out_a_bits_opcode),
    .auto_tl_master_clock_xing_out_a_bits_param
      (_tile_prci_domain_auto_tl_master_clock_xing_out_a_bits_param),
    .auto_tl_master_clock_xing_out_a_bits_size
      (_tile_prci_domain_auto_tl_master_clock_xing_out_a_bits_size),
    .auto_tl_master_clock_xing_out_a_bits_source
      (_tile_prci_domain_auto_tl_master_clock_xing_out_a_bits_source),
    .auto_tl_master_clock_xing_out_a_bits_address
      (_tile_prci_domain_auto_tl_master_clock_xing_out_a_bits_address),
    .auto_tl_master_clock_xing_out_a_bits_mask
      (_tile_prci_domain_auto_tl_master_clock_xing_out_a_bits_mask),
    .auto_tl_master_clock_xing_out_a_bits_data
      (_tile_prci_domain_auto_tl_master_clock_xing_out_a_bits_data),
    .auto_tl_master_clock_xing_out_a_bits_corrupt
      (_tile_prci_domain_auto_tl_master_clock_xing_out_a_bits_corrupt),
    .auto_tl_master_clock_xing_out_b_ready
      (_tile_prci_domain_auto_tl_master_clock_xing_out_b_ready),
    .auto_tl_master_clock_xing_out_c_valid
      (_tile_prci_domain_auto_tl_master_clock_xing_out_c_valid),
    .auto_tl_master_clock_xing_out_c_bits_opcode
      (_tile_prci_domain_auto_tl_master_clock_xing_out_c_bits_opcode),
    .auto_tl_master_clock_xing_out_c_bits_param
      (_tile_prci_domain_auto_tl_master_clock_xing_out_c_bits_param),
    .auto_tl_master_clock_xing_out_c_bits_size
      (_tile_prci_domain_auto_tl_master_clock_xing_out_c_bits_size),
    .auto_tl_master_clock_xing_out_c_bits_source
      (_tile_prci_domain_auto_tl_master_clock_xing_out_c_bits_source),
    .auto_tl_master_clock_xing_out_c_bits_address
      (_tile_prci_domain_auto_tl_master_clock_xing_out_c_bits_address),
    .auto_tl_master_clock_xing_out_c_bits_data
      (_tile_prci_domain_auto_tl_master_clock_xing_out_c_bits_data),
    .auto_tl_master_clock_xing_out_c_bits_corrupt
      (_tile_prci_domain_auto_tl_master_clock_xing_out_c_bits_corrupt),
    .auto_tl_master_clock_xing_out_d_ready
      (_tile_prci_domain_auto_tl_master_clock_xing_out_d_ready),
    .auto_tl_master_clock_xing_out_e_valid
      (_tile_prci_domain_auto_tl_master_clock_xing_out_e_valid),
    .auto_tl_master_clock_xing_out_e_bits_sink
      (_tile_prci_domain_auto_tl_master_clock_xing_out_e_bits_sink)
  );
  BundleBridgeNexus_11 tileHartIdNexusNode (
    .auto_out (_tileHartIdNexusNode_auto_out)
  );
  CLINTClockSinkDomain clint_domain (
    .auto_clint_in_a_valid
      (_cbus_auto_coupler_to_clint_fragmenter_anon_out_a_valid),
    .auto_clint_in_a_bits_opcode
      (_cbus_auto_coupler_to_clint_fragmenter_anon_out_a_bits_opcode),
    .auto_clint_in_a_bits_param
      (_cbus_auto_coupler_to_clint_fragmenter_anon_out_a_bits_param),
    .auto_clint_in_a_bits_size
      (_cbus_auto_coupler_to_clint_fragmenter_anon_out_a_bits_size),
    .auto_clint_in_a_bits_source
      (_cbus_auto_coupler_to_clint_fragmenter_anon_out_a_bits_source),
    .auto_clint_in_a_bits_address
      (_cbus_auto_coupler_to_clint_fragmenter_anon_out_a_bits_address),
    .auto_clint_in_a_bits_mask
      (_cbus_auto_coupler_to_clint_fragmenter_anon_out_a_bits_mask),
    .auto_clint_in_a_bits_data
      (_cbus_auto_coupler_to_clint_fragmenter_anon_out_a_bits_data),
    .auto_clint_in_a_bits_corrupt
      (_cbus_auto_coupler_to_clint_fragmenter_anon_out_a_bits_corrupt),
    .auto_clint_in_d_ready
      (_cbus_auto_coupler_to_clint_fragmenter_anon_out_d_ready),
    .auto_clock_in_clock               (_cbus_auto_fixedClockNode_anon_out_0_clock),
    .auto_clock_in_reset               (_cbus_auto_fixedClockNode_anon_out_0_reset),
    .tick                              (int_rtc_tick),
    .auto_clint_in_a_ready             (_clint_domain_auto_clint_in_a_ready),
    .auto_clint_in_d_valid             (_clint_domain_auto_clint_in_d_valid),
    .auto_clint_in_d_bits_opcode       (_clint_domain_auto_clint_in_d_bits_opcode),
    .auto_clint_in_d_bits_size         (_clint_domain_auto_clint_in_d_bits_size),
    .auto_clint_in_d_bits_source       (_clint_domain_auto_clint_in_d_bits_source),
    .auto_clint_in_d_bits_data         (_clint_domain_auto_clint_in_d_bits_data),
    .auto_int_in_clock_xing_out_sync_0 (_clint_domain_auto_int_in_clock_xing_out_sync_0),
    .auto_int_in_clock_xing_out_sync_1 (_clint_domain_auto_int_in_clock_xing_out_sync_1),
    .clock                             (_clint_domain_clock),
    .reset                             (_clint_domain_reset)
  );
  PLICClockSinkDomain plic_domain (
    .auto_plic_int_in_0                  (_ibus_int_bus_auto_anon_out_0),
    .auto_plic_int_in_1                  (_ibus_int_bus_auto_anon_out_1),
    .auto_plic_in_a_valid
      (_cbus_auto_coupler_to_plic_fragmenter_anon_out_a_valid),
    .auto_plic_in_a_bits_opcode
      (_cbus_auto_coupler_to_plic_fragmenter_anon_out_a_bits_opcode),
    .auto_plic_in_a_bits_param
      (_cbus_auto_coupler_to_plic_fragmenter_anon_out_a_bits_param),
    .auto_plic_in_a_bits_size
      (_cbus_auto_coupler_to_plic_fragmenter_anon_out_a_bits_size),
    .auto_plic_in_a_bits_source
      (_cbus_auto_coupler_to_plic_fragmenter_anon_out_a_bits_source),
    .auto_plic_in_a_bits_address
      (_cbus_auto_coupler_to_plic_fragmenter_anon_out_a_bits_address),
    .auto_plic_in_a_bits_mask
      (_cbus_auto_coupler_to_plic_fragmenter_anon_out_a_bits_mask),
    .auto_plic_in_a_bits_data
      (_cbus_auto_coupler_to_plic_fragmenter_anon_out_a_bits_data),
    .auto_plic_in_a_bits_corrupt
      (_cbus_auto_coupler_to_plic_fragmenter_anon_out_a_bits_corrupt),
    .auto_plic_in_d_ready
      (_cbus_auto_coupler_to_plic_fragmenter_anon_out_d_ready),
    .auto_clock_in_clock                 (_cbus_auto_fixedClockNode_anon_out_1_clock),
    .auto_clock_in_reset                 (_cbus_auto_fixedClockNode_anon_out_1_reset),
    .auto_plic_in_a_ready                (_plic_domain_auto_plic_in_a_ready),
    .auto_plic_in_d_valid                (_plic_domain_auto_plic_in_d_valid),
    .auto_plic_in_d_bits_opcode          (_plic_domain_auto_plic_in_d_bits_opcode),
    .auto_plic_in_d_bits_size            (_plic_domain_auto_plic_in_d_bits_size),
    .auto_plic_in_d_bits_source          (_plic_domain_auto_plic_in_d_bits_source),
    .auto_plic_in_d_bits_data            (_plic_domain_auto_plic_in_d_bits_data),
    .auto_int_in_clock_xing_out_1_sync_0
      (_plic_domain_auto_int_in_clock_xing_out_1_sync_0),
    .auto_int_in_clock_xing_out_0_sync_0
      (_plic_domain_auto_int_in_clock_xing_out_0_sync_0)
  );
  TLDebugModule tlDM (
    .auto_dmInner_dmInner_tl_in_a_valid
      (_cbus_auto_coupler_to_debug_fragmenter_anon_out_a_valid),
    .auto_dmInner_dmInner_tl_in_a_bits_opcode
      (_cbus_auto_coupler_to_debug_fragmenter_anon_out_a_bits_opcode),
    .auto_dmInner_dmInner_tl_in_a_bits_param
      (_cbus_auto_coupler_to_debug_fragmenter_anon_out_a_bits_param),
    .auto_dmInner_dmInner_tl_in_a_bits_size
      (_cbus_auto_coupler_to_debug_fragmenter_anon_out_a_bits_size),
    .auto_dmInner_dmInner_tl_in_a_bits_source
      (_cbus_auto_coupler_to_debug_fragmenter_anon_out_a_bits_source),
    .auto_dmInner_dmInner_tl_in_a_bits_address
      (_cbus_auto_coupler_to_debug_fragmenter_anon_out_a_bits_address),
    .auto_dmInner_dmInner_tl_in_a_bits_mask
      (_cbus_auto_coupler_to_debug_fragmenter_anon_out_a_bits_mask),
    .auto_dmInner_dmInner_tl_in_a_bits_data
      (_cbus_auto_coupler_to_debug_fragmenter_anon_out_a_bits_data),
    .auto_dmInner_dmInner_tl_in_a_bits_corrupt
      (_cbus_auto_coupler_to_debug_fragmenter_anon_out_a_bits_corrupt),
    .auto_dmInner_dmInner_tl_in_d_ready
      (_cbus_auto_coupler_to_debug_fragmenter_anon_out_d_ready),
    .io_debug_clock                            (debug_clock),
    .io_debug_reset                            (debug_reset),
    .io_ctrl_dmactiveAck                       (debug_dmactiveAck),
    .io_dmi_dmi_req_valid                      (debug_clockeddmi_dmi_req_valid),
    .io_dmi_dmi_req_bits_addr                  (debug_clockeddmi_dmi_req_bits_addr),
    .io_dmi_dmi_req_bits_data                  (debug_clockeddmi_dmi_req_bits_data),
    .io_dmi_dmi_req_bits_op                    (debug_clockeddmi_dmi_req_bits_op),
    .io_dmi_dmi_resp_ready                     (debug_clockeddmi_dmi_resp_ready),
    .io_dmi_dmiClock                           (debug_clockeddmi_dmiClock),
    .io_dmi_dmiReset                           (debug_clockeddmi_dmiReset),
    .io_hartIsInReset_0                        (resetctrl_hartIsInReset_0),
    .auto_dmInner_dmInner_tl_in_a_ready        (_tlDM_auto_dmInner_dmInner_tl_in_a_ready),
    .auto_dmInner_dmInner_tl_in_d_valid        (_tlDM_auto_dmInner_dmInner_tl_in_d_valid),
    .auto_dmInner_dmInner_tl_in_d_bits_opcode
      (_tlDM_auto_dmInner_dmInner_tl_in_d_bits_opcode),
    .auto_dmInner_dmInner_tl_in_d_bits_size
      (_tlDM_auto_dmInner_dmInner_tl_in_d_bits_size),
    .auto_dmInner_dmInner_tl_in_d_bits_source
      (_tlDM_auto_dmInner_dmInner_tl_in_d_bits_source),
    .auto_dmInner_dmInner_tl_in_d_bits_data
      (_tlDM_auto_dmInner_dmInner_tl_in_d_bits_data),
    .auto_dmOuter_int_out_sync_0               (_tlDM_auto_dmOuter_int_out_sync_0),
    .io_ctrl_ndreset                           (debug_ndreset),
    .io_ctrl_dmactive                          (debug_dmactive),
    .io_dmi_dmi_req_ready                      (debug_clockeddmi_dmi_req_ready),
    .io_dmi_dmi_resp_valid                     (debug_clockeddmi_dmi_resp_valid),
    .io_dmi_dmi_resp_bits_data                 (debug_clockeddmi_dmi_resp_bits_data),
    .io_dmi_dmi_resp_bits_resp                 (debug_clockeddmi_dmi_resp_bits_resp)
  );
  BootROMClockSinkDomain bootrom_domain (
    .auto_bootrom_in_a_valid
      (_cbus_auto_coupler_to_bootrom_fragmenter_anon_out_a_valid),
    .auto_bootrom_in_a_bits_opcode
      (_cbus_auto_coupler_to_bootrom_fragmenter_anon_out_a_bits_opcode),
    .auto_bootrom_in_a_bits_param
      (_cbus_auto_coupler_to_bootrom_fragmenter_anon_out_a_bits_param),
    .auto_bootrom_in_a_bits_size
      (_cbus_auto_coupler_to_bootrom_fragmenter_anon_out_a_bits_size),
    .auto_bootrom_in_a_bits_source
      (_cbus_auto_coupler_to_bootrom_fragmenter_anon_out_a_bits_source),
    .auto_bootrom_in_a_bits_address
      (_cbus_auto_coupler_to_bootrom_fragmenter_anon_out_a_bits_address),
    .auto_bootrom_in_a_bits_mask
      (_cbus_auto_coupler_to_bootrom_fragmenter_anon_out_a_bits_mask),
    .auto_bootrom_in_a_bits_corrupt
      (_cbus_auto_coupler_to_bootrom_fragmenter_anon_out_a_bits_corrupt),
    .auto_bootrom_in_d_ready
      (_cbus_auto_coupler_to_bootrom_fragmenter_anon_out_d_ready),
    .auto_clock_in_clock            (_cbus_auto_fixedClockNode_anon_out_3_clock),
    .auto_clock_in_reset            (_cbus_auto_fixedClockNode_anon_out_3_reset),
    .auto_bootrom_in_a_ready        (_bootrom_domain_auto_bootrom_in_a_ready),
    .auto_bootrom_in_d_valid        (_bootrom_domain_auto_bootrom_in_d_valid),
    .auto_bootrom_in_d_bits_size    (_bootrom_domain_auto_bootrom_in_d_bits_size),
    .auto_bootrom_in_d_bits_source  (_bootrom_domain_auto_bootrom_in_d_bits_source),
    .auto_bootrom_in_d_bits_data    (_bootrom_domain_auto_bootrom_in_d_bits_data)
  );
endmodule

module AXI4RAM(
  input         clock,
                reset,
                auto_in_aw_valid,
  input  [3:0]  auto_in_aw_bits_id,
  input  [31:0] auto_in_aw_bits_addr,
  input         auto_in_aw_bits_echo_real_last,
                auto_in_w_valid,
  input  [63:0] auto_in_w_bits_data,
  input  [7:0]  auto_in_w_bits_strb,
  input         auto_in_b_ready,
                auto_in_ar_valid,
  input  [3:0]  auto_in_ar_bits_id,
  input  [31:0] auto_in_ar_bits_addr,
  input         auto_in_ar_bits_echo_real_last,
                auto_in_r_ready,
  output        auto_in_aw_ready,
                auto_in_w_ready,
                auto_in_b_valid,
  output [3:0]  auto_in_b_bits_id,
  output [1:0]  auto_in_b_bits_resp,
  output        auto_in_b_bits_echo_real_last,
                auto_in_ar_ready,
                auto_in_r_valid,
  output [3:0]  auto_in_r_bits_id,
  output [63:0] auto_in_r_bits_data,
  output [1:0]  auto_in_r_bits_resp,
  output        auto_in_r_bits_echo_real_last
);

  wire        nodeIn_ar_ready;
  wire        nodeIn_aw_ready;
  wire [63:0] _mem_ext_R0_data;
  wire        w_sel0 = auto_in_aw_bits_addr[31:28] == 4'h8;
  reg         w_full;
  reg  [3:0]  w_id;
  reg         w_echo_real_last;
  reg         r_sel1;
  reg         w_sel1;
  wire        _GEN = nodeIn_aw_ready & auto_in_aw_valid;
  wire        _GEN_0 = auto_in_b_ready | ~w_full;
  assign nodeIn_aw_ready = auto_in_w_valid & _GEN_0;
  reg         r_full;
  reg  [3:0]  r_id;
  reg         r_echo_real_last;
  wire        mem_rdata_MPORT_en = nodeIn_ar_ready & auto_in_ar_valid;
  reg         rdata_REG;
  reg  [7:0]  rdata_r_0;
  reg  [7:0]  rdata_r_1;
  reg  [7:0]  rdata_r_2;
  reg  [7:0]  rdata_r_3;
  reg  [7:0]  rdata_r_4;
  reg  [7:0]  rdata_r_5;
  reg  [7:0]  rdata_r_6;
  reg  [7:0]  rdata_r_7;
  assign nodeIn_ar_ready = auto_in_r_ready | ~r_full;
  always @(posedge clock) begin
    if (reset) begin
      w_full <= 1'h0;
      r_full <= 1'h0;
    end
    else begin
      w_full <= _GEN | ~(auto_in_b_ready & w_full) & w_full;
      r_full <= mem_rdata_MPORT_en | ~(auto_in_r_ready & r_full) & r_full;
    end
    if (_GEN) begin
      w_id <= auto_in_aw_bits_id;
      w_echo_real_last <= auto_in_aw_bits_echo_real_last;
    end
    r_sel1 <= auto_in_ar_bits_addr[31:28] == 4'h8;
    w_sel1 <= w_sel0;
    if (mem_rdata_MPORT_en) begin
      r_id <= auto_in_ar_bits_id;
      r_echo_real_last <= auto_in_ar_bits_echo_real_last;
    end
    rdata_REG <= mem_rdata_MPORT_en;
    if (rdata_REG) begin
      rdata_r_0 <= _mem_ext_R0_data[7:0];
      rdata_r_1 <= _mem_ext_R0_data[15:8];
      rdata_r_2 <= _mem_ext_R0_data[23:16];
      rdata_r_3 <= _mem_ext_R0_data[31:24];
      rdata_r_4 <= _mem_ext_R0_data[39:32];
      rdata_r_5 <= _mem_ext_R0_data[47:40];
      rdata_r_6 <= _mem_ext_R0_data[55:48];
      rdata_r_7 <= _mem_ext_R0_data[63:56];
    end
  end // always @(posedge)
  mem_combMem_0 mem_ext (
    .R0_addr (auto_in_ar_bits_addr[27:3]),
    .R0_en   (mem_rdata_MPORT_en),
    .R0_clk  (clock),
    .W0_addr (auto_in_aw_bits_addr[27:3]),
    .W0_en   (_GEN & w_sel0),
    .W0_clk  (clock),
    .W0_data (auto_in_w_bits_data),
    .W0_mask (auto_in_w_bits_strb),
    .R0_data (_mem_ext_R0_data)
  );
  assign auto_in_aw_ready = nodeIn_aw_ready;
  assign auto_in_w_ready = auto_in_aw_valid & _GEN_0;
  assign auto_in_b_valid = w_full;
  assign auto_in_b_bits_id = w_id;
  assign auto_in_b_bits_resp = w_sel1 ? 2'h0 : 2'h3;
  assign auto_in_b_bits_echo_real_last = w_echo_real_last;
  assign auto_in_ar_ready = nodeIn_ar_ready;
  assign auto_in_r_valid = r_full;
  assign auto_in_r_bits_id = r_id;
  assign auto_in_r_bits_data =
    {rdata_REG ? _mem_ext_R0_data[63:56] : rdata_r_7,
     rdata_REG ? _mem_ext_R0_data[55:48] : rdata_r_6,
     rdata_REG ? _mem_ext_R0_data[47:40] : rdata_r_5,
     rdata_REG ? _mem_ext_R0_data[39:32] : rdata_r_4,
     rdata_REG ? _mem_ext_R0_data[31:24] : rdata_r_3,
     rdata_REG ? _mem_ext_R0_data[23:16] : rdata_r_2,
     rdata_REG ? _mem_ext_R0_data[15:8] : rdata_r_1,
     rdata_REG ? _mem_ext_R0_data[7:0] : rdata_r_0};
  assign auto_in_r_bits_resp = r_sel1 ? 2'h0 : 2'h3;
  assign auto_in_r_bits_echo_real_last = r_echo_real_last;
endmodule

module AXI4Xbar(
  input         clock,
                reset,
                auto_anon_in_aw_valid,
  input  [3:0]  auto_anon_in_aw_bits_id,
  input  [31:0] auto_anon_in_aw_bits_addr,
  input  [7:0]  auto_anon_in_aw_bits_len,
  input  [2:0]  auto_anon_in_aw_bits_size,
  input  [1:0]  auto_anon_in_aw_bits_burst,
  input         auto_anon_in_aw_bits_lock,
  input  [3:0]  auto_anon_in_aw_bits_cache,
  input  [2:0]  auto_anon_in_aw_bits_prot,
  input  [3:0]  auto_anon_in_aw_bits_qos,
  input         auto_anon_in_w_valid,
  input  [63:0] auto_anon_in_w_bits_data,
  input  [7:0]  auto_anon_in_w_bits_strb,
  input         auto_anon_in_w_bits_last,
                auto_anon_in_b_ready,
                auto_anon_in_ar_valid,
  input  [3:0]  auto_anon_in_ar_bits_id,
  input  [31:0] auto_anon_in_ar_bits_addr,
  input  [7:0]  auto_anon_in_ar_bits_len,
  input  [2:0]  auto_anon_in_ar_bits_size,
  input  [1:0]  auto_anon_in_ar_bits_burst,
  input         auto_anon_in_ar_bits_lock,
  input  [3:0]  auto_anon_in_ar_bits_cache,
  input  [2:0]  auto_anon_in_ar_bits_prot,
  input  [3:0]  auto_anon_in_ar_bits_qos,
  input         auto_anon_in_r_ready,
                auto_anon_out_aw_ready,
                auto_anon_out_w_ready,
                auto_anon_out_b_valid,
  input  [3:0]  auto_anon_out_b_bits_id,
  input  [1:0]  auto_anon_out_b_bits_resp,
  input         auto_anon_out_ar_ready,
                auto_anon_out_r_valid,
  input  [3:0]  auto_anon_out_r_bits_id,
  input  [63:0] auto_anon_out_r_bits_data,
  input  [1:0]  auto_anon_out_r_bits_resp,
  input         auto_anon_out_r_bits_last,
  output        auto_anon_in_aw_ready,
                auto_anon_in_w_ready,
                auto_anon_in_b_valid,
  output [3:0]  auto_anon_in_b_bits_id,
  output [1:0]  auto_anon_in_b_bits_resp,
  output        auto_anon_in_ar_ready,
                auto_anon_in_r_valid,
  output [3:0]  auto_anon_in_r_bits_id,
  output [63:0] auto_anon_in_r_bits_data,
  output [1:0]  auto_anon_in_r_bits_resp,
  output        auto_anon_in_r_bits_last,
                auto_anon_out_aw_valid,
  output [3:0]  auto_anon_out_aw_bits_id,
  output [31:0] auto_anon_out_aw_bits_addr,
  output [7:0]  auto_anon_out_aw_bits_len,
  output [2:0]  auto_anon_out_aw_bits_size,
  output [1:0]  auto_anon_out_aw_bits_burst,
  output        auto_anon_out_aw_bits_lock,
  output [3:0]  auto_anon_out_aw_bits_cache,
  output [2:0]  auto_anon_out_aw_bits_prot,
  output [3:0]  auto_anon_out_aw_bits_qos,
  output        auto_anon_out_w_valid,
  output [63:0] auto_anon_out_w_bits_data,
  output [7:0]  auto_anon_out_w_bits_strb,
  output        auto_anon_out_w_bits_last,
                auto_anon_out_b_ready,
                auto_anon_out_ar_valid,
  output [3:0]  auto_anon_out_ar_bits_id,
  output [31:0] auto_anon_out_ar_bits_addr,
  output [7:0]  auto_anon_out_ar_bits_len,
  output [2:0]  auto_anon_out_ar_bits_size,
  output [1:0]  auto_anon_out_ar_bits_burst,
  output        auto_anon_out_ar_bits_lock,
  output [3:0]  auto_anon_out_ar_bits_cache,
  output [2:0]  auto_anon_out_ar_bits_prot,
  output [3:0]  auto_anon_out_ar_bits_qos,
  output        auto_anon_out_r_ready
);

  assign auto_anon_in_aw_ready = auto_anon_out_aw_ready;
  assign auto_anon_in_w_ready = auto_anon_out_w_ready;
  assign auto_anon_in_b_valid = auto_anon_out_b_valid;
  assign auto_anon_in_b_bits_id = auto_anon_out_b_bits_id;
  assign auto_anon_in_b_bits_resp = auto_anon_out_b_bits_resp;
  assign auto_anon_in_ar_ready = auto_anon_out_ar_ready;
  assign auto_anon_in_r_valid = auto_anon_out_r_valid;
  assign auto_anon_in_r_bits_id = auto_anon_out_r_bits_id;
  assign auto_anon_in_r_bits_data = auto_anon_out_r_bits_data;
  assign auto_anon_in_r_bits_resp = auto_anon_out_r_bits_resp;
  assign auto_anon_in_r_bits_last = auto_anon_out_r_bits_last;
  assign auto_anon_out_aw_valid = auto_anon_in_aw_valid;
  assign auto_anon_out_aw_bits_id = auto_anon_in_aw_bits_id;
  assign auto_anon_out_aw_bits_addr = auto_anon_in_aw_bits_addr;
  assign auto_anon_out_aw_bits_len = auto_anon_in_aw_bits_len;
  assign auto_anon_out_aw_bits_size = auto_anon_in_aw_bits_size;
  assign auto_anon_out_aw_bits_burst = auto_anon_in_aw_bits_burst;
  assign auto_anon_out_aw_bits_lock = auto_anon_in_aw_bits_lock;
  assign auto_anon_out_aw_bits_cache = auto_anon_in_aw_bits_cache;
  assign auto_anon_out_aw_bits_prot = auto_anon_in_aw_bits_prot;
  assign auto_anon_out_aw_bits_qos = auto_anon_in_aw_bits_qos;
  assign auto_anon_out_w_valid = auto_anon_in_w_valid;
  assign auto_anon_out_w_bits_data = auto_anon_in_w_bits_data;
  assign auto_anon_out_w_bits_strb = auto_anon_in_w_bits_strb;
  assign auto_anon_out_w_bits_last = auto_anon_in_w_bits_last;
  assign auto_anon_out_b_ready = auto_anon_in_b_ready;
  assign auto_anon_out_ar_valid = auto_anon_in_ar_valid;
  assign auto_anon_out_ar_bits_id = auto_anon_in_ar_bits_id;
  assign auto_anon_out_ar_bits_addr = auto_anon_in_ar_bits_addr;
  assign auto_anon_out_ar_bits_len = auto_anon_in_ar_bits_len;
  assign auto_anon_out_ar_bits_size = auto_anon_in_ar_bits_size;
  assign auto_anon_out_ar_bits_burst = auto_anon_in_ar_bits_burst;
  assign auto_anon_out_ar_bits_lock = auto_anon_in_ar_bits_lock;
  assign auto_anon_out_ar_bits_cache = auto_anon_in_ar_bits_cache;
  assign auto_anon_out_ar_bits_prot = auto_anon_in_ar_bits_prot;
  assign auto_anon_out_ar_bits_qos = auto_anon_in_ar_bits_qos;
  assign auto_anon_out_r_ready = auto_anon_in_r_ready;
endmodule

module Queue2_AXI4BundleAW_1(
  input         clock,
                reset,
                io_enq_valid,
  input  [3:0]  io_enq_bits_id,
  input  [31:0] io_enq_bits_addr,
  input  [2:0]  io_enq_bits_size,
  input  [1:0]  io_enq_bits_burst,
  input         io_enq_bits_lock,
  input  [3:0]  io_enq_bits_cache,
  input  [2:0]  io_enq_bits_prot,
  input  [3:0]  io_enq_bits_qos,
  input         io_enq_bits_echo_real_last,
                io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
  output [3:0]  io_deq_bits_id,
  output [31:0] io_deq_bits_addr,
  output        io_deq_bits_echo_real_last
);

  wire [61:0] _ram_ext_R0_data;
  reg         wrap;
  reg         wrap_1;
  reg         maybe_full;
  wire        ptr_match = wrap == wrap_1;
  wire        empty = ptr_match & ~maybe_full;
  wire        full = ptr_match & maybe_full;
  wire        do_enq = ~full & io_enq_valid;
  always @(posedge clock) begin
    if (reset) begin
      wrap <= 1'h0;
      wrap_1 <= 1'h0;
      maybe_full <= 1'h0;
    end
    else begin
      automatic logic do_deq = io_deq_ready & ~empty;
      if (do_enq)
        wrap <= wrap - 1'h1;
      if (do_deq)
        wrap_1 <= wrap_1 - 1'h1;
      if (do_enq != do_deq)
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_combMem_6 ram_ext (
    .R0_addr (wrap_1),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (wrap),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data
      ({io_enq_bits_echo_real_last,
        io_enq_bits_qos,
        io_enq_bits_prot,
        io_enq_bits_cache,
        io_enq_bits_lock,
        io_enq_bits_burst,
        io_enq_bits_size,
        8'h0,
        io_enq_bits_addr,
        io_enq_bits_id}),
    .R0_data (_ram_ext_R0_data)
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
  assign io_deq_bits_id = _ram_ext_R0_data[3:0];
  assign io_deq_bits_addr = _ram_ext_R0_data[35:4];
  assign io_deq_bits_echo_real_last = _ram_ext_R0_data[61];
endmodule

module Queue2_AXI4BundleB_1(
  input        clock,
               reset,
               io_enq_valid,
  input  [3:0] io_enq_bits_id,
  input  [1:0] io_enq_bits_resp,
  input        io_enq_bits_echo_real_last,
               io_deq_ready,
  output       io_enq_ready,
               io_deq_valid,
  output [3:0] io_deq_bits_id,
  output [1:0] io_deq_bits_resp,
  output       io_deq_bits_echo_real_last
);

  wire [6:0] _ram_ext_R0_data;
  reg        wrap;
  reg        wrap_1;
  reg        maybe_full;
  wire       ptr_match = wrap == wrap_1;
  wire       empty = ptr_match & ~maybe_full;
  wire       full = ptr_match & maybe_full;
  wire       do_enq = ~full & io_enq_valid;
  always @(posedge clock) begin
    if (reset) begin
      wrap <= 1'h0;
      wrap_1 <= 1'h0;
      maybe_full <= 1'h0;
    end
    else begin
      automatic logic do_deq = io_deq_ready & ~empty;
      if (do_enq)
        wrap <= wrap - 1'h1;
      if (do_deq)
        wrap_1 <= wrap_1 - 1'h1;
      if (do_enq != do_deq)
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_combMem_0 ram_ext (
    .R0_addr (wrap_1),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (wrap),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data ({io_enq_bits_echo_real_last, io_enq_bits_resp, io_enq_bits_id}),
    .R0_data (_ram_ext_R0_data)
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
  assign io_deq_bits_id = _ram_ext_R0_data[3:0];
  assign io_deq_bits_resp = _ram_ext_R0_data[5:4];
  assign io_deq_bits_echo_real_last = _ram_ext_R0_data[6];
endmodule

module Queue2_AXI4BundleR_1(
  input         clock,
                reset,
                io_enq_valid,
  input  [3:0]  io_enq_bits_id,
  input  [63:0] io_enq_bits_data,
  input  [1:0]  io_enq_bits_resp,
  input         io_enq_bits_echo_real_last,
                io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
  output [3:0]  io_deq_bits_id,
  output [63:0] io_deq_bits_data,
  output [1:0]  io_deq_bits_resp,
  output        io_deq_bits_echo_real_last,
                io_deq_bits_last
);

  wire [71:0] _ram_ext_R0_data;
  reg         wrap;
  reg         wrap_1;
  reg         maybe_full;
  wire        ptr_match = wrap == wrap_1;
  wire        empty = ptr_match & ~maybe_full;
  wire        full = ptr_match & maybe_full;
  wire        do_enq = ~full & io_enq_valid;
  always @(posedge clock) begin
    if (reset) begin
      wrap <= 1'h0;
      wrap_1 <= 1'h0;
      maybe_full <= 1'h0;
    end
    else begin
      automatic logic do_deq = io_deq_ready & ~empty;
      if (do_enq)
        wrap <= wrap - 1'h1;
      if (do_deq)
        wrap_1 <= wrap_1 - 1'h1;
      if (do_enq != do_deq)
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_combMem_8 ram_ext (
    .R0_addr (wrap_1),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (wrap),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data
      ({1'h1,
        io_enq_bits_echo_real_last,
        io_enq_bits_resp,
        io_enq_bits_data,
        io_enq_bits_id}),
    .R0_data (_ram_ext_R0_data)
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
  assign io_deq_bits_id = _ram_ext_R0_data[3:0];
  assign io_deq_bits_data = _ram_ext_R0_data[67:4];
  assign io_deq_bits_resp = _ram_ext_R0_data[69:68];
  assign io_deq_bits_echo_real_last = _ram_ext_R0_data[70];
  assign io_deq_bits_last = _ram_ext_R0_data[71];
endmodule

module AXI4Buffer_1(
  input         clock,
                reset,
                auto_in_aw_valid,
  input  [3:0]  auto_in_aw_bits_id,
  input  [31:0] auto_in_aw_bits_addr,
  input  [2:0]  auto_in_aw_bits_size,
  input  [1:0]  auto_in_aw_bits_burst,
  input         auto_in_aw_bits_lock,
  input  [3:0]  auto_in_aw_bits_cache,
  input  [2:0]  auto_in_aw_bits_prot,
  input  [3:0]  auto_in_aw_bits_qos,
  input         auto_in_aw_bits_echo_real_last,
                auto_in_w_valid,
  input  [63:0] auto_in_w_bits_data,
  input  [7:0]  auto_in_w_bits_strb,
  input         auto_in_w_bits_last,
                auto_in_b_ready,
                auto_in_ar_valid,
  input  [3:0]  auto_in_ar_bits_id,
  input  [31:0] auto_in_ar_bits_addr,
  input  [2:0]  auto_in_ar_bits_size,
  input  [1:0]  auto_in_ar_bits_burst,
  input         auto_in_ar_bits_lock,
  input  [3:0]  auto_in_ar_bits_cache,
  input  [2:0]  auto_in_ar_bits_prot,
  input  [3:0]  auto_in_ar_bits_qos,
  input         auto_in_ar_bits_echo_real_last,
                auto_in_r_ready,
                auto_out_aw_ready,
                auto_out_w_ready,
                auto_out_b_valid,
  input  [3:0]  auto_out_b_bits_id,
  input  [1:0]  auto_out_b_bits_resp,
  input         auto_out_b_bits_echo_real_last,
                auto_out_ar_ready,
                auto_out_r_valid,
  input  [3:0]  auto_out_r_bits_id,
  input  [63:0] auto_out_r_bits_data,
  input  [1:0]  auto_out_r_bits_resp,
  input         auto_out_r_bits_echo_real_last,
  output        auto_in_aw_ready,
                auto_in_w_ready,
                auto_in_b_valid,
  output [3:0]  auto_in_b_bits_id,
  output [1:0]  auto_in_b_bits_resp,
  output        auto_in_b_bits_echo_real_last,
                auto_in_ar_ready,
                auto_in_r_valid,
  output [3:0]  auto_in_r_bits_id,
  output [63:0] auto_in_r_bits_data,
  output [1:0]  auto_in_r_bits_resp,
  output        auto_in_r_bits_echo_real_last,
                auto_in_r_bits_last,
                auto_out_aw_valid,
  output [3:0]  auto_out_aw_bits_id,
  output [31:0] auto_out_aw_bits_addr,
  output        auto_out_aw_bits_echo_real_last,
                auto_out_w_valid,
  output [63:0] auto_out_w_bits_data,
  output [7:0]  auto_out_w_bits_strb,
  output        auto_out_b_ready,
                auto_out_ar_valid,
  output [3:0]  auto_out_ar_bits_id,
  output [31:0] auto_out_ar_bits_addr,
  output        auto_out_ar_bits_echo_real_last,
                auto_out_r_ready
);

  Queue2_AXI4BundleAW_1 nodeOut_aw_deq_q (
    .clock                      (clock),
    .reset                      (reset),
    .io_enq_valid               (auto_in_aw_valid),
    .io_enq_bits_id             (auto_in_aw_bits_id),
    .io_enq_bits_addr           (auto_in_aw_bits_addr),
    .io_enq_bits_size           (auto_in_aw_bits_size),
    .io_enq_bits_burst          (auto_in_aw_bits_burst),
    .io_enq_bits_lock           (auto_in_aw_bits_lock),
    .io_enq_bits_cache          (auto_in_aw_bits_cache),
    .io_enq_bits_prot           (auto_in_aw_bits_prot),
    .io_enq_bits_qos            (auto_in_aw_bits_qos),
    .io_enq_bits_echo_real_last (auto_in_aw_bits_echo_real_last),
    .io_deq_ready               (auto_out_aw_ready),
    .io_enq_ready               (auto_in_aw_ready),
    .io_deq_valid               (auto_out_aw_valid),
    .io_deq_bits_id             (auto_out_aw_bits_id),
    .io_deq_bits_addr           (auto_out_aw_bits_addr),
    .io_deq_bits_echo_real_last (auto_out_aw_bits_echo_real_last)
  );
  Queue2_AXI4BundleW nodeOut_w_deq_q (
    .clock            (clock),
    .reset            (reset),
    .io_enq_valid     (auto_in_w_valid),
    .io_enq_bits_data (auto_in_w_bits_data),
    .io_enq_bits_strb (auto_in_w_bits_strb),
    .io_enq_bits_last (auto_in_w_bits_last),
    .io_deq_ready     (auto_out_w_ready),
    .io_enq_ready     (auto_in_w_ready),
    .io_deq_valid     (auto_out_w_valid),
    .io_deq_bits_data (auto_out_w_bits_data),
    .io_deq_bits_strb (auto_out_w_bits_strb),
    .io_deq_bits_last (/* unused */)
  );
  Queue2_AXI4BundleB_1 nodeIn_b_deq_q (
    .clock                      (clock),
    .reset                      (reset),
    .io_enq_valid               (auto_out_b_valid),
    .io_enq_bits_id             (auto_out_b_bits_id),
    .io_enq_bits_resp           (auto_out_b_bits_resp),
    .io_enq_bits_echo_real_last (auto_out_b_bits_echo_real_last),
    .io_deq_ready               (auto_in_b_ready),
    .io_enq_ready               (auto_out_b_ready),
    .io_deq_valid               (auto_in_b_valid),
    .io_deq_bits_id             (auto_in_b_bits_id),
    .io_deq_bits_resp           (auto_in_b_bits_resp),
    .io_deq_bits_echo_real_last (auto_in_b_bits_echo_real_last)
  );
  Queue2_AXI4BundleAW_1 nodeOut_ar_deq_q (
    .clock                      (clock),
    .reset                      (reset),
    .io_enq_valid               (auto_in_ar_valid),
    .io_enq_bits_id             (auto_in_ar_bits_id),
    .io_enq_bits_addr           (auto_in_ar_bits_addr),
    .io_enq_bits_size           (auto_in_ar_bits_size),
    .io_enq_bits_burst          (auto_in_ar_bits_burst),
    .io_enq_bits_lock           (auto_in_ar_bits_lock),
    .io_enq_bits_cache          (auto_in_ar_bits_cache),
    .io_enq_bits_prot           (auto_in_ar_bits_prot),
    .io_enq_bits_qos            (auto_in_ar_bits_qos),
    .io_enq_bits_echo_real_last (auto_in_ar_bits_echo_real_last),
    .io_deq_ready               (auto_out_ar_ready),
    .io_enq_ready               (auto_in_ar_ready),
    .io_deq_valid               (auto_out_ar_valid),
    .io_deq_bits_id             (auto_out_ar_bits_id),
    .io_deq_bits_addr           (auto_out_ar_bits_addr),
    .io_deq_bits_echo_real_last (auto_out_ar_bits_echo_real_last)
  );
  Queue2_AXI4BundleR_1 nodeIn_r_deq_q (
    .clock                      (clock),
    .reset                      (reset),
    .io_enq_valid               (auto_out_r_valid),
    .io_enq_bits_id             (auto_out_r_bits_id),
    .io_enq_bits_data           (auto_out_r_bits_data),
    .io_enq_bits_resp           (auto_out_r_bits_resp),
    .io_enq_bits_echo_real_last (auto_out_r_bits_echo_real_last),
    .io_deq_ready               (auto_in_r_ready),
    .io_enq_ready               (auto_out_r_ready),
    .io_deq_valid               (auto_in_r_valid),
    .io_deq_bits_id             (auto_in_r_bits_id),
    .io_deq_bits_data           (auto_in_r_bits_data),
    .io_deq_bits_resp           (auto_in_r_bits_resp),
    .io_deq_bits_echo_real_last (auto_in_r_bits_echo_real_last),
    .io_deq_bits_last           (auto_in_r_bits_last)
  );
endmodule

module Queue1_AXI4BundleAR_1(
  input         clock,
                reset,
                io_enq_valid,
  input  [3:0]  io_enq_bits_id,
  input  [31:0] io_enq_bits_addr,
  input  [7:0]  io_enq_bits_len,
  input  [2:0]  io_enq_bits_size,
  input  [1:0]  io_enq_bits_burst,
  input         io_enq_bits_lock,
  input  [3:0]  io_enq_bits_cache,
  input  [2:0]  io_enq_bits_prot,
  input  [3:0]  io_enq_bits_qos,
  input         io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
  output [3:0]  io_deq_bits_id,
  output [31:0] io_deq_bits_addr,
  output [7:0]  io_deq_bits_len,
  output [2:0]  io_deq_bits_size,
  output [1:0]  io_deq_bits_burst,
  output        io_deq_bits_lock,
  output [3:0]  io_deq_bits_cache,
  output [2:0]  io_deq_bits_prot,
  output [3:0]  io_deq_bits_qos
);

  reg  [60:0] ram;
  reg         full;
  wire        _io_deq_valid_output = io_enq_valid | full;
  wire        do_enq = ~(~full & io_deq_ready) & ~full & io_enq_valid;
  always @(posedge clock) begin
    if (do_enq)
      ram <=
        {io_enq_bits_qos,
         io_enq_bits_prot,
         io_enq_bits_cache,
         io_enq_bits_lock,
         io_enq_bits_burst,
         io_enq_bits_size,
         io_enq_bits_len,
         io_enq_bits_addr,
         io_enq_bits_id};
    if (reset)
      full <= 1'h0;
    else if (do_enq != (full & io_deq_ready & _io_deq_valid_output))
      full <= do_enq;
  end // always @(posedge)
  assign io_enq_ready = ~full;
  assign io_deq_valid = _io_deq_valid_output;
  assign io_deq_bits_id = full ? ram[3:0] : io_enq_bits_id;
  assign io_deq_bits_addr = full ? ram[35:4] : io_enq_bits_addr;
  assign io_deq_bits_len = full ? ram[43:36] : io_enq_bits_len;
  assign io_deq_bits_size = full ? ram[46:44] : io_enq_bits_size;
  assign io_deq_bits_burst = full ? ram[48:47] : io_enq_bits_burst;
  assign io_deq_bits_lock = full ? ram[49] : io_enq_bits_lock;
  assign io_deq_bits_cache = full ? ram[53:50] : io_enq_bits_cache;
  assign io_deq_bits_prot = full ? ram[56:54] : io_enq_bits_prot;
  assign io_deq_bits_qos = full ? ram[60:57] : io_enq_bits_qos;
endmodule

module AXI4Fragmenter_1(
  input         clock,
                reset,
                auto_in_aw_valid,
  input  [3:0]  auto_in_aw_bits_id,
  input  [31:0] auto_in_aw_bits_addr,
  input  [7:0]  auto_in_aw_bits_len,
  input  [2:0]  auto_in_aw_bits_size,
  input  [1:0]  auto_in_aw_bits_burst,
  input         auto_in_aw_bits_lock,
  input  [3:0]  auto_in_aw_bits_cache,
  input  [2:0]  auto_in_aw_bits_prot,
  input  [3:0]  auto_in_aw_bits_qos,
  input         auto_in_w_valid,
  input  [63:0] auto_in_w_bits_data,
  input  [7:0]  auto_in_w_bits_strb,
  input         auto_in_w_bits_last,
                auto_in_b_ready,
                auto_in_ar_valid,
  input  [3:0]  auto_in_ar_bits_id,
  input  [31:0] auto_in_ar_bits_addr,
  input  [7:0]  auto_in_ar_bits_len,
  input  [2:0]  auto_in_ar_bits_size,
  input  [1:0]  auto_in_ar_bits_burst,
  input         auto_in_ar_bits_lock,
  input  [3:0]  auto_in_ar_bits_cache,
  input  [2:0]  auto_in_ar_bits_prot,
  input  [3:0]  auto_in_ar_bits_qos,
  input         auto_in_r_ready,
                auto_out_aw_ready,
                auto_out_w_ready,
                auto_out_b_valid,
  input  [3:0]  auto_out_b_bits_id,
  input  [1:0]  auto_out_b_bits_resp,
  input         auto_out_b_bits_echo_real_last,
                auto_out_ar_ready,
                auto_out_r_valid,
  input  [3:0]  auto_out_r_bits_id,
  input  [63:0] auto_out_r_bits_data,
  input  [1:0]  auto_out_r_bits_resp,
  input         auto_out_r_bits_echo_real_last,
                auto_out_r_bits_last,
  output        auto_in_aw_ready,
                auto_in_w_ready,
                auto_in_b_valid,
  output [3:0]  auto_in_b_bits_id,
  output [1:0]  auto_in_b_bits_resp,
  output        auto_in_ar_ready,
                auto_in_r_valid,
  output [3:0]  auto_in_r_bits_id,
  output [63:0] auto_in_r_bits_data,
  output [1:0]  auto_in_r_bits_resp,
  output        auto_in_r_bits_last,
                auto_out_aw_valid,
  output [3:0]  auto_out_aw_bits_id,
  output [31:0] auto_out_aw_bits_addr,
  output [2:0]  auto_out_aw_bits_size,
  output [1:0]  auto_out_aw_bits_burst,
  output        auto_out_aw_bits_lock,
  output [3:0]  auto_out_aw_bits_cache,
  output [2:0]  auto_out_aw_bits_prot,
  output [3:0]  auto_out_aw_bits_qos,
  output        auto_out_aw_bits_echo_real_last,
                auto_out_w_valid,
  output [63:0] auto_out_w_bits_data,
  output [7:0]  auto_out_w_bits_strb,
  output        auto_out_w_bits_last,
                auto_out_b_ready,
                auto_out_ar_valid,
  output [3:0]  auto_out_ar_bits_id,
  output [31:0] auto_out_ar_bits_addr,
  output [2:0]  auto_out_ar_bits_size,
  output [1:0]  auto_out_ar_bits_burst,
  output        auto_out_ar_bits_lock,
  output [3:0]  auto_out_ar_bits_cache,
  output [2:0]  auto_out_ar_bits_prot,
  output [3:0]  auto_out_ar_bits_qos,
  output        auto_out_ar_bits_echo_real_last,
                auto_out_r_ready
);

  wire             nodeOut_w_valid;
  wire             wbeats_ready;
  wire             in_aw_ready;
  wire             _in_w_deq_q_io_deq_valid;
  wire             _in_w_deq_q_io_deq_bits_last;
  wire             _deq_q_1_io_deq_valid;
  wire [31:0]      _deq_q_1_io_deq_bits_addr;
  wire [7:0]       _deq_q_1_io_deq_bits_len;
  wire [2:0]       _deq_q_1_io_deq_bits_size;
  wire [1:0]       _deq_q_1_io_deq_bits_burst;
  wire             _deq_q_io_deq_valid;
  wire [31:0]      _deq_q_io_deq_bits_addr;
  wire [7:0]       _deq_q_io_deq_bits_len;
  wire [2:0]       _deq_q_io_deq_bits_size;
  wire [1:0]       _deq_q_io_deq_bits_burst;
  reg              busy;
  reg  [31:0]      r_addr;
  reg  [7:0]       r_len;
  wire [7:0]       len = busy ? r_len : _deq_q_io_deq_bits_len;
  wire [31:0]      addr = busy ? r_addr : _deq_q_io_deq_bits_addr;
  wire [31:0]      _GEN = ~addr;
  wire [9:0]       _GEN_0 = 10'h7 << _deq_q_io_deq_bits_size;
  reg              busy_1;
  reg  [31:0]      r_addr_1;
  reg  [7:0]       r_len_1;
  wire [7:0]       len_1 = busy_1 ? r_len_1 : _deq_q_1_io_deq_bits_len;
  wire [31:0]      addr_1 = busy_1 ? r_addr_1 : _deq_q_1_io_deq_bits_addr;
  wire [31:0]      _GEN_1 = ~addr_1;
  wire [9:0]       _GEN_2 = 10'h7 << _deq_q_1_io_deq_bits_size;
  reg              wbeats_latched;
  wire             _GEN_3 = wbeats_ready | wbeats_latched;
  wire             nodeOut_aw_valid = _deq_q_1_io_deq_valid & _GEN_3;
  assign in_aw_ready = auto_out_aw_ready & _GEN_3;
  wire             wbeats_valid = _deq_q_1_io_deq_valid & ~wbeats_latched;
  reg  [8:0]       w_counter;
  assign wbeats_ready = w_counter == 9'h0;
  wire [8:0]       w_todo = wbeats_ready ? {8'h0, wbeats_valid} : w_counter;
  wire             nodeOut_w_bits_last = w_todo == 9'h1;
  wire             _GEN_4 = auto_out_w_ready & nodeOut_w_valid;
  wire             _GEN_5 = ~wbeats_ready | wbeats_valid;
  assign nodeOut_w_valid = _in_w_deq_q_io_deq_valid & _GEN_5;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (~reset & ~(~_GEN_4 | (|w_todo))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Fragmenter.scala:181 assert (!out.w.fire || w_todo =/= 0.U) // underflow impossible\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(~nodeOut_w_valid | ~_in_w_deq_q_io_deq_bits_last
              | nodeOut_w_bits_last)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Fragmenter.scala:190 assert (!out.w.valid || !in_w.bits.last || w_last)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  wire             nodeOut_b_ready = auto_in_b_ready | ~auto_out_b_bits_echo_real_last;
  reg  [1:0]       error_0;
  reg  [1:0]       error_1;
  reg  [1:0]       error_2;
  reg  [1:0]       error_3;
  reg  [1:0]       error_4;
  reg  [1:0]       error_5;
  reg  [1:0]       error_6;
  reg  [1:0]       error_7;
  reg  [1:0]       error_8;
  reg  [1:0]       error_9;
  reg  [1:0]       error_10;
  reg  [1:0]       error_11;
  reg  [1:0]       error_12;
  reg  [1:0]       error_13;
  reg  [1:0]       error_14;
  reg  [1:0]       error_15;
  wire [15:0][1:0] _GEN_6 =
    {{error_15},
     {error_14},
     {error_13},
     {error_12},
     {error_11},
     {error_10},
     {error_9},
     {error_8},
     {error_7},
     {error_6},
     {error_5},
     {error_4},
     {error_3},
     {error_2},
     {error_1},
     {error_0}};
  always @(posedge clock) begin
    automatic logic _GEN_7;
    automatic logic _GEN_8;
    _GEN_7 = auto_out_ar_ready & _deq_q_io_deq_valid;
    _GEN_8 = in_aw_ready & _deq_q_1_io_deq_valid;
    if (reset) begin
      busy <= 1'h0;
      busy_1 <= 1'h0;
      wbeats_latched <= 1'h0;
      w_counter <= 9'h0;
      error_0 <= 2'h0;
      error_1 <= 2'h0;
      error_2 <= 2'h0;
      error_3 <= 2'h0;
      error_4 <= 2'h0;
      error_5 <= 2'h0;
      error_6 <= 2'h0;
      error_7 <= 2'h0;
      error_8 <= 2'h0;
      error_9 <= 2'h0;
      error_10 <= 2'h0;
      error_11 <= 2'h0;
      error_12 <= 2'h0;
      error_13 <= 2'h0;
      error_14 <= 2'h0;
      error_15 <= 2'h0;
    end
    else begin
      automatic logic _GEN_9 = nodeOut_b_ready & auto_out_b_valid;
      if (_GEN_7)
        busy <= |len;
      if (_GEN_8)
        busy_1 <= |len_1;
      wbeats_latched <=
        ~(auto_out_aw_ready & nodeOut_aw_valid)
        & (wbeats_valid & wbeats_ready | wbeats_latched);
      w_counter <= w_todo - {8'h0, _GEN_4};
      if (auto_out_b_bits_id == 4'h0 & _GEN_9) begin
        if (auto_out_b_bits_echo_real_last)
          error_0 <= 2'h0;
        else
          error_0 <= error_0 | auto_out_b_bits_resp;
      end
      if (auto_out_b_bits_id == 4'h1 & _GEN_9) begin
        if (auto_out_b_bits_echo_real_last)
          error_1 <= 2'h0;
        else
          error_1 <= error_1 | auto_out_b_bits_resp;
      end
      if (auto_out_b_bits_id == 4'h2 & _GEN_9) begin
        if (auto_out_b_bits_echo_real_last)
          error_2 <= 2'h0;
        else
          error_2 <= error_2 | auto_out_b_bits_resp;
      end
      if (auto_out_b_bits_id == 4'h3 & _GEN_9) begin
        if (auto_out_b_bits_echo_real_last)
          error_3 <= 2'h0;
        else
          error_3 <= error_3 | auto_out_b_bits_resp;
      end
      if (auto_out_b_bits_id == 4'h4 & _GEN_9) begin
        if (auto_out_b_bits_echo_real_last)
          error_4 <= 2'h0;
        else
          error_4 <= error_4 | auto_out_b_bits_resp;
      end
      if (auto_out_b_bits_id == 4'h5 & _GEN_9) begin
        if (auto_out_b_bits_echo_real_last)
          error_5 <= 2'h0;
        else
          error_5 <= error_5 | auto_out_b_bits_resp;
      end
      if (auto_out_b_bits_id == 4'h6 & _GEN_9) begin
        if (auto_out_b_bits_echo_real_last)
          error_6 <= 2'h0;
        else
          error_6 <= error_6 | auto_out_b_bits_resp;
      end
      if (auto_out_b_bits_id == 4'h7 & _GEN_9) begin
        if (auto_out_b_bits_echo_real_last)
          error_7 <= 2'h0;
        else
          error_7 <= error_7 | auto_out_b_bits_resp;
      end
      if (auto_out_b_bits_id == 4'h8 & _GEN_9) begin
        if (auto_out_b_bits_echo_real_last)
          error_8 <= 2'h0;
        else
          error_8 <= error_8 | auto_out_b_bits_resp;
      end
      if (auto_out_b_bits_id == 4'h9 & _GEN_9) begin
        if (auto_out_b_bits_echo_real_last)
          error_9 <= 2'h0;
        else
          error_9 <= error_9 | auto_out_b_bits_resp;
      end
      if (auto_out_b_bits_id == 4'hA & _GEN_9) begin
        if (auto_out_b_bits_echo_real_last)
          error_10 <= 2'h0;
        else
          error_10 <= error_10 | auto_out_b_bits_resp;
      end
      if (auto_out_b_bits_id == 4'hB & _GEN_9) begin
        if (auto_out_b_bits_echo_real_last)
          error_11 <= 2'h0;
        else
          error_11 <= error_11 | auto_out_b_bits_resp;
      end
      if (auto_out_b_bits_id == 4'hC & _GEN_9) begin
        if (auto_out_b_bits_echo_real_last)
          error_12 <= 2'h0;
        else
          error_12 <= error_12 | auto_out_b_bits_resp;
      end
      if (auto_out_b_bits_id == 4'hD & _GEN_9) begin
        if (auto_out_b_bits_echo_real_last)
          error_13 <= 2'h0;
        else
          error_13 <= error_13 | auto_out_b_bits_resp;
      end
      if (auto_out_b_bits_id == 4'hE & _GEN_9) begin
        if (auto_out_b_bits_echo_real_last)
          error_14 <= 2'h0;
        else
          error_14 <= error_14 | auto_out_b_bits_resp;
      end
      if ((&auto_out_b_bits_id) & _GEN_9) begin
        if (auto_out_b_bits_echo_real_last)
          error_15 <= 2'h0;
        else
          error_15 <= error_15 | auto_out_b_bits_resp;
      end
    end
    if (_GEN_7) begin
      if (_deq_q_io_deq_bits_burst == 2'h0)
        r_addr <= _deq_q_io_deq_bits_addr;
      else begin
        automatic logic [31:0] inc_addr;
        inc_addr = addr + {16'h0, 16'h1 << _deq_q_io_deq_bits_size};
        if (_deq_q_io_deq_bits_burst == 2'h2) begin
          automatic logic [22:0] _GEN_10 =
            {7'h0, _deq_q_io_deq_bits_len, 8'hFF} << _deq_q_io_deq_bits_size;
          automatic logic [31:0] _GEN_11 = ~_deq_q_io_deq_bits_addr;
          r_addr <=
            {17'h0, inc_addr[14:0] & _GEN_10[22:8]}
            | ~{_GEN_11[31:15], _GEN_11[14:0] | _GEN_10[22:8]};
        end
        else
          r_addr <= inc_addr;
      end
      r_len <= len - 8'h1;
    end
    if (_GEN_8) begin
      if (_deq_q_1_io_deq_bits_burst == 2'h0)
        r_addr_1 <= _deq_q_1_io_deq_bits_addr;
      else begin
        automatic logic [31:0] inc_addr_1;
        inc_addr_1 = addr_1 + {16'h0, 16'h1 << _deq_q_1_io_deq_bits_size};
        if (_deq_q_1_io_deq_bits_burst == 2'h2) begin
          automatic logic [22:0] _GEN_12 =
            {7'h0, _deq_q_1_io_deq_bits_len, 8'hFF} << _deq_q_1_io_deq_bits_size;
          automatic logic [31:0] _GEN_13 = ~_deq_q_1_io_deq_bits_addr;
          r_addr_1 <=
            {17'h0, inc_addr_1[14:0] & _GEN_12[22:8]}
            | ~{_GEN_13[31:15], _GEN_13[14:0] | _GEN_12[22:8]};
        end
        else
          r_addr_1 <= inc_addr_1;
      end
      r_len_1 <= len_1 - 8'h1;
    end
  end // always @(posedge)
  Queue1_AXI4BundleAR_1 deq_q (
    .clock             (clock),
    .reset             (reset),
    .io_enq_valid      (auto_in_ar_valid),
    .io_enq_bits_id    (auto_in_ar_bits_id),
    .io_enq_bits_addr  (auto_in_ar_bits_addr),
    .io_enq_bits_len   (auto_in_ar_bits_len),
    .io_enq_bits_size  (auto_in_ar_bits_size),
    .io_enq_bits_burst (auto_in_ar_bits_burst),
    .io_enq_bits_lock  (auto_in_ar_bits_lock),
    .io_enq_bits_cache (auto_in_ar_bits_cache),
    .io_enq_bits_prot  (auto_in_ar_bits_prot),
    .io_enq_bits_qos   (auto_in_ar_bits_qos),
    .io_deq_ready      (auto_out_ar_ready & ~(|len)),
    .io_enq_ready      (auto_in_ar_ready),
    .io_deq_valid      (_deq_q_io_deq_valid),
    .io_deq_bits_id    (auto_out_ar_bits_id),
    .io_deq_bits_addr  (_deq_q_io_deq_bits_addr),
    .io_deq_bits_len   (_deq_q_io_deq_bits_len),
    .io_deq_bits_size  (_deq_q_io_deq_bits_size),
    .io_deq_bits_burst (_deq_q_io_deq_bits_burst),
    .io_deq_bits_lock  (auto_out_ar_bits_lock),
    .io_deq_bits_cache (auto_out_ar_bits_cache),
    .io_deq_bits_prot  (auto_out_ar_bits_prot),
    .io_deq_bits_qos   (auto_out_ar_bits_qos)
  );
  Queue1_AXI4BundleAR_1 deq_q_1 (
    .clock             (clock),
    .reset             (reset),
    .io_enq_valid      (auto_in_aw_valid),
    .io_enq_bits_id    (auto_in_aw_bits_id),
    .io_enq_bits_addr  (auto_in_aw_bits_addr),
    .io_enq_bits_len   (auto_in_aw_bits_len),
    .io_enq_bits_size  (auto_in_aw_bits_size),
    .io_enq_bits_burst (auto_in_aw_bits_burst),
    .io_enq_bits_lock  (auto_in_aw_bits_lock),
    .io_enq_bits_cache (auto_in_aw_bits_cache),
    .io_enq_bits_prot  (auto_in_aw_bits_prot),
    .io_enq_bits_qos   (auto_in_aw_bits_qos),
    .io_deq_ready      (in_aw_ready & ~(|len_1)),
    .io_enq_ready      (auto_in_aw_ready),
    .io_deq_valid      (_deq_q_1_io_deq_valid),
    .io_deq_bits_id    (auto_out_aw_bits_id),
    .io_deq_bits_addr  (_deq_q_1_io_deq_bits_addr),
    .io_deq_bits_len   (_deq_q_1_io_deq_bits_len),
    .io_deq_bits_size  (_deq_q_1_io_deq_bits_size),
    .io_deq_bits_burst (_deq_q_1_io_deq_bits_burst),
    .io_deq_bits_lock  (auto_out_aw_bits_lock),
    .io_deq_bits_cache (auto_out_aw_bits_cache),
    .io_deq_bits_prot  (auto_out_aw_bits_prot),
    .io_deq_bits_qos   (auto_out_aw_bits_qos)
  );
  Queue1_AXI4BundleW in_w_deq_q (
    .clock            (clock),
    .reset            (reset),
    .io_enq_valid     (auto_in_w_valid),
    .io_enq_bits_data (auto_in_w_bits_data),
    .io_enq_bits_strb (auto_in_w_bits_strb),
    .io_enq_bits_last (auto_in_w_bits_last),
    .io_deq_ready     (auto_out_w_ready & _GEN_5),
    .io_enq_ready     (auto_in_w_ready),
    .io_deq_valid     (_in_w_deq_q_io_deq_valid),
    .io_deq_bits_data (auto_out_w_bits_data),
    .io_deq_bits_strb (auto_out_w_bits_strb),
    .io_deq_bits_last (_in_w_deq_q_io_deq_bits_last)
  );
  assign auto_in_b_valid = auto_out_b_valid & auto_out_b_bits_echo_real_last;
  assign auto_in_b_bits_id = auto_out_b_bits_id;
  assign auto_in_b_bits_resp = auto_out_b_bits_resp | _GEN_6[auto_out_b_bits_id];
  assign auto_in_r_valid = auto_out_r_valid;
  assign auto_in_r_bits_id = auto_out_r_bits_id;
  assign auto_in_r_bits_data = auto_out_r_bits_data;
  assign auto_in_r_bits_resp = auto_out_r_bits_resp;
  assign auto_in_r_bits_last = auto_out_r_bits_last & auto_out_r_bits_echo_real_last;
  assign auto_out_aw_valid = nodeOut_aw_valid;
  assign auto_out_aw_bits_addr = ~{_GEN_1[31:3], _GEN_1[2:0] | ~(_GEN_2[2:0])};
  assign auto_out_aw_bits_size = _deq_q_1_io_deq_bits_size;
  assign auto_out_aw_bits_burst = _deq_q_1_io_deq_bits_burst;
  assign auto_out_aw_bits_echo_real_last = ~(|len_1);
  assign auto_out_w_valid = nodeOut_w_valid;
  assign auto_out_w_bits_last = nodeOut_w_bits_last;
  assign auto_out_b_ready = nodeOut_b_ready;
  assign auto_out_ar_valid = _deq_q_io_deq_valid;
  assign auto_out_ar_bits_addr = ~{_GEN[31:3], _GEN[2:0] | ~(_GEN_0[2:0])};
  assign auto_out_ar_bits_size = _deq_q_io_deq_bits_size;
  assign auto_out_ar_bits_burst = _deq_q_io_deq_bits_burst;
  assign auto_out_ar_bits_echo_real_last = ~(|len);
  assign auto_out_r_ready = auto_in_r_ready;
endmodule

module SimAXIMem(
  input         clock,
                reset,
                io_axi4_0_aw_valid,
  input  [3:0]  io_axi4_0_aw_bits_id,
  input  [31:0] io_axi4_0_aw_bits_addr,
  input  [7:0]  io_axi4_0_aw_bits_len,
  input  [2:0]  io_axi4_0_aw_bits_size,
  input  [1:0]  io_axi4_0_aw_bits_burst,
  input         io_axi4_0_aw_bits_lock,
  input  [3:0]  io_axi4_0_aw_bits_cache,
  input  [2:0]  io_axi4_0_aw_bits_prot,
  input  [3:0]  io_axi4_0_aw_bits_qos,
  input         io_axi4_0_w_valid,
  input  [63:0] io_axi4_0_w_bits_data,
  input  [7:0]  io_axi4_0_w_bits_strb,
  input         io_axi4_0_w_bits_last,
                io_axi4_0_b_ready,
                io_axi4_0_ar_valid,
  input  [3:0]  io_axi4_0_ar_bits_id,
  input  [31:0] io_axi4_0_ar_bits_addr,
  input  [7:0]  io_axi4_0_ar_bits_len,
  input  [2:0]  io_axi4_0_ar_bits_size,
  input  [1:0]  io_axi4_0_ar_bits_burst,
  input         io_axi4_0_ar_bits_lock,
  input  [3:0]  io_axi4_0_ar_bits_cache,
  input  [2:0]  io_axi4_0_ar_bits_prot,
  input  [3:0]  io_axi4_0_ar_bits_qos,
  input         io_axi4_0_r_ready,
  output        io_axi4_0_aw_ready,
                io_axi4_0_w_ready,
                io_axi4_0_b_valid,
  output [3:0]  io_axi4_0_b_bits_id,
  output [1:0]  io_axi4_0_b_bits_resp,
  output        io_axi4_0_ar_ready,
                io_axi4_0_r_valid,
  output [3:0]  io_axi4_0_r_bits_id,
  output [63:0] io_axi4_0_r_bits_data,
  output [1:0]  io_axi4_0_r_bits_resp,
  output        io_axi4_0_r_bits_last
);

  wire        _axi4frag_auto_in_aw_ready;
  wire        _axi4frag_auto_in_w_ready;
  wire        _axi4frag_auto_in_b_valid;
  wire [3:0]  _axi4frag_auto_in_b_bits_id;
  wire [1:0]  _axi4frag_auto_in_b_bits_resp;
  wire        _axi4frag_auto_in_ar_ready;
  wire        _axi4frag_auto_in_r_valid;
  wire [3:0]  _axi4frag_auto_in_r_bits_id;
  wire [63:0] _axi4frag_auto_in_r_bits_data;
  wire [1:0]  _axi4frag_auto_in_r_bits_resp;
  wire        _axi4frag_auto_in_r_bits_last;
  wire        _axi4frag_auto_out_aw_valid;
  wire [3:0]  _axi4frag_auto_out_aw_bits_id;
  wire [31:0] _axi4frag_auto_out_aw_bits_addr;
  wire [2:0]  _axi4frag_auto_out_aw_bits_size;
  wire [1:0]  _axi4frag_auto_out_aw_bits_burst;
  wire        _axi4frag_auto_out_aw_bits_lock;
  wire [3:0]  _axi4frag_auto_out_aw_bits_cache;
  wire [2:0]  _axi4frag_auto_out_aw_bits_prot;
  wire [3:0]  _axi4frag_auto_out_aw_bits_qos;
  wire        _axi4frag_auto_out_aw_bits_echo_real_last;
  wire        _axi4frag_auto_out_w_valid;
  wire [63:0] _axi4frag_auto_out_w_bits_data;
  wire [7:0]  _axi4frag_auto_out_w_bits_strb;
  wire        _axi4frag_auto_out_w_bits_last;
  wire        _axi4frag_auto_out_b_ready;
  wire        _axi4frag_auto_out_ar_valid;
  wire [3:0]  _axi4frag_auto_out_ar_bits_id;
  wire [31:0] _axi4frag_auto_out_ar_bits_addr;
  wire [2:0]  _axi4frag_auto_out_ar_bits_size;
  wire [1:0]  _axi4frag_auto_out_ar_bits_burst;
  wire        _axi4frag_auto_out_ar_bits_lock;
  wire [3:0]  _axi4frag_auto_out_ar_bits_cache;
  wire [2:0]  _axi4frag_auto_out_ar_bits_prot;
  wire [3:0]  _axi4frag_auto_out_ar_bits_qos;
  wire        _axi4frag_auto_out_ar_bits_echo_real_last;
  wire        _axi4frag_auto_out_r_ready;
  wire        _axi4buf_auto_in_aw_ready;
  wire        _axi4buf_auto_in_w_ready;
  wire        _axi4buf_auto_in_b_valid;
  wire [3:0]  _axi4buf_auto_in_b_bits_id;
  wire [1:0]  _axi4buf_auto_in_b_bits_resp;
  wire        _axi4buf_auto_in_b_bits_echo_real_last;
  wire        _axi4buf_auto_in_ar_ready;
  wire        _axi4buf_auto_in_r_valid;
  wire [3:0]  _axi4buf_auto_in_r_bits_id;
  wire [63:0] _axi4buf_auto_in_r_bits_data;
  wire [1:0]  _axi4buf_auto_in_r_bits_resp;
  wire        _axi4buf_auto_in_r_bits_echo_real_last;
  wire        _axi4buf_auto_in_r_bits_last;
  wire        _axi4buf_auto_out_aw_valid;
  wire [3:0]  _axi4buf_auto_out_aw_bits_id;
  wire [31:0] _axi4buf_auto_out_aw_bits_addr;
  wire        _axi4buf_auto_out_aw_bits_echo_real_last;
  wire        _axi4buf_auto_out_w_valid;
  wire [63:0] _axi4buf_auto_out_w_bits_data;
  wire [7:0]  _axi4buf_auto_out_w_bits_strb;
  wire        _axi4buf_auto_out_b_ready;
  wire        _axi4buf_auto_out_ar_valid;
  wire [3:0]  _axi4buf_auto_out_ar_bits_id;
  wire [31:0] _axi4buf_auto_out_ar_bits_addr;
  wire        _axi4buf_auto_out_ar_bits_echo_real_last;
  wire        _axi4buf_auto_out_r_ready;
  wire        _axi4xbar_auto_anon_out_aw_valid;
  wire [3:0]  _axi4xbar_auto_anon_out_aw_bits_id;
  wire [31:0] _axi4xbar_auto_anon_out_aw_bits_addr;
  wire [7:0]  _axi4xbar_auto_anon_out_aw_bits_len;
  wire [2:0]  _axi4xbar_auto_anon_out_aw_bits_size;
  wire [1:0]  _axi4xbar_auto_anon_out_aw_bits_burst;
  wire        _axi4xbar_auto_anon_out_aw_bits_lock;
  wire [3:0]  _axi4xbar_auto_anon_out_aw_bits_cache;
  wire [2:0]  _axi4xbar_auto_anon_out_aw_bits_prot;
  wire [3:0]  _axi4xbar_auto_anon_out_aw_bits_qos;
  wire        _axi4xbar_auto_anon_out_w_valid;
  wire [63:0] _axi4xbar_auto_anon_out_w_bits_data;
  wire [7:0]  _axi4xbar_auto_anon_out_w_bits_strb;
  wire        _axi4xbar_auto_anon_out_w_bits_last;
  wire        _axi4xbar_auto_anon_out_b_ready;
  wire        _axi4xbar_auto_anon_out_ar_valid;
  wire [3:0]  _axi4xbar_auto_anon_out_ar_bits_id;
  wire [31:0] _axi4xbar_auto_anon_out_ar_bits_addr;
  wire [7:0]  _axi4xbar_auto_anon_out_ar_bits_len;
  wire [2:0]  _axi4xbar_auto_anon_out_ar_bits_size;
  wire [1:0]  _axi4xbar_auto_anon_out_ar_bits_burst;
  wire        _axi4xbar_auto_anon_out_ar_bits_lock;
  wire [3:0]  _axi4xbar_auto_anon_out_ar_bits_cache;
  wire [2:0]  _axi4xbar_auto_anon_out_ar_bits_prot;
  wire [3:0]  _axi4xbar_auto_anon_out_ar_bits_qos;
  wire        _axi4xbar_auto_anon_out_r_ready;
  wire        _srams_auto_in_aw_ready;
  wire        _srams_auto_in_w_ready;
  wire        _srams_auto_in_b_valid;
  wire [3:0]  _srams_auto_in_b_bits_id;
  wire [1:0]  _srams_auto_in_b_bits_resp;
  wire        _srams_auto_in_b_bits_echo_real_last;
  wire        _srams_auto_in_ar_ready;
  wire        _srams_auto_in_r_valid;
  wire [3:0]  _srams_auto_in_r_bits_id;
  wire [63:0] _srams_auto_in_r_bits_data;
  wire [1:0]  _srams_auto_in_r_bits_resp;
  wire        _srams_auto_in_r_bits_echo_real_last;
  AXI4RAM srams (
    .clock                          (clock),
    .reset                          (reset),
    .auto_in_aw_valid               (_axi4buf_auto_out_aw_valid),
    .auto_in_aw_bits_id             (_axi4buf_auto_out_aw_bits_id),
    .auto_in_aw_bits_addr           (_axi4buf_auto_out_aw_bits_addr),
    .auto_in_aw_bits_echo_real_last (_axi4buf_auto_out_aw_bits_echo_real_last),
    .auto_in_w_valid                (_axi4buf_auto_out_w_valid),
    .auto_in_w_bits_data            (_axi4buf_auto_out_w_bits_data),
    .auto_in_w_bits_strb            (_axi4buf_auto_out_w_bits_strb),
    .auto_in_b_ready                (_axi4buf_auto_out_b_ready),
    .auto_in_ar_valid               (_axi4buf_auto_out_ar_valid),
    .auto_in_ar_bits_id             (_axi4buf_auto_out_ar_bits_id),
    .auto_in_ar_bits_addr           (_axi4buf_auto_out_ar_bits_addr),
    .auto_in_ar_bits_echo_real_last (_axi4buf_auto_out_ar_bits_echo_real_last),
    .auto_in_r_ready                (_axi4buf_auto_out_r_ready),
    .auto_in_aw_ready               (_srams_auto_in_aw_ready),
    .auto_in_w_ready                (_srams_auto_in_w_ready),
    .auto_in_b_valid                (_srams_auto_in_b_valid),
    .auto_in_b_bits_id              (_srams_auto_in_b_bits_id),
    .auto_in_b_bits_resp            (_srams_auto_in_b_bits_resp),
    .auto_in_b_bits_echo_real_last  (_srams_auto_in_b_bits_echo_real_last),
    .auto_in_ar_ready               (_srams_auto_in_ar_ready),
    .auto_in_r_valid                (_srams_auto_in_r_valid),
    .auto_in_r_bits_id              (_srams_auto_in_r_bits_id),
    .auto_in_r_bits_data            (_srams_auto_in_r_bits_data),
    .auto_in_r_bits_resp            (_srams_auto_in_r_bits_resp),
    .auto_in_r_bits_echo_real_last  (_srams_auto_in_r_bits_echo_real_last)
  );
  AXI4Xbar axi4xbar (
    .clock                       (clock),
    .reset                       (reset),
    .auto_anon_in_aw_valid       (io_axi4_0_aw_valid),
    .auto_anon_in_aw_bits_id     (io_axi4_0_aw_bits_id),
    .auto_anon_in_aw_bits_addr   (io_axi4_0_aw_bits_addr),
    .auto_anon_in_aw_bits_len    (io_axi4_0_aw_bits_len),
    .auto_anon_in_aw_bits_size   (io_axi4_0_aw_bits_size),
    .auto_anon_in_aw_bits_burst  (io_axi4_0_aw_bits_burst),
    .auto_anon_in_aw_bits_lock   (io_axi4_0_aw_bits_lock),
    .auto_anon_in_aw_bits_cache  (io_axi4_0_aw_bits_cache),
    .auto_anon_in_aw_bits_prot   (io_axi4_0_aw_bits_prot),
    .auto_anon_in_aw_bits_qos    (io_axi4_0_aw_bits_qos),
    .auto_anon_in_w_valid        (io_axi4_0_w_valid),
    .auto_anon_in_w_bits_data    (io_axi4_0_w_bits_data),
    .auto_anon_in_w_bits_strb    (io_axi4_0_w_bits_strb),
    .auto_anon_in_w_bits_last    (io_axi4_0_w_bits_last),
    .auto_anon_in_b_ready        (io_axi4_0_b_ready),
    .auto_anon_in_ar_valid       (io_axi4_0_ar_valid),
    .auto_anon_in_ar_bits_id     (io_axi4_0_ar_bits_id),
    .auto_anon_in_ar_bits_addr   (io_axi4_0_ar_bits_addr),
    .auto_anon_in_ar_bits_len    (io_axi4_0_ar_bits_len),
    .auto_anon_in_ar_bits_size   (io_axi4_0_ar_bits_size),
    .auto_anon_in_ar_bits_burst  (io_axi4_0_ar_bits_burst),
    .auto_anon_in_ar_bits_lock   (io_axi4_0_ar_bits_lock),
    .auto_anon_in_ar_bits_cache  (io_axi4_0_ar_bits_cache),
    .auto_anon_in_ar_bits_prot   (io_axi4_0_ar_bits_prot),
    .auto_anon_in_ar_bits_qos    (io_axi4_0_ar_bits_qos),
    .auto_anon_in_r_ready        (io_axi4_0_r_ready),
    .auto_anon_out_aw_ready      (_axi4frag_auto_in_aw_ready),
    .auto_anon_out_w_ready       (_axi4frag_auto_in_w_ready),
    .auto_anon_out_b_valid       (_axi4frag_auto_in_b_valid),
    .auto_anon_out_b_bits_id     (_axi4frag_auto_in_b_bits_id),
    .auto_anon_out_b_bits_resp   (_axi4frag_auto_in_b_bits_resp),
    .auto_anon_out_ar_ready      (_axi4frag_auto_in_ar_ready),
    .auto_anon_out_r_valid       (_axi4frag_auto_in_r_valid),
    .auto_anon_out_r_bits_id     (_axi4frag_auto_in_r_bits_id),
    .auto_anon_out_r_bits_data   (_axi4frag_auto_in_r_bits_data),
    .auto_anon_out_r_bits_resp   (_axi4frag_auto_in_r_bits_resp),
    .auto_anon_out_r_bits_last   (_axi4frag_auto_in_r_bits_last),
    .auto_anon_in_aw_ready       (io_axi4_0_aw_ready),
    .auto_anon_in_w_ready        (io_axi4_0_w_ready),
    .auto_anon_in_b_valid        (io_axi4_0_b_valid),
    .auto_anon_in_b_bits_id      (io_axi4_0_b_bits_id),
    .auto_anon_in_b_bits_resp    (io_axi4_0_b_bits_resp),
    .auto_anon_in_ar_ready       (io_axi4_0_ar_ready),
    .auto_anon_in_r_valid        (io_axi4_0_r_valid),
    .auto_anon_in_r_bits_id      (io_axi4_0_r_bits_id),
    .auto_anon_in_r_bits_data    (io_axi4_0_r_bits_data),
    .auto_anon_in_r_bits_resp    (io_axi4_0_r_bits_resp),
    .auto_anon_in_r_bits_last    (io_axi4_0_r_bits_last),
    .auto_anon_out_aw_valid      (_axi4xbar_auto_anon_out_aw_valid),
    .auto_anon_out_aw_bits_id    (_axi4xbar_auto_anon_out_aw_bits_id),
    .auto_anon_out_aw_bits_addr  (_axi4xbar_auto_anon_out_aw_bits_addr),
    .auto_anon_out_aw_bits_len   (_axi4xbar_auto_anon_out_aw_bits_len),
    .auto_anon_out_aw_bits_size  (_axi4xbar_auto_anon_out_aw_bits_size),
    .auto_anon_out_aw_bits_burst (_axi4xbar_auto_anon_out_aw_bits_burst),
    .auto_anon_out_aw_bits_lock  (_axi4xbar_auto_anon_out_aw_bits_lock),
    .auto_anon_out_aw_bits_cache (_axi4xbar_auto_anon_out_aw_bits_cache),
    .auto_anon_out_aw_bits_prot  (_axi4xbar_auto_anon_out_aw_bits_prot),
    .auto_anon_out_aw_bits_qos   (_axi4xbar_auto_anon_out_aw_bits_qos),
    .auto_anon_out_w_valid       (_axi4xbar_auto_anon_out_w_valid),
    .auto_anon_out_w_bits_data   (_axi4xbar_auto_anon_out_w_bits_data),
    .auto_anon_out_w_bits_strb   (_axi4xbar_auto_anon_out_w_bits_strb),
    .auto_anon_out_w_bits_last   (_axi4xbar_auto_anon_out_w_bits_last),
    .auto_anon_out_b_ready       (_axi4xbar_auto_anon_out_b_ready),
    .auto_anon_out_ar_valid      (_axi4xbar_auto_anon_out_ar_valid),
    .auto_anon_out_ar_bits_id    (_axi4xbar_auto_anon_out_ar_bits_id),
    .auto_anon_out_ar_bits_addr  (_axi4xbar_auto_anon_out_ar_bits_addr),
    .auto_anon_out_ar_bits_len   (_axi4xbar_auto_anon_out_ar_bits_len),
    .auto_anon_out_ar_bits_size  (_axi4xbar_auto_anon_out_ar_bits_size),
    .auto_anon_out_ar_bits_burst (_axi4xbar_auto_anon_out_ar_bits_burst),
    .auto_anon_out_ar_bits_lock  (_axi4xbar_auto_anon_out_ar_bits_lock),
    .auto_anon_out_ar_bits_cache (_axi4xbar_auto_anon_out_ar_bits_cache),
    .auto_anon_out_ar_bits_prot  (_axi4xbar_auto_anon_out_ar_bits_prot),
    .auto_anon_out_ar_bits_qos   (_axi4xbar_auto_anon_out_ar_bits_qos),
    .auto_anon_out_r_ready       (_axi4xbar_auto_anon_out_r_ready)
  );
  AXI4Buffer_1 axi4buf (
    .clock                           (clock),
    .reset                           (reset),
    .auto_in_aw_valid                (_axi4frag_auto_out_aw_valid),
    .auto_in_aw_bits_id              (_axi4frag_auto_out_aw_bits_id),
    .auto_in_aw_bits_addr            (_axi4frag_auto_out_aw_bits_addr),
    .auto_in_aw_bits_size            (_axi4frag_auto_out_aw_bits_size),
    .auto_in_aw_bits_burst           (_axi4frag_auto_out_aw_bits_burst),
    .auto_in_aw_bits_lock            (_axi4frag_auto_out_aw_bits_lock),
    .auto_in_aw_bits_cache           (_axi4frag_auto_out_aw_bits_cache),
    .auto_in_aw_bits_prot            (_axi4frag_auto_out_aw_bits_prot),
    .auto_in_aw_bits_qos             (_axi4frag_auto_out_aw_bits_qos),
    .auto_in_aw_bits_echo_real_last  (_axi4frag_auto_out_aw_bits_echo_real_last),
    .auto_in_w_valid                 (_axi4frag_auto_out_w_valid),
    .auto_in_w_bits_data             (_axi4frag_auto_out_w_bits_data),
    .auto_in_w_bits_strb             (_axi4frag_auto_out_w_bits_strb),
    .auto_in_w_bits_last             (_axi4frag_auto_out_w_bits_last),
    .auto_in_b_ready                 (_axi4frag_auto_out_b_ready),
    .auto_in_ar_valid                (_axi4frag_auto_out_ar_valid),
    .auto_in_ar_bits_id              (_axi4frag_auto_out_ar_bits_id),
    .auto_in_ar_bits_addr            (_axi4frag_auto_out_ar_bits_addr),
    .auto_in_ar_bits_size            (_axi4frag_auto_out_ar_bits_size),
    .auto_in_ar_bits_burst           (_axi4frag_auto_out_ar_bits_burst),
    .auto_in_ar_bits_lock            (_axi4frag_auto_out_ar_bits_lock),
    .auto_in_ar_bits_cache           (_axi4frag_auto_out_ar_bits_cache),
    .auto_in_ar_bits_prot            (_axi4frag_auto_out_ar_bits_prot),
    .auto_in_ar_bits_qos             (_axi4frag_auto_out_ar_bits_qos),
    .auto_in_ar_bits_echo_real_last  (_axi4frag_auto_out_ar_bits_echo_real_last),
    .auto_in_r_ready                 (_axi4frag_auto_out_r_ready),
    .auto_out_aw_ready               (_srams_auto_in_aw_ready),
    .auto_out_w_ready                (_srams_auto_in_w_ready),
    .auto_out_b_valid                (_srams_auto_in_b_valid),
    .auto_out_b_bits_id              (_srams_auto_in_b_bits_id),
    .auto_out_b_bits_resp            (_srams_auto_in_b_bits_resp),
    .auto_out_b_bits_echo_real_last  (_srams_auto_in_b_bits_echo_real_last),
    .auto_out_ar_ready               (_srams_auto_in_ar_ready),
    .auto_out_r_valid                (_srams_auto_in_r_valid),
    .auto_out_r_bits_id              (_srams_auto_in_r_bits_id),
    .auto_out_r_bits_data            (_srams_auto_in_r_bits_data),
    .auto_out_r_bits_resp            (_srams_auto_in_r_bits_resp),
    .auto_out_r_bits_echo_real_last  (_srams_auto_in_r_bits_echo_real_last),
    .auto_in_aw_ready                (_axi4buf_auto_in_aw_ready),
    .auto_in_w_ready                 (_axi4buf_auto_in_w_ready),
    .auto_in_b_valid                 (_axi4buf_auto_in_b_valid),
    .auto_in_b_bits_id               (_axi4buf_auto_in_b_bits_id),
    .auto_in_b_bits_resp             (_axi4buf_auto_in_b_bits_resp),
    .auto_in_b_bits_echo_real_last   (_axi4buf_auto_in_b_bits_echo_real_last),
    .auto_in_ar_ready                (_axi4buf_auto_in_ar_ready),
    .auto_in_r_valid                 (_axi4buf_auto_in_r_valid),
    .auto_in_r_bits_id               (_axi4buf_auto_in_r_bits_id),
    .auto_in_r_bits_data             (_axi4buf_auto_in_r_bits_data),
    .auto_in_r_bits_resp             (_axi4buf_auto_in_r_bits_resp),
    .auto_in_r_bits_echo_real_last   (_axi4buf_auto_in_r_bits_echo_real_last),
    .auto_in_r_bits_last             (_axi4buf_auto_in_r_bits_last),
    .auto_out_aw_valid               (_axi4buf_auto_out_aw_valid),
    .auto_out_aw_bits_id             (_axi4buf_auto_out_aw_bits_id),
    .auto_out_aw_bits_addr           (_axi4buf_auto_out_aw_bits_addr),
    .auto_out_aw_bits_echo_real_last (_axi4buf_auto_out_aw_bits_echo_real_last),
    .auto_out_w_valid                (_axi4buf_auto_out_w_valid),
    .auto_out_w_bits_data            (_axi4buf_auto_out_w_bits_data),
    .auto_out_w_bits_strb            (_axi4buf_auto_out_w_bits_strb),
    .auto_out_b_ready                (_axi4buf_auto_out_b_ready),
    .auto_out_ar_valid               (_axi4buf_auto_out_ar_valid),
    .auto_out_ar_bits_id             (_axi4buf_auto_out_ar_bits_id),
    .auto_out_ar_bits_addr           (_axi4buf_auto_out_ar_bits_addr),
    .auto_out_ar_bits_echo_real_last (_axi4buf_auto_out_ar_bits_echo_real_last),
    .auto_out_r_ready                (_axi4buf_auto_out_r_ready)
  );
  AXI4Fragmenter_1 axi4frag (
    .clock                           (clock),
    .reset                           (reset),
    .auto_in_aw_valid                (_axi4xbar_auto_anon_out_aw_valid),
    .auto_in_aw_bits_id              (_axi4xbar_auto_anon_out_aw_bits_id),
    .auto_in_aw_bits_addr            (_axi4xbar_auto_anon_out_aw_bits_addr),
    .auto_in_aw_bits_len             (_axi4xbar_auto_anon_out_aw_bits_len),
    .auto_in_aw_bits_size            (_axi4xbar_auto_anon_out_aw_bits_size),
    .auto_in_aw_bits_burst           (_axi4xbar_auto_anon_out_aw_bits_burst),
    .auto_in_aw_bits_lock            (_axi4xbar_auto_anon_out_aw_bits_lock),
    .auto_in_aw_bits_cache           (_axi4xbar_auto_anon_out_aw_bits_cache),
    .auto_in_aw_bits_prot            (_axi4xbar_auto_anon_out_aw_bits_prot),
    .auto_in_aw_bits_qos             (_axi4xbar_auto_anon_out_aw_bits_qos),
    .auto_in_w_valid                 (_axi4xbar_auto_anon_out_w_valid),
    .auto_in_w_bits_data             (_axi4xbar_auto_anon_out_w_bits_data),
    .auto_in_w_bits_strb             (_axi4xbar_auto_anon_out_w_bits_strb),
    .auto_in_w_bits_last             (_axi4xbar_auto_anon_out_w_bits_last),
    .auto_in_b_ready                 (_axi4xbar_auto_anon_out_b_ready),
    .auto_in_ar_valid                (_axi4xbar_auto_anon_out_ar_valid),
    .auto_in_ar_bits_id              (_axi4xbar_auto_anon_out_ar_bits_id),
    .auto_in_ar_bits_addr            (_axi4xbar_auto_anon_out_ar_bits_addr),
    .auto_in_ar_bits_len             (_axi4xbar_auto_anon_out_ar_bits_len),
    .auto_in_ar_bits_size            (_axi4xbar_auto_anon_out_ar_bits_size),
    .auto_in_ar_bits_burst           (_axi4xbar_auto_anon_out_ar_bits_burst),
    .auto_in_ar_bits_lock            (_axi4xbar_auto_anon_out_ar_bits_lock),
    .auto_in_ar_bits_cache           (_axi4xbar_auto_anon_out_ar_bits_cache),
    .auto_in_ar_bits_prot            (_axi4xbar_auto_anon_out_ar_bits_prot),
    .auto_in_ar_bits_qos             (_axi4xbar_auto_anon_out_ar_bits_qos),
    .auto_in_r_ready                 (_axi4xbar_auto_anon_out_r_ready),
    .auto_out_aw_ready               (_axi4buf_auto_in_aw_ready),
    .auto_out_w_ready                (_axi4buf_auto_in_w_ready),
    .auto_out_b_valid                (_axi4buf_auto_in_b_valid),
    .auto_out_b_bits_id              (_axi4buf_auto_in_b_bits_id),
    .auto_out_b_bits_resp            (_axi4buf_auto_in_b_bits_resp),
    .auto_out_b_bits_echo_real_last  (_axi4buf_auto_in_b_bits_echo_real_last),
    .auto_out_ar_ready               (_axi4buf_auto_in_ar_ready),
    .auto_out_r_valid                (_axi4buf_auto_in_r_valid),
    .auto_out_r_bits_id              (_axi4buf_auto_in_r_bits_id),
    .auto_out_r_bits_data            (_axi4buf_auto_in_r_bits_data),
    .auto_out_r_bits_resp            (_axi4buf_auto_in_r_bits_resp),
    .auto_out_r_bits_echo_real_last  (_axi4buf_auto_in_r_bits_echo_real_last),
    .auto_out_r_bits_last            (_axi4buf_auto_in_r_bits_last),
    .auto_in_aw_ready                (_axi4frag_auto_in_aw_ready),
    .auto_in_w_ready                 (_axi4frag_auto_in_w_ready),
    .auto_in_b_valid                 (_axi4frag_auto_in_b_valid),
    .auto_in_b_bits_id               (_axi4frag_auto_in_b_bits_id),
    .auto_in_b_bits_resp             (_axi4frag_auto_in_b_bits_resp),
    .auto_in_ar_ready                (_axi4frag_auto_in_ar_ready),
    .auto_in_r_valid                 (_axi4frag_auto_in_r_valid),
    .auto_in_r_bits_id               (_axi4frag_auto_in_r_bits_id),
    .auto_in_r_bits_data             (_axi4frag_auto_in_r_bits_data),
    .auto_in_r_bits_resp             (_axi4frag_auto_in_r_bits_resp),
    .auto_in_r_bits_last             (_axi4frag_auto_in_r_bits_last),
    .auto_out_aw_valid               (_axi4frag_auto_out_aw_valid),
    .auto_out_aw_bits_id             (_axi4frag_auto_out_aw_bits_id),
    .auto_out_aw_bits_addr           (_axi4frag_auto_out_aw_bits_addr),
    .auto_out_aw_bits_size           (_axi4frag_auto_out_aw_bits_size),
    .auto_out_aw_bits_burst          (_axi4frag_auto_out_aw_bits_burst),
    .auto_out_aw_bits_lock           (_axi4frag_auto_out_aw_bits_lock),
    .auto_out_aw_bits_cache          (_axi4frag_auto_out_aw_bits_cache),
    .auto_out_aw_bits_prot           (_axi4frag_auto_out_aw_bits_prot),
    .auto_out_aw_bits_qos            (_axi4frag_auto_out_aw_bits_qos),
    .auto_out_aw_bits_echo_real_last (_axi4frag_auto_out_aw_bits_echo_real_last),
    .auto_out_w_valid                (_axi4frag_auto_out_w_valid),
    .auto_out_w_bits_data            (_axi4frag_auto_out_w_bits_data),
    .auto_out_w_bits_strb            (_axi4frag_auto_out_w_bits_strb),
    .auto_out_w_bits_last            (_axi4frag_auto_out_w_bits_last),
    .auto_out_b_ready                (_axi4frag_auto_out_b_ready),
    .auto_out_ar_valid               (_axi4frag_auto_out_ar_valid),
    .auto_out_ar_bits_id             (_axi4frag_auto_out_ar_bits_id),
    .auto_out_ar_bits_addr           (_axi4frag_auto_out_ar_bits_addr),
    .auto_out_ar_bits_size           (_axi4frag_auto_out_ar_bits_size),
    .auto_out_ar_bits_burst          (_axi4frag_auto_out_ar_bits_burst),
    .auto_out_ar_bits_lock           (_axi4frag_auto_out_ar_bits_lock),
    .auto_out_ar_bits_cache          (_axi4frag_auto_out_ar_bits_cache),
    .auto_out_ar_bits_prot           (_axi4frag_auto_out_ar_bits_prot),
    .auto_out_ar_bits_qos            (_axi4frag_auto_out_ar_bits_qos),
    .auto_out_ar_bits_echo_real_last (_axi4frag_auto_out_ar_bits_echo_real_last),
    .auto_out_r_ready                (_axi4frag_auto_out_r_ready)
  );
endmodule

module AXI4RAM_1(
  input         clock,
                reset,
                auto_in_aw_valid,
  input  [3:0]  auto_in_aw_bits_id,
  input  [30:0] auto_in_aw_bits_addr,
  input         auto_in_aw_bits_echo_real_last,
                auto_in_w_valid,
  input  [63:0] auto_in_w_bits_data,
  input  [7:0]  auto_in_w_bits_strb,
  input         auto_in_b_ready,
                auto_in_ar_valid,
  input  [3:0]  auto_in_ar_bits_id,
  input  [30:0] auto_in_ar_bits_addr,
  input         auto_in_ar_bits_echo_real_last,
                auto_in_r_ready,
  output        auto_in_aw_ready,
                auto_in_w_ready,
                auto_in_b_valid,
  output [3:0]  auto_in_b_bits_id,
  output [1:0]  auto_in_b_bits_resp,
  output        auto_in_b_bits_echo_real_last,
                auto_in_ar_ready,
                auto_in_r_valid,
  output [3:0]  auto_in_r_bits_id,
  output [63:0] auto_in_r_bits_data,
  output [1:0]  auto_in_r_bits_resp,
  output        auto_in_r_bits_echo_real_last
);

  wire        nodeIn_ar_ready;
  wire        nodeIn_aw_ready;
  wire [63:0] _mem_ext_R0_data;
  wire        w_sel0 = auto_in_aw_bits_addr[30:12] == 19'h60000;
  reg         w_full;
  reg  [3:0]  w_id;
  reg         w_echo_real_last;
  reg         r_sel1;
  reg         w_sel1;
  wire        _GEN = nodeIn_aw_ready & auto_in_aw_valid;
  wire        _GEN_0 = auto_in_b_ready | ~w_full;
  assign nodeIn_aw_ready = auto_in_w_valid & _GEN_0;
  reg         r_full;
  reg  [3:0]  r_id;
  reg         r_echo_real_last;
  wire        mem_rdata_MPORT_en = nodeIn_ar_ready & auto_in_ar_valid;
  reg         rdata_REG;
  reg  [7:0]  rdata_r_0;
  reg  [7:0]  rdata_r_1;
  reg  [7:0]  rdata_r_2;
  reg  [7:0]  rdata_r_3;
  reg  [7:0]  rdata_r_4;
  reg  [7:0]  rdata_r_5;
  reg  [7:0]  rdata_r_6;
  reg  [7:0]  rdata_r_7;
  assign nodeIn_ar_ready = auto_in_r_ready | ~r_full;
  always @(posedge clock) begin
    if (reset) begin
      w_full <= 1'h0;
      r_full <= 1'h0;
    end
    else begin
      w_full <= _GEN | ~(auto_in_b_ready & w_full) & w_full;
      r_full <= mem_rdata_MPORT_en | ~(auto_in_r_ready & r_full) & r_full;
    end
    if (_GEN) begin
      w_id <= auto_in_aw_bits_id;
      w_echo_real_last <= auto_in_aw_bits_echo_real_last;
    end
    r_sel1 <= auto_in_ar_bits_addr[30:12] == 19'h60000;
    w_sel1 <= w_sel0;
    if (mem_rdata_MPORT_en) begin
      r_id <= auto_in_ar_bits_id;
      r_echo_real_last <= auto_in_ar_bits_echo_real_last;
    end
    rdata_REG <= mem_rdata_MPORT_en;
    if (rdata_REG) begin
      rdata_r_0 <= _mem_ext_R0_data[7:0];
      rdata_r_1 <= _mem_ext_R0_data[15:8];
      rdata_r_2 <= _mem_ext_R0_data[23:16];
      rdata_r_3 <= _mem_ext_R0_data[31:24];
      rdata_r_4 <= _mem_ext_R0_data[39:32];
      rdata_r_5 <= _mem_ext_R0_data[47:40];
      rdata_r_6 <= _mem_ext_R0_data[55:48];
      rdata_r_7 <= _mem_ext_R0_data[63:56];
    end
  end // always @(posedge)
  mem_combMem mem_ext (
    .R0_addr (auto_in_ar_bits_addr[11:3]),
    .R0_en   (mem_rdata_MPORT_en),
    .R0_clk  (clock),
    .W0_addr (auto_in_aw_bits_addr[11:3]),
    .W0_en   (_GEN & w_sel0),
    .W0_clk  (clock),
    .W0_data (auto_in_w_bits_data),
    .W0_mask (auto_in_w_bits_strb),
    .R0_data (_mem_ext_R0_data)
  );
  assign auto_in_aw_ready = nodeIn_aw_ready;
  assign auto_in_w_ready = auto_in_aw_valid & _GEN_0;
  assign auto_in_b_valid = w_full;
  assign auto_in_b_bits_id = w_id;
  assign auto_in_b_bits_resp = w_sel1 ? 2'h0 : 2'h3;
  assign auto_in_b_bits_echo_real_last = w_echo_real_last;
  assign auto_in_ar_ready = nodeIn_ar_ready;
  assign auto_in_r_valid = r_full;
  assign auto_in_r_bits_id = r_id;
  assign auto_in_r_bits_data =
    {rdata_REG ? _mem_ext_R0_data[63:56] : rdata_r_7,
     rdata_REG ? _mem_ext_R0_data[55:48] : rdata_r_6,
     rdata_REG ? _mem_ext_R0_data[47:40] : rdata_r_5,
     rdata_REG ? _mem_ext_R0_data[39:32] : rdata_r_4,
     rdata_REG ? _mem_ext_R0_data[31:24] : rdata_r_3,
     rdata_REG ? _mem_ext_R0_data[23:16] : rdata_r_2,
     rdata_REG ? _mem_ext_R0_data[15:8] : rdata_r_1,
     rdata_REG ? _mem_ext_R0_data[7:0] : rdata_r_0};
  assign auto_in_r_bits_resp = r_sel1 ? 2'h0 : 2'h3;
  assign auto_in_r_bits_echo_real_last = r_echo_real_last;
endmodule

module AXI4Xbar_1(
  input         clock,
                reset,
                auto_anon_in_aw_valid,
  input  [3:0]  auto_anon_in_aw_bits_id,
  input  [30:0] auto_anon_in_aw_bits_addr,
  input  [7:0]  auto_anon_in_aw_bits_len,
  input  [2:0]  auto_anon_in_aw_bits_size,
  input  [1:0]  auto_anon_in_aw_bits_burst,
  input         auto_anon_in_aw_bits_lock,
  input  [3:0]  auto_anon_in_aw_bits_cache,
  input  [2:0]  auto_anon_in_aw_bits_prot,
  input  [3:0]  auto_anon_in_aw_bits_qos,
  input         auto_anon_in_w_valid,
  input  [63:0] auto_anon_in_w_bits_data,
  input  [7:0]  auto_anon_in_w_bits_strb,
  input         auto_anon_in_w_bits_last,
                auto_anon_in_b_ready,
                auto_anon_in_ar_valid,
  input  [3:0]  auto_anon_in_ar_bits_id,
  input  [30:0] auto_anon_in_ar_bits_addr,
  input  [7:0]  auto_anon_in_ar_bits_len,
  input  [2:0]  auto_anon_in_ar_bits_size,
  input  [1:0]  auto_anon_in_ar_bits_burst,
  input         auto_anon_in_ar_bits_lock,
  input  [3:0]  auto_anon_in_ar_bits_cache,
  input  [2:0]  auto_anon_in_ar_bits_prot,
  input  [3:0]  auto_anon_in_ar_bits_qos,
  input         auto_anon_in_r_ready,
                auto_anon_out_aw_ready,
                auto_anon_out_w_ready,
                auto_anon_out_b_valid,
  input  [3:0]  auto_anon_out_b_bits_id,
  input  [1:0]  auto_anon_out_b_bits_resp,
  input         auto_anon_out_ar_ready,
                auto_anon_out_r_valid,
  input  [3:0]  auto_anon_out_r_bits_id,
  input  [63:0] auto_anon_out_r_bits_data,
  input  [1:0]  auto_anon_out_r_bits_resp,
  input         auto_anon_out_r_bits_last,
  output        auto_anon_in_aw_ready,
                auto_anon_in_w_ready,
                auto_anon_in_b_valid,
  output [3:0]  auto_anon_in_b_bits_id,
  output [1:0]  auto_anon_in_b_bits_resp,
  output        auto_anon_in_ar_ready,
                auto_anon_in_r_valid,
  output [3:0]  auto_anon_in_r_bits_id,
  output [63:0] auto_anon_in_r_bits_data,
  output [1:0]  auto_anon_in_r_bits_resp,
  output        auto_anon_in_r_bits_last,
                auto_anon_out_aw_valid,
  output [3:0]  auto_anon_out_aw_bits_id,
  output [30:0] auto_anon_out_aw_bits_addr,
  output [7:0]  auto_anon_out_aw_bits_len,
  output [2:0]  auto_anon_out_aw_bits_size,
  output [1:0]  auto_anon_out_aw_bits_burst,
  output        auto_anon_out_aw_bits_lock,
  output [3:0]  auto_anon_out_aw_bits_cache,
  output [2:0]  auto_anon_out_aw_bits_prot,
  output [3:0]  auto_anon_out_aw_bits_qos,
  output        auto_anon_out_w_valid,
  output [63:0] auto_anon_out_w_bits_data,
  output [7:0]  auto_anon_out_w_bits_strb,
  output        auto_anon_out_w_bits_last,
                auto_anon_out_b_ready,
                auto_anon_out_ar_valid,
  output [3:0]  auto_anon_out_ar_bits_id,
  output [30:0] auto_anon_out_ar_bits_addr,
  output [7:0]  auto_anon_out_ar_bits_len,
  output [2:0]  auto_anon_out_ar_bits_size,
  output [1:0]  auto_anon_out_ar_bits_burst,
  output        auto_anon_out_ar_bits_lock,
  output [3:0]  auto_anon_out_ar_bits_cache,
  output [2:0]  auto_anon_out_ar_bits_prot,
  output [3:0]  auto_anon_out_ar_bits_qos,
  output        auto_anon_out_r_ready
);

  assign auto_anon_in_aw_ready = auto_anon_out_aw_ready;
  assign auto_anon_in_w_ready = auto_anon_out_w_ready;
  assign auto_anon_in_b_valid = auto_anon_out_b_valid;
  assign auto_anon_in_b_bits_id = auto_anon_out_b_bits_id;
  assign auto_anon_in_b_bits_resp = auto_anon_out_b_bits_resp;
  assign auto_anon_in_ar_ready = auto_anon_out_ar_ready;
  assign auto_anon_in_r_valid = auto_anon_out_r_valid;
  assign auto_anon_in_r_bits_id = auto_anon_out_r_bits_id;
  assign auto_anon_in_r_bits_data = auto_anon_out_r_bits_data;
  assign auto_anon_in_r_bits_resp = auto_anon_out_r_bits_resp;
  assign auto_anon_in_r_bits_last = auto_anon_out_r_bits_last;
  assign auto_anon_out_aw_valid = auto_anon_in_aw_valid;
  assign auto_anon_out_aw_bits_id = auto_anon_in_aw_bits_id;
  assign auto_anon_out_aw_bits_addr = auto_anon_in_aw_bits_addr;
  assign auto_anon_out_aw_bits_len = auto_anon_in_aw_bits_len;
  assign auto_anon_out_aw_bits_size = auto_anon_in_aw_bits_size;
  assign auto_anon_out_aw_bits_burst = auto_anon_in_aw_bits_burst;
  assign auto_anon_out_aw_bits_lock = auto_anon_in_aw_bits_lock;
  assign auto_anon_out_aw_bits_cache = auto_anon_in_aw_bits_cache;
  assign auto_anon_out_aw_bits_prot = auto_anon_in_aw_bits_prot;
  assign auto_anon_out_aw_bits_qos = auto_anon_in_aw_bits_qos;
  assign auto_anon_out_w_valid = auto_anon_in_w_valid;
  assign auto_anon_out_w_bits_data = auto_anon_in_w_bits_data;
  assign auto_anon_out_w_bits_strb = auto_anon_in_w_bits_strb;
  assign auto_anon_out_w_bits_last = auto_anon_in_w_bits_last;
  assign auto_anon_out_b_ready = auto_anon_in_b_ready;
  assign auto_anon_out_ar_valid = auto_anon_in_ar_valid;
  assign auto_anon_out_ar_bits_id = auto_anon_in_ar_bits_id;
  assign auto_anon_out_ar_bits_addr = auto_anon_in_ar_bits_addr;
  assign auto_anon_out_ar_bits_len = auto_anon_in_ar_bits_len;
  assign auto_anon_out_ar_bits_size = auto_anon_in_ar_bits_size;
  assign auto_anon_out_ar_bits_burst = auto_anon_in_ar_bits_burst;
  assign auto_anon_out_ar_bits_lock = auto_anon_in_ar_bits_lock;
  assign auto_anon_out_ar_bits_cache = auto_anon_in_ar_bits_cache;
  assign auto_anon_out_ar_bits_prot = auto_anon_in_ar_bits_prot;
  assign auto_anon_out_ar_bits_qos = auto_anon_in_ar_bits_qos;
  assign auto_anon_out_r_ready = auto_anon_in_r_ready;
endmodule

module Queue2_AXI4BundleAW_2(
  input         clock,
                reset,
                io_enq_valid,
  input  [3:0]  io_enq_bits_id,
  input  [30:0] io_enq_bits_addr,
  input  [2:0]  io_enq_bits_size,
  input  [1:0]  io_enq_bits_burst,
  input         io_enq_bits_lock,
  input  [3:0]  io_enq_bits_cache,
  input  [2:0]  io_enq_bits_prot,
  input  [3:0]  io_enq_bits_qos,
  input         io_enq_bits_echo_real_last,
                io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
  output [3:0]  io_deq_bits_id,
  output [30:0] io_deq_bits_addr,
  output        io_deq_bits_echo_real_last
);

  wire [60:0] _ram_ext_R0_data;
  reg         wrap;
  reg         wrap_1;
  reg         maybe_full;
  wire        ptr_match = wrap == wrap_1;
  wire        empty = ptr_match & ~maybe_full;
  wire        full = ptr_match & maybe_full;
  wire        do_enq = ~full & io_enq_valid;
  always @(posedge clock) begin
    if (reset) begin
      wrap <= 1'h0;
      wrap_1 <= 1'h0;
      maybe_full <= 1'h0;
    end
    else begin
      automatic logic do_deq = io_deq_ready & ~empty;
      if (do_enq)
        wrap <= wrap - 1'h1;
      if (do_deq)
        wrap_1 <= wrap_1 - 1'h1;
      if (do_enq != do_deq)
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_combMem_5 ram_ext (
    .R0_addr (wrap_1),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (wrap),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data
      ({io_enq_bits_echo_real_last,
        io_enq_bits_qos,
        io_enq_bits_prot,
        io_enq_bits_cache,
        io_enq_bits_lock,
        io_enq_bits_burst,
        io_enq_bits_size,
        8'h0,
        io_enq_bits_addr,
        io_enq_bits_id}),
    .R0_data (_ram_ext_R0_data)
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
  assign io_deq_bits_id = _ram_ext_R0_data[3:0];
  assign io_deq_bits_addr = _ram_ext_R0_data[34:4];
  assign io_deq_bits_echo_real_last = _ram_ext_R0_data[60];
endmodule

module AXI4Buffer_2(
  input         clock,
                reset,
                auto_in_aw_valid,
  input  [3:0]  auto_in_aw_bits_id,
  input  [30:0] auto_in_aw_bits_addr,
  input  [2:0]  auto_in_aw_bits_size,
  input  [1:0]  auto_in_aw_bits_burst,
  input         auto_in_aw_bits_lock,
  input  [3:0]  auto_in_aw_bits_cache,
  input  [2:0]  auto_in_aw_bits_prot,
  input  [3:0]  auto_in_aw_bits_qos,
  input         auto_in_aw_bits_echo_real_last,
                auto_in_w_valid,
  input  [63:0] auto_in_w_bits_data,
  input  [7:0]  auto_in_w_bits_strb,
  input         auto_in_w_bits_last,
                auto_in_b_ready,
                auto_in_ar_valid,
  input  [3:0]  auto_in_ar_bits_id,
  input  [30:0] auto_in_ar_bits_addr,
  input  [2:0]  auto_in_ar_bits_size,
  input  [1:0]  auto_in_ar_bits_burst,
  input         auto_in_ar_bits_lock,
  input  [3:0]  auto_in_ar_bits_cache,
  input  [2:0]  auto_in_ar_bits_prot,
  input  [3:0]  auto_in_ar_bits_qos,
  input         auto_in_ar_bits_echo_real_last,
                auto_in_r_ready,
                auto_out_aw_ready,
                auto_out_w_ready,
                auto_out_b_valid,
  input  [3:0]  auto_out_b_bits_id,
  input  [1:0]  auto_out_b_bits_resp,
  input         auto_out_b_bits_echo_real_last,
                auto_out_ar_ready,
                auto_out_r_valid,
  input  [3:0]  auto_out_r_bits_id,
  input  [63:0] auto_out_r_bits_data,
  input  [1:0]  auto_out_r_bits_resp,
  input         auto_out_r_bits_echo_real_last,
  output        auto_in_aw_ready,
                auto_in_w_ready,
                auto_in_b_valid,
  output [3:0]  auto_in_b_bits_id,
  output [1:0]  auto_in_b_bits_resp,
  output        auto_in_b_bits_echo_real_last,
                auto_in_ar_ready,
                auto_in_r_valid,
  output [3:0]  auto_in_r_bits_id,
  output [63:0] auto_in_r_bits_data,
  output [1:0]  auto_in_r_bits_resp,
  output        auto_in_r_bits_echo_real_last,
                auto_in_r_bits_last,
                auto_out_aw_valid,
  output [3:0]  auto_out_aw_bits_id,
  output [30:0] auto_out_aw_bits_addr,
  output        auto_out_aw_bits_echo_real_last,
                auto_out_w_valid,
  output [63:0] auto_out_w_bits_data,
  output [7:0]  auto_out_w_bits_strb,
  output        auto_out_b_ready,
                auto_out_ar_valid,
  output [3:0]  auto_out_ar_bits_id,
  output [30:0] auto_out_ar_bits_addr,
  output        auto_out_ar_bits_echo_real_last,
                auto_out_r_ready
);

  Queue2_AXI4BundleAW_2 nodeOut_aw_deq_q (
    .clock                      (clock),
    .reset                      (reset),
    .io_enq_valid               (auto_in_aw_valid),
    .io_enq_bits_id             (auto_in_aw_bits_id),
    .io_enq_bits_addr           (auto_in_aw_bits_addr),
    .io_enq_bits_size           (auto_in_aw_bits_size),
    .io_enq_bits_burst          (auto_in_aw_bits_burst),
    .io_enq_bits_lock           (auto_in_aw_bits_lock),
    .io_enq_bits_cache          (auto_in_aw_bits_cache),
    .io_enq_bits_prot           (auto_in_aw_bits_prot),
    .io_enq_bits_qos            (auto_in_aw_bits_qos),
    .io_enq_bits_echo_real_last (auto_in_aw_bits_echo_real_last),
    .io_deq_ready               (auto_out_aw_ready),
    .io_enq_ready               (auto_in_aw_ready),
    .io_deq_valid               (auto_out_aw_valid),
    .io_deq_bits_id             (auto_out_aw_bits_id),
    .io_deq_bits_addr           (auto_out_aw_bits_addr),
    .io_deq_bits_echo_real_last (auto_out_aw_bits_echo_real_last)
  );
  Queue2_AXI4BundleW nodeOut_w_deq_q (
    .clock            (clock),
    .reset            (reset),
    .io_enq_valid     (auto_in_w_valid),
    .io_enq_bits_data (auto_in_w_bits_data),
    .io_enq_bits_strb (auto_in_w_bits_strb),
    .io_enq_bits_last (auto_in_w_bits_last),
    .io_deq_ready     (auto_out_w_ready),
    .io_enq_ready     (auto_in_w_ready),
    .io_deq_valid     (auto_out_w_valid),
    .io_deq_bits_data (auto_out_w_bits_data),
    .io_deq_bits_strb (auto_out_w_bits_strb),
    .io_deq_bits_last (/* unused */)
  );
  Queue2_AXI4BundleB_1 nodeIn_b_deq_q (
    .clock                      (clock),
    .reset                      (reset),
    .io_enq_valid               (auto_out_b_valid),
    .io_enq_bits_id             (auto_out_b_bits_id),
    .io_enq_bits_resp           (auto_out_b_bits_resp),
    .io_enq_bits_echo_real_last (auto_out_b_bits_echo_real_last),
    .io_deq_ready               (auto_in_b_ready),
    .io_enq_ready               (auto_out_b_ready),
    .io_deq_valid               (auto_in_b_valid),
    .io_deq_bits_id             (auto_in_b_bits_id),
    .io_deq_bits_resp           (auto_in_b_bits_resp),
    .io_deq_bits_echo_real_last (auto_in_b_bits_echo_real_last)
  );
  Queue2_AXI4BundleAW_2 nodeOut_ar_deq_q (
    .clock                      (clock),
    .reset                      (reset),
    .io_enq_valid               (auto_in_ar_valid),
    .io_enq_bits_id             (auto_in_ar_bits_id),
    .io_enq_bits_addr           (auto_in_ar_bits_addr),
    .io_enq_bits_size           (auto_in_ar_bits_size),
    .io_enq_bits_burst          (auto_in_ar_bits_burst),
    .io_enq_bits_lock           (auto_in_ar_bits_lock),
    .io_enq_bits_cache          (auto_in_ar_bits_cache),
    .io_enq_bits_prot           (auto_in_ar_bits_prot),
    .io_enq_bits_qos            (auto_in_ar_bits_qos),
    .io_enq_bits_echo_real_last (auto_in_ar_bits_echo_real_last),
    .io_deq_ready               (auto_out_ar_ready),
    .io_enq_ready               (auto_in_ar_ready),
    .io_deq_valid               (auto_out_ar_valid),
    .io_deq_bits_id             (auto_out_ar_bits_id),
    .io_deq_bits_addr           (auto_out_ar_bits_addr),
    .io_deq_bits_echo_real_last (auto_out_ar_bits_echo_real_last)
  );
  Queue2_AXI4BundleR_1 nodeIn_r_deq_q (
    .clock                      (clock),
    .reset                      (reset),
    .io_enq_valid               (auto_out_r_valid),
    .io_enq_bits_id             (auto_out_r_bits_id),
    .io_enq_bits_data           (auto_out_r_bits_data),
    .io_enq_bits_resp           (auto_out_r_bits_resp),
    .io_enq_bits_echo_real_last (auto_out_r_bits_echo_real_last),
    .io_deq_ready               (auto_in_r_ready),
    .io_enq_ready               (auto_out_r_ready),
    .io_deq_valid               (auto_in_r_valid),
    .io_deq_bits_id             (auto_in_r_bits_id),
    .io_deq_bits_data           (auto_in_r_bits_data),
    .io_deq_bits_resp           (auto_in_r_bits_resp),
    .io_deq_bits_echo_real_last (auto_in_r_bits_echo_real_last),
    .io_deq_bits_last           (auto_in_r_bits_last)
  );
endmodule

module Queue1_AXI4BundleAR_2(
  input         clock,
                reset,
                io_enq_valid,
  input  [3:0]  io_enq_bits_id,
  input  [30:0] io_enq_bits_addr,
  input  [7:0]  io_enq_bits_len,
  input  [2:0]  io_enq_bits_size,
  input  [1:0]  io_enq_bits_burst,
  input         io_enq_bits_lock,
  input  [3:0]  io_enq_bits_cache,
  input  [2:0]  io_enq_bits_prot,
  input  [3:0]  io_enq_bits_qos,
  input         io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
  output [3:0]  io_deq_bits_id,
  output [30:0] io_deq_bits_addr,
  output [7:0]  io_deq_bits_len,
  output [2:0]  io_deq_bits_size,
  output [1:0]  io_deq_bits_burst,
  output        io_deq_bits_lock,
  output [3:0]  io_deq_bits_cache,
  output [2:0]  io_deq_bits_prot,
  output [3:0]  io_deq_bits_qos
);

  reg  [59:0] ram;
  reg         full;
  wire        _io_deq_valid_output = io_enq_valid | full;
  wire        do_enq = ~(~full & io_deq_ready) & ~full & io_enq_valid;
  always @(posedge clock) begin
    if (do_enq)
      ram <=
        {io_enq_bits_qos,
         io_enq_bits_prot,
         io_enq_bits_cache,
         io_enq_bits_lock,
         io_enq_bits_burst,
         io_enq_bits_size,
         io_enq_bits_len,
         io_enq_bits_addr,
         io_enq_bits_id};
    if (reset)
      full <= 1'h0;
    else if (do_enq != (full & io_deq_ready & _io_deq_valid_output))
      full <= do_enq;
  end // always @(posedge)
  assign io_enq_ready = ~full;
  assign io_deq_valid = _io_deq_valid_output;
  assign io_deq_bits_id = full ? ram[3:0] : io_enq_bits_id;
  assign io_deq_bits_addr = full ? ram[34:4] : io_enq_bits_addr;
  assign io_deq_bits_len = full ? ram[42:35] : io_enq_bits_len;
  assign io_deq_bits_size = full ? ram[45:43] : io_enq_bits_size;
  assign io_deq_bits_burst = full ? ram[47:46] : io_enq_bits_burst;
  assign io_deq_bits_lock = full ? ram[48] : io_enq_bits_lock;
  assign io_deq_bits_cache = full ? ram[52:49] : io_enq_bits_cache;
  assign io_deq_bits_prot = full ? ram[55:53] : io_enq_bits_prot;
  assign io_deq_bits_qos = full ? ram[59:56] : io_enq_bits_qos;
endmodule

module AXI4Fragmenter_2(
  input         clock,
                reset,
                auto_in_aw_valid,
  input  [3:0]  auto_in_aw_bits_id,
  input  [30:0] auto_in_aw_bits_addr,
  input  [7:0]  auto_in_aw_bits_len,
  input  [2:0]  auto_in_aw_bits_size,
  input  [1:0]  auto_in_aw_bits_burst,
  input         auto_in_aw_bits_lock,
  input  [3:0]  auto_in_aw_bits_cache,
  input  [2:0]  auto_in_aw_bits_prot,
  input  [3:0]  auto_in_aw_bits_qos,
  input         auto_in_w_valid,
  input  [63:0] auto_in_w_bits_data,
  input  [7:0]  auto_in_w_bits_strb,
  input         auto_in_w_bits_last,
                auto_in_b_ready,
                auto_in_ar_valid,
  input  [3:0]  auto_in_ar_bits_id,
  input  [30:0] auto_in_ar_bits_addr,
  input  [7:0]  auto_in_ar_bits_len,
  input  [2:0]  auto_in_ar_bits_size,
  input  [1:0]  auto_in_ar_bits_burst,
  input         auto_in_ar_bits_lock,
  input  [3:0]  auto_in_ar_bits_cache,
  input  [2:0]  auto_in_ar_bits_prot,
  input  [3:0]  auto_in_ar_bits_qos,
  input         auto_in_r_ready,
                auto_out_aw_ready,
                auto_out_w_ready,
                auto_out_b_valid,
  input  [3:0]  auto_out_b_bits_id,
  input  [1:0]  auto_out_b_bits_resp,
  input         auto_out_b_bits_echo_real_last,
                auto_out_ar_ready,
                auto_out_r_valid,
  input  [3:0]  auto_out_r_bits_id,
  input  [63:0] auto_out_r_bits_data,
  input  [1:0]  auto_out_r_bits_resp,
  input         auto_out_r_bits_echo_real_last,
                auto_out_r_bits_last,
  output        auto_in_aw_ready,
                auto_in_w_ready,
                auto_in_b_valid,
  output [3:0]  auto_in_b_bits_id,
  output [1:0]  auto_in_b_bits_resp,
  output        auto_in_ar_ready,
                auto_in_r_valid,
  output [3:0]  auto_in_r_bits_id,
  output [63:0] auto_in_r_bits_data,
  output [1:0]  auto_in_r_bits_resp,
  output        auto_in_r_bits_last,
                auto_out_aw_valid,
  output [3:0]  auto_out_aw_bits_id,
  output [30:0] auto_out_aw_bits_addr,
  output [2:0]  auto_out_aw_bits_size,
  output [1:0]  auto_out_aw_bits_burst,
  output        auto_out_aw_bits_lock,
  output [3:0]  auto_out_aw_bits_cache,
  output [2:0]  auto_out_aw_bits_prot,
  output [3:0]  auto_out_aw_bits_qos,
  output        auto_out_aw_bits_echo_real_last,
                auto_out_w_valid,
  output [63:0] auto_out_w_bits_data,
  output [7:0]  auto_out_w_bits_strb,
  output        auto_out_w_bits_last,
                auto_out_b_ready,
                auto_out_ar_valid,
  output [3:0]  auto_out_ar_bits_id,
  output [30:0] auto_out_ar_bits_addr,
  output [2:0]  auto_out_ar_bits_size,
  output [1:0]  auto_out_ar_bits_burst,
  output        auto_out_ar_bits_lock,
  output [3:0]  auto_out_ar_bits_cache,
  output [2:0]  auto_out_ar_bits_prot,
  output [3:0]  auto_out_ar_bits_qos,
  output        auto_out_ar_bits_echo_real_last,
                auto_out_r_ready
);

  wire             nodeOut_w_valid;
  wire             wbeats_ready;
  wire             in_aw_ready;
  wire             _in_w_deq_q_io_deq_valid;
  wire             _in_w_deq_q_io_deq_bits_last;
  wire             _deq_q_1_io_deq_valid;
  wire [30:0]      _deq_q_1_io_deq_bits_addr;
  wire [7:0]       _deq_q_1_io_deq_bits_len;
  wire [2:0]       _deq_q_1_io_deq_bits_size;
  wire [1:0]       _deq_q_1_io_deq_bits_burst;
  wire             _deq_q_io_deq_valid;
  wire [30:0]      _deq_q_io_deq_bits_addr;
  wire [7:0]       _deq_q_io_deq_bits_len;
  wire [2:0]       _deq_q_io_deq_bits_size;
  wire [1:0]       _deq_q_io_deq_bits_burst;
  reg              busy;
  reg  [30:0]      r_addr;
  reg  [7:0]       r_len;
  wire [7:0]       len = busy ? r_len : _deq_q_io_deq_bits_len;
  wire [30:0]      addr = busy ? r_addr : _deq_q_io_deq_bits_addr;
  wire [30:0]      _GEN = ~addr;
  wire [9:0]       _GEN_0 = 10'h7 << _deq_q_io_deq_bits_size;
  reg              busy_1;
  reg  [30:0]      r_addr_1;
  reg  [7:0]       r_len_1;
  wire [7:0]       len_1 = busy_1 ? r_len_1 : _deq_q_1_io_deq_bits_len;
  wire [30:0]      addr_1 = busy_1 ? r_addr_1 : _deq_q_1_io_deq_bits_addr;
  wire [30:0]      _GEN_1 = ~addr_1;
  wire [9:0]       _GEN_2 = 10'h7 << _deq_q_1_io_deq_bits_size;
  reg              wbeats_latched;
  wire             _GEN_3 = wbeats_ready | wbeats_latched;
  wire             nodeOut_aw_valid = _deq_q_1_io_deq_valid & _GEN_3;
  assign in_aw_ready = auto_out_aw_ready & _GEN_3;
  wire             wbeats_valid = _deq_q_1_io_deq_valid & ~wbeats_latched;
  reg  [8:0]       w_counter;
  assign wbeats_ready = w_counter == 9'h0;
  wire [8:0]       w_todo = wbeats_ready ? {8'h0, wbeats_valid} : w_counter;
  wire             nodeOut_w_bits_last = w_todo == 9'h1;
  wire             _GEN_4 = auto_out_w_ready & nodeOut_w_valid;
  wire             _GEN_5 = ~wbeats_ready | wbeats_valid;
  assign nodeOut_w_valid = _in_w_deq_q_io_deq_valid & _GEN_5;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (~reset & ~(~_GEN_4 | (|w_todo))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Fragmenter.scala:181 assert (!out.w.fire || w_todo =/= 0.U) // underflow impossible\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(~nodeOut_w_valid | ~_in_w_deq_q_io_deq_bits_last
              | nodeOut_w_bits_last)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Fragmenter.scala:190 assert (!out.w.valid || !in_w.bits.last || w_last)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  wire             nodeOut_b_ready = auto_in_b_ready | ~auto_out_b_bits_echo_real_last;
  reg  [1:0]       error_0;
  reg  [1:0]       error_1;
  reg  [1:0]       error_2;
  reg  [1:0]       error_3;
  reg  [1:0]       error_4;
  reg  [1:0]       error_5;
  reg  [1:0]       error_6;
  reg  [1:0]       error_7;
  reg  [1:0]       error_8;
  reg  [1:0]       error_9;
  reg  [1:0]       error_10;
  reg  [1:0]       error_11;
  reg  [1:0]       error_12;
  reg  [1:0]       error_13;
  reg  [1:0]       error_14;
  reg  [1:0]       error_15;
  wire [15:0][1:0] _GEN_6 =
    {{error_15},
     {error_14},
     {error_13},
     {error_12},
     {error_11},
     {error_10},
     {error_9},
     {error_8},
     {error_7},
     {error_6},
     {error_5},
     {error_4},
     {error_3},
     {error_2},
     {error_1},
     {error_0}};
  always @(posedge clock) begin
    automatic logic _GEN_7;
    automatic logic _GEN_8;
    _GEN_7 = auto_out_ar_ready & _deq_q_io_deq_valid;
    _GEN_8 = in_aw_ready & _deq_q_1_io_deq_valid;
    if (reset) begin
      busy <= 1'h0;
      busy_1 <= 1'h0;
      wbeats_latched <= 1'h0;
      w_counter <= 9'h0;
      error_0 <= 2'h0;
      error_1 <= 2'h0;
      error_2 <= 2'h0;
      error_3 <= 2'h0;
      error_4 <= 2'h0;
      error_5 <= 2'h0;
      error_6 <= 2'h0;
      error_7 <= 2'h0;
      error_8 <= 2'h0;
      error_9 <= 2'h0;
      error_10 <= 2'h0;
      error_11 <= 2'h0;
      error_12 <= 2'h0;
      error_13 <= 2'h0;
      error_14 <= 2'h0;
      error_15 <= 2'h0;
    end
    else begin
      automatic logic _GEN_9 = nodeOut_b_ready & auto_out_b_valid;
      if (_GEN_7)
        busy <= |len;
      if (_GEN_8)
        busy_1 <= |len_1;
      wbeats_latched <=
        ~(auto_out_aw_ready & nodeOut_aw_valid)
        & (wbeats_valid & wbeats_ready | wbeats_latched);
      w_counter <= w_todo - {8'h0, _GEN_4};
      if (auto_out_b_bits_id == 4'h0 & _GEN_9) begin
        if (auto_out_b_bits_echo_real_last)
          error_0 <= 2'h0;
        else
          error_0 <= error_0 | auto_out_b_bits_resp;
      end
      if (auto_out_b_bits_id == 4'h1 & _GEN_9) begin
        if (auto_out_b_bits_echo_real_last)
          error_1 <= 2'h0;
        else
          error_1 <= error_1 | auto_out_b_bits_resp;
      end
      if (auto_out_b_bits_id == 4'h2 & _GEN_9) begin
        if (auto_out_b_bits_echo_real_last)
          error_2 <= 2'h0;
        else
          error_2 <= error_2 | auto_out_b_bits_resp;
      end
      if (auto_out_b_bits_id == 4'h3 & _GEN_9) begin
        if (auto_out_b_bits_echo_real_last)
          error_3 <= 2'h0;
        else
          error_3 <= error_3 | auto_out_b_bits_resp;
      end
      if (auto_out_b_bits_id == 4'h4 & _GEN_9) begin
        if (auto_out_b_bits_echo_real_last)
          error_4 <= 2'h0;
        else
          error_4 <= error_4 | auto_out_b_bits_resp;
      end
      if (auto_out_b_bits_id == 4'h5 & _GEN_9) begin
        if (auto_out_b_bits_echo_real_last)
          error_5 <= 2'h0;
        else
          error_5 <= error_5 | auto_out_b_bits_resp;
      end
      if (auto_out_b_bits_id == 4'h6 & _GEN_9) begin
        if (auto_out_b_bits_echo_real_last)
          error_6 <= 2'h0;
        else
          error_6 <= error_6 | auto_out_b_bits_resp;
      end
      if (auto_out_b_bits_id == 4'h7 & _GEN_9) begin
        if (auto_out_b_bits_echo_real_last)
          error_7 <= 2'h0;
        else
          error_7 <= error_7 | auto_out_b_bits_resp;
      end
      if (auto_out_b_bits_id == 4'h8 & _GEN_9) begin
        if (auto_out_b_bits_echo_real_last)
          error_8 <= 2'h0;
        else
          error_8 <= error_8 | auto_out_b_bits_resp;
      end
      if (auto_out_b_bits_id == 4'h9 & _GEN_9) begin
        if (auto_out_b_bits_echo_real_last)
          error_9 <= 2'h0;
        else
          error_9 <= error_9 | auto_out_b_bits_resp;
      end
      if (auto_out_b_bits_id == 4'hA & _GEN_9) begin
        if (auto_out_b_bits_echo_real_last)
          error_10 <= 2'h0;
        else
          error_10 <= error_10 | auto_out_b_bits_resp;
      end
      if (auto_out_b_bits_id == 4'hB & _GEN_9) begin
        if (auto_out_b_bits_echo_real_last)
          error_11 <= 2'h0;
        else
          error_11 <= error_11 | auto_out_b_bits_resp;
      end
      if (auto_out_b_bits_id == 4'hC & _GEN_9) begin
        if (auto_out_b_bits_echo_real_last)
          error_12 <= 2'h0;
        else
          error_12 <= error_12 | auto_out_b_bits_resp;
      end
      if (auto_out_b_bits_id == 4'hD & _GEN_9) begin
        if (auto_out_b_bits_echo_real_last)
          error_13 <= 2'h0;
        else
          error_13 <= error_13 | auto_out_b_bits_resp;
      end
      if (auto_out_b_bits_id == 4'hE & _GEN_9) begin
        if (auto_out_b_bits_echo_real_last)
          error_14 <= 2'h0;
        else
          error_14 <= error_14 | auto_out_b_bits_resp;
      end
      if ((&auto_out_b_bits_id) & _GEN_9) begin
        if (auto_out_b_bits_echo_real_last)
          error_15 <= 2'h0;
        else
          error_15 <= error_15 | auto_out_b_bits_resp;
      end
    end
    if (_GEN_7) begin
      if (_deq_q_io_deq_bits_burst == 2'h0)
        r_addr <= _deq_q_io_deq_bits_addr;
      else begin
        automatic logic [30:0] inc_addr;
        inc_addr = addr + {15'h0, 16'h1 << _deq_q_io_deq_bits_size};
        if (_deq_q_io_deq_bits_burst == 2'h2) begin
          automatic logic [22:0] _GEN_10 =
            {7'h0, _deq_q_io_deq_bits_len, 8'hFF} << _deq_q_io_deq_bits_size;
          automatic logic [30:0] _GEN_11 = ~_deq_q_io_deq_bits_addr;
          r_addr <=
            {16'h0, inc_addr[14:0] & _GEN_10[22:8]}
            | ~{_GEN_11[30:15], _GEN_11[14:0] | _GEN_10[22:8]};
        end
        else
          r_addr <= inc_addr;
      end
      r_len <= len - 8'h1;
    end
    if (_GEN_8) begin
      if (_deq_q_1_io_deq_bits_burst == 2'h0)
        r_addr_1 <= _deq_q_1_io_deq_bits_addr;
      else begin
        automatic logic [30:0] inc_addr_1;
        inc_addr_1 = addr_1 + {15'h0, 16'h1 << _deq_q_1_io_deq_bits_size};
        if (_deq_q_1_io_deq_bits_burst == 2'h2) begin
          automatic logic [22:0] _GEN_12 =
            {7'h0, _deq_q_1_io_deq_bits_len, 8'hFF} << _deq_q_1_io_deq_bits_size;
          automatic logic [30:0] _GEN_13 = ~_deq_q_1_io_deq_bits_addr;
          r_addr_1 <=
            {16'h0, inc_addr_1[14:0] & _GEN_12[22:8]}
            | ~{_GEN_13[30:15], _GEN_13[14:0] | _GEN_12[22:8]};
        end
        else
          r_addr_1 <= inc_addr_1;
      end
      r_len_1 <= len_1 - 8'h1;
    end
  end // always @(posedge)
  Queue1_AXI4BundleAR_2 deq_q (
    .clock             (clock),
    .reset             (reset),
    .io_enq_valid      (auto_in_ar_valid),
    .io_enq_bits_id    (auto_in_ar_bits_id),
    .io_enq_bits_addr  (auto_in_ar_bits_addr),
    .io_enq_bits_len   (auto_in_ar_bits_len),
    .io_enq_bits_size  (auto_in_ar_bits_size),
    .io_enq_bits_burst (auto_in_ar_bits_burst),
    .io_enq_bits_lock  (auto_in_ar_bits_lock),
    .io_enq_bits_cache (auto_in_ar_bits_cache),
    .io_enq_bits_prot  (auto_in_ar_bits_prot),
    .io_enq_bits_qos   (auto_in_ar_bits_qos),
    .io_deq_ready      (auto_out_ar_ready & ~(|len)),
    .io_enq_ready      (auto_in_ar_ready),
    .io_deq_valid      (_deq_q_io_deq_valid),
    .io_deq_bits_id    (auto_out_ar_bits_id),
    .io_deq_bits_addr  (_deq_q_io_deq_bits_addr),
    .io_deq_bits_len   (_deq_q_io_deq_bits_len),
    .io_deq_bits_size  (_deq_q_io_deq_bits_size),
    .io_deq_bits_burst (_deq_q_io_deq_bits_burst),
    .io_deq_bits_lock  (auto_out_ar_bits_lock),
    .io_deq_bits_cache (auto_out_ar_bits_cache),
    .io_deq_bits_prot  (auto_out_ar_bits_prot),
    .io_deq_bits_qos   (auto_out_ar_bits_qos)
  );
  Queue1_AXI4BundleAR_2 deq_q_1 (
    .clock             (clock),
    .reset             (reset),
    .io_enq_valid      (auto_in_aw_valid),
    .io_enq_bits_id    (auto_in_aw_bits_id),
    .io_enq_bits_addr  (auto_in_aw_bits_addr),
    .io_enq_bits_len   (auto_in_aw_bits_len),
    .io_enq_bits_size  (auto_in_aw_bits_size),
    .io_enq_bits_burst (auto_in_aw_bits_burst),
    .io_enq_bits_lock  (auto_in_aw_bits_lock),
    .io_enq_bits_cache (auto_in_aw_bits_cache),
    .io_enq_bits_prot  (auto_in_aw_bits_prot),
    .io_enq_bits_qos   (auto_in_aw_bits_qos),
    .io_deq_ready      (in_aw_ready & ~(|len_1)),
    .io_enq_ready      (auto_in_aw_ready),
    .io_deq_valid      (_deq_q_1_io_deq_valid),
    .io_deq_bits_id    (auto_out_aw_bits_id),
    .io_deq_bits_addr  (_deq_q_1_io_deq_bits_addr),
    .io_deq_bits_len   (_deq_q_1_io_deq_bits_len),
    .io_deq_bits_size  (_deq_q_1_io_deq_bits_size),
    .io_deq_bits_burst (_deq_q_1_io_deq_bits_burst),
    .io_deq_bits_lock  (auto_out_aw_bits_lock),
    .io_deq_bits_cache (auto_out_aw_bits_cache),
    .io_deq_bits_prot  (auto_out_aw_bits_prot),
    .io_deq_bits_qos   (auto_out_aw_bits_qos)
  );
  Queue1_AXI4BundleW in_w_deq_q (
    .clock            (clock),
    .reset            (reset),
    .io_enq_valid     (auto_in_w_valid),
    .io_enq_bits_data (auto_in_w_bits_data),
    .io_enq_bits_strb (auto_in_w_bits_strb),
    .io_enq_bits_last (auto_in_w_bits_last),
    .io_deq_ready     (auto_out_w_ready & _GEN_5),
    .io_enq_ready     (auto_in_w_ready),
    .io_deq_valid     (_in_w_deq_q_io_deq_valid),
    .io_deq_bits_data (auto_out_w_bits_data),
    .io_deq_bits_strb (auto_out_w_bits_strb),
    .io_deq_bits_last (_in_w_deq_q_io_deq_bits_last)
  );
  assign auto_in_b_valid = auto_out_b_valid & auto_out_b_bits_echo_real_last;
  assign auto_in_b_bits_id = auto_out_b_bits_id;
  assign auto_in_b_bits_resp = auto_out_b_bits_resp | _GEN_6[auto_out_b_bits_id];
  assign auto_in_r_valid = auto_out_r_valid;
  assign auto_in_r_bits_id = auto_out_r_bits_id;
  assign auto_in_r_bits_data = auto_out_r_bits_data;
  assign auto_in_r_bits_resp = auto_out_r_bits_resp;
  assign auto_in_r_bits_last = auto_out_r_bits_last & auto_out_r_bits_echo_real_last;
  assign auto_out_aw_valid = nodeOut_aw_valid;
  assign auto_out_aw_bits_addr = ~{_GEN_1[30:3], _GEN_1[2:0] | ~(_GEN_2[2:0])};
  assign auto_out_aw_bits_size = _deq_q_1_io_deq_bits_size;
  assign auto_out_aw_bits_burst = _deq_q_1_io_deq_bits_burst;
  assign auto_out_aw_bits_echo_real_last = ~(|len_1);
  assign auto_out_w_valid = nodeOut_w_valid;
  assign auto_out_w_bits_last = nodeOut_w_bits_last;
  assign auto_out_b_ready = nodeOut_b_ready;
  assign auto_out_ar_valid = _deq_q_io_deq_valid;
  assign auto_out_ar_bits_addr = ~{_GEN[30:3], _GEN[2:0] | ~(_GEN_0[2:0])};
  assign auto_out_ar_bits_size = _deq_q_io_deq_bits_size;
  assign auto_out_ar_bits_burst = _deq_q_io_deq_bits_burst;
  assign auto_out_ar_bits_echo_real_last = ~(|len);
  assign auto_out_r_ready = auto_in_r_ready;
endmodule

module SimAXIMem_1(
  input         clock,
                reset,
                io_axi4_0_aw_valid,
  input  [3:0]  io_axi4_0_aw_bits_id,
  input  [30:0] io_axi4_0_aw_bits_addr,
  input  [7:0]  io_axi4_0_aw_bits_len,
  input  [2:0]  io_axi4_0_aw_bits_size,
  input  [1:0]  io_axi4_0_aw_bits_burst,
  input         io_axi4_0_aw_bits_lock,
  input  [3:0]  io_axi4_0_aw_bits_cache,
  input  [2:0]  io_axi4_0_aw_bits_prot,
  input  [3:0]  io_axi4_0_aw_bits_qos,
  input         io_axi4_0_w_valid,
  input  [63:0] io_axi4_0_w_bits_data,
  input  [7:0]  io_axi4_0_w_bits_strb,
  input         io_axi4_0_w_bits_last,
                io_axi4_0_b_ready,
                io_axi4_0_ar_valid,
  input  [3:0]  io_axi4_0_ar_bits_id,
  input  [30:0] io_axi4_0_ar_bits_addr,
  input  [7:0]  io_axi4_0_ar_bits_len,
  input  [2:0]  io_axi4_0_ar_bits_size,
  input  [1:0]  io_axi4_0_ar_bits_burst,
  input         io_axi4_0_ar_bits_lock,
  input  [3:0]  io_axi4_0_ar_bits_cache,
  input  [2:0]  io_axi4_0_ar_bits_prot,
  input  [3:0]  io_axi4_0_ar_bits_qos,
  input         io_axi4_0_r_ready,
  output        io_axi4_0_aw_ready,
                io_axi4_0_w_ready,
                io_axi4_0_b_valid,
  output [3:0]  io_axi4_0_b_bits_id,
  output [1:0]  io_axi4_0_b_bits_resp,
  output        io_axi4_0_ar_ready,
                io_axi4_0_r_valid,
  output [3:0]  io_axi4_0_r_bits_id,
  output [63:0] io_axi4_0_r_bits_data,
  output [1:0]  io_axi4_0_r_bits_resp,
  output        io_axi4_0_r_bits_last
);

  wire        _axi4frag_auto_in_aw_ready;
  wire        _axi4frag_auto_in_w_ready;
  wire        _axi4frag_auto_in_b_valid;
  wire [3:0]  _axi4frag_auto_in_b_bits_id;
  wire [1:0]  _axi4frag_auto_in_b_bits_resp;
  wire        _axi4frag_auto_in_ar_ready;
  wire        _axi4frag_auto_in_r_valid;
  wire [3:0]  _axi4frag_auto_in_r_bits_id;
  wire [63:0] _axi4frag_auto_in_r_bits_data;
  wire [1:0]  _axi4frag_auto_in_r_bits_resp;
  wire        _axi4frag_auto_in_r_bits_last;
  wire        _axi4frag_auto_out_aw_valid;
  wire [3:0]  _axi4frag_auto_out_aw_bits_id;
  wire [30:0] _axi4frag_auto_out_aw_bits_addr;
  wire [2:0]  _axi4frag_auto_out_aw_bits_size;
  wire [1:0]  _axi4frag_auto_out_aw_bits_burst;
  wire        _axi4frag_auto_out_aw_bits_lock;
  wire [3:0]  _axi4frag_auto_out_aw_bits_cache;
  wire [2:0]  _axi4frag_auto_out_aw_bits_prot;
  wire [3:0]  _axi4frag_auto_out_aw_bits_qos;
  wire        _axi4frag_auto_out_aw_bits_echo_real_last;
  wire        _axi4frag_auto_out_w_valid;
  wire [63:0] _axi4frag_auto_out_w_bits_data;
  wire [7:0]  _axi4frag_auto_out_w_bits_strb;
  wire        _axi4frag_auto_out_w_bits_last;
  wire        _axi4frag_auto_out_b_ready;
  wire        _axi4frag_auto_out_ar_valid;
  wire [3:0]  _axi4frag_auto_out_ar_bits_id;
  wire [30:0] _axi4frag_auto_out_ar_bits_addr;
  wire [2:0]  _axi4frag_auto_out_ar_bits_size;
  wire [1:0]  _axi4frag_auto_out_ar_bits_burst;
  wire        _axi4frag_auto_out_ar_bits_lock;
  wire [3:0]  _axi4frag_auto_out_ar_bits_cache;
  wire [2:0]  _axi4frag_auto_out_ar_bits_prot;
  wire [3:0]  _axi4frag_auto_out_ar_bits_qos;
  wire        _axi4frag_auto_out_ar_bits_echo_real_last;
  wire        _axi4frag_auto_out_r_ready;
  wire        _axi4buf_auto_in_aw_ready;
  wire        _axi4buf_auto_in_w_ready;
  wire        _axi4buf_auto_in_b_valid;
  wire [3:0]  _axi4buf_auto_in_b_bits_id;
  wire [1:0]  _axi4buf_auto_in_b_bits_resp;
  wire        _axi4buf_auto_in_b_bits_echo_real_last;
  wire        _axi4buf_auto_in_ar_ready;
  wire        _axi4buf_auto_in_r_valid;
  wire [3:0]  _axi4buf_auto_in_r_bits_id;
  wire [63:0] _axi4buf_auto_in_r_bits_data;
  wire [1:0]  _axi4buf_auto_in_r_bits_resp;
  wire        _axi4buf_auto_in_r_bits_echo_real_last;
  wire        _axi4buf_auto_in_r_bits_last;
  wire        _axi4buf_auto_out_aw_valid;
  wire [3:0]  _axi4buf_auto_out_aw_bits_id;
  wire [30:0] _axi4buf_auto_out_aw_bits_addr;
  wire        _axi4buf_auto_out_aw_bits_echo_real_last;
  wire        _axi4buf_auto_out_w_valid;
  wire [63:0] _axi4buf_auto_out_w_bits_data;
  wire [7:0]  _axi4buf_auto_out_w_bits_strb;
  wire        _axi4buf_auto_out_b_ready;
  wire        _axi4buf_auto_out_ar_valid;
  wire [3:0]  _axi4buf_auto_out_ar_bits_id;
  wire [30:0] _axi4buf_auto_out_ar_bits_addr;
  wire        _axi4buf_auto_out_ar_bits_echo_real_last;
  wire        _axi4buf_auto_out_r_ready;
  wire        _axi4xbar_auto_anon_out_aw_valid;
  wire [3:0]  _axi4xbar_auto_anon_out_aw_bits_id;
  wire [30:0] _axi4xbar_auto_anon_out_aw_bits_addr;
  wire [7:0]  _axi4xbar_auto_anon_out_aw_bits_len;
  wire [2:0]  _axi4xbar_auto_anon_out_aw_bits_size;
  wire [1:0]  _axi4xbar_auto_anon_out_aw_bits_burst;
  wire        _axi4xbar_auto_anon_out_aw_bits_lock;
  wire [3:0]  _axi4xbar_auto_anon_out_aw_bits_cache;
  wire [2:0]  _axi4xbar_auto_anon_out_aw_bits_prot;
  wire [3:0]  _axi4xbar_auto_anon_out_aw_bits_qos;
  wire        _axi4xbar_auto_anon_out_w_valid;
  wire [63:0] _axi4xbar_auto_anon_out_w_bits_data;
  wire [7:0]  _axi4xbar_auto_anon_out_w_bits_strb;
  wire        _axi4xbar_auto_anon_out_w_bits_last;
  wire        _axi4xbar_auto_anon_out_b_ready;
  wire        _axi4xbar_auto_anon_out_ar_valid;
  wire [3:0]  _axi4xbar_auto_anon_out_ar_bits_id;
  wire [30:0] _axi4xbar_auto_anon_out_ar_bits_addr;
  wire [7:0]  _axi4xbar_auto_anon_out_ar_bits_len;
  wire [2:0]  _axi4xbar_auto_anon_out_ar_bits_size;
  wire [1:0]  _axi4xbar_auto_anon_out_ar_bits_burst;
  wire        _axi4xbar_auto_anon_out_ar_bits_lock;
  wire [3:0]  _axi4xbar_auto_anon_out_ar_bits_cache;
  wire [2:0]  _axi4xbar_auto_anon_out_ar_bits_prot;
  wire [3:0]  _axi4xbar_auto_anon_out_ar_bits_qos;
  wire        _axi4xbar_auto_anon_out_r_ready;
  wire        _srams_auto_in_aw_ready;
  wire        _srams_auto_in_w_ready;
  wire        _srams_auto_in_b_valid;
  wire [3:0]  _srams_auto_in_b_bits_id;
  wire [1:0]  _srams_auto_in_b_bits_resp;
  wire        _srams_auto_in_b_bits_echo_real_last;
  wire        _srams_auto_in_ar_ready;
  wire        _srams_auto_in_r_valid;
  wire [3:0]  _srams_auto_in_r_bits_id;
  wire [63:0] _srams_auto_in_r_bits_data;
  wire [1:0]  _srams_auto_in_r_bits_resp;
  wire        _srams_auto_in_r_bits_echo_real_last;
  AXI4RAM_1 srams (
    .clock                          (clock),
    .reset                          (reset),
    .auto_in_aw_valid               (_axi4buf_auto_out_aw_valid),
    .auto_in_aw_bits_id             (_axi4buf_auto_out_aw_bits_id),
    .auto_in_aw_bits_addr           (_axi4buf_auto_out_aw_bits_addr),
    .auto_in_aw_bits_echo_real_last (_axi4buf_auto_out_aw_bits_echo_real_last),
    .auto_in_w_valid                (_axi4buf_auto_out_w_valid),
    .auto_in_w_bits_data            (_axi4buf_auto_out_w_bits_data),
    .auto_in_w_bits_strb            (_axi4buf_auto_out_w_bits_strb),
    .auto_in_b_ready                (_axi4buf_auto_out_b_ready),
    .auto_in_ar_valid               (_axi4buf_auto_out_ar_valid),
    .auto_in_ar_bits_id             (_axi4buf_auto_out_ar_bits_id),
    .auto_in_ar_bits_addr           (_axi4buf_auto_out_ar_bits_addr),
    .auto_in_ar_bits_echo_real_last (_axi4buf_auto_out_ar_bits_echo_real_last),
    .auto_in_r_ready                (_axi4buf_auto_out_r_ready),
    .auto_in_aw_ready               (_srams_auto_in_aw_ready),
    .auto_in_w_ready                (_srams_auto_in_w_ready),
    .auto_in_b_valid                (_srams_auto_in_b_valid),
    .auto_in_b_bits_id              (_srams_auto_in_b_bits_id),
    .auto_in_b_bits_resp            (_srams_auto_in_b_bits_resp),
    .auto_in_b_bits_echo_real_last  (_srams_auto_in_b_bits_echo_real_last),
    .auto_in_ar_ready               (_srams_auto_in_ar_ready),
    .auto_in_r_valid                (_srams_auto_in_r_valid),
    .auto_in_r_bits_id              (_srams_auto_in_r_bits_id),
    .auto_in_r_bits_data            (_srams_auto_in_r_bits_data),
    .auto_in_r_bits_resp            (_srams_auto_in_r_bits_resp),
    .auto_in_r_bits_echo_real_last  (_srams_auto_in_r_bits_echo_real_last)
  );
  AXI4Xbar_1 axi4xbar (
    .clock                       (clock),
    .reset                       (reset),
    .auto_anon_in_aw_valid       (io_axi4_0_aw_valid),
    .auto_anon_in_aw_bits_id     (io_axi4_0_aw_bits_id),
    .auto_anon_in_aw_bits_addr   (io_axi4_0_aw_bits_addr),
    .auto_anon_in_aw_bits_len    (io_axi4_0_aw_bits_len),
    .auto_anon_in_aw_bits_size   (io_axi4_0_aw_bits_size),
    .auto_anon_in_aw_bits_burst  (io_axi4_0_aw_bits_burst),
    .auto_anon_in_aw_bits_lock   (io_axi4_0_aw_bits_lock),
    .auto_anon_in_aw_bits_cache  (io_axi4_0_aw_bits_cache),
    .auto_anon_in_aw_bits_prot   (io_axi4_0_aw_bits_prot),
    .auto_anon_in_aw_bits_qos    (io_axi4_0_aw_bits_qos),
    .auto_anon_in_w_valid        (io_axi4_0_w_valid),
    .auto_anon_in_w_bits_data    (io_axi4_0_w_bits_data),
    .auto_anon_in_w_bits_strb    (io_axi4_0_w_bits_strb),
    .auto_anon_in_w_bits_last    (io_axi4_0_w_bits_last),
    .auto_anon_in_b_ready        (io_axi4_0_b_ready),
    .auto_anon_in_ar_valid       (io_axi4_0_ar_valid),
    .auto_anon_in_ar_bits_id     (io_axi4_0_ar_bits_id),
    .auto_anon_in_ar_bits_addr   (io_axi4_0_ar_bits_addr),
    .auto_anon_in_ar_bits_len    (io_axi4_0_ar_bits_len),
    .auto_anon_in_ar_bits_size   (io_axi4_0_ar_bits_size),
    .auto_anon_in_ar_bits_burst  (io_axi4_0_ar_bits_burst),
    .auto_anon_in_ar_bits_lock   (io_axi4_0_ar_bits_lock),
    .auto_anon_in_ar_bits_cache  (io_axi4_0_ar_bits_cache),
    .auto_anon_in_ar_bits_prot   (io_axi4_0_ar_bits_prot),
    .auto_anon_in_ar_bits_qos    (io_axi4_0_ar_bits_qos),
    .auto_anon_in_r_ready        (io_axi4_0_r_ready),
    .auto_anon_out_aw_ready      (_axi4frag_auto_in_aw_ready),
    .auto_anon_out_w_ready       (_axi4frag_auto_in_w_ready),
    .auto_anon_out_b_valid       (_axi4frag_auto_in_b_valid),
    .auto_anon_out_b_bits_id     (_axi4frag_auto_in_b_bits_id),
    .auto_anon_out_b_bits_resp   (_axi4frag_auto_in_b_bits_resp),
    .auto_anon_out_ar_ready      (_axi4frag_auto_in_ar_ready),
    .auto_anon_out_r_valid       (_axi4frag_auto_in_r_valid),
    .auto_anon_out_r_bits_id     (_axi4frag_auto_in_r_bits_id),
    .auto_anon_out_r_bits_data   (_axi4frag_auto_in_r_bits_data),
    .auto_anon_out_r_bits_resp   (_axi4frag_auto_in_r_bits_resp),
    .auto_anon_out_r_bits_last   (_axi4frag_auto_in_r_bits_last),
    .auto_anon_in_aw_ready       (io_axi4_0_aw_ready),
    .auto_anon_in_w_ready        (io_axi4_0_w_ready),
    .auto_anon_in_b_valid        (io_axi4_0_b_valid),
    .auto_anon_in_b_bits_id      (io_axi4_0_b_bits_id),
    .auto_anon_in_b_bits_resp    (io_axi4_0_b_bits_resp),
    .auto_anon_in_ar_ready       (io_axi4_0_ar_ready),
    .auto_anon_in_r_valid        (io_axi4_0_r_valid),
    .auto_anon_in_r_bits_id      (io_axi4_0_r_bits_id),
    .auto_anon_in_r_bits_data    (io_axi4_0_r_bits_data),
    .auto_anon_in_r_bits_resp    (io_axi4_0_r_bits_resp),
    .auto_anon_in_r_bits_last    (io_axi4_0_r_bits_last),
    .auto_anon_out_aw_valid      (_axi4xbar_auto_anon_out_aw_valid),
    .auto_anon_out_aw_bits_id    (_axi4xbar_auto_anon_out_aw_bits_id),
    .auto_anon_out_aw_bits_addr  (_axi4xbar_auto_anon_out_aw_bits_addr),
    .auto_anon_out_aw_bits_len   (_axi4xbar_auto_anon_out_aw_bits_len),
    .auto_anon_out_aw_bits_size  (_axi4xbar_auto_anon_out_aw_bits_size),
    .auto_anon_out_aw_bits_burst (_axi4xbar_auto_anon_out_aw_bits_burst),
    .auto_anon_out_aw_bits_lock  (_axi4xbar_auto_anon_out_aw_bits_lock),
    .auto_anon_out_aw_bits_cache (_axi4xbar_auto_anon_out_aw_bits_cache),
    .auto_anon_out_aw_bits_prot  (_axi4xbar_auto_anon_out_aw_bits_prot),
    .auto_anon_out_aw_bits_qos   (_axi4xbar_auto_anon_out_aw_bits_qos),
    .auto_anon_out_w_valid       (_axi4xbar_auto_anon_out_w_valid),
    .auto_anon_out_w_bits_data   (_axi4xbar_auto_anon_out_w_bits_data),
    .auto_anon_out_w_bits_strb   (_axi4xbar_auto_anon_out_w_bits_strb),
    .auto_anon_out_w_bits_last   (_axi4xbar_auto_anon_out_w_bits_last),
    .auto_anon_out_b_ready       (_axi4xbar_auto_anon_out_b_ready),
    .auto_anon_out_ar_valid      (_axi4xbar_auto_anon_out_ar_valid),
    .auto_anon_out_ar_bits_id    (_axi4xbar_auto_anon_out_ar_bits_id),
    .auto_anon_out_ar_bits_addr  (_axi4xbar_auto_anon_out_ar_bits_addr),
    .auto_anon_out_ar_bits_len   (_axi4xbar_auto_anon_out_ar_bits_len),
    .auto_anon_out_ar_bits_size  (_axi4xbar_auto_anon_out_ar_bits_size),
    .auto_anon_out_ar_bits_burst (_axi4xbar_auto_anon_out_ar_bits_burst),
    .auto_anon_out_ar_bits_lock  (_axi4xbar_auto_anon_out_ar_bits_lock),
    .auto_anon_out_ar_bits_cache (_axi4xbar_auto_anon_out_ar_bits_cache),
    .auto_anon_out_ar_bits_prot  (_axi4xbar_auto_anon_out_ar_bits_prot),
    .auto_anon_out_ar_bits_qos   (_axi4xbar_auto_anon_out_ar_bits_qos),
    .auto_anon_out_r_ready       (_axi4xbar_auto_anon_out_r_ready)
  );
  AXI4Buffer_2 axi4buf (
    .clock                           (clock),
    .reset                           (reset),
    .auto_in_aw_valid                (_axi4frag_auto_out_aw_valid),
    .auto_in_aw_bits_id              (_axi4frag_auto_out_aw_bits_id),
    .auto_in_aw_bits_addr            (_axi4frag_auto_out_aw_bits_addr),
    .auto_in_aw_bits_size            (_axi4frag_auto_out_aw_bits_size),
    .auto_in_aw_bits_burst           (_axi4frag_auto_out_aw_bits_burst),
    .auto_in_aw_bits_lock            (_axi4frag_auto_out_aw_bits_lock),
    .auto_in_aw_bits_cache           (_axi4frag_auto_out_aw_bits_cache),
    .auto_in_aw_bits_prot            (_axi4frag_auto_out_aw_bits_prot),
    .auto_in_aw_bits_qos             (_axi4frag_auto_out_aw_bits_qos),
    .auto_in_aw_bits_echo_real_last  (_axi4frag_auto_out_aw_bits_echo_real_last),
    .auto_in_w_valid                 (_axi4frag_auto_out_w_valid),
    .auto_in_w_bits_data             (_axi4frag_auto_out_w_bits_data),
    .auto_in_w_bits_strb             (_axi4frag_auto_out_w_bits_strb),
    .auto_in_w_bits_last             (_axi4frag_auto_out_w_bits_last),
    .auto_in_b_ready                 (_axi4frag_auto_out_b_ready),
    .auto_in_ar_valid                (_axi4frag_auto_out_ar_valid),
    .auto_in_ar_bits_id              (_axi4frag_auto_out_ar_bits_id),
    .auto_in_ar_bits_addr            (_axi4frag_auto_out_ar_bits_addr),
    .auto_in_ar_bits_size            (_axi4frag_auto_out_ar_bits_size),
    .auto_in_ar_bits_burst           (_axi4frag_auto_out_ar_bits_burst),
    .auto_in_ar_bits_lock            (_axi4frag_auto_out_ar_bits_lock),
    .auto_in_ar_bits_cache           (_axi4frag_auto_out_ar_bits_cache),
    .auto_in_ar_bits_prot            (_axi4frag_auto_out_ar_bits_prot),
    .auto_in_ar_bits_qos             (_axi4frag_auto_out_ar_bits_qos),
    .auto_in_ar_bits_echo_real_last  (_axi4frag_auto_out_ar_bits_echo_real_last),
    .auto_in_r_ready                 (_axi4frag_auto_out_r_ready),
    .auto_out_aw_ready               (_srams_auto_in_aw_ready),
    .auto_out_w_ready                (_srams_auto_in_w_ready),
    .auto_out_b_valid                (_srams_auto_in_b_valid),
    .auto_out_b_bits_id              (_srams_auto_in_b_bits_id),
    .auto_out_b_bits_resp            (_srams_auto_in_b_bits_resp),
    .auto_out_b_bits_echo_real_last  (_srams_auto_in_b_bits_echo_real_last),
    .auto_out_ar_ready               (_srams_auto_in_ar_ready),
    .auto_out_r_valid                (_srams_auto_in_r_valid),
    .auto_out_r_bits_id              (_srams_auto_in_r_bits_id),
    .auto_out_r_bits_data            (_srams_auto_in_r_bits_data),
    .auto_out_r_bits_resp            (_srams_auto_in_r_bits_resp),
    .auto_out_r_bits_echo_real_last  (_srams_auto_in_r_bits_echo_real_last),
    .auto_in_aw_ready                (_axi4buf_auto_in_aw_ready),
    .auto_in_w_ready                 (_axi4buf_auto_in_w_ready),
    .auto_in_b_valid                 (_axi4buf_auto_in_b_valid),
    .auto_in_b_bits_id               (_axi4buf_auto_in_b_bits_id),
    .auto_in_b_bits_resp             (_axi4buf_auto_in_b_bits_resp),
    .auto_in_b_bits_echo_real_last   (_axi4buf_auto_in_b_bits_echo_real_last),
    .auto_in_ar_ready                (_axi4buf_auto_in_ar_ready),
    .auto_in_r_valid                 (_axi4buf_auto_in_r_valid),
    .auto_in_r_bits_id               (_axi4buf_auto_in_r_bits_id),
    .auto_in_r_bits_data             (_axi4buf_auto_in_r_bits_data),
    .auto_in_r_bits_resp             (_axi4buf_auto_in_r_bits_resp),
    .auto_in_r_bits_echo_real_last   (_axi4buf_auto_in_r_bits_echo_real_last),
    .auto_in_r_bits_last             (_axi4buf_auto_in_r_bits_last),
    .auto_out_aw_valid               (_axi4buf_auto_out_aw_valid),
    .auto_out_aw_bits_id             (_axi4buf_auto_out_aw_bits_id),
    .auto_out_aw_bits_addr           (_axi4buf_auto_out_aw_bits_addr),
    .auto_out_aw_bits_echo_real_last (_axi4buf_auto_out_aw_bits_echo_real_last),
    .auto_out_w_valid                (_axi4buf_auto_out_w_valid),
    .auto_out_w_bits_data            (_axi4buf_auto_out_w_bits_data),
    .auto_out_w_bits_strb            (_axi4buf_auto_out_w_bits_strb),
    .auto_out_b_ready                (_axi4buf_auto_out_b_ready),
    .auto_out_ar_valid               (_axi4buf_auto_out_ar_valid),
    .auto_out_ar_bits_id             (_axi4buf_auto_out_ar_bits_id),
    .auto_out_ar_bits_addr           (_axi4buf_auto_out_ar_bits_addr),
    .auto_out_ar_bits_echo_real_last (_axi4buf_auto_out_ar_bits_echo_real_last),
    .auto_out_r_ready                (_axi4buf_auto_out_r_ready)
  );
  AXI4Fragmenter_2 axi4frag (
    .clock                           (clock),
    .reset                           (reset),
    .auto_in_aw_valid                (_axi4xbar_auto_anon_out_aw_valid),
    .auto_in_aw_bits_id              (_axi4xbar_auto_anon_out_aw_bits_id),
    .auto_in_aw_bits_addr            (_axi4xbar_auto_anon_out_aw_bits_addr),
    .auto_in_aw_bits_len             (_axi4xbar_auto_anon_out_aw_bits_len),
    .auto_in_aw_bits_size            (_axi4xbar_auto_anon_out_aw_bits_size),
    .auto_in_aw_bits_burst           (_axi4xbar_auto_anon_out_aw_bits_burst),
    .auto_in_aw_bits_lock            (_axi4xbar_auto_anon_out_aw_bits_lock),
    .auto_in_aw_bits_cache           (_axi4xbar_auto_anon_out_aw_bits_cache),
    .auto_in_aw_bits_prot            (_axi4xbar_auto_anon_out_aw_bits_prot),
    .auto_in_aw_bits_qos             (_axi4xbar_auto_anon_out_aw_bits_qos),
    .auto_in_w_valid                 (_axi4xbar_auto_anon_out_w_valid),
    .auto_in_w_bits_data             (_axi4xbar_auto_anon_out_w_bits_data),
    .auto_in_w_bits_strb             (_axi4xbar_auto_anon_out_w_bits_strb),
    .auto_in_w_bits_last             (_axi4xbar_auto_anon_out_w_bits_last),
    .auto_in_b_ready                 (_axi4xbar_auto_anon_out_b_ready),
    .auto_in_ar_valid                (_axi4xbar_auto_anon_out_ar_valid),
    .auto_in_ar_bits_id              (_axi4xbar_auto_anon_out_ar_bits_id),
    .auto_in_ar_bits_addr            (_axi4xbar_auto_anon_out_ar_bits_addr),
    .auto_in_ar_bits_len             (_axi4xbar_auto_anon_out_ar_bits_len),
    .auto_in_ar_bits_size            (_axi4xbar_auto_anon_out_ar_bits_size),
    .auto_in_ar_bits_burst           (_axi4xbar_auto_anon_out_ar_bits_burst),
    .auto_in_ar_bits_lock            (_axi4xbar_auto_anon_out_ar_bits_lock),
    .auto_in_ar_bits_cache           (_axi4xbar_auto_anon_out_ar_bits_cache),
    .auto_in_ar_bits_prot            (_axi4xbar_auto_anon_out_ar_bits_prot),
    .auto_in_ar_bits_qos             (_axi4xbar_auto_anon_out_ar_bits_qos),
    .auto_in_r_ready                 (_axi4xbar_auto_anon_out_r_ready),
    .auto_out_aw_ready               (_axi4buf_auto_in_aw_ready),
    .auto_out_w_ready                (_axi4buf_auto_in_w_ready),
    .auto_out_b_valid                (_axi4buf_auto_in_b_valid),
    .auto_out_b_bits_id              (_axi4buf_auto_in_b_bits_id),
    .auto_out_b_bits_resp            (_axi4buf_auto_in_b_bits_resp),
    .auto_out_b_bits_echo_real_last  (_axi4buf_auto_in_b_bits_echo_real_last),
    .auto_out_ar_ready               (_axi4buf_auto_in_ar_ready),
    .auto_out_r_valid                (_axi4buf_auto_in_r_valid),
    .auto_out_r_bits_id              (_axi4buf_auto_in_r_bits_id),
    .auto_out_r_bits_data            (_axi4buf_auto_in_r_bits_data),
    .auto_out_r_bits_resp            (_axi4buf_auto_in_r_bits_resp),
    .auto_out_r_bits_echo_real_last  (_axi4buf_auto_in_r_bits_echo_real_last),
    .auto_out_r_bits_last            (_axi4buf_auto_in_r_bits_last),
    .auto_in_aw_ready                (_axi4frag_auto_in_aw_ready),
    .auto_in_w_ready                 (_axi4frag_auto_in_w_ready),
    .auto_in_b_valid                 (_axi4frag_auto_in_b_valid),
    .auto_in_b_bits_id               (_axi4frag_auto_in_b_bits_id),
    .auto_in_b_bits_resp             (_axi4frag_auto_in_b_bits_resp),
    .auto_in_ar_ready                (_axi4frag_auto_in_ar_ready),
    .auto_in_r_valid                 (_axi4frag_auto_in_r_valid),
    .auto_in_r_bits_id               (_axi4frag_auto_in_r_bits_id),
    .auto_in_r_bits_data             (_axi4frag_auto_in_r_bits_data),
    .auto_in_r_bits_resp             (_axi4frag_auto_in_r_bits_resp),
    .auto_in_r_bits_last             (_axi4frag_auto_in_r_bits_last),
    .auto_out_aw_valid               (_axi4frag_auto_out_aw_valid),
    .auto_out_aw_bits_id             (_axi4frag_auto_out_aw_bits_id),
    .auto_out_aw_bits_addr           (_axi4frag_auto_out_aw_bits_addr),
    .auto_out_aw_bits_size           (_axi4frag_auto_out_aw_bits_size),
    .auto_out_aw_bits_burst          (_axi4frag_auto_out_aw_bits_burst),
    .auto_out_aw_bits_lock           (_axi4frag_auto_out_aw_bits_lock),
    .auto_out_aw_bits_cache          (_axi4frag_auto_out_aw_bits_cache),
    .auto_out_aw_bits_prot           (_axi4frag_auto_out_aw_bits_prot),
    .auto_out_aw_bits_qos            (_axi4frag_auto_out_aw_bits_qos),
    .auto_out_aw_bits_echo_real_last (_axi4frag_auto_out_aw_bits_echo_real_last),
    .auto_out_w_valid                (_axi4frag_auto_out_w_valid),
    .auto_out_w_bits_data            (_axi4frag_auto_out_w_bits_data),
    .auto_out_w_bits_strb            (_axi4frag_auto_out_w_bits_strb),
    .auto_out_w_bits_last            (_axi4frag_auto_out_w_bits_last),
    .auto_out_b_ready                (_axi4frag_auto_out_b_ready),
    .auto_out_ar_valid               (_axi4frag_auto_out_ar_valid),
    .auto_out_ar_bits_id             (_axi4frag_auto_out_ar_bits_id),
    .auto_out_ar_bits_addr           (_axi4frag_auto_out_ar_bits_addr),
    .auto_out_ar_bits_size           (_axi4frag_auto_out_ar_bits_size),
    .auto_out_ar_bits_burst          (_axi4frag_auto_out_ar_bits_burst),
    .auto_out_ar_bits_lock           (_axi4frag_auto_out_ar_bits_lock),
    .auto_out_ar_bits_cache          (_axi4frag_auto_out_ar_bits_cache),
    .auto_out_ar_bits_prot           (_axi4frag_auto_out_ar_bits_prot),
    .auto_out_ar_bits_qos            (_axi4frag_auto_out_ar_bits_qos),
    .auto_out_ar_bits_echo_real_last (_axi4frag_auto_out_ar_bits_echo_real_last),
    .auto_out_r_ready                (_axi4frag_auto_out_r_ready)
  );
endmodule

module ResetSynchronizerShiftReg_w1_d3_i0(
  input  clock,
         reset,
         io_d,
  output io_q
);

  AsyncResetSynchronizerPrimitiveShiftReg_d3_i0 output_chain (
    .clock (clock),
    .reset (reset),
    .io_d  (io_d),
    .io_q  (io_q)
  );
endmodule

// external module EICG_wrapper

// external module SimDTM

module TestHarness(
  input  clock,
         reset,
  output io_success
);

  wire        _SimDTM_debug_req_valid;
  wire [6:0]  _SimDTM_debug_req_bits_addr;
  wire [31:0] _SimDTM_debug_req_bits_data;
  wire [1:0]  _SimDTM_debug_req_bits_op;
  wire        _SimDTM_debug_resp_ready;
  wire [31:0] _SimDTM_exit;
  wire        _gated_clock_debug_clock_gate_out;
  wire        _dmactiveAck_dmactiveAck_io_q;
  wire        _debug_reset_syncd_debug_reset_sync_io_q;
  wire        _mmio_mem_io_axi4_0_aw_ready;
  wire        _mmio_mem_io_axi4_0_w_ready;
  wire        _mmio_mem_io_axi4_0_b_valid;
  wire [3:0]  _mmio_mem_io_axi4_0_b_bits_id;
  wire [1:0]  _mmio_mem_io_axi4_0_b_bits_resp;
  wire        _mmio_mem_io_axi4_0_ar_ready;
  wire        _mmio_mem_io_axi4_0_r_valid;
  wire [3:0]  _mmio_mem_io_axi4_0_r_bits_id;
  wire [63:0] _mmio_mem_io_axi4_0_r_bits_data;
  wire [1:0]  _mmio_mem_io_axi4_0_r_bits_resp;
  wire        _mmio_mem_io_axi4_0_r_bits_last;
  wire        _mem_io_axi4_0_aw_ready;
  wire        _mem_io_axi4_0_w_ready;
  wire        _mem_io_axi4_0_b_valid;
  wire [3:0]  _mem_io_axi4_0_b_bits_id;
  wire [1:0]  _mem_io_axi4_0_b_bits_resp;
  wire        _mem_io_axi4_0_ar_ready;
  wire        _mem_io_axi4_0_r_valid;
  wire [3:0]  _mem_io_axi4_0_r_bits_id;
  wire [63:0] _mem_io_axi4_0_r_bits_data;
  wire [1:0]  _mem_io_axi4_0_r_bits_resp;
  wire        _mem_io_axi4_0_r_bits_last;
  wire        _dut_reset_reg_io_q;
  wire        _ldut_debug_clockeddmi_dmi_req_ready;
  wire        _ldut_debug_clockeddmi_dmi_resp_valid;
  wire [31:0] _ldut_debug_clockeddmi_dmi_resp_bits_data;
  wire [1:0]  _ldut_debug_clockeddmi_dmi_resp_bits_resp;
  wire        _ldut_debug_ndreset;
  wire        _ldut_debug_dmactive;
  wire        _ldut_mem_axi4_0_aw_valid;
  wire [3:0]  _ldut_mem_axi4_0_aw_bits_id;
  wire [31:0] _ldut_mem_axi4_0_aw_bits_addr;
  wire [7:0]  _ldut_mem_axi4_0_aw_bits_len;
  wire [2:0]  _ldut_mem_axi4_0_aw_bits_size;
  wire [1:0]  _ldut_mem_axi4_0_aw_bits_burst;
  wire        _ldut_mem_axi4_0_aw_bits_lock;
  wire [3:0]  _ldut_mem_axi4_0_aw_bits_cache;
  wire [2:0]  _ldut_mem_axi4_0_aw_bits_prot;
  wire [3:0]  _ldut_mem_axi4_0_aw_bits_qos;
  wire        _ldut_mem_axi4_0_w_valid;
  wire [63:0] _ldut_mem_axi4_0_w_bits_data;
  wire [7:0]  _ldut_mem_axi4_0_w_bits_strb;
  wire        _ldut_mem_axi4_0_w_bits_last;
  wire        _ldut_mem_axi4_0_b_ready;
  wire        _ldut_mem_axi4_0_ar_valid;
  wire [3:0]  _ldut_mem_axi4_0_ar_bits_id;
  wire [31:0] _ldut_mem_axi4_0_ar_bits_addr;
  wire [7:0]  _ldut_mem_axi4_0_ar_bits_len;
  wire [2:0]  _ldut_mem_axi4_0_ar_bits_size;
  wire [1:0]  _ldut_mem_axi4_0_ar_bits_burst;
  wire        _ldut_mem_axi4_0_ar_bits_lock;
  wire [3:0]  _ldut_mem_axi4_0_ar_bits_cache;
  wire [2:0]  _ldut_mem_axi4_0_ar_bits_prot;
  wire [3:0]  _ldut_mem_axi4_0_ar_bits_qos;
  wire        _ldut_mem_axi4_0_r_ready;
  wire        _ldut_mmio_axi4_0_aw_valid;
  wire [3:0]  _ldut_mmio_axi4_0_aw_bits_id;
  wire [30:0] _ldut_mmio_axi4_0_aw_bits_addr;
  wire [7:0]  _ldut_mmio_axi4_0_aw_bits_len;
  wire [2:0]  _ldut_mmio_axi4_0_aw_bits_size;
  wire [1:0]  _ldut_mmio_axi4_0_aw_bits_burst;
  wire        _ldut_mmio_axi4_0_aw_bits_lock;
  wire [3:0]  _ldut_mmio_axi4_0_aw_bits_cache;
  wire [2:0]  _ldut_mmio_axi4_0_aw_bits_prot;
  wire [3:0]  _ldut_mmio_axi4_0_aw_bits_qos;
  wire        _ldut_mmio_axi4_0_w_valid;
  wire [63:0] _ldut_mmio_axi4_0_w_bits_data;
  wire [7:0]  _ldut_mmio_axi4_0_w_bits_strb;
  wire        _ldut_mmio_axi4_0_w_bits_last;
  wire        _ldut_mmio_axi4_0_b_ready;
  wire        _ldut_mmio_axi4_0_ar_valid;
  wire [3:0]  _ldut_mmio_axi4_0_ar_bits_id;
  wire [30:0] _ldut_mmio_axi4_0_ar_bits_addr;
  wire [7:0]  _ldut_mmio_axi4_0_ar_bits_len;
  wire [2:0]  _ldut_mmio_axi4_0_ar_bits_size;
  wire [1:0]  _ldut_mmio_axi4_0_ar_bits_burst;
  wire        _ldut_mmio_axi4_0_ar_bits_lock;
  wire [3:0]  _ldut_mmio_axi4_0_ar_bits_cache;
  wire [2:0]  _ldut_mmio_axi4_0_ar_bits_prot;
  wire [3:0]  _ldut_mmio_axi4_0_ar_bits_qos;
  wire        _ldut_mmio_axi4_0_r_ready;
  wire        dut_reset = reset | _dut_reset_reg_io_q;
  wire        debug_reset = ~_debug_reset_syncd_debug_reset_sync_io_q;
  reg         clock_en;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (~reset & (|(_SimDTM_exit[31:1]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: *** FAILED *** (exit code = %d)\n\n    at Periphery.scala:203 assert(io.exit < 2.U, \"*** FAILED *** (exit code = %%%%d)\\n\", io.exit >> 1.U)\n",
                 {1'h0, _SimDTM_exit[31:1]});
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock or posedge debug_reset) begin
    if (debug_reset)
      clock_en <= 1'h1;
    else
      clock_en <= _dmactiveAck_dmactiveAck_io_q;
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin
      if (debug_reset)
        clock_en = 1'h1;
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  ExampleRocketSystem ldut (
    .io_aggregator_5_clock                (clock),
    .io_aggregator_5_reset                (dut_reset),
    .io_aggregator_4_clock                (clock),
    .io_aggregator_4_reset                (dut_reset),
    .io_aggregator_3_clock                (clock),
    .io_aggregator_3_reset                (dut_reset),
    .io_aggregator_2_clock                (clock),
    .io_aggregator_2_reset                (dut_reset),
    .io_aggregator_1_clock                (clock),
    .io_aggregator_1_reset                (dut_reset),
    .io_aggregator_0_clock                (clock),
    .io_aggregator_0_reset                (dut_reset),
    .resetctrl_hartIsInReset_0            (reset),
    .debug_clock                          (_gated_clock_debug_clock_gate_out),
    .debug_reset                          (debug_reset),
    .debug_clockeddmi_dmi_req_valid       (_SimDTM_debug_req_valid),
    .debug_clockeddmi_dmi_req_bits_addr   (_SimDTM_debug_req_bits_addr),
    .debug_clockeddmi_dmi_req_bits_data   (_SimDTM_debug_req_bits_data),
    .debug_clockeddmi_dmi_req_bits_op     (_SimDTM_debug_req_bits_op),
    .debug_clockeddmi_dmi_resp_ready      (_SimDTM_debug_resp_ready),
    .debug_clockeddmi_dmiClock            (clock),
    .debug_clockeddmi_dmiReset            (reset),
    .debug_dmactiveAck                    (_dmactiveAck_dmactiveAck_io_q),
    .mem_axi4_0_aw_ready                  (_mem_io_axi4_0_aw_ready),
    .mem_axi4_0_w_ready                   (_mem_io_axi4_0_w_ready),
    .mem_axi4_0_b_valid                   (_mem_io_axi4_0_b_valid),
    .mem_axi4_0_b_bits_id                 (_mem_io_axi4_0_b_bits_id),
    .mem_axi4_0_b_bits_resp               (_mem_io_axi4_0_b_bits_resp),
    .mem_axi4_0_ar_ready                  (_mem_io_axi4_0_ar_ready),
    .mem_axi4_0_r_valid                   (_mem_io_axi4_0_r_valid),
    .mem_axi4_0_r_bits_id                 (_mem_io_axi4_0_r_bits_id),
    .mem_axi4_0_r_bits_data               (_mem_io_axi4_0_r_bits_data),
    .mem_axi4_0_r_bits_resp               (_mem_io_axi4_0_r_bits_resp),
    .mem_axi4_0_r_bits_last               (_mem_io_axi4_0_r_bits_last),
    .mmio_axi4_0_aw_ready                 (_mmio_mem_io_axi4_0_aw_ready),
    .mmio_axi4_0_w_ready                  (_mmio_mem_io_axi4_0_w_ready),
    .mmio_axi4_0_b_valid                  (_mmio_mem_io_axi4_0_b_valid),
    .mmio_axi4_0_b_bits_id                (_mmio_mem_io_axi4_0_b_bits_id),
    .mmio_axi4_0_b_bits_resp              (_mmio_mem_io_axi4_0_b_bits_resp),
    .mmio_axi4_0_ar_ready                 (_mmio_mem_io_axi4_0_ar_ready),
    .mmio_axi4_0_r_valid                  (_mmio_mem_io_axi4_0_r_valid),
    .mmio_axi4_0_r_bits_id                (_mmio_mem_io_axi4_0_r_bits_id),
    .mmio_axi4_0_r_bits_data              (_mmio_mem_io_axi4_0_r_bits_data),
    .mmio_axi4_0_r_bits_resp              (_mmio_mem_io_axi4_0_r_bits_resp),
    .mmio_axi4_0_r_bits_last              (_mmio_mem_io_axi4_0_r_bits_last),
    .l2_frontend_bus_axi4_0_aw_valid      (1'h0),
    .l2_frontend_bus_axi4_0_aw_bits_id    (8'h0),
    .l2_frontend_bus_axi4_0_aw_bits_addr  (32'h0),
    .l2_frontend_bus_axi4_0_aw_bits_len   (8'h0),
    .l2_frontend_bus_axi4_0_aw_bits_size  (3'h0),
    .l2_frontend_bus_axi4_0_aw_bits_burst (2'h0),
    .l2_frontend_bus_axi4_0_aw_bits_lock  (1'h0),
    .l2_frontend_bus_axi4_0_aw_bits_cache (4'h0),
    .l2_frontend_bus_axi4_0_aw_bits_prot  (3'h0),
    .l2_frontend_bus_axi4_0_aw_bits_qos   (4'h0),
    .l2_frontend_bus_axi4_0_w_valid       (1'h0),
    .l2_frontend_bus_axi4_0_w_bits_data   (64'h0),
    .l2_frontend_bus_axi4_0_w_bits_strb   (8'h0),
    .l2_frontend_bus_axi4_0_w_bits_last   (1'h0),
    .l2_frontend_bus_axi4_0_b_ready       (1'h0),
    .l2_frontend_bus_axi4_0_ar_valid      (1'h0),
    .l2_frontend_bus_axi4_0_ar_bits_id    (8'h0),
    .l2_frontend_bus_axi4_0_ar_bits_addr  (32'h0),
    .l2_frontend_bus_axi4_0_ar_bits_len   (8'h0),
    .l2_frontend_bus_axi4_0_ar_bits_size  (3'h0),
    .l2_frontend_bus_axi4_0_ar_bits_burst (2'h0),
    .l2_frontend_bus_axi4_0_ar_bits_lock  (1'h0),
    .l2_frontend_bus_axi4_0_ar_bits_cache (4'h0),
    .l2_frontend_bus_axi4_0_ar_bits_prot  (3'h0),
    .l2_frontend_bus_axi4_0_ar_bits_qos   (4'h0),
    .l2_frontend_bus_axi4_0_r_ready       (1'h0),
    .interrupts                           (2'h0),
    .debug_clockeddmi_dmi_req_ready       (_ldut_debug_clockeddmi_dmi_req_ready),
    .debug_clockeddmi_dmi_resp_valid      (_ldut_debug_clockeddmi_dmi_resp_valid),
    .debug_clockeddmi_dmi_resp_bits_data  (_ldut_debug_clockeddmi_dmi_resp_bits_data),
    .debug_clockeddmi_dmi_resp_bits_resp  (_ldut_debug_clockeddmi_dmi_resp_bits_resp),
    .debug_ndreset                        (_ldut_debug_ndreset),
    .debug_dmactive                       (_ldut_debug_dmactive),
    .mem_axi4_0_aw_valid                  (_ldut_mem_axi4_0_aw_valid),
    .mem_axi4_0_aw_bits_id                (_ldut_mem_axi4_0_aw_bits_id),
    .mem_axi4_0_aw_bits_addr              (_ldut_mem_axi4_0_aw_bits_addr),
    .mem_axi4_0_aw_bits_len               (_ldut_mem_axi4_0_aw_bits_len),
    .mem_axi4_0_aw_bits_size              (_ldut_mem_axi4_0_aw_bits_size),
    .mem_axi4_0_aw_bits_burst             (_ldut_mem_axi4_0_aw_bits_burst),
    .mem_axi4_0_aw_bits_lock              (_ldut_mem_axi4_0_aw_bits_lock),
    .mem_axi4_0_aw_bits_cache             (_ldut_mem_axi4_0_aw_bits_cache),
    .mem_axi4_0_aw_bits_prot              (_ldut_mem_axi4_0_aw_bits_prot),
    .mem_axi4_0_aw_bits_qos               (_ldut_mem_axi4_0_aw_bits_qos),
    .mem_axi4_0_w_valid                   (_ldut_mem_axi4_0_w_valid),
    .mem_axi4_0_w_bits_data               (_ldut_mem_axi4_0_w_bits_data),
    .mem_axi4_0_w_bits_strb               (_ldut_mem_axi4_0_w_bits_strb),
    .mem_axi4_0_w_bits_last               (_ldut_mem_axi4_0_w_bits_last),
    .mem_axi4_0_b_ready                   (_ldut_mem_axi4_0_b_ready),
    .mem_axi4_0_ar_valid                  (_ldut_mem_axi4_0_ar_valid),
    .mem_axi4_0_ar_bits_id                (_ldut_mem_axi4_0_ar_bits_id),
    .mem_axi4_0_ar_bits_addr              (_ldut_mem_axi4_0_ar_bits_addr),
    .mem_axi4_0_ar_bits_len               (_ldut_mem_axi4_0_ar_bits_len),
    .mem_axi4_0_ar_bits_size              (_ldut_mem_axi4_0_ar_bits_size),
    .mem_axi4_0_ar_bits_burst             (_ldut_mem_axi4_0_ar_bits_burst),
    .mem_axi4_0_ar_bits_lock              (_ldut_mem_axi4_0_ar_bits_lock),
    .mem_axi4_0_ar_bits_cache             (_ldut_mem_axi4_0_ar_bits_cache),
    .mem_axi4_0_ar_bits_prot              (_ldut_mem_axi4_0_ar_bits_prot),
    .mem_axi4_0_ar_bits_qos               (_ldut_mem_axi4_0_ar_bits_qos),
    .mem_axi4_0_r_ready                   (_ldut_mem_axi4_0_r_ready),
    .mmio_axi4_0_aw_valid                 (_ldut_mmio_axi4_0_aw_valid),
    .mmio_axi4_0_aw_bits_id               (_ldut_mmio_axi4_0_aw_bits_id),
    .mmio_axi4_0_aw_bits_addr             (_ldut_mmio_axi4_0_aw_bits_addr),
    .mmio_axi4_0_aw_bits_len              (_ldut_mmio_axi4_0_aw_bits_len),
    .mmio_axi4_0_aw_bits_size             (_ldut_mmio_axi4_0_aw_bits_size),
    .mmio_axi4_0_aw_bits_burst            (_ldut_mmio_axi4_0_aw_bits_burst),
    .mmio_axi4_0_aw_bits_lock             (_ldut_mmio_axi4_0_aw_bits_lock),
    .mmio_axi4_0_aw_bits_cache            (_ldut_mmio_axi4_0_aw_bits_cache),
    .mmio_axi4_0_aw_bits_prot             (_ldut_mmio_axi4_0_aw_bits_prot),
    .mmio_axi4_0_aw_bits_qos              (_ldut_mmio_axi4_0_aw_bits_qos),
    .mmio_axi4_0_w_valid                  (_ldut_mmio_axi4_0_w_valid),
    .mmio_axi4_0_w_bits_data              (_ldut_mmio_axi4_0_w_bits_data),
    .mmio_axi4_0_w_bits_strb              (_ldut_mmio_axi4_0_w_bits_strb),
    .mmio_axi4_0_w_bits_last              (_ldut_mmio_axi4_0_w_bits_last),
    .mmio_axi4_0_b_ready                  (_ldut_mmio_axi4_0_b_ready),
    .mmio_axi4_0_ar_valid                 (_ldut_mmio_axi4_0_ar_valid),
    .mmio_axi4_0_ar_bits_id               (_ldut_mmio_axi4_0_ar_bits_id),
    .mmio_axi4_0_ar_bits_addr             (_ldut_mmio_axi4_0_ar_bits_addr),
    .mmio_axi4_0_ar_bits_len              (_ldut_mmio_axi4_0_ar_bits_len),
    .mmio_axi4_0_ar_bits_size             (_ldut_mmio_axi4_0_ar_bits_size),
    .mmio_axi4_0_ar_bits_burst            (_ldut_mmio_axi4_0_ar_bits_burst),
    .mmio_axi4_0_ar_bits_lock             (_ldut_mmio_axi4_0_ar_bits_lock),
    .mmio_axi4_0_ar_bits_cache            (_ldut_mmio_axi4_0_ar_bits_cache),
    .mmio_axi4_0_ar_bits_prot             (_ldut_mmio_axi4_0_ar_bits_prot),
    .mmio_axi4_0_ar_bits_qos              (_ldut_mmio_axi4_0_ar_bits_qos),
    .mmio_axi4_0_r_ready                  (_ldut_mmio_axi4_0_r_ready),
    .l2_frontend_bus_axi4_0_aw_ready      (/* unused */),
    .l2_frontend_bus_axi4_0_w_ready       (/* unused */),
    .l2_frontend_bus_axi4_0_b_valid       (/* unused */),
    .l2_frontend_bus_axi4_0_b_bits_id     (/* unused */),
    .l2_frontend_bus_axi4_0_b_bits_resp   (/* unused */),
    .l2_frontend_bus_axi4_0_ar_ready      (/* unused */),
    .l2_frontend_bus_axi4_0_r_valid       (/* unused */),
    .l2_frontend_bus_axi4_0_r_bits_id     (/* unused */),
    .l2_frontend_bus_axi4_0_r_bits_data   (/* unused */),
    .l2_frontend_bus_axi4_0_r_bits_resp   (/* unused */),
    .l2_frontend_bus_axi4_0_r_bits_last   (/* unused */)
  );
  AsyncResetRegVec_w1_i0 dut_reset_reg (
    .clock (clock),
    .reset (reset),
    .io_d  (_ldut_debug_ndreset),
    .io_q  (_dut_reset_reg_io_q)
  );
  SimAXIMem mem (
    .clock                   (clock),
    .reset                   (reset),
    .io_axi4_0_aw_valid      (_ldut_mem_axi4_0_aw_valid),
    .io_axi4_0_aw_bits_id    (_ldut_mem_axi4_0_aw_bits_id),
    .io_axi4_0_aw_bits_addr  (_ldut_mem_axi4_0_aw_bits_addr),
    .io_axi4_0_aw_bits_len   (_ldut_mem_axi4_0_aw_bits_len),
    .io_axi4_0_aw_bits_size  (_ldut_mem_axi4_0_aw_bits_size),
    .io_axi4_0_aw_bits_burst (_ldut_mem_axi4_0_aw_bits_burst),
    .io_axi4_0_aw_bits_lock  (_ldut_mem_axi4_0_aw_bits_lock),
    .io_axi4_0_aw_bits_cache (_ldut_mem_axi4_0_aw_bits_cache),
    .io_axi4_0_aw_bits_prot  (_ldut_mem_axi4_0_aw_bits_prot),
    .io_axi4_0_aw_bits_qos   (_ldut_mem_axi4_0_aw_bits_qos),
    .io_axi4_0_w_valid       (_ldut_mem_axi4_0_w_valid),
    .io_axi4_0_w_bits_data   (_ldut_mem_axi4_0_w_bits_data),
    .io_axi4_0_w_bits_strb   (_ldut_mem_axi4_0_w_bits_strb),
    .io_axi4_0_w_bits_last   (_ldut_mem_axi4_0_w_bits_last),
    .io_axi4_0_b_ready       (_ldut_mem_axi4_0_b_ready),
    .io_axi4_0_ar_valid      (_ldut_mem_axi4_0_ar_valid),
    .io_axi4_0_ar_bits_id    (_ldut_mem_axi4_0_ar_bits_id),
    .io_axi4_0_ar_bits_addr  (_ldut_mem_axi4_0_ar_bits_addr),
    .io_axi4_0_ar_bits_len   (_ldut_mem_axi4_0_ar_bits_len),
    .io_axi4_0_ar_bits_size  (_ldut_mem_axi4_0_ar_bits_size),
    .io_axi4_0_ar_bits_burst (_ldut_mem_axi4_0_ar_bits_burst),
    .io_axi4_0_ar_bits_lock  (_ldut_mem_axi4_0_ar_bits_lock),
    .io_axi4_0_ar_bits_cache (_ldut_mem_axi4_0_ar_bits_cache),
    .io_axi4_0_ar_bits_prot  (_ldut_mem_axi4_0_ar_bits_prot),
    .io_axi4_0_ar_bits_qos   (_ldut_mem_axi4_0_ar_bits_qos),
    .io_axi4_0_r_ready       (_ldut_mem_axi4_0_r_ready),
    .io_axi4_0_aw_ready      (_mem_io_axi4_0_aw_ready),
    .io_axi4_0_w_ready       (_mem_io_axi4_0_w_ready),
    .io_axi4_0_b_valid       (_mem_io_axi4_0_b_valid),
    .io_axi4_0_b_bits_id     (_mem_io_axi4_0_b_bits_id),
    .io_axi4_0_b_bits_resp   (_mem_io_axi4_0_b_bits_resp),
    .io_axi4_0_ar_ready      (_mem_io_axi4_0_ar_ready),
    .io_axi4_0_r_valid       (_mem_io_axi4_0_r_valid),
    .io_axi4_0_r_bits_id     (_mem_io_axi4_0_r_bits_id),
    .io_axi4_0_r_bits_data   (_mem_io_axi4_0_r_bits_data),
    .io_axi4_0_r_bits_resp   (_mem_io_axi4_0_r_bits_resp),
    .io_axi4_0_r_bits_last   (_mem_io_axi4_0_r_bits_last)
  );
  SimAXIMem_1 mmio_mem (
    .clock                   (clock),
    .reset                   (reset),
    .io_axi4_0_aw_valid      (_ldut_mmio_axi4_0_aw_valid),
    .io_axi4_0_aw_bits_id    (_ldut_mmio_axi4_0_aw_bits_id),
    .io_axi4_0_aw_bits_addr  (_ldut_mmio_axi4_0_aw_bits_addr),
    .io_axi4_0_aw_bits_len   (_ldut_mmio_axi4_0_aw_bits_len),
    .io_axi4_0_aw_bits_size  (_ldut_mmio_axi4_0_aw_bits_size),
    .io_axi4_0_aw_bits_burst (_ldut_mmio_axi4_0_aw_bits_burst),
    .io_axi4_0_aw_bits_lock  (_ldut_mmio_axi4_0_aw_bits_lock),
    .io_axi4_0_aw_bits_cache (_ldut_mmio_axi4_0_aw_bits_cache),
    .io_axi4_0_aw_bits_prot  (_ldut_mmio_axi4_0_aw_bits_prot),
    .io_axi4_0_aw_bits_qos   (_ldut_mmio_axi4_0_aw_bits_qos),
    .io_axi4_0_w_valid       (_ldut_mmio_axi4_0_w_valid),
    .io_axi4_0_w_bits_data   (_ldut_mmio_axi4_0_w_bits_data),
    .io_axi4_0_w_bits_strb   (_ldut_mmio_axi4_0_w_bits_strb),
    .io_axi4_0_w_bits_last   (_ldut_mmio_axi4_0_w_bits_last),
    .io_axi4_0_b_ready       (_ldut_mmio_axi4_0_b_ready),
    .io_axi4_0_ar_valid      (_ldut_mmio_axi4_0_ar_valid),
    .io_axi4_0_ar_bits_id    (_ldut_mmio_axi4_0_ar_bits_id),
    .io_axi4_0_ar_bits_addr  (_ldut_mmio_axi4_0_ar_bits_addr),
    .io_axi4_0_ar_bits_len   (_ldut_mmio_axi4_0_ar_bits_len),
    .io_axi4_0_ar_bits_size  (_ldut_mmio_axi4_0_ar_bits_size),
    .io_axi4_0_ar_bits_burst (_ldut_mmio_axi4_0_ar_bits_burst),
    .io_axi4_0_ar_bits_lock  (_ldut_mmio_axi4_0_ar_bits_lock),
    .io_axi4_0_ar_bits_cache (_ldut_mmio_axi4_0_ar_bits_cache),
    .io_axi4_0_ar_bits_prot  (_ldut_mmio_axi4_0_ar_bits_prot),
    .io_axi4_0_ar_bits_qos   (_ldut_mmio_axi4_0_ar_bits_qos),
    .io_axi4_0_r_ready       (_ldut_mmio_axi4_0_r_ready),
    .io_axi4_0_aw_ready      (_mmio_mem_io_axi4_0_aw_ready),
    .io_axi4_0_w_ready       (_mmio_mem_io_axi4_0_w_ready),
    .io_axi4_0_b_valid       (_mmio_mem_io_axi4_0_b_valid),
    .io_axi4_0_b_bits_id     (_mmio_mem_io_axi4_0_b_bits_id),
    .io_axi4_0_b_bits_resp   (_mmio_mem_io_axi4_0_b_bits_resp),
    .io_axi4_0_ar_ready      (_mmio_mem_io_axi4_0_ar_ready),
    .io_axi4_0_r_valid       (_mmio_mem_io_axi4_0_r_valid),
    .io_axi4_0_r_bits_id     (_mmio_mem_io_axi4_0_r_bits_id),
    .io_axi4_0_r_bits_data   (_mmio_mem_io_axi4_0_r_bits_data),
    .io_axi4_0_r_bits_resp   (_mmio_mem_io_axi4_0_r_bits_resp),
    .io_axi4_0_r_bits_last   (_mmio_mem_io_axi4_0_r_bits_last)
  );
  AsyncResetSynchronizerShiftReg_w1_d3_i0 debug_reset_syncd_debug_reset_sync (
    .clock (clock),
    .reset (reset),
    .io_d  (1'h1),
    .io_q  (_debug_reset_syncd_debug_reset_sync_io_q)
  );
  ResetSynchronizerShiftReg_w1_d3_i0 dmactiveAck_dmactiveAck (
    .clock (clock),
    .reset (debug_reset),
    .io_d  (_ldut_debug_dmactive),
    .io_q  (_dmactiveAck_dmactiveAck_io_q)
  );
  EICG_wrapper gated_clock_debug_clock_gate (
    .in      (clock),
    .test_en (1'h0),
    .en      (clock_en),
    .out     (_gated_clock_debug_clock_gate_out)
  );
  SimDTM SimDTM (
    .clk                  (clock),
    .reset                (reset),
    .debug_req_ready      (_ldut_debug_clockeddmi_dmi_req_ready),
    .debug_resp_valid     (_ldut_debug_clockeddmi_dmi_resp_valid),
    .debug_resp_bits_data (_ldut_debug_clockeddmi_dmi_resp_bits_data),
    .debug_resp_bits_resp (_ldut_debug_clockeddmi_dmi_resp_bits_resp),
    .debug_req_valid      (_SimDTM_debug_req_valid),
    .debug_req_bits_addr  (_SimDTM_debug_req_bits_addr),
    .debug_req_bits_data  (_SimDTM_debug_req_bits_data),
    .debug_req_bits_op    (_SimDTM_debug_req_bits_op),
    .debug_resp_ready     (_SimDTM_debug_resp_ready),
    .exit                 (_SimDTM_exit)
  );
  assign io_success = _SimDTM_exit == 32'h1;
endmodule


// ----- 8< ----- FILE "./plusarg_reader.v" ----- 8< -----

// See LICENSE.SiFive for license details.

//VCS coverage exclude_file

// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),
// but Incisive demands them. These default values should never be used.
module plusarg_reader #(
   parameter FORMAT="borked=%d",
   parameter WIDTH=1,
   parameter [WIDTH-1:0] DEFAULT=0
) (
   output [WIDTH-1:0] out
);

`ifdef SYNTHESIS
assign out = DEFAULT;
`else
reg [WIDTH-1:0] myplus;
assign out = myplus;

initial begin
   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;
end
`endif

endmodule

// ----- 8< ----- FILE "./SimDTM.v" ----- 8< -----

// See LICENSE.SiFive for license details.
//VCS coverage exclude_file

import "DPI-C" function int debug_tick
(
  output bit     debug_req_valid,
  input  bit     debug_req_ready,
  output int     debug_req_bits_addr,
  output int     debug_req_bits_op,
  output int     debug_req_bits_data,

  input  bit        debug_resp_valid,
  output bit        debug_resp_ready,
  input  int        debug_resp_bits_resp,
  input  int        debug_resp_bits_data
);

module SimDTM(
  input clk,
  input reset,

  output        debug_req_valid,
  input         debug_req_ready,
  output [ 6:0] debug_req_bits_addr,
  output [ 1:0] debug_req_bits_op,
  output [31:0] debug_req_bits_data,

  input         debug_resp_valid,
  output        debug_resp_ready,
  input  [ 1:0] debug_resp_bits_resp,
  input  [31:0] debug_resp_bits_data,

  output [31:0] exit
);

  bit r_reset;

  wire __debug_req_ready = debug_req_ready;
  wire __debug_resp_valid = debug_resp_valid;
  wire [31:0] __debug_resp_bits_resp = {30'b0, debug_resp_bits_resp};
  wire [31:0] __debug_resp_bits_data = debug_resp_bits_data;

  bit __debug_req_valid;
  int __debug_req_bits_addr;
  int __debug_req_bits_op;
  int __debug_req_bits_data;
  bit __debug_resp_ready;
  int __exit;

  reg        debug_req_valid_reg;
  reg [ 6:0] debug_req_bits_addr_reg;
  reg [ 1:0] debug_req_bits_op_reg;
  reg [31:0] debug_req_bits_data_reg;
  reg        debug_resp_ready_reg;
  reg [31:0] exit_reg;

  always @(posedge clk) begin
    debug_req_valid_reg <= __debug_req_valid;
    debug_req_bits_addr_reg <= __debug_req_bits_addr[6:0];
    debug_req_bits_op_reg <= __debug_req_bits_op[1:0];
    debug_req_bits_data_reg <= __debug_req_bits_data[31:0];
    debug_resp_ready_reg <= __debug_resp_ready;
    exit_reg <= __exit;
  end

  assign debug_req_valid = debug_req_valid_reg;
  assign debug_req_bits_addr = debug_req_bits_addr_reg;
  assign debug_req_bits_op = debug_req_bits_op_reg;
  assign debug_req_bits_data = debug_req_bits_data_reg;
  assign debug_resp_ready = debug_resp_ready_reg;
  assign exit = exit_reg;

  always @(negedge clk)
  begin
    r_reset <= reset;
    if (reset || r_reset)
    begin
      __debug_req_valid = 0;
      __debug_resp_ready = 0;
      __exit = 0;
    end
    else
    begin
      __exit = debug_tick(
        __debug_req_valid,
        __debug_req_ready,
        __debug_req_bits_addr,
        __debug_req_bits_op,
        __debug_req_bits_data,
        __debug_resp_valid,
        __debug_resp_ready,
        __debug_resp_bits_resp,
        __debug_resp_bits_data
      );
    end
  end
endmodule

// ----- 8< ----- FILE "./SimDTM.cc" ----- 8< -----

// See LICENSE.SiFive for license details.

#include <fesvr/dtm.h>
#include <vpi_user.h>
#include <svdpi.h>

dtm_t* dtm;

extern "C" int debug_tick
(
  unsigned char* debug_req_valid,
  unsigned char  debug_req_ready,
  int*           debug_req_bits_addr,
  int*           debug_req_bits_op,
  int*           debug_req_bits_data,
  unsigned char  debug_resp_valid,
  unsigned char* debug_resp_ready,
  int            debug_resp_bits_resp,
  int            debug_resp_bits_data
)
{
  if (!dtm) {
    s_vpi_vlog_info info;
    if (!vpi_get_vlog_info(&info))
      abort();
      dtm = new dtm_t(info.argc, info.argv);
  }

  dtm_t::resp resp_bits;
  resp_bits.resp = debug_resp_bits_resp;
  resp_bits.data = debug_resp_bits_data;

  dtm->tick
  (
    debug_req_ready,
    debug_resp_valid,
    resp_bits
  );

  *debug_resp_ready = dtm->resp_ready();
  *debug_req_valid = dtm->req_valid();
  *debug_req_bits_addr = dtm->req_bits().addr;
  *debug_req_bits_op = dtm->req_bits().op;
  *debug_req_bits_data = dtm->req_bits().data;

  return dtm->done() ? (dtm->exit_code() << 1 | 1) : 0;
}

// ----- 8< ----- FILE "firrtl_black_box_resource_files.f" ----- 8< -----

SimDTM.cc
SimDTM.v
plusarg_reader.v
